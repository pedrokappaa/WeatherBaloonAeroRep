
Balloon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  1 .text         000090c8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  080092c0  080092c0  000192c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800980c  0800980c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800980c  0800980c  0001980c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009814  08009814  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009814  08009814  00019814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009818  08009818  00019818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800981c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a24  20000024  08009840  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a48  08009840  00022a48  2**0
=======
  1 .text         0000bdd0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800bfd0  0800bfd0  0001bfd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c57c  0800c57c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c57c  0800c57c  0001c57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c584  0800c584  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c584  0800c584  0001c584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c588  0800c588  0001c588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c58c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  200001f8  0800c784  000201f8  2**2
=======
  1 .text         0000bc18  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800be18  0800be18  0001be18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c344  0800c344  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c344  0800c344  0001c344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c34c  0800c34c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c34c  0800c34c  0001c34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c350  0800c350  0001c350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f4  200001f8  0800c54c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ec  0800c54c  000208ec  2**0
>>>>>>> Stashed changes
                  ALLOC
 10 ._user_heap_stack 00000604  200008ac  0800c784  000208ac  2**0
>>>>>>> Stashed changes
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 12 .debug_info   00013573  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f2b  00000000  00000000  000335c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  000364f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  000373e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a430  00000000  00000000  00038178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017354  00000000  00000000  000625a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa94a  00000000  00000000  000798fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00174246  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bbc  00000000  00000000  00174298  2**2
=======
 12 .debug_info   000170a2  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003535  00000000  00000000  000372c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  0003a800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0003baf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad93  00000000  00000000  0003cc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019fa8  00000000  00000000  000679fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001052c8  00000000  00000000  000819a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00186c6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006180  00000000  00000000  00186cbc  2**2
>>>>>>> Stashed changes
=======
 12 .debug_info   0001706b  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003566  00000000  00000000  00037291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  0003a7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0003baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad93  00000000  00000000  0003cc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f50  00000000  00000000  000679f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001052a7  00000000  00000000  00081943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00186bea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000617c  00000000  00000000  00186c3c  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

<<<<<<< Updated upstream
080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000024 	.word	0x20000024
 8000214:	00000000 	.word	0x00000000
 8000218:	080092a8 	.word	0x080092a8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000028 	.word	0x20000028
 8000234:	080092a8 	.word	0x080092a8
=======
08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 8000220:	0800bfb8 	.word	0x0800bfb8
=======
 8000220:	0800be00 	.word	0x0800be00
>>>>>>> Stashed changes

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
<<<<<<< Updated upstream
 800023c:	0800bfb8 	.word	0x0800bfb8
>>>>>>> Stashed changes
=======
 800023c:	0800be00 	.word	0x0800be00
>>>>>>> Stashed changes

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000552:	463b      	mov	r3, r7
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
<<<<<<< Updated upstream
  hadc3.Instance = ADC3;
 800055e:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <MX_ADC3_Init+0x98>)
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <MX_ADC3_Init+0x9c>)
 8000562:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <MX_ADC3_Init+0x98>)
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800056a:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <MX_ADC3_Init+0x98>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <MX_ADC3_Init+0x98>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000576:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <MX_ADC3_Init+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <MX_ADC3_Init+0x98>)
 800057e:	2200      	movs	r2, #0
 8000580:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <MX_ADC3_Init+0x98>)
 8000586:	2200      	movs	r2, #0
 8000588:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <MX_ADC3_Init+0x98>)
 800058c:	4a17      	ldr	r2, [pc, #92]	; (80005ec <MX_ADC3_Init+0xa0>)
 800058e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <MX_ADC3_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <MX_ADC3_Init+0x98>)
 8000598:	2201      	movs	r2, #1
 800059a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_ADC3_Init+0x98>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_ADC3_Init+0x98>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <MX_ADC3_Init+0x98>)
 80005ac:	f001 fb1a 	bl	8001be4 <HAL_ADC_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80005b6:	f000 ff7b 	bl	80014b0 <Error_Handler>
=======
  hadc1.Instance = ADC1;
 80009ee:	4b3e      	ldr	r3, [pc, #248]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 80009f0:	4a3e      	ldr	r2, [pc, #248]	; (8000aec <MX_ADC1_Init+0x110>)
 80009f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009f4:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a00:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a06:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0c:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000a1c:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a1e:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a2c:	2205      	movs	r2, #5
 8000a2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a30:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a38:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3e:	482a      	ldr	r0, [pc, #168]	; (8000ae8 <MX_ADC1_Init+0x10c>)
<<<<<<< Updated upstream
 8000a40:	f001 fe92 	bl	8002768 <HAL_ADC_Init>
=======
 8000a40:	f001 fdb6 	bl	80025b0 <HAL_ADC_Init>
>>>>>>> Stashed changes
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000a4a:	f001 f91f 	bl	8001c8c <Error_Handler>
=======
 8000a4a:	f001 f839 	bl	8001ac0 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_ADC1_Init+0x114>)
 8000a50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <MX_ADC1_Init+0x10c>)
<<<<<<< Updated upstream
 8000a60:	f001 fec6 	bl	80027f0 <HAL_ADC_ConfigChannel>
=======
 8000a60:	f001 fdea 	bl	8002638 <HAL_ADC_ConfigChannel>
>>>>>>> Stashed changes
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000a6a:	f001 f90f 	bl	8001c8c <Error_Handler>
>>>>>>> Stashed changes
=======
 8000a6a:	f001 f829 	bl	8001ac0 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
<<<<<<< Updated upstream
 80005ba:	2300      	movs	r3, #0
 80005bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005be:	2301      	movs	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	4619      	mov	r1, r3
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <MX_ADC3_Init+0x98>)
 80005cc:	f001 fb4e 	bl	8001c6c <HAL_ADC_ConfigChannel>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80005d6:	f000 ff6b 	bl	80014b0 <Error_Handler>
=======
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <MX_ADC1_Init+0x10c>)
<<<<<<< Updated upstream
 8000a7c:	f001 feb8 	bl	80027f0 <HAL_ADC_ConfigChannel>
=======
 8000a7c:	f001 fddc 	bl	8002638 <HAL_ADC_ConfigChannel>
>>>>>>> Stashed changes
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000a86:	f001 f901 	bl	8001c8c <Error_Handler>
>>>>>>> Stashed changes
=======
 8000a86:	f001 f81b 	bl	8001ac0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN ADC3_Init 2 */

<<<<<<< Updated upstream
  /* USER CODE END ADC3_Init 2 */
=======
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <MX_ADC1_Init+0x10c>)
<<<<<<< Updated upstream
 8000a98:	f001 feaa 	bl	80027f0 <HAL_ADC_ConfigChannel>
=======
 8000a98:	f001 fdce 	bl	8002638 <HAL_ADC_ConfigChannel>
>>>>>>> Stashed changes
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000aa2:	f001 f8f3 	bl	8001c8c <Error_Handler>
=======
 8000aa2:	f001 f80d 	bl	8001ac0 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aae:	463b      	mov	r3, r7
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_ADC1_Init+0x10c>)
<<<<<<< Updated upstream
 8000ab4:	f001 fe9c 	bl	80027f0 <HAL_ADC_ConfigChannel>
=======
 8000ab4:	f001 fdc0 	bl	8002638 <HAL_ADC_ConfigChannel>
>>>>>>> Stashed changes
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000abe:	f001 f8e5 	bl	8001c8c <Error_Handler>
=======
 8000abe:	f000 ffff 	bl	8001ac0 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ac2:	230d      	movs	r3, #13
 8000ac4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aca:	463b      	mov	r3, r7
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_ADC1_Init+0x10c>)
<<<<<<< Updated upstream
 8000ad0:	f001 fe8e 	bl	80027f0 <HAL_ADC_ConfigChannel>
=======
 8000ad0:	f001 fdb2 	bl	8002638 <HAL_ADC_ConfigChannel>
>>>>>>> Stashed changes
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_ADC1_Init+0x102>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000ada:	f001 f8d7 	bl	8001c8c <Error_Handler>
=======
 8000ada:	f000 fff1 	bl	8001ac0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
>>>>>>> Stashed changes

}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000040 	.word	0x20000040
 80005e8:	40012200 	.word	0x40012200
 80005ec:	0f000001 	.word	0x0f000001

080005f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a15      	ldr	r2, [pc, #84]	; (8000664 <HAL_ADC_MspInit+0x74>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d123      	bne.n	800065a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <HAL_ADC_MspInit+0x78>)
 8000614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000616:	4a14      	ldr	r2, [pc, #80]	; (8000668 <HAL_ADC_MspInit+0x78>)
 8000618:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800061c:	6453      	str	r3, [r2, #68]	; 0x44
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_ADC_MspInit+0x78>)
 8000620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <HAL_ADC_MspInit+0x78>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <HAL_ADC_MspInit+0x78>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <HAL_ADC_MspInit+0x78>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000642:	2301      	movs	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000646:	2303      	movs	r3, #3
 8000648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< Updated upstream
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <HAL_ADC_MspInit+0x7c>)
 8000656:	f001 fefd 	bl	8002454 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */
=======
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4823      	ldr	r0, [pc, #140]	; (8000c00 <HAL_ADC_MspInit+0x10c>)
<<<<<<< Updated upstream
 8000b72:	f002 fd1b 	bl	80035ac <HAL_GPIO_Init>
=======
 8000b72:	f002 fc3f 	bl	80033f4 <HAL_GPIO_Init>
>>>>>>> Stashed changes

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000b76:	2309      	movs	r3, #9
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	481e      	ldr	r0, [pc, #120]	; (8000c04 <HAL_ADC_MspInit+0x110>)
<<<<<<< Updated upstream
 8000b8a:	f002 fd0f 	bl	80035ac <HAL_GPIO_Init>
=======
 8000b8a:	f002 fc33 	bl	80033f4 <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000b90:	4a1e      	ldr	r2, [pc, #120]	; (8000c0c <HAL_ADC_MspInit+0x118>)
 8000b92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bc4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <HAL_ADC_MspInit+0x114>)
<<<<<<< Updated upstream
 8000bd4:	f002 f96e 	bl	8002eb4 <HAL_DMA_Init>
=======
 8000bd4:	f002 f892 	bl	8002cfc <HAL_DMA_Init>
>>>>>>> Stashed changes
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
<<<<<<< Updated upstream
 8000bde:	f001 f855 	bl	8001c8c <Error_Handler>
=======
 8000bde:	f000 ff6f 	bl	8001ac0 <Error_Handler>
>>>>>>> Stashed changes
    }
>>>>>>> Stashed changes

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800065a:	bf00      	nop
 800065c:	3728      	adds	r7, #40	; 0x28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40012200 	.word	0x40012200
 8000668:	40023800 	.word	0x40023800
 800066c:	40020000 	.word	0x40020000

<<<<<<< Updated upstream
08000670 <SELECT>:
=======
08000c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2038      	movs	r0, #56	; 0x38
<<<<<<< Updated upstream
 8000c34:	f002 f907 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c38:	2038      	movs	r0, #56	; 0x38
 8000c3a:	f002 f920 	bl	8002e7e <HAL_NVIC_EnableIRQ>
=======
 8000c34:	f002 f82b 	bl	8002c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c38:	2038      	movs	r0, #56	; 0x38
 8000c3a:	f002 f844 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <SELECT>:
>>>>>>> Stashed changes
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
<<<<<<< Updated upstream
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <SELECT+0x1c>)
 800067c:	f002 f896 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000680:	2001      	movs	r0, #1
 8000682:	f001 fa8b 	bl	8001b9c <HAL_Delay>
=======
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c56:	4804      	ldr	r0, [pc, #16]	; (8000c68 <SELECT+0x1c>)
<<<<<<< Updated upstream
 8000c58:	f002 fe54 	bl	8003904 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f001 fd5f 	bl	8002720 <HAL_Delay>
>>>>>>> Stashed changes
=======
 8000c58:	f002 fd78 	bl	800374c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f001 fc83 	bl	8002568 <HAL_Delay>
>>>>>>> Stashed changes
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40020c00 	.word	0x40020c00

08000690 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
<<<<<<< Updated upstream
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069a:	4804      	ldr	r0, [pc, #16]	; (80006ac <DESELECT+0x1c>)
 800069c:	f002 f886 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f001 fa7b 	bl	8001b9c <HAL_Delay>
=======
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <DESELECT+0x1c>)
<<<<<<< Updated upstream
 8000c78:	f002 fe44 	bl	8003904 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f001 fd4f 	bl	8002720 <HAL_Delay>
>>>>>>> Stashed changes
=======
 8000c78:	f002 fd68 	bl	800374c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f001 fc73 	bl	8002568 <HAL_Delay>
>>>>>>> Stashed changes
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40020c00 	.word	0x40020c00

080006b0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006ba:	bf00      	nop
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <SPI_TxByte+0x30>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d1f8      	bne.n	80006bc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
<<<<<<< Updated upstream
 80006ca:	1df9      	adds	r1, r7, #7
 80006cc:	2364      	movs	r3, #100	; 0x64
 80006ce:	2201      	movs	r2, #1
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <SPI_TxByte+0x30>)
 80006d2:	f003 fa5c 	bl	8003b8e <HAL_SPI_Transmit>
=======
 8000ca6:	1df9      	adds	r1, r7, #7
 8000ca8:	2364      	movs	r3, #100	; 0x64
 8000caa:	2201      	movs	r2, #1
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <SPI_TxByte+0x30>)
<<<<<<< Updated upstream
 8000cae:	f004 f81a 	bl	8004ce6 <HAL_SPI_Transmit>
>>>>>>> Stashed changes
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20002308 	.word	0x20002308
=======
 8000cae:	f003 ff3e 	bl	8004b2e <HAL_SPI_Transmit>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000310 	.word	0x20000310
>>>>>>> Stashed changes

080006e4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006f0:	bf00      	nop
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <SPI_TxBuffer+0x30>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	f003 0302 	and.w	r3, r3, #2
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d1f8      	bne.n	80006f2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
<<<<<<< Updated upstream
 8000700:	887a      	ldrh	r2, [r7, #2]
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	4803      	ldr	r0, [pc, #12]	; (8000714 <SPI_TxBuffer+0x30>)
 8000708:	f003 fa41 	bl	8003b8e <HAL_SPI_Transmit>
=======
 8000cdc:	887a      	ldrh	r2, [r7, #2]
 8000cde:	2364      	movs	r3, #100	; 0x64
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <SPI_TxBuffer+0x30>)
<<<<<<< Updated upstream
 8000ce4:	f003 ffff 	bl	8004ce6 <HAL_SPI_Transmit>
>>>>>>> Stashed changes
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20002308 	.word	0x20002308
=======
 8000ce4:	f003 ff23 	bl	8004b2e <HAL_SPI_Transmit>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000310 	.word	0x20000310
>>>>>>> Stashed changes

08000718 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800071e:	23ff      	movs	r3, #255	; 0xff
 8000720:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000722:	bf00      	nop
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <SPI_RxByte+0x34>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	2b02      	cmp	r3, #2
 8000730:	d1f8      	bne.n	8000724 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
<<<<<<< Updated upstream
 8000732:	1dba      	adds	r2, r7, #6
 8000734:	1df9      	adds	r1, r7, #7
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2301      	movs	r3, #1
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <SPI_RxByte+0x34>)
 800073e:	f003 fb94 	bl	8003e6a <HAL_SPI_TransmitReceive>
=======
 8000d0e:	1dba      	adds	r2, r7, #6
 8000d10:	1df9      	adds	r1, r7, #7
 8000d12:	2364      	movs	r3, #100	; 0x64
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2301      	movs	r3, #1
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <SPI_RxByte+0x34>)
<<<<<<< Updated upstream
 8000d1a:	f004 f952 	bl	8004fc2 <HAL_SPI_TransmitReceive>
>>>>>>> Stashed changes
=======
 8000d1a:	f004 f876 	bl	8004e0a <HAL_SPI_TransmitReceive>
>>>>>>> Stashed changes

	return data;
 8000742:	79bb      	ldrb	r3, [r7, #6]
}
<<<<<<< Updated upstream
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20002308 	.word	0x20002308
=======
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000310 	.word	0x20000310
>>>>>>> Stashed changes

08000750 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000758:	f7ff ffde 	bl	8000718 <SPI_RxByte>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	701a      	strb	r2, [r3, #0]
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <SD_ReadyWait+0x30>)
 8000774:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000778:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800077a:	f7ff ffcd 	bl	8000718 <SPI_RxByte>
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2bff      	cmp	r3, #255	; 0xff
 8000786:	d003      	beq.n	8000790 <SD_ReadyWait+0x24>
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <SD_ReadyWait+0x30>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d1f4      	bne.n	800077a <SD_ReadyWait+0xe>

	return res;
 8000790:	79fb      	ldrb	r3, [r7, #7]
}
<<<<<<< Updated upstream
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20002370 	.word	0x20002370
=======
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200003dc 	.word	0x200003dc
>>>>>>> Stashed changes

080007a0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80007a6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80007aa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80007ac:	f7ff ff70 	bl	8000690 <DESELECT>
	for(int i = 0; i < 10; i++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	e005      	b.n	80007c2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80007b6:	20ff      	movs	r0, #255	; 0xff
 80007b8:	f7ff ff7a 	bl	80006b0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	3301      	adds	r3, #1
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	2b09      	cmp	r3, #9
 80007c6:	ddf6      	ble.n	80007b6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80007c8:	f7ff ff52 	bl	8000670 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80007cc:	2340      	movs	r3, #64	; 0x40
 80007ce:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80007e0:	2395      	movs	r3, #149	; 0x95
 80007e2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80007e4:	463b      	mov	r3, r7
 80007e6:	2106      	movs	r1, #6
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff7b 	bl	80006e4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80007ee:	e002      	b.n	80007f6 <SD_PowerOn+0x56>
	{
		cnt--;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80007f6:	f7ff ff8f 	bl	8000718 <SPI_RxByte>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d002      	beq.n	8000806 <SD_PowerOn+0x66>
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d1f4      	bne.n	80007f0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000806:	f7ff ff43 	bl	8000690 <DESELECT>
	SPI_TxByte(0XFF);
 800080a:	20ff      	movs	r0, #255	; 0xff
 800080c:	f7ff ff50 	bl	80006b0 <SPI_TxByte>

	PowerFlag = 1;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <SD_PowerOn+0x80>)
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000089 	.word	0x20000089

08000824 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <SD_PowerOff+0x14>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	20000089 	.word	0x20000089

0800083c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <SD_CheckPower+0x14>)
 8000842:	781b      	ldrb	r3, [r3, #0]
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000089 	.word	0x20000089

08000854 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <SD_RxDataBlock+0x58>)
 8000860:	22c8      	movs	r2, #200	; 0xc8
 8000862:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000864:	f7ff ff58 	bl	8000718 <SPI_RxByte>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	2bff      	cmp	r3, #255	; 0xff
 8000870:	d103      	bne.n	800087a <SD_RxDataBlock+0x26>
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <SD_RxDataBlock+0x58>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1f4      	bne.n	8000864 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	2bfe      	cmp	r3, #254	; 0xfe
 800087e:	d001      	beq.n	8000884 <SD_RxDataBlock+0x30>
 8000880:	2300      	movs	r3, #0
 8000882:	e00f      	b.n	80008a4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff60 	bl	8000750 <SPI_RxBytePtr>
	} while(len--);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	1e5a      	subs	r2, r3, #1
 8000894:	603a      	str	r2, [r7, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1f4      	bne.n	8000884 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800089a:	f7ff ff3d 	bl	8000718 <SPI_RxByte>
	SPI_RxByte();
 800089e:	f7ff ff3b 	bl	8000718 <SPI_RxByte>

	return TRUE;
 80008a2:	2301      	movs	r3, #1
}
<<<<<<< Updated upstream
 80008a4:	4618      	mov	r0, r3
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000236e 	.word	0x2000236e
=======
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200003da 	.word	0x200003da
>>>>>>> Stashed changes

080008b0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80008c0:	f7ff ff54 	bl	800076c <SD_ReadyWait>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2bff      	cmp	r3, #255	; 0xff
 80008c8:	d001      	beq.n	80008ce <SD_TxDataBlock+0x1e>
 80008ca:	2300      	movs	r3, #0
 80008cc:	e02f      	b.n	800092e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff feed 	bl	80006b0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	2bfd      	cmp	r3, #253	; 0xfd
 80008da:	d020      	beq.n	800091e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80008dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff feff 	bl	80006e4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80008e6:	f7ff ff17 	bl	8000718 <SPI_RxByte>
		SPI_RxByte();
 80008ea:	f7ff ff15 	bl	8000718 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80008ee:	e00b      	b.n	8000908 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80008f0:	f7ff ff12 	bl	8000718 <SPI_RxByte>
 80008f4:	4603      	mov	r3, r0
 80008f6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	f003 031f 	and.w	r3, r3, #31
 80008fe:	2b05      	cmp	r3, #5
 8000900:	d006      	beq.n	8000910 <SD_TxDataBlock+0x60>
			i++;
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	3301      	adds	r3, #1
 8000906:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000908:	7bbb      	ldrb	r3, [r7, #14]
 800090a:	2b40      	cmp	r3, #64	; 0x40
 800090c:	d9f0      	bls.n	80008f0 <SD_TxDataBlock+0x40>
 800090e:	e000      	b.n	8000912 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000910:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000912:	bf00      	nop
 8000914:	f7ff ff00 	bl	8000718 <SPI_RxByte>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0fa      	beq.n	8000914 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	f003 031f 	and.w	r3, r3, #31
 8000924:	2b05      	cmp	r3, #5
 8000926:	d101      	bne.n	800092c <SD_TxDataBlock+0x7c>
 8000928:	2301      	movs	r3, #1
 800092a:	e000      	b.n	800092e <SD_TxDataBlock+0x7e>

	return FALSE;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b084      	sub	sp, #16
 800093a:	af00      	add	r7, sp, #0
 800093c:	4603      	mov	r3, r0
 800093e:	6039      	str	r1, [r7, #0]
 8000940:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000942:	f7ff ff13 	bl	800076c <SD_ReadyWait>
 8000946:	4603      	mov	r3, r0
 8000948:	2bff      	cmp	r3, #255	; 0xff
 800094a:	d001      	beq.n	8000950 <SD_SendCmd+0x1a>
 800094c:	23ff      	movs	r3, #255	; 0xff
 800094e:	e042      	b.n	80009d6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff feac 	bl	80006b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	0e1b      	lsrs	r3, r3, #24
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fea6 	bl	80006b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	0c1b      	lsrs	r3, r3, #16
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fea0 	bl	80006b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	0a1b      	lsrs	r3, r3, #8
 8000974:	b2db      	uxtb	r3, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fe9a 	bl	80006b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fe95 	bl	80006b0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b40      	cmp	r3, #64	; 0x40
 800098a:	d102      	bne.n	8000992 <SD_SendCmd+0x5c>
 800098c:	2395      	movs	r3, #149	; 0x95
 800098e:	73fb      	strb	r3, [r7, #15]
 8000990:	e007      	b.n	80009a2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b48      	cmp	r3, #72	; 0x48
 8000996:	d102      	bne.n	800099e <SD_SendCmd+0x68>
 8000998:	2387      	movs	r3, #135	; 0x87
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	e001      	b.n	80009a2 <SD_SendCmd+0x6c>
	else crc = 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fe83 	bl	80006b0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b4c      	cmp	r3, #76	; 0x4c
 80009ae:	d101      	bne.n	80009b4 <SD_SendCmd+0x7e>
 80009b0:	f7ff feb2 	bl	8000718 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80009b4:	230a      	movs	r3, #10
 80009b6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80009b8:	f7ff feae 	bl	8000718 <SPI_RxByte>
 80009bc:	4603      	mov	r3, r0
 80009be:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80009c0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	da05      	bge.n	80009d4 <SD_SendCmd+0x9e>
 80009c8:	7bbb      	ldrb	r3, [r7, #14]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	73bb      	strb	r3, [r7, #14]
 80009ce:	7bbb      	ldrb	r3, [r7, #14]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1f1      	bne.n	80009b8 <SD_SendCmd+0x82>

	return res;
 80009d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SD_disk_initialize+0x14>
 80009f0:	2301      	movs	r3, #1
 80009f2:	e0d1      	b.n	8000b98 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80009f4:	4b6a      	ldr	r3, [pc, #424]	; (8000ba0 <SD_disk_initialize+0x1c0>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d003      	beq.n	8000a0a <SD_disk_initialize+0x2a>
 8000a02:	4b67      	ldr	r3, [pc, #412]	; (8000ba0 <SD_disk_initialize+0x1c0>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	e0c6      	b.n	8000b98 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000a0a:	f7ff fec9 	bl	80007a0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000a0e:	f7ff fe2f 	bl	8000670 <SELECT>

	/* check disk type */
	type = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000a16:	2100      	movs	r1, #0
 8000a18:	2040      	movs	r0, #64	; 0x40
 8000a1a:	f7ff ff8c 	bl	8000936 <SD_SendCmd>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	f040 80a1 	bne.w	8000b68 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000a26:	4b5f      	ldr	r3, [pc, #380]	; (8000ba4 <SD_disk_initialize+0x1c4>)
 8000a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a2c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000a2e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000a32:	2048      	movs	r0, #72	; 0x48
 8000a34:	f7ff ff7f 	bl	8000936 <SD_SendCmd>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d155      	bne.n	8000aea <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000a3e:	2300      	movs	r3, #0
 8000a40:	73fb      	strb	r3, [r7, #15]
 8000a42:	e00c      	b.n	8000a5e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000a44:	7bfc      	ldrb	r4, [r7, #15]
 8000a46:	f7ff fe67 	bl	8000718 <SPI_RxByte>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	f104 0310 	add.w	r3, r4, #16
 8000a52:	443b      	add	r3, r7
 8000a54:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d9ef      	bls.n	8000a44 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000a64:	7abb      	ldrb	r3, [r7, #10]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d17e      	bne.n	8000b68 <SD_disk_initialize+0x188>
 8000a6a:	7afb      	ldrb	r3, [r7, #11]
 8000a6c:	2baa      	cmp	r3, #170	; 0xaa
 8000a6e:	d17b      	bne.n	8000b68 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a70:	2100      	movs	r1, #0
 8000a72:	2077      	movs	r0, #119	; 0x77
 8000a74:	f7ff ff5f 	bl	8000936 <SD_SendCmd>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d807      	bhi.n	8000a8e <SD_disk_initialize+0xae>
 8000a7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000a82:	2069      	movs	r0, #105	; 0x69
 8000a84:	f7ff ff57 	bl	8000936 <SD_SendCmd>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d004      	beq.n	8000a98 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000a8e:	4b45      	ldr	r3, [pc, #276]	; (8000ba4 <SD_disk_initialize+0x1c4>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1ec      	bne.n	8000a70 <SD_disk_initialize+0x90>
 8000a96:	e000      	b.n	8000a9a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a98:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a9a:	4b42      	ldr	r3, [pc, #264]	; (8000ba4 <SD_disk_initialize+0x1c4>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d062      	beq.n	8000b68 <SD_disk_initialize+0x188>
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	207a      	movs	r0, #122	; 0x7a
 8000aa6:	f7ff ff46 	bl	8000936 <SD_SendCmd>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d15b      	bne.n	8000b68 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73fb      	strb	r3, [r7, #15]
 8000ab4:	e00c      	b.n	8000ad0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000ab6:	7bfc      	ldrb	r4, [r7, #15]
 8000ab8:	f7ff fe2e 	bl	8000718 <SPI_RxByte>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	f104 0310 	add.w	r3, r4, #16
 8000ac4:	443b      	add	r3, r7
 8000ac6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	3301      	adds	r3, #1
 8000ace:	73fb      	strb	r3, [r7, #15]
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d9ef      	bls.n	8000ab6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000ad6:	7a3b      	ldrb	r3, [r7, #8]
 8000ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SD_disk_initialize+0x104>
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	e000      	b.n	8000ae6 <SD_disk_initialize+0x106>
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	73bb      	strb	r3, [r7, #14]
 8000ae8:	e03e      	b.n	8000b68 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000aea:	2100      	movs	r1, #0
 8000aec:	2077      	movs	r0, #119	; 0x77
 8000aee:	f7ff ff22 	bl	8000936 <SD_SendCmd>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d808      	bhi.n	8000b0a <SD_disk_initialize+0x12a>
 8000af8:	2100      	movs	r1, #0
 8000afa:	2069      	movs	r0, #105	; 0x69
 8000afc:	f7ff ff1b 	bl	8000936 <SD_SendCmd>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d801      	bhi.n	8000b0a <SD_disk_initialize+0x12a>
 8000b06:	2302      	movs	r3, #2
 8000b08:	e000      	b.n	8000b0c <SD_disk_initialize+0x12c>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000b0e:	7bbb      	ldrb	r3, [r7, #14]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d10e      	bne.n	8000b32 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000b14:	2100      	movs	r1, #0
 8000b16:	2077      	movs	r0, #119	; 0x77
 8000b18:	f7ff ff0d 	bl	8000936 <SD_SendCmd>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d80e      	bhi.n	8000b40 <SD_disk_initialize+0x160>
 8000b22:	2100      	movs	r1, #0
 8000b24:	2069      	movs	r0, #105	; 0x69
 8000b26:	f7ff ff06 	bl	8000936 <SD_SendCmd>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d107      	bne.n	8000b40 <SD_disk_initialize+0x160>
 8000b30:	e00c      	b.n	8000b4c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000b32:	2100      	movs	r1, #0
 8000b34:	2041      	movs	r0, #65	; 0x41
 8000b36:	f7ff fefe 	bl	8000936 <SD_SendCmd>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d004      	beq.n	8000b4a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <SD_disk_initialize+0x1c4>)
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d1e2      	bne.n	8000b0e <SD_disk_initialize+0x12e>
 8000b48:	e000      	b.n	8000b4c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000b4a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <SD_disk_initialize+0x1c4>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d007      	beq.n	8000b64 <SD_disk_initialize+0x184>
 8000b54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b58:	2050      	movs	r0, #80	; 0x50
 8000b5a:	f7ff feec 	bl	8000936 <SD_SendCmd>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SD_disk_initialize+0x188>
 8000b64:	2300      	movs	r3, #0
 8000b66:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000b68:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <SD_disk_initialize+0x1c8>)
 8000b6a:	7bbb      	ldrb	r3, [r7, #14]
 8000b6c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000b6e:	f7ff fd8f 	bl	8000690 <DESELECT>
	SPI_RxByte();
 8000b72:	f7ff fdd1 	bl	8000718 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000b76:	7bbb      	ldrb	r3, [r7, #14]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d008      	beq.n	8000b8e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <SD_disk_initialize+0x1c0>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	f023 0301 	bic.w	r3, r3, #1
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SD_disk_initialize+0x1c0>)
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	e001      	b.n	8000b92 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000b8e:	f7ff fe49 	bl	8000824 <SD_PowerOff>
	}

	return Stat;
 8000b92:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <SD_disk_initialize+0x1c0>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b2db      	uxtb	r3, r3
}
<<<<<<< Updated upstream
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd90      	pop	{r4, r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	2000236e 	.word	0x2000236e
 8000ba8:	20000088 	.word	0x20000088
=======
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bd90      	pop	{r4, r7, pc}
 800117c:	20000000 	.word	0x20000000
 8001180:	200003da 	.word	0x200003da
 8001184:	200002bc 	.word	0x200002bc
>>>>>>> Stashed changes

08000bac <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SD_disk_status+0x14>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e002      	b.n	8000bc6 <SD_disk_status+0x1a>
	return Stat;
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SD_disk_status+0x28>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b2db      	uxtb	r3, r3
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000000 	.word	0x20000000

08000bd8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	4603      	mov	r3, r0
 8000be6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d102      	bne.n	8000bf4 <SD_disk_read+0x1c>
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <SD_disk_read+0x20>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	e051      	b.n	8000c9c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bf8:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <SD_disk_read+0xcc>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SD_disk_read+0x32>
 8000c06:	2303      	movs	r3, #3
 8000c08:	e048      	b.n	8000c9c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c0a:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <SD_disk_read+0xd0>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <SD_disk_read+0x44>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	025b      	lsls	r3, r3, #9
 8000c1a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c1c:	f7ff fd28 	bl	8000670 <SELECT>

	if (count == 1)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d111      	bne.n	8000c4a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	2051      	movs	r0, #81	; 0x51
 8000c2a:	f7ff fe84 	bl	8000936 <SD_SendCmd>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d129      	bne.n	8000c88 <SD_disk_read+0xb0>
 8000c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c38:	68b8      	ldr	r0, [r7, #8]
 8000c3a:	f7ff fe0b 	bl	8000854 <SD_RxDataBlock>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d021      	beq.n	8000c88 <SD_disk_read+0xb0>
 8000c44:	2300      	movs	r3, #0
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	e01e      	b.n	8000c88 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	2052      	movs	r0, #82	; 0x52
 8000c4e:	f7ff fe72 	bl	8000936 <SD_SendCmd>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d117      	bne.n	8000c88 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5c:	68b8      	ldr	r0, [r7, #8]
 8000c5e:	f7ff fdf9 	bl	8000854 <SD_RxDataBlock>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00a      	beq.n	8000c7e <SD_disk_read+0xa6>
				buff += 512;
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c6e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1ed      	bne.n	8000c58 <SD_disk_read+0x80>
 8000c7c:	e000      	b.n	8000c80 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c7e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000c80:	2100      	movs	r1, #0
 8000c82:	204c      	movs	r0, #76	; 0x4c
 8000c84:	f7ff fe57 	bl	8000936 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000c88:	f7ff fd02 	bl	8000690 <DESELECT>
	SPI_RxByte();
 8000c8c:	f7ff fd44 	bl	8000718 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bf14      	ite	ne
 8000c96:	2301      	movne	r3, #1
 8000c98:	2300      	moveq	r3, #0
 8000c9a:	b2db      	uxtb	r3, r3
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000088 	.word	0x20000088

08000cac <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	4603      	mov	r3, r0
 8000cba:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <SD_disk_write+0x1c>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d101      	bne.n	8000ccc <SD_disk_write+0x20>
 8000cc8:	2304      	movs	r3, #4
 8000cca:	e06b      	b.n	8000da4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ccc:	4b37      	ldr	r3, [pc, #220]	; (8000dac <SD_disk_write+0x100>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SD_disk_write+0x32>
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e062      	b.n	8000da4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000cde:	4b33      	ldr	r3, [pc, #204]	; (8000dac <SD_disk_write+0x100>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SD_disk_write+0x44>
 8000cec:	2302      	movs	r3, #2
 8000cee:	e059      	b.n	8000da4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <SD_disk_write+0x104>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <SD_disk_write+0x56>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	025b      	lsls	r3, r3, #9
 8000d00:	607b      	str	r3, [r7, #4]

	SELECT();
 8000d02:	f7ff fcb5 	bl	8000670 <SELECT>

	if (count == 1)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d110      	bne.n	8000d2e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	2058      	movs	r0, #88	; 0x58
 8000d10:	f7ff fe11 	bl	8000936 <SD_SendCmd>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d13a      	bne.n	8000d90 <SD_disk_write+0xe4>
 8000d1a:	21fe      	movs	r1, #254	; 0xfe
 8000d1c:	68b8      	ldr	r0, [r7, #8]
 8000d1e:	f7ff fdc7 	bl	80008b0 <SD_TxDataBlock>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d033      	beq.n	8000d90 <SD_disk_write+0xe4>
			count = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	e030      	b.n	8000d90 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <SD_disk_write+0x104>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d007      	beq.n	8000d4a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2077      	movs	r0, #119	; 0x77
 8000d3e:	f7ff fdfa 	bl	8000936 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000d42:	6839      	ldr	r1, [r7, #0]
 8000d44:	2057      	movs	r0, #87	; 0x57
 8000d46:	f7ff fdf6 	bl	8000936 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	2059      	movs	r0, #89	; 0x59
 8000d4e:	f7ff fdf2 	bl	8000936 <SD_SendCmd>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d11b      	bne.n	8000d90 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d58:	21fc      	movs	r1, #252	; 0xfc
 8000d5a:	68b8      	ldr	r0, [r7, #8]
 8000d5c:	f7ff fda8 	bl	80008b0 <SD_TxDataBlock>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00a      	beq.n	8000d7c <SD_disk_write+0xd0>
				buff += 512;
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d6c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1ee      	bne.n	8000d58 <SD_disk_write+0xac>
 8000d7a:	e000      	b.n	8000d7e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d7c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000d7e:	21fd      	movs	r1, #253	; 0xfd
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fd95 	bl	80008b0 <SD_TxDataBlock>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d101      	bne.n	8000d90 <SD_disk_write+0xe4>
			{
				count = 1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000d90:	f7ff fc7e 	bl	8000690 <DESELECT>
	SPI_RxByte();
 8000d94:	f7ff fcc0 	bl	8000718 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bf14      	ite	ne
 8000d9e:	2301      	movne	r3, #1
 8000da0:	2300      	moveq	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000088 	.word	0x20000088

08000db4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b08b      	sub	sp, #44	; 0x2c
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	603a      	str	r2, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SD_disk_ioctl+0x1e>
 8000dce:	2304      	movs	r3, #4
 8000dd0:	e115      	b.n	8000ffe <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000dd8:	79bb      	ldrb	r3, [r7, #6]
 8000dda:	2b05      	cmp	r3, #5
 8000ddc:	d124      	bne.n	8000e28 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000dde:	6a3b      	ldr	r3, [r7, #32]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d012      	beq.n	8000e0c <SD_disk_ioctl+0x58>
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	dc1a      	bgt.n	8000e20 <SD_disk_ioctl+0x6c>
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <SD_disk_ioctl+0x40>
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d006      	beq.n	8000e00 <SD_disk_ioctl+0x4c>
 8000df2:	e015      	b.n	8000e20 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000df4:	f7ff fd16 	bl	8000824 <SD_PowerOff>
			res = RES_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dfe:	e0fc      	b.n	8000ffa <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000e00:	f7ff fcce 	bl	80007a0 <SD_PowerOn>
			res = RES_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e0a:	e0f6      	b.n	8000ffa <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
 8000e0e:	1c5c      	adds	r4, r3, #1
 8000e10:	f7ff fd14 	bl	800083c <SD_CheckPower>
 8000e14:	4603      	mov	r3, r0
 8000e16:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e1e:	e0ec      	b.n	8000ffa <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000e20:	2304      	movs	r3, #4
 8000e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e26:	e0e8      	b.n	8000ffa <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e28:	4b77      	ldr	r3, [pc, #476]	; (8001008 <SD_disk_ioctl+0x254>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SD_disk_ioctl+0x86>
 8000e36:	2303      	movs	r3, #3
 8000e38:	e0e1      	b.n	8000ffe <SD_disk_ioctl+0x24a>

		SELECT();
 8000e3a:	f7ff fc19 	bl	8000670 <SELECT>

		switch (ctrl)
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	2b0d      	cmp	r3, #13
 8000e42:	f200 80cb 	bhi.w	8000fdc <SD_disk_ioctl+0x228>
 8000e46:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <SD_disk_ioctl+0x98>)
 8000e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4c:	08000f47 	.word	0x08000f47
 8000e50:	08000e85 	.word	0x08000e85
 8000e54:	08000f37 	.word	0x08000f37
 8000e58:	08000fdd 	.word	0x08000fdd
 8000e5c:	08000fdd 	.word	0x08000fdd
 8000e60:	08000fdd 	.word	0x08000fdd
 8000e64:	08000fdd 	.word	0x08000fdd
 8000e68:	08000fdd 	.word	0x08000fdd
 8000e6c:	08000fdd 	.word	0x08000fdd
 8000e70:	08000fdd 	.word	0x08000fdd
 8000e74:	08000fdd 	.word	0x08000fdd
 8000e78:	08000f59 	.word	0x08000f59
 8000e7c:	08000f7d 	.word	0x08000f7d
 8000e80:	08000fa1 	.word	0x08000fa1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000e84:	2100      	movs	r1, #0
 8000e86:	2049      	movs	r0, #73	; 0x49
 8000e88:	f7ff fd55 	bl	8000936 <SD_SendCmd>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f040 80a8 	bne.w	8000fe4 <SD_disk_ioctl+0x230>
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2110      	movs	r1, #16
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fcda 	bl	8000854 <SD_RxDataBlock>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 809e 	beq.w	8000fe4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000ea8:	7b3b      	ldrb	r3, [r7, #12]
 8000eaa:	099b      	lsrs	r3, r3, #6
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d10e      	bne.n	8000ed0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000eb2:	7d7b      	ldrb	r3, [r7, #21]
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	7d3b      	ldrb	r3, [r7, #20]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	021b      	lsls	r3, r3, #8
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000ec6:	8bfb      	ldrh	r3, [r7, #30]
 8000ec8:	029a      	lsls	r2, r3, #10
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e02e      	b.n	8000f2e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000ed0:	7c7b      	ldrb	r3, [r7, #17]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	7dbb      	ldrb	r3, [r7, #22]
 8000eda:	09db      	lsrs	r3, r3, #7
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	4413      	add	r3, r2
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	7d7b      	ldrb	r3, [r7, #21]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	f003 0306 	and.w	r3, r3, #6
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	4413      	add	r3, r2
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ef8:	7d3b      	ldrb	r3, [r7, #20]
 8000efa:	099b      	lsrs	r3, r3, #6
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	7cfb      	ldrb	r3, [r7, #19]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4413      	add	r3, r2
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	7cbb      	ldrb	r3, [r7, #18]
 8000f0e:	029b      	lsls	r3, r3, #10
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	4413      	add	r3, r2
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000f20:	8bfa      	ldrh	r2, [r7, #30]
 8000f22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f26:	3b09      	subs	r3, #9
 8000f28:	409a      	lsls	r2, r3
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000f34:	e056      	b.n	8000fe4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f44:	e055      	b.n	8000ff2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000f46:	f7ff fc11 	bl	800076c <SD_ReadyWait>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2bff      	cmp	r3, #255	; 0xff
 8000f4e:	d14b      	bne.n	8000fe8 <SD_disk_ioctl+0x234>
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f56:	e047      	b.n	8000fe8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2049      	movs	r0, #73	; 0x49
 8000f5c:	f7ff fceb 	bl	8000936 <SD_SendCmd>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d142      	bne.n	8000fec <SD_disk_ioctl+0x238>
 8000f66:	2110      	movs	r1, #16
 8000f68:	6a38      	ldr	r0, [r7, #32]
 8000f6a:	f7ff fc73 	bl	8000854 <SD_RxDataBlock>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d03b      	beq.n	8000fec <SD_disk_ioctl+0x238>
 8000f74:	2300      	movs	r3, #0
 8000f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f7a:	e037      	b.n	8000fec <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	204a      	movs	r0, #74	; 0x4a
 8000f80:	f7ff fcd9 	bl	8000936 <SD_SendCmd>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d132      	bne.n	8000ff0 <SD_disk_ioctl+0x23c>
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	6a38      	ldr	r0, [r7, #32]
 8000f8e:	f7ff fc61 	bl	8000854 <SD_RxDataBlock>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d02b      	beq.n	8000ff0 <SD_disk_ioctl+0x23c>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f9e:	e027      	b.n	8000ff0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	207a      	movs	r0, #122	; 0x7a
 8000fa4:	f7ff fcc7 	bl	8000936 <SD_SendCmd>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d116      	bne.n	8000fdc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000fb4:	e00b      	b.n	8000fce <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000fb6:	6a3c      	ldr	r4, [r7, #32]
 8000fb8:	1c63      	adds	r3, r4, #1
 8000fba:	623b      	str	r3, [r7, #32]
 8000fbc:	f7ff fbac 	bl	8000718 <SPI_RxByte>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000fc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fc8:	3301      	adds	r3, #1
 8000fca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000fce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d9ef      	bls.n	8000fb6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fe2:	e006      	b.n	8000ff2 <SD_disk_ioctl+0x23e>
			break;
 8000fe4:	bf00      	nop
 8000fe6:	e004      	b.n	8000ff2 <SD_disk_ioctl+0x23e>
			break;
 8000fe8:	bf00      	nop
 8000fea:	e002      	b.n	8000ff2 <SD_disk_ioctl+0x23e>
			break;
 8000fec:	bf00      	nop
 8000fee:	e000      	b.n	8000ff2 <SD_disk_ioctl+0x23e>
			break;
 8000ff0:	bf00      	nop
		}

		DESELECT();
 8000ff2:	f7ff fb4d 	bl	8000690 <DESELECT>
		SPI_RxByte();
 8000ff6:	f7ff fb8f 	bl	8000718 <SPI_RxByte>
	}

	return res;
 8000ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	372c      	adds	r7, #44	; 0x2c
 8001002:	46bd      	mov	sp, r7
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	bf00      	nop
 8001008:	20000000 	.word	0x20000000

0800100c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	4b40      	ldr	r3, [pc, #256]	; (8001124 <MX_GPIO_Init+0x118>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a3f      	ldr	r2, [pc, #252]	; (8001124 <MX_GPIO_Init+0x118>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b3d      	ldr	r3, [pc, #244]	; (8001124 <MX_GPIO_Init+0x118>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103a:	4b3a      	ldr	r3, [pc, #232]	; (8001124 <MX_GPIO_Init+0x118>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a39      	ldr	r2, [pc, #228]	; (8001124 <MX_GPIO_Init+0x118>)
 8001040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b37      	ldr	r3, [pc, #220]	; (8001124 <MX_GPIO_Init+0x118>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b34      	ldr	r3, [pc, #208]	; (8001124 <MX_GPIO_Init+0x118>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a33      	ldr	r2, [pc, #204]	; (8001124 <MX_GPIO_Init+0x118>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <MX_GPIO_Init+0x118>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <MX_GPIO_Init+0x118>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a2d      	ldr	r2, [pc, #180]	; (8001124 <MX_GPIO_Init+0x118>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <MX_GPIO_Init+0x118>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
<<<<<<< Updated upstream
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <MX_GPIO_Init+0x118>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a27      	ldr	r2, [pc, #156]	; (8001124 <MX_GPIO_Init+0x118>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <MX_GPIO_Init+0x118>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f244 0181 	movw	r1, #16513	; 0x4081
 80010a0:	4821      	ldr	r0, [pc, #132]	; (8001128 <MX_GPIO_Init+0x11c>)
 80010a2:	f001 fb83 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ac:	481f      	ldr	r0, [pc, #124]	; (800112c <MX_GPIO_Init+0x120>)
 80010ae:	f001 fb7d 	bl	80027ac <HAL_GPIO_WritePin>
=======
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <MX_GPIO_Init+0x154>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a30      	ldr	r2, [pc, #192]	; (800173c <MX_GPIO_Init+0x154>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <MX_GPIO_Init+0x154>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2110      	movs	r1, #16
 8001692:	482b      	ldr	r0, [pc, #172]	; (8001740 <MX_GPIO_Init+0x158>)
<<<<<<< Updated upstream
 8001694:	f002 f936 	bl	8003904 <HAL_GPIO_WritePin>
=======
 8001694:	f002 f85a 	bl	800374c <HAL_GPIO_WritePin>
>>>>>>> Stashed changes

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f244 0181 	movw	r1, #16513	; 0x4081
 800169e:	4829      	ldr	r0, [pc, #164]	; (8001744 <MX_GPIO_Init+0x15c>)
<<<<<<< Updated upstream
 80016a0:	f002 f930 	bl	8003904 <HAL_GPIO_WritePin>
=======
 80016a0:	f002 f854 	bl	800374c <HAL_GPIO_WritePin>
>>>>>>> Stashed changes

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016aa:	4827      	ldr	r0, [pc, #156]	; (8001748 <MX_GPIO_Init+0x160>)
<<<<<<< Updated upstream
 80016ac:	f002 f92a 	bl	8003904 <HAL_GPIO_WritePin>
=======
 80016ac:	f002 f84e 	bl	800374c <HAL_GPIO_WritePin>
>>>>>>> Stashed changes

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80016b0:	2310      	movs	r3, #16
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	481e      	ldr	r0, [pc, #120]	; (8001740 <MX_GPIO_Init+0x158>)
<<<<<<< Updated upstream
 80016c8:	f001 ff70 	bl	80035ac <HAL_GPIO_Init>
>>>>>>> Stashed changes
=======
 80016c8:	f001 fe94 	bl	80033f4 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
<<<<<<< Updated upstream
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4819      	ldr	r0, [pc, #100]	; (8001130 <MX_GPIO_Init+0x124>)
 80010ca:	f001 f9c3 	bl	8002454 <HAL_GPIO_Init>
=======
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4619      	mov	r1, r3
 80016e2:	481a      	ldr	r0, [pc, #104]	; (800174c <MX_GPIO_Init+0x164>)
<<<<<<< Updated upstream
 80016e4:	f001 ff62 	bl	80035ac <HAL_GPIO_Init>
>>>>>>> Stashed changes
=======
 80016e4:	f001 fe86 	bl	80033f4 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010ce:	f244 0381 	movw	r3, #16513	; 0x4081
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< Updated upstream
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	4810      	ldr	r0, [pc, #64]	; (8001128 <MX_GPIO_Init+0x11c>)
 80010e8:	f001 f9b4 	bl	8002454 <HAL_GPIO_Init>
=======
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	4810      	ldr	r0, [pc, #64]	; (8001744 <MX_GPIO_Init+0x15c>)
<<<<<<< Updated upstream
 8001702:	f001 ff53 	bl	80035ac <HAL_GPIO_Init>
>>>>>>> Stashed changes
=======
 8001702:	f001 fe77 	bl	80033f4 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80010ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
<<<<<<< Updated upstream
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4809      	ldr	r0, [pc, #36]	; (800112c <MX_GPIO_Init+0x120>)
 8001106:	f001 f9a5 	bl	8002454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2028      	movs	r0, #40	; 0x28
 8001110:	f001 f8d7 	bl	80022c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001114:	2028      	movs	r0, #40	; 0x28
 8001116:	f001 f8f0 	bl	80022fa <HAL_NVIC_EnableIRQ>
=======
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	4619      	mov	r1, r3
 800171e:	480a      	ldr	r0, [pc, #40]	; (8001748 <MX_GPIO_Init+0x160>)
<<<<<<< Updated upstream
 8001720:	f001 ff44 	bl	80035ac <HAL_GPIO_Init>
=======
 8001720:	f001 fe68 	bl	80033f4 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2028      	movs	r0, #40	; 0x28
<<<<<<< Updated upstream
 800172a:	f001 fb8c 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800172e:	2028      	movs	r0, #40	; 0x28
 8001730:	f001 fba5 	bl	8002e7e <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
=======
 800172a:	f001 fab0 	bl	8002c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800172e:	2028      	movs	r0, #40	; 0x28
 8001730:	f001 fac9 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40020400 	.word	0x40020400
 800112c:	40020c00 	.word	0x40020c00
 8001130:	40020800 	.word	0x40020800

08001134 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */
float volts = 0;
int butPressed = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001144:	d102      	bne.n	800114c <HAL_GPIO_EXTI_Callback+0x18>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		send_UART("{to:'Log',from:'Mst',reci:'headerValsCsv',dir:'g',rc:''}\r");
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		*/

		butPressed = 1;
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <HAL_GPIO_EXTI_Callback+0x24>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]
	}
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	2000008c 	.word	0x2000008c

0800115c <isButPressed>:

int isButPressed()
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
	return butPressed;
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <isButPressed+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	2000008c 	.word	0x2000008c

08001174 <butClear>:

void butClear()
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	butPressed = 0;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <butClear+0x14>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	2000008c 	.word	0x2000008c

<<<<<<< Updated upstream
<<<<<<< Updated upstream
0800118c <main>:
=======
080017a8 <print_adc>:
/* USER CODE BEGIN 0 */
=======
080017a8 <Build_MSG>:
float B2 = 0; //battery 2 level
float B3 = 0; //battery 3 level
float T_PT100 = 0; //Temperature provided by PT100
float T_STM = 0;//Temperature provided by STM
>>>>>>> Stashed changes

void Build_MSG(){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af08      	add	r7, sp, #32
	//builds the Message that will be sent from the STM(Master) to the Arduino(Slave)
	sprintf(MSG, "{T1:%.2f;T2:%.2f;B1:%.1f;B2:%.1f;B3:%.1f}",T_PT100, T_STM, B1, B2, B3);
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <Build_MSG+0x5c>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <Build_MSG+0x60>)
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <Build_MSG+0x64>)
 80017c4:	edd3 6a00 	vldr	s13, [r3]
 80017c8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <Build_MSG+0x68>)
 80017ce:	edd3 5a00 	vldr	s11, [r3]
 80017d2:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <Build_MSG+0x6c>)
 80017d8:	edd3 4a00 	vldr	s9, [r3]
 80017dc:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80017e0:	ed8d 4b06 	vstr	d4, [sp, #24]
 80017e4:	ed8d 5b04 	vstr	d5, [sp, #16]
 80017e8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80017ec:	ed8d 7b00 	vstr	d7, [sp]
 80017f0:	ec53 2b13 	vmov	r2, r3, d3
 80017f4:	4908      	ldr	r1, [pc, #32]	; (8001818 <Build_MSG+0x70>)
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <Build_MSG+0x74>)
 80017f8:	f006 fdd4 	bl	80083a4 <siprintf>
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000308 	.word	0x20000308
 8001808:	2000030c 	.word	0x2000030c
 800180c:	200002fc 	.word	0x200002fc
 8001810:	20000300 	.word	0x20000300
 8001814:	20000304 	.word	0x20000304
 8001818:	0800be18 	.word	0x0800be18
 800181c:	200002d0 	.word	0x200002d0

08001820 <Send_MSG>:

void Send_MSG(){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
	//Send Message from STM(Master) to Arduino(Slave) using SPI4

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET); // CS Low => initiate communication between Master and Slave
 8001826:	2200      	movs	r2, #0
 8001828:	2110      	movs	r1, #16
 800182a:	4813      	ldr	r0, [pc, #76]	; (8001878 <Send_MSG+0x58>)
 800182c:	f001 ff8e 	bl	800374c <HAL_GPIO_WritePin>
	int i = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]

	for(i=0;i<strlen(MSG);i++){
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	e00d      	b.n	8001856 <Send_MSG+0x36>
		char dataSend = MSG[i];
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <Send_MSG+0x5c>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	70fb      	strb	r3, [r7, #3]
		HAL_SPI_Transmit(&hspi4, (uint8_t*)&dataSend, 1,100); //send byte by byte
 8001844:	1cf9      	adds	r1, r7, #3
 8001846:	2364      	movs	r3, #100	; 0x64
 8001848:	2201      	movs	r2, #1
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <Send_MSG+0x60>)
 800184c:	f003 f96f 	bl	8004b2e <HAL_SPI_Transmit>
	for(i=0;i<strlen(MSG);i++){
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3301      	adds	r3, #1
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4809      	ldr	r0, [pc, #36]	; (800187c <Send_MSG+0x5c>)
 8001858:	f7fe fcf2 	bl	8000240 <strlen>
 800185c:	4602      	mov	r2, r0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8ea      	bhi.n	800183a <Send_MSG+0x1a>
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); // CS High => End communication
 8001864:	2201      	movs	r2, #1
 8001866:	2110      	movs	r1, #16
 8001868:	4803      	ldr	r0, [pc, #12]	; (8001878 <Send_MSG+0x58>)
 800186a:	f001 ff6f 	bl	800374c <HAL_GPIO_WritePin>

}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	200002d0 	.word	0x200002d0
 8001880:	20000374 	.word	0x20000374
 8001884:	00000000 	.word	0x00000000

08001888 <print_adc>:

void print_adc()
{
 8001888:	b580      	push	{r7, lr}
 800188a:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 800188e:	af08      	add	r7, sp, #32
	char message[1024];
	sprintf((char*) message, "%d, %.2fV, %.2fV, %.2fV, %.2fV", ADC_results[0],
 8001890:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <print_adc+0xc0>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
			ADC_results[1]*3.33/4096, ADC_results[2]*3.33/4096,
 8001896:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <print_adc+0xc0>)
 8001898:	885b      	ldrh	r3, [r3, #2]
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018a2:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8001938 <print_adc+0xb0>
 80018a6:	ee27 6b06 	vmul.f64	d6, d7, d6
	sprintf((char*) message, "%d, %.2fV, %.2fV, %.2fV, %.2fV", ADC_results[0],
 80018aa:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8001940 <print_adc+0xb8>
 80018ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
			ADC_results[1]*3.33/4096, ADC_results[2]*3.33/4096,
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <print_adc+0xc0>)
 80018b4:	889b      	ldrh	r3, [r3, #4]
 80018b6:	ee06 3a90 	vmov	s13, r3
 80018ba:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80018be:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8001938 <print_adc+0xb0>
 80018c2:	ee26 5b05 	vmul.f64	d5, d6, d5
	sprintf((char*) message, "%d, %.2fV, %.2fV, %.2fV, %.2fV", ADC_results[0],
 80018c6:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8001940 <print_adc+0xb8>
 80018ca:	ee85 6b04 	vdiv.f64	d6, d5, d4
			ADC_results[3]*3.33/4096, ADC_results[4]*3.33/4096);
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <print_adc+0xc0>)
 80018d0:	88db      	ldrh	r3, [r3, #6]
 80018d2:	ee05 3a90 	vmov	s11, r3
 80018d6:	eeb8 5be5 	vcvt.f64.s32	d5, s11
 80018da:	ed9f 4b17 	vldr	d4, [pc, #92]	; 8001938 <print_adc+0xb0>
 80018de:	ee25 4b04 	vmul.f64	d4, d5, d4
	sprintf((char*) message, "%d, %.2fV, %.2fV, %.2fV, %.2fV", ADC_results[0],
 80018e2:	ed9f 3b17 	vldr	d3, [pc, #92]	; 8001940 <print_adc+0xb8>
 80018e6:	ee84 5b03 	vdiv.f64	d5, d4, d3
			ADC_results[3]*3.33/4096, ADC_results[4]*3.33/4096);
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <print_adc+0xc0>)
 80018ec:	891b      	ldrh	r3, [r3, #8]
 80018ee:	ee04 3a90 	vmov	s9, r3
 80018f2:	eeb8 4be4 	vcvt.f64.s32	d4, s9
 80018f6:	ed9f 3b10 	vldr	d3, [pc, #64]	; 8001938 <print_adc+0xb0>
 80018fa:	ee24 3b03 	vmul.f64	d3, d4, d3
	sprintf((char*) message, "%d, %.2fV, %.2fV, %.2fV, %.2fV", ADC_results[0],
<<<<<<< Updated upstream
 800181e:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8001860 <print_adc+0xb8>
 8001822:	ee83 4b02 	vdiv.f64	d4, d3, d2
 8001826:	463b      	mov	r3, r7
 8001828:	ed8d 4b06 	vstr	d4, [sp, #24]
 800182c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001830:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001834:	ed8d 7b00 	vstr	d7, [sp]
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <print_adc+0xc4>)
 800183a:	4618      	mov	r0, r3
 800183c:	f006 fe8e 	bl	800855c <siprintf>
	send_UART(message);
 8001840:	463b      	mov	r3, r7
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fe08 	bl	8002458 <send_UART>
}
 8001848:	bf00      	nop
 800184a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	f3af 8000 	nop.w
 8001858:	0a3d70a4 	.word	0x0a3d70a4
 800185c:	400aa3d7 	.word	0x400aa3d7
 8001860:	00000000 	.word	0x00000000
 8001864:	40b00000 	.word	0x40b00000
 8001868:	200002c4 	.word	0x200002c4
 800186c:	0800bfd0 	.word	0x0800bfd0

08001870 <ConstMsg>:

//Construir a mensagem a enviar para o slave
void ConstMsg(char* Msg, float T_PT100, float T_STM, float B1, float B2, float B3){
 8001870:	b580      	push	{r7, lr}
 8001872:	b08e      	sub	sp, #56	; 0x38
 8001874:	af08      	add	r7, sp, #32
 8001876:	6178      	str	r0, [r7, #20]
 8001878:	ed87 0a04 	vstr	s0, [r7, #16]
 800187c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001880:	ed87 1a02 	vstr	s2, [r7, #8]
 8001884:	edc7 1a01 	vstr	s3, [r7, #4]
 8001888:	ed87 2a00 	vstr	s4, [r7]

	if(T_PT100>=0 && T_STM>=0){
 800188c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001890:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001898:	db28      	blt.n	80018ec <ConstMsg+0x7c>
 800189a:	edd7 7a03 	vldr	s15, [r7, #12]
 800189e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a6:	db21      	blt.n	80018ec <ConstMsg+0x7c>
		sprintf(Msg, "{T1:+%.2f;T2:+%.2f;B1:%.1f;B2:%.1f;B3:%.1f}",T_PT100, T_STM, B1, B2, B3);
 80018a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ac:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 80018b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018b8:	edd7 6a02 	vldr	s13, [r7, #8]
 80018bc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80018c0:	edd7 5a01 	vldr	s11, [r7, #4]
 80018c4:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80018c8:	edd7 4a00 	vldr	s9, [r7]
 80018cc:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80018d0:	ed8d 4b06 	vstr	d4, [sp, #24]
 80018d4:	ed8d 5b04 	vstr	d5, [sp, #16]
 80018d8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80018dc:	ed8d 7b00 	vstr	d7, [sp]
 80018e0:	ec53 2b13 	vmov	r2, r3, d3
 80018e4:	494c      	ldr	r1, [pc, #304]	; (8001a18 <ConstMsg+0x1a8>)
 80018e6:	6978      	ldr	r0, [r7, #20]
 80018e8:	f006 fe38 	bl	800855c <siprintf>
	}

	if(T_PT100>=0 && T_STM<0){
 80018ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80018f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f8:	db28      	blt.n	800194c <ConstMsg+0xdc>
 80018fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80018fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001906:	d521      	bpl.n	800194c <ConstMsg+0xdc>
		sprintf(Msg, "{T1:+%.2f;T2:-%.2f;B1:%.1f;B2:%.1f;B3:%.1f}",T_PT100, T_STM, B1, B2, B3);
 8001908:	edd7 7a04 	vldr	s15, [r7, #16]
 800190c:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8001910:	edd7 7a03 	vldr	s15, [r7, #12]
 8001914:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001918:	edd7 6a02 	vldr	s13, [r7, #8]
 800191c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001920:	edd7 5a01 	vldr	s11, [r7, #4]
 8001924:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001928:	edd7 4a00 	vldr	s9, [r7]
 800192c:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8001930:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001934:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001938:	ed8d 6b02 	vstr	d6, [sp, #8]
 800193c:	ed8d 7b00 	vstr	d7, [sp]
 8001940:	ec53 2b13 	vmov	r2, r3, d3
 8001944:	4935      	ldr	r1, [pc, #212]	; (8001a1c <ConstMsg+0x1ac>)
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f006 fe08 	bl	800855c <siprintf>
	}

	if(T_PT100<0 && T_STM>=0){
 800194c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001950:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001958:	d528      	bpl.n	80019ac <ConstMsg+0x13c>
 800195a:	edd7 7a03 	vldr	s15, [r7, #12]
 800195e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	db21      	blt.n	80019ac <ConstMsg+0x13c>
		sprintf(Msg, "{T1:-%.2f;T2:+%.2f;B1:%.1f;B2:%.1f;B3:%.1f}",T_PT100, T_STM, B1, B2, B3);
 8001968:	edd7 7a04 	vldr	s15, [r7, #16]
 800196c:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8001970:	edd7 7a03 	vldr	s15, [r7, #12]
 8001974:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001978:	edd7 6a02 	vldr	s13, [r7, #8]
 800197c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001980:	edd7 5a01 	vldr	s11, [r7, #4]
 8001984:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001988:	edd7 4a00 	vldr	s9, [r7]
 800198c:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8001990:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001994:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001998:	ed8d 6b02 	vstr	d6, [sp, #8]
 800199c:	ed8d 7b00 	vstr	d7, [sp]
 80019a0:	ec53 2b13 	vmov	r2, r3, d3
 80019a4:	491e      	ldr	r1, [pc, #120]	; (8001a20 <ConstMsg+0x1b0>)
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f006 fdd8 	bl	800855c <siprintf>
	}

	if(T_PT100<0 && T_STM<0){
 80019ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80019b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b8:	d400      	bmi.n	80019bc <ConstMsg+0x14c>
		sprintf(Msg, "{T1:-%.2f;T2:-%.2f;B1:%.1f;B2:%.1f;B3:%.1f}",T_PT100, T_STM, B1, B2, B3);
	}

}
 80019ba:	e029      	b.n	8001a10 <ConstMsg+0x1a0>
	if(T_PT100<0 && T_STM<0){
 80019bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80019c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	d400      	bmi.n	80019cc <ConstMsg+0x15c>
}
 80019ca:	e021      	b.n	8001a10 <ConstMsg+0x1a0>
		sprintf(Msg, "{T1:-%.2f;T2:-%.2f;B1:%.1f;B2:%.1f;B3:%.1f}",T_PT100, T_STM, B1, B2, B3);
 80019cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80019d0:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 80019d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019dc:	edd7 6a02 	vldr	s13, [r7, #8]
 80019e0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80019e4:	edd7 5a01 	vldr	s11, [r7, #4]
 80019e8:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80019ec:	edd7 4a00 	vldr	s9, [r7]
 80019f0:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80019f4:	ed8d 4b06 	vstr	d4, [sp, #24]
 80019f8:	ed8d 5b04 	vstr	d5, [sp, #16]
 80019fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001a00:	ed8d 7b00 	vstr	d7, [sp]
 8001a04:	ec53 2b13 	vmov	r2, r3, d3
 8001a08:	4906      	ldr	r1, [pc, #24]	; (8001a24 <ConstMsg+0x1b4>)
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f006 fda6 	bl	800855c <siprintf>
}
 8001a10:	bf00      	nop
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	0800bff0 	.word	0x0800bff0
 8001a1c:	0800c01c 	.word	0x0800c01c
 8001a20:	0800c048 	.word	0x0800c048
 8001a24:	0800c074 	.word	0x0800c074

08001a28 <SendToSlave>:

//Envio de dados para o Slave
void SendToSlave(char* MSG, int lenMSG){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET); // colocar a CS em Low para iniciar a comunicacao
 8001a32:	2200      	movs	r2, #0
 8001a34:	2110      	movs	r1, #16
 8001a36:	4818      	ldr	r0, [pc, #96]	; (8001a98 <SendToSlave+0x70>)
 8001a38:	f001 ff64 	bl	8003904 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a3c:	200a      	movs	r0, #10
 8001a3e:	f000 fe6f 	bl	8002720 <HAL_Delay>
	int i = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
	for(i=0;i<strlen(MSG);i++){
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	e011      	b.n	8001a70 <SendToSlave+0x48>
		char dataSend = MSG[i];
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	72fb      	strb	r3, [r7, #11]
		HAL_SPI_Transmit(&hspi4, (uint8_t*)&dataSend, 1,100); //realizar a transmissao byte a byte
 8001a56:	f107 010b 	add.w	r1, r7, #11
 8001a5a:	2364      	movs	r3, #100	; 0x64
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	480f      	ldr	r0, [pc, #60]	; (8001a9c <SendToSlave+0x74>)
 8001a60:	f003 f941 	bl	8004ce6 <HAL_SPI_Transmit>
		HAL_Delay(10); //esperar 10ms
 8001a64:	200a      	movs	r0, #10
 8001a66:	f000 fe5b 	bl	8002720 <HAL_Delay>
	for(i=0;i<strlen(MSG);i++){
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7fe fbe5 	bl	8000240 <strlen>
 8001a76:	4602      	mov	r2, r0
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d8e6      	bhi.n	8001a4c <SendToSlave+0x24>

	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); // Acabar comunicacao
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2110      	movs	r1, #16
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <SendToSlave+0x70>)
 8001a84:	f001 ff3e 	bl	8003904 <HAL_GPIO_WritePin>
	HAL_Delay(50); //esperar 50ms
 8001a88:	2032      	movs	r0, #50	; 0x32
 8001a8a:	f000 fe49 	bl	8002720 <HAL_Delay>
}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	20000334 	.word	0x20000334

08001aa0 <main>:
>>>>>>> Stashed changes
=======
 80018fe:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8001940 <print_adc+0xb8>
 8001902:	ee83 4b02 	vdiv.f64	d4, d3, d2
 8001906:	463b      	mov	r3, r7
 8001908:	ed8d 4b06 	vstr	d4, [sp, #24]
 800190c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001910:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001914:	ed8d 7b00 	vstr	d7, [sp]
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <print_adc+0xc4>)
 800191a:	4618      	mov	r0, r3
 800191c:	f006 fd42 	bl	80083a4 <siprintf>
	send_UART(message);
 8001920:	463b      	mov	r3, r7
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fcbc 	bl	80022a0 <send_UART>
}
 8001928:	bf00      	nop
 800192a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	f3af 8000 	nop.w
 8001938:	0a3d70a4 	.word	0x0a3d70a4
 800193c:	400aa3d7 	.word	0x400aa3d7
 8001940:	00000000 	.word	0x00000000
 8001944:	40b00000 	.word	0x40b00000
 8001948:	200002c4 	.word	0x200002c4
 800194c:	0800be44 	.word	0x0800be44

08001950 <main>:
>>>>>>> Stashed changes
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800118c:	b580      	push	{r7, lr}
 800118e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001192:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */
=======
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); // CS High => No communication between Slave (Arduino) and Master (STM)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2110      	movs	r1, #16
 8001aac:	483a      	ldr	r0, [pc, #232]	; (8001b98 <main+0xf8>)
 8001aae:	f001 ff29 	bl	8003904 <HAL_GPIO_WritePin>
=======
 8001950:	b580      	push	{r7, lr}
 8001952:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); //CS of SPI4 High => No communication between STM and Arduino
 8001958:	2201      	movs	r2, #1
 800195a:	2110      	movs	r1, #16
 800195c:	4820      	ldr	r0, [pc, #128]	; (80019e0 <main+0x90>)
 800195e:	f001 fef5 	bl	800374c <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
  /* USER CODE END 1 */
>>>>>>> Stashed changes

	/* MCU Configuration--------------------------------------------------------*/

<<<<<<< Updated upstream
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001194:	f000 fca5 	bl	8001ae2 <HAL_Init>
	/* USER CODE BEGIN Init */
=======
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 8001ab2:	f000 fdd8 	bl	8002666 <HAL_Init>
=======
 8001962:	f000 fda4 	bl	80024ae <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */
>>>>>>> Stashed changes

	/* USER CODE END Init */

<<<<<<< Updated upstream
	/* Configure the system clock */
	SystemClock_Config();
 8001198:	f000 f920 	bl	80013dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
=======
  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 8001ab6:	f000 f881 	bl	8001bbc <SystemClock_Config>
=======
 8001966:	f000 f843 	bl	80019f0 <SystemClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */
>>>>>>> Stashed changes

	/* USER CODE END SysInit */

<<<<<<< Updated upstream
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800119c:	f7ff ff36 	bl	800100c <MX_GPIO_Init>
	MX_ADC3_Init();
 80011a0:	f7ff f9d4 	bl	800054c <MX_ADC3_Init>
	MX_SPI1_Init();
 80011a4:	f000 f98a 	bl	80014bc <MX_SPI1_Init>
	MX_FATFS_Init();
 80011a8:	f004 fd98 	bl	8005cdc <MX_FATFS_Init>
	MX_USART3_UART_Init();
 80011ac:	f000 fab2 	bl	8001714 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	reset_UART();
 80011b0:	f000 fb78 	bl	80018a4 <reset_UART>
	send_UART(PROMPT);
 80011b4:	4875      	ldr	r0, [pc, #468]	; (800138c <main+0x200>)
 80011b6:	f000 fb8d 	bl	80018d4 <send_UART>

	// Wait for SD module reset
	HAL_Delay(500);
 80011ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011be:	f000 fced 	bl	8001b9c <HAL_Delay>

  	// Mount SD Card
  	if(f_mount(&fs, "", 0) != FR_OK)
 80011c2:	2200      	movs	r2, #0
 80011c4:	4972      	ldr	r1, [pc, #456]	; (8001390 <main+0x204>)
 80011c6:	4873      	ldr	r0, [pc, #460]	; (8001394 <main+0x208>)
 80011c8:	f006 ffd2 	bl	8008170 <f_mount>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <main+0x4c>
  		send_UART("Not mounted");
 80011d2:	4871      	ldr	r0, [pc, #452]	; (8001398 <main+0x20c>)
 80011d4:	f000 fb7e 	bl	80018d4 <send_UART>

  	HAL_Delay(500);
 80011d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011dc:	f000 fcde 	bl	8001b9c <HAL_Delay>

  	// Open file to write
  	if(f_open(&fil, "first.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 80011e0:	2213      	movs	r2, #19
 80011e2:	496e      	ldr	r1, [pc, #440]	; (800139c <main+0x210>)
 80011e4:	486e      	ldr	r0, [pc, #440]	; (80013a0 <main+0x214>)
 80011e6:	f007 f809 	bl	80081fc <f_open>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <main+0x6a>
  		send_UART("Not opened");
 80011f0:	486c      	ldr	r0, [pc, #432]	; (80013a4 <main+0x218>)
 80011f2:	f000 fb6f 	bl	80018d4 <send_UART>

  	HAL_Delay(500);
 80011f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011fa:	f000 fccf 	bl	8001b9c <HAL_Delay>

  	// Check freeSpace space
  	if(f_getfree("", &fre_clust, &pfs) != FR_OK)
 80011fe:	4a6a      	ldr	r2, [pc, #424]	; (80013a8 <main+0x21c>)
 8001200:	496a      	ldr	r1, [pc, #424]	; (80013ac <main+0x220>)
 8001202:	4863      	ldr	r0, [pc, #396]	; (8001390 <main+0x204>)
 8001204:	f007 fd61 	bl	8008cca <f_getfree>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <main+0x88>
  		send_UART("Not free");
 800120e:	4868      	ldr	r0, [pc, #416]	; (80013b0 <main+0x224>)
 8001210:	f000 fb60 	bl	80018d4 <send_UART>

  	HAL_Delay(500);
 8001214:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001218:	f000 fcc0 	bl	8001b9c <HAL_Delay>

  	totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800121c:	4b62      	ldr	r3, [pc, #392]	; (80013a8 <main+0x21c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	3b02      	subs	r3, #2
 8001224:	4a60      	ldr	r2, [pc, #384]	; (80013a8 <main+0x21c>)
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	8952      	ldrh	r2, [r2, #10]
 800122a:	fb02 f303 	mul.w	r3, r2, r3
 800122e:	ee07 3a90 	vmov	s15, r3
 8001232:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001236:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800123a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800123e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001242:	ee17 2a90 	vmov	r2, s15
 8001246:	4b5b      	ldr	r3, [pc, #364]	; (80013b4 <main+0x228>)
 8001248:	601a      	str	r2, [r3, #0]
  	freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800124a:	4b57      	ldr	r3, [pc, #348]	; (80013a8 <main+0x21c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	895b      	ldrh	r3, [r3, #10]
 8001250:	461a      	mov	r2, r3
 8001252:	4b56      	ldr	r3, [pc, #344]	; (80013ac <main+0x220>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	fb02 f303 	mul.w	r3, r2, r3
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001262:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001266:	ee27 7b06 	vmul.f64	d7, d7, d6
 800126a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800126e:	ee17 2a90 	vmov	r2, s15
 8001272:	4b51      	ldr	r3, [pc, #324]	; (80013b8 <main+0x22c>)
 8001274:	601a      	str	r2, [r3, #0]

  	HAL_Delay(500);
 8001276:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800127a:	f000 fc8f 	bl	8001b9c <HAL_Delay>

  	// free space is less than 1kb
  	if(freeSpace < 1)
 800127e:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <main+0x22c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <main+0x100>
  		send_UART("Low storage");
 8001286:	484d      	ldr	r0, [pc, #308]	; (80013bc <main+0x230>)
 8001288:	f000 fb24 	bl	80018d4 <send_UART>

  	HAL_Delay(500);
 800128c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001290:	f000 fc84 	bl	8001b9c <HAL_Delay>

  	// Writing text
  	f_puts("STM32 SD Card I/O Example via SPI\n", &fil);
 8001294:	4942      	ldr	r1, [pc, #264]	; (80013a0 <main+0x214>)
 8001296:	484a      	ldr	r0, [pc, #296]	; (80013c0 <main+0x234>)
 8001298:	f007 fe80 	bl	8008f9c <f_puts>
  	f_puts("Save the world!!!", &fil);
 800129c:	4940      	ldr	r1, [pc, #256]	; (80013a0 <main+0x214>)
 800129e:	4849      	ldr	r0, [pc, #292]	; (80013c4 <main+0x238>)
 80012a0:	f007 fe7c 	bl	8008f9c <f_puts>

  	HAL_Delay(500);
 80012a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a8:	f000 fc78 	bl	8001b9c <HAL_Delay>

  	// Close file
  	if(f_close(&fil) != FR_OK)
 80012ac:	483c      	ldr	r0, [pc, #240]	; (80013a0 <main+0x214>)
 80012ae:	f007 fce2 	bl	8008c76 <f_close>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <main+0x132>
  		send_UART("Not closed");
 80012b8:	4843      	ldr	r0, [pc, #268]	; (80013c8 <main+0x23c>)
 80012ba:	f000 fb0b 	bl	80018d4 <send_UART>

  	HAL_Delay(500);
 80012be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c2:	f000 fc6b 	bl	8001b9c <HAL_Delay>

  	// Open file to read
  	if(f_open(&fil, "first.txt", FA_READ) != FR_OK)
 80012c6:	2201      	movs	r2, #1
 80012c8:	4934      	ldr	r1, [pc, #208]	; (800139c <main+0x210>)
 80012ca:	4835      	ldr	r0, [pc, #212]	; (80013a0 <main+0x214>)
 80012cc:	f006 ff96 	bl	80081fc <f_open>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d002      	beq.n	80012dc <main+0x150>
  		send_UART("Not opened");
 80012d6:	4833      	ldr	r0, [pc, #204]	; (80013a4 <main+0x218>)
 80012d8:	f000 fafc 	bl	80018d4 <send_UART>

  	HAL_Delay(500);
 80012dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012e0:	f000 fc5c 	bl	8001b9c <HAL_Delay>

  	while(f_gets(buffer, sizeof(buffer), &fil))
 80012e4:	e002      	b.n	80012ec <main+0x160>
  	{
  		send_UART(buffer);
 80012e6:	4839      	ldr	r0, [pc, #228]	; (80013cc <main+0x240>)
 80012e8:	f000 faf4 	bl	80018d4 <send_UART>
  	while(f_gets(buffer, sizeof(buffer), &fil))
 80012ec:	4a2c      	ldr	r2, [pc, #176]	; (80013a0 <main+0x214>)
 80012ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f2:	4836      	ldr	r0, [pc, #216]	; (80013cc <main+0x240>)
 80012f4:	f007 fd9e 	bl	8008e34 <f_gets>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f3      	bne.n	80012e6 <main+0x15a>
  	}

  	HAL_Delay(500);
 80012fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001302:	f000 fc4b 	bl	8001b9c <HAL_Delay>

  	// Close file
  	if(f_close(&fil) != FR_OK)
 8001306:	4826      	ldr	r0, [pc, #152]	; (80013a0 <main+0x214>)
 8001308:	f007 fcb5 	bl	8008c76 <f_close>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <main+0x18c>
  		send_UART("Not closed");
 8001312:	482d      	ldr	r0, [pc, #180]	; (80013c8 <main+0x23c>)
 8001314:	f000 fade 	bl	80018d4 <send_UART>

  	HAL_Delay(500);
 8001318:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800131c:	f000 fc3e 	bl	8001b9c <HAL_Delay>

  	// Unmount SDCARD
  	if(f_mount(NULL, "", 1) != FR_OK)
 8001320:	2201      	movs	r2, #1
 8001322:	491b      	ldr	r1, [pc, #108]	; (8001390 <main+0x204>)
 8001324:	2000      	movs	r0, #0
 8001326:	f006 ff23 	bl	8008170 <f_mount>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <main+0x1aa>
  		send_UART("Not unmounted");
 8001330:	4827      	ldr	r0, [pc, #156]	; (80013d0 <main+0x244>)
 8001332:	f000 facf 	bl	80018d4 <send_UART>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
=======
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 8001aba:	f7ff fd95 	bl	80015e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001abe:	f7ff f8a7 	bl	8000c10 <MX_DMA_Init>
  MX_FATFS_Init();
 8001ac2:	f005 fe05 	bl	80076d0 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8001ac6:	f000 fbe7 	bl	8002298 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001aca:	f7fe ff87 	bl	80009dc <MX_ADC1_Init>
  MX_TIM1_Init();
 8001ace:	f000 fb59 	bl	8002184 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001ad2:	f000 f8e1 	bl	8001c98 <MX_SPI1_Init>
  MX_SPI4_Init();
 8001ad6:	f000 f91d 	bl	8001d14 <MX_SPI4_Init>
=======
 800196a:	f7ff fe3d 	bl	80015e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800196e:	f7ff f94f 	bl	8000c10 <MX_DMA_Init>
  MX_FATFS_Init();
 8001972:	f005 fdd1 	bl	8007518 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8001976:	f000 fbb3 	bl	80020e0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800197a:	f7ff f82f 	bl	80009dc <MX_ADC1_Init>
  MX_TIM1_Init();
 800197e:	f000 fb1b 	bl	8001fb8 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001982:	f000 f8a3 	bl	8001acc <MX_SPI1_Init>
  MX_SPI4_Init();
 8001986:	f000 f8df 	bl	8001b48 <MX_SPI4_Init>
>>>>>>> Stashed changes
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
>>>>>>> Stashed changes

	while (1)
	{
		if(has_message_from_UART())
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001336:	f000 fa9d 	bl	8001874 <has_message_from_UART>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d016      	beq.n	800136e <main+0x1e2>
=======
 8001ada:	f000 fc8d 	bl	80023f8 <has_message_from_UART>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d016      	beq.n	8001b12 <main+0x72>
>>>>>>> Stashed changes
=======
 800198a:	f000 fc59 	bl	8002240 <has_message_from_UART>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d016      	beq.n	80019c2 <main+0x72>
>>>>>>> Stashed changes
		{
		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001340:	463b      	mov	r3, r7
 8001342:	4618      	mov	r0, r3
 8001344:	f000 faf0 	bl	8001928 <read_UART>

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001348:	2101      	movs	r1, #1
 800134a:	4822      	ldr	r0, [pc, #136]	; (80013d4 <main+0x248>)
 800134c:	f001 fa47 	bl	80027de <HAL_GPIO_TogglePin>

		  send_UART((char*) message);
 8001350:	463b      	mov	r3, r7
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fabe 	bl	80018d4 <send_UART>

		  while(is_transmitting_to_UART());
 8001358:	bf00      	nop
 800135a:	f000 fa97 	bl	800188c <is_transmitting_to_UART>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1fa      	bne.n	800135a <main+0x1ce>

		  reset_UART();
 8001364:	f000 fa9e 	bl	80018a4 <reset_UART>
		  send_UART(PROMPT);
 8001368:	4808      	ldr	r0, [pc, #32]	; (800138c <main+0x200>)
 800136a:	f000 fab3 	bl	80018d4 <send_UART>
		}

		if(isButPressed())
 800136e:	f7ff fef5 	bl	800115c <isButPressed>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0de      	beq.n	8001336 <main+0x1aa>
		{
			butClear();
 8001378:	f7ff fefc 	bl	8001174 <butClear>
			send_UART("Button pressed");
 800137c:	4816      	ldr	r0, [pc, #88]	; (80013d8 <main+0x24c>)
 800137e:	f000 faa9 	bl	80018d4 <send_UART>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <main+0x248>)
 8001386:	f001 fa2a 	bl	80027de <HAL_GPIO_TogglePin>
		if(has_message_from_UART())
 800138a:	e7d4      	b.n	8001336 <main+0x1aa>
 800138c:	080092c0 	.word	0x080092c0
 8001390:	080092c4 	.word	0x080092c4
 8001394:	20000090 	.word	0x20000090
 8001398:	080092c8 	.word	0x080092c8
 800139c:	080092d4 	.word	0x080092d4
 80013a0:	200010c8 	.word	0x200010c8
 80013a4:	080092e0 	.word	0x080092e0
 80013a8:	200022f8 	.word	0x200022f8
 80013ac:	200022fc 	.word	0x200022fc
 80013b0:	080092ec 	.word	0x080092ec
 80013b4:	20002300 	.word	0x20002300
 80013b8:	20002304 	.word	0x20002304
 80013bc:	080092f8 	.word	0x080092f8
 80013c0:	08009304 	.word	0x08009304
 80013c4:	08009328 	.word	0x08009328
 80013c8:	0800933c 	.word	0x0800933c
 80013cc:	200020f8 	.word	0x200020f8
 80013d0:	08009348 	.word	0x08009348
 80013d4:	40020400 	.word	0x40020400
 80013d8:	08009358 	.word	0x08009358

080013dc <SystemClock_Config>:
=======
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 fce0 	bl	80024ac <read_UART>

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001aec:	2101      	movs	r1, #1
 8001aee:	482b      	ldr	r0, [pc, #172]	; (8001b9c <main+0xfc>)
 8001af0:	f001 ff21 	bl	8003936 <HAL_GPIO_TogglePin>

		  send_UART((char*) message);
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 fcae 	bl	8002458 <send_UART>

		  while(is_transmitting_to_UART());
 8001afc:	bf00      	nop
 8001afe:	f000 fc87 	bl	8002410 <is_transmitting_to_UART>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1fa      	bne.n	8001afe <main+0x5e>

		  reset_UART();
 8001b08:	f000 fc8e 	bl	8002428 <reset_UART>
		  send_UART(PROMPT);
 8001b0c:	4824      	ldr	r0, [pc, #144]	; (8001ba0 <main+0x100>)
 8001b0e:	f000 fca3 	bl	8002458 <send_UART>
		}

		if(isButPressed())
 8001b12:	f7ff fe31 	bl	8001778 <isButPressed>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <main+0x8e>
		{
			butClear();
 8001b1c:	f7ff fe38 	bl	8001790 <butClear>
			send_UART("Button pressed");
 8001b20:	4820      	ldr	r0, [pc, #128]	; (8001ba4 <main+0x104>)
 8001b22:	f000 fc99 	bl	8002458 <send_UART>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	481c      	ldr	r0, [pc, #112]	; (8001b9c <main+0xfc>)
 8001b2a:	f001 ff04 	bl	8003936 <HAL_GPIO_TogglePin>
			send_UART(PROMPT);
			*/
		}

		//Test values
		float T_PT100 = 20.345689; // PT100 temperature
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <main+0x108>)
 8001b30:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		float T_STM = 19.452389; // STM temperature
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <main+0x10c>)
 8001b36:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
		float B1 = 4.56756; //battery 1 level
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <main+0x110>)
 8001b3c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
		float B2 = 3.23453; //battery 2 level
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <main+0x114>)
 8001b42:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		float B3 = 5.001; //battery 3 level
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <main+0x118>)
 8001b48:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204


		char MSG[42] = ""; //Message to send
 8001b4c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001b50:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	2226      	movs	r2, #38	; 0x26
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f005 fea4 	bl	80078ac <memset>
		ConstMsg(MSG, T_PT100, T_STM, B1, B2, B3); // build Message
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	ed97 2a81 	vldr	s4, [r7, #516]	; 0x204
 8001b6a:	edd7 1a82 	vldr	s3, [r7, #520]	; 0x208
 8001b6e:	ed97 1a83 	vldr	s2, [r7, #524]	; 0x20c
 8001b72:	edd7 0a84 	vldr	s1, [r7, #528]	; 0x210
 8001b76:	ed97 0a85 	vldr	s0, [r7, #532]	; 0x214
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fe78 	bl	8001870 <ConstMsg>
		SendToSlave(MSG, strlen(MSG)); //Send message MSG to Slave
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fb5c 	bl	8000240 <strlen>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff49 	bl	8001a28 <SendToSlave>
	{
 8001b96:	e7a0      	b.n	8001ada <main+0x3a>
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	0800c0a0 	.word	0x0800c0a0
 8001ba4:	0800c0a4 	.word	0x0800c0a4
 8001ba8:	41a2c3f9 	.word	0x41a2c3f9
 8001bac:	419b9e7e 	.word	0x419b9e7e
 8001bb0:	40922974 	.word	0x40922974
 8001bb4:	404f028a 	.word	0x404f028a
 8001bb8:	40a00831 	.word	0x40a00831

08001bbc <SystemClock_Config>:
>>>>>>> Stashed changes
=======
 8001994:	463b      	mov	r3, r7
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fcac 	bl	80022f4 <read_UART>

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800199c:	2101      	movs	r1, #1
 800199e:	4811      	ldr	r0, [pc, #68]	; (80019e4 <main+0x94>)
 80019a0:	f001 feed 	bl	800377e <HAL_GPIO_TogglePin>

		  send_UART((char*) message);
 80019a4:	463b      	mov	r3, r7
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fc7a 	bl	80022a0 <send_UART>

		  while(is_transmitting_to_UART());
 80019ac:	bf00      	nop
 80019ae:	f000 fc53 	bl	8002258 <is_transmitting_to_UART>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1fa      	bne.n	80019ae <main+0x5e>

		  reset_UART();
 80019b8:	f000 fc5a 	bl	8002270 <reset_UART>
		  send_UART(PROMPT);
 80019bc:	480a      	ldr	r0, [pc, #40]	; (80019e8 <main+0x98>)
 80019be:	f000 fc6f 	bl	80022a0 <send_UART>
		}

		if(isButPressed())
 80019c2:	f7ff fed9 	bl	8001778 <isButPressed>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0de      	beq.n	800198a <main+0x3a>
		{
			butClear();
 80019cc:	f7ff fee0 	bl	8001790 <butClear>
			send_UART("Button pressed");
 80019d0:	4806      	ldr	r0, [pc, #24]	; (80019ec <main+0x9c>)
 80019d2:	f000 fc65 	bl	80022a0 <send_UART>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <main+0x94>)
 80019da:	f001 fed0 	bl	800377e <HAL_GPIO_TogglePin>
		if(has_message_from_UART())
 80019de:	e7d4      	b.n	800198a <main+0x3a>
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40020400 	.word	0x40020400
 80019e8:	0800be64 	.word	0x0800be64
 80019ec:	0800be68 	.word	0x0800be68

080019f0 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80013dc:	b580      	push	{r7, lr}
 80013de:	b094      	sub	sp, #80	; 0x50
 80013e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	2234      	movs	r2, #52	; 0x34
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f007 ff40 	bl	8009270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
=======
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b094      	sub	sp, #80	; 0x50
 8001bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	2234      	movs	r2, #52	; 0x34
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f005 fe6e 	bl	80078ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd0:	f107 0308 	add.w	r3, r7, #8
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
=======
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b094      	sub	sp, #80	; 0x50
 80019f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	2234      	movs	r2, #52	; 0x34
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f005 fe78 	bl	80076f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a04:	f107 0308 	add.w	r3, r7, #8
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001400:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <SystemClock_Config+0xcc>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <SystemClock_Config+0xcc>)
 8001406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140a:	6413      	str	r3, [r2, #64]	; 0x40
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <SystemClock_Config+0xcc>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001418:	4b24      	ldr	r3, [pc, #144]	; (80014ac <SystemClock_Config+0xd0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001420:	4a22      	ldr	r2, [pc, #136]	; (80014ac <SystemClock_Config+0xd0>)
 8001422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b20      	ldr	r3, [pc, #128]	; (80014ac <SystemClock_Config+0xd0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	683b      	ldr	r3, [r7, #0]
=======
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <SystemClock_Config+0xc8>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	4a27      	ldr	r2, [pc, #156]	; (8001c84 <SystemClock_Config+0xc8>)
 8001be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bea:	6413      	str	r3, [r2, #64]	; 0x40
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <SystemClock_Config+0xc8>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <SystemClock_Config+0xcc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c00:	4a21      	ldr	r2, [pc, #132]	; (8001c88 <SystemClock_Config+0xcc>)
 8001c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <SystemClock_Config+0xcc>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes
=======
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <SystemClock_Config+0xc8>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	4a27      	ldr	r2, [pc, #156]	; (8001ab8 <SystemClock_Config+0xc8>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <SystemClock_Config+0xc8>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a2c:	4b23      	ldr	r3, [pc, #140]	; (8001abc <SystemClock_Config+0xcc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a34:	4a21      	ldr	r2, [pc, #132]	; (8001abc <SystemClock_Config+0xcc>)
 8001a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <SystemClock_Config+0xcc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001434:	2302      	movs	r3, #2
 8001436:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001438:	2301      	movs	r3, #1
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143c:	2310      	movs	r3, #16
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001440:	2302      	movs	r3, #2
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001444:	2300      	movs	r3, #0
 8001446:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001448:	2308      	movs	r3, #8
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800144c:	2360      	movs	r3, #96	; 0x60
 800144e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001450:	2302      	movs	r3, #2
 8001452:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001454:	2307      	movs	r3, #7
 8001456:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001458:	2302      	movs	r3, #2
 800145a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4618      	mov	r0, r3
 8001462:	f001 f9ef 	bl	8002844 <HAL_RCC_OscConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800146c:	f000 f820 	bl	80014b0 <Error_Handler>
=======
 8001c14:	2302      	movs	r3, #2
 8001c16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c1c:	2310      	movs	r3, #16
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c20:	2302      	movs	r3, #2
 8001c22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c24:	2300      	movs	r3, #0
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c28:	2308      	movs	r3, #8
 8001c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c2c:	2360      	movs	r3, #96	; 0x60
 8001c2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001c30:	2306      	movs	r3, #6
 8001c32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c34:	2307      	movs	r3, #7
 8001c36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4618      	mov	r0, r3
 8001c42:	f001 feab 	bl	800399c <HAL_RCC_OscConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c4c:	f000 f81e 	bl	8001c8c <Error_Handler>
>>>>>>> Stashed changes
=======
 8001a48:	2302      	movs	r3, #2
 8001a4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a50:	2310      	movs	r3, #16
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a54:	2302      	movs	r3, #2
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001a60:	2360      	movs	r3, #96	; 0x60
 8001a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001a64:	2306      	movs	r3, #6
 8001a66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a68:	2307      	movs	r3, #7
 8001a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 feb5 	bl	80037e4 <HAL_RCC_OscConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a80:	f000 f81e 	bl	8001ac0 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001470:	230f      	movs	r3, #15
 8001472:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001474:	2302      	movs	r3, #2
 8001476:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800147c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001480:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	2101      	movs	r1, #1
 800148e:	4618      	mov	r0, r3
 8001490:	f001 fc86 	bl	8002da0 <HAL_RCC_ClockConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800149a:	f000 f809 	bl	80014b0 <Error_Handler>
  }
}
 800149e:	bf00      	nop
 80014a0:	3750      	adds	r7, #80	; 0x50
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40007000 	.word	0x40007000

080014b0 <Error_Handler>:
=======
 8001c50:	230f      	movs	r3, #15
 8001c52:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c54:	2302      	movs	r3, #2
 8001c56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c64:	f107 0308 	add.w	r3, r7, #8
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 f944 	bl	8003ef8 <HAL_RCC_ClockConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001c76:	f000 f809 	bl	8001c8c <Error_Handler>
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	3750      	adds	r7, #80	; 0x50
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40007000 	.word	0x40007000

08001c8c <Error_Handler>:
>>>>>>> Stashed changes
=======
 8001a84:	230f      	movs	r3, #15
 8001a86:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 f94e 	bl	8003d40 <HAL_RCC_ClockConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001aaa:	f000 f809 	bl	8001ac0 <Error_Handler>
  }
}
 8001aae:	bf00      	nop
 8001ab0:	3750      	adds	r7, #80	; 0x50
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000

08001ac0 <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
=======
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
=======
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
>>>>>>> Stashed changes
=======
 8001ac4:	b672      	cpsid	i
}
 8001ac6:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80014b8:	e7fe      	b.n	80014b8 <Error_Handler+0x8>
	...

080014bc <MX_SPI1_Init>:

=======
 8001c94:	e7fe      	b.n	8001c94 <Error_Handler+0x8>
	...

08001c98 <MX_SPI1_Init>:
>>>>>>> Stashed changes
=======
 8001ac8:	e7fe      	b.n	8001ac8 <Error_Handler+0x8>
	...

08001acc <MX_SPI1_Init>:
>>>>>>> Stashed changes
SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
=======
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <MX_SPI1_Init+0x74>)
 80014c2:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <MX_SPI1_Init+0x78>)
 80014c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_SPI1_Init+0x74>)
 80014c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_SPI1_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_SPI1_Init+0x74>)
 80014d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_SPI1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_SPI1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_SPI1_Init+0x74>)
 80014ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_SPI1_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_SPI1_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_SPI1_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_SPI1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_SPI1_Init+0x74>)
 800150a:	2207      	movs	r2, #7
 800150c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_SPI1_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_SPI1_Init+0x74>)
 8001516:	2208      	movs	r2, #8
 8001518:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_SPI1_Init+0x74>)
 800151c:	f002 fa8c 	bl	8003a38 <HAL_SPI_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001526:	f7ff ffc3 	bl	80014b0 <Error_Handler>
=======
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <MX_SPI1_Init+0x74>)
 8001c9e:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <MX_SPI1_Init+0x78>)
 8001ca0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <MX_SPI1_Init+0x74>)
 8001ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ca8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <MX_SPI1_Init+0x74>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <MX_SPI1_Init+0x74>)
 8001cb2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cb6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <MX_SPI1_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <MX_SPI1_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_SPI1_Init+0x74>)
 8001cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <MX_SPI1_Init+0x74>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_SPI1_Init+0x74>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_SPI1_Init+0x74>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <MX_SPI1_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_SPI1_Init+0x74>)
 8001ce6:	2207      	movs	r2, #7
 8001ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MX_SPI1_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_SPI1_Init+0x74>)
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_SPI1_Init+0x74>)
 8001cf8:	f002 ff4a 	bl	8004b90 <HAL_SPI_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d02:	f7ff ffc3 	bl	8001c8c <Error_Handler>
>>>>>>> Stashed changes
=======
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <MX_SPI1_Init+0x78>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001ae6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001aea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b1a:	2207      	movs	r2, #7
 8001b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b26:	2208      	movs	r2, #8
 8001b28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b2c:	f002 ff54 	bl	80049d8 <HAL_SPI_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b36:	f7ff ffc3 	bl	8001ac0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20002308 	.word	0x20002308
 8001534:	40013000 	.word	0x40013000

08001538 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_SPI_MspInit+0x7c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d127      	bne.n	80015aa <HAL_SPI_MspInit+0x72>
=======
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200002d0 	.word	0x200002d0
 8001d10:	40013000 	.word	0x40013000

08001d14 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
=======
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000310 	.word	0x20000310
 8001b44:	40013000 	.word	0x40013000

08001b48 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
<<<<<<< Updated upstream
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <MX_SPI4_Init+0x74>)
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <MX_SPI4_Init+0x78>)
 8001d1c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <MX_SPI4_Init+0x74>)
 8001d20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d24:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001d26:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <MX_SPI4_Init+0x74>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <MX_SPI4_Init+0x74>)
 8001d2e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d32:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d34:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <MX_SPI4_Init+0x74>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <MX_SPI4_Init+0x74>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <MX_SPI4_Init+0x74>)
 8001d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d46:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <MX_SPI4_Init+0x74>)
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <MX_SPI4_Init+0x74>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <MX_SPI4_Init+0x74>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <MX_SPI4_Init+0x74>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <MX_SPI4_Init+0x74>)
 8001d62:	2207      	movs	r2, #7
 8001d64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <MX_SPI4_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <MX_SPI4_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <MX_SPI4_Init+0x74>)
 8001d74:	f002 ff0c 	bl	8004b90 <HAL_SPI_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001d7e:	f7ff ff85 	bl	8001c8c <Error_Handler>
=======
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b4e:	4a1c      	ldr	r2, [pc, #112]	; (8001bc0 <MX_SPI4_Init+0x78>)
 8001b50:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b58:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b66:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b68:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b7e:	2208      	movs	r2, #8
 8001b80:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b96:	2207      	movs	r2, #7
 8001b98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001ba8:	f002 ff16 	bl	80049d8 <HAL_SPI_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001bb2:	f7ff ff85 	bl	8001ac0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
<<<<<<< Updated upstream
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000334 	.word	0x20000334
 8001d8c:	40013400 	.word	0x40013400

08001d90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08c      	sub	sp, #48	; 0x30
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2e      	ldr	r2, [pc, #184]	; (8001e68 <HAL_SPI_MspInit+0xd8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d128      	bne.n	8001e04 <HAL_SPI_MspInit+0x74>
>>>>>>> Stashed changes
=======
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000374 	.word	0x20000374
 8001bc0:	40013400 	.word	0x40013400

08001bc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a2e      	ldr	r2, [pc, #184]	; (8001c9c <HAL_SPI_MspInit+0xd8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d128      	bne.n	8001c38 <HAL_SPI_MspInit+0x74>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_SPI_MspInit+0x80>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a16      	ldr	r2, [pc, #88]	; (80015b8 <HAL_SPI_MspInit+0x80>)
 8001560:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_SPI_MspInit+0x80>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_SPI_MspInit+0x80>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_SPI_MspInit+0x80>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_SPI_MspInit+0x80>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
=======
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_SPI_MspInit+0xdc>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a2d      	ldr	r2, [pc, #180]	; (8001e6c <HAL_SPI_MspInit+0xdc>)
 8001db8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_SPI_MspInit+0xdc>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_SPI_MspInit+0xdc>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <HAL_SPI_MspInit+0xdc>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <HAL_SPI_MspInit+0xdc>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
>>>>>>> Stashed changes
=======
 8001be6:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a27      	ldr	r2, [pc, #156]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697b      	ldr	r3, [r7, #20]
>>>>>>> Stashed changes
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800158a:	23e0      	movs	r3, #224	; 0xe0
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800159a:	2305      	movs	r3, #5
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_SPI_MspInit+0x84>)
 80015a6:	f000 ff55 	bl	8002454 <HAL_GPIO_Init>
=======
 8001de2:	23e0      	movs	r3, #224	; 0xe0
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001df2:	2305      	movs	r3, #5
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	481c      	ldr	r0, [pc, #112]	; (8001e70 <HAL_SPI_MspInit+0xe0>)
 8001dfe:	f001 fbd5 	bl	80035ac <HAL_GPIO_Init>
>>>>>>> Stashed changes
=======
 8001c16:	23e0      	movs	r3, #224	; 0xe0
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c26:	2305      	movs	r3, #5
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	481c      	ldr	r0, [pc, #112]	; (8001ca4 <HAL_SPI_MspInit+0xe0>)
 8001c32:	f001 fbdf 	bl	80033f4 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40013000 	.word	0x40013000
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000

080015c0 <HAL_MspInit>:
=======
 8001e02:	e02c      	b.n	8001e5e <HAL_SPI_MspInit+0xce>
  else if(spiHandle->Instance==SPI4)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1a      	ldr	r2, [pc, #104]	; (8001e74 <HAL_SPI_MspInit+0xe4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d127      	bne.n	8001e5e <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <HAL_SPI_MspInit+0xdc>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	4a16      	ldr	r2, [pc, #88]	; (8001e6c <HAL_SPI_MspInit+0xdc>)
 8001e14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e18:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HAL_SPI_MspInit+0xdc>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_SPI_MspInit+0xdc>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <HAL_SPI_MspInit+0xdc>)
 8001e2c:	f043 0310 	orr.w	r3, r3, #16
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_SPI_MspInit+0xdc>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001e3e:	2364      	movs	r3, #100	; 0x64
 8001e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e4e:	2305      	movs	r3, #5
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	4619      	mov	r1, r3
 8001e58:	4807      	ldr	r0, [pc, #28]	; (8001e78 <HAL_SPI_MspInit+0xe8>)
 8001e5a:	f001 fba7 	bl	80035ac <HAL_GPIO_Init>
}
 8001e5e:	bf00      	nop
 8001e60:	3730      	adds	r7, #48	; 0x30
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40013000 	.word	0x40013000
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40013400 	.word	0x40013400
 8001e78:	40021000 	.word	0x40021000

08001e7c <HAL_MspInit>:
>>>>>>> Stashed changes
=======
 8001c36:	e02c      	b.n	8001c92 <HAL_SPI_MspInit+0xce>
  else if(spiHandle->Instance==SPI4)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1a      	ldr	r2, [pc, #104]	; (8001ca8 <HAL_SPI_MspInit+0xe4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d127      	bne.n	8001c92 <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a16      	ldr	r2, [pc, #88]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c60:	f043 0310 	orr.w	r3, r3, #16
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c72:	2364      	movs	r3, #100	; 0x64
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c82:	2305      	movs	r3, #5
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c86:	f107 031c 	add.w	r3, r7, #28
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <HAL_SPI_MspInit+0xe8>)
 8001c8e:	f001 fbb1 	bl	80033f4 <HAL_GPIO_Init>
}
 8001c92:	bf00      	nop
 8001c94:	3730      	adds	r7, #48	; 0x30
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40013000 	.word	0x40013000
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40013400 	.word	0x40013400
 8001cac:	40021000 	.word	0x40021000

08001cb0 <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
=======
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <HAL_MspInit+0x44>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <HAL_MspInit+0x44>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <HAL_MspInit+0x44>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_MspInit+0x44>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a08      	ldr	r2, [pc, #32]	; (8001604 <HAL_MspInit+0x44>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_MspInit+0x44>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
=======
 8001e82:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <HAL_MspInit+0x44>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <HAL_MspInit+0x44>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <HAL_MspInit+0x44>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_MspInit+0x44>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <HAL_MspInit+0x44>)
 8001ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_MspInit+0x44>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes
=======
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800

08001608 <SDTimer_Handler>:
=======
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <SDTimer_Handler>:
>>>>>>> Stashed changes
=======
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <SDTimer_Handler>:
>>>>>>> Stashed changes

volatile uint8_t FatFSCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <SDTimer_Handler+0x40>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	b29b      	uxth	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d006      	beq.n	8001624 <SDTimer_Handler+0x1c>
		Timer1--;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <SDTimer_Handler+0x40>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <SDTimer_Handler+0x40>)
 8001622:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <SDTimer_Handler+0x44>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	b29b      	uxth	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <SDTimer_Handler+0x34>
		Timer2--;
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <SDTimer_Handler+0x44>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	b29b      	uxth	r3, r3
 8001634:	3b01      	subs	r3, #1
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <SDTimer_Handler+0x44>)
 800163a:	801a      	strh	r2, [r3, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	2000236e 	.word	0x2000236e
 800164c:	20002370 	.word	0x20002370

08001650 <NMI_Handler>:
=======
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <SDTimer_Handler+0x40>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <SDTimer_Handler+0x1c>
		Timer1--;
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <SDTimer_Handler+0x40>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <SDTimer_Handler+0x40>)
 8001ede:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <SDTimer_Handler+0x44>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d006      	beq.n	8001ef8 <SDTimer_Handler+0x34>
		Timer2--;
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <SDTimer_Handler+0x44>)
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SDTimer_Handler+0x44>)
 8001ef6:	801a      	strh	r2, [r3, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	2000039a 	.word	0x2000039a
 8001f08:	2000039c 	.word	0x2000039c

08001f0c <NMI_Handler>:
>>>>>>> Stashed changes
=======
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <SDTimer_Handler+0x40>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <SDTimer_Handler+0x1c>
		Timer1--;
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <SDTimer_Handler+0x40>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <SDTimer_Handler+0x40>)
 8001d12:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <SDTimer_Handler+0x44>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <SDTimer_Handler+0x34>
		Timer2--;
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <SDTimer_Handler+0x44>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <SDTimer_Handler+0x44>)
 8001d2a:	801a      	strh	r2, [r3, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	200003da 	.word	0x200003da
 8001d3c:	200003dc 	.word	0x200003dc

08001d40 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
=======
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:
=======
 8001f10:	e7fe      	b.n	8001f10 <NMI_Handler+0x4>

08001f12 <HardFault_Handler>:
>>>>>>> Stashed changes
=======
 8001d44:	e7fe      	b.n	8001d44 <NMI_Handler+0x4>

08001d46 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
=======
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:
=======
 8001f16:	e7fe      	b.n	8001f16 <HardFault_Handler+0x4>

08001f18 <MemManage_Handler>:
>>>>>>> Stashed changes
=======
 8001d4a:	e7fe      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
=======
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:
=======
 8001f1c:	e7fe      	b.n	8001f1c <MemManage_Handler+0x4>

08001f1e <BusFault_Handler>:
>>>>>>> Stashed changes
=======
 8001d50:	e7fe      	b.n	8001d50 <MemManage_Handler+0x4>

08001d52 <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
=======
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:
=======
 8001f22:	e7fe      	b.n	8001f22 <BusFault_Handler+0x4>

08001f24 <UsageFault_Handler>:
>>>>>>> Stashed changes
=======
 8001d56:	e7fe      	b.n	8001d56 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
=======
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <SVC_Handler>:
=======
 8001f28:	e7fe      	b.n	8001f28 <UsageFault_Handler+0x4>

08001f2a <SVC_Handler>:
>>>>>>> Stashed changes
=======
 8001d5c:	e7fe      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d5e <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
=======
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <DebugMon_Handler>:
=======
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <DebugMon_Handler>:
>>>>>>> Stashed changes
=======
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
=======
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <PendSV_Handler>:
=======
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <PendSV_Handler>:
>>>>>>> Stashed changes
=======
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
=======
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:
=======
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <SysTick_Handler>:
>>>>>>> Stashed changes
=======
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFSCnt++;
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <SysTick_Handler+0x30>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	3301      	adds	r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <SysTick_Handler+0x30>)
 80016a8:	701a      	strb	r2, [r3, #0]
	if(FatFSCnt >= 10)
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <SysTick_Handler+0x30>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b09      	cmp	r3, #9
 80016b2:	d904      	bls.n	80016be <SysTick_Handler+0x26>
	{
		FatFSCnt = 0;
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SysTick_Handler+0x30>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80016ba:	f7ff ffa5 	bl	8001608 <SDTimer_Handler>
=======
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFSCnt++;
 8001f58:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <SysTick_Handler+0x30>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <SysTick_Handler+0x30>)
 8001f64:	701a      	strb	r2, [r3, #0]
	if(FatFSCnt >= 10)
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <SysTick_Handler+0x30>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b09      	cmp	r3, #9
 8001f6e:	d904      	bls.n	8001f7a <SysTick_Handler+0x26>
	{
		FatFSCnt = 0;
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <SysTick_Handler+0x30>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001f76:	f7ff ffa5 	bl	8001ec4 <SDTimer_Handler>
>>>>>>> Stashed changes
=======
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFSCnt++;
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <SysTick_Handler+0x30>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	3301      	adds	r3, #1
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <SysTick_Handler+0x30>)
 8001d98:	701a      	strb	r2, [r3, #0]
	if(FatFSCnt >= 10)
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <SysTick_Handler+0x30>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b09      	cmp	r3, #9
 8001da2:	d904      	bls.n	8001dae <SysTick_Handler+0x26>
	{
		FatFSCnt = 0;
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <SysTick_Handler+0x30>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001daa:	f7ff ffa5 	bl	8001cf8 <SDTimer_Handler>
>>>>>>> Stashed changes
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80016be:	f000 fa4d 	bl	8001b5c <HAL_IncTick>
=======
 8001f7a:	f000 fbb1 	bl	80026e0 <HAL_IncTick>
>>>>>>> Stashed changes
=======
 8001dae:	f000 fbbb 	bl	8002528 <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000236c 	.word	0x2000236c

080016cc <USART3_IRQHandler>:
=======
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000398 	.word	0x20000398

08001f88 <TIM1_UP_TIM10_IRQHandler>:
=======
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200003d8 	.word	0x200003d8

08001dbc <TIM1_UP_TIM10_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
<<<<<<< Updated upstream
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
=======
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< Updated upstream
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f8e:	f003 fc0a 	bl	80057a6 <HAL_TIM_IRQHandler>
=======
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001dc2:	f003 fc14 	bl	80055ee <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
<<<<<<< Updated upstream
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200003a4 	.word	0x200003a4

08001f9c <USART3_IRQHandler>:
>>>>>>> Stashed changes
=======
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200003e4 	.word	0x200003e4

08001dd0 <USART3_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
=======
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <USART3_IRQHandler+0x10>)
 80016d2:	f003 f855 	bl	8004780 <HAL_UART_IRQHandler>
=======
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <USART3_IRQHandler+0x10>)
 8001fa2:	f004 f8e7 	bl	8006174 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
=======
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <USART3_IRQHandler+0x10>)
 8001dd6:	f004 f8f1 	bl	8005fbc <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20002780 	.word	0x20002780

080016e0 <EXTI15_10_IRQHandler>:
=======
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200007fc 	.word	0x200007fc

08001fb0 <EXTI15_10_IRQHandler>:
>>>>>>> Stashed changes
=======
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2000083c 	.word	0x2000083c

08001de4 <EXTI15_10_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
=======
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80016e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016e8:	f001 f894 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
=======
 8001fb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fb8:	f001 fcd8 	bl	800396c <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> Stashed changes
=======
 8001de8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001dec:	f001 fce2 	bl	80037b4 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <SystemInit>:
=======
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <DMA2_Stream0_IRQHandler>:
=======
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <DMA2_Stream0_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
<<<<<<< Updated upstream
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
=======
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< Updated upstream
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <DMA2_Stream0_IRQHandler+0x10>)
 8001fc6:	f001 f8b5 	bl	8003134 <HAL_DMA_IRQHandler>
=======
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <DMA2_Stream0_IRQHandler+0x10>)
 8001dfa:	f001 f8bf 	bl	8002f7c <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
<<<<<<< Updated upstream
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000025c 	.word	0x2000025c

08001fd4 <_getpid>:
=======
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000025c 	.word	0x2000025c

08001e08 <_getpid>:
>>>>>>> Stashed changes
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< Updated upstream
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return 1;
 8001fd8:	2301      	movs	r3, #1
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_kill>:

int _kill(int pid, int sig)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fee:	f005 fc33 	bl	8007858 <__errno>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2216      	movs	r2, #22
 8001ff6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_exit>:

void _exit (int status)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ffe7 	bl	8001fe4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002016:	e7fe      	b.n	8002016 <_exit+0x12>

08002018 <_read>:
=======
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return 1;
 8001e0c:	2301      	movs	r3, #1
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <_kill>:

int _kill(int pid, int sig)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e22:	f005 fc3d 	bl	80076a0 <__errno>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2216      	movs	r2, #22
 8001e2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_exit>:

void _exit (int status)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ffe7 	bl	8001e18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e4a:	e7fe      	b.n	8001e4a <_exit+0x12>

08001e4c <_read>:
>>>>>>> Stashed changes
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< Updated upstream
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
=======
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< Updated upstream
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e00a      	b.n	8002040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800202a:	f3af 8000 	nop.w
 800202e:	4601      	mov	r1, r0
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60ba      	str	r2, [r7, #8]
 8002036:	b2ca      	uxtb	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf0      	blt.n	800202a <_read+0x12>
  }

  return len;
 8002048:	687b      	ldr	r3, [r7, #4]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
=======
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	e00a      	b.n	8001e74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e5e:	f3af 8000 	nop.w
 8001e62:	4601      	mov	r1, r0
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	60ba      	str	r2, [r7, #8]
 8001e6a:	b2ca      	uxtb	r2, r1
 8001e6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	dbf0      	blt.n	8001e5e <_read+0x12>
  }

  return len;
 8001e7c:	687b      	ldr	r3, [r7, #4]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< Updated upstream
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	e009      	b.n	8002078 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	60ba      	str	r2, [r7, #8]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3301      	adds	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	dbf1      	blt.n	8002064 <_write+0x12>
  }
  return len;
 8002080:	687b      	ldr	r3, [r7, #4]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_close>:

int _close(int file)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <_fstat>:
=======
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e009      	b.n	8001eac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	60ba      	str	r2, [r7, #8]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	dbf1      	blt.n	8001e98 <_write+0x12>
  }
  return len;
 8001eb4:	687b      	ldr	r3, [r7, #4]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_close>:

int _close(int file)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <_fstat>:
>>>>>>> Stashed changes


int _fstat(int file, struct stat *st)
{
<<<<<<< Updated upstream
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b2:	605a      	str	r2, [r3, #4]
  return 0;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_isatty>:

int _isatty(int file)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
=======
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <_isatty>:

int _isatty(int file)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
<<<<<<< Updated upstream
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <_sbrk>:
=======
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <_sbrk>:
>>>>>>> Stashed changes
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< Updated upstream
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
=======
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< Updated upstream
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <_sbrk+0x5c>)
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <_sbrk+0x60>)
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
=======
 8001f30:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <_sbrk+0x5c>)
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <_sbrk+0x60>)
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< Updated upstream
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <_sbrk+0x64>)
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <_sbrk+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
=======
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <_sbrk+0x64>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <_sbrk+0x68>)
 8001f48:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< Updated upstream
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	429a      	cmp	r2, r3
 8002122:	d207      	bcs.n	8002134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002124:	f005 fb98 	bl	8007858 <__errno>
 8002128:	4603      	mov	r3, r0
 800212a:	220c      	movs	r2, #12
 800212c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e009      	b.n	8002148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <_sbrk+0x64>)
 8002144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20080000 	.word	0x20080000
 8002154:	00000400 	.word	0x00000400
 8002158:	200003a0 	.word	0x200003a0
 800215c:	200008b0 	.word	0x200008b0

08002160 <SystemInit>:
>>>>>>> Stashed changes
=======
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d207      	bcs.n	8001f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f58:	f005 fba2 	bl	80076a0 <__errno>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	220c      	movs	r2, #12
 8001f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	e009      	b.n	8001f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <_sbrk+0x64>)
 8001f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20080000 	.word	0x20080000
 8001f88:	00000400 	.word	0x00000400
 8001f8c:	200003e0 	.word	0x200003e0
 8001f90:	200008f0 	.word	0x200008f0

08001f94 <SystemInit>:
>>>>>>> Stashed changes
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <SystemInit+0x20>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <SystemInit+0x20>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <SystemInit+0x20>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <SystemInit+0x20>)
 800216c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes
=======
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <SystemInit+0x20>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9e:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <SystemInit+0x20>)
 8001fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <MX_USART3_UART_Init>:
=======
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <MX_TIM1_Init>:
=======
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <MX_TIM1_Init>:
>>>>>>> Stashed changes

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
<<<<<<< Updated upstream
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
=======
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< Updated upstream
 800218a:	f107 0310 	add.w	r3, r7, #16
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
=======
 8001fbe:	f107 0310 	add.w	r3, r7, #16
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< Updated upstream
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <MX_TIM1_Init+0xa0>)
 80021a4:	4a20      	ldr	r2, [pc, #128]	; (8002228 <MX_TIM1_Init+0xa4>)
 80021a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3000-1;
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <MX_TIM1_Init+0xa0>)
 80021aa:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80021ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b0:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <MX_TIM1_Init+0xa0>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16000-1;
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <MX_TIM1_Init+0xa0>)
 80021b8:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80021bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021be:	4b19      	ldr	r3, [pc, #100]	; (8002224 <MX_TIM1_Init+0xa0>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021c4:	4b17      	ldr	r3, [pc, #92]	; (8002224 <MX_TIM1_Init+0xa0>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <MX_TIM1_Init+0xa0>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021d0:	4814      	ldr	r0, [pc, #80]	; (8002224 <MX_TIM1_Init+0xa0>)
 80021d2:	f003 fa91 	bl	80056f8 <HAL_TIM_Base_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80021dc:	f7ff fd56 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	4619      	mov	r1, r3
 80021ec:	480d      	ldr	r0, [pc, #52]	; (8002224 <MX_TIM1_Init+0xa0>)
 80021ee:	f003 fbf9 	bl	80059e4 <HAL_TIM_ConfigClockSource>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80021f8:	f7ff fd48 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021fc:	2320      	movs	r3, #32
 80021fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	4619      	mov	r1, r3
 800220c:	4805      	ldr	r0, [pc, #20]	; (8002224 <MX_TIM1_Init+0xa0>)
 800220e:	f003 fe15 	bl	8005e3c <HAL_TIMEx_MasterConfigSynchronization>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002218:	f7ff fd38 	bl	8001c8c <Error_Handler>
=======
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <MX_TIM1_Init+0xa0>)
 8001fd8:	4a20      	ldr	r2, [pc, #128]	; (800205c <MX_TIM1_Init+0xa4>)
 8001fda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3000-1;
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <MX_TIM1_Init+0xa0>)
 8001fde:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001fe2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe4:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <MX_TIM1_Init+0xa0>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16000-1;
 8001fea:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <MX_TIM1_Init+0xa0>)
 8001fec:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001ff0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <MX_TIM1_Init+0xa0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ff8:	4b17      	ldr	r3, [pc, #92]	; (8002058 <MX_TIM1_Init+0xa0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <MX_TIM1_Init+0xa0>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002004:	4814      	ldr	r0, [pc, #80]	; (8002058 <MX_TIM1_Init+0xa0>)
 8002006:	f003 fa9b 	bl	8005540 <HAL_TIM_Base_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002010:	f7ff fd56 	bl	8001ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002018:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800201a:	f107 0310 	add.w	r3, r7, #16
 800201e:	4619      	mov	r1, r3
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <MX_TIM1_Init+0xa0>)
 8002022:	f003 fc03 	bl	800582c <HAL_TIM_ConfigClockSource>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800202c:	f7ff fd48 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002030:	2320      	movs	r3, #32
 8002032:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	4619      	mov	r1, r3
 8002040:	4805      	ldr	r0, [pc, #20]	; (8002058 <MX_TIM1_Init+0xa0>)
 8002042:	f003 fe1f 	bl	8005c84 <HAL_TIMEx_MasterConfigSynchronization>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800204c:	f7ff fd38 	bl	8001ac0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
<<<<<<< Updated upstream
 800221c:	bf00      	nop
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	200003a4 	.word	0x200003a4
 8002228:	40010000 	.word	0x40010000

0800222c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_TIM_Base_MspInit+0x44>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d113      	bne.n	8002266 <HAL_TIM_Base_MspInit+0x3a>
=======
 8002050:	bf00      	nop
 8002052:	3720      	adds	r7, #32
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	200003e4 	.word	0x200003e4
 800205c:	40010000 	.word	0x40010000

08002060 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_TIM_Base_MspInit+0x44>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d113      	bne.n	800209a <HAL_TIM_Base_MspInit+0x3a>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< Updated upstream
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_TIM_Base_MspInit+0x48>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <HAL_TIM_Base_MspInit+0x48>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6453      	str	r3, [r2, #68]	; 0x44
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_TIM_Base_MspInit+0x48>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	2019      	movs	r0, #25
 800225c:	f000 fdf3 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002260:	2019      	movs	r0, #25
 8002262:	f000 fe0c 	bl	8002e7e <HAL_NVIC_EnableIRQ>
=======
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <HAL_TIM_Base_MspInit+0x48>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <HAL_TIM_Base_MspInit+0x48>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_TIM_Base_MspInit+0x48>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	2019      	movs	r0, #25
 8002090:	f000 fdfd 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002094:	2019      	movs	r0, #25
 8002096:	f000 fe16 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40010000 	.word	0x40010000
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_TIM_PeriodElapsedCallback>:
=======
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40023800 	.word	0x40023800

080020ac <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> Stashed changes
/* USER CODE BEGIN 1 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002280:	2101      	movs	r1, #1
 8002282:	4804      	ldr	r0, [pc, #16]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002284:	f001 fb57 	bl	8003936 <HAL_GPIO_TogglePin>
	print_adc();
 8002288:	f7ff fa8e 	bl	80017a8 <print_adc>
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40020400 	.word	0x40020400

08002298 <MX_USART3_UART_Init>:
>>>>>>> Stashed changes
=======
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	//This function will be executed when the Timer reaches 3s

	if(htim == &htim1){
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d109      	bne.n	80020d0 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80020bc:	2101      	movs	r1, #1
 80020be:	4807      	ldr	r0, [pc, #28]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80020c0:	f001 fb5d 	bl	800377e <HAL_GPIO_TogglePin>
		print_adc();
 80020c4:	f7ff fbe0 	bl	8001888 <print_adc>
		Build_MSG(); //build Message before sending
 80020c8:	f7ff fb6e 	bl	80017a8 <Build_MSG>
		Send_MSG(); //Send Message to Slave(Arduino)
 80020cc:	f7ff fba8 	bl	8001820 <Send_MSG>
	}

}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200003e4 	.word	0x200003e4
 80020dc:	40020400 	.word	0x40020400

080020e0 <MX_USART3_UART_Init>:
>>>>>>> Stashed changes
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
=======
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <MX_USART3_UART_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <MX_USART3_UART_Init+0x78>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <MX_USART3_UART_Init+0x7c>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_USART3_UART_Init+0x80>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <MX_USART3_UART_Init+0x84>)
 8001732:	220d      	movs	r2, #13
 8001734:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <MX_USART3_UART_Init+0x88>)
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <MX_USART3_UART_Init+0x8c>)
 800173a:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <MX_USART3_UART_Init+0x88>)
 800173e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001742:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <MX_USART3_UART_Init+0x88>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_USART3_UART_Init+0x88>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_USART3_UART_Init+0x88>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_USART3_UART_Init+0x88>)
 8001758:	220c      	movs	r2, #12
 800175a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_USART3_UART_Init+0x88>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_USART3_UART_Init+0x88>)
 8001764:	2200      	movs	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_USART3_UART_Init+0x88>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_USART3_UART_Init+0x88>)
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001774:	4809      	ldr	r0, [pc, #36]	; (800179c <MX_USART3_UART_Init+0x88>)
 8001776:	f002 ff13 	bl	80045a0 <HAL_UART_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8001780:	f7ff fe96 	bl	80014b0 <Error_Handler>
=======
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <MX_USART3_UART_Init+0x74>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 80022a2:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <MX_USART3_UART_Init+0x78>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <MX_USART3_UART_Init+0x7c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <MX_USART3_UART_Init+0x80>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <MX_USART3_UART_Init+0x84>)
 80022b6:	220d      	movs	r2, #13
 80022b8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022ba:	4b19      	ldr	r3, [pc, #100]	; (8002320 <MX_USART3_UART_Init+0x88>)
 80022bc:	4a19      	ldr	r2, [pc, #100]	; (8002324 <MX_USART3_UART_Init+0x8c>)
 80022be:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022c0:	4b17      	ldr	r3, [pc, #92]	; (8002320 <MX_USART3_UART_Init+0x88>)
 80022c2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022c6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022c8:	4b15      	ldr	r3, [pc, #84]	; (8002320 <MX_USART3_UART_Init+0x88>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <MX_USART3_UART_Init+0x88>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <MX_USART3_UART_Init+0x88>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <MX_USART3_UART_Init+0x88>)
 80022dc:	220c      	movs	r2, #12
 80022de:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <MX_USART3_UART_Init+0x88>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <MX_USART3_UART_Init+0x88>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <MX_USART3_UART_Init+0x88>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <MX_USART3_UART_Init+0x88>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022f8:	4809      	ldr	r0, [pc, #36]	; (8002320 <MX_USART3_UART_Init+0x88>)
 80022fa:	f003 fe4b 	bl	8005f94 <HAL_UART_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8002304:	f7ff fcc2 	bl	8001c8c <Error_Handler>
>>>>>>> Stashed changes
=======
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <MX_USART3_UART_Init+0x74>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 80020ea:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <MX_USART3_UART_Init+0x78>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <MX_USART3_UART_Init+0x7c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <MX_USART3_UART_Init+0x80>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <MX_USART3_UART_Init+0x84>)
 80020fe:	220d      	movs	r2, #13
 8002100:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002102:	4b19      	ldr	r3, [pc, #100]	; (8002168 <MX_USART3_UART_Init+0x88>)
 8002104:	4a19      	ldr	r2, [pc, #100]	; (800216c <MX_USART3_UART_Init+0x8c>)
 8002106:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002108:	4b17      	ldr	r3, [pc, #92]	; (8002168 <MX_USART3_UART_Init+0x88>)
 800210a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800210e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002110:	4b15      	ldr	r3, [pc, #84]	; (8002168 <MX_USART3_UART_Init+0x88>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <MX_USART3_UART_Init+0x88>)
 8002118:	2200      	movs	r2, #0
 800211a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <MX_USART3_UART_Init+0x88>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <MX_USART3_UART_Init+0x88>)
 8002124:	220c      	movs	r2, #12
 8002126:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MX_USART3_UART_Init+0x88>)
 800212a:	2200      	movs	r2, #0
 800212c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MX_USART3_UART_Init+0x88>)
 8002130:	2200      	movs	r2, #0
 8002132:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <MX_USART3_UART_Init+0x88>)
 8002136:	2200      	movs	r2, #0
 8002138:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <MX_USART3_UART_Init+0x88>)
 800213c:	2200      	movs	r2, #0
 800213e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002140:	4809      	ldr	r0, [pc, #36]	; (8002168 <MX_USART3_UART_Init+0x88>)
 8002142:	f003 fe4b 	bl	8005ddc <HAL_UART_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 800214c:	f7ff fcb8 	bl	8001ac0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000277c 	.word	0x2000277c
 800178c:	2000277d 	.word	0x2000277d
 8001790:	20002574 	.word	0x20002574
 8001794:	20002778 	.word	0x20002778
 8001798:	20002578 	.word	0x20002578
 800179c:	20002780 	.word	0x20002780
 80017a0:	40004800 	.word	0x40004800

080017a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0ae      	sub	sp, #184	; 0xb8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2290      	movs	r2, #144	; 0x90
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f007 fd53 	bl	8009270 <memset>
  if(uartHandle->Instance==USART3)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a26      	ldr	r2, [pc, #152]	; (8001868 <HAL_UART_MspInit+0xc4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d144      	bne.n	800185e <HAL_UART_MspInit+0xba>
=======
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200007f8 	.word	0x200007f8
 8002310:	200007f9 	.word	0x200007f9
 8002314:	200005f0 	.word	0x200005f0
 8002318:	200007f4 	.word	0x200007f4
 800231c:	200005f4 	.word	0x200005f4
 8002320:	200007fc 	.word	0x200007fc
 8002324:	40004800 	.word	0x40004800

08002328 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b0ae      	sub	sp, #184	; 0xb8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2290      	movs	r2, #144	; 0x90
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f005 faaf 	bl	80078ac <memset>
  if(uartHandle->Instance==USART3)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a26      	ldr	r2, [pc, #152]	; (80023ec <HAL_UART_MspInit+0xc4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d144      	bne.n	80023e2 <HAL_UART_MspInit+0xba>
>>>>>>> Stashed changes
=======
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000838 	.word	0x20000838
 8002158:	20000839 	.word	0x20000839
 800215c:	20000630 	.word	0x20000630
 8002160:	20000834 	.word	0x20000834
 8002164:	20000634 	.word	0x20000634
 8002168:	2000083c 	.word	0x2000083c
 800216c:	40004800 	.word	0x40004800

08002170 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b0ae      	sub	sp, #184	; 0xb8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2290      	movs	r2, #144	; 0x90
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f005 faaf 	bl	80076f4 <memset>
  if(uartHandle->Instance==USART3)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a26      	ldr	r2, [pc, #152]	; (8002234 <HAL_UART_MspInit+0xc4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d144      	bne.n	800222a <HAL_UART_MspInit+0xba>
>>>>>>> Stashed changes

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80017d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017da:	2300      	movs	r3, #0
 80017dc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 fd00 	bl	80031e8 <HAL_RCCEx_PeriphCLKConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017ee:	f7ff fe5f 	bl	80014b0 <Error_Handler>
=======
 8002358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800235c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800235e:	2300      	movs	r3, #0
 8002360:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4618      	mov	r0, r3
 8002368:	f001 ffea 	bl	8004340 <HAL_RCCEx_PeriphCLKConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002372:	f7ff fc8b 	bl	8001c8c <Error_Handler>
>>>>>>> Stashed changes
=======
 80021a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021a6:	2300      	movs	r3, #0
 80021a8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 ffea 	bl	8004188 <HAL_RCCEx_PeriphCLKConfig>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021ba:	f7ff fc81 	bl	8001ac0 <Error_Handler>
>>>>>>> Stashed changes
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80017f2:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_UART_MspInit+0xc8>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	4a1d      	ldr	r2, [pc, #116]	; (800186c <HAL_UART_MspInit+0xc8>)
 80017f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017fc:	6413      	str	r3, [r2, #64]	; 0x40
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_UART_MspInit+0xc8>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_UART_MspInit+0xc8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a17      	ldr	r2, [pc, #92]	; (800186c <HAL_UART_MspInit+0xc8>)
 8001810:	f043 0308 	orr.w	r3, r3, #8
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_UART_MspInit+0xc8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
=======
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <HAL_UART_MspInit+0xc8>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <HAL_UART_MspInit+0xc8>)
 800237c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_UART_MspInit+0xc8>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_UART_MspInit+0xc8>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <HAL_UART_MspInit+0xc8>)
 8002394:	f043 0308 	orr.w	r3, r3, #8
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_UART_MspInit+0xc8>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
=======
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a17      	ldr	r2, [pc, #92]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001822:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800183c:	2307      	movs	r3, #7
 800183e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001842:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001846:	4619      	mov	r1, r3
 8001848:	4809      	ldr	r0, [pc, #36]	; (8001870 <HAL_UART_MspInit+0xcc>)
 800184a:	f000 fe03 	bl	8002454 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	2027      	movs	r0, #39	; 0x27
 8001854:	f000 fd35 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001858:	2027      	movs	r0, #39	; 0x27
 800185a:	f000 fd4e 	bl	80022fa <HAL_NVIC_EnableIRQ>
=======
 80023a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023c0:	2307      	movs	r3, #7
 80023c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4809      	ldr	r0, [pc, #36]	; (80023f4 <HAL_UART_MspInit+0xcc>)
 80023ce:	f001 f8ed 	bl	80035ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2100      	movs	r1, #0
 80023d6:	2027      	movs	r0, #39	; 0x27
 80023d8:	f000 fd35 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023dc:	2027      	movs	r0, #39	; 0x27
 80023de:	f000 fd4e 	bl	8002e7e <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
=======
 80021ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002202:	2303      	movs	r3, #3
 8002204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002208:	2307      	movs	r3, #7
 800220a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800220e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002212:	4619      	mov	r1, r3
 8002214:	4809      	ldr	r0, [pc, #36]	; (800223c <HAL_UART_MspInit+0xcc>)
 8002216:	f001 f8ed 	bl	80033f4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	2027      	movs	r0, #39	; 0x27
 8002220:	f000 fd35 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002224:	2027      	movs	r0, #39	; 0x27
 8002226:	f000 fd4e 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800185e:	bf00      	nop
 8001860:	37b8      	adds	r7, #184	; 0xb8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40004800 	.word	0x40004800
 800186c:	40023800 	.word	0x40023800
 8001870:	40020c00 	.word	0x40020c00

08001874 <has_message_from_UART>:
=======
 80023e2:	bf00      	nop
 80023e4:	37b8      	adds	r7, #184	; 0xb8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40004800 	.word	0x40004800
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020c00 	.word	0x40020c00

080023f8 <has_message_from_UART>:
>>>>>>> Stashed changes
=======
 800222a:	bf00      	nop
 800222c:	37b8      	adds	r7, #184	; 0xb8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40004800 	.word	0x40004800
 8002238:	40023800 	.word	0x40023800
 800223c:	40020c00 	.word	0x40020c00

08002240 <has_message_from_UART>:
>>>>>>> Stashed changes
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	return flagCPP;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <has_message_from_UART+0x14>)
 800187a:	781b      	ldrb	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	2000277c 	.word	0x2000277c

0800188c <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	return flagCPE;
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <is_transmitting_to_UART+0x14>)
 8001892:	781b      	ldrb	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2000277d 	.word	0x2000277d

080018a4 <reset_UART>:

void reset_UART()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 80018a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ac:	2100      	movs	r1, #0
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <reset_UART+0x24>)
 80018b0:	f007 fcde 	bl	8009270 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 80018b4:	2201      	movs	r2, #1
 80018b6:	4904      	ldr	r1, [pc, #16]	; (80018c8 <reset_UART+0x24>)
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <reset_UART+0x28>)
 80018ba:	f002 ff1d 	bl	80046f8 <HAL_UART_Receive_IT>
	flagCPP = false;
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <reset_UART+0x2c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20002374 	.word	0x20002374
 80018cc:	20002780 	.word	0x20002780
 80018d0:	2000277c 	.word	0x2000277c

080018d4 <send_UART>:

void send_UART(const char* msg_to_send)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 80018dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <send_UART+0x44>)
 80018e4:	f007 fccc 	bl	8009280 <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 80018e8:	480b      	ldr	r0, [pc, #44]	; (8001918 <send_UART+0x44>)
 80018ea:	f7fe fca5 	bl	8000238 <strlen>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <send_UART+0x44>)
 80018f4:	4413      	add	r3, r2
 80018f6:	4909      	ldr	r1, [pc, #36]	; (800191c <send_UART+0x48>)
 80018f8:	461a      	mov	r2, r3
 80018fa:	460b      	mov	r3, r1
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <send_UART+0x4c>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 8001906:	2201      	movs	r2, #1
 8001908:	4903      	ldr	r1, [pc, #12]	; (8001918 <send_UART+0x44>)
 800190a:	4806      	ldr	r0, [pc, #24]	; (8001924 <send_UART+0x50>)
 800190c:	f002 fe96 	bl	800463c <HAL_UART_Transmit_IT>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20002578 	.word	0x20002578
 800191c:	08009368 	.word	0x08009368
 8001920:	2000277d 	.word	0x2000277d
 8001924:	20002780 	.word	0x20002780

08001928 <read_UART>:

void read_UART(char* msg_to_read)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 8001930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001934:	4903      	ldr	r1, [pc, #12]	; (8001944 <read_UART+0x1c>)
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f007 fca2 	bl	8009280 <strncpy>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20002374 	.word	0x20002374

08001948 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 8001950:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <HAL_UART_RxCpltCallback+0xc4>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d154      	bne.n	8001a02 <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a2d      	ldr	r2, [pc, #180]	; (8001a14 <HAL_UART_RxCpltCallback+0xcc>)
 800195e:	5cd3      	ldrb	r3, [r2, r3]
 8001960:	2b0d      	cmp	r3, #13
 8001962:	d00b      	beq.n	800197c <HAL_UART_RxCpltCallback+0x34>
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a2a      	ldr	r2, [pc, #168]	; (8001a14 <HAL_UART_RxCpltCallback+0xcc>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	2b5c      	cmp	r3, #92	; 0x5c
 800196e:	d005      	beq.n	800197c <HAL_UART_RxCpltCallback+0x34>
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a27      	ldr	r2, [pc, #156]	; (8001a14 <HAL_UART_RxCpltCallback+0xcc>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	2b2f      	cmp	r3, #47	; 0x2f
 800197a:	d106      	bne.n	800198a <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <HAL_UART_RxCpltCallback+0xc4>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
 8001988:	e03c      	b.n	8001a04 <HAL_UART_RxCpltCallback+0xbc>
=======
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
	return flagCPP;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <has_message_from_UART+0x14>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	200007f8 	.word	0x200007f8

08002410 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
	return flagCPE;
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <is_transmitting_to_UART+0x14>)
 8002416:	781b      	ldrb	r3, [r3, #0]
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	200007f9 	.word	0x200007f9

08002428 <reset_UART>:

void reset_UART()
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 800242c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002430:	2100      	movs	r1, #0
 8002432:	4806      	ldr	r0, [pc, #24]	; (800244c <reset_UART+0x24>)
 8002434:	f005 fa3a 	bl	80078ac <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8002438:	2201      	movs	r2, #1
 800243a:	4904      	ldr	r1, [pc, #16]	; (800244c <reset_UART+0x24>)
 800243c:	4804      	ldr	r0, [pc, #16]	; (8002450 <reset_UART+0x28>)
 800243e:	f003 fe55 	bl	80060ec <HAL_UART_Receive_IT>
	flagCPP = false;
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <reset_UART+0x2c>)
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}
 800244c:	200003f0 	.word	0x200003f0
 8002450:	200007fc 	.word	0x200007fc
 8002454:	200007f8 	.word	0x200007f8

08002458 <send_UART>:

void send_UART(const char* msg_to_send)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 8002460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	480d      	ldr	r0, [pc, #52]	; (800249c <send_UART+0x44>)
 8002468:	f006 f898 	bl	800859c <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 800246c:	480b      	ldr	r0, [pc, #44]	; (800249c <send_UART+0x44>)
 800246e:	f7fd fee7 	bl	8000240 <strlen>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <send_UART+0x44>)
 8002478:	4413      	add	r3, r2
 800247a:	4909      	ldr	r1, [pc, #36]	; (80024a0 <send_UART+0x48>)
 800247c:	461a      	mov	r2, r3
 800247e:	460b      	mov	r3, r1
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <send_UART+0x4c>)
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 800248a:	2201      	movs	r2, #1
 800248c:	4903      	ldr	r1, [pc, #12]	; (800249c <send_UART+0x44>)
 800248e:	4806      	ldr	r0, [pc, #24]	; (80024a8 <send_UART+0x50>)
 8002490:	f003 fdce 	bl	8006030 <HAL_UART_Transmit_IT>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200005f4 	.word	0x200005f4
 80024a0:	0800c0b4 	.word	0x0800c0b4
 80024a4:	200007f9 	.word	0x200007f9
 80024a8:	200007fc 	.word	0x200007fc

080024ac <read_UART>:

void read_UART(char* msg_to_read)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 80024b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024b8:	4903      	ldr	r1, [pc, #12]	; (80024c8 <read_UART+0x1c>)
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f006 f86e 	bl	800859c <strncpy>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	200003f0 	.word	0x200003f0

080024cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 80024d4:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <HAL_UART_RxCpltCallback+0xc4>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d154      	bne.n	8002586 <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 80024dc:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2d      	ldr	r2, [pc, #180]	; (8002598 <HAL_UART_RxCpltCallback+0xcc>)
 80024e2:	5cd3      	ldrb	r3, [r2, r3]
 80024e4:	2b0d      	cmp	r3, #13
 80024e6:	d00b      	beq.n	8002500 <HAL_UART_RxCpltCallback+0x34>
 80024e8:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2a      	ldr	r2, [pc, #168]	; (8002598 <HAL_UART_RxCpltCallback+0xcc>)
 80024ee:	5cd3      	ldrb	r3, [r2, r3]
 80024f0:	2b5c      	cmp	r3, #92	; 0x5c
 80024f2:	d005      	beq.n	8002500 <HAL_UART_RxCpltCallback+0x34>
 80024f4:	4b27      	ldr	r3, [pc, #156]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a27      	ldr	r2, [pc, #156]	; (8002598 <HAL_UART_RxCpltCallback+0xcc>)
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	2b2f      	cmp	r3, #47	; 0x2f
 80024fe:	d106      	bne.n	800250e <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_UART_RxCpltCallback+0xc4>)
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e03c      	b.n	8002588 <HAL_UART_RxCpltCallback+0xbc>
>>>>>>> Stashed changes
=======
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
	return flagCPP;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <has_message_from_UART+0x14>)
 8002246:	781b      	ldrb	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000838 	.word	0x20000838

08002258 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
	return flagCPE;
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <is_transmitting_to_UART+0x14>)
 800225e:	781b      	ldrb	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000839 	.word	0x20000839

08002270 <reset_UART>:

void reset_UART()
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 8002274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002278:	2100      	movs	r1, #0
 800227a:	4806      	ldr	r0, [pc, #24]	; (8002294 <reset_UART+0x24>)
 800227c:	f005 fa3a 	bl	80076f4 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8002280:	2201      	movs	r2, #1
 8002282:	4904      	ldr	r1, [pc, #16]	; (8002294 <reset_UART+0x24>)
 8002284:	4804      	ldr	r0, [pc, #16]	; (8002298 <reset_UART+0x28>)
 8002286:	f003 fe55 	bl	8005f34 <HAL_UART_Receive_IT>
	flagCPP = false;
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <reset_UART+0x2c>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000430 	.word	0x20000430
 8002298:	2000083c 	.word	0x2000083c
 800229c:	20000838 	.word	0x20000838

080022a0 <send_UART>:

void send_UART(const char* msg_to_send)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 80022a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	480d      	ldr	r0, [pc, #52]	; (80022e4 <send_UART+0x44>)
 80022b0:	f006 f898 	bl	80083e4 <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 80022b4:	480b      	ldr	r0, [pc, #44]	; (80022e4 <send_UART+0x44>)
 80022b6:	f7fd ffc3 	bl	8000240 <strlen>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <send_UART+0x44>)
 80022c0:	4413      	add	r3, r2
 80022c2:	4909      	ldr	r1, [pc, #36]	; (80022e8 <send_UART+0x48>)
 80022c4:	461a      	mov	r2, r3
 80022c6:	460b      	mov	r3, r1
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 80022cc:	4b07      	ldr	r3, [pc, #28]	; (80022ec <send_UART+0x4c>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 80022d2:	2201      	movs	r2, #1
 80022d4:	4903      	ldr	r1, [pc, #12]	; (80022e4 <send_UART+0x44>)
 80022d6:	4806      	ldr	r0, [pc, #24]	; (80022f0 <send_UART+0x50>)
 80022d8:	f003 fdce 	bl	8005e78 <HAL_UART_Transmit_IT>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000634 	.word	0x20000634
 80022e8:	0800be78 	.word	0x0800be78
 80022ec:	20000839 	.word	0x20000839
 80022f0:	2000083c 	.word	0x2000083c

080022f4 <read_UART>:

void read_UART(char* msg_to_read)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 80022fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002300:	4903      	ldr	r1, [pc, #12]	; (8002310 <read_UART+0x1c>)
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f006 f86e 	bl	80083e4 <strncpy>
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000430 	.word	0x20000430

08002314 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 800231c:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_UART_RxCpltCallback+0xc4>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d154      	bne.n	80023ce <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 8002324:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a2d      	ldr	r2, [pc, #180]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	2b0d      	cmp	r3, #13
 800232e:	d00b      	beq.n	8002348 <HAL_UART_RxCpltCallback+0x34>
 8002330:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2a      	ldr	r2, [pc, #168]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 8002336:	5cd3      	ldrb	r3, [r2, r3]
 8002338:	2b5c      	cmp	r3, #92	; 0x5c
 800233a:	d005      	beq.n	8002348 <HAL_UART_RxCpltCallback+0x34>
 800233c:	4b27      	ldr	r3, [pc, #156]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a27      	ldr	r2, [pc, #156]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	2b2f      	cmp	r3, #47	; 0x2f
 8002346:	d106      	bne.n	8002356 <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 8002348:	4b24      	ldr	r3, [pc, #144]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 800234e:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <HAL_UART_RxCpltCallback+0xc4>)
 8002350:	2201      	movs	r2, #1
 8002352:	701a      	strb	r2, [r3, #0]
 8002354:	e03c      	b.n	80023d0 <HAL_UART_RxCpltCallback+0xbc>
>>>>>>> Stashed changes
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a21      	ldr	r2, [pc, #132]	; (8001a14 <HAL_UART_RxCpltCallback+0xcc>)
 8001990:	5cd3      	ldrb	r3, [r2, r3]
 8001992:	2b08      	cmp	r3, #8
 8001994:	d10f      	bne.n	80019b6 <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d105      	bne.n	80019aa <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	4a1a      	ldr	r2, [pc, #104]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	e01c      	b.n	80019e4 <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3b02      	subs	r3, #2
 80019b0:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e016      	b.n	80019e4 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a16      	ldr	r2, [pc, #88]	; (8001a14 <HAL_UART_RxCpltCallback+0xcc>)
 80019bc:	5cd3      	ldrb	r3, [r2, r3]
 80019be:	2b1b      	cmp	r3, #27
 80019c0:	d104      	bne.n	80019cc <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	e00b      	b.n	80019e4 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <HAL_UART_RxCpltCallback+0xcc>)
 80019d2:	5cd3      	ldrb	r3, [r2, r3]
 80019d4:	2b24      	cmp	r3, #36	; 0x24
 80019d6:	d105      	bne.n	80019e4 <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_UART_RxCpltCallback+0xcc>)
 80019e0:	2224      	movs	r2, #36	; 0x24
 80019e2:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_UART_RxCpltCallback+0xc8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <HAL_UART_RxCpltCallback+0xcc>)
 80019f4:	4413      	add	r3, r2
 80019f6:	2201      	movs	r2, #1
 80019f8:	4619      	mov	r1, r3
 80019fa:	4807      	ldr	r0, [pc, #28]	; (8001a18 <HAL_UART_RxCpltCallback+0xd0>)
 80019fc:	f002 fe7c 	bl	80046f8 <HAL_UART_Receive_IT>
 8001a00:	e000      	b.n	8001a04 <HAL_UART_RxCpltCallback+0xbc>
		return;
 8001a02:	bf00      	nop
	}
}
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000277c 	.word	0x2000277c
 8001a10:	20002574 	.word	0x20002574
 8001a14:	20002374 	.word	0x20002374
 8001a18:	20002780 	.word	0x20002780

08001a1c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8001a24:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <HAL_UART_TxCpltCallback+0x64>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	f083 0301 	eor.w	r3, r3, #1
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d122      	bne.n	8001a78 <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_UART_TxCpltCallback+0x68>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <HAL_UART_TxCpltCallback+0x6c>)
 8001a38:	5cd3      	ldrb	r3, [r2, r3]
 8001a3a:	2b0d      	cmp	r3, #13
 8001a3c:	d10d      	bne.n	8001a5a <HAL_UART_TxCpltCallback+0x3e>
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_UART_TxCpltCallback+0x68>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <HAL_UART_TxCpltCallback+0x6c>)
 8001a46:	5cd3      	ldrb	r3, [r2, r3]
 8001a48:	2b0a      	cmp	r3, #10
 8001a4a:	d006      	beq.n	8001a5a <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_UART_TxCpltCallback+0x68>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_UART_TxCpltCallback+0x64>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
 8001a58:	e00f      	b.n	8001a7a <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_UART_TxCpltCallback+0x68>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a08      	ldr	r2, [pc, #32]	; (8001a84 <HAL_UART_TxCpltCallback+0x68>)
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_UART_TxCpltCallback+0x68>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_UART_TxCpltCallback+0x6c>)
 8001a6a:	4413      	add	r3, r2
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4806      	ldr	r0, [pc, #24]	; (8001a8c <HAL_UART_TxCpltCallback+0x70>)
 8001a72:	f002 fde3 	bl	800463c <HAL_UART_Transmit_IT>
 8001a76:	e000      	b.n	8001a7a <HAL_UART_TxCpltCallback+0x5e>
		return;
 8001a78:	bf00      	nop
}
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	2000277d 	.word	0x2000277d
 8001a84:	20002778 	.word	0x20002778
 8001a88:	20002578 	.word	0x20002578
 8001a8c:	20002780 	.word	0x20002780

08001a90 <Reset_Handler>:
=======
 800250e:	4b21      	ldr	r3, [pc, #132]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a21      	ldr	r2, [pc, #132]	; (8002598 <HAL_UART_RxCpltCallback+0xcc>)
 8002514:	5cd3      	ldrb	r3, [r2, r3]
 8002516:	2b08      	cmp	r3, #8
 8002518:	d10f      	bne.n	800253a <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 800251a:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d105      	bne.n	800252e <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 8002522:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3b01      	subs	r3, #1
 8002528:	4a1a      	ldr	r2, [pc, #104]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	e01c      	b.n	8002568 <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 800252e:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	3b02      	subs	r3, #2
 8002534:	4a17      	ldr	r2, [pc, #92]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	e016      	b.n	8002568 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 800253a:	4b16      	ldr	r3, [pc, #88]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a16      	ldr	r2, [pc, #88]	; (8002598 <HAL_UART_RxCpltCallback+0xcc>)
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	2b1b      	cmp	r3, #27
 8002544:	d104      	bne.n	8002550 <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e00b      	b.n	8002568 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8002550:	4b10      	ldr	r3, [pc, #64]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a10      	ldr	r2, [pc, #64]	; (8002598 <HAL_UART_RxCpltCallback+0xcc>)
 8002556:	5cd3      	ldrb	r3, [r2, r3]
 8002558:	2b24      	cmp	r3, #36	; 0x24
 800255a:	d105      	bne.n	8002568 <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 800255c:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_UART_RxCpltCallback+0xcc>)
 8002564:	2224      	movs	r2, #36	; 0x24
 8002566:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 8002568:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	4a09      	ldr	r2, [pc, #36]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_UART_RxCpltCallback+0xc8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_UART_RxCpltCallback+0xcc>)
 8002578:	4413      	add	r3, r2
 800257a:	2201      	movs	r2, #1
 800257c:	4619      	mov	r1, r3
 800257e:	4807      	ldr	r0, [pc, #28]	; (800259c <HAL_UART_RxCpltCallback+0xd0>)
 8002580:	f003 fdb4 	bl	80060ec <HAL_UART_Receive_IT>
 8002584:	e000      	b.n	8002588 <HAL_UART_RxCpltCallback+0xbc>
		return;
 8002586:	bf00      	nop
	}
}
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200007f8 	.word	0x200007f8
 8002594:	200005f0 	.word	0x200005f0
 8002598:	200003f0 	.word	0x200003f0
 800259c:	200007fc 	.word	0x200007fc

080025a0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <HAL_UART_TxCpltCallback+0x64>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f083 0301 	eor.w	r3, r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d122      	bne.n	80025fc <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <HAL_UART_TxCpltCallback+0x68>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a14      	ldr	r2, [pc, #80]	; (800260c <HAL_UART_TxCpltCallback+0x6c>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	2b0d      	cmp	r3, #13
 80025c0:	d10d      	bne.n	80025de <HAL_UART_TxCpltCallback+0x3e>
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_UART_TxCpltCallback+0x68>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	4a10      	ldr	r2, [pc, #64]	; (800260c <HAL_UART_TxCpltCallback+0x6c>)
 80025ca:	5cd3      	ldrb	r3, [r2, r3]
 80025cc:	2b0a      	cmp	r3, #10
 80025ce:	d006      	beq.n	80025de <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 80025d0:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <HAL_UART_TxCpltCallback+0x68>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_UART_TxCpltCallback+0x64>)
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	e00f      	b.n	80025fe <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_UART_TxCpltCallback+0x68>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	4a08      	ldr	r2, [pc, #32]	; (8002608 <HAL_UART_TxCpltCallback+0x68>)
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HAL_UART_TxCpltCallback+0x68>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a07      	ldr	r2, [pc, #28]	; (800260c <HAL_UART_TxCpltCallback+0x6c>)
 80025ee:	4413      	add	r3, r2
 80025f0:	2201      	movs	r2, #1
 80025f2:	4619      	mov	r1, r3
 80025f4:	4806      	ldr	r0, [pc, #24]	; (8002610 <HAL_UART_TxCpltCallback+0x70>)
 80025f6:	f003 fd1b 	bl	8006030 <HAL_UART_Transmit_IT>
 80025fa:	e000      	b.n	80025fe <HAL_UART_TxCpltCallback+0x5e>
		return;
 80025fc:	bf00      	nop
}
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200007f9 	.word	0x200007f9
 8002608:	200007f4 	.word	0x200007f4
 800260c:	200005f4 	.word	0x200005f4
 8002610:	200007fc 	.word	0x200007fc

08002614 <Reset_Handler>:
>>>>>>> Stashed changes
=======
 8002356:	4b21      	ldr	r3, [pc, #132]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 800235c:	5cd3      	ldrb	r3, [r2, r3]
 800235e:	2b08      	cmp	r3, #8
 8002360:	d10f      	bne.n	8002382 <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 800236a:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3b01      	subs	r3, #1
 8002370:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	e01c      	b.n	80023b0 <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 8002376:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3b02      	subs	r3, #2
 800237c:	4a17      	ldr	r2, [pc, #92]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	e016      	b.n	80023b0 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 8002382:	4b16      	ldr	r3, [pc, #88]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a16      	ldr	r2, [pc, #88]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	2b1b      	cmp	r3, #27
 800238c:	d104      	bne.n	8002398 <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	e00b      	b.n	80023b0 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8002398:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 800239e:	5cd3      	ldrb	r3, [r2, r3]
 80023a0:	2b24      	cmp	r3, #36	; 0x24
 80023a2:	d105      	bne.n	80023b0 <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 80023ac:	2224      	movs	r2, #36	; 0x24
 80023ae:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 80023c0:	4413      	add	r3, r2
 80023c2:	2201      	movs	r2, #1
 80023c4:	4619      	mov	r1, r3
 80023c6:	4807      	ldr	r0, [pc, #28]	; (80023e4 <HAL_UART_RxCpltCallback+0xd0>)
 80023c8:	f003 fdb4 	bl	8005f34 <HAL_UART_Receive_IT>
 80023cc:	e000      	b.n	80023d0 <HAL_UART_RxCpltCallback+0xbc>
		return;
 80023ce:	bf00      	nop
	}
}
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000838 	.word	0x20000838
 80023dc:	20000630 	.word	0x20000630
 80023e0:	20000430 	.word	0x20000430
 80023e4:	2000083c 	.word	0x2000083c

080023e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_UART_TxCpltCallback+0x64>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	f083 0301 	eor.w	r3, r3, #1
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d122      	bne.n	8002444 <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <HAL_UART_TxCpltCallback+0x68>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a14      	ldr	r2, [pc, #80]	; (8002454 <HAL_UART_TxCpltCallback+0x6c>)
 8002404:	5cd3      	ldrb	r3, [r2, r3]
 8002406:	2b0d      	cmp	r3, #13
 8002408:	d10d      	bne.n	8002426 <HAL_UART_TxCpltCallback+0x3e>
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_UART_TxCpltCallback+0x68>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	3b01      	subs	r3, #1
 8002410:	4a10      	ldr	r2, [pc, #64]	; (8002454 <HAL_UART_TxCpltCallback+0x6c>)
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	2b0a      	cmp	r3, #10
 8002416:	d006      	beq.n	8002426 <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8002418:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <HAL_UART_TxCpltCallback+0x68>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_UART_TxCpltCallback+0x64>)
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e00f      	b.n	8002446 <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_UART_TxCpltCallback+0x68>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3301      	adds	r3, #1
 800242c:	4a08      	ldr	r2, [pc, #32]	; (8002450 <HAL_UART_TxCpltCallback+0x68>)
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <HAL_UART_TxCpltCallback+0x68>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a07      	ldr	r2, [pc, #28]	; (8002454 <HAL_UART_TxCpltCallback+0x6c>)
 8002436:	4413      	add	r3, r2
 8002438:	2201      	movs	r2, #1
 800243a:	4619      	mov	r1, r3
 800243c:	4806      	ldr	r0, [pc, #24]	; (8002458 <HAL_UART_TxCpltCallback+0x70>)
 800243e:	f003 fd1b 	bl	8005e78 <HAL_UART_Transmit_IT>
 8002442:	e000      	b.n	8002446 <HAL_UART_TxCpltCallback+0x5e>
		return;
 8002444:	bf00      	nop
}
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000839 	.word	0x20000839
 8002450:	20000834 	.word	0x20000834
 8002454:	20000634 	.word	0x20000634
 8002458:	2000083c 	.word	0x2000083c

0800245c <Reset_Handler>:
>>>>>>> Stashed changes

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a94:	480d      	ldr	r0, [pc, #52]	; (8001acc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a96:	490e      	ldr	r1, [pc, #56]	; (8001ad0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a98:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aac:	4c0b      	ldr	r4, [pc, #44]	; (8001adc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aba:	f7ff fe19 	bl	80016f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001abe:	f007 fbb3 	bl	8009228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac2:	f7ff fb63 	bl	800118c <main>
  bx  lr    
 8001ac6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001ad4:	0800981c 	.word	0x0800981c
  ldr r2, =_sbss
 8001ad8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001adc:	20002a48 	.word	0x20002a48

08001ae0 <ADC_IRQHandler>:
=======
 8002614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800264c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002618:	480d      	ldr	r0, [pc, #52]	; (8002650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800261a:	490e      	ldr	r1, [pc, #56]	; (8002654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800261c:	4a0e      	ldr	r2, [pc, #56]	; (8002658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002620:	e002      	b.n	8002628 <LoopCopyDataInit>

08002622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002626:	3304      	adds	r3, #4

08002628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800262c:	d3f9      	bcc.n	8002622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800262e:	4a0b      	ldr	r2, [pc, #44]	; (800265c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002630:	4c0b      	ldr	r4, [pc, #44]	; (8002660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002634:	e001      	b.n	800263a <LoopFillZerobss>

08002636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002638:	3204      	adds	r2, #4

0800263a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800263c:	d3fb      	bcc.n	8002636 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800263e:	f7ff fd8f 	bl	8002160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002642:	f005 f90f 	bl	8007864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002646:	f7ff fa2b 	bl	8001aa0 <main>
  bx  lr    
 800264a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800264c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002654:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002658:	0800c58c 	.word	0x0800c58c
  ldr r2, =_sbss
 800265c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002660:	200008ac 	.word	0x200008ac

08002664 <ADC_IRQHandler>:
>>>>>>> Stashed changes
=======
 800245c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002494 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002460:	480d      	ldr	r0, [pc, #52]	; (8002498 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002462:	490e      	ldr	r1, [pc, #56]	; (800249c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002464:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002468:	e002      	b.n	8002470 <LoopCopyDataInit>

0800246a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800246c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246e:	3304      	adds	r3, #4

08002470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002474:	d3f9      	bcc.n	800246a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002476:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002478:	4c0b      	ldr	r4, [pc, #44]	; (80024a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800247c:	e001      	b.n	8002482 <LoopFillZerobss>

0800247e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002480:	3204      	adds	r2, #4

08002482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002484:	d3fb      	bcc.n	800247e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002486:	f7ff fd85 	bl	8001f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800248a:	f005 f90f 	bl	80076ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800248e:	f7ff fa5f 	bl	8001950 <main>
  bx  lr    
 8002492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002494:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800249c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80024a0:	0800c354 	.word	0x0800c354
  ldr r2, =_sbss
 80024a4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80024a8:	200008ec 	.word	0x200008ec

080024ac <ADC_IRQHandler>:
>>>>>>> Stashed changes
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001ae0:	e7fe      	b.n	8001ae0 <ADC_IRQHandler>

08001ae2 <HAL_Init>:
=======
 8002664:	e7fe      	b.n	8002664 <ADC_IRQHandler>

08002666 <HAL_Init>:
>>>>>>> Stashed changes
=======
 80024ac:	e7fe      	b.n	80024ac <ADC_IRQHandler>

080024ae <HAL_Init>:
>>>>>>> Stashed changes
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	af00      	add	r7, sp, #0
=======
 8002666:	b580      	push	{r7, lr}
 8002668:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 80024ae:	b580      	push	{r7, lr}
 80024b0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001ae6:	2003      	movs	r0, #3
 8001ae8:	f000 fbe0 	bl	80022ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aec:	2000      	movs	r0, #0
 8001aee:	f000 f805 	bl	8001afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af2:	f7ff fd65 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_InitTick>:
=======
 800266a:	2003      	movs	r0, #3
 800266c:	f000 fbe0 	bl	8002e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002670:	2000      	movs	r0, #0
 8002672:	f000 f805 	bl	8002680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002676:	f7ff fc01 	bl	8001e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_InitTick>:
>>>>>>> Stashed changes
=======
 80024b2:	2003      	movs	r0, #3
 80024b4:	f000 fbe0 	bl	8002c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f000 f805 	bl	80024c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024be:	f7ff fbf7 	bl	8001cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_InitTick+0x54>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_InitTick+0x58>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fbfb 	bl	8002316 <HAL_SYSTICK_Config>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00e      	b.n	8001b48 <HAL_InitTick+0x4c>
=======
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_InitTick+0x54>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_InitTick+0x58>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	4619      	mov	r1, r3
 8002692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002696:	fbb3 f3f1 	udiv	r3, r3, r1
 800269a:	fbb2 f3f3 	udiv	r3, r2, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fbfb 	bl	8002e9a <HAL_SYSTICK_Config>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00e      	b.n	80026cc <HAL_InitTick+0x4c>
>>>>>>> Stashed changes
=======
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_InitTick+0x54>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_InitTick+0x58>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024de:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fbfb 	bl	8002ce2 <HAL_SYSTICK_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00e      	b.n	8002514 <HAL_InitTick+0x4c>
>>>>>>> Stashed changes
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b0f      	cmp	r3, #15
 8001b2e:	d80a      	bhi.n	8001b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b30:	2200      	movs	r2, #0
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f000 fbc3 	bl	80022c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b3c:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <HAL_InitTick+0x5c>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6013      	str	r3, [r2, #0]
=======
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b0f      	cmp	r3, #15
 80026b2:	d80a      	bhi.n	80026ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b4:	2200      	movs	r2, #0
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	f000 fbc3 	bl	8002e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c0:	4a06      	ldr	r2, [pc, #24]	; (80026dc <HAL_InitTick+0x5c>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
=======
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b0f      	cmp	r3, #15
 80024fa:	d80a      	bhi.n	8002512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024fc:	2200      	movs	r2, #0
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f000 fbc3 	bl	8002c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002508:	4a06      	ldr	r2, [pc, #24]	; (8002524 <HAL_InitTick+0x5c>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001b42:	2300      	movs	r3, #0
 8001b44:	e000      	b.n	8001b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000004 	.word	0x20000004
 8001b54:	2000000c 	.word	0x2000000c
 8001b58:	20000008 	.word	0x20000008

08001b5c <HAL_IncTick>:
=======
 80026c6:	2300      	movs	r3, #0
 80026c8:	e000      	b.n	80026cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20000004 	.word	0x20000004
 80026d8:	2000000c 	.word	0x2000000c
 80026dc:	20000008 	.word	0x20000008

080026e0 <HAL_IncTick>:
>>>>>>> Stashed changes
=======
 800250e:	2300      	movs	r3, #0
 8002510:	e000      	b.n	8002514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000004 	.word	0x20000004
 8002520:	2000000c 	.word	0x2000000c
 8002524:	20000008 	.word	0x20000008

08002528 <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_IncTick+0x20>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x24>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <HAL_IncTick+0x24>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	2000000c 	.word	0x2000000c
 8001b80:	20002808 	.word	0x20002808

08001b84 <HAL_GetTick>:
=======
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_IncTick+0x20>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_IncTick+0x24>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	4a04      	ldr	r2, [pc, #16]	; (8002704 <HAL_IncTick+0x24>)
 80026f2:	6013      	str	r3, [r2, #0]
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	2000000c 	.word	0x2000000c
 8002704:	20000884 	.word	0x20000884

08002708 <HAL_GetTick>:
>>>>>>> Stashed changes
=======
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_IncTick+0x20>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_IncTick+0x24>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4413      	add	r3, r2
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <HAL_IncTick+0x24>)
 800253a:	6013      	str	r3, [r2, #0]
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	2000000c 	.word	0x2000000c
 800254c:	200008c4 	.word	0x200008c4

08002550 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_GetTick+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20002808 	.word	0x20002808

08001b9c <HAL_Delay>:
=======
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return uwTick;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_GetTick+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000884 	.word	0x20000884

08002720 <HAL_Delay>:
>>>>>>> Stashed changes
=======
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return uwTick;
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_GetTick+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	200008c4 	.word	0x200008c4

08002568 <HAL_Delay>:
>>>>>>> Stashed changes
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba4:	f7ff ffee 	bl	8001b84 <HAL_GetTick>
 8001ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d005      	beq.n	8001bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_Delay+0x44>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc2:	bf00      	nop
 8001bc4:	f7ff ffde 	bl	8001b84 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d8f7      	bhi.n	8001bc4 <HAL_Delay+0x28>
  {
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2000000c 	.word	0x2000000c

08001be4 <HAL_ADC_Init>:
=======
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002728:	f7ff ffee 	bl	8002708 <HAL_GetTick>
 800272c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d005      	beq.n	8002746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_Delay+0x44>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4413      	add	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002746:	bf00      	nop
 8002748:	f7ff ffde 	bl	8002708 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	429a      	cmp	r2, r3
 8002756:	d8f7      	bhi.n	8002748 <HAL_Delay+0x28>
  {
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	2000000c 	.word	0x2000000c

08002768 <HAL_ADC_Init>:
>>>>>>> Stashed changes
=======
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002570:	f7ff ffee 	bl	8002550 <HAL_GetTick>
 8002574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d005      	beq.n	800258e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_Delay+0x44>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800258e:	bf00      	nop
 8002590:	f7ff ffde 	bl	8002550 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	429a      	cmp	r2, r3
 800259e:	d8f7      	bhi.n	8002590 <HAL_Delay+0x28>
  {
  }
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2000000c 	.word	0x2000000c

080025b0 <HAL_ADC_Init>:
>>>>>>> Stashed changes
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e031      	b.n	8001c5e <HAL_ADC_Init+0x7a>
=======
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e031      	b.n	80027e2 <HAL_ADC_Init+0x7a>
>>>>>>> Stashed changes
=======
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e031      	b.n	800262a <HAL_ADC_Init+0x7a>
>>>>>>> Stashed changes
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_ADC_Init+0x32>
=======
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_ADC_Init+0x32>
>>>>>>> Stashed changes
=======
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_ADC_Init+0x32>
>>>>>>> Stashed changes

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7fe fcf4 	bl	80005f0 <HAL_ADC_MspInit>
=======
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe f9b4 	bl	8000af4 <HAL_ADC_MspInit>
>>>>>>> Stashed changes
=======
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe fa90 	bl	8000af4 <HAL_ADC_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
=======
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_ADC_Init+0x84>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	f043 0202 	orr.w	r2, r3, #2
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d116      	bne.n	80027d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_ADC_Init+0x84>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	f043 0202 	orr.w	r2, r3, #2
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
=======
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d116      	bne.n	800261c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HAL_ADC_Init+0x84>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	f043 0202 	orr.w	r2, r3, #2
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f970 	bl	8001f18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f023 0303 	bic.w	r3, r3, #3
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c4e:	e001      	b.n	8001c54 <HAL_ADC_Init+0x70>
=======
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f970 	bl	8002a9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f023 0303 	bic.w	r3, r3, #3
 80027ca:	f043 0201 	orr.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40
 80027d2:	e001      	b.n	80027d8 <HAL_ADC_Init+0x70>
>>>>>>> Stashed changes
=======
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f970 	bl	80028e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f023 0303 	bic.w	r3, r3, #3
 8002612:	f043 0201 	orr.w	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
 800261a:	e001      	b.n	8002620 <HAL_ADC_Init+0x70>
>>>>>>> Stashed changes
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
=======
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
=======
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	ffffeefd 	.word	0xffffeefd

08001c6c <HAL_ADC_ConfigChannel>:
=======
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	ffffeefd 	.word	0xffffeefd

080027f0 <HAL_ADC_ConfigChannel>:
>>>>>>> Stashed changes
=======
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	ffffeefd 	.word	0xffffeefd

08002638 <HAL_ADC_ConfigChannel>:
>>>>>>> Stashed changes
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
=======
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
=======
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x1c>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e136      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x28a>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b09      	cmp	r3, #9
 8001c96:	d93a      	bls.n	8001d0e <HAL_ADC_ConfigChannel+0xa2>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ca0:	d035      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68d9      	ldr	r1, [r3, #12]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3b1e      	subs	r3, #30
 8001cb8:	2207      	movs	r2, #7
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a8d      	ldr	r2, [pc, #564]	; (8001f04 <HAL_ADC_ConfigChannel+0x298>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d10a      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68d9      	ldr	r1, [r3, #12]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	061a      	lsls	r2, r3, #24
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ce6:	e035      	b.n	8001d54 <HAL_ADC_ConfigChannel+0xe8>
=======
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x1c>
 8002808:	2302      	movs	r3, #2
 800280a:	e136      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x28a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b09      	cmp	r3, #9
 800281a:	d93a      	bls.n	8002892 <HAL_ADC_ConfigChannel+0xa2>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002824:	d035      	beq.n	8002892 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68d9      	ldr	r1, [r3, #12]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	4613      	mov	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	3b1e      	subs	r3, #30
 800283c:	2207      	movs	r2, #7
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	400a      	ands	r2, r1
 800284a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a8d      	ldr	r2, [pc, #564]	; (8002a88 <HAL_ADC_ConfigChannel+0x298>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d10a      	bne.n	800286c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68d9      	ldr	r1, [r3, #12]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	061a      	lsls	r2, r3, #24
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800286a:	e035      	b.n	80028d8 <HAL_ADC_ConfigChannel+0xe8>
>>>>>>> Stashed changes
=======
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x1c>
 8002650:	2302      	movs	r3, #2
 8002652:	e136      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x28a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b09      	cmp	r3, #9
 8002662:	d93a      	bls.n	80026da <HAL_ADC_ConfigChannel+0xa2>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800266c:	d035      	beq.n	80026da <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68d9      	ldr	r1, [r3, #12]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	3b1e      	subs	r3, #30
 8002684:	2207      	movs	r2, #7
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	400a      	ands	r2, r1
 8002692:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a8d      	ldr	r2, [pc, #564]	; (80028d0 <HAL_ADC_ConfigChannel+0x298>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10a      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68d9      	ldr	r1, [r3, #12]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	061a      	lsls	r2, r3, #24
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026b2:	e035      	b.n	8002720 <HAL_ADC_ConfigChannel+0xe8>
>>>>>>> Stashed changes
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68d9      	ldr	r1, [r3, #12]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4403      	add	r3, r0
 8001d00:	3b1e      	subs	r3, #30
 8001d02:	409a      	lsls	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d0c:	e022      	b.n	8001d54 <HAL_ADC_ConfigChannel+0xe8>
=======
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68d9      	ldr	r1, [r3, #12]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	4618      	mov	r0, r3
 800287e:	4603      	mov	r3, r0
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4403      	add	r3, r0
 8002884:	3b1e      	subs	r3, #30
 8002886:	409a      	lsls	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002890:	e022      	b.n	80028d8 <HAL_ADC_ConfigChannel+0xe8>
>>>>>>> Stashed changes
=======
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68d9      	ldr	r1, [r3, #12]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	4603      	mov	r3, r0
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4403      	add	r3, r0
 80026cc:	3b1e      	subs	r3, #30
 80026ce:	409a      	lsls	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026d8:	e022      	b.n	8002720 <HAL_ADC_ConfigChannel+0xe8>
>>>>>>> Stashed changes
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6919      	ldr	r1, [r3, #16]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	2207      	movs	r2, #7
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43da      	mvns	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	400a      	ands	r2, r1
 8001d30:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6919      	ldr	r1, [r3, #16]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	4603      	mov	r3, r0
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4403      	add	r3, r0
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	611a      	str	r2, [r3, #16]
=======
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6919      	ldr	r1, [r3, #16]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	b29b      	uxth	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	4613      	mov	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4413      	add	r3, r2
 80028a6:	2207      	movs	r2, #7
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43da      	mvns	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	400a      	ands	r2, r1
 80028b4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6919      	ldr	r1, [r3, #16]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	4618      	mov	r0, r3
 80028c8:	4603      	mov	r3, r0
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4403      	add	r3, r0
 80028ce:	409a      	lsls	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
=======
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6919      	ldr	r1, [r3, #16]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	2207      	movs	r2, #7
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43da      	mvns	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	400a      	ands	r2, r1
 80026fc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6919      	ldr	r1, [r3, #16]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	4618      	mov	r0, r3
 8002710:	4603      	mov	r3, r0
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4403      	add	r3, r0
 8002716:	409a      	lsls	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b06      	cmp	r3, #6
 8001d5a:	d824      	bhi.n	8001da6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b05      	subs	r3, #5
 8001d6e:	221f      	movs	r2, #31
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43da      	mvns	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	3b05      	subs	r3, #5
 8001d98:	fa00 f203 	lsl.w	r2, r0, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	635a      	str	r2, [r3, #52]	; 0x34
 8001da4:	e04c      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d824      	bhi.n	8001df8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3b23      	subs	r3, #35	; 0x23
 8001dc0:	221f      	movs	r2, #31
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	400a      	ands	r2, r1
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	3b23      	subs	r3, #35	; 0x23
 8001dea:	fa00 f203 	lsl.w	r2, r0, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	631a      	str	r2, [r3, #48]	; 0x30
 8001df6:	e023      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x1d4>
=======
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b06      	cmp	r3, #6
 80028de:	d824      	bhi.n	800292a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	3b05      	subs	r3, #5
 80028f2:	221f      	movs	r2, #31
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43da      	mvns	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	400a      	ands	r2, r1
 8002900:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	4618      	mov	r0, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	3b05      	subs	r3, #5
 800291c:	fa00 f203 	lsl.w	r2, r0, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	635a      	str	r2, [r3, #52]	; 0x34
 8002928:	e04c      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d824      	bhi.n	800297c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	3b23      	subs	r3, #35	; 0x23
 8002944:	221f      	movs	r2, #31
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	400a      	ands	r2, r1
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	3b23      	subs	r3, #35	; 0x23
 800296e:	fa00 f203 	lsl.w	r2, r0, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
 800297a:	e023      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x1d4>
>>>>>>> Stashed changes
=======
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b06      	cmp	r3, #6
 8002726:	d824      	bhi.n	8002772 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	3b05      	subs	r3, #5
 800273a:	221f      	movs	r2, #31
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43da      	mvns	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	400a      	ands	r2, r1
 8002748:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	b29b      	uxth	r3, r3
 8002756:	4618      	mov	r0, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	3b05      	subs	r3, #5
 8002764:	fa00 f203 	lsl.w	r2, r0, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	635a      	str	r2, [r3, #52]	; 0x34
 8002770:	e04c      	b.n	800280c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d824      	bhi.n	80027c4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	3b23      	subs	r3, #35	; 0x23
 800278c:	221f      	movs	r2, #31
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	400a      	ands	r2, r1
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	3b23      	subs	r3, #35	; 0x23
 80027b6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
 80027c2:	e023      	b.n	800280c <HAL_ADC_ConfigChannel+0x1d4>
>>>>>>> Stashed changes
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	3b41      	subs	r3, #65	; 0x41
 8001e0a:	221f      	movs	r2, #31
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43da      	mvns	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	400a      	ands	r2, r1
 8001e18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	3b41      	subs	r3, #65	; 0x41
 8001e34:	fa00 f203 	lsl.w	r2, r0, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	3b41      	subs	r3, #65	; 0x41
 800298e:	221f      	movs	r2, #31
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43da      	mvns	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	400a      	ands	r2, r1
 800299c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	4618      	mov	r0, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	3b41      	subs	r3, #65	; 0x41
 80029b8:	fa00 f203 	lsl.w	r2, r0, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes
=======
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	3b41      	subs	r3, #65	; 0x41
 80027d6:	221f      	movs	r2, #31
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43da      	mvns	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	400a      	ands	r2, r1
 80027e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	3b41      	subs	r3, #65	; 0x41
 8002800:	fa00 f203 	lsl.w	r2, r0, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a30      	ldr	r2, [pc, #192]	; (8001f08 <HAL_ADC_ConfigChannel+0x29c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d10a      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x1f4>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e52:	d105      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001e54:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4a2c      	ldr	r2, [pc, #176]	; (8001f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001e5a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e5e:	6053      	str	r3, [r2, #4]
=======
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a30      	ldr	r2, [pc, #192]	; (8002a8c <HAL_ADC_ConfigChannel+0x29c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10a      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x1f4>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029d6:	d105      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80029d8:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <HAL_ADC_ConfigChannel+0x2a0>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a2c      	ldr	r2, [pc, #176]	; (8002a90 <HAL_ADC_ConfigChannel+0x2a0>)
 80029de:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80029e2:	6053      	str	r3, [r2, #4]
>>>>>>> Stashed changes
=======
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a30      	ldr	r2, [pc, #192]	; (80028d4 <HAL_ADC_ConfigChannel+0x29c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10a      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1f4>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800281e:	d105      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002820:	4b2d      	ldr	r3, [pc, #180]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4a2c      	ldr	r2, [pc, #176]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002826:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800282a:	6053      	str	r3, [r2, #4]
>>>>>>> Stashed changes
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a28      	ldr	r2, [pc, #160]	; (8001f08 <HAL_ADC_ConfigChannel+0x29c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10f      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x21e>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b12      	cmp	r3, #18
 8001e70:	d10b      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001e72:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4a25      	ldr	r2, [pc, #148]	; (8001f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001e78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e7c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001e84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e88:	6053      	str	r3, [r2, #4]
=======
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a28      	ldr	r2, [pc, #160]	; (8002a8c <HAL_ADC_ConfigChannel+0x29c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d10f      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x21e>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b12      	cmp	r3, #18
 80029f4:	d10b      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80029f6:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <HAL_ADC_ConfigChannel+0x2a0>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4a25      	ldr	r2, [pc, #148]	; (8002a90 <HAL_ADC_ConfigChannel+0x2a0>)
 80029fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a00:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002a02:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a0c:	6053      	str	r3, [r2, #4]
>>>>>>> Stashed changes
=======
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a28      	ldr	r2, [pc, #160]	; (80028d4 <HAL_ADC_ConfigChannel+0x29c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10f      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x21e>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b12      	cmp	r3, #18
 800283c:	d10b      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002844:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002848:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800284a:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002854:	6053      	str	r3, [r2, #4]
>>>>>>> Stashed changes
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <HAL_ADC_ConfigChannel+0x29c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d12b      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x280>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <HAL_ADC_ConfigChannel+0x298>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d003      	beq.n	8001ea6 <HAL_ADC_ConfigChannel+0x23a>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b11      	cmp	r3, #17
 8001ea4:	d122      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001ea6:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001eac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001eb0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001eb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ebc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a10      	ldr	r2, [pc, #64]	; (8001f04 <HAL_ADC_ConfigChannel+0x298>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d111      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x280>
=======
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <HAL_ADC_ConfigChannel+0x29c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d12b      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x280>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1a      	ldr	r2, [pc, #104]	; (8002a88 <HAL_ADC_ConfigChannel+0x298>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d003      	beq.n	8002a2a <HAL_ADC_ConfigChannel+0x23a>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b11      	cmp	r3, #17
 8002a28:	d122      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002a2a:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a34:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a40:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a10      	ldr	r2, [pc, #64]	; (8002a88 <HAL_ADC_ConfigChannel+0x298>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d111      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x280>
>>>>>>> Stashed changes
=======
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1e      	ldr	r2, [pc, #120]	; (80028d4 <HAL_ADC_ConfigChannel+0x29c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d12b      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x280>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a1a      	ldr	r2, [pc, #104]	; (80028d0 <HAL_ADC_ConfigChannel+0x298>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d003      	beq.n	8002872 <HAL_ADC_ConfigChannel+0x23a>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b11      	cmp	r3, #17
 8002870:	d122      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002872:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002878:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800287c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002884:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002888:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a10      	ldr	r2, [pc, #64]	; (80028d0 <HAL_ADC_ConfigChannel+0x298>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d111      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x280>
>>>>>>> Stashed changes
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_ADC_ConfigChannel+0x2a4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <HAL_ADC_ConfigChannel+0x2a8>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0c9a      	lsrs	r2, r3, #18
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ede:	e002      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f9      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x274>
=======
 8002a4c:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <HAL_ADC_ConfigChannel+0x2a4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a11      	ldr	r2, [pc, #68]	; (8002a98 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	0c9a      	lsrs	r2, r3, #18
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a62:	e002      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f9      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x274>
>>>>>>> Stashed changes
=======
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_ADC_ConfigChannel+0x2a4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <HAL_ADC_ConfigChannel+0x2a8>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0c9a      	lsrs	r2, r3, #18
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028aa:	e002      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f9      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x274>
>>>>>>> Stashed changes
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	10000012 	.word	0x10000012
 8001f08:	40012000 	.word	0x40012000
 8001f0c:	40012300 	.word	0x40012300
 8001f10:	20000004 	.word	0x20000004
 8001f14:	431bde83 	.word	0x431bde83

08001f18 <ADC_Init>:
=======
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	10000012 	.word	0x10000012
 8002a8c:	40012000 	.word	0x40012000
 8002a90:	40012300 	.word	0x40012300
 8002a94:	20000004 	.word	0x20000004
 8002a98:	431bde83 	.word	0x431bde83

08002a9c <ADC_Init>:
>>>>>>> Stashed changes
=======
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	10000012 	.word	0x10000012
 80028d4:	40012000 	.word	0x40012000
 80028d8:	40012300 	.word	0x40012300
 80028dc:	20000004 	.word	0x20000004
 80028e0:	431bde83 	.word	0x431bde83

080028e4 <ADC_Init>:
>>>>>>> Stashed changes
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001f20:	4b78      	ldr	r3, [pc, #480]	; (8002104 <ADC_Init+0x1ec>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4a77      	ldr	r2, [pc, #476]	; (8002104 <ADC_Init+0x1ec>)
 8001f26:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f2a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001f2c:	4b75      	ldr	r3, [pc, #468]	; (8002104 <ADC_Init+0x1ec>)
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4973      	ldr	r1, [pc, #460]	; (8002104 <ADC_Init+0x1ec>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6859      	ldr	r1, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	021a      	lsls	r2, r3, #8
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6899      	ldr	r1, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	609a      	str	r2, [r3, #8]
=======
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002aa4:	4b78      	ldr	r3, [pc, #480]	; (8002c88 <ADC_Init+0x1ec>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a77      	ldr	r2, [pc, #476]	; (8002c88 <ADC_Init+0x1ec>)
 8002aaa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002aae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ab0:	4b75      	ldr	r3, [pc, #468]	; (8002c88 <ADC_Init+0x1ec>)
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4973      	ldr	r1, [pc, #460]	; (8002c88 <ADC_Init+0x1ec>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	021a      	lsls	r2, r3, #8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
=======
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80028ec:	4b78      	ldr	r3, [pc, #480]	; (8002ad0 <ADC_Init+0x1ec>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a77      	ldr	r2, [pc, #476]	; (8002ad0 <ADC_Init+0x1ec>)
 80028f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80028f8:	4b75      	ldr	r3, [pc, #468]	; (8002ad0 <ADC_Init+0x1ec>)
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4973      	ldr	r1, [pc, #460]	; (8002ad0 <ADC_Init+0x1ec>)
 8002902:	4313      	orrs	r3, r2
 8002904:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	021a      	lsls	r2, r3, #8
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6899      	ldr	r1, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	4a58      	ldr	r2, [pc, #352]	; (8002108 <ADC_Init+0x1f0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d022      	beq.n	8001ff2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6899      	ldr	r1, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6899      	ldr	r1, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	e00f      	b.n	8002012 <ADC_Init+0xfa>
=======
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	4a58      	ldr	r2, [pc, #352]	; (8002c8c <ADC_Init+0x1f0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d022      	beq.n	8002b76 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6899      	ldr	r1, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6899      	ldr	r1, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	e00f      	b.n	8002b96 <ADC_Init+0xfa>
>>>>>>> Stashed changes
=======
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <ADC_Init+0x1f0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d022      	beq.n	80029be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002986:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6899      	ldr	r1, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6899      	ldr	r1, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	e00f      	b.n	80029de <ADC_Init+0xfa>
>>>>>>> Stashed changes
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002010:	609a      	str	r2, [r3, #8]
=======
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b94:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
=======
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029dc:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0202 	bic.w	r2, r2, #2
 8002020:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6899      	ldr	r1, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	005a      	lsls	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d01b      	beq.n	8002078 <ADC_Init+0x160>
=======
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0202 	bic.w	r2, r2, #2
 8002ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6899      	ldr	r1, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	005a      	lsls	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01b      	beq.n	8002bfc <ADC_Init+0x160>
>>>>>>> Stashed changes
=======
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0202 	bic.w	r2, r2, #2
 80029ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6899      	ldr	r1, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	005a      	lsls	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <ADC_Init+0x160>
>>>>>>> Stashed changes
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800204e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800205e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6859      	ldr	r1, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	3b01      	subs	r3, #1
 800206c:	035a      	lsls	r2, r3, #13
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	e007      	b.n	8002088 <ADC_Init+0x170>
=======
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002be2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	035a      	lsls	r2, r3, #13
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	e007      	b.n	8002c0c <ADC_Init+0x170>
>>>>>>> Stashed changes
=======
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	3b01      	subs	r3, #1
 8002a38:	035a      	lsls	r2, r3, #13
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	e007      	b.n	8002a54 <ADC_Init+0x170>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002086:	605a      	str	r2, [r3, #4]
=======
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c0a:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
=======
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a52:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	051a      	lsls	r2, r3, #20
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6899      	ldr	r1, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020ca:	025a      	lsls	r2, r3, #9
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6899      	ldr	r1, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	029a      	lsls	r2, r3, #10
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	609a      	str	r2, [r3, #8]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	40012300 	.word	0x40012300
 8002108:	0f000001 	.word	0x0f000001

0800210c <__NVIC_SetPriorityGrouping>:
=======
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	051a      	lsls	r2, r3, #20
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6899      	ldr	r1, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c4e:	025a      	lsls	r2, r3, #9
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6899      	ldr	r1, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	029a      	lsls	r2, r3, #10
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	609a      	str	r2, [r3, #8]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40012300 	.word	0x40012300
 8002c8c:	0f000001 	.word	0x0f000001

08002c90 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
=======
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	051a      	lsls	r2, r3, #20
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6899      	ldr	r1, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a96:	025a      	lsls	r2, r3, #9
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6899      	ldr	r1, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	029a      	lsls	r2, r3, #10
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40012300 	.word	0x40012300
 8002ad4:	0f000001 	.word	0x0f000001

08002ad8 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <__NVIC_SetPriorityGrouping+0x40>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002128:	4013      	ands	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	4313      	orrs	r3, r2
 8002138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213a:	4a04      	ldr	r2, [pc, #16]	; (800214c <__NVIC_SetPriorityGrouping+0x40>)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	60d3      	str	r3, [r2, #12]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00
 8002150:	05fa0000 	.word	0x05fa0000

08002154 <__NVIC_GetPriorityGrouping>:
=======
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cac:	4013      	ands	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cbe:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	60d3      	str	r3, [r2, #12]
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000ed00 	.word	0xe000ed00
 8002cd4:	05fa0000 	.word	0x05fa0000

08002cd8 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
=======
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <__NVIC_SetPriorityGrouping+0x40>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af4:	4013      	ands	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b06:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <__NVIC_SetPriorityGrouping+0x40>)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	60d3      	str	r3, [r2, #12]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00
 8002b1c:	05fa0000 	.word	0x05fa0000

08002b20 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <__NVIC_GetPriorityGrouping+0x18>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	f003 0307 	and.w	r3, r3, #7
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_EnableIRQ>:
=======
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	f003 0307 	and.w	r3, r3, #7
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
=======
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <__NVIC_GetPriorityGrouping+0x18>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f003 0307 	and.w	r3, r3, #7
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	2b00      	cmp	r3, #0
 8002180:	db0b      	blt.n	800219a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	4907      	ldr	r1, [pc, #28]	; (80021a8 <__NVIC_EnableIRQ+0x38>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2001      	movs	r0, #1
 8002192:	fa00 f202 	lsl.w	r2, r0, r2
 8002196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e100 	.word	0xe000e100

080021ac <__NVIC_SetPriority>:
=======
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db0b      	blt.n	8002d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	4907      	ldr	r1, [pc, #28]	; (8002d2c <__NVIC_EnableIRQ+0x38>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	2001      	movs	r0, #1
 8002d16:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000e100 	.word	0xe000e100

08002d30 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
=======
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	db0b      	blt.n	8002b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	4907      	ldr	r1, [pc, #28]	; (8002b74 <__NVIC_EnableIRQ+0x38>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	6039      	str	r1, [r7, #0]
 80021b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	db0a      	blt.n	80021d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	490c      	ldr	r1, [pc, #48]	; (80021f8 <__NVIC_SetPriority+0x4c>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	0112      	lsls	r2, r2, #4
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	440b      	add	r3, r1
 80021d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	db0a      	blt.n	8002d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	490c      	ldr	r1, [pc, #48]	; (8002d7c <__NVIC_SetPriority+0x4c>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	0112      	lsls	r2, r2, #4
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	440b      	add	r3, r1
 8002d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> Stashed changes
=======
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db0a      	blt.n	8002ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	490c      	ldr	r1, [pc, #48]	; (8002bc4 <__NVIC_SetPriority+0x4c>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80021d4:	e00a      	b.n	80021ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4908      	ldr	r1, [pc, #32]	; (80021fc <__NVIC_SetPriority+0x50>)
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	3b04      	subs	r3, #4
 80021e4:	0112      	lsls	r2, r2, #4
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	440b      	add	r3, r1
 80021ea:	761a      	strb	r2, [r3, #24]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000e100 	.word	0xe000e100
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <NVIC_EncodePriority>:
=======
 8002d58:	e00a      	b.n	8002d70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4908      	ldr	r1, [pc, #32]	; (8002d80 <__NVIC_SetPriority+0x50>)
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	3b04      	subs	r3, #4
 8002d68:	0112      	lsls	r2, r2, #4
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	761a      	strb	r2, [r3, #24]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e100 	.word	0xe000e100
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <NVIC_EncodePriority>:
>>>>>>> Stashed changes
=======
 8002ba0:	e00a      	b.n	8002bb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4908      	ldr	r1, [pc, #32]	; (8002bc8 <__NVIC_SetPriority+0x50>)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	761a      	strb	r2, [r3, #24]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	61fb      	str	r3, [r7, #28]
=======
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
=======
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f1c3 0307 	rsb	r3, r3, #7
 800221a:	2b04      	cmp	r3, #4
 800221c:	bf28      	it	cs
 800221e:	2304      	movcs	r3, #4
 8002220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3304      	adds	r3, #4
 8002226:	2b06      	cmp	r3, #6
 8002228:	d902      	bls.n	8002230 <NVIC_EncodePriority+0x30>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3b03      	subs	r3, #3
 800222e:	e000      	b.n	8002232 <NVIC_EncodePriority+0x32>
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	f04f 32ff 	mov.w	r2, #4294967295
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	401a      	ands	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002248:	f04f 31ff 	mov.w	r1, #4294967295
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	43d9      	mvns	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	4313      	orrs	r3, r2
         );
}
 800225a:	4618      	mov	r0, r3
 800225c:	3724      	adds	r7, #36	; 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <SysTick_Config>:
=======
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f1c3 0307 	rsb	r3, r3, #7
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	bf28      	it	cs
 8002da2:	2304      	movcs	r3, #4
 8002da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d902      	bls.n	8002db4 <NVIC_EncodePriority+0x30>
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3b03      	subs	r3, #3
 8002db2:	e000      	b.n	8002db6 <NVIC_EncodePriority+0x32>
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43d9      	mvns	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	4313      	orrs	r3, r2
         );
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3724      	adds	r7, #36	; 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <SysTick_Config>:
>>>>>>> Stashed changes
=======
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f1c3 0307 	rsb	r3, r3, #7
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf28      	it	cs
 8002bea:	2304      	movcs	r3, #4
 8002bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d902      	bls.n	8002bfc <NVIC_EncodePriority+0x30>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3b03      	subs	r3, #3
 8002bfa:	e000      	b.n	8002bfe <NVIC_EncodePriority+0x32>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	401a      	ands	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	4313      	orrs	r3, r2
         );
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002278:	d301      	bcc.n	800227e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227a:	2301      	movs	r3, #1
 800227c:	e00f      	b.n	800229e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <SysTick_Config+0x40>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002286:	210f      	movs	r1, #15
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	f7ff ff8e 	bl	80021ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <SysTick_Config+0x40>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002296:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <SysTick_Config+0x40>)
 8002298:	2207      	movs	r2, #7
 800229a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	e000e010 	.word	0xe000e010

080022ac <HAL_NVIC_SetPriorityGrouping>:
=======
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dfc:	d301      	bcc.n	8002e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00f      	b.n	8002e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <SysTick_Config+0x40>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0a:	210f      	movs	r1, #15
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e10:	f7ff ff8e 	bl	8002d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <SysTick_Config+0x40>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <SysTick_Config+0x40>)
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	e000e010 	.word	0xe000e010

08002e30 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
=======
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c44:	d301      	bcc.n	8002c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00f      	b.n	8002c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <SysTick_Config+0x40>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c52:	210f      	movs	r1, #15
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
 8002c58:	f7ff ff8e 	bl	8002b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <SysTick_Config+0x40>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <SysTick_Config+0x40>)
 8002c64:	2207      	movs	r2, #7
 8002c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	e000e010 	.word	0xe000e010

08002c78 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
=======
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
=======
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ff29 	bl	800210c <__NVIC_SetPriorityGrouping>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_SetPriority>:
=======
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ff29 	bl	8002c90 <__NVIC_SetPriorityGrouping>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
=======
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff29 	bl	8002ad8 <__NVIC_SetPriorityGrouping>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
=======
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
=======
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80022d4:	f7ff ff3e 	bl	8002154 <__NVIC_GetPriorityGrouping>
 80022d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	6978      	ldr	r0, [r7, #20]
 80022e0:	f7ff ff8e 	bl	8002200 <NVIC_EncodePriority>
 80022e4:	4602      	mov	r2, r0
 80022e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff5d 	bl	80021ac <__NVIC_SetPriority>
}
 80022f2:	bf00      	nop
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_EnableIRQ>:
=======
 8002e58:	f7ff ff3e 	bl	8002cd8 <__NVIC_GetPriorityGrouping>
 8002e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	6978      	ldr	r0, [r7, #20]
 8002e64:	f7ff ff8e 	bl	8002d84 <NVIC_EncodePriority>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff5d 	bl	8002d30 <__NVIC_SetPriority>
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
=======
 8002ca0:	f7ff ff3e 	bl	8002b20 <__NVIC_GetPriorityGrouping>
 8002ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f7ff ff8e 	bl	8002bcc <NVIC_EncodePriority>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff5d 	bl	8002b78 <__NVIC_SetPriority>
}
 8002cbe:	bf00      	nop
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	71fb      	strb	r3, [r7, #7]
=======
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
=======
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff31 	bl	8002170 <__NVIC_EnableIRQ>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_SYSTICK_Config>:
=======
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff31 	bl	8002cf4 <__NVIC_EnableIRQ>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
=======
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff31 	bl	8002b3c <__NVIC_EnableIRQ>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ffa2 	bl	8002268 <SysTick_Config>
 8002324:	4603      	mov	r3, r0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_DMA_Abort>:
=======
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ffa2 	bl	8002dec <SysTick_Config>
 8002ea8:	4603      	mov	r3, r0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_DMA_Init>:
=======
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff ffa2 	bl	8002c34 <SysTick_Config>
 8002cf0:	4603      	mov	r3, r0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <HAL_DMA_Init>:
>>>>>>> Stashed changes
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ec0:	f7ff fc22 	bl	8002708 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]
=======
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7ff fc22 	bl	8002550 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]
>>>>>>> Stashed changes
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< Updated upstream
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e099      	b.n	8003004 <HAL_DMA_Init+0x150>
=======
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e099      	b.n	8002e4c <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< Updated upstream
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> Stashed changes

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
<<<<<<< Updated upstream
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef0:	e00f      	b.n	8002f12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ef2:	f7ff fc09 	bl	8002708 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d908      	bls.n	8002f12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2203      	movs	r2, #3
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e078      	b.n	8003004 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e8      	bne.n	8002ef2 <HAL_DMA_Init+0x3e>
=======
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d38:	e00f      	b.n	8002d5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d3a:	f7ff fc09 	bl	8002550 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	d908      	bls.n	8002d5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2203      	movs	r2, #3
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e078      	b.n	8002e4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e8      	bne.n	8002d3a <HAL_DMA_Init+0x3e>
>>>>>>> Stashed changes
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< Updated upstream
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4b38      	ldr	r3, [pc, #224]	; (800300c <HAL_DMA_Init+0x158>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]
=======
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <HAL_DMA_Init+0x158>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< Updated upstream
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d107      	bne.n	8002f7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	4313      	orrs	r3, r2
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
=======
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d107      	bne.n	8002dc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< Updated upstream
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f023 0307 	bic.w	r3, r3, #7
 8002f92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d117      	bne.n	8002fd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
=======
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f023 0307 	bic.w	r3, r3, #7
 8002dda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d117      	bne.n	8002e1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< Updated upstream
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00e      	beq.n	8002fd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fa7b 	bl	80034b4 <DMA_CheckFifoParam>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2240      	movs	r2, #64	; 0x40
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e016      	b.n	8003004 <HAL_DMA_Init+0x150>
=======
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00e      	beq.n	8002e1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fa7b 	bl	80032fc <DMA_CheckFifoParam>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2240      	movs	r2, #64	; 0x40
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e016      	b.n	8002e4c <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< Updated upstream
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	615a      	str	r2, [r3, #20]
=======
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< Updated upstream
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa32 	bl	8003448 <DMA_CalcBaseAndBitshift>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	223f      	movs	r2, #63	; 0x3f
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	e010803f 	.word	0xe010803f

08003010 <HAL_DMA_Abort>:
>>>>>>> Stashed changes
=======
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fa32 	bl	8003290 <DMA_CalcBaseAndBitshift>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e34:	223f      	movs	r2, #63	; 0x3f
 8002e36:	409a      	lsls	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	e010803f 	.word	0xe010803f

08002e58 <HAL_DMA_Abort>:
>>>>>>> Stashed changes
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800232e:	b580      	push	{r7, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff fc22 	bl	8001b84 <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d008      	beq.n	8002360 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e052      	b.n	8002406 <HAL_DMA_Abort+0xd8>
=======
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800301e:	f7ff fb73 	bl	8002708 <HAL_GetTick>
 8003022:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d008      	beq.n	8003042 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e052      	b.n	80030e8 <HAL_DMA_Abort+0xd8>
>>>>>>> Stashed changes
=======
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e66:	f7ff fb73 	bl	8002550 <HAL_GetTick>
 8002e6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d008      	beq.n	8002e8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2280      	movs	r2, #128	; 0x80
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e052      	b.n	8002f30 <HAL_DMA_Abort+0xd8>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0216 	bic.w	r2, r2, #22
 800236e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800237e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	2b00      	cmp	r3, #0
 8002386:	d103      	bne.n	8002390 <HAL_DMA_Abort+0x62>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238c:	2b00      	cmp	r3, #0
 800238e:	d007      	beq.n	80023a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0208 	bic.w	r2, r2, #8
 800239e:	601a      	str	r2, [r3, #0]
=======
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0216 	bic.w	r2, r2, #22
 8003050:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003060:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <HAL_DMA_Abort+0x62>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0208 	bic.w	r2, r2, #8
 8003080:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
=======
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0216 	bic.w	r2, r2, #22
 8002e98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ea8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d103      	bne.n	8002eba <HAL_DMA_Abort+0x62>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0208 	bic.w	r2, r2, #8
 8002ec8:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0201 	bic.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b0:	e013      	b.n	80023da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023b2:	f7ff fbe7 	bl	8001b84 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b05      	cmp	r3, #5
 80023be:	d90c      	bls.n	80023da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2203      	movs	r2, #3
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e015      	b.n	8002406 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e4      	bne.n	80023b2 <HAL_DMA_Abort+0x84>
=======
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0201 	bic.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003092:	e013      	b.n	80030bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003094:	f7ff fb38 	bl	8002708 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b05      	cmp	r3, #5
 80030a0:	d90c      	bls.n	80030bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2203      	movs	r2, #3
 80030ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e015      	b.n	80030e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e4      	bne.n	8003094 <HAL_DMA_Abort+0x84>
>>>>>>> Stashed changes
=======
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eda:	e013      	b.n	8002f04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002edc:	f7ff fb38 	bl	8002550 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b05      	cmp	r3, #5
 8002ee8:	d90c      	bls.n	8002f04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2220      	movs	r2, #32
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e015      	b.n	8002f30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e4      	bne.n	8002edc <HAL_DMA_Abort+0x84>
>>>>>>> Stashed changes
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ec:	223f      	movs	r2, #63	; 0x3f
 80023ee:	409a      	lsls	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_DMA_Abort_IT>:
=======
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	223f      	movs	r2, #63	; 0x3f
 80030d0:	409a      	lsls	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_DMA_Abort_IT>:
>>>>>>> Stashed changes
=======
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	223f      	movs	r2, #63	; 0x3f
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_DMA_Abort_IT>:
>>>>>>> Stashed changes
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d004      	beq.n	800242c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e00c      	b.n	8002446 <HAL_DMA_Abort_IT+0x38>
=======
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d004      	beq.n	800310e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2280      	movs	r2, #128	; 0x80
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e00c      	b.n	8003128 <HAL_DMA_Abort_IT+0x38>
>>>>>>> Stashed changes
=======
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d004      	beq.n	8002f56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00c      	b.n	8002f70 <HAL_DMA_Abort_IT+0x38>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2205      	movs	r2, #5
 8002430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <HAL_GPIO_Init>:
=======
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2205      	movs	r2, #5
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0201 	bic.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_DMA_IRQHandler>:
=======
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2205      	movs	r2, #5
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_DMA_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003140:	4b8e      	ldr	r3, [pc, #568]	; (800337c <HAL_DMA_IRQHandler+0x248>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a8e      	ldr	r2, [pc, #568]	; (8003380 <HAL_DMA_IRQHandler+0x24c>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	0a9b      	lsrs	r3, r3, #10
 800314c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315e:	2208      	movs	r2, #8
 8003160:	409a      	lsls	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01a      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d013      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0204 	bic.w	r2, r2, #4
 8003186:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318c:	2208      	movs	r2, #8
 800318e:	409a      	lsls	r2, r3
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002f88:	4b8e      	ldr	r3, [pc, #568]	; (80031c4 <HAL_DMA_IRQHandler+0x248>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a8e      	ldr	r2, [pc, #568]	; (80031c8 <HAL_DMA_IRQHandler+0x24c>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	0a9b      	lsrs	r3, r3, #10
 8002f94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01a      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d013      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0204 	bic.w	r2, r2, #4
 8002fce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a4:	2201      	movs	r2, #1
 80031a6:	409a      	lsls	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d012      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c2:	2201      	movs	r2, #1
 80031c4:	409a      	lsls	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	f043 0202 	orr.w	r2, r3, #2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	2201      	movs	r2, #1
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d012      	beq.n	800301e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300a:	2201      	movs	r2, #1
 800300c:	409a      	lsls	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003016:	f043 0202 	orr.w	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	2204      	movs	r2, #4
 80031dc:	409a      	lsls	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d012      	beq.n	800320c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00b      	beq.n	800320c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	2204      	movs	r2, #4
 80031fa:	409a      	lsls	r2, r3
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003204:	f043 0204 	orr.w	r2, r3, #4
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003022:	2204      	movs	r2, #4
 8003024:	409a      	lsls	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d012      	beq.n	8003054 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	2204      	movs	r2, #4
 8003042:	409a      	lsls	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	f043 0204 	orr.w	r2, r3, #4
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	2210      	movs	r2, #16
 8003212:	409a      	lsls	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d043      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d03c      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322e:	2210      	movs	r2, #16
 8003230:	409a      	lsls	r2, r3
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d018      	beq.n	8003276 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d108      	bne.n	8003264 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d024      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
 8003262:	e01f      	b.n	80032a4 <HAL_DMA_IRQHandler+0x170>
=======
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	2210      	movs	r2, #16
 800305a:	409a      	lsls	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d043      	beq.n	80030ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d03c      	beq.n	80030ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	2210      	movs	r2, #16
 8003078:	409a      	lsls	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d018      	beq.n	80030be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d108      	bne.n	80030ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d024      	beq.n	80030ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	4798      	blx	r3
 80030aa:	e01f      	b.n	80030ec <HAL_DMA_IRQHandler+0x170>
>>>>>>> Stashed changes
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< Updated upstream
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01b      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4798      	blx	r3
 8003274:	e016      	b.n	80032a4 <HAL_DMA_IRQHandler+0x170>
=======
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01b      	beq.n	80030ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
 80030bc:	e016      	b.n	80030ec <HAL_DMA_IRQHandler+0x170>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< Updated upstream
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	d107      	bne.n	8003294 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0208 	bic.w	r2, r2, #8
 8003292:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4798      	blx	r3
=======
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d107      	bne.n	80030dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0208 	bic.w	r2, r2, #8
 80030da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	4798      	blx	r3
>>>>>>> Stashed changes
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a8:	2220      	movs	r2, #32
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 808f 	beq.w	80033d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8087 	beq.w	80033d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	2220      	movs	r2, #32
 80032cc:	409a      	lsls	r2, r3
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d136      	bne.n	800334c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0216 	bic.w	r2, r2, #22
 80032ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	d103      	bne.n	800330e <HAL_DMA_IRQHandler+0x1da>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0208 	bic.w	r2, r2, #8
 800331c:	601a      	str	r2, [r3, #0]
=======
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f0:	2220      	movs	r2, #32
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 808f 	beq.w	800321c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8087 	beq.w	800321c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003112:	2220      	movs	r2, #32
 8003114:	409a      	lsls	r2, r3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b05      	cmp	r3, #5
 8003124:	d136      	bne.n	8003194 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0216 	bic.w	r2, r2, #22
 8003134:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003144:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <HAL_DMA_IRQHandler+0x1da>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0208 	bic.w	r2, r2, #8
 8003164:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< Updated upstream
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003322:	223f      	movs	r2, #63	; 0x3f
 8003324:	409a      	lsls	r2, r3
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333e:	2b00      	cmp	r3, #0
 8003340:	d07e      	beq.n	8003440 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	4798      	blx	r3
        }
        return;
 800334a:	e079      	b.n	8003440 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d01d      	beq.n	8003396 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10d      	bne.n	8003384 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	2b00      	cmp	r3, #0
 800336e:	d031      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
 8003378:	e02c      	b.n	80033d4 <HAL_DMA_IRQHandler+0x2a0>
 800337a:	bf00      	nop
 800337c:	20000004 	.word	0x20000004
 8003380:	1b4e81b5 	.word	0x1b4e81b5
=======
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316a:	223f      	movs	r2, #63	; 0x3f
 800316c:	409a      	lsls	r2, r3
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003186:	2b00      	cmp	r3, #0
 8003188:	d07e      	beq.n	8003288 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
        }
        return;
 8003192:	e079      	b.n	8003288 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d01d      	beq.n	80031de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10d      	bne.n	80031cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d031      	beq.n	800321c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
 80031c0:	e02c      	b.n	800321c <HAL_DMA_IRQHandler+0x2a0>
 80031c2:	bf00      	nop
 80031c4:	20000004 	.word	0x20000004
 80031c8:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> Stashed changes
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< Updated upstream
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d023      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
 8003394:	e01e      	b.n	80033d4 <HAL_DMA_IRQHandler+0x2a0>
=======
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d023      	beq.n	800321c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
 80031dc:	e01e      	b.n	800321c <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> Stashed changes
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< Updated upstream
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10f      	bne.n	80033c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0210 	bic.w	r2, r2, #16
 80033b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10f      	bne.n	800320c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0210 	bic.w	r2, r2, #16
 80031fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> Stashed changes

        }

        if(hdma->XferCpltCallback != NULL)
<<<<<<< Updated upstream
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	4798      	blx	r3
=======
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
>>>>>>> Stashed changes
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< Updated upstream
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d032      	beq.n	8003442 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d022      	beq.n	800342e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2205      	movs	r2, #5
 80033ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
=======
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	2b00      	cmp	r3, #0
 8003222:	d032      	beq.n	800328a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d022      	beq.n	8003276 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2205      	movs	r2, #5
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      do
      {
        if (++count > timeout)
<<<<<<< Updated upstream
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	3301      	adds	r3, #1
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	429a      	cmp	r2, r3
 800340a:	d307      	bcc.n	800341c <HAL_DMA_IRQHandler+0x2e8>
=======
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	3301      	adds	r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	429a      	cmp	r2, r3
 8003252:	d307      	bcc.n	8003264 <HAL_DMA_IRQHandler+0x2e8>
>>>>>>> Stashed changes
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< Updated upstream
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f2      	bne.n	8003400 <HAL_DMA_IRQHandler+0x2cc>
 800341a:	e000      	b.n	800341e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800341c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f2      	bne.n	8003248 <HAL_DMA_IRQHandler+0x2cc>
 8003262:	e000      	b.n	8003266 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003264:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> Stashed changes

    }

    if(hdma->XferErrorCallback != NULL)
<<<<<<< Updated upstream
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
 800343e:	e000      	b.n	8003442 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003440:	bf00      	nop
    }
  }
}
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <DMA_CalcBaseAndBitshift>:
=======
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
 8003286:	e000      	b.n	800328a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003288:	bf00      	nop
    }
  }
}
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <DMA_CalcBaseAndBitshift>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	3b10      	subs	r3, #16
 8003458:	4a13      	ldr	r2, [pc, #76]	; (80034a8 <DMA_CalcBaseAndBitshift+0x60>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	60fb      	str	r3, [r7, #12]
=======
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	3b10      	subs	r3, #16
 80032a0:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <DMA_CalcBaseAndBitshift+0x60>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< Updated upstream
 8003462:	4a12      	ldr	r2, [pc, #72]	; (80034ac <DMA_CalcBaseAndBitshift+0x64>)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d908      	bls.n	8003488 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <DMA_CalcBaseAndBitshift+0x68>)
 800347e:	4013      	ands	r3, r2
 8003480:	1d1a      	adds	r2, r3, #4
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	659a      	str	r2, [r3, #88]	; 0x58
 8003486:	e006      	b.n	8003496 <DMA_CalcBaseAndBitshift+0x4e>
=======
 80032aa:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <DMA_CalcBaseAndBitshift+0x64>)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d908      	bls.n	80032d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <DMA_CalcBaseAndBitshift+0x68>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	1d1a      	adds	r2, r3, #4
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	659a      	str	r2, [r3, #88]	; 0x58
 80032ce:	e006      	b.n	80032de <DMA_CalcBaseAndBitshift+0x4e>
>>>>>>> Stashed changes
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< Updated upstream
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <DMA_CalcBaseAndBitshift+0x68>)
 8003490:	4013      	ands	r3, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	aaaaaaab 	.word	0xaaaaaaab
 80034ac:	0800c0d0 	.word	0x0800c0d0
 80034b0:	fffffc00 	.word	0xfffffc00

080034b4 <DMA_CheckFifoParam>:
=======
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <DMA_CalcBaseAndBitshift+0x68>)
 80032d8:	4013      	ands	r3, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	aaaaaaab 	.word	0xaaaaaaab
 80032f4:	0800be94 	.word	0x0800be94
 80032f8:	fffffc00 	.word	0xfffffc00

080032fc <DMA_CheckFifoParam>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d11f      	bne.n	800350e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d856      	bhi.n	8003582 <DMA_CheckFifoParam+0xce>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <DMA_CheckFifoParam+0x28>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	080034ed 	.word	0x080034ed
 80034e0:	080034ff 	.word	0x080034ff
 80034e4:	080034ed 	.word	0x080034ed
 80034e8:	08003583 	.word	0x08003583
=======
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d11f      	bne.n	8003356 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d856      	bhi.n	80033ca <DMA_CheckFifoParam+0xce>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <DMA_CheckFifoParam+0x28>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003335 	.word	0x08003335
 8003328:	08003347 	.word	0x08003347
 800332c:	08003335 	.word	0x08003335
 8003330:	080033cb 	.word	0x080033cb
>>>>>>> Stashed changes
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< Updated upstream
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d046      	beq.n	8003586 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034fc:	e043      	b.n	8003586 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003506:	d140      	bne.n	800358a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350c:	e03d      	b.n	800358a <DMA_CheckFifoParam+0xd6>
=======
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d046      	beq.n	80033ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003344:	e043      	b.n	80033ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800334e:	d140      	bne.n	80033d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003354:	e03d      	b.n	80033d2 <DMA_CheckFifoParam+0xd6>
>>>>>>> Stashed changes
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< Updated upstream
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003516:	d121      	bne.n	800355c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b03      	cmp	r3, #3
 800351c:	d837      	bhi.n	800358e <DMA_CheckFifoParam+0xda>
 800351e:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <DMA_CheckFifoParam+0x70>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	08003535 	.word	0x08003535
 8003528:	0800353b 	.word	0x0800353b
 800352c:	08003535 	.word	0x08003535
 8003530:	0800354d 	.word	0x0800354d
=======
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335e:	d121      	bne.n	80033a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d837      	bhi.n	80033d6 <DMA_CheckFifoParam+0xda>
 8003366:	a201      	add	r2, pc, #4	; (adr r2, 800336c <DMA_CheckFifoParam+0x70>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	0800337d 	.word	0x0800337d
 8003370:	08003383 	.word	0x08003383
 8003374:	0800337d 	.word	0x0800337d
 8003378:	08003395 	.word	0x08003395
>>>>>>> Stashed changes
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
      break;
 8003538:	e030      	b.n	800359c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d025      	beq.n	8003592 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354a:	e022      	b.n	8003592 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003554:	d11f      	bne.n	8003596 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800355a:	e01c      	b.n	8003596 <DMA_CheckFifoParam+0xe2>
=======
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      break;
 8003380:	e030      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d025      	beq.n	80033da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003392:	e022      	b.n	80033da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800339c:	d11f      	bne.n	80033de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033a2:	e01c      	b.n	80033de <DMA_CheckFifoParam+0xe2>
>>>>>>> Stashed changes
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< Updated upstream
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d903      	bls.n	800356a <DMA_CheckFifoParam+0xb6>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b03      	cmp	r3, #3
 8003566:	d003      	beq.n	8003570 <DMA_CheckFifoParam+0xbc>
=======
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d903      	bls.n	80033b2 <DMA_CheckFifoParam+0xb6>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d003      	beq.n	80033b8 <DMA_CheckFifoParam+0xbc>
>>>>>>> Stashed changes
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< Updated upstream
 8003568:	e018      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
      break;
 800356e:	e015      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00e      	beq.n	800359a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      break;
 8003580:	e00b      	b.n	800359a <DMA_CheckFifoParam+0xe6>
      break;
 8003582:	bf00      	nop
 8003584:	e00a      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;
 8003586:	bf00      	nop
 8003588:	e008      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;
 800358a:	bf00      	nop
 800358c:	e006      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;
 800358e:	bf00      	nop
 8003590:	e004      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;
 8003592:	bf00      	nop
 8003594:	e002      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;   
 8003596:	bf00      	nop
 8003598:	e000      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;
 800359a:	bf00      	nop
=======
 80033b0:	e018      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
      break;
 80033b6:	e015      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00e      	beq.n	80033e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      break;
 80033c8:	e00b      	b.n	80033e2 <DMA_CheckFifoParam+0xe6>
      break;
 80033ca:	bf00      	nop
 80033cc:	e00a      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033ce:	bf00      	nop
 80033d0:	e008      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033d2:	bf00      	nop
 80033d4:	e006      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033d6:	bf00      	nop
 80033d8:	e004      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033da:	bf00      	nop
 80033dc:	e002      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033e2:	bf00      	nop
>>>>>>> Stashed changes
    }
  } 
  
  return status; 
<<<<<<< Updated upstream
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop

080035ac <HAL_GPIO_Init>:
>>>>>>> Stashed changes
=======
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop

080033f4 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
=======
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	; 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
=======
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e175      	b.n	8002760 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	429a      	cmp	r2, r3
 800248e:	f040 8164 	bne.w	800275a <HAL_GPIO_Init+0x306>
=======
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e175      	b.n	80038b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035cc:	2201      	movs	r2, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	f040 8164 	bne.w	80038b2 <HAL_GPIO_Init+0x306>
>>>>>>> Stashed changes
=======
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	e175      	b.n	8003700 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003414:	2201      	movs	r2, #1
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	429a      	cmp	r2, r3
 800342e:	f040 8164 	bne.w	80036fa <HAL_GPIO_Init+0x306>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d005      	beq.n	80024aa <HAL_GPIO_Init+0x56>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d130      	bne.n	800250c <HAL_GPIO_Init+0xb8>
=======
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d005      	beq.n	8003602 <HAL_GPIO_Init+0x56>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d130      	bne.n	8003664 <HAL_GPIO_Init+0xb8>
>>>>>>> Stashed changes
=======
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d005      	beq.n	800344a <HAL_GPIO_Init+0x56>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d130      	bne.n	80034ac <HAL_GPIO_Init+0xb8>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 0201 	and.w	r2, r3, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b03      	cmp	r3, #3
 8002516:	d017      	beq.n	8002548 <HAL_GPIO_Init+0xf4>
=======
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	2203      	movs	r2, #3
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003638:	2201      	movs	r2, #1
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 0201 	and.w	r2, r3, #1
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b03      	cmp	r3, #3
 800366e:	d017      	beq.n	80036a0 <HAL_GPIO_Init+0xf4>
>>>>>>> Stashed changes
=======
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	2203      	movs	r2, #3
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003480:	2201      	movs	r2, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	f003 0201 	and.w	r2, r3, #1
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d017      	beq.n	80034e8 <HAL_GPIO_Init+0xf4>
>>>>>>> Stashed changes
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2203      	movs	r2, #3
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	60da      	str	r2, [r3, #12]
=======
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2203      	movs	r2, #3
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
=======
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2203      	movs	r2, #3
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d123      	bne.n	800259c <HAL_GPIO_Init+0x148>
=======
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d123      	bne.n	80036f4 <HAL_GPIO_Init+0x148>
>>>>>>> Stashed changes
=======
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d123      	bne.n	800353c <HAL_GPIO_Init+0x148>
>>>>>>> Stashed changes
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	08da      	lsrs	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3208      	adds	r2, #8
 800255c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	220f      	movs	r2, #15
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3208      	adds	r2, #8
 8002596:	69b9      	ldr	r1, [r7, #24]
 8002598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	08da      	lsrs	r2, r3, #3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3208      	adds	r2, #8
 80036b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	220f      	movs	r2, #15
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	08da      	lsrs	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3208      	adds	r2, #8
 80036ee:	69b9      	ldr	r1, [r7, #24]
 80036f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
=======
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	08da      	lsrs	r2, r3, #3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3208      	adds	r2, #8
 80034fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	220f      	movs	r2, #15
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	08da      	lsrs	r2, r3, #3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3208      	adds	r2, #8
 8003536:	69b9      	ldr	r1, [r7, #24]
 8003538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	601a      	str	r2, [r3, #0]
=======
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	2203      	movs	r2, #3
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0203 	and.w	r2, r3, #3
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
=======
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	2203      	movs	r2, #3
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0203 	and.w	r2, r3, #3
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80be 	beq.w	800275a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	4b66      	ldr	r3, [pc, #408]	; (8002778 <HAL_GPIO_Init+0x324>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	4a65      	ldr	r2, [pc, #404]	; (8002778 <HAL_GPIO_Init+0x324>)
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ea:	4b63      	ldr	r3, [pc, #396]	; (8002778 <HAL_GPIO_Init+0x324>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025f6:	4a61      	ldr	r2, [pc, #388]	; (800277c <HAL_GPIO_Init+0x328>)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3302      	adds	r3, #2
 80025fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	220f      	movs	r2, #15
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a58      	ldr	r2, [pc, #352]	; (8002780 <HAL_GPIO_Init+0x32c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d037      	beq.n	8002692 <HAL_GPIO_Init+0x23e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a57      	ldr	r2, [pc, #348]	; (8002784 <HAL_GPIO_Init+0x330>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d031      	beq.n	800268e <HAL_GPIO_Init+0x23a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a56      	ldr	r2, [pc, #344]	; (8002788 <HAL_GPIO_Init+0x334>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d02b      	beq.n	800268a <HAL_GPIO_Init+0x236>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a55      	ldr	r2, [pc, #340]	; (800278c <HAL_GPIO_Init+0x338>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d025      	beq.n	8002686 <HAL_GPIO_Init+0x232>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a54      	ldr	r2, [pc, #336]	; (8002790 <HAL_GPIO_Init+0x33c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d01f      	beq.n	8002682 <HAL_GPIO_Init+0x22e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a53      	ldr	r2, [pc, #332]	; (8002794 <HAL_GPIO_Init+0x340>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d019      	beq.n	800267e <HAL_GPIO_Init+0x22a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a52      	ldr	r2, [pc, #328]	; (8002798 <HAL_GPIO_Init+0x344>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_GPIO_Init+0x226>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a51      	ldr	r2, [pc, #324]	; (800279c <HAL_GPIO_Init+0x348>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00d      	beq.n	8002676 <HAL_GPIO_Init+0x222>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a50      	ldr	r2, [pc, #320]	; (80027a0 <HAL_GPIO_Init+0x34c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d007      	beq.n	8002672 <HAL_GPIO_Init+0x21e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4f      	ldr	r2, [pc, #316]	; (80027a4 <HAL_GPIO_Init+0x350>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_GPIO_Init+0x21a>
 800266a:	2309      	movs	r3, #9
 800266c:	e012      	b.n	8002694 <HAL_GPIO_Init+0x240>
 800266e:	230a      	movs	r3, #10
 8002670:	e010      	b.n	8002694 <HAL_GPIO_Init+0x240>
 8002672:	2308      	movs	r3, #8
 8002674:	e00e      	b.n	8002694 <HAL_GPIO_Init+0x240>
 8002676:	2307      	movs	r3, #7
 8002678:	e00c      	b.n	8002694 <HAL_GPIO_Init+0x240>
 800267a:	2306      	movs	r3, #6
 800267c:	e00a      	b.n	8002694 <HAL_GPIO_Init+0x240>
 800267e:	2305      	movs	r3, #5
 8002680:	e008      	b.n	8002694 <HAL_GPIO_Init+0x240>
 8002682:	2304      	movs	r3, #4
 8002684:	e006      	b.n	8002694 <HAL_GPIO_Init+0x240>
 8002686:	2303      	movs	r3, #3
 8002688:	e004      	b.n	8002694 <HAL_GPIO_Init+0x240>
 800268a:	2302      	movs	r3, #2
 800268c:	e002      	b.n	8002694 <HAL_GPIO_Init+0x240>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_GPIO_Init+0x240>
 8002692:	2300      	movs	r3, #0
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	f002 0203 	and.w	r2, r2, #3
 800269a:	0092      	lsls	r2, r2, #2
 800269c:	4093      	lsls	r3, r2
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026a4:	4935      	ldr	r1, [pc, #212]	; (800277c <HAL_GPIO_Init+0x328>)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b2:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <HAL_GPIO_Init+0x354>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026d6:	4a34      	ldr	r2, [pc, #208]	; (80027a8 <HAL_GPIO_Init+0x354>)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026dc:	4b32      	ldr	r3, [pc, #200]	; (80027a8 <HAL_GPIO_Init+0x354>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002700:	4a29      	ldr	r2, [pc, #164]	; (80027a8 <HAL_GPIO_Init+0x354>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002706:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <HAL_GPIO_Init+0x354>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800272a:	4a1f      	ldr	r2, [pc, #124]	; (80027a8 <HAL_GPIO_Init+0x354>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002730:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_GPIO_Init+0x354>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002754:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <HAL_GPIO_Init+0x354>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3301      	adds	r3, #1
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b0f      	cmp	r3, #15
 8002764:	f67f ae86 	bls.w	8002474 <HAL_GPIO_Init+0x20>
=======
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80be 	beq.w	80038b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003736:	4b66      	ldr	r3, [pc, #408]	; (80038d0 <HAL_GPIO_Init+0x324>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	4a65      	ldr	r2, [pc, #404]	; (80038d0 <HAL_GPIO_Init+0x324>)
 800373c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003740:	6453      	str	r3, [r2, #68]	; 0x44
 8003742:	4b63      	ldr	r3, [pc, #396]	; (80038d0 <HAL_GPIO_Init+0x324>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800374e:	4a61      	ldr	r2, [pc, #388]	; (80038d4 <HAL_GPIO_Init+0x328>)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	089b      	lsrs	r3, r3, #2
 8003754:	3302      	adds	r3, #2
 8003756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	220f      	movs	r2, #15
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a58      	ldr	r2, [pc, #352]	; (80038d8 <HAL_GPIO_Init+0x32c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d037      	beq.n	80037ea <HAL_GPIO_Init+0x23e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a57      	ldr	r2, [pc, #348]	; (80038dc <HAL_GPIO_Init+0x330>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d031      	beq.n	80037e6 <HAL_GPIO_Init+0x23a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a56      	ldr	r2, [pc, #344]	; (80038e0 <HAL_GPIO_Init+0x334>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d02b      	beq.n	80037e2 <HAL_GPIO_Init+0x236>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a55      	ldr	r2, [pc, #340]	; (80038e4 <HAL_GPIO_Init+0x338>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d025      	beq.n	80037de <HAL_GPIO_Init+0x232>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a54      	ldr	r2, [pc, #336]	; (80038e8 <HAL_GPIO_Init+0x33c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01f      	beq.n	80037da <HAL_GPIO_Init+0x22e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a53      	ldr	r2, [pc, #332]	; (80038ec <HAL_GPIO_Init+0x340>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d019      	beq.n	80037d6 <HAL_GPIO_Init+0x22a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a52      	ldr	r2, [pc, #328]	; (80038f0 <HAL_GPIO_Init+0x344>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_GPIO_Init+0x226>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a51      	ldr	r2, [pc, #324]	; (80038f4 <HAL_GPIO_Init+0x348>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00d      	beq.n	80037ce <HAL_GPIO_Init+0x222>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a50      	ldr	r2, [pc, #320]	; (80038f8 <HAL_GPIO_Init+0x34c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d007      	beq.n	80037ca <HAL_GPIO_Init+0x21e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a4f      	ldr	r2, [pc, #316]	; (80038fc <HAL_GPIO_Init+0x350>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <HAL_GPIO_Init+0x21a>
 80037c2:	2309      	movs	r3, #9
 80037c4:	e012      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037c6:	230a      	movs	r3, #10
 80037c8:	e010      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037ca:	2308      	movs	r3, #8
 80037cc:	e00e      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037ce:	2307      	movs	r3, #7
 80037d0:	e00c      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037d2:	2306      	movs	r3, #6
 80037d4:	e00a      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037d6:	2305      	movs	r3, #5
 80037d8:	e008      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037da:	2304      	movs	r3, #4
 80037dc:	e006      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037de:	2303      	movs	r3, #3
 80037e0:	e004      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e002      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037ea:	2300      	movs	r3, #0
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	f002 0203 	and.w	r2, r2, #3
 80037f2:	0092      	lsls	r2, r2, #2
 80037f4:	4093      	lsls	r3, r2
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037fc:	4935      	ldr	r1, [pc, #212]	; (80038d4 <HAL_GPIO_Init+0x328>)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	3302      	adds	r3, #2
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800380a:	4b3d      	ldr	r3, [pc, #244]	; (8003900 <HAL_GPIO_Init+0x354>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800382e:	4a34      	ldr	r2, [pc, #208]	; (8003900 <HAL_GPIO_Init+0x354>)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003834:	4b32      	ldr	r3, [pc, #200]	; (8003900 <HAL_GPIO_Init+0x354>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003858:	4a29      	ldr	r2, [pc, #164]	; (8003900 <HAL_GPIO_Init+0x354>)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800385e:	4b28      	ldr	r3, [pc, #160]	; (8003900 <HAL_GPIO_Init+0x354>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003882:	4a1f      	ldr	r2, [pc, #124]	; (8003900 <HAL_GPIO_Init+0x354>)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003888:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <HAL_GPIO_Init+0x354>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038ac:	4a14      	ldr	r2, [pc, #80]	; (8003900 <HAL_GPIO_Init+0x354>)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	f67f ae86 	bls.w	80035cc <HAL_GPIO_Init+0x20>
>>>>>>> Stashed changes
=======
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80be 	beq.w	80036fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357e:	4b66      	ldr	r3, [pc, #408]	; (8003718 <HAL_GPIO_Init+0x324>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	4a65      	ldr	r2, [pc, #404]	; (8003718 <HAL_GPIO_Init+0x324>)
 8003584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003588:	6453      	str	r3, [r2, #68]	; 0x44
 800358a:	4b63      	ldr	r3, [pc, #396]	; (8003718 <HAL_GPIO_Init+0x324>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003596:	4a61      	ldr	r2, [pc, #388]	; (800371c <HAL_GPIO_Init+0x328>)
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	3302      	adds	r3, #2
 800359e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	220f      	movs	r2, #15
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_GPIO_Init+0x32c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d037      	beq.n	8003632 <HAL_GPIO_Init+0x23e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a57      	ldr	r2, [pc, #348]	; (8003724 <HAL_GPIO_Init+0x330>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d031      	beq.n	800362e <HAL_GPIO_Init+0x23a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a56      	ldr	r2, [pc, #344]	; (8003728 <HAL_GPIO_Init+0x334>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d02b      	beq.n	800362a <HAL_GPIO_Init+0x236>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a55      	ldr	r2, [pc, #340]	; (800372c <HAL_GPIO_Init+0x338>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d025      	beq.n	8003626 <HAL_GPIO_Init+0x232>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a54      	ldr	r2, [pc, #336]	; (8003730 <HAL_GPIO_Init+0x33c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01f      	beq.n	8003622 <HAL_GPIO_Init+0x22e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a53      	ldr	r2, [pc, #332]	; (8003734 <HAL_GPIO_Init+0x340>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d019      	beq.n	800361e <HAL_GPIO_Init+0x22a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a52      	ldr	r2, [pc, #328]	; (8003738 <HAL_GPIO_Init+0x344>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_GPIO_Init+0x226>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a51      	ldr	r2, [pc, #324]	; (800373c <HAL_GPIO_Init+0x348>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00d      	beq.n	8003616 <HAL_GPIO_Init+0x222>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a50      	ldr	r2, [pc, #320]	; (8003740 <HAL_GPIO_Init+0x34c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <HAL_GPIO_Init+0x21e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4f      	ldr	r2, [pc, #316]	; (8003744 <HAL_GPIO_Init+0x350>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_GPIO_Init+0x21a>
 800360a:	2309      	movs	r3, #9
 800360c:	e012      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800360e:	230a      	movs	r3, #10
 8003610:	e010      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003612:	2308      	movs	r3, #8
 8003614:	e00e      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003616:	2307      	movs	r3, #7
 8003618:	e00c      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800361a:	2306      	movs	r3, #6
 800361c:	e00a      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800361e:	2305      	movs	r3, #5
 8003620:	e008      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003622:	2304      	movs	r3, #4
 8003624:	e006      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003626:	2303      	movs	r3, #3
 8003628:	e004      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800362a:	2302      	movs	r3, #2
 800362c:	e002      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003632:	2300      	movs	r3, #0
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	f002 0203 	and.w	r2, r2, #3
 800363a:	0092      	lsls	r2, r2, #2
 800363c:	4093      	lsls	r3, r2
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003644:	4935      	ldr	r1, [pc, #212]	; (800371c <HAL_GPIO_Init+0x328>)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	089b      	lsrs	r3, r3, #2
 800364a:	3302      	adds	r3, #2
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <HAL_GPIO_Init+0x354>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003676:	4a34      	ldr	r2, [pc, #208]	; (8003748 <HAL_GPIO_Init+0x354>)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800367c:	4b32      	ldr	r3, [pc, #200]	; (8003748 <HAL_GPIO_Init+0x354>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a0:	4a29      	ldr	r2, [pc, #164]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036a6:	4b28      	ldr	r3, [pc, #160]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ca:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036f4:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3301      	adds	r3, #1
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b0f      	cmp	r3, #15
 8003704:	f67f ae86 	bls.w	8003414 <HAL_GPIO_Init+0x20>
>>>>>>> Stashed changes
      }
    }
  }
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3724      	adds	r7, #36	; 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800
 800277c:	40013800 	.word	0x40013800
 8002780:	40020000 	.word	0x40020000
 8002784:	40020400 	.word	0x40020400
 8002788:	40020800 	.word	0x40020800
 800278c:	40020c00 	.word	0x40020c00
 8002790:	40021000 	.word	0x40021000
 8002794:	40021400 	.word	0x40021400
 8002798:	40021800 	.word	0x40021800
 800279c:	40021c00 	.word	0x40021c00
 80027a0:	40022000 	.word	0x40022000
 80027a4:	40022400 	.word	0x40022400
 80027a8:	40013c00 	.word	0x40013c00

080027ac <HAL_GPIO_WritePin>:
=======
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3724      	adds	r7, #36	; 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40013800 	.word	0x40013800
 80038d8:	40020000 	.word	0x40020000
 80038dc:	40020400 	.word	0x40020400
 80038e0:	40020800 	.word	0x40020800
 80038e4:	40020c00 	.word	0x40020c00
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40021400 	.word	0x40021400
 80038f0:	40021800 	.word	0x40021800
 80038f4:	40021c00 	.word	0x40021c00
 80038f8:	40022000 	.word	0x40022000
 80038fc:	40022400 	.word	0x40022400
 8003900:	40013c00 	.word	0x40013c00

08003904 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
=======
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	3724      	adds	r7, #36	; 0x24
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40013800 	.word	0x40013800
 8003720:	40020000 	.word	0x40020000
 8003724:	40020400 	.word	0x40020400
 8003728:	40020800 	.word	0x40020800
 800372c:	40020c00 	.word	0x40020c00
 8003730:	40021000 	.word	0x40021000
 8003734:	40021400 	.word	0x40021400
 8003738:	40021800 	.word	0x40021800
 800373c:	40021c00 	.word	0x40021c00
 8003740:	40022000 	.word	0x40022000
 8003744:	40022400 	.word	0x40022400
 8003748:	40013c00 	.word	0x40013c00

0800374c <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
 80027b8:	4613      	mov	r3, r2
 80027ba:	707b      	strb	r3, [r7, #1]
=======
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	807b      	strh	r3, [r7, #2]
 8003910:	4613      	mov	r3, r2
 8003912:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
=======
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
 8003758:	4613      	mov	r3, r2
 800375a:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80027bc:	787b      	ldrb	r3, [r7, #1]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	619a      	str	r2, [r3, #24]
=======
 8003914:	787b      	ldrb	r3, [r7, #1]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800391a:	887a      	ldrh	r2, [r7, #2]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
=======
 800375c:	787b      	ldrb	r3, [r7, #1]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80027c8:	e003      	b.n	80027d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027ca:	887b      	ldrh	r3, [r7, #2]
 80027cc:	041a      	lsls	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	619a      	str	r2, [r3, #24]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_GPIO_TogglePin>:
=======
 8003920:	e003      	b.n	800392a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003922:	887b      	ldrh	r3, [r7, #2]
 8003924:	041a      	lsls	r2, r3, #16
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	619a      	str	r2, [r3, #24]
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_GPIO_TogglePin>:
>>>>>>> Stashed changes
=======
 8003768:	e003      	b.n	8003772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800376a:	887b      	ldrh	r3, [r7, #2]
 800376c:	041a      	lsls	r2, r3, #16
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	619a      	str	r2, [r3, #24]
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_GPIO_TogglePin>:
>>>>>>> Stashed changes
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	807b      	strh	r3, [r7, #2]
=======
 8003936:	b480      	push	{r7}
 8003938:	b085      	sub	sp, #20
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	460b      	mov	r3, r1
 8003940:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
=======
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	460b      	mov	r3, r1
 8003788:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027f0:	887a      	ldrh	r2, [r7, #2]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4013      	ands	r3, r2
 80027f6:	041a      	lsls	r2, r3, #16
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	43d9      	mvns	r1, r3
 80027fc:	887b      	ldrh	r3, [r7, #2]
 80027fe:	400b      	ands	r3, r1
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	619a      	str	r2, [r3, #24]
}
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <HAL_GPIO_EXTI_IRQHandler>:
=======
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003948:	887a      	ldrh	r2, [r7, #2]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4013      	ands	r3, r2
 800394e:	041a      	lsls	r2, r3, #16
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	43d9      	mvns	r1, r3
 8003954:	887b      	ldrh	r3, [r7, #2]
 8003956:	400b      	ands	r3, r1
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	619a      	str	r2, [r3, #24]
}
 800395e:	bf00      	nop
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> Stashed changes
=======
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003790:	887a      	ldrh	r2, [r7, #2]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4013      	ands	r3, r2
 8003796:	041a      	lsls	r2, r3, #16
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	43d9      	mvns	r1, r3
 800379c:	887b      	ldrh	r3, [r7, #2]
 800379e:	400b      	ands	r3, r1
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	619a      	str	r2, [r3, #24]
}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fc7e 	bl	8001134 <HAL_GPIO_EXTI_Callback>
  }
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40013c00 	.word	0x40013c00

08002844 <HAL_RCC_OscConfig>:
=======
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003976:	4b08      	ldr	r3, [pc, #32]	; (8003998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d006      	beq.n	8003990 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003982:	4a05      	ldr	r2, [pc, #20]	; (8003998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003984:	88fb      	ldrh	r3, [r7, #6]
 8003986:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd fee0 	bl	8001750 <HAL_GPIO_EXTI_Callback>
  }
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40013c00 	.word	0x40013c00

0800399c <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
=======
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d006      	beq.n	80037d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037ca:	4a05      	ldr	r2, [pc, #20]	; (80037e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037d0:	88fb      	ldrh	r3, [r7, #6]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fd ffbc 	bl	8001750 <HAL_GPIO_EXTI_Callback>
  }
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40013c00 	.word	0x40013c00

080037e4 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800284c:	2300      	movs	r3, #0
 800284e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e29b      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
=======
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039a4:	2300      	movs	r3, #0
 80039a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e29b      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
>>>>>>> Stashed changes
=======
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037ec:	2300      	movs	r3, #0
 80037ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e29b      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8087 	beq.w	8002976 <HAL_RCC_OscConfig+0x132>
=======
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 8087 	beq.w	8003ace <HAL_RCC_OscConfig+0x132>
>>>>>>> Stashed changes
=======
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 8087 	beq.w	8003916 <HAL_RCC_OscConfig+0x132>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002868:	4b96      	ldr	r3, [pc, #600]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b04      	cmp	r3, #4
 8002872:	d00c      	beq.n	800288e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002874:	4b93      	ldr	r3, [pc, #588]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b08      	cmp	r3, #8
 800287e:	d112      	bne.n	80028a6 <HAL_RCC_OscConfig+0x62>
 8002880:	4b90      	ldr	r3, [pc, #576]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800288c:	d10b      	bne.n	80028a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288e:	4b8d      	ldr	r3, [pc, #564]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d06c      	beq.n	8002974 <HAL_RCC_OscConfig+0x130>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d168      	bne.n	8002974 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e275      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
=======
 80039c0:	4b96      	ldr	r3, [pc, #600]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 030c 	and.w	r3, r3, #12
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d00c      	beq.n	80039e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039cc:	4b93      	ldr	r3, [pc, #588]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 030c 	and.w	r3, r3, #12
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d112      	bne.n	80039fe <HAL_RCC_OscConfig+0x62>
 80039d8:	4b90      	ldr	r3, [pc, #576]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e4:	d10b      	bne.n	80039fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e6:	4b8d      	ldr	r3, [pc, #564]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d06c      	beq.n	8003acc <HAL_RCC_OscConfig+0x130>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d168      	bne.n	8003acc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e275      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
>>>>>>> Stashed changes
=======
 8003808:	4b96      	ldr	r3, [pc, #600]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 030c 	and.w	r3, r3, #12
 8003810:	2b04      	cmp	r3, #4
 8003812:	d00c      	beq.n	800382e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003814:	4b93      	ldr	r3, [pc, #588]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b08      	cmp	r3, #8
 800381e:	d112      	bne.n	8003846 <HAL_RCC_OscConfig+0x62>
 8003820:	4b90      	ldr	r3, [pc, #576]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003828:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800382c:	d10b      	bne.n	8003846 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382e:	4b8d      	ldr	r3, [pc, #564]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d06c      	beq.n	8003914 <HAL_RCC_OscConfig+0x130>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d168      	bne.n	8003914 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e275      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ae:	d106      	bne.n	80028be <HAL_RCC_OscConfig+0x7a>
 80028b0:	4b84      	ldr	r3, [pc, #528]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a83      	ldr	r2, [pc, #524]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	e02e      	b.n	800291c <HAL_RCC_OscConfig+0xd8>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x9c>
 80028c6:	4b7f      	ldr	r3, [pc, #508]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a7e      	ldr	r2, [pc, #504]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 80028cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b7c      	ldr	r3, [pc, #496]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a7b      	ldr	r2, [pc, #492]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 80028d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e01d      	b.n	800291c <HAL_RCC_OscConfig+0xd8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0xc0>
 80028ea:	4b76      	ldr	r3, [pc, #472]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a75      	ldr	r2, [pc, #468]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 80028f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	4b73      	ldr	r3, [pc, #460]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a72      	ldr	r2, [pc, #456]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0xd8>
 8002904:	4b6f      	ldr	r3, [pc, #444]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a6e      	ldr	r2, [pc, #440]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 800290a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b6c      	ldr	r3, [pc, #432]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a6b      	ldr	r2, [pc, #428]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d013      	beq.n	800294c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7ff f92e 	bl	8001b84 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800292c:	f7ff f92a 	bl	8001b84 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e229      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	4b61      	ldr	r3, [pc, #388]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0xe8>
 800294a:	e014      	b.n	8002976 <HAL_RCC_OscConfig+0x132>
=======
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x7a>
 8003a08:	4b84      	ldr	r3, [pc, #528]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a83      	ldr	r2, [pc, #524]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	e02e      	b.n	8003a74 <HAL_RCC_OscConfig+0xd8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x9c>
 8003a1e:	4b7f      	ldr	r3, [pc, #508]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a7e      	ldr	r2, [pc, #504]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b7c      	ldr	r3, [pc, #496]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a7b      	ldr	r2, [pc, #492]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e01d      	b.n	8003a74 <HAL_RCC_OscConfig+0xd8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCC_OscConfig+0xc0>
 8003a42:	4b76      	ldr	r3, [pc, #472]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a75      	ldr	r2, [pc, #468]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	4b73      	ldr	r3, [pc, #460]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a72      	ldr	r2, [pc, #456]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e00b      	b.n	8003a74 <HAL_RCC_OscConfig+0xd8>
 8003a5c:	4b6f      	ldr	r3, [pc, #444]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a6e      	ldr	r2, [pc, #440]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	4b6c      	ldr	r3, [pc, #432]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a6b      	ldr	r2, [pc, #428]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d013      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fe44 	bl	8002708 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a84:	f7fe fe40 	bl	8002708 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	; 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e229      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	4b61      	ldr	r3, [pc, #388]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0xe8>
 8003aa2:	e014      	b.n	8003ace <HAL_RCC_OscConfig+0x132>
>>>>>>> Stashed changes
=======
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384e:	d106      	bne.n	800385e <HAL_RCC_OscConfig+0x7a>
 8003850:	4b84      	ldr	r3, [pc, #528]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a83      	ldr	r2, [pc, #524]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	e02e      	b.n	80038bc <HAL_RCC_OscConfig+0xd8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0x9c>
 8003866:	4b7f      	ldr	r3, [pc, #508]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a7e      	ldr	r2, [pc, #504]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 800386c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b7c      	ldr	r3, [pc, #496]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a7b      	ldr	r2, [pc, #492]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e01d      	b.n	80038bc <HAL_RCC_OscConfig+0xd8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0xc0>
 800388a:	4b76      	ldr	r3, [pc, #472]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a75      	ldr	r2, [pc, #468]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b73      	ldr	r3, [pc, #460]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a72      	ldr	r2, [pc, #456]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0xd8>
 80038a4:	4b6f      	ldr	r3, [pc, #444]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a6e      	ldr	r2, [pc, #440]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80038aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b6c      	ldr	r3, [pc, #432]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a6b      	ldr	r2, [pc, #428]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80038b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d013      	beq.n	80038ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fe fe44 	bl	8002550 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038cc:	f7fe fe40 	bl	8002550 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	; 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e229      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b61      	ldr	r3, [pc, #388]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0xe8>
 80038ea:	e014      	b.n	8003916 <HAL_RCC_OscConfig+0x132>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800294c:	f7ff f91a 	bl	8001b84 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002954:	f7ff f916 	bl	8001b84 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e215      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	4b57      	ldr	r3, [pc, #348]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x110>
 8002972:	e000      	b.n	8002976 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002974:	bf00      	nop
=======
 8003aa4:	f7fe fe30 	bl	8002708 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aac:	f7fe fe2c 	bl	8002708 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	; 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e215      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abe:	4b57      	ldr	r3, [pc, #348]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x110>
 8003aca:	e000      	b.n	8003ace <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003acc:	bf00      	nop
>>>>>>> Stashed changes
=======
 80038ec:	f7fe fe30 	bl	8002550 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fe fe2c 	bl	8002550 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e215      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	4b57      	ldr	r3, [pc, #348]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x110>
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d069      	beq.n	8002a56 <HAL_RCC_OscConfig+0x212>
=======
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d069      	beq.n	8003bae <HAL_RCC_OscConfig+0x212>
>>>>>>> Stashed changes
=======
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d069      	beq.n	80039f6 <HAL_RCC_OscConfig+0x212>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002982:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298e:	4b4d      	ldr	r3, [pc, #308]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b08      	cmp	r3, #8
 8002998:	d11c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x190>
 800299a:	4b4a      	ldr	r3, [pc, #296]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d116      	bne.n	80029d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a6:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_RCC_OscConfig+0x17a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d001      	beq.n	80029be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e1e9      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
=======
 8003ada:	4b50      	ldr	r3, [pc, #320]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae6:	4b4d      	ldr	r3, [pc, #308]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d11c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x190>
 8003af2:	4b4a      	ldr	r3, [pc, #296]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d116      	bne.n	8003b2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afe:	4b47      	ldr	r3, [pc, #284]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_RCC_OscConfig+0x17a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d001      	beq.n	8003b16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e1e9      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
>>>>>>> Stashed changes
=======
 8003922:	4b50      	ldr	r3, [pc, #320]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392e:	4b4d      	ldr	r3, [pc, #308]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b08      	cmp	r3, #8
 8003938:	d11c      	bne.n	8003974 <HAL_RCC_OscConfig+0x190>
 800393a:	4b4a      	ldr	r3, [pc, #296]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d116      	bne.n	8003974 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003946:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x17a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e1e9      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80029be:	4b41      	ldr	r3, [pc, #260]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	493d      	ldr	r1, [pc, #244]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	e040      	b.n	8002a56 <HAL_RCC_OscConfig+0x212>
=======
 8003b16:	4b41      	ldr	r3, [pc, #260]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	493d      	ldr	r1, [pc, #244]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2a:	e040      	b.n	8003bae <HAL_RCC_OscConfig+0x212>
>>>>>>> Stashed changes
=======
 800395e:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	493d      	ldr	r1, [pc, #244]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	e040      	b.n	80039f6 <HAL_RCC_OscConfig+0x212>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d023      	beq.n	8002a24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029dc:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a38      	ldr	r2, [pc, #224]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7ff f8cc 	bl	8001b84 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f0:	f7ff f8c8 	bl	8001b84 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1c7      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a02:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x1ac>
=======
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d023      	beq.n	8003b7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b34:	4b39      	ldr	r3, [pc, #228]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a38      	ldr	r2, [pc, #224]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fe fde2 	bl	8002708 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b48:	f7fe fdde 	bl	8002708 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e1c7      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x1ac>
>>>>>>> Stashed changes
=======
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d023      	beq.n	80039c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397c:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a38      	ldr	r2, [pc, #224]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe fde2 	bl	8002550 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003990:	f7fe fdde 	bl	8002550 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e1c7      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a2:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x1ac>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002a0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4929      	ldr	r1, [pc, #164]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]
 8002a22:	e018      	b.n	8002a56 <HAL_RCC_OscConfig+0x212>
=======
 8003b66:	4b2d      	ldr	r3, [pc, #180]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4929      	ldr	r1, [pc, #164]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]
 8003b7a:	e018      	b.n	8003bae <HAL_RCC_OscConfig+0x212>
>>>>>>> Stashed changes
=======
 80039ae:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4929      	ldr	r1, [pc, #164]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]
 80039c2:	e018      	b.n	80039f6 <HAL_RCC_OscConfig+0x212>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002a24:	4b27      	ldr	r3, [pc, #156]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a26      	ldr	r2, [pc, #152]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7ff f8a8 	bl	8001b84 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a38:	f7ff f8a4 	bl	8001b84 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e1a3      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x1f4>
=======
 8003b7c:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a26      	ldr	r2, [pc, #152]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fe fdbe 	bl	8002708 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b90:	f7fe fdba 	bl	8002708 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e1a3      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba2:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x1f4>
>>>>>>> Stashed changes
=======
 80039c4:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a26      	ldr	r2, [pc, #152]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fe fdbe 	bl	8002550 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d8:	f7fe fdba 	bl	8002550 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e1a3      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ea:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x1f4>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d038      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x290>
=======
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d038      	beq.n	8003c2c <HAL_RCC_OscConfig+0x290>
>>>>>>> Stashed changes
=======
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d038      	beq.n	8003a74 <HAL_RCC_OscConfig+0x290>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d019      	beq.n	8002a9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6a:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6e:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a76:	f7ff f885 	bl	8001b84 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7e:	f7ff f881 	bl	8001b84 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e180      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x23a>
 8002a9c:	e01a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x290>
=======
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d019      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc2:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc6:	4a15      	ldr	r2, [pc, #84]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bce:	f7fe fd9b 	bl	8002708 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7fe fd97 	bl	8002708 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e180      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x23a>
 8003bf4:	e01a      	b.n	8003c2c <HAL_RCC_OscConfig+0x290>
>>>>>>> Stashed changes
=======
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d019      	beq.n	8003a3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a0a:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0e:	4a15      	ldr	r2, [pc, #84]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a16:	f7fe fd9b 	bl	8002550 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7fe fd97 	bl	8002550 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e180      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x23a>
 8003a3c:	e01a      	b.n	8003a74 <HAL_RCC_OscConfig+0x290>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	4a08      	ldr	r2, [pc, #32]	; (8002ac4 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7ff f86b 	bl	8001b84 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab2:	f7ff f867 	bl	8001b84 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d903      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e166      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
 8002ac4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac8:	4b92      	ldr	r3, [pc, #584]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ee      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x26e>
=======
 8003bf6:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfa:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c02:	f7fe fd81 	bl	8002708 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c08:	e00a      	b.n	8003c20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0a:	f7fe fd7d 	bl	8002708 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d903      	bls.n	8003c20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e166      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
 8003c1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c20:	4b92      	ldr	r3, [pc, #584]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1ee      	bne.n	8003c0a <HAL_RCC_OscConfig+0x26e>
>>>>>>> Stashed changes
=======
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a42:	4a08      	ldr	r2, [pc, #32]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4a:	f7fe fd81 	bl	8002550 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a52:	f7fe fd7d 	bl	8002550 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d903      	bls.n	8003a68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e166      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
 8003a64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a68:	4b92      	ldr	r3, [pc, #584]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ee      	bne.n	8003a52 <HAL_RCC_OscConfig+0x26e>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80a4 	beq.w	8002c2a <HAL_RCC_OscConfig+0x3e6>
=======
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80a4 	beq.w	8003d82 <HAL_RCC_OscConfig+0x3e6>
>>>>>>> Stashed changes
=======
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80a4 	beq.w	8003bca <HAL_RCC_OscConfig+0x3e6>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002ae2:	4b8c      	ldr	r3, [pc, #560]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10d      	bne.n	8002b0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	4b89      	ldr	r3, [pc, #548]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	4a88      	ldr	r2, [pc, #544]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af8:	6413      	str	r3, [r2, #64]	; 0x40
 8002afa:	4b86      	ldr	r3, [pc, #536]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b06:	2301      	movs	r3, #1
 8002b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b0a:	4b83      	ldr	r3, [pc, #524]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d118      	bne.n	8002b48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b16:	4b80      	ldr	r3, [pc, #512]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a7f      	ldr	r2, [pc, #508]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b22:	f7ff f82f 	bl	8001b84 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2a:	f7ff f82b 	bl	8001b84 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b64      	cmp	r3, #100	; 0x64
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e12a      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b3c:	4b76      	ldr	r3, [pc, #472]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x2e6>
=======
 8003c3a:	4b8c      	ldr	r3, [pc, #560]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10d      	bne.n	8003c62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c46:	4b89      	ldr	r3, [pc, #548]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	4a88      	ldr	r2, [pc, #544]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6413      	str	r3, [r2, #64]	; 0x40
 8003c52:	4b86      	ldr	r3, [pc, #536]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c62:	4b83      	ldr	r3, [pc, #524]	; (8003e70 <HAL_RCC_OscConfig+0x4d4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d118      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c6e:	4b80      	ldr	r3, [pc, #512]	; (8003e70 <HAL_RCC_OscConfig+0x4d4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a7f      	ldr	r2, [pc, #508]	; (8003e70 <HAL_RCC_OscConfig+0x4d4>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c7a:	f7fe fd45 	bl	8002708 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c82:	f7fe fd41 	bl	8002708 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b64      	cmp	r3, #100	; 0x64
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e12a      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c94:	4b76      	ldr	r3, [pc, #472]	; (8003e70 <HAL_RCC_OscConfig+0x4d4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x2e6>
>>>>>>> Stashed changes
=======
 8003a82:	4b8c      	ldr	r3, [pc, #560]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10d      	bne.n	8003aaa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8e:	4b89      	ldr	r3, [pc, #548]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	4a88      	ldr	r2, [pc, #544]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a98:	6413      	str	r3, [r2, #64]	; 0x40
 8003a9a:	4b86      	ldr	r3, [pc, #536]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	60bb      	str	r3, [r7, #8]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aaa:	4b83      	ldr	r3, [pc, #524]	; (8003cb8 <HAL_RCC_OscConfig+0x4d4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d118      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ab6:	4b80      	ldr	r3, [pc, #512]	; (8003cb8 <HAL_RCC_OscConfig+0x4d4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a7f      	ldr	r2, [pc, #508]	; (8003cb8 <HAL_RCC_OscConfig+0x4d4>)
 8003abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac2:	f7fe fd45 	bl	8002550 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aca:	f7fe fd41 	bl	8002550 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b64      	cmp	r3, #100	; 0x64
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e12a      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003adc:	4b76      	ldr	r3, [pc, #472]	; (8003cb8 <HAL_RCC_OscConfig+0x4d4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0x2e6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x31a>
 8002b50:	4b70      	ldr	r3, [pc, #448]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a6f      	ldr	r2, [pc, #444]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	e02d      	b.n	8002bba <HAL_RCC_OscConfig+0x376>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x33c>
 8002b66:	4b6b      	ldr	r3, [pc, #428]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a6a      	ldr	r2, [pc, #424]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	4b68      	ldr	r3, [pc, #416]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	4a67      	ldr	r2, [pc, #412]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002b78:	f023 0304 	bic.w	r3, r3, #4
 8002b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7e:	e01c      	b.n	8002bba <HAL_RCC_OscConfig+0x376>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b05      	cmp	r3, #5
 8002b86:	d10c      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x35e>
 8002b88:	4b62      	ldr	r3, [pc, #392]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	4a61      	ldr	r2, [pc, #388]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	6713      	str	r3, [r2, #112]	; 0x70
 8002b94:	4b5f      	ldr	r3, [pc, #380]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	4a5e      	ldr	r2, [pc, #376]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba0:	e00b      	b.n	8002bba <HAL_RCC_OscConfig+0x376>
 8002ba2:	4b5c      	ldr	r3, [pc, #368]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	4a5b      	ldr	r2, [pc, #364]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002ba8:	f023 0301 	bic.w	r3, r3, #1
 8002bac:	6713      	str	r3, [r2, #112]	; 0x70
 8002bae:	4b59      	ldr	r3, [pc, #356]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	4a58      	ldr	r2, [pc, #352]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002bb4:	f023 0304 	bic.w	r3, r3, #4
 8002bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d015      	beq.n	8002bee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc2:	f7fe ffdf 	bl	8001b84 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bca:	f7fe ffdb 	bl	8001b84 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e0d8      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be0:	4b4c      	ldr	r3, [pc, #304]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0ee      	beq.n	8002bca <HAL_RCC_OscConfig+0x386>
 8002bec:	e014      	b.n	8002c18 <HAL_RCC_OscConfig+0x3d4>
=======
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x31a>
 8003ca8:	4b70      	ldr	r3, [pc, #448]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a6f      	ldr	r2, [pc, #444]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb4:	e02d      	b.n	8003d12 <HAL_RCC_OscConfig+0x376>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x33c>
 8003cbe:	4b6b      	ldr	r3, [pc, #428]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	4a6a      	ldr	r2, [pc, #424]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cca:	4b68      	ldr	r3, [pc, #416]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	4a67      	ldr	r2, [pc, #412]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003cd0:	f023 0304 	bic.w	r3, r3, #4
 8003cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd6:	e01c      	b.n	8003d12 <HAL_RCC_OscConfig+0x376>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b05      	cmp	r3, #5
 8003cde:	d10c      	bne.n	8003cfa <HAL_RCC_OscConfig+0x35e>
 8003ce0:	4b62      	ldr	r3, [pc, #392]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	4a61      	ldr	r2, [pc, #388]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003ce6:	f043 0304 	orr.w	r3, r3, #4
 8003cea:	6713      	str	r3, [r2, #112]	; 0x70
 8003cec:	4b5f      	ldr	r3, [pc, #380]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	4a5e      	ldr	r2, [pc, #376]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf8:	e00b      	b.n	8003d12 <HAL_RCC_OscConfig+0x376>
 8003cfa:	4b5c      	ldr	r3, [pc, #368]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	4a5b      	ldr	r2, [pc, #364]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	6713      	str	r3, [r2, #112]	; 0x70
 8003d06:	4b59      	ldr	r3, [pc, #356]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	4a58      	ldr	r2, [pc, #352]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003d0c:	f023 0304 	bic.w	r3, r3, #4
 8003d10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d015      	beq.n	8003d46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1a:	f7fe fcf5 	bl	8002708 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d20:	e00a      	b.n	8003d38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d22:	f7fe fcf1 	bl	8002708 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e0d8      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d38:	4b4c      	ldr	r3, [pc, #304]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0ee      	beq.n	8003d22 <HAL_RCC_OscConfig+0x386>
 8003d44:	e014      	b.n	8003d70 <HAL_RCC_OscConfig+0x3d4>
>>>>>>> Stashed changes
=======
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d106      	bne.n	8003afe <HAL_RCC_OscConfig+0x31a>
 8003af0:	4b70      	ldr	r3, [pc, #448]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	4a6f      	ldr	r2, [pc, #444]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6713      	str	r3, [r2, #112]	; 0x70
 8003afc:	e02d      	b.n	8003b5a <HAL_RCC_OscConfig+0x376>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x33c>
 8003b06:	4b6b      	ldr	r3, [pc, #428]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	4a6a      	ldr	r2, [pc, #424]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	6713      	str	r3, [r2, #112]	; 0x70
 8003b12:	4b68      	ldr	r3, [pc, #416]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4a67      	ldr	r2, [pc, #412]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b18:	f023 0304 	bic.w	r3, r3, #4
 8003b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1e:	e01c      	b.n	8003b5a <HAL_RCC_OscConfig+0x376>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d10c      	bne.n	8003b42 <HAL_RCC_OscConfig+0x35e>
 8003b28:	4b62      	ldr	r3, [pc, #392]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2c:	4a61      	ldr	r2, [pc, #388]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b2e:	f043 0304 	orr.w	r3, r3, #4
 8003b32:	6713      	str	r3, [r2, #112]	; 0x70
 8003b34:	4b5f      	ldr	r3, [pc, #380]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	4a5e      	ldr	r2, [pc, #376]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b40:	e00b      	b.n	8003b5a <HAL_RCC_OscConfig+0x376>
 8003b42:	4b5c      	ldr	r3, [pc, #368]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	4a5b      	ldr	r2, [pc, #364]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4e:	4b59      	ldr	r3, [pc, #356]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	4a58      	ldr	r2, [pc, #352]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b54:	f023 0304 	bic.w	r3, r3, #4
 8003b58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d015      	beq.n	8003b8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b62:	f7fe fcf5 	bl	8002550 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b68:	e00a      	b.n	8003b80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6a:	f7fe fcf1 	bl	8002550 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e0d8      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b80:	4b4c      	ldr	r3, [pc, #304]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0ee      	beq.n	8003b6a <HAL_RCC_OscConfig+0x386>
 8003b8c:	e014      	b.n	8003bb8 <HAL_RCC_OscConfig+0x3d4>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002bee:	f7fe ffc9 	bl	8001b84 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe ffc5 	bl	8001b84 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e0c2      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0c:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1ee      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x3b2>
=======
 8003d46:	f7fe fcdf 	bl	8002708 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4c:	e00a      	b.n	8003d64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4e:	f7fe fcdb 	bl	8002708 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e0c2      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d64:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1ee      	bne.n	8003d4e <HAL_RCC_OscConfig+0x3b2>
>>>>>>> Stashed changes
=======
 8003b8e:	f7fe fcdf 	bl	8002550 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b94:	e00a      	b.n	8003bac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b96:	f7fe fcdb 	bl	8002550 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e0c2      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bac:	4b41      	ldr	r3, [pc, #260]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1ee      	bne.n	8003b96 <HAL_RCC_OscConfig+0x3b2>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d105      	bne.n	8002c2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1e:	4b3d      	ldr	r3, [pc, #244]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4a3c      	ldr	r2, [pc, #240]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c28:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d105      	bne.n	8003d82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d76:	4b3d      	ldr	r3, [pc, #244]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	4a3c      	ldr	r2, [pc, #240]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d80:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> Stashed changes
=======
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d105      	bne.n	8003bca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbe:	4b3d      	ldr	r3, [pc, #244]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	4a3c      	ldr	r2, [pc, #240]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> Stashed changes
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 80ae 	beq.w	8002d90 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c34:	4b37      	ldr	r3, [pc, #220]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d06d      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d14b      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x49c>
=======
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80ae 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d8c:	4b37      	ldr	r3, [pc, #220]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 030c 	and.w	r3, r3, #12
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d06d      	beq.n	8003e74 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d14b      	bne.n	8003e38 <HAL_RCC_OscConfig+0x49c>
>>>>>>> Stashed changes
=======
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80ae 	beq.w	8003d30 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bd4:	4b37      	ldr	r3, [pc, #220]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d06d      	beq.n	8003cbc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d14b      	bne.n	8003c80 <HAL_RCC_OscConfig+0x49c>
>>>>>>> Stashed changes
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002c48:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a31      	ldr	r2, [pc, #196]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe ff96 	bl	8001b84 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe ff92 	bl	8001b84 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e091      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6e:	4b29      	ldr	r3, [pc, #164]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x418>
=======
 8003da0:	4b32      	ldr	r3, [pc, #200]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a31      	ldr	r2, [pc, #196]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fe fcac 	bl	8002708 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fe fca8 	bl	8002708 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e091      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc6:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x418>
>>>>>>> Stashed changes
=======
 8003be8:	4b32      	ldr	r3, [pc, #200]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a31      	ldr	r2, [pc, #196]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fe fcac 	bl	8002550 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfc:	f7fe fca8 	bl	8002550 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e091      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0e:	4b29      	ldr	r3, [pc, #164]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x418>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69da      	ldr	r2, [r3, #28]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	019b      	lsls	r3, r3, #6
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	085b      	lsrs	r3, r3, #1
 8002c92:	3b01      	subs	r3, #1
 8002c94:	041b      	lsls	r3, r3, #16
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	061b      	lsls	r3, r3, #24
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	071b      	lsls	r3, r3, #28
 8002ca6:	491b      	ldr	r1, [pc, #108]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
=======
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	019b      	lsls	r3, r3, #6
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	085b      	lsrs	r3, r3, #1
 8003dea:	3b01      	subs	r3, #1
 8003dec:	041b      	lsls	r3, r3, #16
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	061b      	lsls	r3, r3, #24
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	071b      	lsls	r3, r3, #28
 8003dfe:	491b      	ldr	r1, [pc, #108]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
=======
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	019b      	lsls	r3, r3, #6
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	085b      	lsrs	r3, r3, #1
 8003c32:	3b01      	subs	r3, #1
 8003c34:	041b      	lsls	r3, r3, #16
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	061b      	lsls	r3, r3, #24
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	071b      	lsls	r3, r3, #28
 8003c46:	491b      	ldr	r1, [pc, #108]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a18      	ldr	r2, [pc, #96]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe ff64 	bl	8001b84 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fe ff60 	bl	8001b84 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e05f      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x47c>
 8002cde:	e057      	b.n	8002d90 <HAL_RCC_OscConfig+0x54c>
=======
 8003e04:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e10:	f7fe fc7a 	bl	8002708 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e18:	f7fe fc76 	bl	8002708 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e05f      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e2a:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x47c>
 8003e36:	e057      	b.n	8003ee8 <HAL_RCC_OscConfig+0x54c>
>>>>>>> Stashed changes
=======
 8003c4c:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a18      	ldr	r2, [pc, #96]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe fc7a 	bl	8002550 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c60:	f7fe fc76 	bl	8002550 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e05f      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c72:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0x47c>
 8003c7e:	e057      	b.n	8003d30 <HAL_RCC_OscConfig+0x54c>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe ff4a 	bl	8001b84 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe ff46 	bl	8001b84 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e045      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <HAL_RCC_OscConfig+0x4d0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x4b0>
 8002d12:	e03d      	b.n	8002d90 <HAL_RCC_OscConfig+0x54c>
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40007000 	.word	0x40007000
=======
 8003e38:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fe fc60 	bl	8002708 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fe fc5c 	bl	8002708 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e045      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5e:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <HAL_RCC_OscConfig+0x4d0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x4b0>
 8003e6a:	e03d      	b.n	8003ee8 <HAL_RCC_OscConfig+0x54c>
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40007000 	.word	0x40007000
>>>>>>> Stashed changes
=======
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a0b      	ldr	r2, [pc, #44]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fe fc60 	bl	8002550 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c94:	f7fe fc5c 	bl	8002550 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e045      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca6:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4b0>
 8003cb2:	e03d      	b.n	8003d30 <HAL_RCC_OscConfig+0x54c>
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40007000 	.word	0x40007000
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002d1c:	4b1f      	ldr	r3, [pc, #124]	; (8002d9c <HAL_RCC_OscConfig+0x558>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d030      	beq.n	8002d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d129      	bne.n	8002d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d122      	bne.n	8002d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d119      	bne.n	8002d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	085b      	lsrs	r3, r3, #1
 8002d64:	3b01      	subs	r3, #1
 8002d66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d10f      	bne.n	8002d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_OscConfig+0x54c>
=======
 8003e74:	4b1f      	ldr	r3, [pc, #124]	; (8003ef4 <HAL_RCC_OscConfig+0x558>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d030      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d129      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d122      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eaa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d119      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d10f      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d107      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x54c>
>>>>>>> Stashed changes
=======
 8003cbc:	4b1f      	ldr	r3, [pc, #124]	; (8003d3c <HAL_RCC_OscConfig+0x558>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d030      	beq.n	8003d2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d129      	bne.n	8003d2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d122      	bne.n	8003d2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cec:	4013      	ands	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cf2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d119      	bne.n	8003d2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	3b01      	subs	r3, #1
 8003d06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d10f      	bne.n	8003d2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d107      	bne.n	8003d2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_OscConfig+0x54c>
>>>>>>> Stashed changes
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x54e>
=======
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x54e>
>>>>>>> Stashed changes
=======
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800

08002da0 <HAL_RCC_ClockConfig>:
=======
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800

08003ef8 <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
=======
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800

08003d40 <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0d0      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ba>
=======
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0d0      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
=======
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0d0      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002db8:	4b6a      	ldr	r3, [pc, #424]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d910      	bls.n	8002de8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b67      	ldr	r3, [pc, #412]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 020f 	bic.w	r2, r3, #15
 8002dce:	4965      	ldr	r1, [pc, #404]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
=======
 8003f10:	4b6a      	ldr	r3, [pc, #424]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d910      	bls.n	8003f40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b67      	ldr	r3, [pc, #412]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 020f 	bic.w	r2, r3, #15
 8003f26:	4965      	ldr	r1, [pc, #404]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes
=======
 8003d58:	4b6a      	ldr	r3, [pc, #424]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d910      	bls.n	8003d88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	4b67      	ldr	r3, [pc, #412]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 020f 	bic.w	r2, r3, #15
 8003d6e:	4965      	ldr	r1, [pc, #404]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002dd6:	4b63      	ldr	r3, [pc, #396]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0b8      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ba>
=======
 8003f2e:	4b63      	ldr	r3, [pc, #396]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0b8      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
=======
 8003d76:	4b63      	ldr	r3, [pc, #396]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0b8      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x96>
=======
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d020      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x96>
>>>>>>> Stashed changes
=======
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d020      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x96>
>>>>>>> Stashed changes
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e00:	4b59      	ldr	r3, [pc, #356]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	4a58      	ldr	r2, [pc, #352]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e18:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a52      	ldr	r2, [pc, #328]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e22:	6093      	str	r3, [r2, #8]
=======
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f58:	4b59      	ldr	r3, [pc, #356]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4a58      	ldr	r2, [pc, #352]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f70:	4b53      	ldr	r3, [pc, #332]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a52      	ldr	r2, [pc, #328]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f7a:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
=======
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da0:	4b59      	ldr	r3, [pc, #356]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a58      	ldr	r2, [pc, #352]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003da6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003daa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db8:	4b53      	ldr	r3, [pc, #332]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	4a52      	ldr	r2, [pc, #328]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dc2:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002e24:	4b50      	ldr	r3, [pc, #320]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	494d      	ldr	r1, [pc, #308]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
=======
 8003f7c:	4b50      	ldr	r3, [pc, #320]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	494d      	ldr	r1, [pc, #308]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
=======
 8003dc4:	4b50      	ldr	r3, [pc, #320]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	494d      	ldr	r1, [pc, #308]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d040      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x124>
=======
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d040      	beq.n	800401c <HAL_RCC_ClockConfig+0x124>
>>>>>>> Stashed changes
=======
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d040      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x124>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d115      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e07f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ba>
=======
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d107      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	4b47      	ldr	r3, [pc, #284]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d115      	bne.n	8003fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e07f      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
=======
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d115      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e07f      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e62:	4b41      	ldr	r3, [pc, #260]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e073      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ba>
=======
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fba:	4b41      	ldr	r3, [pc, #260]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e073      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
=======
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d107      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e02:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e073      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002e72:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e06b      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ba>
=======
 8003fca:	4b3d      	ldr	r3, [pc, #244]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e06b      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
=======
 8003e12:	4b3d      	ldr	r3, [pc, #244]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06b      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002e82:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f023 0203 	bic.w	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4936      	ldr	r1, [pc, #216]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e94:	f7fe fe76 	bl	8001b84 <HAL_GetTick>
 8002e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9a:	e00a      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e9c:	f7fe fe72 	bl	8001b84 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e053      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb2:	4b2d      	ldr	r3, [pc, #180]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 020c 	and.w	r2, r3, #12
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d1eb      	bne.n	8002e9c <HAL_RCC_ClockConfig+0xfc>
=======
 8003fda:	4b39      	ldr	r3, [pc, #228]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4936      	ldr	r1, [pc, #216]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fec:	f7fe fb8c 	bl	8002708 <HAL_GetTick>
 8003ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff4:	f7fe fb88 	bl	8002708 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e053      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400a:	4b2d      	ldr	r3, [pc, #180]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 020c 	and.w	r2, r3, #12
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	429a      	cmp	r2, r3
 800401a:	d1eb      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0xfc>
>>>>>>> Stashed changes
=======
 8003e22:	4b39      	ldr	r3, [pc, #228]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f023 0203 	bic.w	r2, r3, #3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4936      	ldr	r1, [pc, #216]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e34:	f7fe fb8c 	bl	8002550 <HAL_GetTick>
 8003e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3c:	f7fe fb88 	bl	8002550 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e053      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e52:	4b2d      	ldr	r3, [pc, #180]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 020c 	and.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d1eb      	bne.n	8003e3c <HAL_RCC_ClockConfig+0xfc>
>>>>>>> Stashed changes
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002ec4:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d210      	bcs.n	8002ef4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 020f 	bic.w	r2, r3, #15
 8002eda:	4922      	ldr	r1, [pc, #136]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
=======
 800401c:	4b27      	ldr	r3, [pc, #156]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d210      	bcs.n	800404c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b24      	ldr	r3, [pc, #144]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 020f 	bic.w	r2, r3, #15
 8004032:	4922      	ldr	r1, [pc, #136]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes
=======
 8003e64:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d210      	bcs.n	8003e94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 020f 	bic.w	r2, r3, #15
 8003e7a:	4922      	ldr	r1, [pc, #136]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002ee2:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e032      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ba>
=======
 800403a:	4b20      	ldr	r3, [pc, #128]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e032      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
=======
 8003e82:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e032      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4916      	ldr	r1, [pc, #88]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
=======
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4916      	ldr	r1, [pc, #88]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004066:	4313      	orrs	r3, r2
 8004068:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
=======
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4916      	ldr	r1, [pc, #88]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f1e:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	490e      	ldr	r1, [pc, #56]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
=======
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	490e      	ldr	r1, [pc, #56]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
=======
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	490e      	ldr	r1, [pc, #56]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002f32:	f000 f821 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8002f36:	4602      	mov	r2, r0
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	490a      	ldr	r1, [pc, #40]	; (8002f6c <HAL_RCC_ClockConfig+0x1cc>)
 8002f44:	5ccb      	ldrb	r3, [r1, r3]
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <HAL_RCC_ClockConfig+0x1d0>)
 8002f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_RCC_ClockConfig+0x1d4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe fdd2 	bl	8001afc <HAL_InitTick>

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40023c00 	.word	0x40023c00
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	080093b4 	.word	0x080093b4
 8002f70:	20000004 	.word	0x20000004
 8002f74:	20000008 	.word	0x20000008

08002f78 <HAL_RCC_GetSysClockFreq>:
=======
 800408a:	f000 f821 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 800408e:	4602      	mov	r2, r0
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	490a      	ldr	r1, [pc, #40]	; (80040c4 <HAL_RCC_ClockConfig+0x1cc>)
 800409c:	5ccb      	ldrb	r3, [r1, r3]
 800409e:	fa22 f303 	lsr.w	r3, r2, r3
 80040a2:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <HAL_RCC_ClockConfig+0x1d0>)
 80040a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_RCC_ClockConfig+0x1d4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe fae8 	bl	8002680 <HAL_InitTick>

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023c00 	.word	0x40023c00
 80040c0:	40023800 	.word	0x40023800
 80040c4:	0800c0b8 	.word	0x0800c0b8
 80040c8:	20000004 	.word	0x20000004
 80040cc:	20000008 	.word	0x20000008

080040d0 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
=======
 8003ed2:	f000 f821 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	490a      	ldr	r1, [pc, #40]	; (8003f0c <HAL_RCC_ClockConfig+0x1cc>)
 8003ee4:	5ccb      	ldrb	r3, [r1, r3]
 8003ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eea:	4a09      	ldr	r2, [pc, #36]	; (8003f10 <HAL_RCC_ClockConfig+0x1d0>)
 8003eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eee:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <HAL_RCC_ClockConfig+0x1d4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fae8 	bl	80024c8 <HAL_InitTick>

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40023c00 	.word	0x40023c00
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	0800be7c 	.word	0x0800be7c
 8003f10:	20000004 	.word	0x20000004
 8003f14:	20000008 	.word	0x20000008

08003f18 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f7c:	b094      	sub	sp, #80	; 0x50
 8002f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	647b      	str	r3, [r7, #68]	; 0x44
 8002f84:	2300      	movs	r3, #0
 8002f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f88:	2300      	movs	r3, #0
 8002f8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f90:	4b79      	ldr	r3, [pc, #484]	; (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d00d      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	f200 80e1 	bhi.w	8003164 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x34>
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002faa:	e0db      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x1ec>
=======
 80040d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d4:	b094      	sub	sp, #80	; 0x50
 80040d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	647b      	str	r3, [r7, #68]	; 0x44
 80040dc:	2300      	movs	r3, #0
 80040de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e0:	2300      	movs	r3, #0
 80040e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e8:	4b79      	ldr	r3, [pc, #484]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d00d      	beq.n	8004110 <HAL_RCC_GetSysClockFreq+0x40>
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	f200 80e1 	bhi.w	80042bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x34>
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d003      	beq.n	800410a <HAL_RCC_GetSysClockFreq+0x3a>
 8004102:	e0db      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0x1ec>
>>>>>>> Stashed changes
=======
 8003f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f1c:	b094      	sub	sp, #80	; 0x50
 8003f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	647b      	str	r3, [r7, #68]	; 0x44
 8003f24:	2300      	movs	r3, #0
 8003f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f28:	2300      	movs	r3, #0
 8003f2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f30:	4b79      	ldr	r3, [pc, #484]	; (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 030c 	and.w	r3, r3, #12
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d00d      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x40>
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	f200 80e1 	bhi.w	8004104 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0x34>
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d003      	beq.n	8003f52 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f4a:	e0db      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x1ec>
>>>>>>> Stashed changes
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002fac:	4b73      	ldr	r3, [pc, #460]	; (800317c <HAL_RCC_GetSysClockFreq+0x204>)
 8002fae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fb0:	e0db      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8004104:	4b73      	ldr	r3, [pc, #460]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004106:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004108:	e0db      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
=======
 8003f4c:	4b73      	ldr	r3, [pc, #460]	; (800411c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f50:	e0db      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002fb2:	4b72      	ldr	r3, [pc, #456]	; (800317c <HAL_RCC_GetSysClockFreq+0x204>)
 8002fb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fb6:	e0d8      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 800410a:	4b72      	ldr	r3, [pc, #456]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x204>)
 800410c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800410e:	e0d8      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
=======
 8003f52:	4b72      	ldr	r3, [pc, #456]	; (800411c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f56:	e0d8      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002fb8:	4b6f      	ldr	r3, [pc, #444]	; (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fc0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fc2:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d063      	beq.n	8003096 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fce:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	099b      	lsrs	r3, r3, #6
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fea:	4622      	mov	r2, r4
 8002fec:	462b      	mov	r3, r5
 8002fee:	f04f 0000 	mov.w	r0, #0
 8002ff2:	f04f 0100 	mov.w	r1, #0
 8002ff6:	0159      	lsls	r1, r3, #5
 8002ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ffc:	0150      	lsls	r0, r2, #5
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4621      	mov	r1, r4
 8003004:	1a51      	subs	r1, r2, r1
 8003006:	6139      	str	r1, [r7, #16]
 8003008:	4629      	mov	r1, r5
 800300a:	eb63 0301 	sbc.w	r3, r3, r1
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800301c:	4659      	mov	r1, fp
 800301e:	018b      	lsls	r3, r1, #6
 8003020:	4651      	mov	r1, sl
 8003022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003026:	4651      	mov	r1, sl
 8003028:	018a      	lsls	r2, r1, #6
 800302a:	4651      	mov	r1, sl
 800302c:	ebb2 0801 	subs.w	r8, r2, r1
 8003030:	4659      	mov	r1, fp
 8003032:	eb63 0901 	sbc.w	r9, r3, r1
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800304a:	4690      	mov	r8, r2
 800304c:	4699      	mov	r9, r3
 800304e:	4623      	mov	r3, r4
 8003050:	eb18 0303 	adds.w	r3, r8, r3
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	462b      	mov	r3, r5
 8003058:	eb49 0303 	adc.w	r3, r9, r3
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800306a:	4629      	mov	r1, r5
 800306c:	028b      	lsls	r3, r1, #10
 800306e:	4621      	mov	r1, r4
 8003070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003074:	4621      	mov	r1, r4
 8003076:	028a      	lsls	r2, r1, #10
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307e:	2200      	movs	r2, #0
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
 8003082:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003084:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003088:	f7fd f8de 	bl	8000248 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4613      	mov	r3, r2
 8003092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003094:	e058      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x1d0>
=======
 8004110:	4b6f      	ldr	r3, [pc, #444]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004118:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800411a:	4b6d      	ldr	r3, [pc, #436]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d063      	beq.n	80041ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004126:	4b6a      	ldr	r3, [pc, #424]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	099b      	lsrs	r3, r3, #6
 800412c:	2200      	movs	r2, #0
 800412e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004130:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004138:	633b      	str	r3, [r7, #48]	; 0x30
 800413a:	2300      	movs	r3, #0
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
 800413e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004142:	4622      	mov	r2, r4
 8004144:	462b      	mov	r3, r5
 8004146:	f04f 0000 	mov.w	r0, #0
 800414a:	f04f 0100 	mov.w	r1, #0
 800414e:	0159      	lsls	r1, r3, #5
 8004150:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004154:	0150      	lsls	r0, r2, #5
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4621      	mov	r1, r4
 800415c:	1a51      	subs	r1, r2, r1
 800415e:	6139      	str	r1, [r7, #16]
 8004160:	4629      	mov	r1, r5
 8004162:	eb63 0301 	sbc.w	r3, r3, r1
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004174:	4659      	mov	r1, fp
 8004176:	018b      	lsls	r3, r1, #6
 8004178:	4651      	mov	r1, sl
 800417a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800417e:	4651      	mov	r1, sl
 8004180:	018a      	lsls	r2, r1, #6
 8004182:	4651      	mov	r1, sl
 8004184:	ebb2 0801 	subs.w	r8, r2, r1
 8004188:	4659      	mov	r1, fp
 800418a:	eb63 0901 	sbc.w	r9, r3, r1
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800419a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800419e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041a2:	4690      	mov	r8, r2
 80041a4:	4699      	mov	r9, r3
 80041a6:	4623      	mov	r3, r4
 80041a8:	eb18 0303 	adds.w	r3, r8, r3
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	462b      	mov	r3, r5
 80041b0:	eb49 0303 	adc.w	r3, r9, r3
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041c2:	4629      	mov	r1, r5
 80041c4:	028b      	lsls	r3, r1, #10
 80041c6:	4621      	mov	r1, r4
 80041c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041cc:	4621      	mov	r1, r4
 80041ce:	028a      	lsls	r2, r1, #10
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d6:	2200      	movs	r2, #0
 80041d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041e0:	f7fc fa42 	bl	8000668 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4613      	mov	r3, r2
 80041ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ec:	e058      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x1d0>
>>>>>>> Stashed changes
=======
 8003f58:	4b6f      	ldr	r3, [pc, #444]	; (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f60:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f62:	4b6d      	ldr	r3, [pc, #436]	; (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d063      	beq.n	8004036 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6e:	4b6a      	ldr	r3, [pc, #424]	; (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	099b      	lsrs	r3, r3, #6
 8003f74:	2200      	movs	r2, #0
 8003f76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f80:	633b      	str	r3, [r7, #48]	; 0x30
 8003f82:	2300      	movs	r3, #0
 8003f84:	637b      	str	r3, [r7, #52]	; 0x34
 8003f86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f8a:	4622      	mov	r2, r4
 8003f8c:	462b      	mov	r3, r5
 8003f8e:	f04f 0000 	mov.w	r0, #0
 8003f92:	f04f 0100 	mov.w	r1, #0
 8003f96:	0159      	lsls	r1, r3, #5
 8003f98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f9c:	0150      	lsls	r0, r2, #5
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	1a51      	subs	r1, r2, r1
 8003fa6:	6139      	str	r1, [r7, #16]
 8003fa8:	4629      	mov	r1, r5
 8003faa:	eb63 0301 	sbc.w	r3, r3, r1
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fbc:	4659      	mov	r1, fp
 8003fbe:	018b      	lsls	r3, r1, #6
 8003fc0:	4651      	mov	r1, sl
 8003fc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fc6:	4651      	mov	r1, sl
 8003fc8:	018a      	lsls	r2, r1, #6
 8003fca:	4651      	mov	r1, sl
 8003fcc:	ebb2 0801 	subs.w	r8, r2, r1
 8003fd0:	4659      	mov	r1, fp
 8003fd2:	eb63 0901 	sbc.w	r9, r3, r1
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fea:	4690      	mov	r8, r2
 8003fec:	4699      	mov	r9, r3
 8003fee:	4623      	mov	r3, r4
 8003ff0:	eb18 0303 	adds.w	r3, r8, r3
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	462b      	mov	r3, r5
 8003ff8:	eb49 0303 	adc.w	r3, r9, r3
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800400a:	4629      	mov	r1, r5
 800400c:	028b      	lsls	r3, r1, #10
 800400e:	4621      	mov	r1, r4
 8004010:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004014:	4621      	mov	r1, r4
 8004016:	028a      	lsls	r2, r1, #10
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800401e:	2200      	movs	r2, #0
 8004020:	62bb      	str	r3, [r7, #40]	; 0x28
 8004022:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004024:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004028:	f7fc fb1e 	bl	8000668 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4613      	mov	r3, r2
 8004032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004034:	e058      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x1d0>
>>>>>>> Stashed changes
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003096:	4b38      	ldr	r3, [pc, #224]	; (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	099b      	lsrs	r3, r3, #6
 800309c:	2200      	movs	r2, #0
 800309e:	4618      	mov	r0, r3
 80030a0:	4611      	mov	r1, r2
 80030a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030a6:	623b      	str	r3, [r7, #32]
 80030a8:	2300      	movs	r3, #0
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
 80030ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030b0:	4642      	mov	r2, r8
 80030b2:	464b      	mov	r3, r9
 80030b4:	f04f 0000 	mov.w	r0, #0
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	0159      	lsls	r1, r3, #5
 80030be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c2:	0150      	lsls	r0, r2, #5
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4641      	mov	r1, r8
 80030ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80030ce:	4649      	mov	r1, r9
 80030d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030e8:	ebb2 040a 	subs.w	r4, r2, sl
 80030ec:	eb63 050b 	sbc.w	r5, r3, fp
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	00eb      	lsls	r3, r5, #3
 80030fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fe:	00e2      	lsls	r2, r4, #3
 8003100:	4614      	mov	r4, r2
 8003102:	461d      	mov	r5, r3
 8003104:	4643      	mov	r3, r8
 8003106:	18e3      	adds	r3, r4, r3
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	464b      	mov	r3, r9
 800310c:	eb45 0303 	adc.w	r3, r5, r3
 8003110:	607b      	str	r3, [r7, #4]
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800311e:	4629      	mov	r1, r5
 8003120:	028b      	lsls	r3, r1, #10
 8003122:	4621      	mov	r1, r4
 8003124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003128:	4621      	mov	r1, r4
 800312a:	028a      	lsls	r2, r1, #10
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003132:	2200      	movs	r2, #0
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	61fa      	str	r2, [r7, #28]
 8003138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800313c:	f7fd f884 	bl	8000248 <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4613      	mov	r3, r2
 8003146:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	3301      	adds	r3, #1
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003158:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800315a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003162:	e002      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 80041ee:	4b38      	ldr	r3, [pc, #224]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	099b      	lsrs	r3, r3, #6
 80041f4:	2200      	movs	r2, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	4611      	mov	r1, r2
 80041fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041fe:	623b      	str	r3, [r7, #32]
 8004200:	2300      	movs	r3, #0
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
 8004204:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004208:	4642      	mov	r2, r8
 800420a:	464b      	mov	r3, r9
 800420c:	f04f 0000 	mov.w	r0, #0
 8004210:	f04f 0100 	mov.w	r1, #0
 8004214:	0159      	lsls	r1, r3, #5
 8004216:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800421a:	0150      	lsls	r0, r2, #5
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4641      	mov	r1, r8
 8004222:	ebb2 0a01 	subs.w	sl, r2, r1
 8004226:	4649      	mov	r1, r9
 8004228:	eb63 0b01 	sbc.w	fp, r3, r1
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004238:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800423c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004240:	ebb2 040a 	subs.w	r4, r2, sl
 8004244:	eb63 050b 	sbc.w	r5, r3, fp
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	00eb      	lsls	r3, r5, #3
 8004252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004256:	00e2      	lsls	r2, r4, #3
 8004258:	4614      	mov	r4, r2
 800425a:	461d      	mov	r5, r3
 800425c:	4643      	mov	r3, r8
 800425e:	18e3      	adds	r3, r4, r3
 8004260:	603b      	str	r3, [r7, #0]
 8004262:	464b      	mov	r3, r9
 8004264:	eb45 0303 	adc.w	r3, r5, r3
 8004268:	607b      	str	r3, [r7, #4]
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004276:	4629      	mov	r1, r5
 8004278:	028b      	lsls	r3, r1, #10
 800427a:	4621      	mov	r1, r4
 800427c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004280:	4621      	mov	r1, r4
 8004282:	028a      	lsls	r2, r1, #10
 8004284:	4610      	mov	r0, r2
 8004286:	4619      	mov	r1, r3
 8004288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800428a:	2200      	movs	r2, #0
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	61fa      	str	r2, [r7, #28]
 8004290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004294:	f7fc f9e8 	bl	8000668 <__aeabi_uldivmod>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4613      	mov	r3, r2
 800429e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042a0:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	0c1b      	lsrs	r3, r3, #16
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	3301      	adds	r3, #1
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80042b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042ba:	e002      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
=======
 8004036:	4b38      	ldr	r3, [pc, #224]	; (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	099b      	lsrs	r3, r3, #6
 800403c:	2200      	movs	r2, #0
 800403e:	4618      	mov	r0, r3
 8004040:	4611      	mov	r1, r2
 8004042:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004046:	623b      	str	r3, [r7, #32]
 8004048:	2300      	movs	r3, #0
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
 800404c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004050:	4642      	mov	r2, r8
 8004052:	464b      	mov	r3, r9
 8004054:	f04f 0000 	mov.w	r0, #0
 8004058:	f04f 0100 	mov.w	r1, #0
 800405c:	0159      	lsls	r1, r3, #5
 800405e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004062:	0150      	lsls	r0, r2, #5
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4641      	mov	r1, r8
 800406a:	ebb2 0a01 	subs.w	sl, r2, r1
 800406e:	4649      	mov	r1, r9
 8004070:	eb63 0b01 	sbc.w	fp, r3, r1
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004080:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004084:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004088:	ebb2 040a 	subs.w	r4, r2, sl
 800408c:	eb63 050b 	sbc.w	r5, r3, fp
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	00eb      	lsls	r3, r5, #3
 800409a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800409e:	00e2      	lsls	r2, r4, #3
 80040a0:	4614      	mov	r4, r2
 80040a2:	461d      	mov	r5, r3
 80040a4:	4643      	mov	r3, r8
 80040a6:	18e3      	adds	r3, r4, r3
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	464b      	mov	r3, r9
 80040ac:	eb45 0303 	adc.w	r3, r5, r3
 80040b0:	607b      	str	r3, [r7, #4]
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040be:	4629      	mov	r1, r5
 80040c0:	028b      	lsls	r3, r1, #10
 80040c2:	4621      	mov	r1, r4
 80040c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040c8:	4621      	mov	r1, r4
 80040ca:	028a      	lsls	r2, r1, #10
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d2:	2200      	movs	r2, #0
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	61fa      	str	r2, [r7, #28]
 80040d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040dc:	f7fc fac4 	bl	8000668 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4613      	mov	r3, r2
 80040e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80040e8:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	3301      	adds	r3, #1
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80040f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004102:	e002      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCC_GetSysClockFreq+0x204>)
 8003166:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800316c:	4618      	mov	r0, r3
 800316e:	3750      	adds	r7, #80	; 0x50
 8003170:	46bd      	mov	sp, r7
 8003172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	00f42400 	.word	0x00f42400

08003180 <HAL_RCC_GetHCLKFreq>:
=======
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80042be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3750      	adds	r7, #80	; 0x50
 80042c8:	46bd      	mov	sp, r7
 80042ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800
 80042d4:	00f42400 	.word	0x00f42400

080042d8 <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
=======
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <HAL_RCC_GetSysClockFreq+0x204>)
 8004106:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800410a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800410c:	4618      	mov	r0, r3
 800410e:	3750      	adds	r7, #80	; 0x50
 8004110:	46bd      	mov	sp, r7
 8004112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	00f42400 	.word	0x00f42400

08004120 <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_RCC_GetHCLKFreq+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000004 	.word	0x20000004

08003198 <HAL_RCC_GetPCLK1Freq>:
=======
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <HAL_RCC_GetHCLKFreq+0x14>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000004 	.word	0x20000004

080042f0 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
=======
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <HAL_RCC_GetHCLKFreq+0x14>)
 8004126:	681b      	ldr	r3, [r3, #0]
}
 8004128:	4618      	mov	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	20000004 	.word	0x20000004

08004138 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800319c:	f7ff fff0 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	0a9b      	lsrs	r3, r3, #10
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4903      	ldr	r1, [pc, #12]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	080093c4 	.word	0x080093c4

080031c0 <HAL_RCC_GetPCLK2Freq>:
=======
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042f4:	f7ff fff0 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0a9b      	lsrs	r3, r3, #10
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4903      	ldr	r1, [pc, #12]	; (8004314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40023800 	.word	0x40023800
 8004314:	0800c0c8 	.word	0x0800c0c8

08004318 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
=======
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800413c:	f7ff fff0 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 8004140:	4602      	mov	r2, r0
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	0a9b      	lsrs	r3, r3, #10
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	4903      	ldr	r1, [pc, #12]	; (800415c <HAL_RCC_GetPCLK1Freq+0x24>)
 800414e:	5ccb      	ldrb	r3, [r1, r3]
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40023800 	.word	0x40023800
 800415c:	0800be8c 	.word	0x0800be8c

08004160 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031c4:	f7ff ffdc 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0b5b      	lsrs	r3, r3, #13
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4903      	ldr	r1, [pc, #12]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40023800 	.word	0x40023800
 80031e4:	080093c4 	.word	0x080093c4

080031e8 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800431c:	f7ff ffdc 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 8004320:	4602      	mov	r2, r0
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	0b5b      	lsrs	r3, r3, #13
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	4903      	ldr	r1, [pc, #12]	; (800433c <HAL_RCC_GetPCLK2Freq+0x24>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004334:	4618      	mov	r0, r3
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40023800 	.word	0x40023800
 800433c:	0800c0c8 	.word	0x0800c0c8

08004340 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
=======
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004164:	f7ff ffdc 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 8004168:	4602      	mov	r2, r0
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	0b5b      	lsrs	r3, r3, #13
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	4903      	ldr	r1, [pc, #12]	; (8004184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004176:	5ccb      	ldrb	r3, [r1, r3]
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800417c:	4618      	mov	r0, r3
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40023800 	.word	0x40023800
 8004184:	0800be8c 	.word	0x0800be8c

08004188 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]
=======
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
=======
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d012      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x4e>
=======
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d012      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x4e>
>>>>>>> Stashed changes
=======
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d012      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003210:	4b69      	ldr	r3, [pc, #420]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	4a68      	ldr	r2, [pc, #416]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003216:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800321a:	6093      	str	r3, [r2, #8]
 800321c:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003224:	4964      	ldr	r1, [pc, #400]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003232:	2301      	movs	r3, #1
 8003234:	61fb      	str	r3, [r7, #28]
=======
 8004368:	4b69      	ldr	r3, [pc, #420]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4a68      	ldr	r2, [pc, #416]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004372:	6093      	str	r3, [r2, #8]
 8004374:	4b66      	ldr	r3, [pc, #408]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437c:	4964      	ldr	r1, [pc, #400]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800438a:	2301      	movs	r3, #1
 800438c:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
=======
 80041b0:	4b69      	ldr	r3, [pc, #420]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4a68      	ldr	r2, [pc, #416]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041ba:	6093      	str	r3, [r2, #8]
 80041bc:	4b66      	ldr	r3, [pc, #408]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c4:	4964      	ldr	r1, [pc, #400]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80041d2:	2301      	movs	r3, #1
 80041d4:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d017      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x8a>
=======
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d017      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
>>>>>>> Stashed changes
=======
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d017      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x8a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003242:	4b5d      	ldr	r3, [pc, #372]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003250:	4959      	ldr	r1, [pc, #356]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003260:	d101      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800326e:	2301      	movs	r3, #1
 8003270:	61bb      	str	r3, [r7, #24]
=======
 800439a:	4b5d      	ldr	r3, [pc, #372]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a8:	4959      	ldr	r1, [pc, #356]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b8:	d101      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043ba:	2301      	movs	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
=======
 80041e2:	4b5d      	ldr	r3, [pc, #372]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f0:	4959      	ldr	r1, [pc, #356]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004200:	d101      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004202:	2301      	movs	r3, #1
 8004204:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800420e:	2301      	movs	r3, #1
 8004210:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d017      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
=======
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d017      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xc6>
>>>>>>> Stashed changes
=======
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d017      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc6>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800327e:	4b4e      	ldr	r3, [pc, #312]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003284:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	494a      	ldr	r1, [pc, #296]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329c:	d101      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800329e:	2301      	movs	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032aa:	2301      	movs	r3, #1
 80032ac:	61bb      	str	r3, [r7, #24]
=======
 80043d6:	4b4e      	ldr	r3, [pc, #312]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	494a      	ldr	r1, [pc, #296]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043f4:	d101      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80043f6:	2301      	movs	r3, #1
 80043f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004402:	2301      	movs	r3, #1
 8004404:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
=======
 800421e:	4b4e      	ldr	r3, [pc, #312]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004224:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	494a      	ldr	r1, [pc, #296]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800423c:	d101      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800423e:	2301      	movs	r3, #1
 8004240:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800424a:	2301      	movs	r3, #1
 800424c:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032ba:	2301      	movs	r3, #1
 80032bc:	61fb      	str	r3, [r7, #28]
=======
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004412:	2301      	movs	r3, #1
 8004414:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
=======
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800425a:	2301      	movs	r3, #1
 800425c:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 808b 	beq.w	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
=======
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 808b 	beq.w	800453a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
>>>>>>> Stashed changes
=======
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 808b 	beq.w	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
>>>>>>> Stashed changes
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80032cc:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	4a39      	ldr	r2, [pc, #228]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6413      	str	r3, [r2, #64]	; 0x40
 80032d8:	4b37      	ldr	r3, [pc, #220]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032e4:	4b35      	ldr	r3, [pc, #212]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a34      	ldr	r2, [pc, #208]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f0:	f7fe fc48 	bl	8001b84 <HAL_GetTick>
 80032f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f8:	f7fe fc44 	bl	8001b84 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e38f      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800330a:	4b2c      	ldr	r3, [pc, #176]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
=======
 8004424:	4b3a      	ldr	r3, [pc, #232]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	4a39      	ldr	r2, [pc, #228]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442e:	6413      	str	r3, [r2, #64]	; 0x40
 8004430:	4b37      	ldr	r3, [pc, #220]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800443c:	4b35      	ldr	r3, [pc, #212]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a34      	ldr	r2, [pc, #208]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004448:	f7fe f95e 	bl	8002708 <HAL_GetTick>
 800444c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004450:	f7fe f95a 	bl	8002708 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b64      	cmp	r3, #100	; 0x64
 800445c:	d901      	bls.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e38f      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004462:	4b2c      	ldr	r3, [pc, #176]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x110>
>>>>>>> Stashed changes
=======
 800426c:	4b3a      	ldr	r3, [pc, #232]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	4a39      	ldr	r2, [pc, #228]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004276:	6413      	str	r3, [r2, #64]	; 0x40
 8004278:	4b37      	ldr	r3, [pc, #220]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004284:	4b35      	ldr	r3, [pc, #212]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a34      	ldr	r2, [pc, #208]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800428a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004290:	f7fe f95e 	bl	8002550 <HAL_GetTick>
 8004294:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004298:	f7fe f95a 	bl	8002550 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e38f      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042aa:	4b2c      	ldr	r3, [pc, #176]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x110>
>>>>>>> Stashed changes
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003316:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d035      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d02e      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003334:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800334a:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003354:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003356:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800335c:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b01      	cmp	r3, #1
 8003366:	d114      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe fc0c 	bl	8001b84 <HAL_GetTick>
 800336c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336e:	e00a      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003370:	f7fe fc08 	bl	8001b84 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	; 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e351      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003386:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0ee      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x188>
=======
 800446e:	4b28      	ldr	r3, [pc, #160]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004476:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d035      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	429a      	cmp	r2, r3
 800448a:	d02e      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800448c:	4b20      	ldr	r3, [pc, #128]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004494:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004496:	4b1e      	ldr	r3, [pc, #120]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044a2:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a6:	4a1a      	ldr	r2, [pc, #104]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044ae:	4a18      	ldr	r2, [pc, #96]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044b4:	4b16      	ldr	r3, [pc, #88]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d114      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fe f922 	bl	8002708 <HAL_GetTick>
 80044c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c6:	e00a      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c8:	f7fe f91e 	bl	8002708 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e351      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0ee      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
>>>>>>> Stashed changes
=======
 80042b6:	4b28      	ldr	r3, [pc, #160]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d035      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d02e      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042d4:	4b20      	ldr	r3, [pc, #128]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042de:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ea:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	4a1a      	ldr	r2, [pc, #104]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042fc:	4b16      	ldr	r3, [pc, #88]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d114      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fe f922 	bl	8002550 <HAL_GetTick>
 800430c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430e:	e00a      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004310:	f7fe f91e 	bl	8002550 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e351      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0ee      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x188>
>>>>>>> Stashed changes
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800339e:	d111      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033ae:	400b      	ands	r3, r1
 80033b0:	4901      	ldr	r1, [pc, #4]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
 80033b6:	e00b      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40007000 	.word	0x40007000
 80033c0:	0ffffcff 	.word	0x0ffffcff
 80033c4:	4bac      	ldr	r3, [pc, #688]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4aab      	ldr	r2, [pc, #684]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033ce:	6093      	str	r3, [r2, #8]
 80033d0:	4ba9      	ldr	r3, [pc, #676]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033dc:	49a6      	ldr	r1, [pc, #664]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	670b      	str	r3, [r1, #112]	; 0x70
=======
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f6:	d111      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004506:	400b      	ands	r3, r1
 8004508:	4901      	ldr	r1, [pc, #4]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450a:	4313      	orrs	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
 800450e:	e00b      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004510:	40023800 	.word	0x40023800
 8004514:	40007000 	.word	0x40007000
 8004518:	0ffffcff 	.word	0x0ffffcff
 800451c:	4bac      	ldr	r3, [pc, #688]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4aab      	ldr	r2, [pc, #684]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004522:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004526:	6093      	str	r3, [r2, #8]
 8004528:	4ba9      	ldr	r3, [pc, #676]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800452a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004534:	49a6      	ldr	r1, [pc, #664]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004536:	4313      	orrs	r3, r2
 8004538:	670b      	str	r3, [r1, #112]	; 0x70
>>>>>>> Stashed changes
=======
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800433e:	d111      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800434e:	400b      	ands	r3, r1
 8004350:	4901      	ldr	r1, [pc, #4]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004352:	4313      	orrs	r3, r2
 8004354:	608b      	str	r3, [r1, #8]
 8004356:	e00b      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004358:	40023800 	.word	0x40023800
 800435c:	40007000 	.word	0x40007000
 8004360:	0ffffcff 	.word	0x0ffffcff
 8004364:	4bac      	ldr	r3, [pc, #688]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4aab      	ldr	r2, [pc, #684]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800436a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800436e:	6093      	str	r3, [r2, #8]
 8004370:	4ba9      	ldr	r3, [pc, #676]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437c:	49a6      	ldr	r1, [pc, #664]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800437e:	4313      	orrs	r3, r2
 8004380:	670b      	str	r3, [r1, #112]	; 0x70
>>>>>>> Stashed changes
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d010      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x228>
=======
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	d010      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x228>
>>>>>>> Stashed changes
=======
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	d010      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80033ee:	4ba2      	ldr	r3, [pc, #648]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f4:	4aa0      	ldr	r2, [pc, #640]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033fe:	4b9e      	ldr	r3, [pc, #632]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003400:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	499b      	ldr	r1, [pc, #620]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004546:	4ba2      	ldr	r3, [pc, #648]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800454c:	4aa0      	ldr	r2, [pc, #640]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800454e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004552:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004556:	4b9e      	ldr	r3, [pc, #632]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004558:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	499b      	ldr	r1, [pc, #620]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
=======
 800438e:	4ba2      	ldr	r3, [pc, #648]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004394:	4aa0      	ldr	r2, [pc, #640]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800439a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800439e:	4b9e      	ldr	r3, [pc, #632]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	499b      	ldr	r1, [pc, #620]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x24a>
=======
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x24a>
>>>>>>> Stashed changes
=======
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800341c:	4b96      	ldr	r3, [pc, #600]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800342a:	4993      	ldr	r1, [pc, #588]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004574:	4b96      	ldr	r3, [pc, #600]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004582:	4993      	ldr	r1, [pc, #588]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
=======
 80043bc:	4b96      	ldr	r3, [pc, #600]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ca:	4993      	ldr	r1, [pc, #588]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x26c>
=======
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
>>>>>>> Stashed changes
=======
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800343e:	4b8e      	ldr	r3, [pc, #568]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800344c:	498a      	ldr	r1, [pc, #552]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004596:	4b8e      	ldr	r3, [pc, #568]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a4:	498a      	ldr	r1, [pc, #552]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
=======
 80043de:	4b8e      	ldr	r3, [pc, #568]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ec:	498a      	ldr	r1, [pc, #552]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x28e>
=======
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
>>>>>>> Stashed changes
=======
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x28e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003460:	4b85      	ldr	r3, [pc, #532]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800346e:	4982      	ldr	r1, [pc, #520]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80045b8:	4b85      	ldr	r3, [pc, #532]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c6:	4982      	ldr	r1, [pc, #520]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
=======
 8004400:	4b85      	ldr	r3, [pc, #532]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800440e:	4982      	ldr	r1, [pc, #520]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
=======
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
>>>>>>> Stashed changes
=======
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003482:	4b7d      	ldr	r3, [pc, #500]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	4979      	ldr	r1, [pc, #484]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80045da:	4b7d      	ldr	r3, [pc, #500]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e8:	4979      	ldr	r1, [pc, #484]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
=======
 8004422:	4b7d      	ldr	r3, [pc, #500]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004428:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	4979      	ldr	r1, [pc, #484]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
=======
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
>>>>>>> Stashed changes
=======
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80034a4:	4b74      	ldr	r3, [pc, #464]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	f023 0203 	bic.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	4971      	ldr	r1, [pc, #452]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80045fc:	4b74      	ldr	r3, [pc, #464]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	f023 0203 	bic.w	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	4971      	ldr	r1, [pc, #452]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
=======
 8004444:	4b74      	ldr	r3, [pc, #464]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	f023 0203 	bic.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	4971      	ldr	r1, [pc, #452]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
=======
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
>>>>>>> Stashed changes
=======
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80034c6:	4b6c      	ldr	r3, [pc, #432]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	f023 020c 	bic.w	r2, r3, #12
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d4:	4968      	ldr	r1, [pc, #416]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 800461e:	4b6c      	ldr	r3, [pc, #432]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004624:	f023 020c 	bic.w	r2, r3, #12
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462c:	4968      	ldr	r1, [pc, #416]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
=======
 8004466:	4b6c      	ldr	r3, [pc, #432]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446c:	f023 020c 	bic.w	r2, r3, #12
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004474:	4968      	ldr	r1, [pc, #416]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x316>
=======
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x316>
>>>>>>> Stashed changes
=======
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x316>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80034e8:	4b63      	ldr	r3, [pc, #396]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f6:	4960      	ldr	r1, [pc, #384]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004640:	4b63      	ldr	r3, [pc, #396]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004646:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464e:	4960      	ldr	r1, [pc, #384]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
=======
 8004488:	4b63      	ldr	r3, [pc, #396]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	4960      	ldr	r1, [pc, #384]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>
=======
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x338>
>>>>>>> Stashed changes
=======
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800350a:	4b5b      	ldr	r3, [pc, #364]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003518:	4957      	ldr	r1, [pc, #348]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004662:	4b5b      	ldr	r3, [pc, #364]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004668:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004670:	4957      	ldr	r1, [pc, #348]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
=======
 80044aa:	4b5b      	ldr	r3, [pc, #364]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b8:	4957      	ldr	r1, [pc, #348]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x35a>
=======
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x35a>
>>>>>>> Stashed changes
=======
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800352c:	4b52      	ldr	r3, [pc, #328]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003532:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	494f      	ldr	r1, [pc, #316]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004684:	4b52      	ldr	r3, [pc, #328]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	494f      	ldr	r1, [pc, #316]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
=======
 80044cc:	4b52      	ldr	r3, [pc, #328]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	494f      	ldr	r1, [pc, #316]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x37c>
=======
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
>>>>>>> Stashed changes
=======
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x37c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800354e:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003554:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	4946      	ldr	r1, [pc, #280]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80046a6:	4b4a      	ldr	r3, [pc, #296]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b4:	4946      	ldr	r1, [pc, #280]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
=======
 80044ee:	4b4a      	ldr	r3, [pc, #296]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	4946      	ldr	r1, [pc, #280]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x39e>
=======
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x39e>
>>>>>>> Stashed changes
=======
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x39e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003570:	4b41      	ldr	r3, [pc, #260]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	493e      	ldr	r1, [pc, #248]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80046c8:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d6:	493e      	ldr	r1, [pc, #248]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
=======
 8004510:	4b41      	ldr	r3, [pc, #260]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451e:	493e      	ldr	r1, [pc, #248]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
=======
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
>>>>>>> Stashed changes
=======
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003592:	4b39      	ldr	r3, [pc, #228]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003598:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a0:	4935      	ldr	r1, [pc, #212]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80046ea:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f8:	4935      	ldr	r1, [pc, #212]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
=======
 8004532:	4b39      	ldr	r3, [pc, #228]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004540:	4935      	ldr	r1, [pc, #212]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
=======
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
>>>>>>> Stashed changes
=======
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80035b4:	4b30      	ldr	r3, [pc, #192]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035c2:	492d      	ldr	r1, [pc, #180]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 800470c:	4b30      	ldr	r3, [pc, #192]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004712:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800471a:	492d      	ldr	r1, [pc, #180]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
=======
 8004554:	4b30      	ldr	r3, [pc, #192]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004562:	492d      	ldr	r1, [pc, #180]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d011      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x412>
=======
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d011      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x412>
>>>>>>> Stashed changes
=======
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d011      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x412>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80035d6:	4b28      	ldr	r3, [pc, #160]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e4:	4924      	ldr	r1, [pc, #144]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f4:	d101      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80035f6:	2301      	movs	r3, #1
 80035f8:	61bb      	str	r3, [r7, #24]
=======
 800472e:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800473c:	4924      	ldr	r1, [pc, #144]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800474c:	d101      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800474e:	2301      	movs	r3, #1
 8004750:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
=======
 8004576:	4b28      	ldr	r3, [pc, #160]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004584:	4924      	ldr	r1, [pc, #144]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004594:	d101      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004596:	2301      	movs	r3, #1
 8004598:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003606:	2301      	movs	r3, #1
 8003608:	61bb      	str	r3, [r7, #24]
=======
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800475e:	2301      	movs	r3, #1
 8004760:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
=======
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80045a6:	2301      	movs	r3, #1
 80045a8:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x444>
=======
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x444>
>>>>>>> Stashed changes
=======
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x444>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003616:	4b18      	ldr	r3, [pc, #96]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003624:	4914      	ldr	r1, [pc, #80]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 800476e:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477c:	4914      	ldr	r1, [pc, #80]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
=======
 80045b6:	4b18      	ldr	r3, [pc, #96]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c4:	4914      	ldr	r1, [pc, #80]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x468>
=======
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00b      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
>>>>>>> Stashed changes
=======
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003648:	490b      	ldr	r1, [pc, #44]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a0:	490b      	ldr	r1, [pc, #44]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
=======
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e8:	490b      	ldr	r1, [pc, #44]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00f      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x494>
=======
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00f      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
>>>>>>> Stashed changes
=======
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00f      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x494>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800366c:	4902      	ldr	r1, [pc, #8]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003674:	e002      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
=======
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c4:	4902      	ldr	r1, [pc, #8]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047cc:	e002      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80047ce:	bf00      	nop
 80047d0:	40023800 	.word	0x40023800
>>>>>>> Stashed changes
=======
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460c:	4902      	ldr	r1, [pc, #8]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004614:	e002      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004616:	bf00      	nop
 8004618:	40023800 	.word	0x40023800
>>>>>>> Stashed changes
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00b      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
=======
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
>>>>>>> Stashed changes
=======
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00b      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003688:	4b8a      	ldr	r3, [pc, #552]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800368a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800368e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	4986      	ldr	r1, [pc, #536]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 80047e0:	4b8a      	ldr	r3, [pc, #552]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	4986      	ldr	r1, [pc, #536]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
=======
 8004628:	4b8a      	ldr	r3, [pc, #552]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800462a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800462e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	4986      	ldr	r1, [pc, #536]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
=======
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00b      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
>>>>>>> Stashed changes
=======
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00b      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80036ac:	4b81      	ldr	r3, [pc, #516]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036bc:	497d      	ldr	r1, [pc, #500]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004804:	4b81      	ldr	r3, [pc, #516]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800480a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004814:	497d      	ldr	r1, [pc, #500]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
=======
 800464c:	4b81      	ldr	r3, [pc, #516]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800464e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004652:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800465c:	497d      	ldr	r1, [pc, #500]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d006      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80d6 	beq.w	8003884 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036d8:	4b76      	ldr	r3, [pc, #472]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a75      	ldr	r2, [pc, #468]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e4:	f7fe fa4e 	bl	8001b84 <HAL_GetTick>
 80036e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036ec:	f7fe fa4a 	bl	8001b84 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e195      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036fe:	4b6d      	ldr	r3, [pc, #436]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x504>
=======
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d006      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 80d6 	beq.w	80049dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004830:	4b76      	ldr	r3, [pc, #472]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a75      	ldr	r2, [pc, #468]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004836:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800483a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800483c:	f7fd ff64 	bl	8002708 <HAL_GetTick>
 8004840:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004844:	f7fd ff60 	bl	8002708 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b64      	cmp	r3, #100	; 0x64
 8004850:	d901      	bls.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e195      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004856:	4b6d      	ldr	r3, [pc, #436]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f0      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x504>
>>>>>>> Stashed changes
=======
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d006      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80d6 	beq.w	8004824 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004678:	4b76      	ldr	r3, [pc, #472]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a75      	ldr	r2, [pc, #468]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004684:	f7fd ff64 	bl	8002550 <HAL_GetTick>
 8004688:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800468c:	f7fd ff60 	bl	8002550 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	; 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e195      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800469e:	4b6d      	ldr	r3, [pc, #436]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x504>
>>>>>>> Stashed changes

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d021      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371a:	2b00      	cmp	r3, #0
 800371c:	d11d      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x572>
=======
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d021      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004872:	2b00      	cmp	r3, #0
 8004874:	d11d      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
>>>>>>> Stashed changes
=======
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d021      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d11d      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x572>
>>>>>>> Stashed changes
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800371e:	4b65      	ldr	r3, [pc, #404]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003724:	0c1b      	lsrs	r3, r3, #16
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800372c:	4b61      	ldr	r3, [pc, #388]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800372e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003732:	0e1b      	lsrs	r3, r3, #24
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	60fb      	str	r3, [r7, #12]
=======
 8004876:	4b65      	ldr	r3, [pc, #404]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800487c:	0c1b      	lsrs	r3, r3, #16
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004884:	4b61      	ldr	r3, [pc, #388]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488a:	0e1b      	lsrs	r3, r3, #24
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
=======
 80046be:	4b65      	ldr	r3, [pc, #404]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c4:	0c1b      	lsrs	r3, r3, #16
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046cc:	4b61      	ldr	r3, [pc, #388]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d2:	0e1b      	lsrs	r3, r3, #24
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	019a      	lsls	r2, r3, #6
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	431a      	orrs	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	071b      	lsls	r3, r3, #28
 8003752:	4958      	ldr	r1, [pc, #352]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	019a      	lsls	r2, r3, #6
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	041b      	lsls	r3, r3, #16
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	071b      	lsls	r3, r3, #28
 80048aa:	4958      	ldr	r1, [pc, #352]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> Stashed changes
=======
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	019a      	lsls	r2, r3, #6
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	431a      	orrs	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	061b      	lsls	r3, r3, #24
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	071b      	lsls	r3, r3, #28
 80046f2:	4958      	ldr	r1, [pc, #352]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d004      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800376e:	d00a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003778:	2b00      	cmp	r3, #0
 800377a:	d02e      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003784:	d129      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
=======
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d02e      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048dc:	d129      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
>>>>>>> Stashed changes
=======
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d004      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004718:	2b00      	cmp	r3, #0
 800471a:	d02e      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004724:	d129      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
>>>>>>> Stashed changes
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003786:	4b4b      	ldr	r3, [pc, #300]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003794:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379a:	0f1b      	lsrs	r3, r3, #28
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	60fb      	str	r3, [r7, #12]
=======
 80048de:	4b4b      	ldr	r3, [pc, #300]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048ec:	4b47      	ldr	r3, [pc, #284]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f2:	0f1b      	lsrs	r3, r3, #28
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
=======
 8004726:	4b4b      	ldr	r3, [pc, #300]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004734:	4b47      	ldr	r3, [pc, #284]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473a:	0f1b      	lsrs	r3, r3, #28
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	019a      	lsls	r2, r3, #6
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	041b      	lsls	r3, r3, #16
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	061b      	lsls	r3, r3, #24
 80037b4:	431a      	orrs	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	071b      	lsls	r3, r3, #28
 80037ba:	493e      	ldr	r1, [pc, #248]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037c2:	4b3c      	ldr	r3, [pc, #240]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037c8:	f023 021f 	bic.w	r2, r3, #31
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	3b01      	subs	r3, #1
 80037d2:	4938      	ldr	r1, [pc, #224]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	019a      	lsls	r2, r3, #6
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	041b      	lsls	r3, r3, #16
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	061b      	lsls	r3, r3, #24
 800490c:	431a      	orrs	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	071b      	lsls	r3, r3, #28
 8004912:	493e      	ldr	r1, [pc, #248]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800491a:	4b3c      	ldr	r3, [pc, #240]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004920:	f023 021f 	bic.w	r2, r3, #31
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	3b01      	subs	r3, #1
 800492a:	4938      	ldr	r1, [pc, #224]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
=======
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	019a      	lsls	r2, r3, #6
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	061b      	lsls	r3, r3, #24
 8004754:	431a      	orrs	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	071b      	lsls	r3, r3, #28
 800475a:	493e      	ldr	r1, [pc, #248]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004762:	4b3c      	ldr	r3, [pc, #240]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004768:	f023 021f 	bic.w	r2, r3, #31
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	3b01      	subs	r3, #1
 8004772:	4938      	ldr	r1, [pc, #224]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01d      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x63a>
=======
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01d      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x63a>
>>>>>>> Stashed changes
=======
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d01d      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
>>>>>>> Stashed changes
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80037e6:	4b33      	ldr	r3, [pc, #204]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ec:	0e1b      	lsrs	r3, r3, #24
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037f4:	4b2f      	ldr	r3, [pc, #188]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fa:	0f1b      	lsrs	r3, r3, #28
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	60fb      	str	r3, [r7, #12]
=======
 800493e:	4b33      	ldr	r3, [pc, #204]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004944:	0e1b      	lsrs	r3, r3, #24
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800494c:	4b2f      	ldr	r3, [pc, #188]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004952:	0f1b      	lsrs	r3, r3, #28
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
=======
 8004786:	4b33      	ldr	r3, [pc, #204]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478c:	0e1b      	lsrs	r3, r3, #24
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004794:	4b2f      	ldr	r3, [pc, #188]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479a:	0f1b      	lsrs	r3, r3, #28
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	019a      	lsls	r2, r3, #6
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	041b      	lsls	r3, r3, #16
 800380e:	431a      	orrs	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	061b      	lsls	r3, r3, #24
 8003814:	431a      	orrs	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	071b      	lsls	r3, r3, #28
 800381a:	4926      	ldr	r1, [pc, #152]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	019a      	lsls	r2, r3, #6
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	041b      	lsls	r3, r3, #16
 8004966:	431a      	orrs	r2, r3
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	061b      	lsls	r3, r3, #24
 800496c:	431a      	orrs	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	071b      	lsls	r3, r3, #28
 8004972:	4926      	ldr	r1, [pc, #152]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> Stashed changes
=======
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	019a      	lsls	r2, r3, #6
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	041b      	lsls	r3, r3, #16
 80047ae:	431a      	orrs	r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	061b      	lsls	r3, r3, #24
 80047b4:	431a      	orrs	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	071b      	lsls	r3, r3, #28
 80047ba:	4926      	ldr	r1, [pc, #152]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d011      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x66a>
=======
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d011      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
>>>>>>> Stashed changes
=======
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d011      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
>>>>>>> Stashed changes
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	019a      	lsls	r2, r3, #6
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	041b      	lsls	r3, r3, #16
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	061b      	lsls	r3, r3, #24
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	071b      	lsls	r3, r3, #28
 800384a:	491a      	ldr	r1, [pc, #104]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	019a      	lsls	r2, r3, #6
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	041b      	lsls	r3, r3, #16
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	061b      	lsls	r3, r3, #24
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	071b      	lsls	r3, r3, #28
 80049a2:	491a      	ldr	r1, [pc, #104]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> Stashed changes
=======
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	019a      	lsls	r2, r3, #6
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	071b      	lsls	r3, r3, #28
 80047ea:	491a      	ldr	r1, [pc, #104]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003852:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a17      	ldr	r2, [pc, #92]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003858:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800385c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800385e:	f7fe f991 	bl	8001b84 <HAL_GetTick>
 8003862:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003866:	f7fe f98d 	bl	8001b84 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b64      	cmp	r3, #100	; 0x64
 8003872:	d901      	bls.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0d8      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003878:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x67e>
=======
 80049aa:	4b18      	ldr	r3, [pc, #96]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a17      	ldr	r2, [pc, #92]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b6:	f7fd fea7 	bl	8002708 <HAL_GetTick>
 80049ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049bc:	e008      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049be:	f7fd fea3 	bl	8002708 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b64      	cmp	r3, #100	; 0x64
 80049ca:	d901      	bls.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e0d8      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049d0:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f0      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x67e>
>>>>>>> Stashed changes
=======
 80047f2:	4b18      	ldr	r3, [pc, #96]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a17      	ldr	r2, [pc, #92]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fe:	f7fd fea7 	bl	8002550 <HAL_GetTick>
 8004802:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004804:	e008      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004806:	f7fd fea3 	bl	8002550 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b64      	cmp	r3, #100	; 0x64
 8004812:	d901      	bls.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e0d8      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004818:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x67e>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b01      	cmp	r3, #1
 8003888:	f040 80ce 	bne.w	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800388c:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a08      	ldr	r2, [pc, #32]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003898:	f7fe f974 	bl	8001b84 <HAL_GetTick>
 800389c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800389e:	e00b      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038a0:	f7fe f970 	bl	8001b84 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d904      	bls.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e0bb      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80038b2:	bf00      	nop
 80038b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038b8:	4b5e      	ldr	r3, [pc, #376]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038c4:	d0ec      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
=======
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	f040 80ce 	bne.w	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049e4:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a08      	ldr	r2, [pc, #32]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f0:	f7fd fe8a 	bl	8002708 <HAL_GetTick>
 80049f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049f6:	e00b      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049f8:	f7fd fe86 	bl	8002708 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d904      	bls.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0bb      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a10:	4b5e      	ldr	r3, [pc, #376]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a1c:	d0ec      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
>>>>>>> Stashed changes
=======
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b01      	cmp	r3, #1
 8004828:	f040 80ce 	bne.w	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800482c:	4b09      	ldr	r3, [pc, #36]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a08      	ldr	r2, [pc, #32]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004838:	f7fd fe8a 	bl	8002550 <HAL_GetTick>
 800483c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800483e:	e00b      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004840:	f7fd fe86 	bl	8002550 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d904      	bls.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e0bb      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004858:	4b5e      	ldr	r3, [pc, #376]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004864:	d0ec      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
>>>>>>> Stashed changes

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d02e      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d12a      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x75c>
=======
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d009      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d02e      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d12a      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
>>>>>>> Stashed changes
=======
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004882:	2b00      	cmp	r3, #0
 8004884:	d02e      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d12a      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
>>>>>>> Stashed changes
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80038ee:	4b51      	ldr	r3, [pc, #324]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038fc:	4b4d      	ldr	r3, [pc, #308]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	0f1b      	lsrs	r3, r3, #28
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	60fb      	str	r3, [r7, #12]
=======
 8004a46:	4b51      	ldr	r3, [pc, #324]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a54:	4b4d      	ldr	r3, [pc, #308]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5a:	0f1b      	lsrs	r3, r3, #28
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
=======
 800488e:	4b51      	ldr	r3, [pc, #324]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800489c:	4b4d      	ldr	r3, [pc, #308]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a2:	0f1b      	lsrs	r3, r3, #28
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	019a      	lsls	r2, r3, #6
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	041b      	lsls	r3, r3, #16
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	061b      	lsls	r3, r3, #24
 800391c:	431a      	orrs	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	071b      	lsls	r3, r3, #28
 8003922:	4944      	ldr	r1, [pc, #272]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800392a:	4b42      	ldr	r3, [pc, #264]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800392c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003930:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	3b01      	subs	r3, #1
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	493d      	ldr	r1, [pc, #244]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	019a      	lsls	r2, r3, #6
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	041b      	lsls	r3, r3, #16
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	061b      	lsls	r3, r3, #24
 8004a74:	431a      	orrs	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	071b      	lsls	r3, r3, #28
 8004a7a:	4944      	ldr	r1, [pc, #272]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a82:	4b42      	ldr	r3, [pc, #264]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	3b01      	subs	r3, #1
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	493d      	ldr	r1, [pc, #244]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
=======
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	019a      	lsls	r2, r3, #6
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	431a      	orrs	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	071b      	lsls	r3, r3, #28
 80048c2:	4944      	ldr	r1, [pc, #272]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048ca:	4b42      	ldr	r3, [pc, #264]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	3b01      	subs	r3, #1
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	493d      	ldr	r1, [pc, #244]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d022      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003958:	d11d      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
=======
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d022      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ab0:	d11d      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
>>>>>>> Stashed changes
=======
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d022      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048f8:	d11d      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
>>>>>>> Stashed changes
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800395a:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	0e1b      	lsrs	r3, r3, #24
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003968:	4b32      	ldr	r3, [pc, #200]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	0f1b      	lsrs	r3, r3, #28
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	60fb      	str	r3, [r7, #12]
=======
 8004ab2:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab8:	0e1b      	lsrs	r3, r3, #24
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ac0:	4b32      	ldr	r3, [pc, #200]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	0f1b      	lsrs	r3, r3, #28
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
=======
 80048fa:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	0e1b      	lsrs	r3, r3, #24
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004908:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	0f1b      	lsrs	r3, r3, #28
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	019a      	lsls	r2, r3, #6
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	041b      	lsls	r3, r3, #16
 8003982:	431a      	orrs	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	061b      	lsls	r3, r3, #24
 8003988:	431a      	orrs	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	071b      	lsls	r3, r3, #28
 800398e:	4929      	ldr	r1, [pc, #164]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	019a      	lsls	r2, r3, #6
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	041b      	lsls	r3, r3, #16
 8004ada:	431a      	orrs	r2, r3
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	061b      	lsls	r3, r3, #24
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	071b      	lsls	r3, r3, #28
 8004ae6:	4929      	ldr	r1, [pc, #164]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> Stashed changes
=======
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	019a      	lsls	r2, r3, #6
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	041b      	lsls	r3, r3, #16
 8004922:	431a      	orrs	r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	061b      	lsls	r3, r3, #24
 8004928:	431a      	orrs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	071b      	lsls	r3, r3, #28
 800492e:	4929      	ldr	r1, [pc, #164]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> Stashed changes
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d028      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
=======
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d028      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x80c>
>>>>>>> Stashed changes
=======
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d028      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x80c>
>>>>>>> Stashed changes
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a8:	0e1b      	lsrs	r3, r3, #24
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039b0:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	0c1b      	lsrs	r3, r3, #16
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	60fb      	str	r3, [r7, #12]
=======
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b00:	0e1b      	lsrs	r3, r3, #24
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b08:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	0c1b      	lsrs	r3, r3, #16
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
=======
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	0e1b      	lsrs	r3, r3, #24
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004950:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	019a      	lsls	r2, r3, #6
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	041b      	lsls	r3, r3, #16
 80039c8:	431a      	orrs	r2, r3
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	061b      	lsls	r3, r3, #24
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	071b      	lsls	r3, r3, #28
 80039d6:	4917      	ldr	r1, [pc, #92]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039de:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	4911      	ldr	r1, [pc, #68]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	019a      	lsls	r2, r3, #6
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	041b      	lsls	r3, r3, #16
 8004b20:	431a      	orrs	r2, r3
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	061b      	lsls	r3, r3, #24
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	071b      	lsls	r3, r3, #28
 8004b2e:	4917      	ldr	r1, [pc, #92]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b36:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	4911      	ldr	r1, [pc, #68]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
=======
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	019a      	lsls	r2, r3, #6
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	041b      	lsls	r3, r3, #16
 8004968:	431a      	orrs	r2, r3
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	061b      	lsls	r3, r3, #24
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	071b      	lsls	r3, r3, #28
 8004976:	4917      	ldr	r1, [pc, #92]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800497e:	4b15      	ldr	r3, [pc, #84]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004984:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	4911      	ldr	r1, [pc, #68]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0e      	ldr	r2, [pc, #56]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a00:	f7fe f8c0 	bl	8001b84 <HAL_GetTick>
 8003a04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a08:	f7fe f8bc 	bl	8001b84 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	; 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e007      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a26:	d1ef      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x820>
=======
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a0e      	ldr	r2, [pc, #56]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b58:	f7fd fdd6 	bl	8002708 <HAL_GetTick>
 8004b5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b60:	f7fd fdd2 	bl	8002708 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	; 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e007      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b72:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b7e:	d1ef      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x820>
>>>>>>> Stashed changes
=======
 8004994:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0e      	ldr	r2, [pc, #56]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800499a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a0:	f7fd fdd6 	bl	8002550 <HAL_GetTick>
 80049a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049a8:	f7fd fdd2 	bl	8002550 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e007      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c6:	d1ef      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800

08003a38 <HAL_SPI_Init>:
=======
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40023800 	.word	0x40023800

08004b90 <HAL_SPI_Init>:
>>>>>>> Stashed changes
=======
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800

080049d8 <HAL_SPI_Init>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
=======
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
=======
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e09d      	b.n	8003b86 <HAL_SPI_Init+0x14e>
=======
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e09d      	b.n	8004cde <HAL_SPI_Init+0x14e>
>>>>>>> Stashed changes
=======
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e09d      	b.n	8004b26 <HAL_SPI_Init+0x14e>
>>>>>>> Stashed changes
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d108      	bne.n	8003a64 <HAL_SPI_Init+0x2c>
=======
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d108      	bne.n	8004bbc <HAL_SPI_Init+0x2c>
>>>>>>> Stashed changes
=======
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d108      	bne.n	8004a04 <HAL_SPI_Init+0x2c>
>>>>>>> Stashed changes
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a5a:	d009      	beq.n	8003a70 <HAL_SPI_Init+0x38>
=======
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bb2:	d009      	beq.n	8004bc8 <HAL_SPI_Init+0x38>
>>>>>>> Stashed changes
=======
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049fa:	d009      	beq.n	8004a10 <HAL_SPI_Init+0x38>
>>>>>>> Stashed changes
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	61da      	str	r2, [r3, #28]
 8003a62:	e005      	b.n	8003a70 <HAL_SPI_Init+0x38>
=======
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	61da      	str	r2, [r3, #28]
 8004bba:	e005      	b.n	8004bc8 <HAL_SPI_Init+0x38>
>>>>>>> Stashed changes
=======
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	61da      	str	r2, [r3, #28]
 8004a02:	e005      	b.n	8004a10 <HAL_SPI_Init+0x38>
>>>>>>> Stashed changes
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	615a      	str	r2, [r3, #20]
=======
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes
=======
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
=======
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
>>>>>>> Stashed changes
=======
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd fd54 	bl	8001538 <HAL_SPI_MspInit>
=======
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fd f8d4 	bl	8001d90 <HAL_SPI_MspInit>
>>>>>>> Stashed changes
=======
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fd f8ca 	bl	8001bc4 <HAL_SPI_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ab0:	d902      	bls.n	8003ab8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	e002      	b.n	8003abe <HAL_SPI_Init+0x86>
=======
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bfe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c08:	d902      	bls.n	8004c10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	e002      	b.n	8004c16 <HAL_SPI_Init+0x86>
>>>>>>> Stashed changes
=======
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a50:	d902      	bls.n	8004a58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	e002      	b.n	8004a5e <HAL_SPI_Init+0x86>
>>>>>>> Stashed changes
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003abc:	60fb      	str	r3, [r7, #12]
=======
 8004c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c14:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
=======
 8004a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a5c:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ac6:	d007      	beq.n	8003ad8 <HAL_SPI_Init+0xa0>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ad0:	d002      	beq.n	8003ad8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c1e:	d007      	beq.n	8004c30 <HAL_SPI_Init+0xa0>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c28:	d002      	beq.n	8004c30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
=======
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a66:	d007      	beq.n	8004a78 <HAL_SPI_Init+0xa0>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a70:	d002      	beq.n	8004a78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	ea42 0103 	orr.w	r1, r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	601a      	str	r2, [r3, #0]
=======
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c72:	ea42 0103 	orr.w	r1, r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
=======
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aba:	ea42 0103 	orr.w	r1, r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	f003 0204 	and.w	r2, r3, #4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b54:	ea42 0103 	orr.w	r1, r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
=======
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	0c1b      	lsrs	r3, r3, #16
 8004c8c:	f003 0204 	and.w	r2, r3, #4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004cac:	ea42 0103 	orr.w	r1, r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
=======
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	f003 0204 	and.w	r2, r3, #4
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004af4:	ea42 0103 	orr.w	r1, r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_SPI_Transmit>:
=======
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69da      	ldr	r2, [r3, #28]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ccc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_SPI_Transmit>:
>>>>>>> Stashed changes
=======
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_SPI_Transmit>:
>>>>>>> Stashed changes
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b088      	sub	sp, #32
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	603b      	str	r3, [r7, #0]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	77fb      	strb	r3, [r7, #31]
=======
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b088      	sub	sp, #32
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	603b      	str	r3, [r7, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes
=======
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b088      	sub	sp, #32
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	603b      	str	r3, [r7, #0]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_SPI_Transmit+0x22>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e158      	b.n	8003e62 <HAL_SPI_Transmit+0x2d4>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bb8:	f7fd ffe4 	bl	8001b84 <HAL_GetTick>
 8003bbc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d002      	beq.n	8003bd4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bd2:	e13d      	b.n	8003e50 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_SPI_Transmit+0x52>
 8003bda:	88fb      	ldrh	r3, [r7, #6]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003be4:	e134      	b.n	8003e50 <HAL_SPI_Transmit+0x2c2>
=======
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_SPI_Transmit+0x22>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e158      	b.n	8004fba <HAL_SPI_Transmit+0x2d4>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d10:	f7fd fcfa 	bl	8002708 <HAL_GetTick>
 8004d14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d002      	beq.n	8004d2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d26:	2302      	movs	r3, #2
 8004d28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d2a:	e13d      	b.n	8004fa8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_SPI_Transmit+0x52>
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d3c:	e134      	b.n	8004fa8 <HAL_SPI_Transmit+0x2c2>
>>>>>>> Stashed changes
=======
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_SPI_Transmit+0x22>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e158      	b.n	8004e02 <HAL_SPI_Transmit+0x2d4>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b58:	f7fd fcfa 	bl	8002550 <HAL_GetTick>
 8004b5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d002      	beq.n	8004b74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b72:	e13d      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <HAL_SPI_Transmit+0x52>
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b84:	e134      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
>>>>>>> Stashed changes
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2203      	movs	r2, #3
 8003bea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	88fa      	ldrh	r2, [r7, #6]
 8003bfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	88fa      	ldrh	r2, [r7, #6]
 8003c04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c30:	d10f      	bne.n	8003c52 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c50:	601a      	str	r2, [r3, #0]
=======
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2203      	movs	r2, #3
 8004d42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	88fa      	ldrh	r2, [r7, #6]
 8004d56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d88:	d10f      	bne.n	8004daa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004da8:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
=======
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2203      	movs	r2, #3
 8004b8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	88fa      	ldrh	r2, [r7, #6]
 8004b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	88fa      	ldrh	r2, [r7, #6]
 8004ba4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bf0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d007      	beq.n	8003c70 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c6e:	601a      	str	r2, [r3, #0]
=======
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db4:	2b40      	cmp	r3, #64	; 0x40
 8004db6:	d007      	beq.n	8004dc8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc6:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
=======
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d007      	beq.n	8004c10 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c0e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c78:	d94b      	bls.n	8003d12 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_SPI_Transmit+0xfa>
 8003c82:	8afb      	ldrh	r3, [r7, #22]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d13e      	bne.n	8003d06 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	881a      	ldrh	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	1c9a      	adds	r2, r3, #2
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cac:	e02b      	b.n	8003d06 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d112      	bne.n	8003ce2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	881a      	ldrh	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	1c9a      	adds	r2, r3, #2
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ce0:	e011      	b.n	8003d06 <HAL_SPI_Transmit+0x178>
=======
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dd0:	d94b      	bls.n	8004e6a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_SPI_Transmit+0xfa>
 8004dda:	8afb      	ldrh	r3, [r7, #22]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d13e      	bne.n	8004e5e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	881a      	ldrh	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	1c9a      	adds	r2, r3, #2
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e04:	e02b      	b.n	8004e5e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d112      	bne.n	8004e3a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	881a      	ldrh	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	1c9a      	adds	r2, r3, #2
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e38:	e011      	b.n	8004e5e <HAL_SPI_Transmit+0x178>
>>>>>>> Stashed changes
=======
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c18:	d94b      	bls.n	8004cb2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_SPI_Transmit+0xfa>
 8004c22:	8afb      	ldrh	r3, [r7, #22]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d13e      	bne.n	8004ca6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	881a      	ldrh	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	1c9a      	adds	r2, r3, #2
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c4c:	e02b      	b.n	8004ca6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d112      	bne.n	8004c82 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	881a      	ldrh	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	1c9a      	adds	r2, r3, #2
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c80:	e011      	b.n	8004ca6 <HAL_SPI_Transmit+0x178>
>>>>>>> Stashed changes
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003ce2:	f7fd ff4f 	bl	8001b84 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d803      	bhi.n	8003cfa <HAL_SPI_Transmit+0x16c>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d102      	bne.n	8003d00 <HAL_SPI_Transmit+0x172>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d04:	e0a4      	b.n	8003e50 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1ce      	bne.n	8003cae <HAL_SPI_Transmit+0x120>
 8003d10:	e07c      	b.n	8003e0c <HAL_SPI_Transmit+0x27e>
=======
 8004e3a:	f7fd fc65 	bl	8002708 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d803      	bhi.n	8004e52 <HAL_SPI_Transmit+0x16c>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d102      	bne.n	8004e58 <HAL_SPI_Transmit+0x172>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e5c:	e0a4      	b.n	8004fa8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1ce      	bne.n	8004e06 <HAL_SPI_Transmit+0x120>
 8004e68:	e07c      	b.n	8004f64 <HAL_SPI_Transmit+0x27e>
>>>>>>> Stashed changes
=======
 8004c82:	f7fd fc65 	bl	8002550 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d803      	bhi.n	8004c9a <HAL_SPI_Transmit+0x16c>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d102      	bne.n	8004ca0 <HAL_SPI_Transmit+0x172>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ca4:	e0a4      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1ce      	bne.n	8004c4e <HAL_SPI_Transmit+0x120>
 8004cb0:	e07c      	b.n	8004dac <HAL_SPI_Transmit+0x27e>
>>>>>>> Stashed changes
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_SPI_Transmit+0x192>
 8003d1a:	8afb      	ldrh	r3, [r7, #22]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d170      	bne.n	8003e02 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d912      	bls.n	8003d50 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	881a      	ldrh	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	1c9a      	adds	r2, r3, #2
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b02      	subs	r3, #2
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d4e:	e058      	b.n	8003e02 <HAL_SPI_Transmit+0x274>
=======
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_SPI_Transmit+0x192>
 8004e72:	8afb      	ldrh	r3, [r7, #22]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d170      	bne.n	8004f5a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d912      	bls.n	8004ea8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	881a      	ldrh	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	1c9a      	adds	r2, r3, #2
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b02      	subs	r3, #2
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ea6:	e058      	b.n	8004f5a <HAL_SPI_Transmit+0x274>
>>>>>>> Stashed changes
=======
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_SPI_Transmit+0x192>
 8004cba:	8afb      	ldrh	r3, [r7, #22]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d170      	bne.n	8004da2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d912      	bls.n	8004cf0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	881a      	ldrh	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	1c9a      	adds	r2, r3, #2
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b02      	subs	r3, #2
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cee:	e058      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
>>>>>>> Stashed changes
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	7812      	ldrb	r2, [r2, #0]
 8003d5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d76:	e044      	b.n	8003e02 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d12b      	bne.n	8003dde <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d912      	bls.n	8003db6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	881a      	ldrh	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	1c9a      	adds	r2, r3, #2
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b02      	subs	r3, #2
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003db4:	e025      	b.n	8003e02 <HAL_SPI_Transmit+0x274>
=======
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	7812      	ldrb	r2, [r2, #0]
 8004eb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004ece:	e044      	b.n	8004f5a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d12b      	bne.n	8004f36 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d912      	bls.n	8004f0e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	881a      	ldrh	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	1c9a      	adds	r2, r3, #2
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b02      	subs	r3, #2
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f0c:	e025      	b.n	8004f5a <HAL_SPI_Transmit+0x274>
>>>>>>> Stashed changes
=======
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	330c      	adds	r3, #12
 8004cfa:	7812      	ldrb	r2, [r2, #0]
 8004cfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d16:	e044      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d12b      	bne.n	8004d7e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d912      	bls.n	8004d56 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	881a      	ldrh	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	1c9a      	adds	r2, r3, #2
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b02      	subs	r3, #2
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d54:	e025      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
>>>>>>> Stashed changes
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	7812      	ldrb	r2, [r2, #0]
 8003dc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ddc:	e011      	b.n	8003e02 <HAL_SPI_Transmit+0x274>
=======
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	330c      	adds	r3, #12
 8004f18:	7812      	ldrb	r2, [r2, #0]
 8004f1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f34:	e011      	b.n	8004f5a <HAL_SPI_Transmit+0x274>
>>>>>>> Stashed changes
=======
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	330c      	adds	r3, #12
 8004d60:	7812      	ldrb	r2, [r2, #0]
 8004d62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d7c:	e011      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003dde:	f7fd fed1 	bl	8001b84 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d803      	bhi.n	8003df6 <HAL_SPI_Transmit+0x268>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df4:	d102      	bne.n	8003dfc <HAL_SPI_Transmit+0x26e>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d102      	bne.n	8003e02 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e00:	e026      	b.n	8003e50 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1b5      	bne.n	8003d78 <HAL_SPI_Transmit+0x1ea>
=======
 8004f36:	f7fd fbe7 	bl	8002708 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d803      	bhi.n	8004f4e <HAL_SPI_Transmit+0x268>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4c:	d102      	bne.n	8004f54 <HAL_SPI_Transmit+0x26e>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d102      	bne.n	8004f5a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f58:	e026      	b.n	8004fa8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1b5      	bne.n	8004ed0 <HAL_SPI_Transmit+0x1ea>
>>>>>>> Stashed changes
=======
 8004d7e:	f7fd fbe7 	bl	8002550 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d803      	bhi.n	8004d96 <HAL_SPI_Transmit+0x268>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d102      	bne.n	8004d9c <HAL_SPI_Transmit+0x26e>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004da0:	e026      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1b5      	bne.n	8004d18 <HAL_SPI_Transmit+0x1ea>
>>>>>>> Stashed changes
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	6839      	ldr	r1, [r7, #0]
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fb5b 	bl	80044cc <SPI_EndRxTxTransaction>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	661a      	str	r2, [r3, #96]	; 0x60
=======
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	6839      	ldr	r1, [r7, #0]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 fb5b 	bl	8005624 <SPI_EndRxTxTransaction>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	661a      	str	r2, [r3, #96]	; 0x60
>>>>>>> Stashed changes
=======
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fb5b 	bl	800546c <SPI_EndRxTxTransaction>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	661a      	str	r2, [r3, #96]	; 0x60
>>>>>>> Stashed changes
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e000      	b.n	8003e50 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003e4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_SPI_TransmitReceive>:
=======
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f82:	2300      	movs	r3, #0
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	e000      	b.n	8004fa8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004fa6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_SPI_TransmitReceive>:
>>>>>>> Stashed changes
=======
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dca:	2300      	movs	r3, #0
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e000      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004dee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e00:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3720      	adds	r7, #32
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_SPI_TransmitReceive>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b08a      	sub	sp, #40	; 0x28
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	807b      	strh	r3, [r7, #2]
=======
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b08a      	sub	sp, #40	; 0x28
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	607a      	str	r2, [r7, #4]
 8004fce:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
=======
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b08a      	sub	sp, #40	; 0x28
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	607a      	str	r2, [r7, #4]
 8004e16:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003e78:	2301      	movs	r3, #1
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
=======
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
>>>>>>> Stashed changes
=======
 8004e18:	2301      	movs	r3, #1
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
>>>>>>> Stashed changes

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_SPI_TransmitReceive+0x26>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e1fb      	b.n	8004288 <HAL_SPI_TransmitReceive+0x41e>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e98:	f7fd fe74 	bl	8001b84 <HAL_GetTick>
 8003e9c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ea4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003eac:	887b      	ldrh	r3, [r7, #2]
 8003eae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003eb0:	887b      	ldrh	r3, [r7, #2]
 8003eb2:	823b      	strh	r3, [r7, #16]
=======
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_SPI_TransmitReceive+0x26>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e1fb      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x41e>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ff0:	f7fd fb8a 	bl	8002708 <HAL_GetTick>
 8004ff4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ffc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005004:	887b      	ldrh	r3, [r7, #2]
 8005006:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005008:	887b      	ldrh	r3, [r7, #2]
 800500a:	823b      	strh	r3, [r7, #16]
>>>>>>> Stashed changes
=======
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_SPI_TransmitReceive+0x26>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e1fb      	b.n	8005228 <HAL_SPI_TransmitReceive+0x41e>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e38:	f7fd fb8a 	bl	8002550 <HAL_GetTick>
 8004e3c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e44:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004e4c:	887b      	ldrh	r3, [r7, #2]
 8004e4e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004e50:	887b      	ldrh	r3, [r7, #2]
 8004e52:	823b      	strh	r3, [r7, #16]
>>>>>>> Stashed changes
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003eb4:	7efb      	ldrb	r3, [r7, #27]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d00e      	beq.n	8003ed8 <HAL_SPI_TransmitReceive+0x6e>
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ec0:	d106      	bne.n	8003ed0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <HAL_SPI_TransmitReceive+0x66>
 8003eca:	7efb      	ldrb	r3, [r7, #27]
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d003      	beq.n	8003ed8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ed6:	e1cd      	b.n	8004274 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <HAL_SPI_TransmitReceive+0x80>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_SPI_TransmitReceive+0x80>
 8003ee4:	887b      	ldrh	r3, [r7, #2]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d103      	bne.n	8003ef2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ef0:	e1c0      	b.n	8004274 <HAL_SPI_TransmitReceive+0x40a>
=======
 800500c:	7efb      	ldrb	r3, [r7, #27]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d00e      	beq.n	8005030 <HAL_SPI_TransmitReceive+0x6e>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005018:	d106      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d102      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x66>
 8005022:	7efb      	ldrb	r3, [r7, #27]
 8005024:	2b04      	cmp	r3, #4
 8005026:	d003      	beq.n	8005030 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005028:	2302      	movs	r3, #2
 800502a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800502e:	e1cd      	b.n	80053cc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d005      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x80>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x80>
 800503c:	887b      	ldrh	r3, [r7, #2]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d103      	bne.n	800504a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005048:	e1c0      	b.n	80053cc <HAL_SPI_TransmitReceive+0x40a>
>>>>>>> Stashed changes
=======
 8004e54:	7efb      	ldrb	r3, [r7, #27]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d00e      	beq.n	8004e78 <HAL_SPI_TransmitReceive+0x6e>
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e60:	d106      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x66>
 8004e6a:	7efb      	ldrb	r3, [r7, #27]
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d003      	beq.n	8004e78 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004e70:	2302      	movs	r3, #2
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e76:	e1cd      	b.n	8005214 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <HAL_SPI_TransmitReceive+0x80>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <HAL_SPI_TransmitReceive+0x80>
 8004e84:	887b      	ldrh	r3, [r7, #2]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e90:	e1c0      	b.n	8005214 <HAL_SPI_TransmitReceive+0x40a>
>>>>>>> Stashed changes
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d003      	beq.n	8003f06 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2205      	movs	r2, #5
 8003f02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
=======
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b04      	cmp	r3, #4
 8005054:	d003      	beq.n	800505e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2205      	movs	r2, #5
 800505a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
>>>>>>> Stashed changes
=======
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d003      	beq.n	8004ea6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2205      	movs	r2, #5
 8004ea2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
>>>>>>> Stashed changes
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	887a      	ldrh	r2, [r7, #2]
 8003f16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	887a      	ldrh	r2, [r7, #2]
 8003f1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	887a      	ldrh	r2, [r7, #2]
 8003f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	887a      	ldrh	r2, [r7, #2]
 8003f32:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	651a      	str	r2, [r3, #80]	; 0x50
=======
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	887a      	ldrh	r2, [r7, #2]
 800506e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	887a      	ldrh	r2, [r7, #2]
 8005076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	887a      	ldrh	r2, [r7, #2]
 8005084:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	887a      	ldrh	r2, [r7, #2]
 800508a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> Stashed changes
=======
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	887a      	ldrh	r2, [r7, #2]
 8004eb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	887a      	ldrh	r2, [r7, #2]
 8004ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	887a      	ldrh	r2, [r7, #2]
 8004ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	887a      	ldrh	r2, [r7, #2]
 8004ed2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> Stashed changes
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f48:	d802      	bhi.n	8003f50 <HAL_SPI_TransmitReceive+0xe6>
 8003f4a:	8a3b      	ldrh	r3, [r7, #16]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d908      	bls.n	8003f62 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	e007      	b.n	8003f72 <HAL_SPI_TransmitReceive+0x108>
=======
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050a0:	d802      	bhi.n	80050a8 <HAL_SPI_TransmitReceive+0xe6>
 80050a2:	8a3b      	ldrh	r3, [r7, #16]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d908      	bls.n	80050ba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050b6:	605a      	str	r2, [r3, #4]
 80050b8:	e007      	b.n	80050ca <HAL_SPI_TransmitReceive+0x108>
>>>>>>> Stashed changes
=======
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ee8:	d802      	bhi.n	8004ef0 <HAL_SPI_TransmitReceive+0xe6>
 8004eea:	8a3b      	ldrh	r3, [r7, #16]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d908      	bls.n	8004f02 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004efe:	605a      	str	r2, [r3, #4]
 8004f00:	e007      	b.n	8004f12 <HAL_SPI_TransmitReceive+0x108>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f70:	605a      	str	r2, [r3, #4]
=======
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050c8:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
=======
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f10:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d007      	beq.n	8003f90 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f8e:	601a      	str	r2, [r3, #0]
=======
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d007      	beq.n	80050e8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050e6:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
=======
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1c:	2b40      	cmp	r3, #64	; 0x40
 8004f1e:	d007      	beq.n	8004f30 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f2e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f98:	d97c      	bls.n	8004094 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_SPI_TransmitReceive+0x13e>
 8003fa2:	8a7b      	ldrh	r3, [r7, #18]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d169      	bne.n	800407c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	881a      	ldrh	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	1c9a      	adds	r2, r3, #2
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fcc:	e056      	b.n	800407c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d11b      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x1aa>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <HAL_SPI_TransmitReceive+0x1aa>
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d113      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	881a      	ldrh	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	1c9a      	adds	r2, r3, #2
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050f0:	d97c      	bls.n	80051ec <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_SPI_TransmitReceive+0x13e>
 80050fa:	8a7b      	ldrh	r3, [r7, #18]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d169      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	881a      	ldrh	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	1c9a      	adds	r2, r3, #2
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005124:	e056      	b.n	80051d4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b02      	cmp	r3, #2
 8005132:	d11b      	bne.n	800516c <HAL_SPI_TransmitReceive+0x1aa>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d016      	beq.n	800516c <HAL_SPI_TransmitReceive+0x1aa>
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	2b01      	cmp	r3, #1
 8005142:	d113      	bne.n	800516c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	881a      	ldrh	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	1c9a      	adds	r2, r3, #2
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes
=======
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f38:	d97c      	bls.n	8005034 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_SPI_TransmitReceive+0x13e>
 8004f42:	8a7b      	ldrh	r3, [r7, #18]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d169      	bne.n	800501c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	881a      	ldrh	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	1c9a      	adds	r2, r3, #2
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f6c:	e056      	b.n	800501c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d11b      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x1aa>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d016      	beq.n	8004fb4 <HAL_SPI_TransmitReceive+0x1aa>
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d113      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	881a      	ldrh	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	1c9a      	adds	r2, r3, #2
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b01      	cmp	r3, #1
 8004020:	d11c      	bne.n	800405c <HAL_SPI_TransmitReceive+0x1f2>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	b292      	uxth	r2, r2
 800403a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	1c9a      	adds	r2, r3, #2
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004058:	2301      	movs	r3, #1
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800405c:	f7fd fd92 	bl	8001b84 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004068:	429a      	cmp	r2, r3
 800406a:	d807      	bhi.n	800407c <HAL_SPI_TransmitReceive+0x212>
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004072:	d003      	beq.n	800407c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800407a:	e0fb      	b.n	8004274 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1a3      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x164>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d19d      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x164>
 8004092:	e0df      	b.n	8004254 <HAL_SPI_TransmitReceive+0x3ea>
=======
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b01      	cmp	r3, #1
 8005178:	d11c      	bne.n	80051b4 <HAL_SPI_TransmitReceive+0x1f2>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	b292      	uxth	r2, r2
 8005192:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	1c9a      	adds	r2, r3, #2
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051b0:	2301      	movs	r3, #1
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051b4:	f7fd faa8 	bl	8002708 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d807      	bhi.n	80051d4 <HAL_SPI_TransmitReceive+0x212>
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d003      	beq.n	80051d4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80051d2:	e0fb      	b.n	80053cc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1a3      	bne.n	8005126 <HAL_SPI_TransmitReceive+0x164>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d19d      	bne.n	8005126 <HAL_SPI_TransmitReceive+0x164>
 80051ea:	e0df      	b.n	80053ac <HAL_SPI_TransmitReceive+0x3ea>
>>>>>>> Stashed changes
=======
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d11c      	bne.n	8004ffc <HAL_SPI_TransmitReceive+0x1f2>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d016      	beq.n	8004ffc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	b292      	uxth	r2, r2
 8004fda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	1c9a      	adds	r2, r3, #2
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ffc:	f7fd faa8 	bl	8002550 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005008:	429a      	cmp	r2, r3
 800500a:	d807      	bhi.n	800501c <HAL_SPI_TransmitReceive+0x212>
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d003      	beq.n	800501c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800501a:	e0fb      	b.n	8005214 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1a3      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x164>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d19d      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x164>
 8005032:	e0df      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x3ea>
>>>>>>> Stashed changes
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_SPI_TransmitReceive+0x23a>
 800409c:	8a7b      	ldrh	r3, [r7, #18]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	f040 80cb 	bne.w	800423a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d912      	bls.n	80040d4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	881a      	ldrh	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	1c9a      	adds	r2, r3, #2
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b02      	subs	r3, #2
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040d2:	e0b2      	b.n	800423a <HAL_SPI_TransmitReceive+0x3d0>
=======
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_SPI_TransmitReceive+0x23a>
 80051f4:	8a7b      	ldrh	r3, [r7, #18]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	f040 80cb 	bne.w	8005392 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b01      	cmp	r3, #1
 8005204:	d912      	bls.n	800522c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	881a      	ldrh	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	1c9a      	adds	r2, r3, #2
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b02      	subs	r3, #2
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	87da      	strh	r2, [r3, #62]	; 0x3e
 800522a:	e0b2      	b.n	8005392 <HAL_SPI_TransmitReceive+0x3d0>
>>>>>>> Stashed changes
=======
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_SPI_TransmitReceive+0x23a>
 800503c:	8a7b      	ldrh	r3, [r7, #18]
 800503e:	2b01      	cmp	r3, #1
 8005040:	f040 80cb 	bne.w	80051da <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	d912      	bls.n	8005074 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	881a      	ldrh	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	1c9a      	adds	r2, r3, #2
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b02      	subs	r3, #2
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005072:	e0b2      	b.n	80051da <HAL_SPI_TransmitReceive+0x3d0>
>>>>>>> Stashed changes
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	7812      	ldrb	r2, [r2, #0]
 80040e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040fa:	e09e      	b.n	800423a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d134      	bne.n	8004174 <HAL_SPI_TransmitReceive+0x30a>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d02f      	beq.n	8004174 <HAL_SPI_TransmitReceive+0x30a>
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	2b01      	cmp	r3, #1
 8004118:	d12c      	bne.n	8004174 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d912      	bls.n	800414a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	881a      	ldrh	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	1c9a      	adds	r2, r3, #2
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b02      	subs	r3, #2
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004148:	e012      	b.n	8004170 <HAL_SPI_TransmitReceive+0x306>
=======
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	330c      	adds	r3, #12
 8005236:	7812      	ldrb	r2, [r2, #0]
 8005238:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005252:	e09e      	b.n	8005392 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b02      	cmp	r3, #2
 8005260:	d134      	bne.n	80052cc <HAL_SPI_TransmitReceive+0x30a>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005266:	b29b      	uxth	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d02f      	beq.n	80052cc <HAL_SPI_TransmitReceive+0x30a>
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	2b01      	cmp	r3, #1
 8005270:	d12c      	bne.n	80052cc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005276:	b29b      	uxth	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	d912      	bls.n	80052a2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	881a      	ldrh	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	1c9a      	adds	r2, r3, #2
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b02      	subs	r3, #2
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052a0:	e012      	b.n	80052c8 <HAL_SPI_TransmitReceive+0x306>
>>>>>>> Stashed changes
=======
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	7812      	ldrb	r2, [r2, #0]
 8005080:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800509a:	e09e      	b.n	80051da <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d134      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x30a>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d02f      	beq.n	8005114 <HAL_SPI_TransmitReceive+0x30a>
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d12c      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d912      	bls.n	80050ea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	881a      	ldrh	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	1c9a      	adds	r2, r3, #2
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b02      	subs	r3, #2
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050e8:	e012      	b.n	8005110 <HAL_SPI_TransmitReceive+0x306>
>>>>>>> Stashed changes
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	330c      	adds	r3, #12
 8004154:	7812      	ldrb	r2, [r2, #0]
 8004156:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	330c      	adds	r3, #12
 80052ac:	7812      	ldrb	r2, [r2, #0]
 80052ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes
=======
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	7812      	ldrb	r2, [r2, #0]
 80050f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d148      	bne.n	8004214 <HAL_SPI_TransmitReceive+0x3aa>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d042      	beq.n	8004214 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b01      	cmp	r3, #1
 8004198:	d923      	bls.n	80041e2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	b292      	uxth	r2, r2
 80041a6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	1c9a      	adds	r2, r3, #2
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b02      	subs	r3, #2
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d81f      	bhi.n	8004210 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041de:	605a      	str	r2, [r3, #4]
 80041e0:	e016      	b.n	8004210 <HAL_SPI_TransmitReceive+0x3a6>
=======
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d148      	bne.n	800536c <HAL_SPI_TransmitReceive+0x3aa>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d042      	beq.n	800536c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d923      	bls.n	800533a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	b292      	uxth	r2, r2
 80052fe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	1c9a      	adds	r2, r3, #2
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b02      	subs	r3, #2
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	d81f      	bhi.n	8005368 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005336:	605a      	str	r2, [r3, #4]
 8005338:	e016      	b.n	8005368 <HAL_SPI_TransmitReceive+0x3a6>
>>>>>>> Stashed changes
=======
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b01      	cmp	r3, #1
 8005120:	d148      	bne.n	80051b4 <HAL_SPI_TransmitReceive+0x3aa>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d042      	beq.n	80051b4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	d923      	bls.n	8005182 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	b292      	uxth	r2, r2
 8005146:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	1c9a      	adds	r2, r3, #2
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b02      	subs	r3, #2
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	d81f      	bhi.n	80051b0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800517e:	605a      	str	r2, [r3, #4]
 8005180:	e016      	b.n	80051b0 <HAL_SPI_TransmitReceive+0x3a6>
>>>>>>> Stashed changes
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f103 020c 	add.w	r2, r3, #12
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	7812      	ldrb	r2, [r2, #0]
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004210:	2301      	movs	r3, #1
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004214:	f7fd fcb6 	bl	8001b84 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004220:	429a      	cmp	r2, r3
 8004222:	d803      	bhi.n	800422c <HAL_SPI_TransmitReceive+0x3c2>
 8004224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d102      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x3c8>
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004238:	e01c      	b.n	8004274 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	f47f af5b 	bne.w	80040fc <HAL_SPI_TransmitReceive+0x292>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	f47f af54 	bne.w	80040fc <HAL_SPI_TransmitReceive+0x292>
=======
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f103 020c 	add.w	r2, r3, #12
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	7812      	ldrb	r2, [r2, #0]
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800535c:	b29b      	uxth	r3, r3
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005368:	2301      	movs	r3, #1
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800536c:	f7fd f9cc 	bl	8002708 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005378:	429a      	cmp	r2, r3
 800537a:	d803      	bhi.n	8005384 <HAL_SPI_TransmitReceive+0x3c2>
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005382:	d102      	bne.n	800538a <HAL_SPI_TransmitReceive+0x3c8>
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	2b00      	cmp	r3, #0
 8005388:	d103      	bne.n	8005392 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005390:	e01c      	b.n	80053cc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	f47f af5b 	bne.w	8005254 <HAL_SPI_TransmitReceive+0x292>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f47f af54 	bne.w	8005254 <HAL_SPI_TransmitReceive+0x292>
>>>>>>> Stashed changes
=======
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f103 020c 	add.w	r2, r3, #12
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	7812      	ldrb	r2, [r2, #0]
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051b0:	2301      	movs	r3, #1
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051b4:	f7fd f9cc 	bl	8002550 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d803      	bhi.n	80051cc <HAL_SPI_TransmitReceive+0x3c2>
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d102      	bne.n	80051d2 <HAL_SPI_TransmitReceive+0x3c8>
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d103      	bne.n	80051da <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80051d8:	e01c      	b.n	8005214 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051de:	b29b      	uxth	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f47f af5b 	bne.w	800509c <HAL_SPI_TransmitReceive+0x292>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f47f af54 	bne.w	800509c <HAL_SPI_TransmitReceive+0x292>
>>>>>>> Stashed changes
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f937 	bl	80044cc <SPI_EndRxTxTransaction>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d006      	beq.n	8004272 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	661a      	str	r2, [r3, #96]	; 0x60
 8004270:	e000      	b.n	8004274 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004272:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004288:	4618      	mov	r0, r3
 800428a:	3728      	adds	r7, #40	; 0x28
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <SPI_WaitFlagStateUntilTimeout>:
=======
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f937 	bl	8005624 <SPI_EndRxTxTransaction>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d006      	beq.n	80053ca <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	661a      	str	r2, [r3, #96]	; 0x60
 80053c8:	e000      	b.n	80053cc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80053ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80053dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3728      	adds	r7, #40	; 0x28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> Stashed changes
=======
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f937 	bl	800546c <SPI_EndRxTxTransaction>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d006      	beq.n	8005212 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	661a      	str	r2, [r3, #96]	; 0x60
 8005210:	e000      	b.n	8005214 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005212:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005228:	4618      	mov	r0, r3
 800522a:	3728      	adds	r7, #40	; 0x28
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	71fb      	strb	r3, [r7, #7]
=======
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	4613      	mov	r3, r2
 80053f6:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
=======
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	4613      	mov	r3, r2
 800523e:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80042a0:	f7fd fc70 	bl	8001b84 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	4413      	add	r3, r2
 80042ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042b0:	f7fd fc68 	bl	8001b84 <HAL_GetTick>
 80042b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042b6:	4b39      	ldr	r3, [pc, #228]	; (800439c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	015b      	lsls	r3, r3, #5
 80042bc:	0d1b      	lsrs	r3, r3, #20
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	fb02 f303 	mul.w	r3, r2, r3
 80042c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042c6:	e054      	b.n	8004372 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d050      	beq.n	8004372 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042d0:	f7fd fc58 	bl	8001b84 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d902      	bls.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d13d      	bne.n	8004362 <SPI_WaitFlagStateUntilTimeout+0xd2>
=======
 80053f8:	f7fd f986 	bl	8002708 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	4413      	add	r3, r2
 8005406:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005408:	f7fd f97e 	bl	8002708 <HAL_GetTick>
 800540c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800540e:	4b39      	ldr	r3, [pc, #228]	; (80054f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	015b      	lsls	r3, r3, #5
 8005414:	0d1b      	lsrs	r3, r3, #20
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	fb02 f303 	mul.w	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800541e:	e054      	b.n	80054ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d050      	beq.n	80054ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005428:	f7fd f96e 	bl	8002708 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	429a      	cmp	r2, r3
 8005436:	d902      	bls.n	800543e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d13d      	bne.n	80054ba <SPI_WaitFlagStateUntilTimeout+0xd2>
>>>>>>> Stashed changes
=======
 8005240:	f7fd f986 	bl	8002550 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	4413      	add	r3, r2
 800524e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005250:	f7fd f97e 	bl	8002550 <HAL_GetTick>
 8005254:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005256:	4b39      	ldr	r3, [pc, #228]	; (800533c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	015b      	lsls	r3, r3, #5
 800525c:	0d1b      	lsrs	r3, r3, #20
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	fb02 f303 	mul.w	r3, r2, r3
 8005264:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005266:	e054      	b.n	8005312 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526e:	d050      	beq.n	8005312 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005270:	f7fd f96e 	bl	8002550 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	429a      	cmp	r2, r3
 800527e:	d902      	bls.n	8005286 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d13d      	bne.n	8005302 <SPI_WaitFlagStateUntilTimeout+0xd2>
>>>>>>> Stashed changes
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042fe:	d111      	bne.n	8004324 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004308:	d004      	beq.n	8004314 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004312:	d107      	bne.n	8004324 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004322:	601a      	str	r2, [r3, #0]
=======
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800544c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005456:	d111      	bne.n	800547c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005460:	d004      	beq.n	800546c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800546a:	d107      	bne.n	800547c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800547a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
=======
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005294:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800529e:	d111      	bne.n	80052c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a8:	d004      	beq.n	80052b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b2:	d107      	bne.n	80052c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c2:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432c:	d10f      	bne.n	800434e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800434c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e017      	b.n	8004392 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	3b01      	subs	r3, #1
 8004370:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4013      	ands	r3, r2
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	429a      	cmp	r2, r3
 8004380:	bf0c      	ite	eq
 8004382:	2301      	moveq	r3, #1
 8004384:	2300      	movne	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	429a      	cmp	r2, r3
 800438e:	d19b      	bne.n	80042c8 <SPI_WaitFlagStateUntilTimeout+0x38>
=======
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005484:	d10f      	bne.n	80054a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e017      	b.n	80054ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4013      	ands	r3, r2
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	bf0c      	ite	eq
 80054da:	2301      	moveq	r3, #1
 80054dc:	2300      	movne	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d19b      	bne.n	8005420 <SPI_WaitFlagStateUntilTimeout+0x38>
>>>>>>> Stashed changes
=======
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052cc:	d10f      	bne.n	80052ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e017      	b.n	8005332 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	3b01      	subs	r3, #1
 8005310:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4013      	ands	r3, r2
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	429a      	cmp	r2, r3
 8005320:	bf0c      	ite	eq
 8005322:	2301      	moveq	r3, #1
 8005324:	2300      	movne	r3, #0
 8005326:	b2db      	uxtb	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	429a      	cmp	r2, r3
 800532e:	d19b      	bne.n	8005268 <SPI_WaitFlagStateUntilTimeout+0x38>
>>>>>>> Stashed changes
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000004 	.word	0x20000004

080043a0 <SPI_WaitFifoStateUntilTimeout>:
=======
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3720      	adds	r7, #32
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20000004 	.word	0x20000004

080054f8 <SPI_WaitFifoStateUntilTimeout>:
>>>>>>> Stashed changes
=======
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000004 	.word	0x20000004

08005340 <SPI_WaitFifoStateUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	; 0x28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
=======
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08a      	sub	sp, #40	; 0x28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
=======
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	; 0x28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80043ae:	2300      	movs	r3, #0
 80043b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043b2:	f7fd fbe7 	bl	8001b84 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	4413      	add	r3, r2
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80043c2:	f7fd fbdf 	bl	8001b84 <HAL_GetTick>
 80043c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043d0:	4b3d      	ldr	r3, [pc, #244]	; (80044c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	00da      	lsls	r2, r3, #3
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	0d1b      	lsrs	r3, r3, #20
 80043e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043e8:	e060      	b.n	80044ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043f0:	d107      	bne.n	8004402 <SPI_WaitFifoStateUntilTimeout+0x62>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d104      	bne.n	8004402 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004400:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d050      	beq.n	80044ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800440a:	f7fd fbbb 	bl	8001b84 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004416:	429a      	cmp	r2, r3
 8004418:	d902      	bls.n	8004420 <SPI_WaitFifoStateUntilTimeout+0x80>
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	2b00      	cmp	r3, #0
 800441e:	d13d      	bne.n	800449c <SPI_WaitFifoStateUntilTimeout+0xfc>
=======
 8005506:	2300      	movs	r3, #0
 8005508:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800550a:	f7fd f8fd 	bl	8002708 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	4413      	add	r3, r2
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800551a:	f7fd f8f5 	bl	8002708 <HAL_GetTick>
 800551e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	330c      	adds	r3, #12
 8005526:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005528:	4b3d      	ldr	r3, [pc, #244]	; (8005620 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	00da      	lsls	r2, r3, #3
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	0d1b      	lsrs	r3, r3, #20
 8005538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553a:	fb02 f303 	mul.w	r3, r2, r3
 800553e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005540:	e060      	b.n	8005604 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005548:	d107      	bne.n	800555a <SPI_WaitFifoStateUntilTimeout+0x62>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d104      	bne.n	800555a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005558:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005560:	d050      	beq.n	8005604 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005562:	f7fd f8d1 	bl	8002708 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556e:	429a      	cmp	r2, r3
 8005570:	d902      	bls.n	8005578 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	2b00      	cmp	r3, #0
 8005576:	d13d      	bne.n	80055f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
>>>>>>> Stashed changes
=======
 800534e:	2300      	movs	r3, #0
 8005350:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005352:	f7fd f8fd 	bl	8002550 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	4413      	add	r3, r2
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005362:	f7fd f8f5 	bl	8002550 <HAL_GetTick>
 8005366:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	330c      	adds	r3, #12
 800536e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005370:	4b3d      	ldr	r3, [pc, #244]	; (8005468 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	00da      	lsls	r2, r3, #3
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	0d1b      	lsrs	r3, r3, #20
 8005380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005388:	e060      	b.n	800544c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005390:	d107      	bne.n	80053a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d104      	bne.n	80053a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a8:	d050      	beq.n	800544c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053aa:	f7fd f8d1 	bl	8002550 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d902      	bls.n	80053c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d13d      	bne.n	800543c <SPI_WaitFifoStateUntilTimeout+0xfc>
>>>>>>> Stashed changes
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800442e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004438:	d111      	bne.n	800445e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004442:	d004      	beq.n	800444e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444c:	d107      	bne.n	800445e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800445c:	601a      	str	r2, [r3, #0]
=======
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005586:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005590:	d111      	bne.n	80055b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800559a:	d004      	beq.n	80055a6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a4:	d107      	bne.n	80055b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
=======
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d8:	d111      	bne.n	80053fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e2:	d004      	beq.n	80053ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ec:	d107      	bne.n	80053fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fc:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004466:	d10f      	bne.n	8004488 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004486:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e010      	b.n	80044be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4013      	ands	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d196      	bne.n	80043ea <SPI_WaitFifoStateUntilTimeout+0x4a>
=======
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055be:	d10f      	bne.n	80055e0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e010      	b.n	8005616 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	3b01      	subs	r3, #1
 8005602:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	4013      	ands	r3, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	d196      	bne.n	8005542 <SPI_WaitFifoStateUntilTimeout+0x4a>
>>>>>>> Stashed changes
=======
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005406:	d10f      	bne.n	8005428 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005426:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e010      	b.n	800545e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	3b01      	subs	r3, #1
 800544a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4013      	ands	r3, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	429a      	cmp	r2, r3
 800545a:	d196      	bne.n	800538a <SPI_WaitFifoStateUntilTimeout+0x4a>
>>>>>>> Stashed changes
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3728      	adds	r7, #40	; 0x28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000004 	.word	0x20000004

080044cc <SPI_EndRxTxTransaction>:
=======
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3728      	adds	r7, #40	; 0x28
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000004 	.word	0x20000004

08005624 <SPI_EndRxTxTransaction>:
>>>>>>> Stashed changes
=======
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3728      	adds	r7, #40	; 0x28
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000004 	.word	0x20000004

0800546c <SPI_EndRxTxTransaction>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2200      	movs	r2, #0
 80044e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff ff5b 	bl	80043a0 <SPI_WaitFifoStateUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f4:	f043 0220 	orr.w	r2, r3, #32
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e046      	b.n	800458e <SPI_EndRxTxTransaction+0xc2>
=======
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af02      	add	r7, sp, #8
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2200      	movs	r2, #0
 8005638:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f7ff ff5b 	bl	80054f8 <SPI_WaitFifoStateUntilTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d007      	beq.n	8005658 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800564c:	f043 0220 	orr.w	r2, r3, #32
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e046      	b.n	80056e6 <SPI_EndRxTxTransaction+0xc2>
>>>>>>> Stashed changes
=======
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af02      	add	r7, sp, #8
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2200      	movs	r2, #0
 8005480:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f7ff ff5b 	bl	8005340 <SPI_WaitFifoStateUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005494:	f043 0220 	orr.w	r2, r3, #32
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e046      	b.n	800552e <SPI_EndRxTxTransaction+0xc2>
>>>>>>> Stashed changes
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004500:	4b25      	ldr	r3, [pc, #148]	; (8004598 <SPI_EndRxTxTransaction+0xcc>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a25      	ldr	r2, [pc, #148]	; (800459c <SPI_EndRxTxTransaction+0xd0>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	0d5b      	lsrs	r3, r3, #21
 800450c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004510:	fb02 f303 	mul.w	r3, r2, r3
 8004514:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800451e:	d112      	bne.n	8004546 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2200      	movs	r2, #0
 8004528:	2180      	movs	r1, #128	; 0x80
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff feb0 	bl	8004290 <SPI_WaitFlagStateUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d016      	beq.n	8004564 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800453a:	f043 0220 	orr.w	r2, r3, #32
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e023      	b.n	800458e <SPI_EndRxTxTransaction+0xc2>
=======
 8005658:	4b25      	ldr	r3, [pc, #148]	; (80056f0 <SPI_EndRxTxTransaction+0xcc>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a25      	ldr	r2, [pc, #148]	; (80056f4 <SPI_EndRxTxTransaction+0xd0>)
 800565e:	fba2 2303 	umull	r2, r3, r2, r3
 8005662:	0d5b      	lsrs	r3, r3, #21
 8005664:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005668:	fb02 f303 	mul.w	r3, r2, r3
 800566c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005676:	d112      	bne.n	800569e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2200      	movs	r2, #0
 8005680:	2180      	movs	r1, #128	; 0x80
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f7ff feb0 	bl	80053e8 <SPI_WaitFlagStateUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d016      	beq.n	80056bc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005692:	f043 0220 	orr.w	r2, r3, #32
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e023      	b.n	80056e6 <SPI_EndRxTxTransaction+0xc2>
>>>>>>> Stashed changes
=======
 80054a0:	4b25      	ldr	r3, [pc, #148]	; (8005538 <SPI_EndRxTxTransaction+0xcc>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a25      	ldr	r2, [pc, #148]	; (800553c <SPI_EndRxTxTransaction+0xd0>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	0d5b      	lsrs	r3, r3, #21
 80054ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054b0:	fb02 f303 	mul.w	r3, r2, r3
 80054b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054be:	d112      	bne.n	80054e6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2200      	movs	r2, #0
 80054c8:	2180      	movs	r1, #128	; 0x80
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7ff feb0 	bl	8005230 <SPI_WaitFlagStateUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d016      	beq.n	8005504 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054da:	f043 0220 	orr.w	r2, r3, #32
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e023      	b.n	800552e <SPI_EndRxTxTransaction+0xc2>
>>>>>>> Stashed changes
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <SPI_EndRxTxTransaction+0x96>
=======
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <SPI_EndRxTxTransaction+0x96>
>>>>>>> Stashed changes
=======
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <SPI_EndRxTxTransaction+0x96>
>>>>>>> Stashed changes
      {
        break;
      }
      count--;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3b01      	subs	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455c:	2b80      	cmp	r3, #128	; 0x80
 800455e:	d0f2      	beq.n	8004546 <SPI_EndRxTxTransaction+0x7a>
 8004560:	e000      	b.n	8004564 <SPI_EndRxTxTransaction+0x98>
        break;
 8004562:	bf00      	nop
=======
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b4:	2b80      	cmp	r3, #128	; 0x80
 80056b6:	d0f2      	beq.n	800569e <SPI_EndRxTxTransaction+0x7a>
 80056b8:	e000      	b.n	80056bc <SPI_EndRxTxTransaction+0x98>
        break;
 80056ba:	bf00      	nop
>>>>>>> Stashed changes
=======
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fc:	2b80      	cmp	r3, #128	; 0x80
 80054fe:	d0f2      	beq.n	80054e6 <SPI_EndRxTxTransaction+0x7a>
 8005500:	e000      	b.n	8005504 <SPI_EndRxTxTransaction+0x98>
        break;
 8005502:	bf00      	nop
>>>>>>> Stashed changes
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2200      	movs	r2, #0
 800456c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff ff15 	bl	80043a0 <SPI_WaitFifoStateUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d007      	beq.n	800458c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e000      	b.n	800458e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000004 	.word	0x20000004
 800459c:	165e9f81 	.word	0x165e9f81

080045a0 <HAL_UART_Init>:
=======
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f7ff ff15 	bl	80054f8 <SPI_WaitFifoStateUntilTimeout>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d8:	f043 0220 	orr.w	r2, r3, #32
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e000      	b.n	80056e6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000004 	.word	0x20000004
 80056f4:	165e9f81 	.word	0x165e9f81

080056f8 <HAL_TIM_Base_Init>:
=======
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2200      	movs	r2, #0
 800550c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f7ff ff15 	bl	8005340 <SPI_WaitFifoStateUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005520:	f043 0220 	orr.w	r2, r3, #32
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e000      	b.n	800552e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000004 	.word	0x20000004
 800553c:	165e9f81 	.word	0x165e9f81

08005540 <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e049      	b.n	800579e <HAL_TIM_Base_Init+0xa6>
=======
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e049      	b.n	80055e6 <HAL_TIM_Base_Init+0xa6>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fc fd84 	bl	800222c <HAL_TIM_Base_MspInit>
=======
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fc fd7a 	bl	8002060 <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f000 fa46 	bl	8005bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_TIM_IRQHandler>:
=======
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	4619      	mov	r1, r3
 800557e:	4610      	mov	r0, r2
 8005580:	f000 fa46 	bl	8005a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_TIM_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d122      	bne.n	8005802 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d11b      	bne.n	8005802 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f06f 0202 	mvn.w	r2, #2
 80057d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_TIM_IRQHandler+0x4a>
=======
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b02      	cmp	r3, #2
 8005602:	d122      	bne.n	800564a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b02      	cmp	r3, #2
 8005610:	d11b      	bne.n	800564a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f06f 0202 	mvn.w	r2, #2
 800561a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f9cf 	bl	8005b8c <HAL_TIM_IC_CaptureCallback>
 80057ee:	e005      	b.n	80057fc <HAL_TIM_IRQHandler+0x56>
=======
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f9cf 	bl	80059d4 <HAL_TIM_IC_CaptureCallback>
 8005636:	e005      	b.n	8005644 <HAL_TIM_IRQHandler+0x56>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f9c1 	bl	8005b78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f9d2 	bl	8005ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	771a      	strb	r2, [r3, #28]
=======
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f9c1 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f9d2 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< Updated upstream
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b04      	cmp	r3, #4
 800580e:	d122      	bne.n	8005856 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b04      	cmp	r3, #4
 800581c:	d11b      	bne.n	8005856 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f06f 0204 	mvn.w	r2, #4
 8005826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_TIM_IRQHandler+0x9e>
=======
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b04      	cmp	r3, #4
 8005656:	d122      	bne.n	800569e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b04      	cmp	r3, #4
 8005664:	d11b      	bne.n	800569e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f06f 0204 	mvn.w	r2, #4
 800566e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HAL_TIM_IRQHandler+0x9e>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f9a5 	bl	8005b8c <HAL_TIM_IC_CaptureCallback>
 8005842:	e005      	b.n	8005850 <HAL_TIM_IRQHandler+0xaa>
=======
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f9a5 	bl	80059d4 <HAL_TIM_IC_CaptureCallback>
 800568a:	e005      	b.n	8005698 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f997 	bl	8005b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f9a8 	bl	8005ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	771a      	strb	r2, [r3, #28]
=======
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f997 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f9a8 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< Updated upstream
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f003 0308 	and.w	r3, r3, #8
 8005860:	2b08      	cmp	r3, #8
 8005862:	d122      	bne.n	80058aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b08      	cmp	r3, #8
 8005870:	d11b      	bne.n	80058aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f06f 0208 	mvn.w	r2, #8
 800587a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2204      	movs	r2, #4
 8005880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_TIM_IRQHandler+0xf2>
=======
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d122      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d11b      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f06f 0208 	mvn.w	r2, #8
 80056c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2204      	movs	r2, #4
 80056c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f97b 	bl	8005b8c <HAL_TIM_IC_CaptureCallback>
 8005896:	e005      	b.n	80058a4 <HAL_TIM_IRQHandler+0xfe>
=======
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f97b 	bl	80059d4 <HAL_TIM_IC_CaptureCallback>
 80056de:	e005      	b.n	80056ec <HAL_TIM_IRQHandler+0xfe>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f96d 	bl	8005b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f97e 	bl	8005ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	771a      	strb	r2, [r3, #28]
=======
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f96d 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f97e 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< Updated upstream
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	f003 0310 	and.w	r3, r3, #16
 80058b4:	2b10      	cmp	r3, #16
 80058b6:	d122      	bne.n	80058fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	2b10      	cmp	r3, #16
 80058c4:	d11b      	bne.n	80058fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f06f 0210 	mvn.w	r2, #16
 80058ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2208      	movs	r2, #8
 80058d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_TIM_IRQHandler+0x146>
=======
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d122      	bne.n	8005746 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0310 	and.w	r3, r3, #16
 800570a:	2b10      	cmp	r3, #16
 800570c:	d11b      	bne.n	8005746 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f06f 0210 	mvn.w	r2, #16
 8005716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2208      	movs	r2, #8
 800571c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_TIM_IRQHandler+0x146>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f951 	bl	8005b8c <HAL_TIM_IC_CaptureCallback>
 80058ea:	e005      	b.n	80058f8 <HAL_TIM_IRQHandler+0x152>
=======
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f951 	bl	80059d4 <HAL_TIM_IC_CaptureCallback>
 8005732:	e005      	b.n	8005740 <HAL_TIM_IRQHandler+0x152>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f943 	bl	8005b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f954 	bl	8005ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	771a      	strb	r2, [r3, #28]
=======
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f943 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f954 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< Updated upstream
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b01      	cmp	r3, #1
 800590a:	d10e      	bne.n	800592a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b01      	cmp	r3, #1
 8005918:	d107      	bne.n	800592a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f06f 0201 	mvn.w	r2, #1
 8005922:	611a      	str	r2, [r3, #16]
=======
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b01      	cmp	r3, #1
 8005752:	d10e      	bne.n	8005772 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b01      	cmp	r3, #1
 8005760:	d107      	bne.n	8005772 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f06f 0201 	mvn.w	r2, #1
 800576a:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< Updated upstream
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fc fca7 	bl	8002278 <HAL_TIM_PeriodElapsedCallback>
=======
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7fc fc9d 	bl	80020ac <HAL_TIM_PeriodElapsedCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< Updated upstream
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005934:	2b80      	cmp	r3, #128	; 0x80
 8005936:	d10e      	bne.n	8005956 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d107      	bne.n	8005956 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800594e:	611a      	str	r2, [r3, #16]
=======
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577c:	2b80      	cmp	r3, #128	; 0x80
 800577e:	d10e      	bne.n	800579e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578a:	2b80      	cmp	r3, #128	; 0x80
 800578c:	d107      	bne.n	800579e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005796:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< Updated upstream
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fb0b 	bl	8005f6c <HAL_TIMEx_BreakCallback>
=======
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fb0b 	bl	8005db4 <HAL_TIMEx_BreakCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
<<<<<<< Updated upstream
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005964:	d10e      	bne.n	8005984 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005970:	2b80      	cmp	r3, #128	; 0x80
 8005972:	d107      	bne.n	8005984 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800597c:	611a      	str	r2, [r3, #16]
=======
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ac:	d10e      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b8:	2b80      	cmp	r3, #128	; 0x80
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057c4:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< Updated upstream
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fafe 	bl	8005f80 <HAL_TIMEx_Break2Callback>
=======
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fafe 	bl	8005dc8 <HAL_TIMEx_Break2Callback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< Updated upstream
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598e:	2b40      	cmp	r3, #64	; 0x40
 8005990:	d10e      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599c:	2b40      	cmp	r3, #64	; 0x40
 800599e:	d107      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059a8:	611a      	str	r2, [r3, #16]
=======
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d10e      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	d107      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057f0:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< Updated upstream
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f902 	bl	8005bb4 <HAL_TIM_TriggerCallback>
=======
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f902 	bl	80059fc <HAL_TIM_TriggerCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< Updated upstream
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d10e      	bne.n	80059dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d107      	bne.n	80059dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f06f 0220 	mvn.w	r2, #32
 80059d4:	611a      	str	r2, [r3, #16]
=======
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b20      	cmp	r3, #32
 8005804:	d10e      	bne.n	8005824 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b20      	cmp	r3, #32
 8005812:	d107      	bne.n	8005824 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0220 	mvn.w	r2, #32
 800581c:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< Updated upstream
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fabe 	bl	8005f58 <HAL_TIMEx_CommutCallback>
=======
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fabe 	bl	8005da0 <HAL_TIMEx_CommutCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 80059dc:	bf00      	nop
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_TIM_ConfigClockSource>:
=======
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_TIM_ConfigClockSource>:
>>>>>>> Stashed changes
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< Updated upstream
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	73fb      	strb	r3, [r7, #15]
=======
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_TIM_ConfigClockSource+0x1c>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e0b4      	b.n	8005b6a <HAL_TIM_ConfigClockSource+0x186>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_TIM_ConfigClockSource+0x1c>
 8005844:	2302      	movs	r3, #2
 8005846:	e0b4      	b.n	80059b2 <HAL_TIM_ConfigClockSource+0x186>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< Updated upstream
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	4b56      	ldr	r3, [pc, #344]	; (8005b74 <HAL_TIM_ConfigClockSource+0x190>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a38:	d03e      	beq.n	8005ab8 <HAL_TIM_ConfigClockSource+0xd4>
 8005a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3e:	f200 8087 	bhi.w	8005b50 <HAL_TIM_ConfigClockSource+0x16c>
 8005a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a46:	f000 8086 	beq.w	8005b56 <HAL_TIM_ConfigClockSource+0x172>
 8005a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4e:	d87f      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x16c>
 8005a50:	2b70      	cmp	r3, #112	; 0x70
 8005a52:	d01a      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0xa6>
 8005a54:	2b70      	cmp	r3, #112	; 0x70
 8005a56:	d87b      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x16c>
 8005a58:	2b60      	cmp	r3, #96	; 0x60
 8005a5a:	d050      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x11a>
 8005a5c:	2b60      	cmp	r3, #96	; 0x60
 8005a5e:	d877      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x16c>
 8005a60:	2b50      	cmp	r3, #80	; 0x50
 8005a62:	d03c      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0xfa>
 8005a64:	2b50      	cmp	r3, #80	; 0x50
 8005a66:	d873      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x16c>
 8005a68:	2b40      	cmp	r3, #64	; 0x40
 8005a6a:	d058      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0x13a>
 8005a6c:	2b40      	cmp	r3, #64	; 0x40
 8005a6e:	d86f      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x16c>
 8005a70:	2b30      	cmp	r3, #48	; 0x30
 8005a72:	d064      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x15a>
 8005a74:	2b30      	cmp	r3, #48	; 0x30
 8005a76:	d86b      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x16c>
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	d060      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x15a>
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d867      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x16c>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d05c      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x15a>
 8005a84:	2b10      	cmp	r3, #16
 8005a86:	d05a      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x15a>
 8005a88:	e062      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x16c>
=======
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	4b56      	ldr	r3, [pc, #344]	; (80059bc <HAL_TIM_ConfigClockSource+0x190>)
 8005864:	4013      	ands	r3, r2
 8005866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800586e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005880:	d03e      	beq.n	8005900 <HAL_TIM_ConfigClockSource+0xd4>
 8005882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005886:	f200 8087 	bhi.w	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588e:	f000 8086 	beq.w	800599e <HAL_TIM_ConfigClockSource+0x172>
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005896:	d87f      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 8005898:	2b70      	cmp	r3, #112	; 0x70
 800589a:	d01a      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0xa6>
 800589c:	2b70      	cmp	r3, #112	; 0x70
 800589e:	d87b      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058a0:	2b60      	cmp	r3, #96	; 0x60
 80058a2:	d050      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0x11a>
 80058a4:	2b60      	cmp	r3, #96	; 0x60
 80058a6:	d877      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058a8:	2b50      	cmp	r3, #80	; 0x50
 80058aa:	d03c      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0xfa>
 80058ac:	2b50      	cmp	r3, #80	; 0x50
 80058ae:	d873      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	d058      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x13a>
 80058b4:	2b40      	cmp	r3, #64	; 0x40
 80058b6:	d86f      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b30      	cmp	r3, #48	; 0x30
 80058ba:	d064      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058bc:	2b30      	cmp	r3, #48	; 0x30
 80058be:	d86b      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d060      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	d867      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d05c      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d05a      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058d0:	e062      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6899      	ldr	r1, [r3, #8]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f000 f9af 	bl	8005dfc <TIM_ETR_SetConfig>
=======
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6899      	ldr	r1, [r3, #8]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f000 f9af 	bl	8005c44 <TIM_ETR_SetConfig>
>>>>>>> Stashed changes
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
<<<<<<< Updated upstream
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005aac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	609a      	str	r2, [r3, #8]
      break;
 8005ab6:	e04f      	b.n	8005b58 <HAL_TIM_ConfigClockSource+0x174>
=======
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	609a      	str	r2, [r3, #8]
      break;
 80058fe:	e04f      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	6899      	ldr	r1, [r3, #8]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f000 f998 	bl	8005dfc <TIM_ETR_SetConfig>
=======
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	6899      	ldr	r1, [r3, #8]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f000 f998 	bl	8005c44 <TIM_ETR_SetConfig>
>>>>>>> Stashed changes
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
<<<<<<< Updated upstream
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ada:	609a      	str	r2, [r3, #8]
      break;
 8005adc:	e03c      	b.n	8005b58 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005922:	609a      	str	r2, [r3, #8]
      break;
 8005924:	e03c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6859      	ldr	r1, [r3, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f000 f90c 	bl	8005d08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2150      	movs	r1, #80	; 0x50
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f965 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 8005afc:	e02c      	b.n	8005b58 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6859      	ldr	r1, [r3, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	461a      	mov	r2, r3
 8005934:	f000 f90c 	bl	8005b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2150      	movs	r1, #80	; 0x50
 800593e:	4618      	mov	r0, r3
 8005940:	f000 f965 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 8005944:	e02c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	6859      	ldr	r1, [r3, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f000 f92b 	bl	8005d66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2160      	movs	r1, #96	; 0x60
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 f955 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 8005b1c:	e01c      	b.n	8005b58 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6859      	ldr	r1, [r3, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	461a      	mov	r2, r3
 8005954:	f000 f92b 	bl	8005bae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2160      	movs	r1, #96	; 0x60
 800595e:	4618      	mov	r0, r3
 8005960:	f000 f955 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 8005964:	e01c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	6859      	ldr	r1, [r3, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f000 f8ec 	bl	8005d08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2140      	movs	r1, #64	; 0x40
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 f945 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 8005b3c:	e00c      	b.n	8005b58 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6859      	ldr	r1, [r3, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	461a      	mov	r2, r3
 8005974:	f000 f8ec 	bl	8005b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2140      	movs	r1, #64	; 0x40
 800597e:	4618      	mov	r0, r3
 8005980:	f000 f945 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 8005984:	e00c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< Updated upstream
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4619      	mov	r1, r3
 8005b48:	4610      	mov	r0, r2
 8005b4a:	f000 f93c 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 8005b4e:	e003      	b.n	8005b58 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4619      	mov	r1, r3
 8005990:	4610      	mov	r0, r2
 8005992:	f000 f93c 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 8005996:	e003      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes
    }

    default:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8005b50:	2301      	movs	r3, #1
 8005b52:	73fb      	strb	r3, [r7, #15]
      break;
 8005b54:	e000      	b.n	8005b58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	fffeff88 	.word	0xfffeff88

08005b78 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8005998:	2301      	movs	r3, #1
 800599a:	73fb      	strb	r3, [r7, #15]
      break;
 800599c:	e000      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800599e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	fffeff88 	.word	0xfffeff88

080059c0 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
=======
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_TIM_IC_CaptureCallback>:
=======
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Stashed changes
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
=======
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> Stashed changes
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
=======
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_TIM_TriggerCallback>:
=======
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIM_TriggerCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
=======
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <TIM_Base_SetConfig>:
=======
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a40      	ldr	r2, [pc, #256]	; (8005cdc <TIM_Base_SetConfig+0x114>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d013      	beq.n	8005c08 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be6:	d00f      	beq.n	8005c08 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3d      	ldr	r2, [pc, #244]	; (8005ce0 <TIM_Base_SetConfig+0x118>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00b      	beq.n	8005c08 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a3c      	ldr	r2, [pc, #240]	; (8005ce4 <TIM_Base_SetConfig+0x11c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d007      	beq.n	8005c08 <TIM_Base_SetConfig+0x40>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a3b      	ldr	r2, [pc, #236]	; (8005ce8 <TIM_Base_SetConfig+0x120>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_Base_SetConfig+0x40>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a3a      	ldr	r2, [pc, #232]	; (8005cec <TIM_Base_SetConfig+0x124>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d108      	bne.n	8005c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a2f      	ldr	r2, [pc, #188]	; (8005cdc <TIM_Base_SetConfig+0x114>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d02b      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c28:	d027      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2c      	ldr	r2, [pc, #176]	; (8005ce0 <TIM_Base_SetConfig+0x118>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d023      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a2b      	ldr	r2, [pc, #172]	; (8005ce4 <TIM_Base_SetConfig+0x11c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d01f      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ce8 <TIM_Base_SetConfig+0x120>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d01b      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a29      	ldr	r2, [pc, #164]	; (8005cec <TIM_Base_SetConfig+0x124>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d017      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a28      	ldr	r2, [pc, #160]	; (8005cf0 <TIM_Base_SetConfig+0x128>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a27      	ldr	r2, [pc, #156]	; (8005cf4 <TIM_Base_SetConfig+0x12c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00f      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a26      	ldr	r2, [pc, #152]	; (8005cf8 <TIM_Base_SetConfig+0x130>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00b      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a25      	ldr	r2, [pc, #148]	; (8005cfc <TIM_Base_SetConfig+0x134>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d007      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a24      	ldr	r2, [pc, #144]	; (8005d00 <TIM_Base_SetConfig+0x138>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d003      	beq.n	8005c7a <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a23      	ldr	r2, [pc, #140]	; (8005d04 <TIM_Base_SetConfig+0x13c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d108      	bne.n	8005c8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]
=======
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a40      	ldr	r2, [pc, #256]	; (8005b24 <TIM_Base_SetConfig+0x114>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d013      	beq.n	8005a50 <TIM_Base_SetConfig+0x40>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2e:	d00f      	beq.n	8005a50 <TIM_Base_SetConfig+0x40>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a3d      	ldr	r2, [pc, #244]	; (8005b28 <TIM_Base_SetConfig+0x118>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00b      	beq.n	8005a50 <TIM_Base_SetConfig+0x40>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a3c      	ldr	r2, [pc, #240]	; (8005b2c <TIM_Base_SetConfig+0x11c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d007      	beq.n	8005a50 <TIM_Base_SetConfig+0x40>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a3b      	ldr	r2, [pc, #236]	; (8005b30 <TIM_Base_SetConfig+0x120>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_Base_SetConfig+0x40>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a3a      	ldr	r2, [pc, #232]	; (8005b34 <TIM_Base_SetConfig+0x124>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d108      	bne.n	8005a62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2f      	ldr	r2, [pc, #188]	; (8005b24 <TIM_Base_SetConfig+0x114>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d02b      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a70:	d027      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a2c      	ldr	r2, [pc, #176]	; (8005b28 <TIM_Base_SetConfig+0x118>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d023      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a2b      	ldr	r2, [pc, #172]	; (8005b2c <TIM_Base_SetConfig+0x11c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d01f      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a2a      	ldr	r2, [pc, #168]	; (8005b30 <TIM_Base_SetConfig+0x120>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d01b      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a29      	ldr	r2, [pc, #164]	; (8005b34 <TIM_Base_SetConfig+0x124>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d017      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a28      	ldr	r2, [pc, #160]	; (8005b38 <TIM_Base_SetConfig+0x128>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d013      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a27      	ldr	r2, [pc, #156]	; (8005b3c <TIM_Base_SetConfig+0x12c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00f      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a26      	ldr	r2, [pc, #152]	; (8005b40 <TIM_Base_SetConfig+0x130>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00b      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a25      	ldr	r2, [pc, #148]	; (8005b44 <TIM_Base_SetConfig+0x134>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d007      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a24      	ldr	r2, [pc, #144]	; (8005b48 <TIM_Base_SetConfig+0x138>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d003      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a23      	ldr	r2, [pc, #140]	; (8005b4c <TIM_Base_SetConfig+0x13c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d108      	bne.n	8005ad4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a0a      	ldr	r2, [pc, #40]	; (8005cdc <TIM_Base_SetConfig+0x114>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_Base_SetConfig+0xf8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a0c      	ldr	r2, [pc, #48]	; (8005cec <TIM_Base_SetConfig+0x124>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d103      	bne.n	8005cc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a0a      	ldr	r2, [pc, #40]	; (8005b24 <TIM_Base_SetConfig+0x114>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d003      	beq.n	8005b08 <TIM_Base_SetConfig+0xf8>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a0c      	ldr	r2, [pc, #48]	; (8005b34 <TIM_Base_SetConfig+0x124>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d103      	bne.n	8005b10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	615a      	str	r2, [r3, #20]
}
 8005cce:	bf00      	nop
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40000800 	.word	0x40000800
 8005ce8:	40000c00 	.word	0x40000c00
 8005cec:	40010400 	.word	0x40010400
 8005cf0:	40014000 	.word	0x40014000
 8005cf4:	40014400 	.word	0x40014400
 8005cf8:	40014800 	.word	0x40014800
 8005cfc:	40001800 	.word	0x40001800
 8005d00:	40001c00 	.word	0x40001c00
 8005d04:	40002000 	.word	0x40002000

08005d08 <TIM_TI1_ConfigInputStage>:
=======
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	615a      	str	r2, [r3, #20]
}
 8005b16:	bf00      	nop
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40000400 	.word	0x40000400
 8005b2c:	40000800 	.word	0x40000800
 8005b30:	40000c00 	.word	0x40000c00
 8005b34:	40010400 	.word	0x40010400
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40014400 	.word	0x40014400
 8005b40:	40014800 	.word	0x40014800
 8005b44:	40001800 	.word	0x40001800
 8005b48:	40001c00 	.word	0x40001c00
 8005b4c:	40002000 	.word	0x40002000

08005b50 <TIM_TI1_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
=======
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f023 0201 	bic.w	r2, r3, #1
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f023 030a 	bic.w	r3, r3, #10
 8005d44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <TIM_TI2_ConfigInputStage>:
=======
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	f023 0201 	bic.w	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f023 030a 	bic.w	r3, r3, #10
 8005b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	621a      	str	r2, [r3, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <TIM_TI2_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8005d66:	b480      	push	{r7}
 8005d68:	b087      	sub	sp, #28
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	607a      	str	r2, [r7, #4]
=======
 8005bae:	b480      	push	{r7}
 8005bb0:	b087      	sub	sp, #28
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< Updated upstream
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f023 0210 	bic.w	r2, r3, #16
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	031b      	lsls	r3, r3, #12
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005da2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <TIM_ITRx_SetConfig>:
=======
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f023 0210 	bic.w	r2, r3, #16
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	031b      	lsls	r3, r3, #12
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <TIM_ITRx_SetConfig>:
>>>>>>> Stashed changes
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< Updated upstream
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
=======
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< Updated upstream
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f043 0307 	orr.w	r3, r3, #7
 8005de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	609a      	str	r2, [r3, #8]
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <TIM_ETR_SetConfig>:
=======
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f043 0307 	orr.w	r3, r3, #7
 8005c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	609a      	str	r2, [r3, #8]
}
 8005c38:	bf00      	nop
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <TIM_ETR_SetConfig>:
>>>>>>> Stashed changes
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< Updated upstream
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	021a      	lsls	r2, r3, #8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	609a      	str	r2, [r3, #8]
}
 8005e30:	bf00      	nop
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	021a      	lsls	r2, r3, #8
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	431a      	orrs	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	609a      	str	r2, [r3, #8]
}
 8005c78:	bf00      	nop
 8005c7a:	371c      	adds	r7, #28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> Stashed changes
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< Updated upstream
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
=======
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e06d      	b.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a30      	ldr	r2, [pc, #192]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d004      	beq.n	8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a2f      	ldr	r2, [pc, #188]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d108      	bne.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
=======
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e06d      	b.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a30      	ldr	r2, [pc, #192]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a2f      	ldr	r2, [pc, #188]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d108      	bne.n	8005ce2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< Updated upstream
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
=======
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< Updated upstream
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a20      	ldr	r2, [pc, #128]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d022      	beq.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec6:	d01d      	beq.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1d      	ldr	r2, [pc, #116]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d018      	beq.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a1c      	ldr	r2, [pc, #112]	; (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d013      	beq.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a1a      	ldr	r2, [pc, #104]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00e      	beq.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a15      	ldr	r2, [pc, #84]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d009      	beq.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a16      	ldr	r2, [pc, #88]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d004      	beq.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a15      	ldr	r2, [pc, #84]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d10c      	bne.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	609a      	str	r2, [r3, #8]
=======
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a20      	ldr	r2, [pc, #128]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d022      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0e:	d01d      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d018      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1c      	ldr	r2, [pc, #112]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d013      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00e      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a15      	ldr	r2, [pc, #84]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d009      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a16      	ldr	r2, [pc, #88]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a15      	ldr	r2, [pc, #84]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d10c      	bne.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< Updated upstream
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	40010000 	.word	0x40010000
 8005f40:	40010400 	.word	0x40010400
 8005f44:	40000400 	.word	0x40000400
 8005f48:	40000800 	.word	0x40000800
 8005f4c:	40000c00 	.word	0x40000c00
 8005f50:	40014000 	.word	0x40014000
 8005f54:	40001800 	.word	0x40001800

08005f58 <HAL_TIMEx_CommutCallback>:
=======
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	40010000 	.word	0x40010000
 8005d88:	40010400 	.word	0x40010400
 8005d8c:	40000400 	.word	0x40000400
 8005d90:	40000800 	.word	0x40000800
 8005d94:	40000c00 	.word	0x40000c00
 8005d98:	40014000 	.word	0x40014000
 8005d9c:	40001800 	.word	0x40001800

08005da0 <HAL_TIMEx_CommutCallback>:
>>>>>>> Stashed changes
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
=======
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_TIMEx_BreakCallback>:
=======
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIMEx_BreakCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
=======
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIMEx_Break2Callback>:
=======
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_TIMEx_Break2Callback>:
>>>>>>> Stashed changes
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
=======
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_UART_Init>:
>>>>>>> Stashed changes
=======
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_UART_Init>:
>>>>>>> Stashed changes
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e040      	b.n	8004634 <HAL_UART_Init+0x94>
=======
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e040      	b.n	8006028 <HAL_UART_Init+0x94>
>>>>>>> Stashed changes
=======
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e040      	b.n	8005e70 <HAL_UART_Init+0x94>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
=======
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
>>>>>>> Stashed changes
=======
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fd f8ee 	bl	80017a4 <HAL_UART_MspInit>
=======
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7fc f9b6 	bl	8002328 <HAL_UART_MspInit>
>>>>>>> Stashed changes
=======
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fc f9b6 	bl	8002170 <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2224      	movs	r2, #36	; 0x24
 80045cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fbd6 	bl	8004d90 <UART_SetConfig>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e022      	b.n	8004634 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fe2e 	bl	8005258 <UART_AdvFeatureConfig>
=======
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2224      	movs	r2, #36	; 0x24
 8005fc0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0201 	bic.w	r2, r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fbd6 	bl	8006784 <UART_SetConfig>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e022      	b.n	8006028 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fe2e 	bl	8006c4c <UART_AdvFeatureConfig>
>>>>>>> Stashed changes
=======
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2224      	movs	r2, #36	; 0x24
 8005e08:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0201 	bic.w	r2, r2, #1
 8005e18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fbd6 	bl	80065cc <UART_SetConfig>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e022      	b.n	8005e70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fe2e 	bl	8006a94 <UART_AdvFeatureConfig>
>>>>>>> Stashed changes
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800460a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800461a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 feb5 	bl	800539c <UART_CheckIdleState>
 8004632:	4603      	mov	r3, r0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_UART_Transmit_IT>:
=======
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ffe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800600e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 feb5 	bl	8006d90 <UART_CheckIdleState>
 8006026:	4603      	mov	r3, r0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_UART_Transmit_IT>:
>>>>>>> Stashed changes
=======
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0201 	orr.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 feb5 	bl	8006bd8 <UART_CheckIdleState>
 8005e6e:	4603      	mov	r3, r0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_UART_Transmit_IT>:
>>>>>>> Stashed changes
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800463c:	b480      	push	{r7}
 800463e:	b08b      	sub	sp, #44	; 0x2c
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	4613      	mov	r3, r2
 8004648:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800464e:	2b20      	cmp	r3, #32
 8004650:	d147      	bne.n	80046e2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_UART_Transmit_IT+0x22>
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e040      	b.n	80046e4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2221      	movs	r2, #33	; 0x21
 800468a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d107      	bne.n	80046a6 <HAL_UART_Transmit_IT+0x6a>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d103      	bne.n	80046a6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4a13      	ldr	r2, [pc, #76]	; (80046f0 <HAL_UART_Transmit_IT+0xb4>)
 80046a2:	66da      	str	r2, [r3, #108]	; 0x6c
 80046a4:	e002      	b.n	80046ac <HAL_UART_Transmit_IT+0x70>
=======
 8006030:	b480      	push	{r7}
 8006032:	b08b      	sub	sp, #44	; 0x2c
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	4613      	mov	r3, r2
 800603c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006042:	2b20      	cmp	r3, #32
 8006044:	d147      	bne.n	80060d6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <HAL_UART_Transmit_IT+0x22>
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e040      	b.n	80060d8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	88fa      	ldrh	r2, [r7, #6]
 8006060:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	88fa      	ldrh	r2, [r7, #6]
 8006068:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2221      	movs	r2, #33	; 0x21
 800607e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006088:	d107      	bne.n	800609a <HAL_UART_Transmit_IT+0x6a>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d103      	bne.n	800609a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4a13      	ldr	r2, [pc, #76]	; (80060e4 <HAL_UART_Transmit_IT+0xb4>)
 8006096:	66da      	str	r2, [r3, #108]	; 0x6c
 8006098:	e002      	b.n	80060a0 <HAL_UART_Transmit_IT+0x70>
>>>>>>> Stashed changes
=======
 8005e78:	b480      	push	{r7}
 8005e7a:	b08b      	sub	sp, #44	; 0x2c
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	4613      	mov	r3, r2
 8005e84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	d147      	bne.n	8005f1e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <HAL_UART_Transmit_IT+0x22>
 8005e94:	88fb      	ldrh	r3, [r7, #6]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e040      	b.n	8005f20 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	88fa      	ldrh	r2, [r7, #6]
 8005ea8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	88fa      	ldrh	r2, [r7, #6]
 8005eb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2221      	movs	r2, #33	; 0x21
 8005ec6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed0:	d107      	bne.n	8005ee2 <HAL_UART_Transmit_IT+0x6a>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d103      	bne.n	8005ee2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <HAL_UART_Transmit_IT+0xb4>)
 8005ede:	66da      	str	r2, [r3, #108]	; 0x6c
 8005ee0:	e002      	b.n	8005ee8 <HAL_UART_Transmit_IT+0x70>
>>>>>>> Stashed changes
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4a12      	ldr	r2, [pc, #72]	; (80046f4 <HAL_UART_Transmit_IT+0xb8>)
 80046aa:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a12      	ldr	r2, [pc, #72]	; (80060e8 <HAL_UART_Transmit_IT+0xb8>)
 800609e:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> Stashed changes
=======
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4a12      	ldr	r2, [pc, #72]	; (8005f30 <HAL_UART_Transmit_IT+0xb8>)
 8005ee6:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> Stashed changes
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	617b      	str	r3, [r7, #20]
=======
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
=======
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	613b      	str	r3, [r7, #16]
   return(result);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	623b      	str	r3, [r7, #32]
 80046cc:	61fa      	str	r2, [r7, #28]
=======
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	613b      	str	r3, [r7, #16]
   return(result);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	623b      	str	r3, [r7, #32]
 80060c0:	61fa      	str	r2, [r7, #28]
>>>>>>> Stashed changes
=======
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	623b      	str	r3, [r7, #32]
 8005f08:	61fa      	str	r2, [r7, #28]
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80046ce:	69f9      	ldr	r1, [r7, #28]
 80046d0:	6a3a      	ldr	r2, [r7, #32]
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e6      	bne.n	80046ac <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	e000      	b.n	80046e4 <HAL_UART_Transmit_IT+0xa8>
=======
 80060c2:	69f9      	ldr	r1, [r7, #28]
 80060c4:	6a3a      	ldr	r2, [r7, #32]
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e6      	bne.n	80060a0 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	e000      	b.n	80060d8 <HAL_UART_Transmit_IT+0xa8>
>>>>>>> Stashed changes
=======
 8005f0a:	69f9      	ldr	r1, [r7, #28]
 8005f0c:	6a3a      	ldr	r2, [r7, #32]
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e6      	bne.n	8005ee8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e000      	b.n	8005f20 <HAL_UART_Transmit_IT+0xa8>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80046e2:	2302      	movs	r3, #2
  }
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	372c      	adds	r7, #44	; 0x2c
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	080058fb 	.word	0x080058fb
 80046f4:	08005845 	.word	0x08005845

080046f8 <HAL_UART_Receive_IT>:
=======
 80060d6:	2302      	movs	r3, #2
  }
}
 80060d8:	4618      	mov	r0, r3
 80060da:	372c      	adds	r7, #44	; 0x2c
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	080072ef 	.word	0x080072ef
 80060e8:	08007239 	.word	0x08007239

080060ec <HAL_UART_Receive_IT>:
>>>>>>> Stashed changes
=======
 8005f1e:	2302      	movs	r3, #2
  }
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	372c      	adds	r7, #44	; 0x2c
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	08007137 	.word	0x08007137
 8005f30:	08007081 	.word	0x08007081

08005f34 <HAL_UART_Receive_IT>:
>>>>>>> Stashed changes
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08a      	sub	sp, #40	; 0x28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	4613      	mov	r3, r2
 8004704:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800470c:	2b20      	cmp	r3, #32
 800470e:	d132      	bne.n	8004776 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_UART_Receive_IT+0x24>
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e02b      	b.n	8004778 <HAL_UART_Receive_IT+0x80>
=======
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08a      	sub	sp, #40	; 0x28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006100:	2b20      	cmp	r3, #32
 8006102:	d132      	bne.n	800616a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <HAL_UART_Receive_IT+0x24>
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e02b      	b.n	800616c <HAL_UART_Receive_IT+0x80>
>>>>>>> Stashed changes
=======
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	; 0x28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f48:	2b20      	cmp	r3, #32
 8005f4a:	d132      	bne.n	8005fb2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_UART_Receive_IT+0x24>
 8005f52:	88fb      	ldrh	r3, [r7, #6]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e02b      	b.n	8005fb4 <HAL_UART_Receive_IT+0x80>
>>>>>>> Stashed changes
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d018      	beq.n	8004766 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	613b      	str	r3, [r7, #16]
   return(result);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	623b      	str	r3, [r7, #32]
 8004754:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	69f9      	ldr	r1, [r7, #28]
 8004758:	6a3a      	ldr	r2, [r7, #32]
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e6      	bne.n	8004734 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004766:	88fb      	ldrh	r3, [r7, #6]
 8004768:	461a      	mov	r2, r3
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 ff29 	bl	80055c4 <UART_Start_Receive_IT>
 8004772:	4603      	mov	r3, r0
 8004774:	e000      	b.n	8004778 <HAL_UART_Receive_IT+0x80>
=======
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d018      	beq.n	800615a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	613b      	str	r3, [r7, #16]
   return(result);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	623b      	str	r3, [r7, #32]
 8006148:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	69f9      	ldr	r1, [r7, #28]
 800614c:	6a3a      	ldr	r2, [r7, #32]
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	61bb      	str	r3, [r7, #24]
   return(result);
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e6      	bne.n	8006128 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	461a      	mov	r2, r3
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 ff29 	bl	8006fb8 <UART_Start_Receive_IT>
 8006166:	4603      	mov	r3, r0
 8006168:	e000      	b.n	800616c <HAL_UART_Receive_IT+0x80>
>>>>>>> Stashed changes
=======
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d018      	beq.n	8005fa2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	623b      	str	r3, [r7, #32]
 8005f90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	69f9      	ldr	r1, [r7, #28]
 8005f94:	6a3a      	ldr	r2, [r7, #32]
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e6      	bne.n	8005f70 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005fa2:	88fb      	ldrh	r3, [r7, #6]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 ff29 	bl	8006e00 <UART_Start_Receive_IT>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	e000      	b.n	8005fb4 <HAL_UART_Receive_IT+0x80>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004776:	2302      	movs	r3, #2
  }
}
 8004778:	4618      	mov	r0, r3
 800477a:	3728      	adds	r7, #40	; 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_UART_IRQHandler>:
=======
 800616a:	2302      	movs	r3, #2
  }
}
 800616c:	4618      	mov	r0, r3
 800616e:	3728      	adds	r7, #40	; 0x28
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <HAL_UART_IRQHandler>:
>>>>>>> Stashed changes
=======
 8005fb2:	2302      	movs	r3, #2
  }
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3728      	adds	r7, #40	; 0x28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_UART_IRQHandler>:
>>>>>>> Stashed changes
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004780:	b580      	push	{r7, lr}
 8004782:	b0ba      	sub	sp, #232	; 0xe8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
=======
 8006174:	b580      	push	{r7, lr}
 8006176:	b0ba      	sub	sp, #232	; 0xe8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
>>>>>>> Stashed changes
=======
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b0ba      	sub	sp, #232	; 0xe8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
>>>>>>> Stashed changes

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80047a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80047ae:	4013      	ands	r3, r2
 80047b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80047b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d115      	bne.n	80047e8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00f      	beq.n	80047e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047cc:	f003 0320 	and.w	r3, r3, #32
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d009      	beq.n	80047e8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 82ac 	beq.w	8004d36 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
      }
      return;
 80047e6:	e2a6      	b.n	8004d36 <HAL_UART_IRQHandler+0x5b6>
=======
 800619a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800619e:	f640 030f 	movw	r3, #2063	; 0x80f
 80061a2:	4013      	ands	r3, r2
 80061a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80061a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d115      	bne.n	80061dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80061b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b4:	f003 0320 	and.w	r3, r3, #32
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00f      	beq.n	80061dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d009      	beq.n	80061dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 82ac 	beq.w	800672a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
      }
      return;
 80061da:	e2a6      	b.n	800672a <HAL_UART_IRQHandler+0x5b6>
>>>>>>> Stashed changes
=======
 8005fe2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005fe6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005fea:	4013      	ands	r3, r2
 8005fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d115      	bne.n	8006024 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00f      	beq.n	8006024 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b00      	cmp	r3, #0
 800600e:	d009      	beq.n	8006024 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 82ac 	beq.w	8006572 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	4798      	blx	r3
      }
      return;
 8006022:	e2a6      	b.n	8006572 <HAL_UART_IRQHandler+0x5b6>
>>>>>>> Stashed changes
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80047e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8117 	beq.w	8004a20 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80047fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004802:	4b85      	ldr	r3, [pc, #532]	; (8004a18 <HAL_UART_IRQHandler+0x298>)
 8004804:	4013      	ands	r3, r2
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 810a 	beq.w	8004a20 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800480c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d011      	beq.n	800483c <HAL_UART_IRQHandler+0xbc>
 8004818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2201      	movs	r2, #1
 800482a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004832:	f043 0201 	orr.w	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 80061dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8117 	beq.w	8006414 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80061e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80061f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80061f6:	4b85      	ldr	r3, [pc, #532]	; (800640c <HAL_UART_IRQHandler+0x298>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 810a 	beq.w	8006414 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d011      	beq.n	8006230 <HAL_UART_IRQHandler+0xbc>
 800620c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00b      	beq.n	8006230 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2201      	movs	r2, #1
 800621e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006226:	f043 0201 	orr.w	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
=======
 8006024:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8117 	beq.w	800625c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800602e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800603a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800603e:	4b85      	ldr	r3, [pc, #532]	; (8006254 <HAL_UART_IRQHandler+0x298>)
 8006040:	4013      	ands	r3, r2
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 810a 	beq.w	800625c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d011      	beq.n	8006078 <HAL_UART_IRQHandler+0xbc>
 8006054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00b      	beq.n	8006078 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2201      	movs	r2, #1
 8006066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800606e:	f043 0201 	orr.w	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800483c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d011      	beq.n	800486c <HAL_UART_IRQHandler+0xec>
 8004848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2202      	movs	r2, #2
 800485a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004862:	f043 0204 	orr.w	r2, r3, #4
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8006230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d011      	beq.n	8006260 <HAL_UART_IRQHandler+0xec>
 800623c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00b      	beq.n	8006260 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2202      	movs	r2, #2
 800624e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006256:	f043 0204 	orr.w	r2, r3, #4
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
=======
 8006078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d011      	beq.n	80060a8 <HAL_UART_IRQHandler+0xec>
 8006084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00b      	beq.n	80060a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2202      	movs	r2, #2
 8006096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800609e:	f043 0204 	orr.w	r2, r3, #4
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800486c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d011      	beq.n	800489c <HAL_UART_IRQHandler+0x11c>
 8004878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00b      	beq.n	800489c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2204      	movs	r2, #4
 800488a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004892:	f043 0202 	orr.w	r2, r3, #2
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8006260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d011      	beq.n	8006290 <HAL_UART_IRQHandler+0x11c>
 800626c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00b      	beq.n	8006290 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2204      	movs	r2, #4
 800627e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006286:	f043 0202 	orr.w	r2, r3, #2
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
=======
 80060a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d011      	beq.n	80060d8 <HAL_UART_IRQHandler+0x11c>
 80060b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00b      	beq.n	80060d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2204      	movs	r2, #4
 80060c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ce:	f043 0202 	orr.w	r2, r3, #2
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800489c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d017      	beq.n	80048d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d105      	bne.n	80048c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2208      	movs	r2, #8
 80048c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ce:	f043 0208 	orr.w	r2, r3, #8
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8006290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b00      	cmp	r3, #0
 800629a:	d017      	beq.n	80062cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800629c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a0:	f003 0320 	and.w	r3, r3, #32
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d105      	bne.n	80062b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2208      	movs	r2, #8
 80062ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062c2:	f043 0208 	orr.w	r2, r3, #8
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
=======
 80060d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d017      	beq.n	8006114 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d105      	bne.n	80060fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80060f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00b      	beq.n	8006114 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2208      	movs	r2, #8
 8006102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800610a:	f043 0208 	orr.w	r2, r3, #8
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80048d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d012      	beq.n	800490a <HAL_UART_IRQHandler+0x18a>
 80048e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00c      	beq.n	800490a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004900:	f043 0220 	orr.w	r2, r3, #32
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 80062cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d012      	beq.n	80062fe <HAL_UART_IRQHandler+0x18a>
 80062d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00c      	beq.n	80062fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062f4:	f043 0220 	orr.w	r2, r3, #32
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
=======
 8006114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800611c:	2b00      	cmp	r3, #0
 800611e:	d012      	beq.n	8006146 <HAL_UART_IRQHandler+0x18a>
 8006120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006124:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00c      	beq.n	8006146 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006134:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800613c:	f043 0220 	orr.w	r2, r3, #32
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 8212 	beq.w	8004d3a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00d      	beq.n	800493e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	4798      	blx	r3
=======
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 8212 	beq.w	800672e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800630a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00d      	beq.n	8006332 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	d007      	beq.n	8006332 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	4798      	blx	r3
>>>>>>> Stashed changes
=======
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 8212 	beq.w	8006576 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00d      	beq.n	800617a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800615e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d007      	beq.n	800617a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	4798      	blx	r3
>>>>>>> Stashed changes
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004952:	2b40      	cmp	r3, #64	; 0x40
 8004954:	d005      	beq.n	8004962 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800495a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800495e:	2b00      	cmp	r3, #0
 8004960:	d04f      	beq.n	8004a02 <HAL_UART_IRQHandler+0x282>
=======
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006338:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006346:	2b40      	cmp	r3, #64	; 0x40
 8006348:	d005      	beq.n	8006356 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800634a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800634e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006352:	2b00      	cmp	r3, #0
 8006354:	d04f      	beq.n	80063f6 <HAL_UART_IRQHandler+0x282>
>>>>>>> Stashed changes
=======
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006180:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	d005      	beq.n	800619e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006196:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800619a:	2b00      	cmp	r3, #0
 800619c:	d04f      	beq.n	800623e <HAL_UART_IRQHandler+0x282>
>>>>>>> Stashed changes
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fef4 	bl	8005750 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d141      	bne.n	80049fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3308      	adds	r3, #8
 800497c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800498c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3308      	adds	r3, #8
 800499e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1d9      	bne.n	8004976 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d013      	beq.n	80049f2 <HAL_UART_IRQHandler+0x272>
=======
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fef4 	bl	8007144 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006366:	2b40      	cmp	r3, #64	; 0x40
 8006368:	d141      	bne.n	80063ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3308      	adds	r3, #8
 8006370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006380:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3308      	adds	r3, #8
 8006392:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006396:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800639a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80063a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1d9      	bne.n	800636a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d013      	beq.n	80063e6 <HAL_UART_IRQHandler+0x272>
>>>>>>> Stashed changes
=======
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fef4 	bl	8006f8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ae:	2b40      	cmp	r3, #64	; 0x40
 80061b0:	d141      	bne.n	8006236 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3308      	adds	r3, #8
 80061b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3308      	adds	r3, #8
 80061da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1d9      	bne.n	80061b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006202:	2b00      	cmp	r3, #0
 8006204:	d013      	beq.n	800622e <HAL_UART_IRQHandler+0x272>
>>>>>>> Stashed changes
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ce:	4a13      	ldr	r2, [pc, #76]	; (8004a1c <HAL_UART_IRQHandler+0x29c>)
 80049d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fd fd19 	bl	800240e <HAL_DMA_Abort_IT>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d017      	beq.n	8004a12 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049ec:	4610      	mov	r0, r2
 80049ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f0:	e00f      	b.n	8004a12 <HAL_UART_IRQHandler+0x292>
=======
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c2:	4a13      	ldr	r2, [pc, #76]	; (8006410 <HAL_UART_IRQHandler+0x29c>)
 80063c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fc fe90 	bl	80030f0 <HAL_DMA_Abort_IT>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d017      	beq.n	8006406 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80063e0:	4610      	mov	r0, r2
 80063e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e4:	e00f      	b.n	8006406 <HAL_UART_IRQHandler+0x292>
>>>>>>> Stashed changes
=======
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620a:	4a13      	ldr	r2, [pc, #76]	; (8006258 <HAL_UART_IRQHandler+0x29c>)
 800620c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006212:	4618      	mov	r0, r3
 8006214:	f7fc fe90 	bl	8002f38 <HAL_DMA_Abort_IT>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d017      	beq.n	800624e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006228:	4610      	mov	r0, r2
 800622a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622c:	e00f      	b.n	800624e <HAL_UART_IRQHandler+0x292>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f9ac 	bl	8004d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f8:	e00b      	b.n	8004a12 <HAL_UART_IRQHandler+0x292>
=======
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f9ac 	bl	8006744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ec:	e00b      	b.n	8006406 <HAL_UART_IRQHandler+0x292>
>>>>>>> Stashed changes
=======
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f9ac 	bl	800658c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006234:	e00b      	b.n	800624e <HAL_UART_IRQHandler+0x292>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f9a8 	bl	8004d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a00:	e007      	b.n	8004a12 <HAL_UART_IRQHandler+0x292>
=======
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f9a8 	bl	8006744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f4:	e007      	b.n	8006406 <HAL_UART_IRQHandler+0x292>
>>>>>>> Stashed changes
=======
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f9a8 	bl	800658c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623c:	e007      	b.n	800624e <HAL_UART_IRQHandler+0x292>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f9a4 	bl	8004d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004a10:	e193      	b.n	8004d3a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a12:	bf00      	nop
    return;
 8004a14:	e191      	b.n	8004d3a <HAL_UART_IRQHandler+0x5ba>
 8004a16:	bf00      	nop
 8004a18:	04000120 	.word	0x04000120
 8004a1c:	08005819 	.word	0x08005819
=======
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f9a4 	bl	8006744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006404:	e193      	b.n	800672e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006406:	bf00      	nop
    return;
 8006408:	e191      	b.n	800672e <HAL_UART_IRQHandler+0x5ba>
 800640a:	bf00      	nop
 800640c:	04000120 	.word	0x04000120
 8006410:	0800720d 	.word	0x0800720d
>>>>>>> Stashed changes
=======
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f9a4 	bl	800658c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800624c:	e193      	b.n	8006576 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800624e:	bf00      	nop
    return;
 8006250:	e191      	b.n	8006576 <HAL_UART_IRQHandler+0x5ba>
 8006252:	bf00      	nop
 8006254:	04000120 	.word	0x04000120
 8006258:	08007055 	.word	0x08007055
>>>>>>> Stashed changes

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	f040 814c 	bne.w	8004cc2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2e:	f003 0310 	and.w	r3, r3, #16
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 8145 	beq.w	8004cc2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a3c:	f003 0310 	and.w	r3, r3, #16
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 813e 	beq.w	8004cc2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	f040 80b6 	bne.w	8004bca <HAL_UART_IRQHandler+0x44a>
=======
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006418:	2b01      	cmp	r3, #1
 800641a:	f040 814c 	bne.w	80066b6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800641e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006422:	f003 0310 	and.w	r3, r3, #16
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 8145 	beq.w	80066b6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800642c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006430:	f003 0310 	and.w	r3, r3, #16
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 813e 	beq.w	80066b6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2210      	movs	r2, #16
 8006440:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644c:	2b40      	cmp	r3, #64	; 0x40
 800644e:	f040 80b6 	bne.w	80065be <HAL_UART_IRQHandler+0x44a>
>>>>>>> Stashed changes
=======
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006260:	2b01      	cmp	r3, #1
 8006262:	f040 814c 	bne.w	80064fe <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626a:	f003 0310 	and.w	r3, r3, #16
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 8145 	beq.w	80064fe <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006278:	f003 0310 	and.w	r3, r3, #16
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 813e 	beq.w	80064fe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2210      	movs	r2, #16
 8006288:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006294:	2b40      	cmp	r3, #64	; 0x40
 8006296:	f040 80b6 	bne.w	8006406 <HAL_UART_IRQHandler+0x44a>
>>>>>>> Stashed changes
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8165 	beq.w	8004d3e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	f080 815d 	bcs.w	8004d3e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a98:	f000 8086 	beq.w	8004ba8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004aca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ad2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1da      	bne.n	8004a9c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3308      	adds	r3, #8
 8004aec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3308      	adds	r3, #8
 8004b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e1      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x366>
=======
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800645e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 8165 	beq.w	8006732 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800646e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006472:	429a      	cmp	r2, r3
 8006474:	f080 815d 	bcs.w	8006732 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800647e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800648c:	f000 8086 	beq.w	800659c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80064a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80064c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064ca:	e841 2300 	strex	r3, r2, [r1]
 80064ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1da      	bne.n	8006490 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3308      	adds	r3, #8
 80064e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3308      	adds	r3, #8
 80064fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006502:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006506:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e1      	bne.n	80064da <HAL_UART_IRQHandler+0x366>
>>>>>>> Stashed changes
=======
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 8165 	beq.w	800657a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062ba:	429a      	cmp	r2, r3
 80062bc:	f080 815d 	bcs.w	800657a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d4:	f000 8086 	beq.w	80063e4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	461a      	mov	r2, r3
 80062fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006302:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006306:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800630e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800631a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1da      	bne.n	80062d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3308      	adds	r3, #8
 8006328:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3308      	adds	r3, #8
 8006342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006346:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800634a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800634e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e1      	bne.n	8006322 <HAL_UART_IRQHandler+0x366>
>>>>>>> Stashed changes

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3308      	adds	r3, #8
 8004b28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3308      	adds	r3, #8
 8004b42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e3      	bne.n	8004b22 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b78:	f023 0310 	bic.w	r3, r3, #16
 8004b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e4      	bne.n	8004b68 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fd fbc3 	bl	800232e <HAL_DMA_Abort>
=======
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3308      	adds	r3, #8
 800651c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800652c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3308      	adds	r3, #8
 8006536:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800653a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800653c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006540:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1e3      	bne.n	8006516 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800656a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800656c:	f023 0310 	bic.w	r3, r3, #16
 8006570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800657e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006580:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800658c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e4      	bne.n	800655c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006596:	4618      	mov	r0, r3
 8006598:	f7fc fd3a 	bl	8003010 <HAL_DMA_Abort>
>>>>>>> Stashed changes
=======
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3308      	adds	r3, #8
 8006364:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800636e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3308      	adds	r3, #8
 800637e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006382:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006384:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006388:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e3      	bne.n	800635e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b4:	f023 0310 	bic.w	r3, r3, #16
 80063b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80063c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e4      	bne.n	80063a4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fc fd3a 	bl	8002e58 <HAL_DMA_Abort>
>>>>>>> Stashed changes
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	665a      	str	r2, [r3, #100]	; 0x64
=======
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2202      	movs	r2, #2
 80065a0:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> Stashed changes
=======
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f8ce 	bl	8004d64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bc8:	e0b9      	b.n	8004d3e <HAL_UART_IRQHandler+0x5be>
=======
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f8ce 	bl	8006758 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065bc:	e0b9      	b.n	8006732 <HAL_UART_IRQHandler+0x5be>
>>>>>>> Stashed changes
=======
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	4619      	mov	r1, r3
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f8ce 	bl	80065a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006404:	e0b9      	b.n	800657a <HAL_UART_IRQHandler+0x5be>
>>>>>>> Stashed changes
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 80ab 	beq.w	8004d42 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004bec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80a6 	beq.w	8004d42 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	e853 3f00 	ldrex	r3, [r3]
 8004c02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c18:	647b      	str	r3, [r7, #68]	; 0x44
 8004c1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e4      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3308      	adds	r3, #8
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c50:	633a      	str	r2, [r7, #48]	; 0x30
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e3      	bne.n	8004c2c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f023 0310 	bic.w	r3, r3, #16
 8004c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c9a:	61fb      	str	r3, [r7, #28]
 8004c9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	69b9      	ldr	r1, [r7, #24]
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e4      	bne.n	8004c78 <HAL_UART_IRQHandler+0x4f8>
=======
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 80ab 	beq.w	8006736 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80065e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 80a6 	beq.w	8006736 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800660c:	647b      	str	r3, [r7, #68]	; 0x44
 800660e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006610:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006614:	e841 2300 	strex	r3, r2, [r1]
 8006618:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800661a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e4      	bne.n	80065ea <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3308      	adds	r3, #8
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	623b      	str	r3, [r7, #32]
   return(result);
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	f023 0301 	bic.w	r3, r3, #1
 8006636:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3308      	adds	r3, #8
 8006640:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006644:	633a      	str	r2, [r7, #48]	; 0x30
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800664a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e3      	bne.n	8006620 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2220      	movs	r2, #32
 800665c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	60fb      	str	r3, [r7, #12]
   return(result);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f023 0310 	bic.w	r3, r3, #16
 8006680:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800668e:	61fb      	str	r3, [r7, #28]
 8006690:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	69b9      	ldr	r1, [r7, #24]
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	617b      	str	r3, [r7, #20]
   return(result);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e4      	bne.n	800666c <HAL_UART_IRQHandler+0x4f8>
>>>>>>> Stashed changes
=======
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006412:	b29b      	uxth	r3, r3
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006420:	b29b      	uxth	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 80ab 	beq.w	800657e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 80a6 	beq.w	800657e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006442:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006454:	647b      	str	r3, [r7, #68]	; 0x44
 8006456:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800645a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e4      	bne.n	8006432 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3308      	adds	r3, #8
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	e853 3f00 	ldrex	r3, [r3]
 8006476:	623b      	str	r3, [r7, #32]
   return(result);
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	f023 0301 	bic.w	r3, r3, #1
 800647e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3308      	adds	r3, #8
 8006488:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800648c:	633a      	str	r2, [r7, #48]	; 0x30
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e3      	bne.n	8006468 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f023 0310 	bic.w	r3, r3, #16
 80064c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064d6:	61fb      	str	r3, [r7, #28]
 80064d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	69b9      	ldr	r1, [r7, #24]
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	617b      	str	r3, [r7, #20]
   return(result);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e4      	bne.n	80064b4 <HAL_UART_IRQHandler+0x4f8>
>>>>>>> Stashed changes

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	665a      	str	r2, [r3, #100]	; 0x64
=======
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2202      	movs	r2, #2
 80066a6:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> Stashed changes
=======
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2202      	movs	r2, #2
 80064ee:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004cb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cb8:	4619      	mov	r1, r3
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f852 	bl	8004d64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cc0:	e03f      	b.n	8004d42 <HAL_UART_IRQHandler+0x5c2>
=======
 80066a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f852 	bl	8006758 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066b4:	e03f      	b.n	8006736 <HAL_UART_IRQHandler+0x5c2>
>>>>>>> Stashed changes
=======
 80064f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f852 	bl	80065a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064fc:	e03f      	b.n	800657e <HAL_UART_IRQHandler+0x5c2>
>>>>>>> Stashed changes
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00e      	beq.n	8004cec <HAL_UART_IRQHandler+0x56c>
 8004cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d008      	beq.n	8004cec <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ce2:	621a      	str	r2, [r3, #32]
=======
 80066b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00e      	beq.n	80066e0 <HAL_UART_IRQHandler+0x56c>
 80066c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d008      	beq.n	80066e0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066d6:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
=======
 80064fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00e      	beq.n	8006528 <HAL_UART_IRQHandler+0x56c>
 800650a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800650e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d008      	beq.n	8006528 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800651e:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f849 	bl	8004d7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cea:	e02d      	b.n	8004d48 <HAL_UART_IRQHandler+0x5c8>
=======
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f849 	bl	8006770 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066de:	e02d      	b.n	800673c <HAL_UART_IRQHandler+0x5c8>
>>>>>>> Stashed changes
=======
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f849 	bl	80065b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006526:	e02d      	b.n	8006584 <HAL_UART_IRQHandler+0x5c8>
>>>>>>> Stashed changes
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00e      	beq.n	8004d16 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01c      	beq.n	8004d46 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	4798      	blx	r3
    }
    return;
 8004d14:	e017      	b.n	8004d46 <HAL_UART_IRQHandler+0x5c6>
=======
 80066e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00e      	beq.n	800670a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d008      	beq.n	800670a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01c      	beq.n	800673a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
    }
    return;
 8006708:	e017      	b.n	800673a <HAL_UART_IRQHandler+0x5c6>
>>>>>>> Stashed changes
=======
 8006528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00e      	beq.n	8006552 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01c      	beq.n	8006582 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	4798      	blx	r3
    }
    return;
 8006550:	e017      	b.n	8006582 <HAL_UART_IRQHandler+0x5c6>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d012      	beq.n	8004d48 <HAL_UART_IRQHandler+0x5c8>
 8004d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00c      	beq.n	8004d48 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fe43 	bl	80059ba <UART_EndTransmit_IT>
    return;
 8004d34:	e008      	b.n	8004d48 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004d36:	bf00      	nop
 8004d38:	e006      	b.n	8004d48 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004d3a:	bf00      	nop
 8004d3c:	e004      	b.n	8004d48 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004d3e:	bf00      	nop
 8004d40:	e002      	b.n	8004d48 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004d46:	bf00      	nop
  }

}
 8004d48:	37e8      	adds	r7, #232	; 0xe8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop

08004d50 <HAL_UART_ErrorCallback>:
=======
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006712:	2b00      	cmp	r3, #0
 8006714:	d012      	beq.n	800673c <HAL_UART_IRQHandler+0x5c8>
 8006716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800671a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00c      	beq.n	800673c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fe43 	bl	80073ae <UART_EndTransmit_IT>
    return;
 8006728:	e008      	b.n	800673c <HAL_UART_IRQHandler+0x5c8>
      return;
 800672a:	bf00      	nop
 800672c:	e006      	b.n	800673c <HAL_UART_IRQHandler+0x5c8>
    return;
 800672e:	bf00      	nop
 8006730:	e004      	b.n	800673c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006732:	bf00      	nop
 8006734:	e002      	b.n	800673c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006736:	bf00      	nop
 8006738:	e000      	b.n	800673c <HAL_UART_IRQHandler+0x5c8>
    return;
 800673a:	bf00      	nop
  }

}
 800673c:	37e8      	adds	r7, #232	; 0xe8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop

08006744 <HAL_UART_ErrorCallback>:
>>>>>>> Stashed changes
=======
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d012      	beq.n	8006584 <HAL_UART_IRQHandler+0x5c8>
 800655e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00c      	beq.n	8006584 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fe43 	bl	80071f6 <UART_EndTransmit_IT>
    return;
 8006570:	e008      	b.n	8006584 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006572:	bf00      	nop
 8006574:	e006      	b.n	8006584 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006576:	bf00      	nop
 8006578:	e004      	b.n	8006584 <HAL_UART_IRQHandler+0x5c8>
      return;
 800657a:	bf00      	nop
 800657c:	e002      	b.n	8006584 <HAL_UART_IRQHandler+0x5c8>
      return;
 800657e:	bf00      	nop
 8006580:	e000      	b.n	8006584 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006582:	bf00      	nop
  }

}
 8006584:	37e8      	adds	r7, #232	; 0xe8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop

0800658c <HAL_UART_ErrorCallback>:
>>>>>>> Stashed changes
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
=======
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
=======
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_UARTEx_RxEventCallback>:
=======
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <HAL_UARTEx_RxEventCallback>:
>>>>>>> Stashed changes
=======
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_UARTEx_RxEventCallback>:
>>>>>>> Stashed changes
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	807b      	strh	r3, [r7, #2]
=======
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
=======
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_UARTEx_WakeupCallback>:
=======
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_UARTEx_WakeupCallback>:
>>>>>>> Stashed changes
=======
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_UARTEx_WakeupCallback>:
>>>>>>> Stashed changes
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
=======
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
=======
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <UART_SetConfig>:
=======
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <UART_SetConfig>:
>>>>>>> Stashed changes
=======
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <UART_SetConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
=======
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
=======
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004d98:	2300      	movs	r3, #0
 8004d9a:	77bb      	strb	r3, [r7, #30]
=======
 800678c:	2300      	movs	r3, #0
 800678e:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
=======
 80065d4:	2300      	movs	r3, #0
 80065d6:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4ba6      	ldr	r3, [pc, #664]	; (8005054 <UART_SetConfig+0x2c4>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	6979      	ldr	r1, [r7, #20]
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6013      	str	r3, [r2, #0]
=======
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	4ba6      	ldr	r3, [pc, #664]	; (8006a48 <UART_SetConfig+0x2c4>)
 80067b0:	4013      	ands	r3, r2
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	6812      	ldr	r2, [r2, #0]
 80067b6:	6979      	ldr	r1, [r7, #20]
 80067b8:	430b      	orrs	r3, r1
 80067ba:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
=======
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	431a      	orrs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	4ba6      	ldr	r3, [pc, #664]	; (8006890 <UART_SetConfig+0x2c4>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6812      	ldr	r2, [r2, #0]
 80065fe:	6979      	ldr	r1, [r7, #20]
 8006600:	430b      	orrs	r3, r1
 8006602:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
=======
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
=======
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	609a      	str	r2, [r3, #8]
=======
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	4313      	orrs	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
=======
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	430a      	orrs	r2, r1
 800663c:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a94      	ldr	r2, [pc, #592]	; (8005058 <UART_SetConfig+0x2c8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d120      	bne.n	8004e4e <UART_SetConfig+0xbe>
 8004e0c:	4b93      	ldr	r3, [pc, #588]	; (800505c <UART_SetConfig+0x2cc>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d816      	bhi.n	8004e48 <UART_SetConfig+0xb8>
 8004e1a:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <UART_SetConfig+0x90>)
 8004e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e20:	08004e31 	.word	0x08004e31
 8004e24:	08004e3d 	.word	0x08004e3d
 8004e28:	08004e37 	.word	0x08004e37
 8004e2c:	08004e43 	.word	0x08004e43
 8004e30:	2301      	movs	r3, #1
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e150      	b.n	80050d8 <UART_SetConfig+0x348>
 8004e36:	2302      	movs	r3, #2
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	e14d      	b.n	80050d8 <UART_SetConfig+0x348>
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	77fb      	strb	r3, [r7, #31]
 8004e40:	e14a      	b.n	80050d8 <UART_SetConfig+0x348>
 8004e42:	2308      	movs	r3, #8
 8004e44:	77fb      	strb	r3, [r7, #31]
 8004e46:	e147      	b.n	80050d8 <UART_SetConfig+0x348>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e144      	b.n	80050d8 <UART_SetConfig+0x348>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a83      	ldr	r2, [pc, #524]	; (8005060 <UART_SetConfig+0x2d0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d132      	bne.n	8004ebe <UART_SetConfig+0x12e>
 8004e58:	4b80      	ldr	r3, [pc, #512]	; (800505c <UART_SetConfig+0x2cc>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	2b0c      	cmp	r3, #12
 8004e64:	d828      	bhi.n	8004eb8 <UART_SetConfig+0x128>
 8004e66:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <UART_SetConfig+0xdc>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004ea1 	.word	0x08004ea1
 8004e70:	08004eb9 	.word	0x08004eb9
 8004e74:	08004eb9 	.word	0x08004eb9
 8004e78:	08004eb9 	.word	0x08004eb9
 8004e7c:	08004ead 	.word	0x08004ead
 8004e80:	08004eb9 	.word	0x08004eb9
 8004e84:	08004eb9 	.word	0x08004eb9
 8004e88:	08004eb9 	.word	0x08004eb9
 8004e8c:	08004ea7 	.word	0x08004ea7
 8004e90:	08004eb9 	.word	0x08004eb9
 8004e94:	08004eb9 	.word	0x08004eb9
 8004e98:	08004eb9 	.word	0x08004eb9
 8004e9c:	08004eb3 	.word	0x08004eb3
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e118      	b.n	80050d8 <UART_SetConfig+0x348>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	e115      	b.n	80050d8 <UART_SetConfig+0x348>
 8004eac:	2304      	movs	r3, #4
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	e112      	b.n	80050d8 <UART_SetConfig+0x348>
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	77fb      	strb	r3, [r7, #31]
 8004eb6:	e10f      	b.n	80050d8 <UART_SetConfig+0x348>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e10c      	b.n	80050d8 <UART_SetConfig+0x348>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a68      	ldr	r2, [pc, #416]	; (8005064 <UART_SetConfig+0x2d4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d120      	bne.n	8004f0a <UART_SetConfig+0x17a>
 8004ec8:	4b64      	ldr	r3, [pc, #400]	; (800505c <UART_SetConfig+0x2cc>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ed2:	2b30      	cmp	r3, #48	; 0x30
 8004ed4:	d013      	beq.n	8004efe <UART_SetConfig+0x16e>
 8004ed6:	2b30      	cmp	r3, #48	; 0x30
 8004ed8:	d814      	bhi.n	8004f04 <UART_SetConfig+0x174>
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	d009      	beq.n	8004ef2 <UART_SetConfig+0x162>
 8004ede:	2b20      	cmp	r3, #32
 8004ee0:	d810      	bhi.n	8004f04 <UART_SetConfig+0x174>
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <UART_SetConfig+0x15c>
 8004ee6:	2b10      	cmp	r3, #16
 8004ee8:	d006      	beq.n	8004ef8 <UART_SetConfig+0x168>
 8004eea:	e00b      	b.n	8004f04 <UART_SetConfig+0x174>
 8004eec:	2300      	movs	r3, #0
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e0f2      	b.n	80050d8 <UART_SetConfig+0x348>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e0ef      	b.n	80050d8 <UART_SetConfig+0x348>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e0ec      	b.n	80050d8 <UART_SetConfig+0x348>
 8004efe:	2308      	movs	r3, #8
 8004f00:	77fb      	strb	r3, [r7, #31]
 8004f02:	e0e9      	b.n	80050d8 <UART_SetConfig+0x348>
 8004f04:	2310      	movs	r3, #16
 8004f06:	77fb      	strb	r3, [r7, #31]
 8004f08:	e0e6      	b.n	80050d8 <UART_SetConfig+0x348>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a56      	ldr	r2, [pc, #344]	; (8005068 <UART_SetConfig+0x2d8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d120      	bne.n	8004f56 <UART_SetConfig+0x1c6>
 8004f14:	4b51      	ldr	r3, [pc, #324]	; (800505c <UART_SetConfig+0x2cc>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f1e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f20:	d013      	beq.n	8004f4a <UART_SetConfig+0x1ba>
 8004f22:	2bc0      	cmp	r3, #192	; 0xc0
 8004f24:	d814      	bhi.n	8004f50 <UART_SetConfig+0x1c0>
 8004f26:	2b80      	cmp	r3, #128	; 0x80
 8004f28:	d009      	beq.n	8004f3e <UART_SetConfig+0x1ae>
 8004f2a:	2b80      	cmp	r3, #128	; 0x80
 8004f2c:	d810      	bhi.n	8004f50 <UART_SetConfig+0x1c0>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <UART_SetConfig+0x1a8>
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d006      	beq.n	8004f44 <UART_SetConfig+0x1b4>
 8004f36:	e00b      	b.n	8004f50 <UART_SetConfig+0x1c0>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e0cc      	b.n	80050d8 <UART_SetConfig+0x348>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e0c9      	b.n	80050d8 <UART_SetConfig+0x348>
 8004f44:	2304      	movs	r3, #4
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e0c6      	b.n	80050d8 <UART_SetConfig+0x348>
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	77fb      	strb	r3, [r7, #31]
 8004f4e:	e0c3      	b.n	80050d8 <UART_SetConfig+0x348>
 8004f50:	2310      	movs	r3, #16
 8004f52:	77fb      	strb	r3, [r7, #31]
 8004f54:	e0c0      	b.n	80050d8 <UART_SetConfig+0x348>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a44      	ldr	r2, [pc, #272]	; (800506c <UART_SetConfig+0x2dc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d125      	bne.n	8004fac <UART_SetConfig+0x21c>
 8004f60:	4b3e      	ldr	r3, [pc, #248]	; (800505c <UART_SetConfig+0x2cc>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f6e:	d017      	beq.n	8004fa0 <UART_SetConfig+0x210>
 8004f70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f74:	d817      	bhi.n	8004fa6 <UART_SetConfig+0x216>
 8004f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f7a:	d00b      	beq.n	8004f94 <UART_SetConfig+0x204>
 8004f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f80:	d811      	bhi.n	8004fa6 <UART_SetConfig+0x216>
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <UART_SetConfig+0x1fe>
 8004f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f8a:	d006      	beq.n	8004f9a <UART_SetConfig+0x20a>
 8004f8c:	e00b      	b.n	8004fa6 <UART_SetConfig+0x216>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	77fb      	strb	r3, [r7, #31]
 8004f92:	e0a1      	b.n	80050d8 <UART_SetConfig+0x348>
 8004f94:	2302      	movs	r3, #2
 8004f96:	77fb      	strb	r3, [r7, #31]
 8004f98:	e09e      	b.n	80050d8 <UART_SetConfig+0x348>
 8004f9a:	2304      	movs	r3, #4
 8004f9c:	77fb      	strb	r3, [r7, #31]
 8004f9e:	e09b      	b.n	80050d8 <UART_SetConfig+0x348>
 8004fa0:	2308      	movs	r3, #8
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	e098      	b.n	80050d8 <UART_SetConfig+0x348>
 8004fa6:	2310      	movs	r3, #16
 8004fa8:	77fb      	strb	r3, [r7, #31]
 8004faa:	e095      	b.n	80050d8 <UART_SetConfig+0x348>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a2f      	ldr	r2, [pc, #188]	; (8005070 <UART_SetConfig+0x2e0>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d125      	bne.n	8005002 <UART_SetConfig+0x272>
 8004fb6:	4b29      	ldr	r3, [pc, #164]	; (800505c <UART_SetConfig+0x2cc>)
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fc4:	d017      	beq.n	8004ff6 <UART_SetConfig+0x266>
 8004fc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fca:	d817      	bhi.n	8004ffc <UART_SetConfig+0x26c>
 8004fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd0:	d00b      	beq.n	8004fea <UART_SetConfig+0x25a>
 8004fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd6:	d811      	bhi.n	8004ffc <UART_SetConfig+0x26c>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <UART_SetConfig+0x254>
 8004fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe0:	d006      	beq.n	8004ff0 <UART_SetConfig+0x260>
 8004fe2:	e00b      	b.n	8004ffc <UART_SetConfig+0x26c>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e076      	b.n	80050d8 <UART_SetConfig+0x348>
 8004fea:	2302      	movs	r3, #2
 8004fec:	77fb      	strb	r3, [r7, #31]
 8004fee:	e073      	b.n	80050d8 <UART_SetConfig+0x348>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	77fb      	strb	r3, [r7, #31]
 8004ff4:	e070      	b.n	80050d8 <UART_SetConfig+0x348>
 8004ff6:	2308      	movs	r3, #8
 8004ff8:	77fb      	strb	r3, [r7, #31]
 8004ffa:	e06d      	b.n	80050d8 <UART_SetConfig+0x348>
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	77fb      	strb	r3, [r7, #31]
 8005000:	e06a      	b.n	80050d8 <UART_SetConfig+0x348>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a1b      	ldr	r2, [pc, #108]	; (8005074 <UART_SetConfig+0x2e4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d138      	bne.n	800507e <UART_SetConfig+0x2ee>
 800500c:	4b13      	ldr	r3, [pc, #76]	; (800505c <UART_SetConfig+0x2cc>)
 800500e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005012:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005016:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800501a:	d017      	beq.n	800504c <UART_SetConfig+0x2bc>
 800501c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005020:	d82a      	bhi.n	8005078 <UART_SetConfig+0x2e8>
 8005022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005026:	d00b      	beq.n	8005040 <UART_SetConfig+0x2b0>
 8005028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502c:	d824      	bhi.n	8005078 <UART_SetConfig+0x2e8>
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <UART_SetConfig+0x2aa>
 8005032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005036:	d006      	beq.n	8005046 <UART_SetConfig+0x2b6>
 8005038:	e01e      	b.n	8005078 <UART_SetConfig+0x2e8>
 800503a:	2300      	movs	r3, #0
 800503c:	77fb      	strb	r3, [r7, #31]
 800503e:	e04b      	b.n	80050d8 <UART_SetConfig+0x348>
 8005040:	2302      	movs	r3, #2
 8005042:	77fb      	strb	r3, [r7, #31]
 8005044:	e048      	b.n	80050d8 <UART_SetConfig+0x348>
 8005046:	2304      	movs	r3, #4
 8005048:	77fb      	strb	r3, [r7, #31]
 800504a:	e045      	b.n	80050d8 <UART_SetConfig+0x348>
 800504c:	2308      	movs	r3, #8
 800504e:	77fb      	strb	r3, [r7, #31]
 8005050:	e042      	b.n	80050d8 <UART_SetConfig+0x348>
 8005052:	bf00      	nop
 8005054:	efff69f3 	.word	0xefff69f3
 8005058:	40011000 	.word	0x40011000
 800505c:	40023800 	.word	0x40023800
 8005060:	40004400 	.word	0x40004400
 8005064:	40004800 	.word	0x40004800
 8005068:	40004c00 	.word	0x40004c00
 800506c:	40005000 	.word	0x40005000
 8005070:	40011400 	.word	0x40011400
 8005074:	40007800 	.word	0x40007800
 8005078:	2310      	movs	r3, #16
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e02c      	b.n	80050d8 <UART_SetConfig+0x348>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a72      	ldr	r2, [pc, #456]	; (800524c <UART_SetConfig+0x4bc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d125      	bne.n	80050d4 <UART_SetConfig+0x344>
 8005088:	4b71      	ldr	r3, [pc, #452]	; (8005250 <UART_SetConfig+0x4c0>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005092:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005096:	d017      	beq.n	80050c8 <UART_SetConfig+0x338>
 8005098:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800509c:	d817      	bhi.n	80050ce <UART_SetConfig+0x33e>
 800509e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a2:	d00b      	beq.n	80050bc <UART_SetConfig+0x32c>
 80050a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a8:	d811      	bhi.n	80050ce <UART_SetConfig+0x33e>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <UART_SetConfig+0x326>
 80050ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050b2:	d006      	beq.n	80050c2 <UART_SetConfig+0x332>
 80050b4:	e00b      	b.n	80050ce <UART_SetConfig+0x33e>
 80050b6:	2300      	movs	r3, #0
 80050b8:	77fb      	strb	r3, [r7, #31]
 80050ba:	e00d      	b.n	80050d8 <UART_SetConfig+0x348>
 80050bc:	2302      	movs	r3, #2
 80050be:	77fb      	strb	r3, [r7, #31]
 80050c0:	e00a      	b.n	80050d8 <UART_SetConfig+0x348>
 80050c2:	2304      	movs	r3, #4
 80050c4:	77fb      	strb	r3, [r7, #31]
 80050c6:	e007      	b.n	80050d8 <UART_SetConfig+0x348>
 80050c8:	2308      	movs	r3, #8
 80050ca:	77fb      	strb	r3, [r7, #31]
 80050cc:	e004      	b.n	80050d8 <UART_SetConfig+0x348>
 80050ce:	2310      	movs	r3, #16
 80050d0:	77fb      	strb	r3, [r7, #31]
 80050d2:	e001      	b.n	80050d8 <UART_SetConfig+0x348>
 80050d4:	2310      	movs	r3, #16
 80050d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e0:	d15b      	bne.n	800519a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80050e2:	7ffb      	ldrb	r3, [r7, #31]
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d828      	bhi.n	800513a <UART_SetConfig+0x3aa>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <UART_SetConfig+0x360>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005115 	.word	0x08005115
 80050f4:	0800511d 	.word	0x0800511d
 80050f8:	08005125 	.word	0x08005125
 80050fc:	0800513b 	.word	0x0800513b
 8005100:	0800512b 	.word	0x0800512b
 8005104:	0800513b 	.word	0x0800513b
 8005108:	0800513b 	.word	0x0800513b
 800510c:	0800513b 	.word	0x0800513b
 8005110:	08005133 	.word	0x08005133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005114:	f7fe f840 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 8005118:	61b8      	str	r0, [r7, #24]
        break;
 800511a:	e013      	b.n	8005144 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800511c:	f7fe f850 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 8005120:	61b8      	str	r0, [r7, #24]
        break;
 8005122:	e00f      	b.n	8005144 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005124:	4b4b      	ldr	r3, [pc, #300]	; (8005254 <UART_SetConfig+0x4c4>)
 8005126:	61bb      	str	r3, [r7, #24]
        break;
 8005128:	e00c      	b.n	8005144 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800512a:	f7fd ff25 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 800512e:	61b8      	str	r0, [r7, #24]
        break;
 8005130:	e008      	b.n	8005144 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005136:	61bb      	str	r3, [r7, #24]
        break;
 8005138:	e004      	b.n	8005144 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	77bb      	strb	r3, [r7, #30]
        break;
 8005142:	bf00      	nop
=======
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a94      	ldr	r2, [pc, #592]	; (8006a4c <UART_SetConfig+0x2c8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d120      	bne.n	8006842 <UART_SetConfig+0xbe>
 8006800:	4b93      	ldr	r3, [pc, #588]	; (8006a50 <UART_SetConfig+0x2cc>)
 8006802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	2b03      	cmp	r3, #3
 800680c:	d816      	bhi.n	800683c <UART_SetConfig+0xb8>
 800680e:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <UART_SetConfig+0x90>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	08006825 	.word	0x08006825
 8006818:	08006831 	.word	0x08006831
 800681c:	0800682b 	.word	0x0800682b
 8006820:	08006837 	.word	0x08006837
 8006824:	2301      	movs	r3, #1
 8006826:	77fb      	strb	r3, [r7, #31]
 8006828:	e150      	b.n	8006acc <UART_SetConfig+0x348>
 800682a:	2302      	movs	r3, #2
 800682c:	77fb      	strb	r3, [r7, #31]
 800682e:	e14d      	b.n	8006acc <UART_SetConfig+0x348>
 8006830:	2304      	movs	r3, #4
 8006832:	77fb      	strb	r3, [r7, #31]
 8006834:	e14a      	b.n	8006acc <UART_SetConfig+0x348>
 8006836:	2308      	movs	r3, #8
 8006838:	77fb      	strb	r3, [r7, #31]
 800683a:	e147      	b.n	8006acc <UART_SetConfig+0x348>
 800683c:	2310      	movs	r3, #16
 800683e:	77fb      	strb	r3, [r7, #31]
 8006840:	e144      	b.n	8006acc <UART_SetConfig+0x348>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a83      	ldr	r2, [pc, #524]	; (8006a54 <UART_SetConfig+0x2d0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d132      	bne.n	80068b2 <UART_SetConfig+0x12e>
 800684c:	4b80      	ldr	r3, [pc, #512]	; (8006a50 <UART_SetConfig+0x2cc>)
 800684e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006852:	f003 030c 	and.w	r3, r3, #12
 8006856:	2b0c      	cmp	r3, #12
 8006858:	d828      	bhi.n	80068ac <UART_SetConfig+0x128>
 800685a:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <UART_SetConfig+0xdc>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	08006895 	.word	0x08006895
 8006864:	080068ad 	.word	0x080068ad
 8006868:	080068ad 	.word	0x080068ad
 800686c:	080068ad 	.word	0x080068ad
 8006870:	080068a1 	.word	0x080068a1
 8006874:	080068ad 	.word	0x080068ad
 8006878:	080068ad 	.word	0x080068ad
 800687c:	080068ad 	.word	0x080068ad
 8006880:	0800689b 	.word	0x0800689b
 8006884:	080068ad 	.word	0x080068ad
 8006888:	080068ad 	.word	0x080068ad
 800688c:	080068ad 	.word	0x080068ad
 8006890:	080068a7 	.word	0x080068a7
 8006894:	2300      	movs	r3, #0
 8006896:	77fb      	strb	r3, [r7, #31]
 8006898:	e118      	b.n	8006acc <UART_SetConfig+0x348>
 800689a:	2302      	movs	r3, #2
 800689c:	77fb      	strb	r3, [r7, #31]
 800689e:	e115      	b.n	8006acc <UART_SetConfig+0x348>
 80068a0:	2304      	movs	r3, #4
 80068a2:	77fb      	strb	r3, [r7, #31]
 80068a4:	e112      	b.n	8006acc <UART_SetConfig+0x348>
 80068a6:	2308      	movs	r3, #8
 80068a8:	77fb      	strb	r3, [r7, #31]
 80068aa:	e10f      	b.n	8006acc <UART_SetConfig+0x348>
 80068ac:	2310      	movs	r3, #16
 80068ae:	77fb      	strb	r3, [r7, #31]
 80068b0:	e10c      	b.n	8006acc <UART_SetConfig+0x348>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a68      	ldr	r2, [pc, #416]	; (8006a58 <UART_SetConfig+0x2d4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d120      	bne.n	80068fe <UART_SetConfig+0x17a>
 80068bc:	4b64      	ldr	r3, [pc, #400]	; (8006a50 <UART_SetConfig+0x2cc>)
 80068be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068c6:	2b30      	cmp	r3, #48	; 0x30
 80068c8:	d013      	beq.n	80068f2 <UART_SetConfig+0x16e>
 80068ca:	2b30      	cmp	r3, #48	; 0x30
 80068cc:	d814      	bhi.n	80068f8 <UART_SetConfig+0x174>
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	d009      	beq.n	80068e6 <UART_SetConfig+0x162>
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	d810      	bhi.n	80068f8 <UART_SetConfig+0x174>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <UART_SetConfig+0x15c>
 80068da:	2b10      	cmp	r3, #16
 80068dc:	d006      	beq.n	80068ec <UART_SetConfig+0x168>
 80068de:	e00b      	b.n	80068f8 <UART_SetConfig+0x174>
 80068e0:	2300      	movs	r3, #0
 80068e2:	77fb      	strb	r3, [r7, #31]
 80068e4:	e0f2      	b.n	8006acc <UART_SetConfig+0x348>
 80068e6:	2302      	movs	r3, #2
 80068e8:	77fb      	strb	r3, [r7, #31]
 80068ea:	e0ef      	b.n	8006acc <UART_SetConfig+0x348>
 80068ec:	2304      	movs	r3, #4
 80068ee:	77fb      	strb	r3, [r7, #31]
 80068f0:	e0ec      	b.n	8006acc <UART_SetConfig+0x348>
 80068f2:	2308      	movs	r3, #8
 80068f4:	77fb      	strb	r3, [r7, #31]
 80068f6:	e0e9      	b.n	8006acc <UART_SetConfig+0x348>
 80068f8:	2310      	movs	r3, #16
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e0e6      	b.n	8006acc <UART_SetConfig+0x348>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a56      	ldr	r2, [pc, #344]	; (8006a5c <UART_SetConfig+0x2d8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d120      	bne.n	800694a <UART_SetConfig+0x1c6>
 8006908:	4b51      	ldr	r3, [pc, #324]	; (8006a50 <UART_SetConfig+0x2cc>)
 800690a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800690e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006912:	2bc0      	cmp	r3, #192	; 0xc0
 8006914:	d013      	beq.n	800693e <UART_SetConfig+0x1ba>
 8006916:	2bc0      	cmp	r3, #192	; 0xc0
 8006918:	d814      	bhi.n	8006944 <UART_SetConfig+0x1c0>
 800691a:	2b80      	cmp	r3, #128	; 0x80
 800691c:	d009      	beq.n	8006932 <UART_SetConfig+0x1ae>
 800691e:	2b80      	cmp	r3, #128	; 0x80
 8006920:	d810      	bhi.n	8006944 <UART_SetConfig+0x1c0>
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <UART_SetConfig+0x1a8>
 8006926:	2b40      	cmp	r3, #64	; 0x40
 8006928:	d006      	beq.n	8006938 <UART_SetConfig+0x1b4>
 800692a:	e00b      	b.n	8006944 <UART_SetConfig+0x1c0>
 800692c:	2300      	movs	r3, #0
 800692e:	77fb      	strb	r3, [r7, #31]
 8006930:	e0cc      	b.n	8006acc <UART_SetConfig+0x348>
 8006932:	2302      	movs	r3, #2
 8006934:	77fb      	strb	r3, [r7, #31]
 8006936:	e0c9      	b.n	8006acc <UART_SetConfig+0x348>
 8006938:	2304      	movs	r3, #4
 800693a:	77fb      	strb	r3, [r7, #31]
 800693c:	e0c6      	b.n	8006acc <UART_SetConfig+0x348>
 800693e:	2308      	movs	r3, #8
 8006940:	77fb      	strb	r3, [r7, #31]
 8006942:	e0c3      	b.n	8006acc <UART_SetConfig+0x348>
 8006944:	2310      	movs	r3, #16
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e0c0      	b.n	8006acc <UART_SetConfig+0x348>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a44      	ldr	r2, [pc, #272]	; (8006a60 <UART_SetConfig+0x2dc>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d125      	bne.n	80069a0 <UART_SetConfig+0x21c>
 8006954:	4b3e      	ldr	r3, [pc, #248]	; (8006a50 <UART_SetConfig+0x2cc>)
 8006956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006962:	d017      	beq.n	8006994 <UART_SetConfig+0x210>
 8006964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006968:	d817      	bhi.n	800699a <UART_SetConfig+0x216>
 800696a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800696e:	d00b      	beq.n	8006988 <UART_SetConfig+0x204>
 8006970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006974:	d811      	bhi.n	800699a <UART_SetConfig+0x216>
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <UART_SetConfig+0x1fe>
 800697a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697e:	d006      	beq.n	800698e <UART_SetConfig+0x20a>
 8006980:	e00b      	b.n	800699a <UART_SetConfig+0x216>
 8006982:	2300      	movs	r3, #0
 8006984:	77fb      	strb	r3, [r7, #31]
 8006986:	e0a1      	b.n	8006acc <UART_SetConfig+0x348>
 8006988:	2302      	movs	r3, #2
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	e09e      	b.n	8006acc <UART_SetConfig+0x348>
 800698e:	2304      	movs	r3, #4
 8006990:	77fb      	strb	r3, [r7, #31]
 8006992:	e09b      	b.n	8006acc <UART_SetConfig+0x348>
 8006994:	2308      	movs	r3, #8
 8006996:	77fb      	strb	r3, [r7, #31]
 8006998:	e098      	b.n	8006acc <UART_SetConfig+0x348>
 800699a:	2310      	movs	r3, #16
 800699c:	77fb      	strb	r3, [r7, #31]
 800699e:	e095      	b.n	8006acc <UART_SetConfig+0x348>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a2f      	ldr	r2, [pc, #188]	; (8006a64 <UART_SetConfig+0x2e0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d125      	bne.n	80069f6 <UART_SetConfig+0x272>
 80069aa:	4b29      	ldr	r3, [pc, #164]	; (8006a50 <UART_SetConfig+0x2cc>)
 80069ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069b8:	d017      	beq.n	80069ea <UART_SetConfig+0x266>
 80069ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069be:	d817      	bhi.n	80069f0 <UART_SetConfig+0x26c>
 80069c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c4:	d00b      	beq.n	80069de <UART_SetConfig+0x25a>
 80069c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ca:	d811      	bhi.n	80069f0 <UART_SetConfig+0x26c>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <UART_SetConfig+0x254>
 80069d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d4:	d006      	beq.n	80069e4 <UART_SetConfig+0x260>
 80069d6:	e00b      	b.n	80069f0 <UART_SetConfig+0x26c>
 80069d8:	2301      	movs	r3, #1
 80069da:	77fb      	strb	r3, [r7, #31]
 80069dc:	e076      	b.n	8006acc <UART_SetConfig+0x348>
 80069de:	2302      	movs	r3, #2
 80069e0:	77fb      	strb	r3, [r7, #31]
 80069e2:	e073      	b.n	8006acc <UART_SetConfig+0x348>
 80069e4:	2304      	movs	r3, #4
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e070      	b.n	8006acc <UART_SetConfig+0x348>
 80069ea:	2308      	movs	r3, #8
 80069ec:	77fb      	strb	r3, [r7, #31]
 80069ee:	e06d      	b.n	8006acc <UART_SetConfig+0x348>
 80069f0:	2310      	movs	r3, #16
 80069f2:	77fb      	strb	r3, [r7, #31]
 80069f4:	e06a      	b.n	8006acc <UART_SetConfig+0x348>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1b      	ldr	r2, [pc, #108]	; (8006a68 <UART_SetConfig+0x2e4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d138      	bne.n	8006a72 <UART_SetConfig+0x2ee>
 8006a00:	4b13      	ldr	r3, [pc, #76]	; (8006a50 <UART_SetConfig+0x2cc>)
 8006a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a06:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a0e:	d017      	beq.n	8006a40 <UART_SetConfig+0x2bc>
 8006a10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a14:	d82a      	bhi.n	8006a6c <UART_SetConfig+0x2e8>
 8006a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a1a:	d00b      	beq.n	8006a34 <UART_SetConfig+0x2b0>
 8006a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a20:	d824      	bhi.n	8006a6c <UART_SetConfig+0x2e8>
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <UART_SetConfig+0x2aa>
 8006a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2a:	d006      	beq.n	8006a3a <UART_SetConfig+0x2b6>
 8006a2c:	e01e      	b.n	8006a6c <UART_SetConfig+0x2e8>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	77fb      	strb	r3, [r7, #31]
 8006a32:	e04b      	b.n	8006acc <UART_SetConfig+0x348>
 8006a34:	2302      	movs	r3, #2
 8006a36:	77fb      	strb	r3, [r7, #31]
 8006a38:	e048      	b.n	8006acc <UART_SetConfig+0x348>
 8006a3a:	2304      	movs	r3, #4
 8006a3c:	77fb      	strb	r3, [r7, #31]
 8006a3e:	e045      	b.n	8006acc <UART_SetConfig+0x348>
 8006a40:	2308      	movs	r3, #8
 8006a42:	77fb      	strb	r3, [r7, #31]
 8006a44:	e042      	b.n	8006acc <UART_SetConfig+0x348>
 8006a46:	bf00      	nop
 8006a48:	efff69f3 	.word	0xefff69f3
 8006a4c:	40011000 	.word	0x40011000
 8006a50:	40023800 	.word	0x40023800
 8006a54:	40004400 	.word	0x40004400
 8006a58:	40004800 	.word	0x40004800
 8006a5c:	40004c00 	.word	0x40004c00
 8006a60:	40005000 	.word	0x40005000
 8006a64:	40011400 	.word	0x40011400
 8006a68:	40007800 	.word	0x40007800
 8006a6c:	2310      	movs	r3, #16
 8006a6e:	77fb      	strb	r3, [r7, #31]
 8006a70:	e02c      	b.n	8006acc <UART_SetConfig+0x348>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a72      	ldr	r2, [pc, #456]	; (8006c40 <UART_SetConfig+0x4bc>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d125      	bne.n	8006ac8 <UART_SetConfig+0x344>
 8006a7c:	4b71      	ldr	r3, [pc, #452]	; (8006c44 <UART_SetConfig+0x4c0>)
 8006a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a8a:	d017      	beq.n	8006abc <UART_SetConfig+0x338>
 8006a8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a90:	d817      	bhi.n	8006ac2 <UART_SetConfig+0x33e>
 8006a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a96:	d00b      	beq.n	8006ab0 <UART_SetConfig+0x32c>
 8006a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a9c:	d811      	bhi.n	8006ac2 <UART_SetConfig+0x33e>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <UART_SetConfig+0x326>
 8006aa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006aa6:	d006      	beq.n	8006ab6 <UART_SetConfig+0x332>
 8006aa8:	e00b      	b.n	8006ac2 <UART_SetConfig+0x33e>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	77fb      	strb	r3, [r7, #31]
 8006aae:	e00d      	b.n	8006acc <UART_SetConfig+0x348>
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	e00a      	b.n	8006acc <UART_SetConfig+0x348>
 8006ab6:	2304      	movs	r3, #4
 8006ab8:	77fb      	strb	r3, [r7, #31]
 8006aba:	e007      	b.n	8006acc <UART_SetConfig+0x348>
 8006abc:	2308      	movs	r3, #8
 8006abe:	77fb      	strb	r3, [r7, #31]
 8006ac0:	e004      	b.n	8006acc <UART_SetConfig+0x348>
 8006ac2:	2310      	movs	r3, #16
 8006ac4:	77fb      	strb	r3, [r7, #31]
 8006ac6:	e001      	b.n	8006acc <UART_SetConfig+0x348>
 8006ac8:	2310      	movs	r3, #16
 8006aca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad4:	d15b      	bne.n	8006b8e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006ad6:	7ffb      	ldrb	r3, [r7, #31]
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d828      	bhi.n	8006b2e <UART_SetConfig+0x3aa>
 8006adc:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <UART_SetConfig+0x360>)
 8006ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae2:	bf00      	nop
 8006ae4:	08006b09 	.word	0x08006b09
 8006ae8:	08006b11 	.word	0x08006b11
 8006aec:	08006b19 	.word	0x08006b19
 8006af0:	08006b2f 	.word	0x08006b2f
 8006af4:	08006b1f 	.word	0x08006b1f
 8006af8:	08006b2f 	.word	0x08006b2f
 8006afc:	08006b2f 	.word	0x08006b2f
 8006b00:	08006b2f 	.word	0x08006b2f
 8006b04:	08006b27 	.word	0x08006b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b08:	f7fd fbf2 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8006b0c:	61b8      	str	r0, [r7, #24]
        break;
 8006b0e:	e013      	b.n	8006b38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b10:	f7fd fc02 	bl	8004318 <HAL_RCC_GetPCLK2Freq>
 8006b14:	61b8      	str	r0, [r7, #24]
        break;
 8006b16:	e00f      	b.n	8006b38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b18:	4b4b      	ldr	r3, [pc, #300]	; (8006c48 <UART_SetConfig+0x4c4>)
 8006b1a:	61bb      	str	r3, [r7, #24]
        break;
 8006b1c:	e00c      	b.n	8006b38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b1e:	f7fd fad7 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8006b22:	61b8      	str	r0, [r7, #24]
        break;
 8006b24:	e008      	b.n	8006b38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b2a:	61bb      	str	r3, [r7, #24]
        break;
 8006b2c:	e004      	b.n	8006b38 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	77bb      	strb	r3, [r7, #30]
        break;
 8006b36:	bf00      	nop
>>>>>>> Stashed changes
=======
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a94      	ldr	r2, [pc, #592]	; (8006894 <UART_SetConfig+0x2c8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d120      	bne.n	800668a <UART_SetConfig+0xbe>
 8006648:	4b93      	ldr	r3, [pc, #588]	; (8006898 <UART_SetConfig+0x2cc>)
 800664a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	2b03      	cmp	r3, #3
 8006654:	d816      	bhi.n	8006684 <UART_SetConfig+0xb8>
 8006656:	a201      	add	r2, pc, #4	; (adr r2, 800665c <UART_SetConfig+0x90>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	0800666d 	.word	0x0800666d
 8006660:	08006679 	.word	0x08006679
 8006664:	08006673 	.word	0x08006673
 8006668:	0800667f 	.word	0x0800667f
 800666c:	2301      	movs	r3, #1
 800666e:	77fb      	strb	r3, [r7, #31]
 8006670:	e150      	b.n	8006914 <UART_SetConfig+0x348>
 8006672:	2302      	movs	r3, #2
 8006674:	77fb      	strb	r3, [r7, #31]
 8006676:	e14d      	b.n	8006914 <UART_SetConfig+0x348>
 8006678:	2304      	movs	r3, #4
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	e14a      	b.n	8006914 <UART_SetConfig+0x348>
 800667e:	2308      	movs	r3, #8
 8006680:	77fb      	strb	r3, [r7, #31]
 8006682:	e147      	b.n	8006914 <UART_SetConfig+0x348>
 8006684:	2310      	movs	r3, #16
 8006686:	77fb      	strb	r3, [r7, #31]
 8006688:	e144      	b.n	8006914 <UART_SetConfig+0x348>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a83      	ldr	r2, [pc, #524]	; (800689c <UART_SetConfig+0x2d0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d132      	bne.n	80066fa <UART_SetConfig+0x12e>
 8006694:	4b80      	ldr	r3, [pc, #512]	; (8006898 <UART_SetConfig+0x2cc>)
 8006696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669a:	f003 030c 	and.w	r3, r3, #12
 800669e:	2b0c      	cmp	r3, #12
 80066a0:	d828      	bhi.n	80066f4 <UART_SetConfig+0x128>
 80066a2:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <UART_SetConfig+0xdc>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066dd 	.word	0x080066dd
 80066ac:	080066f5 	.word	0x080066f5
 80066b0:	080066f5 	.word	0x080066f5
 80066b4:	080066f5 	.word	0x080066f5
 80066b8:	080066e9 	.word	0x080066e9
 80066bc:	080066f5 	.word	0x080066f5
 80066c0:	080066f5 	.word	0x080066f5
 80066c4:	080066f5 	.word	0x080066f5
 80066c8:	080066e3 	.word	0x080066e3
 80066cc:	080066f5 	.word	0x080066f5
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	080066f5 	.word	0x080066f5
 80066d8:	080066ef 	.word	0x080066ef
 80066dc:	2300      	movs	r3, #0
 80066de:	77fb      	strb	r3, [r7, #31]
 80066e0:	e118      	b.n	8006914 <UART_SetConfig+0x348>
 80066e2:	2302      	movs	r3, #2
 80066e4:	77fb      	strb	r3, [r7, #31]
 80066e6:	e115      	b.n	8006914 <UART_SetConfig+0x348>
 80066e8:	2304      	movs	r3, #4
 80066ea:	77fb      	strb	r3, [r7, #31]
 80066ec:	e112      	b.n	8006914 <UART_SetConfig+0x348>
 80066ee:	2308      	movs	r3, #8
 80066f0:	77fb      	strb	r3, [r7, #31]
 80066f2:	e10f      	b.n	8006914 <UART_SetConfig+0x348>
 80066f4:	2310      	movs	r3, #16
 80066f6:	77fb      	strb	r3, [r7, #31]
 80066f8:	e10c      	b.n	8006914 <UART_SetConfig+0x348>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a68      	ldr	r2, [pc, #416]	; (80068a0 <UART_SetConfig+0x2d4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d120      	bne.n	8006746 <UART_SetConfig+0x17a>
 8006704:	4b64      	ldr	r3, [pc, #400]	; (8006898 <UART_SetConfig+0x2cc>)
 8006706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800670e:	2b30      	cmp	r3, #48	; 0x30
 8006710:	d013      	beq.n	800673a <UART_SetConfig+0x16e>
 8006712:	2b30      	cmp	r3, #48	; 0x30
 8006714:	d814      	bhi.n	8006740 <UART_SetConfig+0x174>
 8006716:	2b20      	cmp	r3, #32
 8006718:	d009      	beq.n	800672e <UART_SetConfig+0x162>
 800671a:	2b20      	cmp	r3, #32
 800671c:	d810      	bhi.n	8006740 <UART_SetConfig+0x174>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <UART_SetConfig+0x15c>
 8006722:	2b10      	cmp	r3, #16
 8006724:	d006      	beq.n	8006734 <UART_SetConfig+0x168>
 8006726:	e00b      	b.n	8006740 <UART_SetConfig+0x174>
 8006728:	2300      	movs	r3, #0
 800672a:	77fb      	strb	r3, [r7, #31]
 800672c:	e0f2      	b.n	8006914 <UART_SetConfig+0x348>
 800672e:	2302      	movs	r3, #2
 8006730:	77fb      	strb	r3, [r7, #31]
 8006732:	e0ef      	b.n	8006914 <UART_SetConfig+0x348>
 8006734:	2304      	movs	r3, #4
 8006736:	77fb      	strb	r3, [r7, #31]
 8006738:	e0ec      	b.n	8006914 <UART_SetConfig+0x348>
 800673a:	2308      	movs	r3, #8
 800673c:	77fb      	strb	r3, [r7, #31]
 800673e:	e0e9      	b.n	8006914 <UART_SetConfig+0x348>
 8006740:	2310      	movs	r3, #16
 8006742:	77fb      	strb	r3, [r7, #31]
 8006744:	e0e6      	b.n	8006914 <UART_SetConfig+0x348>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a56      	ldr	r2, [pc, #344]	; (80068a4 <UART_SetConfig+0x2d8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d120      	bne.n	8006792 <UART_SetConfig+0x1c6>
 8006750:	4b51      	ldr	r3, [pc, #324]	; (8006898 <UART_SetConfig+0x2cc>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006756:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800675a:	2bc0      	cmp	r3, #192	; 0xc0
 800675c:	d013      	beq.n	8006786 <UART_SetConfig+0x1ba>
 800675e:	2bc0      	cmp	r3, #192	; 0xc0
 8006760:	d814      	bhi.n	800678c <UART_SetConfig+0x1c0>
 8006762:	2b80      	cmp	r3, #128	; 0x80
 8006764:	d009      	beq.n	800677a <UART_SetConfig+0x1ae>
 8006766:	2b80      	cmp	r3, #128	; 0x80
 8006768:	d810      	bhi.n	800678c <UART_SetConfig+0x1c0>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <UART_SetConfig+0x1a8>
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	d006      	beq.n	8006780 <UART_SetConfig+0x1b4>
 8006772:	e00b      	b.n	800678c <UART_SetConfig+0x1c0>
 8006774:	2300      	movs	r3, #0
 8006776:	77fb      	strb	r3, [r7, #31]
 8006778:	e0cc      	b.n	8006914 <UART_SetConfig+0x348>
 800677a:	2302      	movs	r3, #2
 800677c:	77fb      	strb	r3, [r7, #31]
 800677e:	e0c9      	b.n	8006914 <UART_SetConfig+0x348>
 8006780:	2304      	movs	r3, #4
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e0c6      	b.n	8006914 <UART_SetConfig+0x348>
 8006786:	2308      	movs	r3, #8
 8006788:	77fb      	strb	r3, [r7, #31]
 800678a:	e0c3      	b.n	8006914 <UART_SetConfig+0x348>
 800678c:	2310      	movs	r3, #16
 800678e:	77fb      	strb	r3, [r7, #31]
 8006790:	e0c0      	b.n	8006914 <UART_SetConfig+0x348>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a44      	ldr	r2, [pc, #272]	; (80068a8 <UART_SetConfig+0x2dc>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d125      	bne.n	80067e8 <UART_SetConfig+0x21c>
 800679c:	4b3e      	ldr	r3, [pc, #248]	; (8006898 <UART_SetConfig+0x2cc>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067aa:	d017      	beq.n	80067dc <UART_SetConfig+0x210>
 80067ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067b0:	d817      	bhi.n	80067e2 <UART_SetConfig+0x216>
 80067b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b6:	d00b      	beq.n	80067d0 <UART_SetConfig+0x204>
 80067b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067bc:	d811      	bhi.n	80067e2 <UART_SetConfig+0x216>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <UART_SetConfig+0x1fe>
 80067c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c6:	d006      	beq.n	80067d6 <UART_SetConfig+0x20a>
 80067c8:	e00b      	b.n	80067e2 <UART_SetConfig+0x216>
 80067ca:	2300      	movs	r3, #0
 80067cc:	77fb      	strb	r3, [r7, #31]
 80067ce:	e0a1      	b.n	8006914 <UART_SetConfig+0x348>
 80067d0:	2302      	movs	r3, #2
 80067d2:	77fb      	strb	r3, [r7, #31]
 80067d4:	e09e      	b.n	8006914 <UART_SetConfig+0x348>
 80067d6:	2304      	movs	r3, #4
 80067d8:	77fb      	strb	r3, [r7, #31]
 80067da:	e09b      	b.n	8006914 <UART_SetConfig+0x348>
 80067dc:	2308      	movs	r3, #8
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e098      	b.n	8006914 <UART_SetConfig+0x348>
 80067e2:	2310      	movs	r3, #16
 80067e4:	77fb      	strb	r3, [r7, #31]
 80067e6:	e095      	b.n	8006914 <UART_SetConfig+0x348>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a2f      	ldr	r2, [pc, #188]	; (80068ac <UART_SetConfig+0x2e0>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d125      	bne.n	800683e <UART_SetConfig+0x272>
 80067f2:	4b29      	ldr	r3, [pc, #164]	; (8006898 <UART_SetConfig+0x2cc>)
 80067f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006800:	d017      	beq.n	8006832 <UART_SetConfig+0x266>
 8006802:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006806:	d817      	bhi.n	8006838 <UART_SetConfig+0x26c>
 8006808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800680c:	d00b      	beq.n	8006826 <UART_SetConfig+0x25a>
 800680e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006812:	d811      	bhi.n	8006838 <UART_SetConfig+0x26c>
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <UART_SetConfig+0x254>
 8006818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800681c:	d006      	beq.n	800682c <UART_SetConfig+0x260>
 800681e:	e00b      	b.n	8006838 <UART_SetConfig+0x26c>
 8006820:	2301      	movs	r3, #1
 8006822:	77fb      	strb	r3, [r7, #31]
 8006824:	e076      	b.n	8006914 <UART_SetConfig+0x348>
 8006826:	2302      	movs	r3, #2
 8006828:	77fb      	strb	r3, [r7, #31]
 800682a:	e073      	b.n	8006914 <UART_SetConfig+0x348>
 800682c:	2304      	movs	r3, #4
 800682e:	77fb      	strb	r3, [r7, #31]
 8006830:	e070      	b.n	8006914 <UART_SetConfig+0x348>
 8006832:	2308      	movs	r3, #8
 8006834:	77fb      	strb	r3, [r7, #31]
 8006836:	e06d      	b.n	8006914 <UART_SetConfig+0x348>
 8006838:	2310      	movs	r3, #16
 800683a:	77fb      	strb	r3, [r7, #31]
 800683c:	e06a      	b.n	8006914 <UART_SetConfig+0x348>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1b      	ldr	r2, [pc, #108]	; (80068b0 <UART_SetConfig+0x2e4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d138      	bne.n	80068ba <UART_SetConfig+0x2ee>
 8006848:	4b13      	ldr	r3, [pc, #76]	; (8006898 <UART_SetConfig+0x2cc>)
 800684a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800684e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006852:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006856:	d017      	beq.n	8006888 <UART_SetConfig+0x2bc>
 8006858:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800685c:	d82a      	bhi.n	80068b4 <UART_SetConfig+0x2e8>
 800685e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006862:	d00b      	beq.n	800687c <UART_SetConfig+0x2b0>
 8006864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006868:	d824      	bhi.n	80068b4 <UART_SetConfig+0x2e8>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <UART_SetConfig+0x2aa>
 800686e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006872:	d006      	beq.n	8006882 <UART_SetConfig+0x2b6>
 8006874:	e01e      	b.n	80068b4 <UART_SetConfig+0x2e8>
 8006876:	2300      	movs	r3, #0
 8006878:	77fb      	strb	r3, [r7, #31]
 800687a:	e04b      	b.n	8006914 <UART_SetConfig+0x348>
 800687c:	2302      	movs	r3, #2
 800687e:	77fb      	strb	r3, [r7, #31]
 8006880:	e048      	b.n	8006914 <UART_SetConfig+0x348>
 8006882:	2304      	movs	r3, #4
 8006884:	77fb      	strb	r3, [r7, #31]
 8006886:	e045      	b.n	8006914 <UART_SetConfig+0x348>
 8006888:	2308      	movs	r3, #8
 800688a:	77fb      	strb	r3, [r7, #31]
 800688c:	e042      	b.n	8006914 <UART_SetConfig+0x348>
 800688e:	bf00      	nop
 8006890:	efff69f3 	.word	0xefff69f3
 8006894:	40011000 	.word	0x40011000
 8006898:	40023800 	.word	0x40023800
 800689c:	40004400 	.word	0x40004400
 80068a0:	40004800 	.word	0x40004800
 80068a4:	40004c00 	.word	0x40004c00
 80068a8:	40005000 	.word	0x40005000
 80068ac:	40011400 	.word	0x40011400
 80068b0:	40007800 	.word	0x40007800
 80068b4:	2310      	movs	r3, #16
 80068b6:	77fb      	strb	r3, [r7, #31]
 80068b8:	e02c      	b.n	8006914 <UART_SetConfig+0x348>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a72      	ldr	r2, [pc, #456]	; (8006a88 <UART_SetConfig+0x4bc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d125      	bne.n	8006910 <UART_SetConfig+0x344>
 80068c4:	4b71      	ldr	r3, [pc, #452]	; (8006a8c <UART_SetConfig+0x4c0>)
 80068c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068d2:	d017      	beq.n	8006904 <UART_SetConfig+0x338>
 80068d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068d8:	d817      	bhi.n	800690a <UART_SetConfig+0x33e>
 80068da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068de:	d00b      	beq.n	80068f8 <UART_SetConfig+0x32c>
 80068e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e4:	d811      	bhi.n	800690a <UART_SetConfig+0x33e>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <UART_SetConfig+0x326>
 80068ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068ee:	d006      	beq.n	80068fe <UART_SetConfig+0x332>
 80068f0:	e00b      	b.n	800690a <UART_SetConfig+0x33e>
 80068f2:	2300      	movs	r3, #0
 80068f4:	77fb      	strb	r3, [r7, #31]
 80068f6:	e00d      	b.n	8006914 <UART_SetConfig+0x348>
 80068f8:	2302      	movs	r3, #2
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e00a      	b.n	8006914 <UART_SetConfig+0x348>
 80068fe:	2304      	movs	r3, #4
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e007      	b.n	8006914 <UART_SetConfig+0x348>
 8006904:	2308      	movs	r3, #8
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e004      	b.n	8006914 <UART_SetConfig+0x348>
 800690a:	2310      	movs	r3, #16
 800690c:	77fb      	strb	r3, [r7, #31]
 800690e:	e001      	b.n	8006914 <UART_SetConfig+0x348>
 8006910:	2310      	movs	r3, #16
 8006912:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800691c:	d15b      	bne.n	80069d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800691e:	7ffb      	ldrb	r3, [r7, #31]
 8006920:	2b08      	cmp	r3, #8
 8006922:	d828      	bhi.n	8006976 <UART_SetConfig+0x3aa>
 8006924:	a201      	add	r2, pc, #4	; (adr r2, 800692c <UART_SetConfig+0x360>)
 8006926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692a:	bf00      	nop
 800692c:	08006951 	.word	0x08006951
 8006930:	08006959 	.word	0x08006959
 8006934:	08006961 	.word	0x08006961
 8006938:	08006977 	.word	0x08006977
 800693c:	08006967 	.word	0x08006967
 8006940:	08006977 	.word	0x08006977
 8006944:	08006977 	.word	0x08006977
 8006948:	08006977 	.word	0x08006977
 800694c:	0800696f 	.word	0x0800696f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006950:	f7fd fbf2 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8006954:	61b8      	str	r0, [r7, #24]
        break;
 8006956:	e013      	b.n	8006980 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006958:	f7fd fc02 	bl	8004160 <HAL_RCC_GetPCLK2Freq>
 800695c:	61b8      	str	r0, [r7, #24]
        break;
 800695e:	e00f      	b.n	8006980 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006960:	4b4b      	ldr	r3, [pc, #300]	; (8006a90 <UART_SetConfig+0x4c4>)
 8006962:	61bb      	str	r3, [r7, #24]
        break;
 8006964:	e00c      	b.n	8006980 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006966:	f7fd fad7 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 800696a:	61b8      	str	r0, [r7, #24]
        break;
 800696c:	e008      	b.n	8006980 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006972:	61bb      	str	r3, [r7, #24]
        break;
 8006974:	e004      	b.n	8006980 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	77bb      	strb	r3, [r7, #30]
        break;
 800697e:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d074      	beq.n	8005234 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	005a      	lsls	r2, r3, #1
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	085b      	lsrs	r3, r3, #1
 8005154:	441a      	add	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	fbb2 f3f3 	udiv	r3, r2, r3
 800515e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b0f      	cmp	r3, #15
 8005164:	d916      	bls.n	8005194 <UART_SetConfig+0x404>
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800516c:	d212      	bcs.n	8005194 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	b29b      	uxth	r3, r3
 8005172:	f023 030f 	bic.w	r3, r3, #15
 8005176:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	085b      	lsrs	r3, r3, #1
 800517c:	b29b      	uxth	r3, r3
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	b29a      	uxth	r2, r3
 8005184:	89fb      	ldrh	r3, [r7, #14]
 8005186:	4313      	orrs	r3, r2
 8005188:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	89fa      	ldrh	r2, [r7, #14]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	e04f      	b.n	8005234 <UART_SetConfig+0x4a4>
=======
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d074      	beq.n	8006c28 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	005a      	lsls	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	085b      	lsrs	r3, r3, #1
 8006b48:	441a      	add	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b0f      	cmp	r3, #15
 8006b58:	d916      	bls.n	8006b88 <UART_SetConfig+0x404>
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b60:	d212      	bcs.n	8006b88 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f023 030f 	bic.w	r3, r3, #15
 8006b6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	085b      	lsrs	r3, r3, #1
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	89fb      	ldrh	r3, [r7, #14]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	89fa      	ldrh	r2, [r7, #14]
 8006b84:	60da      	str	r2, [r3, #12]
 8006b86:	e04f      	b.n	8006c28 <UART_SetConfig+0x4a4>
>>>>>>> Stashed changes
=======
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d074      	beq.n	8006a70 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	005a      	lsls	r2, r3, #1
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	085b      	lsrs	r3, r3, #1
 8006990:	441a      	add	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	fbb2 f3f3 	udiv	r3, r2, r3
 800699a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	2b0f      	cmp	r3, #15
 80069a0:	d916      	bls.n	80069d0 <UART_SetConfig+0x404>
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a8:	d212      	bcs.n	80069d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	f023 030f 	bic.w	r3, r3, #15
 80069b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	b29a      	uxth	r2, r3
 80069c0:	89fb      	ldrh	r3, [r7, #14]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	89fa      	ldrh	r2, [r7, #14]
 80069cc:	60da      	str	r2, [r3, #12]
 80069ce:	e04f      	b.n	8006a70 <UART_SetConfig+0x4a4>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005194:	2301      	movs	r3, #1
 8005196:	77bb      	strb	r3, [r7, #30]
 8005198:	e04c      	b.n	8005234 <UART_SetConfig+0x4a4>
=======
 8006b88:	2301      	movs	r3, #1
 8006b8a:	77bb      	strb	r3, [r7, #30]
 8006b8c:	e04c      	b.n	8006c28 <UART_SetConfig+0x4a4>
>>>>>>> Stashed changes
=======
 80069d0:	2301      	movs	r3, #1
 80069d2:	77bb      	strb	r3, [r7, #30]
 80069d4:	e04c      	b.n	8006a70 <UART_SetConfig+0x4a4>
>>>>>>> Stashed changes
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800519a:	7ffb      	ldrb	r3, [r7, #31]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d828      	bhi.n	80051f2 <UART_SetConfig+0x462>
 80051a0:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <UART_SetConfig+0x418>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	080051cd 	.word	0x080051cd
 80051ac:	080051d5 	.word	0x080051d5
 80051b0:	080051dd 	.word	0x080051dd
 80051b4:	080051f3 	.word	0x080051f3
 80051b8:	080051e3 	.word	0x080051e3
 80051bc:	080051f3 	.word	0x080051f3
 80051c0:	080051f3 	.word	0x080051f3
 80051c4:	080051f3 	.word	0x080051f3
 80051c8:	080051eb 	.word	0x080051eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051cc:	f7fd ffe4 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 80051d0:	61b8      	str	r0, [r7, #24]
        break;
 80051d2:	e013      	b.n	80051fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d4:	f7fd fff4 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 80051d8:	61b8      	str	r0, [r7, #24]
        break;
 80051da:	e00f      	b.n	80051fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051dc:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <UART_SetConfig+0x4c4>)
 80051de:	61bb      	str	r3, [r7, #24]
        break;
 80051e0:	e00c      	b.n	80051fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e2:	f7fd fec9 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 80051e6:	61b8      	str	r0, [r7, #24]
        break;
 80051e8:	e008      	b.n	80051fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ee:	61bb      	str	r3, [r7, #24]
        break;
 80051f0:	e004      	b.n	80051fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	77bb      	strb	r3, [r7, #30]
        break;
 80051fa:	bf00      	nop
    }

    if (pclk != 0U)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d018      	beq.n	8005234 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	085a      	lsrs	r2, r3, #1
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	441a      	add	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	2b0f      	cmp	r3, #15
 800521a:	d909      	bls.n	8005230 <UART_SetConfig+0x4a0>
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005222:	d205      	bcs.n	8005230 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	b29a      	uxth	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60da      	str	r2, [r3, #12]
 800522e:	e001      	b.n	8005234 <UART_SetConfig+0x4a4>
=======
 8006b8e:	7ffb      	ldrb	r3, [r7, #31]
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d828      	bhi.n	8006be6 <UART_SetConfig+0x462>
 8006b94:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <UART_SetConfig+0x418>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bc1 	.word	0x08006bc1
 8006ba0:	08006bc9 	.word	0x08006bc9
 8006ba4:	08006bd1 	.word	0x08006bd1
 8006ba8:	08006be7 	.word	0x08006be7
 8006bac:	08006bd7 	.word	0x08006bd7
 8006bb0:	08006be7 	.word	0x08006be7
 8006bb4:	08006be7 	.word	0x08006be7
 8006bb8:	08006be7 	.word	0x08006be7
 8006bbc:	08006bdf 	.word	0x08006bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bc0:	f7fd fb96 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8006bc4:	61b8      	str	r0, [r7, #24]
        break;
 8006bc6:	e013      	b.n	8006bf0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bc8:	f7fd fba6 	bl	8004318 <HAL_RCC_GetPCLK2Freq>
 8006bcc:	61b8      	str	r0, [r7, #24]
        break;
 8006bce:	e00f      	b.n	8006bf0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bd0:	4b1d      	ldr	r3, [pc, #116]	; (8006c48 <UART_SetConfig+0x4c4>)
 8006bd2:	61bb      	str	r3, [r7, #24]
        break;
 8006bd4:	e00c      	b.n	8006bf0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bd6:	f7fd fa7b 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8006bda:	61b8      	str	r0, [r7, #24]
        break;
 8006bdc:	e008      	b.n	8006bf0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006be2:	61bb      	str	r3, [r7, #24]
        break;
 8006be4:	e004      	b.n	8006bf0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	77bb      	strb	r3, [r7, #30]
        break;
 8006bee:	bf00      	nop
    }

    if (pclk != 0U)
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d018      	beq.n	8006c28 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	085a      	lsrs	r2, r3, #1
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	441a      	add	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	2b0f      	cmp	r3, #15
 8006c0e:	d909      	bls.n	8006c24 <UART_SetConfig+0x4a0>
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c16:	d205      	bcs.n	8006c24 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	60da      	str	r2, [r3, #12]
 8006c22:	e001      	b.n	8006c28 <UART_SetConfig+0x4a4>
>>>>>>> Stashed changes
=======
 80069d6:	7ffb      	ldrb	r3, [r7, #31]
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d828      	bhi.n	8006a2e <UART_SetConfig+0x462>
 80069dc:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <UART_SetConfig+0x418>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	08006a09 	.word	0x08006a09
 80069e8:	08006a11 	.word	0x08006a11
 80069ec:	08006a19 	.word	0x08006a19
 80069f0:	08006a2f 	.word	0x08006a2f
 80069f4:	08006a1f 	.word	0x08006a1f
 80069f8:	08006a2f 	.word	0x08006a2f
 80069fc:	08006a2f 	.word	0x08006a2f
 8006a00:	08006a2f 	.word	0x08006a2f
 8006a04:	08006a27 	.word	0x08006a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a08:	f7fd fb96 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8006a0c:	61b8      	str	r0, [r7, #24]
        break;
 8006a0e:	e013      	b.n	8006a38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a10:	f7fd fba6 	bl	8004160 <HAL_RCC_GetPCLK2Freq>
 8006a14:	61b8      	str	r0, [r7, #24]
        break;
 8006a16:	e00f      	b.n	8006a38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a18:	4b1d      	ldr	r3, [pc, #116]	; (8006a90 <UART_SetConfig+0x4c4>)
 8006a1a:	61bb      	str	r3, [r7, #24]
        break;
 8006a1c:	e00c      	b.n	8006a38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a1e:	f7fd fa7b 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8006a22:	61b8      	str	r0, [r7, #24]
        break;
 8006a24:	e008      	b.n	8006a38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a2a:	61bb      	str	r3, [r7, #24]
        break;
 8006a2c:	e004      	b.n	8006a38 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	77bb      	strb	r3, [r7, #30]
        break;
 8006a36:	bf00      	nop
    }

    if (pclk != 0U)
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d018      	beq.n	8006a70 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	085a      	lsrs	r2, r3, #1
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	441a      	add	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	2b0f      	cmp	r3, #15
 8006a56:	d909      	bls.n	8006a6c <UART_SetConfig+0x4a0>
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a5e:	d205      	bcs.n	8006a6c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	60da      	str	r2, [r3, #12]
 8006a6a:	e001      	b.n	8006a70 <UART_SetConfig+0x4a4>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005230:	2301      	movs	r3, #1
 8005232:	77bb      	strb	r3, [r7, #30]
=======
 8006c24:	2301      	movs	r3, #1
 8006c26:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
=======
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005240:	7fbb      	ldrb	r3, [r7, #30]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3720      	adds	r7, #32
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40007c00 	.word	0x40007c00
 8005250:	40023800 	.word	0x40023800
 8005254:	00f42400 	.word	0x00f42400

08005258 <UART_AdvFeatureConfig>:
=======
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c34:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3720      	adds	r7, #32
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	40007c00 	.word	0x40007c00
 8006c44:	40023800 	.word	0x40023800
 8006c48:	00f42400 	.word	0x00f42400

08006c4c <UART_AdvFeatureConfig>:
>>>>>>> Stashed changes
=======
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006a7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3720      	adds	r7, #32
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	40007c00 	.word	0x40007c00
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	00f42400 	.word	0x00f42400

08006a94 <UART_AdvFeatureConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
=======
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
=======
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
=======
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
=======
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	605a      	str	r2, [r3, #4]
=======
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
=======
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]
=======
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
=======
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	605a      	str	r2, [r3, #4]
=======
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
=======
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	f003 0308 	and.w	r3, r3, #8
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	609a      	str	r2, [r3, #8]
=======
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	f003 0310 	and.w	r3, r3, #16
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00a      	beq.n	8006cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
=======
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	f003 0310 	and.w	r3, r3, #16
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00a      	beq.n	8006b46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	609a      	str	r2, [r3, #8]
=======
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	f003 0320 	and.w	r3, r3, #32
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
=======
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01a      	beq.n	800536e <UART_AdvFeatureConfig+0x116>
=======
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d01a      	beq.n	8006d62 <UART_AdvFeatureConfig+0x116>
>>>>>>> Stashed changes
=======
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d01a      	beq.n	8006baa <UART_AdvFeatureConfig+0x116>
>>>>>>> Stashed changes
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005356:	d10a      	bne.n	800536e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
=======
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d4a:	d10a      	bne.n	8006d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
=======
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b92:	d10a      	bne.n	8006baa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	605a      	str	r2, [r3, #4]
  }
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <UART_CheckIdleState>:
=======
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	605a      	str	r2, [r3, #4]
  }
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <UART_CheckIdleState>:
>>>>>>> Stashed changes
=======
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	605a      	str	r2, [r3, #4]
  }
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <UART_CheckIdleState>:
>>>>>>> Stashed changes
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	6078      	str	r0, [r7, #4]
=======
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af02      	add	r7, sp, #8
 8006d96:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
=======
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053ac:	f7fc fbea 	bl	8001b84 <HAL_GetTick>
 80053b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d10e      	bne.n	80053de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f831 	bl	8005436 <UART_WaitOnFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e027      	b.n	800542e <UART_CheckIdleState+0x92>
=======
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006da0:	f7fb fcb2 	bl	8002708 <HAL_GetTick>
 8006da4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d10e      	bne.n	8006dd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f831 	bl	8006e2a <UART_WaitOnFlagUntilTimeout>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e027      	b.n	8006e22 <UART_CheckIdleState+0x92>
>>>>>>> Stashed changes
=======
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006be8:	f7fb fcb2 	bl	8002550 <HAL_GetTick>
 8006bec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0308 	and.w	r3, r3, #8
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d10e      	bne.n	8006c1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f831 	bl	8006c72 <UART_WaitOnFlagUntilTimeout>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e027      	b.n	8006c6a <UART_CheckIdleState+0x92>
>>>>>>> Stashed changes
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d10e      	bne.n	800540a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f81b 	bl	8005436 <UART_WaitOnFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e011      	b.n	800542e <UART_CheckIdleState+0x92>
=======
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d10e      	bne.n	8006dfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f81b 	bl	8006e2a <UART_WaitOnFlagUntilTimeout>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e011      	b.n	8006e22 <UART_CheckIdleState+0x92>
>>>>>>> Stashed changes
=======
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d10e      	bne.n	8006c46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f81b 	bl	8006c72 <UART_WaitOnFlagUntilTimeout>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e011      	b.n	8006c6a <UART_CheckIdleState+0x92>
>>>>>>> Stashed changes
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2220      	movs	r2, #32
 8005414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <UART_WaitOnFlagUntilTimeout>:
=======
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2220      	movs	r2, #32
 8006e02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
=======
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005436:	b580      	push	{r7, lr}
 8005438:	b09c      	sub	sp, #112	; 0x70
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	603b      	str	r3, [r7, #0]
 8005442:	4613      	mov	r3, r2
 8005444:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005446:	e0a7      	b.n	8005598 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	f000 80a3 	beq.w	8005598 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005452:	f7fc fb97 	bl	8001b84 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800545e:	429a      	cmp	r2, r3
 8005460:	d302      	bcc.n	8005468 <UART_WaitOnFlagUntilTimeout+0x32>
 8005462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005464:	2b00      	cmp	r3, #0
 8005466:	d13f      	bne.n	80054e8 <UART_WaitOnFlagUntilTimeout+0xb2>
=======
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b09c      	sub	sp, #112	; 0x70
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	603b      	str	r3, [r7, #0]
 8006e36:	4613      	mov	r3, r2
 8006e38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e3a:	e0a7      	b.n	8006f8c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e42:	f000 80a3 	beq.w	8006f8c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e46:	f7fb fc5f 	bl	8002708 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d302      	bcc.n	8006e5c <UART_WaitOnFlagUntilTimeout+0x32>
 8006e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d13f      	bne.n	8006edc <UART_WaitOnFlagUntilTimeout+0xb2>
>>>>>>> Stashed changes
=======
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b09c      	sub	sp, #112	; 0x70
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	60b9      	str	r1, [r7, #8]
 8006c7c:	603b      	str	r3, [r7, #0]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c82:	e0a7      	b.n	8006dd4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8a:	f000 80a3 	beq.w	8006dd4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c8e:	f7fb fc5f 	bl	8002550 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d302      	bcc.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d13f      	bne.n	8006d24 <UART_WaitOnFlagUntilTimeout+0xb2>
>>>>>>> Stashed changes
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005478:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800547c:	667b      	str	r3, [r7, #100]	; 0x64
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005486:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005488:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800548c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e6      	bne.n	8005468 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3308      	adds	r3, #8
 80054a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	f023 0301 	bic.w	r3, r3, #1
 80054b0:	663b      	str	r3, [r7, #96]	; 0x60
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3308      	adds	r3, #8
 80054b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80054bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e5      	bne.n	800549a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e068      	b.n	80055ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d050      	beq.n	8005598 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005504:	d148      	bne.n	8005598 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800550e:	621a      	str	r2, [r3, #32]
=======
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e70:	667b      	str	r3, [r7, #100]	; 0x64
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e6      	bne.n	8006e5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3308      	adds	r3, #8
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea0:	f023 0301 	bic.w	r3, r3, #1
 8006ea4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3308      	adds	r3, #8
 8006eac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006eae:	64ba      	str	r2, [r7, #72]	; 0x48
 8006eb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e5      	bne.n	8006e8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e068      	b.n	8006fae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0304 	and.w	r3, r3, #4
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d050      	beq.n	8006f8c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ef8:	d148      	bne.n	8006f8c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f02:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
=======
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cb8:	667b      	str	r3, [r7, #100]	; 0x64
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cc4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e6      	bne.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3308      	adds	r3, #8
 8006cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce8:	f023 0301 	bic.w	r3, r3, #1
 8006cec:	663b      	str	r3, [r7, #96]	; 0x60
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cf6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006cf8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cfe:	e841 2300 	strex	r3, r2, [r1]
 8006d02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1e5      	bne.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e068      	b.n	8006df6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d050      	beq.n	8006dd4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d40:	d148      	bne.n	8006dd4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d4a:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005524:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552e:	637b      	str	r3, [r7, #52]	; 0x34
 8005530:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005536:	e841 2300 	strex	r3, r2, [r1]
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1e6      	bne.n	8005510 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3308      	adds	r3, #8
 8005548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	613b      	str	r3, [r7, #16]
   return(result);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f023 0301 	bic.w	r3, r3, #1
 8005558:	66bb      	str	r3, [r7, #104]	; 0x68
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3308      	adds	r3, #8
 8005560:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005562:	623a      	str	r2, [r7, #32]
 8005564:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	69f9      	ldr	r1, [r7, #28]
 8005568:	6a3a      	ldr	r2, [r7, #32]
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e5      	bne.n	8005542 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e010      	b.n	80055ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	4013      	ands	r3, r2
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	bf0c      	ite	eq
 80055a8:	2301      	moveq	r3, #1
 80055aa:	2300      	movne	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	f43f af48 	beq.w	8005448 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f22:	637b      	str	r3, [r7, #52]	; 0x34
 8006f24:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f2a:	e841 2300 	strex	r3, r2, [r1]
 8006f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e6      	bne.n	8006f04 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	613b      	str	r3, [r7, #16]
   return(result);
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f023 0301 	bic.w	r3, r3, #1
 8006f4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3308      	adds	r3, #8
 8006f54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f56:	623a      	str	r2, [r7, #32]
 8006f58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5a:	69f9      	ldr	r1, [r7, #28]
 8006f5c:	6a3a      	ldr	r2, [r7, #32]
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e5      	bne.n	8006f36 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2220      	movs	r2, #32
 8006f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e010      	b.n	8006fae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	69da      	ldr	r2, [r3, #28]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	4013      	ands	r3, r2
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	bf0c      	ite	eq
 8006f9c:	2301      	moveq	r3, #1
 8006f9e:	2300      	movne	r3, #0
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	f43f af48 	beq.w	8006e3c <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
=======
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d6c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e6      	bne.n	8006d4c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3308      	adds	r3, #8
 8006d84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f023 0301 	bic.w	r3, r3, #1
 8006d94:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d9e:	623a      	str	r2, [r7, #32]
 8006da0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	69f9      	ldr	r1, [r7, #28]
 8006da4:	6a3a      	ldr	r2, [r7, #32]
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e5      	bne.n	8006d7e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2220      	movs	r2, #32
 8006db6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e010      	b.n	8006df6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69da      	ldr	r2, [r3, #28]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	4013      	ands	r3, r2
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	bf0c      	ite	eq
 8006de4:	2301      	moveq	r3, #1
 8006de6:	2300      	movne	r3, #0
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	f43f af48 	beq.w	8006c84 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3770      	adds	r7, #112	; 0x70
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <UART_Start_Receive_IT>:
=======
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3770      	adds	r7, #112	; 0x70
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <UART_Start_Receive_IT>:
>>>>>>> Stashed changes
=======
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3770      	adds	r7, #112	; 0x70
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <UART_Start_Receive_IT>:
>>>>>>> Stashed changes
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80055c4:	b480      	push	{r7}
 80055c6:	b097      	sub	sp, #92	; 0x5c
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	88fa      	ldrh	r2, [r7, #6]
 80055dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	88fa      	ldrh	r2, [r7, #6]
 80055e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f6:	d10e      	bne.n	8005616 <UART_Start_Receive_IT+0x52>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d105      	bne.n	800560c <UART_Start_Receive_IT+0x48>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005606:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800560a:	e02d      	b.n	8005668 <UART_Start_Receive_IT+0xa4>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	22ff      	movs	r2, #255	; 0xff
 8005610:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005614:	e028      	b.n	8005668 <UART_Start_Receive_IT+0xa4>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10d      	bne.n	800563a <UART_Start_Receive_IT+0x76>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <UART_Start_Receive_IT+0x6c>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	22ff      	movs	r2, #255	; 0xff
 800562a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800562e:	e01b      	b.n	8005668 <UART_Start_Receive_IT+0xa4>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	227f      	movs	r2, #127	; 0x7f
 8005634:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005638:	e016      	b.n	8005668 <UART_Start_Receive_IT+0xa4>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005642:	d10d      	bne.n	8005660 <UART_Start_Receive_IT+0x9c>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <UART_Start_Receive_IT+0x92>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	227f      	movs	r2, #127	; 0x7f
 8005650:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005654:	e008      	b.n	8005668 <UART_Start_Receive_IT+0xa4>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	223f      	movs	r2, #63	; 0x3f
 800565a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800565e:	e003      	b.n	8005668 <UART_Start_Receive_IT+0xa4>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2222      	movs	r2, #34	; 0x22
 8005674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3308      	adds	r3, #8
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	657b      	str	r3, [r7, #84]	; 0x54
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3308      	adds	r3, #8
 8005696:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005698:	64ba      	str	r2, [r7, #72]	; 0x48
 800569a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800569e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e5      	bne.n	8005678 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b4:	d107      	bne.n	80056c6 <UART_Start_Receive_IT+0x102>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d103      	bne.n	80056c6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4a21      	ldr	r2, [pc, #132]	; (8005748 <UART_Start_Receive_IT+0x184>)
 80056c2:	669a      	str	r2, [r3, #104]	; 0x68
 80056c4:	e002      	b.n	80056cc <UART_Start_Receive_IT+0x108>
=======
 8006fb8:	b480      	push	{r7}
 8006fba:	b097      	sub	sp, #92	; 0x5c
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	88fa      	ldrh	r2, [r7, #6]
 8006fd0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	88fa      	ldrh	r2, [r7, #6]
 8006fd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fea:	d10e      	bne.n	800700a <UART_Start_Receive_IT+0x52>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d105      	bne.n	8007000 <UART_Start_Receive_IT+0x48>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ffa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ffe:	e02d      	b.n	800705c <UART_Start_Receive_IT+0xa4>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	22ff      	movs	r2, #255	; 0xff
 8007004:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007008:	e028      	b.n	800705c <UART_Start_Receive_IT+0xa4>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10d      	bne.n	800702e <UART_Start_Receive_IT+0x76>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d104      	bne.n	8007024 <UART_Start_Receive_IT+0x6c>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	22ff      	movs	r2, #255	; 0xff
 800701e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007022:	e01b      	b.n	800705c <UART_Start_Receive_IT+0xa4>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	227f      	movs	r2, #127	; 0x7f
 8007028:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800702c:	e016      	b.n	800705c <UART_Start_Receive_IT+0xa4>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007036:	d10d      	bne.n	8007054 <UART_Start_Receive_IT+0x9c>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d104      	bne.n	800704a <UART_Start_Receive_IT+0x92>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	227f      	movs	r2, #127	; 0x7f
 8007044:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007048:	e008      	b.n	800705c <UART_Start_Receive_IT+0xa4>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	223f      	movs	r2, #63	; 0x3f
 800704e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007052:	e003      	b.n	800705c <UART_Start_Receive_IT+0xa4>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2222      	movs	r2, #34	; 0x22
 8007068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3308      	adds	r3, #8
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707e:	f043 0301 	orr.w	r3, r3, #1
 8007082:	657b      	str	r3, [r7, #84]	; 0x54
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3308      	adds	r3, #8
 800708a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800708c:	64ba      	str	r2, [r7, #72]	; 0x48
 800708e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800709a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e5      	bne.n	800706c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a8:	d107      	bne.n	80070ba <UART_Start_Receive_IT+0x102>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d103      	bne.n	80070ba <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4a21      	ldr	r2, [pc, #132]	; (800713c <UART_Start_Receive_IT+0x184>)
 80070b6:	669a      	str	r2, [r3, #104]	; 0x68
 80070b8:	e002      	b.n	80070c0 <UART_Start_Receive_IT+0x108>
>>>>>>> Stashed changes
=======
 8006e00:	b480      	push	{r7}
 8006e02:	b097      	sub	sp, #92	; 0x5c
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	88fa      	ldrh	r2, [r7, #6]
 8006e18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	88fa      	ldrh	r2, [r7, #6]
 8006e20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e32:	d10e      	bne.n	8006e52 <UART_Start_Receive_IT+0x52>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d105      	bne.n	8006e48 <UART_Start_Receive_IT+0x48>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006e42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e46:	e02d      	b.n	8006ea4 <UART_Start_Receive_IT+0xa4>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	22ff      	movs	r2, #255	; 0xff
 8006e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e50:	e028      	b.n	8006ea4 <UART_Start_Receive_IT+0xa4>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10d      	bne.n	8006e76 <UART_Start_Receive_IT+0x76>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d104      	bne.n	8006e6c <UART_Start_Receive_IT+0x6c>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	22ff      	movs	r2, #255	; 0xff
 8006e66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e6a:	e01b      	b.n	8006ea4 <UART_Start_Receive_IT+0xa4>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	227f      	movs	r2, #127	; 0x7f
 8006e70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e74:	e016      	b.n	8006ea4 <UART_Start_Receive_IT+0xa4>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e7e:	d10d      	bne.n	8006e9c <UART_Start_Receive_IT+0x9c>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d104      	bne.n	8006e92 <UART_Start_Receive_IT+0x92>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	227f      	movs	r2, #127	; 0x7f
 8006e8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e90:	e008      	b.n	8006ea4 <UART_Start_Receive_IT+0xa4>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	223f      	movs	r2, #63	; 0x3f
 8006e96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e9a:	e003      	b.n	8006ea4 <UART_Start_Receive_IT+0xa4>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2222      	movs	r2, #34	; 0x22
 8006eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	f043 0301 	orr.w	r3, r3, #1
 8006eca:	657b      	str	r3, [r7, #84]	; 0x54
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ed4:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ed6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006edc:	e841 2300 	strex	r3, r2, [r1]
 8006ee0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e5      	bne.n	8006eb4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef0:	d107      	bne.n	8006f02 <UART_Start_Receive_IT+0x102>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d103      	bne.n	8006f02 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4a21      	ldr	r2, [pc, #132]	; (8006f84 <UART_Start_Receive_IT+0x184>)
 8006efe:	669a      	str	r2, [r3, #104]	; 0x68
 8006f00:	e002      	b.n	8006f08 <UART_Start_Receive_IT+0x108>
>>>>>>> Stashed changes
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4a20      	ldr	r2, [pc, #128]	; (800574c <UART_Start_Receive_IT+0x188>)
 80056ca:	669a      	str	r2, [r3, #104]	; 0x68
=======
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4a20      	ldr	r2, [pc, #128]	; (8007140 <UART_Start_Receive_IT+0x188>)
 80070be:	669a      	str	r2, [r3, #104]	; 0x68
>>>>>>> Stashed changes
=======
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4a20      	ldr	r2, [pc, #128]	; (8006f88 <UART_Start_Receive_IT+0x188>)
 8006f06:	669a      	str	r2, [r3, #104]	; 0x68
>>>>>>> Stashed changes
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d019      	beq.n	8005708 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80056e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f2:	637b      	str	r3, [r7, #52]	; 0x34
 80056f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e6      	bne.n	80056d4 <UART_Start_Receive_IT+0x110>
 8005706:	e018      	b.n	800573a <UART_Start_Receive_IT+0x176>
=======
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d019      	beq.n	80070fc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80070dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e6:	637b      	str	r3, [r7, #52]	; 0x34
 80070e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e6      	bne.n	80070c8 <UART_Start_Receive_IT+0x110>
 80070fa:	e018      	b.n	800712e <UART_Start_Receive_IT+0x176>
>>>>>>> Stashed changes
=======
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d019      	beq.n	8006f44 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f30:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e6      	bne.n	8006f10 <UART_Start_Receive_IT+0x110>
 8006f42:	e018      	b.n	8006f76 <UART_Start_Receive_IT+0x176>
>>>>>>> Stashed changes
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	613b      	str	r3, [r7, #16]
   return(result);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f043 0320 	orr.w	r3, r3, #32
 800571c:	653b      	str	r3, [r7, #80]	; 0x50
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005726:	623b      	str	r3, [r7, #32]
 8005728:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	69f9      	ldr	r1, [r7, #28]
 800572c:	6a3a      	ldr	r2, [r7, #32]
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	61bb      	str	r3, [r7, #24]
   return(result);
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e6      	bne.n	8005708 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	375c      	adds	r7, #92	; 0x5c
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	08005b75 	.word	0x08005b75
 800574c:	08005a0f 	.word	0x08005a0f

08005750 <UART_EndRxTransfer>:
=======
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	613b      	str	r3, [r7, #16]
   return(result);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f043 0320 	orr.w	r3, r3, #32
 8007110:	653b      	str	r3, [r7, #80]	; 0x50
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800711a:	623b      	str	r3, [r7, #32]
 800711c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	69f9      	ldr	r1, [r7, #28]
 8007120:	6a3a      	ldr	r2, [r7, #32]
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	61bb      	str	r3, [r7, #24]
   return(result);
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e6      	bne.n	80070fc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	375c      	adds	r7, #92	; 0x5c
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	08007569 	.word	0x08007569
 8007140:	08007403 	.word	0x08007403

08007144 <UART_EndRxTransfer>:
>>>>>>> Stashed changes
=======
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	613b      	str	r3, [r7, #16]
   return(result);
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f043 0320 	orr.w	r3, r3, #32
 8006f58:	653b      	str	r3, [r7, #80]	; 0x50
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f62:	623b      	str	r3, [r7, #32]
 8006f64:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	69f9      	ldr	r1, [r7, #28]
 8006f68:	6a3a      	ldr	r2, [r7, #32]
 8006f6a:	e841 2300 	strex	r3, r2, [r1]
 8006f6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1e6      	bne.n	8006f44 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	375c      	adds	r7, #92	; 0x5c
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	080073b1 	.word	0x080073b1
 8006f88:	0800724b 	.word	0x0800724b

08006f8c <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005750:	b480      	push	{r7}
 8005752:	b095      	sub	sp, #84	; 0x54
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800576c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005776:	643b      	str	r3, [r7, #64]	; 0x40
 8005778:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800577c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e6      	bne.n	8005758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3308      	adds	r3, #8
 8005790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	e853 3f00 	ldrex	r3, [r3]
 8005798:	61fb      	str	r3, [r7, #28]
   return(result);
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	f023 0301 	bic.w	r3, r3, #1
 80057a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3308      	adds	r3, #8
 80057a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e5      	bne.n	800578a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d118      	bne.n	80057f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f023 0310 	bic.w	r3, r3, #16
 80057da:	647b      	str	r3, [r7, #68]	; 0x44
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e4:	61bb      	str	r3, [r7, #24]
 80057e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6979      	ldr	r1, [r7, #20]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	613b      	str	r3, [r7, #16]
   return(result);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e6      	bne.n	80057c6 <UART_EndRxTransfer+0x76>
=======
 8007144:	b480      	push	{r7}
 8007146:	b095      	sub	sp, #84	; 0x54
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007160:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800716a:	643b      	str	r3, [r7, #64]	; 0x40
 800716c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007170:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e6      	bne.n	800714c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3308      	adds	r3, #8
 8007184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	e853 3f00 	ldrex	r3, [r3]
 800718c:	61fb      	str	r3, [r7, #28]
   return(result);
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	f023 0301 	bic.w	r3, r3, #1
 8007194:	64bb      	str	r3, [r7, #72]	; 0x48
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3308      	adds	r3, #8
 800719c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800719e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e5      	bne.n	800717e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d118      	bne.n	80071ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f023 0310 	bic.w	r3, r3, #16
 80071ce:	647b      	str	r3, [r7, #68]	; 0x44
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d8:	61bb      	str	r3, [r7, #24]
 80071da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	6979      	ldr	r1, [r7, #20]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	e841 2300 	strex	r3, r2, [r1]
 80071e4:	613b      	str	r3, [r7, #16]
   return(result);
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e6      	bne.n	80071ba <UART_EndRxTransfer+0x76>
>>>>>>> Stashed changes
=======
 8006f8c:	b480      	push	{r7}
 8006f8e:	b095      	sub	sp, #84	; 0x54
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9c:	e853 3f00 	ldrex	r3, [r3]
 8006fa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1e6      	bne.n	8006f94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3308      	adds	r3, #8
 8006fcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	e853 3f00 	ldrex	r3, [r3]
 8006fd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	f023 0301 	bic.w	r3, r3, #1
 8006fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3308      	adds	r3, #8
 8006fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e5      	bne.n	8006fc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d118      	bne.n	8007034 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f023 0310 	bic.w	r3, r3, #16
 8007016:	647b      	str	r3, [r7, #68]	; 0x44
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	461a      	mov	r2, r3
 800701e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007024:	6979      	ldr	r1, [r7, #20]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	e841 2300 	strex	r3, r2, [r1]
 800702c:	613b      	str	r3, [r7, #16]
   return(result);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e6      	bne.n	8007002 <UART_EndRxTransfer+0x76>
>>>>>>> Stashed changes
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800580c:	bf00      	nop
 800580e:	3754      	adds	r7, #84	; 0x54
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <UART_DMAAbortOnError>:
=======
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007200:	bf00      	nop
 8007202:	3754      	adds	r7, #84	; 0x54
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <UART_DMAAbortOnError>:
>>>>>>> Stashed changes
=======
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2220      	movs	r2, #32
 8007038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007048:	bf00      	nop
 800704a:	3754      	adds	r7, #84	; 0x54
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <UART_DMAAbortOnError>:
>>>>>>> Stashed changes
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
=======
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
>>>>>>> Stashed changes
=======
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f7ff fa8a 	bl	8004d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <UART_TxISR_8BIT>:
=======
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f7ff fa8a 	bl	8006744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007230:	bf00      	nop
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <UART_TxISR_8BIT>:
>>>>>>> Stashed changes
=======
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7ff fa8a 	bl	800658c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007078:	bf00      	nop
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <UART_TxISR_8BIT>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005844:	b480      	push	{r7}
 8005846:	b08f      	sub	sp, #60	; 0x3c
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005850:	2b21      	cmp	r3, #33	; 0x21
 8005852:	d14c      	bne.n	80058ee <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d132      	bne.n	80058c6 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	61fb      	str	r3, [r7, #28]
   return(result);
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005874:	637b      	str	r3, [r7, #52]	; 0x34
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005880:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1e6      	bne.n	8005860 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058a6:	633b      	str	r3, [r7, #48]	; 0x30
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6979      	ldr	r1, [r7, #20]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	613b      	str	r3, [r7, #16]
   return(result);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e6      	bne.n	8005892 <UART_TxISR_8BIT+0x4e>
=======
 8007238:	b480      	push	{r7}
 800723a:	b08f      	sub	sp, #60	; 0x3c
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007244:	2b21      	cmp	r3, #33	; 0x21
 8007246:	d14c      	bne.n	80072e2 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800724e:	b29b      	uxth	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d132      	bne.n	80072ba <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	61fb      	str	r3, [r7, #28]
   return(result);
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007268:	637b      	str	r3, [r7, #52]	; 0x34
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007274:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e6      	bne.n	8007254 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	e853 3f00 	ldrex	r3, [r3]
 8007292:	60bb      	str	r3, [r7, #8]
   return(result);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800729a:	633b      	str	r3, [r7, #48]	; 0x30
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	461a      	mov	r2, r3
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	61bb      	str	r3, [r7, #24]
 80072a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a8:	6979      	ldr	r1, [r7, #20]
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	e841 2300 	strex	r3, r2, [r1]
 80072b0:	613b      	str	r3, [r7, #16]
   return(result);
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e6      	bne.n	8007286 <UART_TxISR_8BIT+0x4e>
>>>>>>> Stashed changes
=======
 8007080:	b480      	push	{r7}
 8007082:	b08f      	sub	sp, #60	; 0x3c
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800708c:	2b21      	cmp	r3, #33	; 0x21
 800708e:	d14c      	bne.n	800712a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d132      	bne.n	8007102 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070b0:	637b      	str	r3, [r7, #52]	; 0x34
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070bc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e6      	bne.n	800709c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	60bb      	str	r3, [r7, #8]
   return(result);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e2:	633b      	str	r3, [r7, #48]	; 0x30
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	461a      	mov	r2, r3
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	61bb      	str	r3, [r7, #24]
 80070ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	6979      	ldr	r1, [r7, #20]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	613b      	str	r3, [r7, #16]
   return(result);
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e6      	bne.n	80070ce <UART_TxISR_8BIT+0x4e>
>>>>>>> Stashed changes
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80058c4:	e013      	b.n	80058ee <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ca:	781a      	ldrb	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80058ee:	bf00      	nop
 80058f0:	373c      	adds	r7, #60	; 0x3c
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <UART_TxISR_16BIT>:
=======
 80072b8:	e013      	b.n	80072e2 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072be:	781a      	ldrb	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	3b01      	subs	r3, #1
 80072da:	b29a      	uxth	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80072e2:	bf00      	nop
 80072e4:	373c      	adds	r7, #60	; 0x3c
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <UART_TxISR_16BIT>:
>>>>>>> Stashed changes
=======
 8007100:	e013      	b.n	800712a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007106:	781a      	ldrb	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800712a:	bf00      	nop
 800712c:	373c      	adds	r7, #60	; 0x3c
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <UART_TxISR_16BIT>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80058fa:	b480      	push	{r7}
 80058fc:	b091      	sub	sp, #68	; 0x44
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
=======
 80072ee:	b480      	push	{r7}
 80072f0:	b091      	sub	sp, #68	; 0x44
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
=======
 8007136:	b480      	push	{r7}
 8007138:	b091      	sub	sp, #68	; 0x44
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005906:	2b21      	cmp	r3, #33	; 0x21
 8005908:	d151      	bne.n	80059ae <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d132      	bne.n	800597c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	e853 3f00 	ldrex	r3, [r3]
 8005922:	623b      	str	r3, [r7, #32]
   return(result);
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800592a:	63bb      	str	r3, [r7, #56]	; 0x38
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	633b      	str	r3, [r7, #48]	; 0x30
 8005936:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800593a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593c:	e841 2300 	strex	r3, r2, [r1]
 8005940:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e6      	bne.n	8005916 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	60fb      	str	r3, [r7, #12]
   return(result);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800595c:	637b      	str	r3, [r7, #52]	; 0x34
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005966:	61fb      	str	r3, [r7, #28]
 8005968:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	69b9      	ldr	r1, [r7, #24]
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	617b      	str	r3, [r7, #20]
   return(result);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e6      	bne.n	8005948 <UART_TxISR_16BIT+0x4e>
=======
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072fa:	2b21      	cmp	r3, #33	; 0x21
 80072fc:	d151      	bne.n	80073a2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007304:	b29b      	uxth	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d132      	bne.n	8007370 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	e853 3f00 	ldrex	r3, [r3]
 8007316:	623b      	str	r3, [r7, #32]
   return(result);
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800731e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007328:	633b      	str	r3, [r7, #48]	; 0x30
 800732a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800732e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007330:	e841 2300 	strex	r3, r2, [r1]
 8007334:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e6      	bne.n	800730a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	60fb      	str	r3, [r7, #12]
   return(result);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007350:	637b      	str	r3, [r7, #52]	; 0x34
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800735a:	61fb      	str	r3, [r7, #28]
 800735c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	69b9      	ldr	r1, [r7, #24]
 8007360:	69fa      	ldr	r2, [r7, #28]
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	617b      	str	r3, [r7, #20]
   return(result);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e6      	bne.n	800733c <UART_TxISR_16BIT+0x4e>
>>>>>>> Stashed changes
=======
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007142:	2b21      	cmp	r3, #33	; 0x21
 8007144:	d151      	bne.n	80071ea <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d132      	bne.n	80071b8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	623b      	str	r3, [r7, #32]
   return(result);
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007166:	63bb      	str	r3, [r7, #56]	; 0x38
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	633b      	str	r3, [r7, #48]	; 0x30
 8007172:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e6      	bne.n	8007152 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	60fb      	str	r3, [r7, #12]
   return(result);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007198:	637b      	str	r3, [r7, #52]	; 0x34
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a2:	61fb      	str	r3, [r7, #28]
 80071a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	69b9      	ldr	r1, [r7, #24]
 80071a8:	69fa      	ldr	r2, [r7, #28]
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	617b      	str	r3, [r7, #20]
   return(result);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e6      	bne.n	8007184 <UART_TxISR_16BIT+0x4e>
>>>>>>> Stashed changes
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800597a:	e018      	b.n	80059ae <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005980:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005990:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005996:	1c9a      	adds	r2, r3, #2
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80059ae:	bf00      	nop
 80059b0:	3744      	adds	r7, #68	; 0x44
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <UART_EndTransmit_IT>:
=======
 800736e:	e018      	b.n	80073a2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007374:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007384:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800738a:	1c9a      	adds	r2, r3, #2
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80073a2:	bf00      	nop
 80073a4:	3744      	adds	r7, #68	; 0x44
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <UART_EndTransmit_IT>:
>>>>>>> Stashed changes
=======
 80071b6:	e018      	b.n	80071ea <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80071be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071cc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d2:	1c9a      	adds	r2, r3, #2
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80071ea:	bf00      	nop
 80071ec:	3744      	adds	r7, #68	; 0x44
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <UART_EndTransmit_IT>:
>>>>>>> Stashed changes
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b088      	sub	sp, #32
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6979      	ldr	r1, [r7, #20]
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	613b      	str	r3, [r7, #16]
   return(result);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e6      	bne.n	80059c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b088      	sub	sp, #32
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ca:	61fb      	str	r3, [r7, #28]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	61bb      	str	r3, [r7, #24]
 80073d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6979      	ldr	r1, [r7, #20]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	613b      	str	r3, [r7, #16]
   return(result);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e6      	bne.n	80073b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> Stashed changes
=======
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b088      	sub	sp, #32
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	60bb      	str	r3, [r7, #8]
   return(result);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007212:	61fb      	str	r3, [r7, #28]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	61bb      	str	r3, [r7, #24]
 800721e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	6979      	ldr	r1, [r7, #20]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	613b      	str	r3, [r7, #16]
   return(result);
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e6      	bne.n	80071fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7fc f80b 	bl	8001a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a06:	bf00      	nop
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <UART_RxISR_8BIT>:
=======
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7fb f8d3 	bl	80025a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073fa:	bf00      	nop
 80073fc:	3720      	adds	r7, #32
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <UART_RxISR_8BIT>:
>>>>>>> Stashed changes
=======
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7fb f8d3 	bl	80023e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007242:	bf00      	nop
 8007244:	3720      	adds	r7, #32
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <UART_RxISR_8BIT>:
>>>>>>> Stashed changes
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b096      	sub	sp, #88	; 0x58
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
=======
 8007402:	b580      	push	{r7, lr}
 8007404:	b096      	sub	sp, #88	; 0x58
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007410:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
>>>>>>> Stashed changes
=======
 800724a:	b580      	push	{r7, lr}
 800724c:	b096      	sub	sp, #88	; 0x58
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007258:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
>>>>>>> Stashed changes
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a26:	2b22      	cmp	r3, #34	; 0x22
 8005a28:	f040 8098 	bne.w	8005b5c <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a36:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005a3a:	b2d9      	uxtb	r1, r3
 8005a3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a46:	400a      	ands	r2, r1
 8005a48:	b2d2      	uxtb	r2, r2
 8005a4a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d17b      	bne.n	8005b6c <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a88:	653b      	str	r3, [r7, #80]	; 0x50
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a92:	647b      	str	r3, [r7, #68]	; 0x44
 8005a94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e6      	bne.n	8005a74 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ac6:	633a      	str	r2, [r7, #48]	; 0x30
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e5      	bne.n	8005aa6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	665a      	str	r2, [r3, #100]	; 0x64
=======
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800741a:	2b22      	cmp	r3, #34	; 0x22
 800741c:	f040 8098 	bne.w	8007550 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800742a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800742e:	b2d9      	uxtb	r1, r3
 8007430:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007434:	b2da      	uxtb	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743a:	400a      	ands	r2, r1
 800743c:	b2d2      	uxtb	r2, r2
 800743e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007444:	1c5a      	adds	r2, r3, #1
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	b29a      	uxth	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007462:	b29b      	uxth	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d17b      	bne.n	8007560 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800747c:	653b      	str	r3, [r7, #80]	; 0x50
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007486:	647b      	str	r3, [r7, #68]	; 0x44
 8007488:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800748c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e6      	bne.n	8007468 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3308      	adds	r3, #8
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	623b      	str	r3, [r7, #32]
   return(result);
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	f023 0301 	bic.w	r3, r3, #1
 80074b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3308      	adds	r3, #8
 80074b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074ba:	633a      	str	r2, [r7, #48]	; 0x30
 80074bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c2:	e841 2300 	strex	r3, r2, [r1]
 80074c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e5      	bne.n	800749a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2220      	movs	r2, #32
 80074d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> Stashed changes
=======
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007262:	2b22      	cmp	r3, #34	; 0x22
 8007264:	f040 8098 	bne.w	8007398 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007272:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007276:	b2d9      	uxtb	r1, r3
 8007278:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800727c:	b2da      	uxtb	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007282:	400a      	ands	r2, r1
 8007284:	b2d2      	uxtb	r2, r2
 8007286:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d17b      	bne.n	80073a8 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072c4:	653b      	str	r3, [r7, #80]	; 0x50
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ce:	647b      	str	r3, [r7, #68]	; 0x44
 80072d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e6      	bne.n	80072b0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3308      	adds	r3, #8
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	623b      	str	r3, [r7, #32]
   return(result);
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	f023 0301 	bic.w	r3, r3, #1
 80072f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3308      	adds	r3, #8
 8007300:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007302:	633a      	str	r2, [r7, #48]	; 0x30
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e5      	bne.n	80072e2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2220      	movs	r2, #32
 800731a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> Stashed changes

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d12e      	bne.n	8005b54 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f023 0310 	bic.w	r3, r3, #16
 8005b10:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	69b9      	ldr	r1, [r7, #24]
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	617b      	str	r3, [r7, #20]
   return(result);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e6      	bne.n	8005afc <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d103      	bne.n	8005b44 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2210      	movs	r2, #16
 8005b42:	621a      	str	r2, [r3, #32]
=======
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d12e      	bne.n	8007548 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f023 0310 	bic.w	r3, r3, #16
 8007504:	64bb      	str	r3, [r7, #72]	; 0x48
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800750e:	61fb      	str	r3, [r7, #28]
 8007510:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	69b9      	ldr	r1, [r7, #24]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	617b      	str	r3, [r7, #20]
   return(result);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e6      	bne.n	80074f0 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	f003 0310 	and.w	r3, r3, #16
 800752c:	2b10      	cmp	r3, #16
 800752e:	d103      	bne.n	8007538 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2210      	movs	r2, #16
 8007536:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
=======
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800732e:	2b01      	cmp	r3, #1
 8007330:	d12e      	bne.n	8007390 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	60fb      	str	r3, [r7, #12]
   return(result);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f023 0310 	bic.w	r3, r3, #16
 800734c:	64bb      	str	r3, [r7, #72]	; 0x48
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007356:	61fb      	str	r3, [r7, #28]
 8007358:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	69b9      	ldr	r1, [r7, #24]
 800735c:	69fa      	ldr	r2, [r7, #28]
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	617b      	str	r3, [r7, #20]
   return(result);
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e6      	bne.n	8007338 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	f003 0310 	and.w	r3, r3, #16
 8007374:	2b10      	cmp	r3, #16
 8007376:	d103      	bne.n	8007380 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2210      	movs	r2, #16
 800737e:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff f909 	bl	8004d64 <HAL_UARTEx_RxEventCallback>
=======
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff f909 	bl	8006758 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
=======
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff f909 	bl	80065a0 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005b52:	e00b      	b.n	8005b6c <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7fb fef7 	bl	8001948 <HAL_UART_RxCpltCallback>
}
 8005b5a:	e007      	b.n	8005b6c <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699a      	ldr	r2, [r3, #24]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0208 	orr.w	r2, r2, #8
 8005b6a:	619a      	str	r2, [r3, #24]
}
 8005b6c:	bf00      	nop
 8005b6e:	3758      	adds	r7, #88	; 0x58
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <UART_RxISR_16BIT>:
=======
 8007546:	e00b      	b.n	8007560 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7fa ffbf 	bl	80024cc <HAL_UART_RxCpltCallback>
}
 800754e:	e007      	b.n	8007560 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	699a      	ldr	r2, [r3, #24]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0208 	orr.w	r2, r2, #8
 800755e:	619a      	str	r2, [r3, #24]
}
 8007560:	bf00      	nop
 8007562:	3758      	adds	r7, #88	; 0x58
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <UART_RxISR_16BIT>:
>>>>>>> Stashed changes
=======
 800738e:	e00b      	b.n	80073a8 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7fa ffbf 	bl	8002314 <HAL_UART_RxCpltCallback>
}
 8007396:	e007      	b.n	80073a8 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0208 	orr.w	r2, r2, #8
 80073a6:	619a      	str	r2, [r3, #24]
}
 80073a8:	bf00      	nop
 80073aa:	3758      	adds	r7, #88	; 0x58
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <UART_RxISR_16BIT>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b096      	sub	sp, #88	; 0x58
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b82:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
=======
 8007568:	b580      	push	{r7, lr}
 800756a:	b096      	sub	sp, #88	; 0x58
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007576:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
>>>>>>> Stashed changes
=======
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b096      	sub	sp, #88	; 0x58
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073be:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
>>>>>>> Stashed changes
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b8c:	2b22      	cmp	r3, #34	; 0x22
 8005b8e:	f040 8098 	bne.w	8005cc2 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005ba2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005ba6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005baa:	4013      	ands	r3, r2
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb6:	1c9a      	adds	r2, r3, #2
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d17b      	bne.n	8005cd2 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be2:	e853 3f00 	ldrex	r3, [r3]
 8005be6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8005bfa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c00:	e841 2300 	strex	r3, r2, [r1]
 8005c04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e6      	bne.n	8005bda <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3308      	adds	r3, #8
 8005c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f023 0301 	bic.w	r3, r3, #1
 8005c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e5      	bne.n	8005c0c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	665a      	str	r2, [r3, #100]	; 0x64
=======
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007580:	2b22      	cmp	r3, #34	; 0x22
 8007582:	f040 8098 	bne.w	80076b6 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007594:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007596:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800759a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800759e:	4013      	ands	r3, r2
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075aa:	1c9a      	adds	r2, r3, #2
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d17b      	bne.n	80076c6 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d6:	e853 3f00 	ldrex	r3, [r3]
 80075da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ec:	643b      	str	r3, [r7, #64]	; 0x40
 80075ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075f4:	e841 2300 	strex	r3, r2, [r1]
 80075f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e6      	bne.n	80075ce <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3308      	adds	r3, #8
 8007606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f023 0301 	bic.w	r3, r3, #1
 8007616:	64bb      	str	r3, [r7, #72]	; 0x48
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3308      	adds	r3, #8
 800761e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e5      	bne.n	8007600 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> Stashed changes
=======
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073c8:	2b22      	cmp	r3, #34	; 0x22
 80073ca:	f040 8098 	bne.w	80074fe <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073dc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80073de:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80073e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073e6:	4013      	ands	r3, r2
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f2:	1c9a      	adds	r2, r3, #2
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073fe:	b29b      	uxth	r3, r3
 8007400:	3b01      	subs	r3, #1
 8007402:	b29a      	uxth	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d17b      	bne.n	800750e <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741e:	e853 3f00 	ldrex	r3, [r3]
 8007422:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800742a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	461a      	mov	r2, r3
 8007432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007434:	643b      	str	r3, [r7, #64]	; 0x40
 8007436:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800743a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800743c:	e841 2300 	strex	r3, r2, [r1]
 8007440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e6      	bne.n	8007416 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3308      	adds	r3, #8
 800744e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	61fb      	str	r3, [r7, #28]
   return(result);
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	f023 0301 	bic.w	r3, r3, #1
 800745e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3308      	adds	r3, #8
 8007466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007468:	62fa      	str	r2, [r7, #44]	; 0x2c
 800746a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800746e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e5      	bne.n	8007448 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> Stashed changes

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d12e      	bne.n	8005cba <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f023 0310 	bic.w	r3, r3, #16
 8005c76:	647b      	str	r3, [r7, #68]	; 0x44
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c84:	6979      	ldr	r1, [r7, #20]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	e841 2300 	strex	r3, r2, [r1]
 8005c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e6      	bne.n	8005c62 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b10      	cmp	r3, #16
 8005ca0:	d103      	bne.n	8005caa <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2210      	movs	r2, #16
 8005ca8:	621a      	str	r2, [r3, #32]
=======
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800764c:	2b01      	cmp	r3, #1
 800764e:	d12e      	bne.n	80076ae <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	e853 3f00 	ldrex	r3, [r3]
 8007662:	60bb      	str	r3, [r7, #8]
   return(result);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f023 0310 	bic.w	r3, r3, #16
 800766a:	647b      	str	r3, [r7, #68]	; 0x44
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007674:	61bb      	str	r3, [r7, #24]
 8007676:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	6979      	ldr	r1, [r7, #20]
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	e841 2300 	strex	r3, r2, [r1]
 8007680:	613b      	str	r3, [r7, #16]
   return(result);
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e6      	bne.n	8007656 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	f003 0310 	and.w	r3, r3, #16
 8007692:	2b10      	cmp	r3, #16
 8007694:	d103      	bne.n	800769e <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2210      	movs	r2, #16
 800769c:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
=======
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007494:	2b01      	cmp	r3, #1
 8007496:	d12e      	bne.n	80074f6 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f023 0310 	bic.w	r3, r3, #16
 80074b2:	647b      	str	r3, [r7, #68]	; 0x44
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6979      	ldr	r1, [r7, #20]
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	613b      	str	r3, [r7, #16]
   return(result);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e6      	bne.n	800749e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b10      	cmp	r3, #16
 80074dc:	d103      	bne.n	80074e6 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2210      	movs	r2, #16
 80074e4:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff f856 	bl	8004d64 <HAL_UARTEx_RxEventCallback>
=======
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7ff f856 	bl	8006758 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
=======
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff f856 	bl	80065a0 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005cb8:	e00b      	b.n	8005cd2 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7fb fe44 	bl	8001948 <HAL_UART_RxCpltCallback>
}
 8005cc0:	e007      	b.n	8005cd2 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	699a      	ldr	r2, [r3, #24]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f042 0208 	orr.w	r2, r2, #8
 8005cd0:	619a      	str	r2, [r3, #24]
}
 8005cd2:	bf00      	nop
 8005cd4:	3758      	adds	r7, #88	; 0x58
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <MX_FATFS_Init>:
=======
 80076ac:	e00b      	b.n	80076c6 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7fa ff0c 	bl	80024cc <HAL_UART_RxCpltCallback>
}
 80076b4:	e007      	b.n	80076c6 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	699a      	ldr	r2, [r3, #24]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f042 0208 	orr.w	r2, r2, #8
 80076c4:	619a      	str	r2, [r3, #24]
}
 80076c6:	bf00      	nop
 80076c8:	3758      	adds	r7, #88	; 0x58
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <MX_FATFS_Init>:
>>>>>>> Stashed changes
=======
 80074f4:	e00b      	b.n	800750e <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fa ff0c 	bl	8002314 <HAL_UART_RxCpltCallback>
}
 80074fc:	e007      	b.n	800750e <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	699a      	ldr	r2, [r3, #24]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f042 0208 	orr.w	r2, r2, #8
 800750c:	619a      	str	r2, [r3, #24]
}
 800750e:	bf00      	nop
 8007510:	3758      	adds	r7, #88	; 0x58
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <MX_FATFS_Init>:
>>>>>>> Stashed changes
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005ce0:	4904      	ldr	r1, [pc, #16]	; (8005cf4 <MX_FATFS_Init+0x18>)
 8005ce2:	4805      	ldr	r0, [pc, #20]	; (8005cf8 <MX_FATFS_Init+0x1c>)
 8005ce4:	f003 f9ca 	bl	800907c <FATFS_LinkDriver>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	461a      	mov	r2, r3
 8005cec:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <MX_FATFS_Init+0x20>)
 8005cee:	701a      	strb	r2, [r3, #0]
=======
 80076d0:	b580      	push	{r7, lr}
 80076d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80076d4:	4904      	ldr	r1, [pc, #16]	; (80076e8 <MX_FATFS_Init+0x18>)
 80076d6:	4805      	ldr	r0, [pc, #20]	; (80076ec <MX_FATFS_Init+0x1c>)
 80076d8:	f000 f8ae 	bl	8007838 <FATFS_LinkDriver>
 80076dc:	4603      	mov	r3, r0
 80076de:	461a      	mov	r2, r3
 80076e0:	4b03      	ldr	r3, [pc, #12]	; (80076f0 <MX_FATFS_Init+0x20>)
 80076e2:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
=======
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800751c:	4904      	ldr	r1, [pc, #16]	; (8007530 <MX_FATFS_Init+0x18>)
 800751e:	4805      	ldr	r0, [pc, #20]	; (8007534 <MX_FATFS_Init+0x1c>)
 8007520:	f000 f8ae 	bl	8007680 <FATFS_LinkDriver>
 8007524:	4603      	mov	r3, r0
 8007526:	461a      	mov	r2, r3
 8007528:	4b03      	ldr	r3, [pc, #12]	; (8007538 <MX_FATFS_Init+0x20>)
 800752a:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005cf0:	bf00      	nop
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	20002810 	.word	0x20002810
 8005cf8:	20000010 	.word	0x20000010
 8005cfc:	2000280c 	.word	0x2000280c

08005d00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005d04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USER_initialize>:
=======
 80076e4:	bf00      	nop
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	2000088c 	.word	0x2000088c
 80076ec:	20000010 	.word	0x20000010
 80076f0:	20000888 	.word	0x20000888

080076f4 <USER_initialize>:
>>>>>>> Stashed changes
=======
 800752c:	bf00      	nop
 800752e:	bd80      	pop	{r7, pc}
 8007530:	200008cc 	.word	0x200008cc
 8007534:	20000010 	.word	0x20000010
 8007538:	200008c8 	.word	0x200008c8

0800753c <USER_initialize>:
>>>>>>> Stashed changes
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fa fe5f 	bl	80009e0 <SD_disk_initialize>
 8005d22:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USER_status>:
=======
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	4603      	mov	r3, r0
 80076fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	4618      	mov	r0, r3
 8007702:	f7f9 fc5b 	bl	8000fbc <SD_disk_initialize>
 8007706:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USER_status>:
>>>>>>> Stashed changes
=======
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8007546:	79fb      	ldrb	r3, [r7, #7]
 8007548:	4618      	mov	r0, r3
 800754a:	f7f9 fd37 	bl	8000fbc <SD_disk_initialize>
 800754e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USER_status>:
>>>>>>> Stashed changes
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4603      	mov	r3, r0
 8005d34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fa ff37 	bl	8000bac <SD_disk_status>
 8005d3e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <USER_read>:
=======
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	4603      	mov	r3, r0
 8007718:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	4618      	mov	r0, r3
 800771e:	f7f9 fd33 	bl	8001188 <SD_disk_status>
 8007722:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <USER_read>:
>>>>>>> Stashed changes
=======
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	4603      	mov	r3, r0
 8007560:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007562:	79fb      	ldrb	r3, [r7, #7]
 8007564:	4618      	mov	r0, r3
 8007566:	f7f9 fe0f 	bl	8001188 <SD_disk_status>
 800756a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USER_read>:
>>>>>>> Stashed changes
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	4603      	mov	r3, r0
 8005d56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8005d58:	7bf8      	ldrb	r0, [r7, #15]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	f7fa ff3a 	bl	8000bd8 <SD_disk_read>
 8005d64:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <USER_write>:
=======
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	60b9      	str	r1, [r7, #8]
 8007734:	607a      	str	r2, [r7, #4]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800773c:	7bf8      	ldrb	r0, [r7, #15]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	68b9      	ldr	r1, [r7, #8]
 8007744:	f7f9 fd36 	bl	80011b4 <SD_disk_read>
 8007748:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <USER_write>:
>>>>>>> Stashed changes
=======
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	4603      	mov	r3, r0
 8007582:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007584:	7bf8      	ldrb	r0, [r7, #15]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	f7f9 fe12 	bl	80011b4 <SD_disk_read>
 8007590:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <USER_write>:
>>>>>>> Stashed changes
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8005d7e:	7bf8      	ldrb	r0, [r7, #15]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	f7fa ff91 	bl	8000cac <SD_disk_write>
 8005d8a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USER_ioctl>:
=======
 8007752:	b580      	push	{r7, lr}
 8007754:	b084      	sub	sp, #16
 8007756:	af00      	add	r7, sp, #0
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
 800775e:	4603      	mov	r3, r0
 8007760:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007762:	7bf8      	ldrb	r0, [r7, #15]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	f7f9 fd8d 	bl	8001288 <SD_disk_write>
 800776e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USER_ioctl>:
>>>>>>> Stashed changes
=======
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
 80075a6:	4603      	mov	r3, r0
 80075a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80075aa:	7bf8      	ldrb	r0, [r7, #15]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	68b9      	ldr	r1, [r7, #8]
 80075b2:	f7f9 fe69 	bl	8001288 <SD_disk_write>
 80075b6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USER_ioctl>:
>>>>>>> Stashed changes
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	603a      	str	r2, [r7, #0]
 8005d9e:	71fb      	strb	r3, [r7, #7]
 8005da0:	460b      	mov	r3, r1
 8005da2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8005da4:	79b9      	ldrb	r1, [r7, #6]
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fb f802 	bl	8000db4 <SD_disk_ioctl>
 8005db0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	4a08      	ldr	r2, [pc, #32]	; (8005dec <disk_status+0x30>)
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	79fa      	ldrb	r2, [r7, #7]
 8005dd4:	4905      	ldr	r1, [pc, #20]	; (8005dec <disk_status+0x30>)
 8005dd6:	440a      	add	r2, r1
 8005dd8:	7a12      	ldrb	r2, [r2, #8]
 8005dda:	4610      	mov	r0, r2
 8005ddc:	4798      	blx	r3
 8005dde:	4603      	mov	r3, r0
 8005de0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20002a3c 	.word	0x20002a3c

08005df0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4603      	mov	r3, r0
 8005df8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	4a0d      	ldr	r2, [pc, #52]	; (8005e38 <disk_initialize+0x48>)
 8005e02:	5cd3      	ldrb	r3, [r2, r3]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d111      	bne.n	8005e2c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005e08:	79fb      	ldrb	r3, [r7, #7]
 8005e0a:	4a0b      	ldr	r2, [pc, #44]	; (8005e38 <disk_initialize+0x48>)
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	4a09      	ldr	r2, [pc, #36]	; (8005e38 <disk_initialize+0x48>)
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	79fa      	ldrb	r2, [r7, #7]
 8005e1e:	4906      	ldr	r1, [pc, #24]	; (8005e38 <disk_initialize+0x48>)
 8005e20:	440a      	add	r2, r1
 8005e22:	7a12      	ldrb	r2, [r2, #8]
 8005e24:	4610      	mov	r0, r2
 8005e26:	4798      	blx	r3
 8005e28:	4603      	mov	r3, r0
 8005e2a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20002a3c 	.word	0x20002a3c

08005e3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005e3c:	b590      	push	{r4, r7, lr}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	607a      	str	r2, [r7, #4]
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	4603      	mov	r3, r0
 8005e4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
 8005e4e:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <disk_read+0x3c>)
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	689c      	ldr	r4, [r3, #8]
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	4a07      	ldr	r2, [pc, #28]	; (8005e78 <disk_read+0x3c>)
 8005e5c:	4413      	add	r3, r2
 8005e5e:	7a18      	ldrb	r0, [r3, #8]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	47a0      	blx	r4
 8005e68:	4603      	mov	r3, r0
 8005e6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd90      	pop	{r4, r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20002a3c 	.word	0x20002a3c

08005e7c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005e7c:	b590      	push	{r4, r7, lr}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	4a0a      	ldr	r2, [pc, #40]	; (8005eb8 <disk_write+0x3c>)
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	68dc      	ldr	r4, [r3, #12]
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	4a07      	ldr	r2, [pc, #28]	; (8005eb8 <disk_write+0x3c>)
 8005e9c:	4413      	add	r3, r2
 8005e9e:	7a18      	ldrb	r0, [r3, #8]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	47a0      	blx	r4
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	75fb      	strb	r3, [r7, #23]
  return res;
 8005eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd90      	pop	{r4, r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20002a3c 	.word	0x20002a3c

08005ebc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	603a      	str	r2, [r7, #0]
 8005ec6:	71fb      	strb	r3, [r7, #7]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	4a09      	ldr	r2, [pc, #36]	; (8005ef4 <disk_ioctl+0x38>)
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	79fa      	ldrb	r2, [r7, #7]
 8005eda:	4906      	ldr	r1, [pc, #24]	; (8005ef4 <disk_ioctl+0x38>)
 8005edc:	440a      	add	r2, r1
 8005ede:	7a10      	ldrb	r0, [r2, #8]
 8005ee0:	79b9      	ldrb	r1, [r7, #6]
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	4798      	blx	r3
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	73fb      	strb	r3, [r7, #15]
  return res;
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20002a3c 	.word	0x20002a3c

08005ef8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3301      	adds	r3, #1
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005f08:	89fb      	ldrh	r3, [r7, #14]
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	b21a      	sxth	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	b21b      	sxth	r3, r3
 8005f14:	4313      	orrs	r3, r2
 8005f16:	b21b      	sxth	r3, r3
 8005f18:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005f1a:	89fb      	ldrh	r3, [r7, #14]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3303      	adds	r3, #3
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	021b      	lsls	r3, r3, #8
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	3202      	adds	r2, #2
 8005f40:	7812      	ldrb	r2, [r2, #0]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	3201      	adds	r2, #1
 8005f4e:	7812      	ldrb	r2, [r2, #0]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	7812      	ldrb	r2, [r2, #0]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005f60:	68fb      	ldr	r3, [r7, #12]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	460b      	mov	r3, r1
 8005f78:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	887a      	ldrh	r2, [r7, #2]
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	887b      	ldrh	r3, [r7, #2]
 8005f88:	0a1b      	lsrs	r3, r3, #8
 8005f8a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	607a      	str	r2, [r7, #4]
 8005f92:	887a      	ldrh	r2, [r7, #2]
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	701a      	strb	r2, [r3, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	0a1b      	lsrs	r3, r3, #8
 8005fbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	607a      	str	r2, [r7, #4]
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	701a      	strb	r2, [r3, #0]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	0a1b      	lsrs	r3, r3, #8
 8005fd0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	0a1b      	lsrs	r3, r3, #8
 8005fe2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	607a      	str	r2, [r7, #4]
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	701a      	strb	r2, [r3, #0]
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00d      	beq.n	8006032 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	1c53      	adds	r3, r2, #1
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	1c59      	adds	r1, r3, #1
 8006020:	6179      	str	r1, [r7, #20]
 8006022:	7812      	ldrb	r2, [r2, #0]
 8006024:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3b01      	subs	r3, #1
 800602a:	607b      	str	r3, [r7, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1f1      	bne.n	8006016 <mem_cpy+0x1a>
	}
}
 8006032:	bf00      	nop
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800603e:	b480      	push	{r7}
 8006040:	b087      	sub	sp, #28
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	617a      	str	r2, [r7, #20]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3b01      	subs	r3, #1
 800605e:	607b      	str	r3, [r7, #4]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1f3      	bne.n	800604e <mem_set+0x10>
}
 8006066:	bf00      	nop
 8006068:	bf00      	nop
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006074:	b480      	push	{r7}
 8006076:	b089      	sub	sp, #36	; 0x24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	61fa      	str	r2, [r7, #28]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	4619      	mov	r1, r3
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	61ba      	str	r2, [r7, #24]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	1acb      	subs	r3, r1, r3
 80060a0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3b01      	subs	r3, #1
 80060a6:	607b      	str	r3, [r7, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <mem_cmp+0x40>
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0eb      	beq.n	800608c <mem_cmp+0x18>

	return r;
 80060b4:	697b      	ldr	r3, [r7, #20]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3724      	adds	r7, #36	; 0x24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80060cc:	e002      	b.n	80060d4 <chk_chr+0x12>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3301      	adds	r3, #1
 80060d2:	607b      	str	r3, [r7, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <chk_chr+0x26>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d1f2      	bne.n	80060ce <chk_chr+0xc>
	return *str;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	781b      	ldrb	r3, [r3, #0]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006102:	2300      	movs	r3, #0
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	e029      	b.n	8006160 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800610c:	4a27      	ldr	r2, [pc, #156]	; (80061ac <chk_lock+0xb4>)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	4413      	add	r3, r2
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d01d      	beq.n	8006156 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800611a:	4a24      	ldr	r2, [pc, #144]	; (80061ac <chk_lock+0xb4>)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	4413      	add	r3, r2
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d116      	bne.n	800615a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800612c:	4a1f      	ldr	r2, [pc, #124]	; (80061ac <chk_lock+0xb4>)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	4413      	add	r3, r2
 8006134:	3304      	adds	r3, #4
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800613c:	429a      	cmp	r2, r3
 800613e:	d10c      	bne.n	800615a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006140:	4a1a      	ldr	r2, [pc, #104]	; (80061ac <chk_lock+0xb4>)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	4413      	add	r3, r2
 8006148:	3308      	adds	r3, #8
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006150:	429a      	cmp	r2, r3
 8006152:	d102      	bne.n	800615a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006154:	e007      	b.n	8006166 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006156:	2301      	movs	r3, #1
 8006158:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3301      	adds	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d9d2      	bls.n	800610c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b02      	cmp	r3, #2
 800616a:	d109      	bne.n	8006180 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d102      	bne.n	8006178 <chk_lock+0x80>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b02      	cmp	r3, #2
 8006176:	d101      	bne.n	800617c <chk_lock+0x84>
 8006178:	2300      	movs	r3, #0
 800617a:	e010      	b.n	800619e <chk_lock+0xa6>
 800617c:	2312      	movs	r3, #18
 800617e:	e00e      	b.n	800619e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d108      	bne.n	8006198 <chk_lock+0xa0>
 8006186:	4a09      	ldr	r2, [pc, #36]	; (80061ac <chk_lock+0xb4>)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	4413      	add	r3, r2
 800618e:	330c      	adds	r3, #12
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006196:	d101      	bne.n	800619c <chk_lock+0xa4>
 8006198:	2310      	movs	r3, #16
 800619a:	e000      	b.n	800619e <chk_lock+0xa6>
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	2000281c 	.word	0x2000281c

080061b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80061b6:	2300      	movs	r3, #0
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	e002      	b.n	80061c2 <enq_lock+0x12>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3301      	adds	r3, #1
 80061c0:	607b      	str	r3, [r7, #4]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d806      	bhi.n	80061d6 <enq_lock+0x26>
 80061c8:	4a09      	ldr	r2, [pc, #36]	; (80061f0 <enq_lock+0x40>)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	4413      	add	r3, r2
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f2      	bne.n	80061bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	bf14      	ite	ne
 80061dc:	2301      	movne	r3, #1
 80061de:	2300      	moveq	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	2000281c 	.word	0x2000281c

080061f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	e01f      	b.n	8006244 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006204:	4a41      	ldr	r2, [pc, #260]	; (800630c <inc_lock+0x118>)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	4413      	add	r3, r2
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d113      	bne.n	800623e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006216:	4a3d      	ldr	r2, [pc, #244]	; (800630c <inc_lock+0x118>)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	4413      	add	r3, r2
 800621e:	3304      	adds	r3, #4
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006226:	429a      	cmp	r2, r3
 8006228:	d109      	bne.n	800623e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800622a:	4a38      	ldr	r2, [pc, #224]	; (800630c <inc_lock+0x118>)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	4413      	add	r3, r2
 8006232:	3308      	adds	r3, #8
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800623a:	429a      	cmp	r2, r3
 800623c:	d006      	beq.n	800624c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3301      	adds	r3, #1
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d9dc      	bls.n	8006204 <inc_lock+0x10>
 800624a:	e000      	b.n	800624e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800624c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b02      	cmp	r3, #2
 8006252:	d132      	bne.n	80062ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e002      	b.n	8006260 <inc_lock+0x6c>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3301      	adds	r3, #1
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d806      	bhi.n	8006274 <inc_lock+0x80>
 8006266:	4a29      	ldr	r2, [pc, #164]	; (800630c <inc_lock+0x118>)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	4413      	add	r3, r2
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1f2      	bne.n	800625a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d101      	bne.n	800627e <inc_lock+0x8a>
 800627a:	2300      	movs	r3, #0
 800627c:	e040      	b.n	8006300 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	4922      	ldr	r1, [pc, #136]	; (800630c <inc_lock+0x118>)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	440b      	add	r3, r1
 800628a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	491e      	ldr	r1, [pc, #120]	; (800630c <inc_lock+0x118>)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	440b      	add	r3, r1
 8006298:	3304      	adds	r3, #4
 800629a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	695a      	ldr	r2, [r3, #20]
 80062a0:	491a      	ldr	r1, [pc, #104]	; (800630c <inc_lock+0x118>)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	440b      	add	r3, r1
 80062a8:	3308      	adds	r3, #8
 80062aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80062ac:	4a17      	ldr	r2, [pc, #92]	; (800630c <inc_lock+0x118>)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	4413      	add	r3, r2
 80062b4:	330c      	adds	r3, #12
 80062b6:	2200      	movs	r2, #0
 80062b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d009      	beq.n	80062d4 <inc_lock+0xe0>
 80062c0:	4a12      	ldr	r2, [pc, #72]	; (800630c <inc_lock+0x118>)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	011b      	lsls	r3, r3, #4
 80062c6:	4413      	add	r3, r2
 80062c8:	330c      	adds	r3, #12
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <inc_lock+0xe0>
 80062d0:	2300      	movs	r3, #0
 80062d2:	e015      	b.n	8006300 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d108      	bne.n	80062ec <inc_lock+0xf8>
 80062da:	4a0c      	ldr	r2, [pc, #48]	; (800630c <inc_lock+0x118>)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	4413      	add	r3, r2
 80062e2:	330c      	adds	r3, #12
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	3301      	adds	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	e001      	b.n	80062f0 <inc_lock+0xfc>
 80062ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062f0:	4906      	ldr	r1, [pc, #24]	; (800630c <inc_lock+0x118>)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	440b      	add	r3, r1
 80062f8:	330c      	adds	r3, #12
 80062fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3301      	adds	r3, #1
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	2000281c 	.word	0x2000281c

08006310 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3b01      	subs	r3, #1
 800631c:	607b      	str	r3, [r7, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d825      	bhi.n	8006370 <dec_lock+0x60>
		n = Files[i].ctr;
 8006324:	4a17      	ldr	r2, [pc, #92]	; (8006384 <dec_lock+0x74>)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	4413      	add	r3, r2
 800632c:	330c      	adds	r3, #12
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006332:	89fb      	ldrh	r3, [r7, #14]
 8006334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006338:	d101      	bne.n	800633e <dec_lock+0x2e>
 800633a:	2300      	movs	r3, #0
 800633c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800633e:	89fb      	ldrh	r3, [r7, #14]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <dec_lock+0x3a>
 8006344:	89fb      	ldrh	r3, [r7, #14]
 8006346:	3b01      	subs	r3, #1
 8006348:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800634a:	4a0e      	ldr	r2, [pc, #56]	; (8006384 <dec_lock+0x74>)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	4413      	add	r3, r2
 8006352:	330c      	adds	r3, #12
 8006354:	89fa      	ldrh	r2, [r7, #14]
 8006356:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006358:	89fb      	ldrh	r3, [r7, #14]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d105      	bne.n	800636a <dec_lock+0x5a>
 800635e:	4a09      	ldr	r2, [pc, #36]	; (8006384 <dec_lock+0x74>)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	4413      	add	r3, r2
 8006366:	2200      	movs	r2, #0
 8006368:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	737b      	strb	r3, [r7, #13]
 800636e:	e001      	b.n	8006374 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006370:	2302      	movs	r3, #2
 8006372:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006374:	7b7b      	ldrb	r3, [r7, #13]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	2000281c 	.word	0x2000281c

08006388 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	e010      	b.n	80063b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006396:	4a0d      	ldr	r2, [pc, #52]	; (80063cc <clear_lock+0x44>)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	4413      	add	r3, r2
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d105      	bne.n	80063b2 <clear_lock+0x2a>
 80063a6:	4a09      	ldr	r2, [pc, #36]	; (80063cc <clear_lock+0x44>)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	4413      	add	r3, r2
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3301      	adds	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d9eb      	bls.n	8006396 <clear_lock+0xe>
	}
}
 80063be:	bf00      	nop
 80063c0:	bf00      	nop
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	2000281c 	.word	0x2000281c

080063d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	78db      	ldrb	r3, [r3, #3]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d034      	beq.n	800644e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	7858      	ldrb	r0, [r3, #1]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80063f4:	2301      	movs	r3, #1
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	f7ff fd40 	bl	8005e7c <disk_write>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006402:	2301      	movs	r3, #1
 8006404:	73fb      	strb	r3, [r7, #15]
 8006406:	e022      	b.n	800644e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	1ad2      	subs	r2, r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	429a      	cmp	r2, r3
 800641c:	d217      	bcs.n	800644e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	789b      	ldrb	r3, [r3, #2]
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	e010      	b.n	8006448 <sync_window+0x78>
					wsect += fs->fsize;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4413      	add	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	7858      	ldrb	r0, [r3, #1]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800643a:	2301      	movs	r3, #1
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	f7ff fd1d 	bl	8005e7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	3b01      	subs	r3, #1
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d8eb      	bhi.n	8006426 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800644e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3718      	adds	r7, #24
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d01b      	beq.n	80064a8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7ff ffad 	bl	80063d0 <sync_window>
 8006476:	4603      	mov	r3, r0
 8006478:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d113      	bne.n	80064a8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	7858      	ldrb	r0, [r3, #1]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800648a:	2301      	movs	r3, #1
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	f7ff fcd5 	bl	8005e3c <disk_read>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006498:	f04f 33ff 	mov.w	r3, #4294967295
 800649c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800649e:	2301      	movs	r3, #1
 80064a0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff ff87 	bl	80063d0 <sync_window>
 80064c2:	4603      	mov	r3, r0
 80064c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d159      	bne.n	8006580 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d149      	bne.n	8006568 <sync_fs+0xb4>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	791b      	ldrb	r3, [r3, #4]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d145      	bne.n	8006568 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	899b      	ldrh	r3, [r3, #12]
 80064e6:	461a      	mov	r2, r3
 80064e8:	2100      	movs	r1, #0
 80064ea:	f7ff fda8 	bl	800603e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3338      	adds	r3, #56	; 0x38
 80064f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80064f6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff fd37 	bl	8005f6e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3338      	adds	r3, #56	; 0x38
 8006504:	4921      	ldr	r1, [pc, #132]	; (800658c <sync_fs+0xd8>)
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff fd4c 	bl	8005fa4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3338      	adds	r3, #56	; 0x38
 8006510:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006514:	491e      	ldr	r1, [pc, #120]	; (8006590 <sync_fs+0xdc>)
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff fd44 	bl	8005fa4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3338      	adds	r3, #56	; 0x38
 8006520:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	4619      	mov	r1, r3
 800652a:	4610      	mov	r0, r2
 800652c:	f7ff fd3a 	bl	8005fa4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3338      	adds	r3, #56	; 0x38
 8006534:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f7ff fd30 	bl	8005fa4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	7858      	ldrb	r0, [r3, #1]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800655c:	2301      	movs	r3, #1
 800655e:	f7ff fc8d 	bl	8005e7c <disk_write>
			fs->fsi_flag = 0;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	2200      	movs	r2, #0
 800656e:	2100      	movs	r1, #0
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff fca3 	bl	8005ebc <disk_ioctl>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <sync_fs+0xcc>
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	41615252 	.word	0x41615252
 8006590:	61417272 	.word	0x61417272

08006594 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	3b02      	subs	r3, #2
 80065a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	3b02      	subs	r3, #2
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d301      	bcc.n	80065b4 <clust2sect+0x20>
 80065b0:	2300      	movs	r3, #0
 80065b2:	e008      	b.n	80065c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	895b      	ldrh	r3, [r3, #10]
 80065b8:	461a      	mov	r2, r3
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	fb03 f202 	mul.w	r2, r3, r2
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	4413      	add	r3, r2
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b086      	sub	sp, #24
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d904      	bls.n	80065f2 <get_fat+0x20>
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d302      	bcc.n	80065f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80065f2:	2301      	movs	r3, #1
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	e0bb      	b.n	8006770 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80065f8:	f04f 33ff 	mov.w	r3, #4294967295
 80065fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b03      	cmp	r3, #3
 8006604:	f000 8083 	beq.w	800670e <get_fat+0x13c>
 8006608:	2b03      	cmp	r3, #3
 800660a:	f300 80a7 	bgt.w	800675c <get_fat+0x18a>
 800660e:	2b01      	cmp	r3, #1
 8006610:	d002      	beq.n	8006618 <get_fat+0x46>
 8006612:	2b02      	cmp	r3, #2
 8006614:	d056      	beq.n	80066c4 <get_fat+0xf2>
 8006616:	e0a1      	b.n	800675c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	085b      	lsrs	r3, r3, #1
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	899b      	ldrh	r3, [r3, #12]
 800662e:	4619      	mov	r1, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	fbb3 f3f1 	udiv	r3, r3, r1
 8006636:	4413      	add	r3, r2
 8006638:	4619      	mov	r1, r3
 800663a:	6938      	ldr	r0, [r7, #16]
 800663c:	f7ff ff0c 	bl	8006458 <move_window>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	f040 808d 	bne.w	8006762 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	60fa      	str	r2, [r7, #12]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	8992      	ldrh	r2, [r2, #12]
 8006652:	fbb3 f1f2 	udiv	r1, r3, r2
 8006656:	fb01 f202 	mul.w	r2, r1, r2
 800665a:	1a9b      	subs	r3, r3, r2
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4413      	add	r3, r2
 8006660:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006664:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	899b      	ldrh	r3, [r3, #12]
 800666e:	4619      	mov	r1, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	fbb3 f3f1 	udiv	r3, r3, r1
 8006676:	4413      	add	r3, r2
 8006678:	4619      	mov	r1, r3
 800667a:	6938      	ldr	r0, [r7, #16]
 800667c:	f7ff feec 	bl	8006458 <move_window>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d16f      	bne.n	8006766 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	899b      	ldrh	r3, [r3, #12]
 800668a:	461a      	mov	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006692:	fb01 f202 	mul.w	r2, r1, r2
 8006696:	1a9b      	subs	r3, r3, r2
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4413      	add	r3, r2
 800669c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066a0:	021b      	lsls	r3, r3, #8
 80066a2:	461a      	mov	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <get_fat+0xe8>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	091b      	lsrs	r3, r3, #4
 80066b8:	e002      	b.n	80066c0 <get_fat+0xee>
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066c0:	617b      	str	r3, [r7, #20]
			break;
 80066c2:	e055      	b.n	8006770 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	899b      	ldrh	r3, [r3, #12]
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	4619      	mov	r1, r3
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80066d8:	4413      	add	r3, r2
 80066da:	4619      	mov	r1, r3
 80066dc:	6938      	ldr	r0, [r7, #16]
 80066de:	f7ff febb 	bl	8006458 <move_window>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d140      	bne.n	800676a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	8992      	ldrh	r2, [r2, #12]
 80066f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80066fa:	fb00 f202 	mul.w	r2, r0, r2
 80066fe:	1a9b      	subs	r3, r3, r2
 8006700:	440b      	add	r3, r1
 8006702:	4618      	mov	r0, r3
 8006704:	f7ff fbf8 	bl	8005ef8 <ld_word>
 8006708:	4603      	mov	r3, r0
 800670a:	617b      	str	r3, [r7, #20]
			break;
 800670c:	e030      	b.n	8006770 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	899b      	ldrh	r3, [r3, #12]
 8006716:	089b      	lsrs	r3, r3, #2
 8006718:	b29b      	uxth	r3, r3
 800671a:	4619      	mov	r1, r3
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006722:	4413      	add	r3, r2
 8006724:	4619      	mov	r1, r3
 8006726:	6938      	ldr	r0, [r7, #16]
 8006728:	f7ff fe96 	bl	8006458 <move_window>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d11d      	bne.n	800676e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	8992      	ldrh	r2, [r2, #12]
 8006740:	fbb3 f0f2 	udiv	r0, r3, r2
 8006744:	fb00 f202 	mul.w	r2, r0, r2
 8006748:	1a9b      	subs	r3, r3, r2
 800674a:	440b      	add	r3, r1
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff fbeb 	bl	8005f28 <ld_dword>
 8006752:	4603      	mov	r3, r0
 8006754:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006758:	617b      	str	r3, [r7, #20]
			break;
 800675a:	e009      	b.n	8006770 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800675c:	2301      	movs	r3, #1
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	e006      	b.n	8006770 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006762:	bf00      	nop
 8006764:	e004      	b.n	8006770 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006766:	bf00      	nop
 8006768:	e002      	b.n	8006770 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800676a:	bf00      	nop
 800676c:	e000      	b.n	8006770 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800676e:	bf00      	nop
		}
	}

	return val;
 8006770:	697b      	ldr	r3, [r7, #20]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800677a:	b590      	push	{r4, r7, lr}
 800677c:	b089      	sub	sp, #36	; 0x24
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006786:	2302      	movs	r3, #2
 8006788:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b01      	cmp	r3, #1
 800678e:	f240 8102 	bls.w	8006996 <put_fat+0x21c>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	429a      	cmp	r2, r3
 800679a:	f080 80fc 	bcs.w	8006996 <put_fat+0x21c>
		switch (fs->fs_type) {
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	f000 80b6 	beq.w	8006914 <put_fat+0x19a>
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	f300 80fd 	bgt.w	80069a8 <put_fat+0x22e>
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d003      	beq.n	80067ba <put_fat+0x40>
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	f000 8083 	beq.w	80068be <put_fat+0x144>
 80067b8:	e0f6      	b.n	80069a8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	085b      	lsrs	r3, r3, #1
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	4413      	add	r3, r2
 80067c6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	899b      	ldrh	r3, [r3, #12]
 80067d0:	4619      	mov	r1, r3
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80067d8:	4413      	add	r3, r2
 80067da:	4619      	mov	r1, r3
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7ff fe3b 	bl	8006458 <move_window>
 80067e2:	4603      	mov	r3, r0
 80067e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067e6:	7ffb      	ldrb	r3, [r7, #31]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f040 80d6 	bne.w	800699a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	61ba      	str	r2, [r7, #24]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	8992      	ldrh	r2, [r2, #12]
 80067fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8006802:	fb00 f202 	mul.w	r2, r0, r2
 8006806:	1a9b      	subs	r3, r3, r2
 8006808:	440b      	add	r3, r1
 800680a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00d      	beq.n	8006832 <put_fat+0xb8>
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	b25b      	sxtb	r3, r3
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	b25a      	sxtb	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	b25b      	sxtb	r3, r3
 800682a:	4313      	orrs	r3, r2
 800682c:	b25b      	sxtb	r3, r3
 800682e:	b2db      	uxtb	r3, r3
 8006830:	e001      	b.n	8006836 <put_fat+0xbc>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	b2db      	uxtb	r3, r3
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	899b      	ldrh	r3, [r3, #12]
 8006848:	4619      	mov	r1, r3
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006850:	4413      	add	r3, r2
 8006852:	4619      	mov	r1, r3
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7ff fdff 	bl	8006458 <move_window>
 800685a:	4603      	mov	r3, r0
 800685c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800685e:	7ffb      	ldrb	r3, [r7, #31]
 8006860:	2b00      	cmp	r3, #0
 8006862:	f040 809c 	bne.w	800699e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	899b      	ldrh	r3, [r3, #12]
 8006870:	461a      	mov	r2, r3
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	fbb3 f0f2 	udiv	r0, r3, r2
 8006878:	fb00 f202 	mul.w	r2, r0, r2
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	440b      	add	r3, r1
 8006880:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <put_fat+0x11a>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	091b      	lsrs	r3, r3, #4
 8006890:	b2db      	uxtb	r3, r3
 8006892:	e00e      	b.n	80068b2 <put_fat+0x138>
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	b25b      	sxtb	r3, r3
 800689a:	f023 030f 	bic.w	r3, r3, #15
 800689e:	b25a      	sxtb	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	0a1b      	lsrs	r3, r3, #8
 80068a4:	b25b      	sxtb	r3, r3
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	b25b      	sxtb	r3, r3
 80068ac:	4313      	orrs	r3, r2
 80068ae:	b25b      	sxtb	r3, r3
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2201      	movs	r2, #1
 80068ba:	70da      	strb	r2, [r3, #3]
			break;
 80068bc:	e074      	b.n	80069a8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	899b      	ldrh	r3, [r3, #12]
 80068c6:	085b      	lsrs	r3, r3, #1
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	4619      	mov	r1, r3
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80068d2:	4413      	add	r3, r2
 80068d4:	4619      	mov	r1, r3
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7ff fdbe 	bl	8006458 <move_window>
 80068dc:	4603      	mov	r3, r0
 80068de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068e0:	7ffb      	ldrb	r3, [r7, #31]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d15d      	bne.n	80069a2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	8992      	ldrh	r2, [r2, #12]
 80068f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80068f8:	fb00 f202 	mul.w	r2, r0, r2
 80068fc:	1a9b      	subs	r3, r3, r2
 80068fe:	440b      	add	r3, r1
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	b292      	uxth	r2, r2
 8006904:	4611      	mov	r1, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff fb31 	bl	8005f6e <st_word>
			fs->wflag = 1;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2201      	movs	r2, #1
 8006910:	70da      	strb	r2, [r3, #3]
			break;
 8006912:	e049      	b.n	80069a8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	899b      	ldrh	r3, [r3, #12]
 800691c:	089b      	lsrs	r3, r3, #2
 800691e:	b29b      	uxth	r3, r3
 8006920:	4619      	mov	r1, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	fbb3 f3f1 	udiv	r3, r3, r1
 8006928:	4413      	add	r3, r2
 800692a:	4619      	mov	r1, r3
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f7ff fd93 	bl	8006458 <move_window>
 8006932:	4603      	mov	r3, r0
 8006934:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006936:	7ffb      	ldrb	r3, [r7, #31]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d134      	bne.n	80069a6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	8992      	ldrh	r2, [r2, #12]
 8006950:	fbb3 f0f2 	udiv	r0, r3, r2
 8006954:	fb00 f202 	mul.w	r2, r0, r2
 8006958:	1a9b      	subs	r3, r3, r2
 800695a:	440b      	add	r3, r1
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff fae3 	bl	8005f28 <ld_dword>
 8006962:	4603      	mov	r3, r0
 8006964:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006968:	4323      	orrs	r3, r4
 800696a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	8992      	ldrh	r2, [r2, #12]
 800697a:	fbb3 f0f2 	udiv	r0, r3, r2
 800697e:	fb00 f202 	mul.w	r2, r0, r2
 8006982:	1a9b      	subs	r3, r3, r2
 8006984:	440b      	add	r3, r1
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fb0b 	bl	8005fa4 <st_dword>
			fs->wflag = 1;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	70da      	strb	r2, [r3, #3]
			break;
 8006994:	e008      	b.n	80069a8 <put_fat+0x22e>
		}
	}
 8006996:	bf00      	nop
 8006998:	e006      	b.n	80069a8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800699a:	bf00      	nop
 800699c:	e004      	b.n	80069a8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800699e:	bf00      	nop
 80069a0:	e002      	b.n	80069a8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80069a2:	bf00      	nop
 80069a4:	e000      	b.n	80069a8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80069a6:	bf00      	nop
	return res;
 80069a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3724      	adds	r7, #36	; 0x24
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd90      	pop	{r4, r7, pc}

080069b2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b088      	sub	sp, #32
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d904      	bls.n	80069d8 <remove_chain+0x26>
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d301      	bcc.n	80069dc <remove_chain+0x2a>
 80069d8:	2302      	movs	r3, #2
 80069da:	e04b      	b.n	8006a74 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00c      	beq.n	80069fc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80069e2:	f04f 32ff 	mov.w	r2, #4294967295
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	69b8      	ldr	r0, [r7, #24]
 80069ea:	f7ff fec6 	bl	800677a <put_fat>
 80069ee:	4603      	mov	r3, r0
 80069f0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80069f2:	7ffb      	ldrb	r3, [r7, #31]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <remove_chain+0x4a>
 80069f8:	7ffb      	ldrb	r3, [r7, #31]
 80069fa:	e03b      	b.n	8006a74 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f7ff fde7 	bl	80065d2 <get_fat>
 8006a04:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d031      	beq.n	8006a70 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <remove_chain+0x64>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e02e      	b.n	8006a74 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1c:	d101      	bne.n	8006a22 <remove_chain+0x70>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e028      	b.n	8006a74 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006a22:	2200      	movs	r2, #0
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	69b8      	ldr	r0, [r7, #24]
 8006a28:	f7ff fea7 	bl	800677a <put_fat>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006a30:	7ffb      	ldrb	r3, [r7, #31]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <remove_chain+0x88>
 8006a36:	7ffb      	ldrb	r3, [r7, #31]
 8006a38:	e01c      	b.n	8006a74 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	3b02      	subs	r3, #2
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d20b      	bcs.n	8006a60 <remove_chain+0xae>
			fs->free_clst++;
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	791b      	ldrb	r3, [r3, #4]
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d3c6      	bcc.n	80069fc <remove_chain+0x4a>
 8006a6e:	e000      	b.n	8006a72 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006a70:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3720      	adds	r7, #32
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b088      	sub	sp, #32
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10d      	bne.n	8006aae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d004      	beq.n	8006aa8 <create_chain+0x2c>
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d31b      	bcc.n	8006ae0 <create_chain+0x64>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	61bb      	str	r3, [r7, #24]
 8006aac:	e018      	b.n	8006ae0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff fd8e 	bl	80065d2 <get_fat>
 8006ab6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d801      	bhi.n	8006ac2 <create_chain+0x46>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e070      	b.n	8006ba4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac8:	d101      	bne.n	8006ace <create_chain+0x52>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	e06a      	b.n	8006ba4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d201      	bcs.n	8006adc <create_chain+0x60>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	e063      	b.n	8006ba4 <create_chain+0x128>
		scl = clst;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d307      	bcc.n	8006b04 <create_chain+0x88>
				ncl = 2;
 8006af4:	2302      	movs	r3, #2
 8006af6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006af8:	69fa      	ldr	r2, [r7, #28]
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d901      	bls.n	8006b04 <create_chain+0x88>
 8006b00:	2300      	movs	r3, #0
 8006b02:	e04f      	b.n	8006ba4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006b04:	69f9      	ldr	r1, [r7, #28]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff fd63 	bl	80065d2 <get_fat>
 8006b0c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00e      	beq.n	8006b32 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d003      	beq.n	8006b22 <create_chain+0xa6>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b20:	d101      	bne.n	8006b26 <create_chain+0xaa>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	e03e      	b.n	8006ba4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d1da      	bne.n	8006ae4 <create_chain+0x68>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	e038      	b.n	8006ba4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006b32:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006b34:	f04f 32ff 	mov.w	r2, #4294967295
 8006b38:	69f9      	ldr	r1, [r7, #28]
 8006b3a:	6938      	ldr	r0, [r7, #16]
 8006b3c:	f7ff fe1d 	bl	800677a <put_fat>
 8006b40:	4603      	mov	r3, r0
 8006b42:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d109      	bne.n	8006b5e <create_chain+0xe2>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d006      	beq.n	8006b5e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006b50:	69fa      	ldr	r2, [r7, #28]
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6938      	ldr	r0, [r7, #16]
 8006b56:	f7ff fe10 	bl	800677a <put_fat>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d116      	bne.n	8006b92 <create_chain+0x116>
		fs->last_clst = ncl;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	69fa      	ldr	r2, [r7, #28]
 8006b68:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	3b02      	subs	r3, #2
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d804      	bhi.n	8006b82 <create_chain+0x106>
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	1e5a      	subs	r2, r3, #1
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	791b      	ldrb	r3, [r3, #4]
 8006b86:	f043 0301 	orr.w	r3, r3, #1
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	711a      	strb	r2, [r3, #4]
 8006b90:	e007      	b.n	8006ba2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d102      	bne.n	8006b9e <create_chain+0x122>
 8006b98:	f04f 33ff 	mov.w	r3, #4294967295
 8006b9c:	e000      	b.n	8006ba0 <create_chain+0x124>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006ba2:	69fb      	ldr	r3, [r7, #28]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3720      	adds	r7, #32
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	899b      	ldrh	r3, [r3, #12]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	8952      	ldrh	r2, [r2, #10]
 8006bd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bd8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1d1a      	adds	r2, r3, #4
 8006bde:	613a      	str	r2, [r7, #16]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <clmt_clust+0x42>
 8006bea:	2300      	movs	r3, #0
 8006bec:	e010      	b.n	8006c10 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d307      	bcc.n	8006c06 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	3304      	adds	r3, #4
 8006c02:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006c04:	e7e9      	b.n	8006bda <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006c06:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	4413      	add	r3, r2
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c32:	d204      	bcs.n	8006c3e <dir_sdi+0x22>
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	f003 031f 	and.w	r3, r3, #31
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e071      	b.n	8006d26 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d106      	bne.n	8006c62 <dir_sdi+0x46>
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d902      	bls.n	8006c62 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10c      	bne.n	8006c82 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	095b      	lsrs	r3, r3, #5
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	8912      	ldrh	r2, [r2, #8]
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d301      	bcc.n	8006c78 <dir_sdi+0x5c>
 8006c74:	2302      	movs	r3, #2
 8006c76:	e056      	b.n	8006d26 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	61da      	str	r2, [r3, #28]
 8006c80:	e02d      	b.n	8006cde <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	895b      	ldrh	r3, [r3, #10]
 8006c86:	461a      	mov	r2, r3
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	899b      	ldrh	r3, [r3, #12]
 8006c8c:	fb02 f303 	mul.w	r3, r2, r3
 8006c90:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006c92:	e019      	b.n	8006cc8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6979      	ldr	r1, [r7, #20]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff fc9a 	bl	80065d2 <get_fat>
 8006c9e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca6:	d101      	bne.n	8006cac <dir_sdi+0x90>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e03c      	b.n	8006d26 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d904      	bls.n	8006cbc <dir_sdi+0xa0>
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d301      	bcc.n	8006cc0 <dir_sdi+0xa4>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	e032      	b.n	8006d26 <dir_sdi+0x10a>
			ofs -= csz;
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d2e1      	bcs.n	8006c94 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006cd0:	6979      	ldr	r1, [r7, #20]
 8006cd2:	6938      	ldr	r0, [r7, #16]
 8006cd4:	f7ff fc5e 	bl	8006594 <clust2sect>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <dir_sdi+0xd4>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e01a      	b.n	8006d26 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	69da      	ldr	r2, [r3, #28]
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	899b      	ldrh	r3, [r3, #12]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d00:	441a      	add	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	899b      	ldrh	r3, [r3, #12]
 8006d10:	461a      	mov	r2, r3
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d18:	fb00 f202 	mul.w	r2, r0, r2
 8006d1c:	1a9b      	subs	r3, r3, r2
 8006d1e:	18ca      	adds	r2, r1, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b086      	sub	sp, #24
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	3320      	adds	r3, #32
 8006d44:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <dir_next+0x28>
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d54:	d301      	bcc.n	8006d5a <dir_next+0x2c>
 8006d56:	2304      	movs	r3, #4
 8006d58:	e0bb      	b.n	8006ed2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	899b      	ldrh	r3, [r3, #12]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d66:	fb01 f202 	mul.w	r2, r1, r2
 8006d6a:	1a9b      	subs	r3, r3, r2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f040 809d 	bne.w	8006eac <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10b      	bne.n	8006d9c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	8912      	ldrh	r2, [r2, #8]
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	f0c0 808d 	bcc.w	8006eac <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	61da      	str	r2, [r3, #28]
 8006d98:	2304      	movs	r3, #4
 8006d9a:	e09a      	b.n	8006ed2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	899b      	ldrh	r3, [r3, #12]
 8006da0:	461a      	mov	r2, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	8952      	ldrh	r2, [r2, #10]
 8006dac:	3a01      	subs	r2, #1
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d17b      	bne.n	8006eac <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	f7ff fc08 	bl	80065d2 <get_fat>
 8006dc2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d801      	bhi.n	8006dce <dir_next+0xa0>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e081      	b.n	8006ed2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd4:	d101      	bne.n	8006dda <dir_next+0xac>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e07b      	b.n	8006ed2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d359      	bcc.n	8006e98 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d104      	bne.n	8006df4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	61da      	str	r2, [r3, #28]
 8006df0:	2304      	movs	r3, #4
 8006df2:	e06e      	b.n	8006ed2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	f7ff fe3d 	bl	8006a7c <create_chain>
 8006e02:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <dir_next+0xe0>
 8006e0a:	2307      	movs	r3, #7
 8006e0c:	e061      	b.n	8006ed2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <dir_next+0xea>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e05c      	b.n	8006ed2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1e:	d101      	bne.n	8006e24 <dir_next+0xf6>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e056      	b.n	8006ed2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f7ff fad3 	bl	80063d0 <sync_window>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <dir_next+0x106>
 8006e30:	2301      	movs	r3, #1
 8006e32:	e04e      	b.n	8006ed2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	899b      	ldrh	r3, [r3, #12]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	2100      	movs	r1, #0
 8006e42:	f7ff f8fc 	bl	800603e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e46:	2300      	movs	r3, #0
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	6979      	ldr	r1, [r7, #20]
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f7ff fba1 	bl	8006594 <clust2sect>
 8006e52:	4602      	mov	r2, r0
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	635a      	str	r2, [r3, #52]	; 0x34
 8006e58:	e012      	b.n	8006e80 <dir_next+0x152>
						fs->wflag = 1;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f7ff fab5 	bl	80063d0 <sync_window>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <dir_next+0x142>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e030      	b.n	8006ed2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	3301      	adds	r3, #1
 8006e74:	613b      	str	r3, [r7, #16]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7a:	1c5a      	adds	r2, r3, #1
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	635a      	str	r2, [r3, #52]	; 0x34
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	895b      	ldrh	r3, [r3, #10]
 8006e84:	461a      	mov	r2, r3
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d3e6      	bcc.n	8006e5a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	1ad2      	subs	r2, r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006e9e:	6979      	ldr	r1, [r7, #20]
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f7ff fb77 	bl	8006594 <clust2sect>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	899b      	ldrh	r3, [r3, #12]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ec4:	fb00 f202 	mul.w	r2, r0, r2
 8006ec8:	1a9b      	subs	r3, r3, r2
 8006eca:	18ca      	adds	r2, r1, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b086      	sub	sp, #24
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006eea:	2100      	movs	r1, #0
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff fe95 	bl	8006c1c <dir_sdi>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d12b      	bne.n	8006f54 <dir_alloc+0x7a>
		n = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	4619      	mov	r1, r3
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f7ff faa6 	bl	8006458 <move_window>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d11d      	bne.n	8006f52 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2be5      	cmp	r3, #229	; 0xe5
 8006f1e:	d004      	beq.n	8006f2a <dir_alloc+0x50>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d107      	bne.n	8006f3a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d102      	bne.n	8006f3e <dir_alloc+0x64>
 8006f38:	e00c      	b.n	8006f54 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006f3e:	2101      	movs	r1, #1
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7ff fef4 	bl	8006d2e <dir_next>
 8006f46:	4603      	mov	r3, r0
 8006f48:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0d7      	beq.n	8006f00 <dir_alloc+0x26>
 8006f50:	e000      	b.n	8006f54 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006f52:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
 8006f56:	2b04      	cmp	r3, #4
 8006f58:	d101      	bne.n	8006f5e <dir_alloc+0x84>
 8006f5a:	2307      	movs	r3, #7
 8006f5c:	75fb      	strb	r3, [r7, #23]
	return res;
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3718      	adds	r7, #24
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	331a      	adds	r3, #26
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fe ffbe 	bl	8005ef8 <ld_word>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d109      	bne.n	8006f9c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	3314      	adds	r3, #20
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe ffb3 	bl	8005ef8 <ld_word>
 8006f92:	4603      	mov	r3, r0
 8006f94:	041b      	lsls	r3, r3, #16
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	331a      	adds	r3, #26
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	b292      	uxth	r2, r2
 8006fba:	4611      	mov	r1, r2
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe ffd6 	bl	8005f6e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d109      	bne.n	8006fde <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f103 0214 	add.w	r2, r3, #20
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	0c1b      	lsrs	r3, r3, #16
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f7fe ffc8 	bl	8005f6e <st_word>
	}
}
 8006fde:	bf00      	nop
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006fe8:	b590      	push	{r4, r7, lr}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	331a      	adds	r3, #26
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe ff7e 	bl	8005ef8 <ld_word>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <cmp_lfn+0x1e>
 8007002:	2300      	movs	r3, #0
 8007004:	e059      	b.n	80070ba <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800700e:	1e5a      	subs	r2, r3, #1
 8007010:	4613      	mov	r3, r2
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	4413      	add	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800701c:	2301      	movs	r3, #1
 800701e:	81fb      	strh	r3, [r7, #14]
 8007020:	2300      	movs	r3, #0
 8007022:	613b      	str	r3, [r7, #16]
 8007024:	e033      	b.n	800708e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007026:	4a27      	ldr	r2, [pc, #156]	; (80070c4 <cmp_lfn+0xdc>)
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	4413      	add	r3, r2
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	4413      	add	r3, r2
 8007034:	4618      	mov	r0, r3
 8007036:	f7fe ff5f 	bl	8005ef8 <ld_word>
 800703a:	4603      	mov	r3, r0
 800703c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800703e:	89fb      	ldrh	r3, [r7, #14]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01a      	beq.n	800707a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	2bfe      	cmp	r3, #254	; 0xfe
 8007048:	d812      	bhi.n	8007070 <cmp_lfn+0x88>
 800704a:	89bb      	ldrh	r3, [r7, #12]
 800704c:	4618      	mov	r0, r3
 800704e:	f002 f861 	bl	8009114 <ff_wtoupper>
 8007052:	4603      	mov	r3, r0
 8007054:	461c      	mov	r4, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	617a      	str	r2, [r7, #20]
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	4413      	add	r3, r2
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	4618      	mov	r0, r3
 8007066:	f002 f855 	bl	8009114 <ff_wtoupper>
 800706a:	4603      	mov	r3, r0
 800706c:	429c      	cmp	r4, r3
 800706e:	d001      	beq.n	8007074 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007070:	2300      	movs	r3, #0
 8007072:	e022      	b.n	80070ba <cmp_lfn+0xd2>
			}
			wc = uc;
 8007074:	89bb      	ldrh	r3, [r7, #12]
 8007076:	81fb      	strh	r3, [r7, #14]
 8007078:	e006      	b.n	8007088 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800707a:	89bb      	ldrh	r3, [r7, #12]
 800707c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007080:	4293      	cmp	r3, r2
 8007082:	d001      	beq.n	8007088 <cmp_lfn+0xa0>
 8007084:	2300      	movs	r3, #0
 8007086:	e018      	b.n	80070ba <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	3301      	adds	r3, #1
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b0c      	cmp	r3, #12
 8007092:	d9c8      	bls.n	8007026 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <cmp_lfn+0xd0>
 80070a0:	89fb      	ldrh	r3, [r7, #14]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d008      	beq.n	80070b8 <cmp_lfn+0xd0>
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	4413      	add	r3, r2
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <cmp_lfn+0xd0>
 80070b4:	2300      	movs	r3, #0
 80070b6:	e000      	b.n	80070ba <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80070b8:	2301      	movs	r3, #1
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd90      	pop	{r4, r7, pc}
 80070c2:	bf00      	nop
 80070c4:	0800944c 	.word	0x0800944c

080070c8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	4611      	mov	r1, r2
 80070d4:	461a      	mov	r2, r3
 80070d6:	460b      	mov	r3, r1
 80070d8:	71fb      	strb	r3, [r7, #7]
 80070da:	4613      	mov	r3, r2
 80070dc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	330d      	adds	r3, #13
 80070e2:	79ba      	ldrb	r2, [r7, #6]
 80070e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	330b      	adds	r3, #11
 80070ea:	220f      	movs	r2, #15
 80070ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	330c      	adds	r3, #12
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	331a      	adds	r3, #26
 80070fa:	2100      	movs	r1, #0
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe ff36 	bl	8005f6e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	1e5a      	subs	r2, r3, #1
 8007106:	4613      	mov	r3, r2
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007112:	2300      	movs	r3, #0
 8007114:	82fb      	strh	r3, [r7, #22]
 8007116:	2300      	movs	r3, #0
 8007118:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800711a:	8afb      	ldrh	r3, [r7, #22]
 800711c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007120:	4293      	cmp	r3, r2
 8007122:	d007      	beq.n	8007134 <put_lfn+0x6c>
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	1c5a      	adds	r2, r3, #1
 8007128:	61fa      	str	r2, [r7, #28]
 800712a:	005b      	lsls	r3, r3, #1
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007134:	4a17      	ldr	r2, [pc, #92]	; (8007194 <put_lfn+0xcc>)
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	4413      	add	r3, r2
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4413      	add	r3, r2
 8007142:	8afa      	ldrh	r2, [r7, #22]
 8007144:	4611      	mov	r1, r2
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe ff11 	bl	8005f6e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800714c:	8afb      	ldrh	r3, [r7, #22]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d102      	bne.n	8007158 <put_lfn+0x90>
 8007152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007156:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	3301      	adds	r3, #1
 800715c:	61bb      	str	r3, [r7, #24]
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b0c      	cmp	r3, #12
 8007162:	d9da      	bls.n	800711a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007164:	8afb      	ldrh	r3, [r7, #22]
 8007166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800716a:	4293      	cmp	r3, r2
 800716c:	d006      	beq.n	800717c <put_lfn+0xb4>
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	4413      	add	r3, r2
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d103      	bne.n	8007184 <put_lfn+0xbc>
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007182:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	79fa      	ldrb	r2, [r7, #7]
 8007188:	701a      	strb	r2, [r3, #0]
}
 800718a:	bf00      	nop
 800718c:	3720      	adds	r7, #32
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	0800944c 	.word	0x0800944c

08007198 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08c      	sub	sp, #48	; 0x30
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80071a6:	220b      	movs	r2, #11
 80071a8:	68b9      	ldr	r1, [r7, #8]
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f7fe ff26 	bl	8005ffc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d929      	bls.n	800720a <gen_numname+0x72>
		sr = seq;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80071ba:	e020      	b.n	80071fe <gen_numname+0x66>
			wc = *lfn++;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	1c9a      	adds	r2, r3, #2
 80071c0:	607a      	str	r2, [r7, #4]
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80071c6:	2300      	movs	r3, #0
 80071c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ca:	e015      	b.n	80071f8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	005a      	lsls	r2, r3, #1
 80071d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	4413      	add	r3, r2
 80071d8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80071da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071dc:	085b      	lsrs	r3, r3, #1
 80071de:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <gen_numname+0x5a>
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	4b30      	ldr	r3, [pc, #192]	; (80072b0 <gen_numname+0x118>)
 80071ee:	4053      	eors	r3, r2
 80071f0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f4:	3301      	adds	r3, #1
 80071f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	2b0f      	cmp	r3, #15
 80071fc:	d9e6      	bls.n	80071cc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1da      	bne.n	80071bc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800720a:	2307      	movs	r3, #7
 800720c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	f003 030f 	and.w	r3, r3, #15
 8007216:	b2db      	uxtb	r3, r3
 8007218:	3330      	adds	r3, #48	; 0x30
 800721a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800721e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007222:	2b39      	cmp	r3, #57	; 0x39
 8007224:	d904      	bls.n	8007230 <gen_numname+0x98>
 8007226:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800722a:	3307      	adds	r3, #7
 800722c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	1e5a      	subs	r2, r3, #1
 8007234:	62ba      	str	r2, [r7, #40]	; 0x28
 8007236:	3330      	adds	r3, #48	; 0x30
 8007238:	443b      	add	r3, r7
 800723a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800723e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	091b      	lsrs	r3, r3, #4
 8007246:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1df      	bne.n	800720e <gen_numname+0x76>
	ns[i] = '~';
 800724e:	f107 0214 	add.w	r2, r7, #20
 8007252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007254:	4413      	add	r3, r2
 8007256:	227e      	movs	r2, #126	; 0x7e
 8007258:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800725a:	2300      	movs	r3, #0
 800725c:	627b      	str	r3, [r7, #36]	; 0x24
 800725e:	e002      	b.n	8007266 <gen_numname+0xce>
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	3301      	adds	r3, #1
 8007264:	627b      	str	r3, [r7, #36]	; 0x24
 8007266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	429a      	cmp	r2, r3
 800726c:	d205      	bcs.n	800727a <gen_numname+0xe2>
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	4413      	add	r3, r2
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b20      	cmp	r3, #32
 8007278:	d1f2      	bne.n	8007260 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	2b07      	cmp	r3, #7
 800727e:	d807      	bhi.n	8007290 <gen_numname+0xf8>
 8007280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	62ba      	str	r2, [r7, #40]	; 0x28
 8007286:	3330      	adds	r3, #48	; 0x30
 8007288:	443b      	add	r3, r7
 800728a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800728e:	e000      	b.n	8007292 <gen_numname+0xfa>
 8007290:	2120      	movs	r1, #32
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	627a      	str	r2, [r7, #36]	; 0x24
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	460a      	mov	r2, r1
 800729e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	2b07      	cmp	r3, #7
 80072a4:	d9e9      	bls.n	800727a <gen_numname+0xe2>
}
 80072a6:	bf00      	nop
 80072a8:	bf00      	nop
 80072aa:	3730      	adds	r7, #48	; 0x30
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	00011021 	.word	0x00011021

080072b4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80072bc:	2300      	movs	r3, #0
 80072be:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80072c0:	230b      	movs	r3, #11
 80072c2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	0852      	lsrs	r2, r2, #1
 80072ca:	01db      	lsls	r3, r3, #7
 80072cc:	4313      	orrs	r3, r2
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	1c59      	adds	r1, r3, #1
 80072d4:	6079      	str	r1, [r7, #4]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	4413      	add	r3, r2
 80072da:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	3b01      	subs	r3, #1
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1ed      	bne.n	80072c4 <sum_sfn+0x10>
	return sum;
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b086      	sub	sp, #24
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007304:	2100      	movs	r1, #0
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7ff fc88 	bl	8006c1c <dir_sdi>
 800730c:	4603      	mov	r3, r0
 800730e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <dir_find+0x24>
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	e0a9      	b.n	800746e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800731a:	23ff      	movs	r3, #255	; 0xff
 800731c:	753b      	strb	r3, [r7, #20]
 800731e:	7d3b      	ldrb	r3, [r7, #20]
 8007320:	757b      	strb	r3, [r7, #21]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f04f 32ff 	mov.w	r2, #4294967295
 8007328:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	4619      	mov	r1, r3
 8007330:	6938      	ldr	r0, [r7, #16]
 8007332:	f7ff f891 	bl	8006458 <move_window>
 8007336:	4603      	mov	r3, r0
 8007338:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	2b00      	cmp	r3, #0
 800733e:	f040 8090 	bne.w	8007462 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800734a:	7dbb      	ldrb	r3, [r7, #22]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d102      	bne.n	8007356 <dir_find+0x60>
 8007350:	2304      	movs	r3, #4
 8007352:	75fb      	strb	r3, [r7, #23]
 8007354:	e08a      	b.n	800746c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	330b      	adds	r3, #11
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007362:	73fb      	strb	r3, [r7, #15]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	7bfa      	ldrb	r2, [r7, #15]
 8007368:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800736a:	7dbb      	ldrb	r3, [r7, #22]
 800736c:	2be5      	cmp	r3, #229	; 0xe5
 800736e:	d007      	beq.n	8007380 <dir_find+0x8a>
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	f003 0308 	and.w	r3, r3, #8
 8007376:	2b00      	cmp	r3, #0
 8007378:	d009      	beq.n	800738e <dir_find+0x98>
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	2b0f      	cmp	r3, #15
 800737e:	d006      	beq.n	800738e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007380:	23ff      	movs	r3, #255	; 0xff
 8007382:	757b      	strb	r3, [r7, #21]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f04f 32ff 	mov.w	r2, #4294967295
 800738a:	631a      	str	r2, [r3, #48]	; 0x30
 800738c:	e05e      	b.n	800744c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	2b0f      	cmp	r3, #15
 8007392:	d136      	bne.n	8007402 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d154      	bne.n	800744c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80073a2:	7dbb      	ldrb	r3, [r7, #22]
 80073a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00d      	beq.n	80073c8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	7b5b      	ldrb	r3, [r3, #13]
 80073b2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80073b4:	7dbb      	ldrb	r3, [r7, #22]
 80073b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ba:	75bb      	strb	r3, [r7, #22]
 80073bc:	7dbb      	ldrb	r3, [r7, #22]
 80073be:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	695a      	ldr	r2, [r3, #20]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80073c8:	7dba      	ldrb	r2, [r7, #22]
 80073ca:	7d7b      	ldrb	r3, [r7, #21]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d115      	bne.n	80073fc <dir_find+0x106>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	330d      	adds	r3, #13
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	7d3a      	ldrb	r2, [r7, #20]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d10e      	bne.n	80073fc <dir_find+0x106>
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	691a      	ldr	r2, [r3, #16]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	4619      	mov	r1, r3
 80073e8:	4610      	mov	r0, r2
 80073ea:	f7ff fdfd 	bl	8006fe8 <cmp_lfn>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <dir_find+0x106>
 80073f4:	7d7b      	ldrb	r3, [r7, #21]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	e000      	b.n	80073fe <dir_find+0x108>
 80073fc:	23ff      	movs	r3, #255	; 0xff
 80073fe:	757b      	strb	r3, [r7, #21]
 8007400:	e024      	b.n	800744c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007402:	7d7b      	ldrb	r3, [r7, #21]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d109      	bne.n	800741c <dir_find+0x126>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff ff51 	bl	80072b4 <sum_sfn>
 8007412:	4603      	mov	r3, r0
 8007414:	461a      	mov	r2, r3
 8007416:	7d3b      	ldrb	r3, [r7, #20]
 8007418:	4293      	cmp	r3, r2
 800741a:	d024      	beq.n	8007466 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <dir_find+0x14a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a18      	ldr	r0, [r3, #32]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3324      	adds	r3, #36	; 0x24
 8007432:	220b      	movs	r2, #11
 8007434:	4619      	mov	r1, r3
 8007436:	f7fe fe1d 	bl	8006074 <mem_cmp>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d014      	beq.n	800746a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007440:	23ff      	movs	r3, #255	; 0xff
 8007442:	757b      	strb	r3, [r7, #21]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f04f 32ff 	mov.w	r2, #4294967295
 800744a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800744c:	2100      	movs	r1, #0
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff fc6d 	bl	8006d2e <dir_next>
 8007454:	4603      	mov	r3, r0
 8007456:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	2b00      	cmp	r3, #0
 800745c:	f43f af65 	beq.w	800732a <dir_find+0x34>
 8007460:	e004      	b.n	800746c <dir_find+0x176>
		if (res != FR_OK) break;
 8007462:	bf00      	nop
 8007464:	e002      	b.n	800746c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007466:	bf00      	nop
 8007468:	e000      	b.n	800746c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800746a:	bf00      	nop

	return res;
 800746c:	7dfb      	ldrb	r3, [r7, #23]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
	...

08007478 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08c      	sub	sp, #48	; 0x30
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800748c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <dir_register+0x20>
 8007494:	2306      	movs	r3, #6
 8007496:	e0e0      	b.n	800765a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007498:	2300      	movs	r3, #0
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
 800749c:	e002      	b.n	80074a4 <dir_register+0x2c>
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	3301      	adds	r3, #1
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	691a      	ldr	r2, [r3, #16]
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	4413      	add	r3, r2
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1f4      	bne.n	800749e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80074ba:	f107 030c 	add.w	r3, r7, #12
 80074be:	220c      	movs	r2, #12
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe fd9b 	bl	8005ffc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d032      	beq.n	8007536 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2240      	movs	r2, #64	; 0x40
 80074d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80074d8:	2301      	movs	r3, #1
 80074da:	62bb      	str	r3, [r7, #40]	; 0x28
 80074dc:	e016      	b.n	800750c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	691a      	ldr	r2, [r3, #16]
 80074e8:	f107 010c 	add.w	r1, r7, #12
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	f7ff fe53 	bl	8007198 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff feff 	bl	80072f6 <dir_find>
 80074f8:	4603      	mov	r3, r0
 80074fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80074fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	3301      	adds	r3, #1
 800750a:	62bb      	str	r3, [r7, #40]	; 0x28
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	2b63      	cmp	r3, #99	; 0x63
 8007510:	d9e5      	bls.n	80074de <dir_register+0x66>
 8007512:	e000      	b.n	8007516 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007514:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007518:	2b64      	cmp	r3, #100	; 0x64
 800751a:	d101      	bne.n	8007520 <dir_register+0xa8>
 800751c:	2307      	movs	r3, #7
 800751e:	e09c      	b.n	800765a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007520:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007524:	2b04      	cmp	r3, #4
 8007526:	d002      	beq.n	800752e <dir_register+0xb6>
 8007528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800752c:	e095      	b.n	800765a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800752e:	7dfa      	ldrb	r2, [r7, #23]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007536:	7dfb      	ldrb	r3, [r7, #23]
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d007      	beq.n	8007550 <dir_register+0xd8>
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	330c      	adds	r3, #12
 8007544:	4a47      	ldr	r2, [pc, #284]	; (8007664 <dir_register+0x1ec>)
 8007546:	fba2 2303 	umull	r2, r3, r2, r3
 800754a:	089b      	lsrs	r3, r3, #2
 800754c:	3301      	adds	r3, #1
 800754e:	e000      	b.n	8007552 <dir_register+0xda>
 8007550:	2301      	movs	r3, #1
 8007552:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007554:	6a39      	ldr	r1, [r7, #32]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7ff fcbf 	bl	8006eda <dir_alloc>
 800755c:	4603      	mov	r3, r0
 800755e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007566:	2b00      	cmp	r3, #0
 8007568:	d148      	bne.n	80075fc <dir_register+0x184>
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	3b01      	subs	r3, #1
 800756e:	623b      	str	r3, [r7, #32]
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d042      	beq.n	80075fc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	695a      	ldr	r2, [r3, #20]
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	015b      	lsls	r3, r3, #5
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff fb4a 	bl	8006c1c <dir_sdi>
 8007588:	4603      	mov	r3, r0
 800758a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800758e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007592:	2b00      	cmp	r3, #0
 8007594:	d132      	bne.n	80075fc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	3324      	adds	r3, #36	; 0x24
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff fe8a 	bl	80072b4 <sum_sfn>
 80075a0:	4603      	mov	r3, r0
 80075a2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	4619      	mov	r1, r3
 80075aa:	69f8      	ldr	r0, [r7, #28]
 80075ac:	f7fe ff54 	bl	8006458 <move_window>
 80075b0:	4603      	mov	r3, r0
 80075b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80075b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d11d      	bne.n	80075fa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	6918      	ldr	r0, [r3, #16]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a19      	ldr	r1, [r3, #32]
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	7efb      	ldrb	r3, [r7, #27]
 80075cc:	f7ff fd7c 	bl	80070c8 <put_lfn>
				fs->wflag = 1;
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	2201      	movs	r2, #1
 80075d4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80075d6:	2100      	movs	r1, #0
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7ff fba8 	bl	8006d2e <dir_next>
 80075de:	4603      	mov	r3, r0
 80075e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80075e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d107      	bne.n	80075fc <dir_register+0x184>
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	623b      	str	r3, [r7, #32]
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1d5      	bne.n	80075a4 <dir_register+0x12c>
 80075f8:	e000      	b.n	80075fc <dir_register+0x184>
				if (res != FR_OK) break;
 80075fa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80075fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007600:	2b00      	cmp	r3, #0
 8007602:	d128      	bne.n	8007656 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	4619      	mov	r1, r3
 800760a:	69f8      	ldr	r0, [r7, #28]
 800760c:	f7fe ff24 	bl	8006458 <move_window>
 8007610:	4603      	mov	r3, r0
 8007612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007616:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800761a:	2b00      	cmp	r3, #0
 800761c:	d11b      	bne.n	8007656 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	2220      	movs	r2, #32
 8007624:	2100      	movs	r1, #0
 8007626:	4618      	mov	r0, r3
 8007628:	f7fe fd09 	bl	800603e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a18      	ldr	r0, [r3, #32]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3324      	adds	r3, #36	; 0x24
 8007634:	220b      	movs	r2, #11
 8007636:	4619      	mov	r1, r3
 8007638:	f7fe fce0 	bl	8005ffc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	330c      	adds	r3, #12
 8007648:	f002 0218 	and.w	r2, r2, #24
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	2201      	movs	r2, #1
 8007654:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800765a:	4618      	mov	r0, r3
 800765c:	3730      	adds	r7, #48	; 0x30
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	4ec4ec4f 	.word	0x4ec4ec4f

08007668 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08a      	sub	sp, #40	; 0x28
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	613b      	str	r3, [r7, #16]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	61ba      	str	r2, [r7, #24]
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4413      	add	r3, r2
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007696:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007698:	2b1f      	cmp	r3, #31
 800769a:	d940      	bls.n	800771e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800769c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800769e:	2b2f      	cmp	r3, #47	; 0x2f
 80076a0:	d006      	beq.n	80076b0 <create_name+0x48>
 80076a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076a4:	2b5c      	cmp	r3, #92	; 0x5c
 80076a6:	d110      	bne.n	80076ca <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80076a8:	e002      	b.n	80076b0 <create_name+0x48>
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	3301      	adds	r3, #1
 80076ae:	61bb      	str	r3, [r7, #24]
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	4413      	add	r3, r2
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b2f      	cmp	r3, #47	; 0x2f
 80076ba:	d0f6      	beq.n	80076aa <create_name+0x42>
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	4413      	add	r3, r2
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	2b5c      	cmp	r3, #92	; 0x5c
 80076c6:	d0f0      	beq.n	80076aa <create_name+0x42>
			break;
 80076c8:	e02a      	b.n	8007720 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2bfe      	cmp	r3, #254	; 0xfe
 80076ce:	d901      	bls.n	80076d4 <create_name+0x6c>
 80076d0:	2306      	movs	r3, #6
 80076d2:	e17d      	b.n	80079d0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80076d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80076da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076dc:	2101      	movs	r1, #1
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 fcdc 	bl	800909c <ff_convert>
 80076e4:	4603      	mov	r3, r0
 80076e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80076e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <create_name+0x8a>
 80076ee:	2306      	movs	r3, #6
 80076f0:	e16e      	b.n	80079d0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80076f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076f4:	2b7f      	cmp	r3, #127	; 0x7f
 80076f6:	d809      	bhi.n	800770c <create_name+0xa4>
 80076f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076fa:	4619      	mov	r1, r3
 80076fc:	488d      	ldr	r0, [pc, #564]	; (8007934 <create_name+0x2cc>)
 80076fe:	f7fe fce0 	bl	80060c2 <chk_chr>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <create_name+0xa4>
 8007708:	2306      	movs	r3, #6
 800770a:	e161      	b.n	80079d0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	617a      	str	r2, [r7, #20]
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4413      	add	r3, r2
 8007718:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800771a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800771c:	e7b4      	b.n	8007688 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800771e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	441a      	add	r2, r3
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800772a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800772c:	2b1f      	cmp	r3, #31
 800772e:	d801      	bhi.n	8007734 <create_name+0xcc>
 8007730:	2304      	movs	r3, #4
 8007732:	e000      	b.n	8007736 <create_name+0xce>
 8007734:	2300      	movs	r3, #0
 8007736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800773a:	e011      	b.n	8007760 <create_name+0xf8>
		w = lfn[di - 1];
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007742:	4413      	add	r3, r2
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4413      	add	r3, r2
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800774e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007750:	2b20      	cmp	r3, #32
 8007752:	d002      	beq.n	800775a <create_name+0xf2>
 8007754:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007756:	2b2e      	cmp	r3, #46	; 0x2e
 8007758:	d106      	bne.n	8007768 <create_name+0x100>
		di--;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	3b01      	subs	r3, #1
 800775e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1ea      	bne.n	800773c <create_name+0xd4>
 8007766:	e000      	b.n	800776a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007768:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	4413      	add	r3, r2
 8007772:	2200      	movs	r2, #0
 8007774:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <create_name+0x118>
 800777c:	2306      	movs	r3, #6
 800777e:	e127      	b.n	80079d0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3324      	adds	r3, #36	; 0x24
 8007784:	220b      	movs	r2, #11
 8007786:	2120      	movs	r1, #32
 8007788:	4618      	mov	r0, r3
 800778a:	f7fe fc58 	bl	800603e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800778e:	2300      	movs	r3, #0
 8007790:	61bb      	str	r3, [r7, #24]
 8007792:	e002      	b.n	800779a <create_name+0x132>
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	3301      	adds	r3, #1
 8007798:	61bb      	str	r3, [r7, #24]
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	4413      	add	r3, r2
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	d0f5      	beq.n	8007794 <create_name+0x12c>
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4413      	add	r3, r2
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	2b2e      	cmp	r3, #46	; 0x2e
 80077b4:	d0ee      	beq.n	8007794 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d009      	beq.n	80077d0 <create_name+0x168>
 80077bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077c0:	f043 0303 	orr.w	r3, r3, #3
 80077c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80077c8:	e002      	b.n	80077d0 <create_name+0x168>
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d009      	beq.n	80077ea <create_name+0x182>
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80077dc:	4413      	add	r3, r2
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	4413      	add	r3, r2
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	2b2e      	cmp	r3, #46	; 0x2e
 80077e8:	d1ef      	bne.n	80077ca <create_name+0x162>

	i = b = 0; ni = 8;
 80077ea:	2300      	movs	r3, #0
 80077ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80077f0:	2300      	movs	r3, #0
 80077f2:	623b      	str	r3, [r7, #32]
 80077f4:	2308      	movs	r3, #8
 80077f6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	61ba      	str	r2, [r7, #24]
 80077fe:	005b      	lsls	r3, r3, #1
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4413      	add	r3, r2
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 8090 	beq.w	8007930 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007812:	2b20      	cmp	r3, #32
 8007814:	d006      	beq.n	8007824 <create_name+0x1bc>
 8007816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007818:	2b2e      	cmp	r3, #46	; 0x2e
 800781a:	d10a      	bne.n	8007832 <create_name+0x1ca>
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	429a      	cmp	r2, r3
 8007822:	d006      	beq.n	8007832 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007828:	f043 0303 	orr.w	r3, r3, #3
 800782c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007830:	e07d      	b.n	800792e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007832:	6a3a      	ldr	r2, [r7, #32]
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	429a      	cmp	r2, r3
 8007838:	d203      	bcs.n	8007842 <create_name+0x1da>
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	429a      	cmp	r2, r3
 8007840:	d123      	bne.n	800788a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	2b0b      	cmp	r3, #11
 8007846:	d106      	bne.n	8007856 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800784c:	f043 0303 	orr.w	r3, r3, #3
 8007850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007854:	e075      	b.n	8007942 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	429a      	cmp	r2, r3
 800785c:	d005      	beq.n	800786a <create_name+0x202>
 800785e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007862:	f043 0303 	orr.w	r3, r3, #3
 8007866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	429a      	cmp	r2, r3
 8007870:	d866      	bhi.n	8007940 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	61bb      	str	r3, [r7, #24]
 8007876:	2308      	movs	r3, #8
 8007878:	623b      	str	r3, [r7, #32]
 800787a:	230b      	movs	r3, #11
 800787c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800787e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007888:	e051      	b.n	800792e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800788a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800788c:	2b7f      	cmp	r3, #127	; 0x7f
 800788e:	d914      	bls.n	80078ba <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007892:	2100      	movs	r1, #0
 8007894:	4618      	mov	r0, r3
 8007896:	f001 fc01 	bl	800909c <ff_convert>
 800789a:	4603      	mov	r3, r0
 800789c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800789e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d004      	beq.n	80078ae <create_name+0x246>
 80078a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078a6:	3b80      	subs	r3, #128	; 0x80
 80078a8:	4a23      	ldr	r2, [pc, #140]	; (8007938 <create_name+0x2d0>)
 80078aa:	5cd3      	ldrb	r3, [r2, r3]
 80078ac:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80078ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078b2:	f043 0302 	orr.w	r3, r3, #2
 80078b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80078ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d007      	beq.n	80078d0 <create_name+0x268>
 80078c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078c2:	4619      	mov	r1, r3
 80078c4:	481d      	ldr	r0, [pc, #116]	; (800793c <create_name+0x2d4>)
 80078c6:	f7fe fbfc 	bl	80060c2 <chk_chr>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d008      	beq.n	80078e2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80078d0:	235f      	movs	r3, #95	; 0x5f
 80078d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80078d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078d8:	f043 0303 	orr.w	r3, r3, #3
 80078dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078e0:	e01b      	b.n	800791a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80078e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078e4:	2b40      	cmp	r3, #64	; 0x40
 80078e6:	d909      	bls.n	80078fc <create_name+0x294>
 80078e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078ea:	2b5a      	cmp	r3, #90	; 0x5a
 80078ec:	d806      	bhi.n	80078fc <create_name+0x294>
					b |= 2;
 80078ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80078f2:	f043 0302 	orr.w	r3, r3, #2
 80078f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80078fa:	e00e      	b.n	800791a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80078fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078fe:	2b60      	cmp	r3, #96	; 0x60
 8007900:	d90b      	bls.n	800791a <create_name+0x2b2>
 8007902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007904:	2b7a      	cmp	r3, #122	; 0x7a
 8007906:	d808      	bhi.n	800791a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007908:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800790c:	f043 0301 	orr.w	r3, r3, #1
 8007910:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007914:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007916:	3b20      	subs	r3, #32
 8007918:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	623a      	str	r2, [r7, #32]
 8007920:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007922:	b2d1      	uxtb	r1, r2
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	4413      	add	r3, r2
 8007928:	460a      	mov	r2, r1
 800792a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800792e:	e763      	b.n	80077f8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007930:	bf00      	nop
 8007932:	e006      	b.n	8007942 <create_name+0x2da>
 8007934:	0800936c 	.word	0x0800936c
 8007938:	080093cc 	.word	0x080093cc
 800793c:	08009378 	.word	0x08009378
			if (si > di) break;			/* No extension */
 8007940:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007948:	2be5      	cmp	r3, #229	; 0xe5
 800794a:	d103      	bne.n	8007954 <create_name+0x2ec>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2205      	movs	r2, #5
 8007950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	2b08      	cmp	r3, #8
 8007958:	d104      	bne.n	8007964 <create_name+0x2fc>
 800795a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007964:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007968:	f003 030c 	and.w	r3, r3, #12
 800796c:	2b0c      	cmp	r3, #12
 800796e:	d005      	beq.n	800797c <create_name+0x314>
 8007970:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007974:	f003 0303 	and.w	r3, r3, #3
 8007978:	2b03      	cmp	r3, #3
 800797a:	d105      	bne.n	8007988 <create_name+0x320>
 800797c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007980:	f043 0302 	orr.w	r3, r3, #2
 8007984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d117      	bne.n	80079c4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007994:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007998:	f003 0303 	and.w	r3, r3, #3
 800799c:	2b01      	cmp	r3, #1
 800799e:	d105      	bne.n	80079ac <create_name+0x344>
 80079a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079a4:	f043 0310 	orr.w	r3, r3, #16
 80079a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80079ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079b0:	f003 030c 	and.w	r3, r3, #12
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	d105      	bne.n	80079c4 <create_name+0x35c>
 80079b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079bc:	f043 0308 	orr.w	r3, r3, #8
 80079c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80079ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80079ce:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3728      	adds	r7, #40	; 0x28
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80079ec:	e002      	b.n	80079f4 <follow_path+0x1c>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	3301      	adds	r3, #1
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b2f      	cmp	r3, #47	; 0x2f
 80079fa:	d0f8      	beq.n	80079ee <follow_path+0x16>
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b5c      	cmp	r3, #92	; 0x5c
 8007a02:	d0f4      	beq.n	80079ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	2200      	movs	r2, #0
 8007a08:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b1f      	cmp	r3, #31
 8007a10:	d80a      	bhi.n	8007a28 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2280      	movs	r2, #128	; 0x80
 8007a16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff f8fd 	bl	8006c1c <dir_sdi>
 8007a22:	4603      	mov	r3, r0
 8007a24:	75fb      	strb	r3, [r7, #23]
 8007a26:	e048      	b.n	8007aba <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a28:	463b      	mov	r3, r7
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff fe1b 	bl	8007668 <create_name>
 8007a32:	4603      	mov	r3, r0
 8007a34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d139      	bne.n	8007ab0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7ff fc5a 	bl	80072f6 <dir_find>
 8007a42:	4603      	mov	r3, r0
 8007a44:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007a4c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	d12c      	bne.n	8007ab4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007a5a:	7afb      	ldrb	r3, [r7, #11]
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d127      	bne.n	8007ab4 <follow_path+0xdc>
 8007a64:	2305      	movs	r3, #5
 8007a66:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007a68:	e024      	b.n	8007ab4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a6a:	7afb      	ldrb	r3, [r7, #11]
 8007a6c:	f003 0304 	and.w	r3, r3, #4
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d121      	bne.n	8007ab8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	799b      	ldrb	r3, [r3, #6]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d102      	bne.n	8007a86 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007a80:	2305      	movs	r3, #5
 8007a82:	75fb      	strb	r3, [r7, #23]
 8007a84:	e019      	b.n	8007aba <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	8992      	ldrh	r2, [r2, #12]
 8007a94:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a98:	fb00 f202 	mul.w	r2, r0, r2
 8007a9c:	1a9b      	subs	r3, r3, r2
 8007a9e:	440b      	add	r3, r1
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f7ff fa60 	bl	8006f68 <ld_clust>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007aae:	e7bb      	b.n	8007a28 <follow_path+0x50>
			if (res != FR_OK) break;
 8007ab0:	bf00      	nop
 8007ab2:	e002      	b.n	8007aba <follow_path+0xe2>
				break;
 8007ab4:	bf00      	nop
 8007ab6:	e000      	b.n	8007aba <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007ab8:	bf00      	nop
			}
		}
	}

	return res;
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007acc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d031      	beq.n	8007b3e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	617b      	str	r3, [r7, #20]
 8007ae0:	e002      	b.n	8007ae8 <get_ldnumber+0x24>
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	2b1f      	cmp	r3, #31
 8007aee:	d903      	bls.n	8007af8 <get_ldnumber+0x34>
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b3a      	cmp	r3, #58	; 0x3a
 8007af6:	d1f4      	bne.n	8007ae2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b3a      	cmp	r3, #58	; 0x3a
 8007afe:	d11c      	bne.n	8007b3a <get_ldnumber+0x76>
			tp = *path;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	60fa      	str	r2, [r7, #12]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	3b30      	subs	r3, #48	; 0x30
 8007b10:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	2b09      	cmp	r3, #9
 8007b16:	d80e      	bhi.n	8007b36 <get_ldnumber+0x72>
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d10a      	bne.n	8007b36 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d107      	bne.n	8007b36 <get_ldnumber+0x72>
					vol = (int)i;
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	e002      	b.n	8007b40 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007b3e:	693b      	ldr	r3, [r7, #16]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	371c      	adds	r7, #28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	70da      	strb	r2, [r3, #3]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b62:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fe fc76 	bl	8006458 <move_window>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <check_fs+0x2a>
 8007b72:	2304      	movs	r3, #4
 8007b74:	e038      	b.n	8007be8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	3338      	adds	r3, #56	; 0x38
 8007b7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fe f9ba 	bl	8005ef8 <ld_word>
 8007b84:	4603      	mov	r3, r0
 8007b86:	461a      	mov	r2, r3
 8007b88:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d001      	beq.n	8007b94 <check_fs+0x48>
 8007b90:	2303      	movs	r3, #3
 8007b92:	e029      	b.n	8007be8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b9a:	2be9      	cmp	r3, #233	; 0xe9
 8007b9c:	d009      	beq.n	8007bb2 <check_fs+0x66>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ba4:	2beb      	cmp	r3, #235	; 0xeb
 8007ba6:	d11e      	bne.n	8007be6 <check_fs+0x9a>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007bae:	2b90      	cmp	r3, #144	; 0x90
 8007bb0:	d119      	bne.n	8007be6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	3338      	adds	r3, #56	; 0x38
 8007bb6:	3336      	adds	r3, #54	; 0x36
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fe f9b5 	bl	8005f28 <ld_dword>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007bc4:	4a0a      	ldr	r2, [pc, #40]	; (8007bf0 <check_fs+0xa4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d101      	bne.n	8007bce <check_fs+0x82>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e00c      	b.n	8007be8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3338      	adds	r3, #56	; 0x38
 8007bd2:	3352      	adds	r3, #82	; 0x52
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe f9a7 	bl	8005f28 <ld_dword>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	4a05      	ldr	r2, [pc, #20]	; (8007bf4 <check_fs+0xa8>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d101      	bne.n	8007be6 <check_fs+0x9a>
 8007be2:	2300      	movs	r3, #0
 8007be4:	e000      	b.n	8007be8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007be6:	2302      	movs	r3, #2
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	00544146 	.word	0x00544146
 8007bf4:	33544146 	.word	0x33544146

08007bf8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b096      	sub	sp, #88	; 0x58
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4613      	mov	r3, r2
 8007c04:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f7ff ff59 	bl	8007ac4 <get_ldnumber>
 8007c12:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	da01      	bge.n	8007c1e <find_volume+0x26>
 8007c1a:	230b      	movs	r3, #11
 8007c1c:	e265      	b.n	80080ea <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c1e:	4a9f      	ldr	r2, [pc, #636]	; (8007e9c <find_volume+0x2a4>)
 8007c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c26:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <find_volume+0x3a>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	e25b      	b.n	80080ea <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c36:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	f023 0301 	bic.w	r3, r3, #1
 8007c3e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d01a      	beq.n	8007c7e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	785b      	ldrb	r3, [r3, #1]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fe f8b5 	bl	8005dbc <disk_status>
 8007c52:	4603      	mov	r3, r0
 8007c54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007c58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10c      	bne.n	8007c7e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007c64:	79fb      	ldrb	r3, [r7, #7]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d007      	beq.n	8007c7a <find_volume+0x82>
 8007c6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007c76:	230a      	movs	r3, #10
 8007c78:	e237      	b.n	80080ea <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e235      	b.n	80080ea <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c80:	2200      	movs	r2, #0
 8007c82:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8e:	785b      	ldrb	r3, [r3, #1]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fe f8ad 	bl	8005df0 <disk_initialize>
 8007c96:	4603      	mov	r3, r0
 8007c98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007c9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e21e      	b.n	80080ea <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007cac:	79fb      	ldrb	r3, [r7, #7]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d007      	beq.n	8007cc2 <find_volume+0xca>
 8007cb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cb6:	f003 0304 	and.w	r3, r3, #4
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007cbe:	230a      	movs	r3, #10
 8007cc0:	e213      	b.n	80080ea <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc4:	7858      	ldrb	r0, [r3, #1]
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc8:	330c      	adds	r3, #12
 8007cca:	461a      	mov	r2, r3
 8007ccc:	2102      	movs	r1, #2
 8007cce:	f7fe f8f5 	bl	8005ebc <disk_ioctl>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <find_volume+0xe4>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e206      	b.n	80080ea <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	899b      	ldrh	r3, [r3, #12]
 8007ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce4:	d80d      	bhi.n	8007d02 <find_volume+0x10a>
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	899b      	ldrh	r3, [r3, #12]
 8007cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cee:	d308      	bcc.n	8007d02 <find_volume+0x10a>
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	899b      	ldrh	r3, [r3, #12]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf8:	899b      	ldrh	r3, [r3, #12]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <find_volume+0x10e>
 8007d02:	2301      	movs	r3, #1
 8007d04:	e1f1      	b.n	80080ea <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007d06:	2300      	movs	r3, #0
 8007d08:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007d0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d0e:	f7ff ff1d 	bl	8007b4c <check_fs>
 8007d12:	4603      	mov	r3, r0
 8007d14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007d18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d149      	bne.n	8007db4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d20:	2300      	movs	r3, #0
 8007d22:	643b      	str	r3, [r7, #64]	; 0x40
 8007d24:	e01e      	b.n	8007d64 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d28:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d2e:	011b      	lsls	r3, r3, #4
 8007d30:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007d34:	4413      	add	r3, r2
 8007d36:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d006      	beq.n	8007d50 <find_volume+0x158>
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	3308      	adds	r3, #8
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe f8ee 	bl	8005f28 <ld_dword>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	e000      	b.n	8007d52 <find_volume+0x15a>
 8007d50:	2200      	movs	r2, #0
 8007d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	3358      	adds	r3, #88	; 0x58
 8007d58:	443b      	add	r3, r7
 8007d5a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d60:	3301      	adds	r3, #1
 8007d62:	643b      	str	r3, [r7, #64]	; 0x40
 8007d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d9dd      	bls.n	8007d26 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <find_volume+0x182>
 8007d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d76:	3b01      	subs	r3, #1
 8007d78:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	3358      	adds	r3, #88	; 0x58
 8007d80:	443b      	add	r3, r7
 8007d82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d86:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d005      	beq.n	8007d9a <find_volume+0x1a2>
 8007d8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d92:	f7ff fedb 	bl	8007b4c <check_fs>
 8007d96:	4603      	mov	r3, r0
 8007d98:	e000      	b.n	8007d9c <find_volume+0x1a4>
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007da0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d905      	bls.n	8007db4 <find_volume+0x1bc>
 8007da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007daa:	3301      	adds	r3, #1
 8007dac:	643b      	str	r3, [r7, #64]	; 0x40
 8007dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d9e2      	bls.n	8007d7a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007db4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d101      	bne.n	8007dc0 <find_volume+0x1c8>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e194      	b.n	80080ea <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d901      	bls.n	8007dcc <find_volume+0x1d4>
 8007dc8:	230d      	movs	r3, #13
 8007dca:	e18e      	b.n	80080ea <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	3338      	adds	r3, #56	; 0x38
 8007dd0:	330b      	adds	r3, #11
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe f890 	bl	8005ef8 <ld_word>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	461a      	mov	r2, r3
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	899b      	ldrh	r3, [r3, #12]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d001      	beq.n	8007de8 <find_volume+0x1f0>
 8007de4:	230d      	movs	r3, #13
 8007de6:	e180      	b.n	80080ea <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	3338      	adds	r3, #56	; 0x38
 8007dec:	3316      	adds	r3, #22
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fe f882 	bl	8005ef8 <ld_word>
 8007df4:	4603      	mov	r3, r0
 8007df6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d106      	bne.n	8007e0c <find_volume+0x214>
 8007dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e00:	3338      	adds	r3, #56	; 0x38
 8007e02:	3324      	adds	r3, #36	; 0x24
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fe f88f 	bl	8005f28 <ld_dword>
 8007e0a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e10:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e14:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1e:	789b      	ldrb	r3, [r3, #2]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d005      	beq.n	8007e30 <find_volume+0x238>
 8007e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e26:	789b      	ldrb	r3, [r3, #2]
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d001      	beq.n	8007e30 <find_volume+0x238>
 8007e2c:	230d      	movs	r3, #13
 8007e2e:	e15c      	b.n	80080ea <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	789b      	ldrb	r3, [r3, #2]
 8007e34:	461a      	mov	r2, r3
 8007e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e38:	fb02 f303 	mul.w	r3, r2, r3
 8007e3c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4c:	895b      	ldrh	r3, [r3, #10]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d008      	beq.n	8007e64 <find_volume+0x26c>
 8007e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e54:	895b      	ldrh	r3, [r3, #10]
 8007e56:	461a      	mov	r2, r3
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	895b      	ldrh	r3, [r3, #10]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	4013      	ands	r3, r2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <find_volume+0x270>
 8007e64:	230d      	movs	r3, #13
 8007e66:	e140      	b.n	80080ea <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	3338      	adds	r3, #56	; 0x38
 8007e6c:	3311      	adds	r3, #17
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe f842 	bl	8005ef8 <ld_word>
 8007e74:	4603      	mov	r3, r0
 8007e76:	461a      	mov	r2, r3
 8007e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7e:	891b      	ldrh	r3, [r3, #8]
 8007e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e82:	8992      	ldrh	r2, [r2, #12]
 8007e84:	0952      	lsrs	r2, r2, #5
 8007e86:	b292      	uxth	r2, r2
 8007e88:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e8c:	fb01 f202 	mul.w	r2, r1, r2
 8007e90:	1a9b      	subs	r3, r3, r2
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <find_volume+0x2a8>
 8007e98:	230d      	movs	r3, #13
 8007e9a:	e126      	b.n	80080ea <find_volume+0x4f2>
 8007e9c:	20002814 	.word	0x20002814

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea2:	3338      	adds	r3, #56	; 0x38
 8007ea4:	3313      	adds	r3, #19
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe f826 	bl	8005ef8 <ld_word>
 8007eac:	4603      	mov	r3, r0
 8007eae:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d106      	bne.n	8007ec4 <find_volume+0x2cc>
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb8:	3338      	adds	r3, #56	; 0x38
 8007eba:	3320      	adds	r3, #32
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fe f833 	bl	8005f28 <ld_dword>
 8007ec2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec6:	3338      	adds	r3, #56	; 0x38
 8007ec8:	330e      	adds	r3, #14
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe f814 	bl	8005ef8 <ld_word>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007ed4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <find_volume+0x2e6>
 8007eda:	230d      	movs	r3, #13
 8007edc:	e105      	b.n	80080ea <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007ede:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee2:	4413      	add	r3, r2
 8007ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ee6:	8911      	ldrh	r1, [r2, #8]
 8007ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eea:	8992      	ldrh	r2, [r2, #12]
 8007eec:	0952      	lsrs	r2, r2, #5
 8007eee:	b292      	uxth	r2, r2
 8007ef0:	fbb1 f2f2 	udiv	r2, r1, r2
 8007ef4:	b292      	uxth	r2, r2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007efa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d201      	bcs.n	8007f06 <find_volume+0x30e>
 8007f02:	230d      	movs	r3, #13
 8007f04:	e0f1      	b.n	80080ea <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f0e:	8952      	ldrh	r2, [r2, #10]
 8007f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f14:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <find_volume+0x328>
 8007f1c:	230d      	movs	r3, #13
 8007f1e:	e0e4      	b.n	80080ea <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007f20:	2303      	movs	r3, #3
 8007f22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d802      	bhi.n	8007f36 <find_volume+0x33e>
 8007f30:	2302      	movs	r3, #2
 8007f32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d802      	bhi.n	8007f46 <find_volume+0x34e>
 8007f40:	2301      	movs	r3, #1
 8007f42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	1c9a      	adds	r2, r3, #2
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f52:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007f54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f58:	441a      	add	r2, r3
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007f5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f62:	441a      	add	r2, r3
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007f68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d11e      	bne.n	8007fae <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f72:	3338      	adds	r3, #56	; 0x38
 8007f74:	332a      	adds	r3, #42	; 0x2a
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fd ffbe 	bl	8005ef8 <ld_word>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <find_volume+0x38e>
 8007f82:	230d      	movs	r3, #13
 8007f84:	e0b1      	b.n	80080ea <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f88:	891b      	ldrh	r3, [r3, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <find_volume+0x39a>
 8007f8e:	230d      	movs	r3, #13
 8007f90:	e0ab      	b.n	80080ea <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f94:	3338      	adds	r3, #56	; 0x38
 8007f96:	332c      	adds	r3, #44	; 0x2c
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fd ffc5 	bl	8005f28 <ld_dword>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	69db      	ldr	r3, [r3, #28]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	647b      	str	r3, [r7, #68]	; 0x44
 8007fac:	e01f      	b.n	8007fee <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb0:	891b      	ldrh	r3, [r3, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <find_volume+0x3c2>
 8007fb6:	230d      	movs	r3, #13
 8007fb8:	e097      	b.n	80080ea <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc0:	441a      	add	r2, r3
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007fc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d103      	bne.n	8007fd6 <find_volume+0x3de>
 8007fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	e00a      	b.n	8007fec <find_volume+0x3f4>
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd8:	69da      	ldr	r2, [r3, #28]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	4413      	add	r3, r2
 8007fe0:	085a      	lsrs	r2, r3, #1
 8007fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007fec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	6a1a      	ldr	r2, [r3, #32]
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	899b      	ldrh	r3, [r3, #12]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ffa:	440b      	add	r3, r1
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008000:	8989      	ldrh	r1, [r1, #12]
 8008002:	fbb3 f3f1 	udiv	r3, r3, r1
 8008006:	429a      	cmp	r2, r3
 8008008:	d201      	bcs.n	800800e <find_volume+0x416>
 800800a:	230d      	movs	r3, #13
 800800c:	e06d      	b.n	80080ea <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	f04f 32ff 	mov.w	r2, #4294967295
 8008014:	619a      	str	r2, [r3, #24]
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	699a      	ldr	r2, [r3, #24]
 800801a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	2280      	movs	r2, #128	; 0x80
 8008022:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008024:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008028:	2b03      	cmp	r3, #3
 800802a:	d149      	bne.n	80080c0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800802c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802e:	3338      	adds	r3, #56	; 0x38
 8008030:	3330      	adds	r3, #48	; 0x30
 8008032:	4618      	mov	r0, r3
 8008034:	f7fd ff60 	bl	8005ef8 <ld_word>
 8008038:	4603      	mov	r3, r0
 800803a:	2b01      	cmp	r3, #1
 800803c:	d140      	bne.n	80080c0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800803e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008040:	3301      	adds	r3, #1
 8008042:	4619      	mov	r1, r3
 8008044:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008046:	f7fe fa07 	bl	8006458 <move_window>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d137      	bne.n	80080c0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	2200      	movs	r2, #0
 8008054:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	3338      	adds	r3, #56	; 0x38
 800805a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800805e:	4618      	mov	r0, r3
 8008060:	f7fd ff4a 	bl	8005ef8 <ld_word>
 8008064:	4603      	mov	r3, r0
 8008066:	461a      	mov	r2, r3
 8008068:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800806c:	429a      	cmp	r2, r3
 800806e:	d127      	bne.n	80080c0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	3338      	adds	r3, #56	; 0x38
 8008074:	4618      	mov	r0, r3
 8008076:	f7fd ff57 	bl	8005f28 <ld_dword>
 800807a:	4603      	mov	r3, r0
 800807c:	4a1d      	ldr	r2, [pc, #116]	; (80080f4 <find_volume+0x4fc>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d11e      	bne.n	80080c0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008084:	3338      	adds	r3, #56	; 0x38
 8008086:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800808a:	4618      	mov	r0, r3
 800808c:	f7fd ff4c 	bl	8005f28 <ld_dword>
 8008090:	4603      	mov	r3, r0
 8008092:	4a19      	ldr	r2, [pc, #100]	; (80080f8 <find_volume+0x500>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d113      	bne.n	80080c0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	3338      	adds	r3, #56	; 0x38
 800809c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fd ff41 	bl	8005f28 <ld_dword>
 80080a6:	4602      	mov	r2, r0
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	3338      	adds	r3, #56	; 0x38
 80080b0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fd ff37 	bl	8005f28 <ld_dword>
 80080ba:	4602      	mov	r2, r0
 80080bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080be:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80080c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80080c6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80080c8:	4b0c      	ldr	r3, [pc, #48]	; (80080fc <find_volume+0x504>)
 80080ca:	881b      	ldrh	r3, [r3, #0]
 80080cc:	3301      	adds	r3, #1
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <find_volume+0x504>)
 80080d2:	801a      	strh	r2, [r3, #0]
 80080d4:	4b09      	ldr	r3, [pc, #36]	; (80080fc <find_volume+0x504>)
 80080d6:	881a      	ldrh	r2, [r3, #0]
 80080d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080da:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	4a08      	ldr	r2, [pc, #32]	; (8008100 <find_volume+0x508>)
 80080e0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80080e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080e4:	f7fe f950 	bl	8006388 <clear_lock>
#endif
	return FR_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3758      	adds	r7, #88	; 0x58
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	41615252 	.word	0x41615252
 80080f8:	61417272 	.word	0x61417272
 80080fc:	20002818 	.word	0x20002818
 8008100:	2000283c 	.word	0x2000283c

08008104 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800810e:	2309      	movs	r3, #9
 8008110:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01c      	beq.n	8008152 <validate+0x4e>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d018      	beq.n	8008152 <validate+0x4e>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d013      	beq.n	8008152 <validate+0x4e>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	889a      	ldrh	r2, [r3, #4]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	88db      	ldrh	r3, [r3, #6]
 8008134:	429a      	cmp	r2, r3
 8008136:	d10c      	bne.n	8008152 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	785b      	ldrb	r3, [r3, #1]
 800813e:	4618      	mov	r0, r3
 8008140:	f7fd fe3c 	bl	8005dbc <disk_status>
 8008144:	4603      	mov	r3, r0
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <validate+0x4e>
			res = FR_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d102      	bne.n	800815e <validate+0x5a>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	e000      	b.n	8008160 <validate+0x5c>
 800815e:	2300      	movs	r3, #0
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	6013      	str	r3, [r2, #0]
	return res;
 8008164:	7bfb      	ldrb	r3, [r7, #15]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
	...

08008170 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008182:	f107 0310 	add.w	r3, r7, #16
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff fc9c 	bl	8007ac4 <get_ldnumber>
 800818c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	2b00      	cmp	r3, #0
 8008192:	da01      	bge.n	8008198 <f_mount+0x28>
 8008194:	230b      	movs	r3, #11
 8008196:	e02b      	b.n	80081f0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008198:	4a17      	ldr	r2, [pc, #92]	; (80081f8 <f_mount+0x88>)
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d005      	beq.n	80081b4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80081a8:	69b8      	ldr	r0, [r7, #24]
 80081aa:	f7fe f8ed 	bl	8006388 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	2200      	movs	r2, #0
 80081b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	490d      	ldr	r1, [pc, #52]	; (80081f8 <f_mount+0x88>)
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <f_mount+0x66>
 80081d0:	79fb      	ldrb	r3, [r7, #7]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d001      	beq.n	80081da <f_mount+0x6a>
 80081d6:	2300      	movs	r3, #0
 80081d8:	e00a      	b.n	80081f0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80081da:	f107 010c 	add.w	r1, r7, #12
 80081de:	f107 0308 	add.w	r3, r7, #8
 80081e2:	2200      	movs	r2, #0
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7ff fd07 	bl	8007bf8 <find_volume>
 80081ea:	4603      	mov	r3, r0
 80081ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3720      	adds	r7, #32
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	20002814 	.word	0x20002814

080081fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b09a      	sub	sp, #104	; 0x68
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	4613      	mov	r3, r2
 8008208:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <f_open+0x18>
 8008210:	2309      	movs	r3, #9
 8008212:	e1bb      	b.n	800858c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008214:	79fb      	ldrb	r3, [r7, #7]
 8008216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800821a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800821c:	79fa      	ldrb	r2, [r7, #7]
 800821e:	f107 0114 	add.w	r1, r7, #20
 8008222:	f107 0308 	add.w	r3, r7, #8
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff fce6 	bl	8007bf8 <find_volume>
 800822c:	4603      	mov	r3, r0
 800822e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008232:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008236:	2b00      	cmp	r3, #0
 8008238:	f040 819f 	bne.w	800857a <f_open+0x37e>
		dj.obj.fs = fs;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	f107 0318 	add.w	r3, r7, #24
 8008246:	4611      	mov	r1, r2
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff fbc5 	bl	80079d8 <follow_path>
 800824e:	4603      	mov	r3, r0
 8008250:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008254:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008258:	2b00      	cmp	r3, #0
 800825a:	d11a      	bne.n	8008292 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800825c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008260:	b25b      	sxtb	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	da03      	bge.n	800826e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008266:	2306      	movs	r3, #6
 8008268:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800826c:	e011      	b.n	8008292 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	f023 0301 	bic.w	r3, r3, #1
 8008274:	2b00      	cmp	r3, #0
 8008276:	bf14      	ite	ne
 8008278:	2301      	movne	r3, #1
 800827a:	2300      	moveq	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	461a      	mov	r2, r3
 8008280:	f107 0318 	add.w	r3, r7, #24
 8008284:	4611      	mov	r1, r2
 8008286:	4618      	mov	r0, r3
 8008288:	f7fd ff36 	bl	80060f8 <chk_lock>
 800828c:	4603      	mov	r3, r0
 800828e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008292:	79fb      	ldrb	r3, [r7, #7]
 8008294:	f003 031c 	and.w	r3, r3, #28
 8008298:	2b00      	cmp	r3, #0
 800829a:	d07f      	beq.n	800839c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800829c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d017      	beq.n	80082d4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80082a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	d10e      	bne.n	80082ca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80082ac:	f7fd ff80 	bl	80061b0 <enq_lock>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d006      	beq.n	80082c4 <f_open+0xc8>
 80082b6:	f107 0318 	add.w	r3, r7, #24
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff f8dc 	bl	8007478 <dir_register>
 80082c0:	4603      	mov	r3, r0
 80082c2:	e000      	b.n	80082c6 <f_open+0xca>
 80082c4:	2312      	movs	r3, #18
 80082c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80082ca:	79fb      	ldrb	r3, [r7, #7]
 80082cc:	f043 0308 	orr.w	r3, r3, #8
 80082d0:	71fb      	strb	r3, [r7, #7]
 80082d2:	e010      	b.n	80082f6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80082d4:	7fbb      	ldrb	r3, [r7, #30]
 80082d6:	f003 0311 	and.w	r3, r3, #17
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <f_open+0xea>
					res = FR_DENIED;
 80082de:	2307      	movs	r3, #7
 80082e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80082e4:	e007      	b.n	80082f6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80082e6:	79fb      	ldrb	r3, [r7, #7]
 80082e8:	f003 0304 	and.w	r3, r3, #4
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <f_open+0xfa>
 80082f0:	2308      	movs	r3, #8
 80082f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80082f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d168      	bne.n	80083d0 <f_open+0x1d4>
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	f003 0308 	and.w	r3, r3, #8
 8008304:	2b00      	cmp	r3, #0
 8008306:	d063      	beq.n	80083d0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008308:	f7fd fcfa 	bl	8005d00 <get_fattime>
 800830c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800830e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008310:	330e      	adds	r3, #14
 8008312:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008314:	4618      	mov	r0, r3
 8008316:	f7fd fe45 	bl	8005fa4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831c:	3316      	adds	r3, #22
 800831e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008320:	4618      	mov	r0, r3
 8008322:	f7fd fe3f 	bl	8005fa4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008328:	330b      	adds	r3, #11
 800832a:	2220      	movs	r2, #32
 800832c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008332:	4611      	mov	r1, r2
 8008334:	4618      	mov	r0, r3
 8008336:	f7fe fe17 	bl	8006f68 <ld_clust>
 800833a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008340:	2200      	movs	r2, #0
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe fe2f 	bl	8006fa6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834a:	331c      	adds	r3, #28
 800834c:	2100      	movs	r1, #0
 800834e:	4618      	mov	r0, r3
 8008350:	f7fd fe28 	bl	8005fa4 <st_dword>
					fs->wflag = 1;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2201      	movs	r2, #1
 8008358:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800835a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800835c:	2b00      	cmp	r3, #0
 800835e:	d037      	beq.n	80083d0 <f_open+0x1d4>
						dw = fs->winsect;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008364:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8008366:	f107 0318 	add.w	r3, r7, #24
 800836a:	2200      	movs	r2, #0
 800836c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe fb1f 	bl	80069b2 <remove_chain>
 8008374:	4603      	mov	r3, r0
 8008376:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800837a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800837e:	2b00      	cmp	r3, #0
 8008380:	d126      	bne.n	80083d0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008386:	4618      	mov	r0, r3
 8008388:	f7fe f866 	bl	8006458 <move_window>
 800838c:	4603      	mov	r3, r0
 800838e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008396:	3a01      	subs	r2, #1
 8008398:	615a      	str	r2, [r3, #20]
 800839a:	e019      	b.n	80083d0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800839c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d115      	bne.n	80083d0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80083a4:	7fbb      	ldrb	r3, [r7, #30]
 80083a6:	f003 0310 	and.w	r3, r3, #16
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80083ae:	2304      	movs	r3, #4
 80083b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80083b4:	e00c      	b.n	80083d0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d007      	beq.n	80083d0 <f_open+0x1d4>
 80083c0:	7fbb      	ldrb	r3, [r7, #30]
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <f_open+0x1d4>
						res = FR_DENIED;
 80083ca:	2307      	movs	r3, #7
 80083cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80083d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d128      	bne.n	800842a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	f003 0308 	and.w	r3, r3, #8
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80083e2:	79fb      	ldrb	r3, [r7, #7]
 80083e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80083f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80083f8:	79fb      	ldrb	r3, [r7, #7]
 80083fa:	f023 0301 	bic.w	r3, r3, #1
 80083fe:	2b00      	cmp	r3, #0
 8008400:	bf14      	ite	ne
 8008402:	2301      	movne	r3, #1
 8008404:	2300      	moveq	r3, #0
 8008406:	b2db      	uxtb	r3, r3
 8008408:	461a      	mov	r2, r3
 800840a:	f107 0318 	add.w	r3, r7, #24
 800840e:	4611      	mov	r1, r2
 8008410:	4618      	mov	r0, r3
 8008412:	f7fd feef 	bl	80061f4 <inc_lock>
 8008416:	4602      	mov	r2, r0
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <f_open+0x22e>
 8008424:	2302      	movs	r3, #2
 8008426:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800842a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800842e:	2b00      	cmp	r3, #0
 8008430:	f040 80a3 	bne.w	800857a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008438:	4611      	mov	r1, r2
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe fd94 	bl	8006f68 <ld_clust>
 8008440:	4602      	mov	r2, r0
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	331c      	adds	r3, #28
 800844a:	4618      	mov	r0, r3
 800844c:	f7fd fd6c 	bl	8005f28 <ld_dword>
 8008450:	4602      	mov	r2, r0
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	88da      	ldrh	r2, [r3, #6]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	79fa      	ldrb	r2, [r7, #7]
 800846e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	3330      	adds	r3, #48	; 0x30
 8008486:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800848a:	2100      	movs	r1, #0
 800848c:	4618      	mov	r0, r3
 800848e:	f7fd fdd6 	bl	800603e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008492:	79fb      	ldrb	r3, [r7, #7]
 8008494:	f003 0320 	and.w	r3, r3, #32
 8008498:	2b00      	cmp	r3, #0
 800849a:	d06e      	beq.n	800857a <f_open+0x37e>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d06a      	beq.n	800857a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	68da      	ldr	r2, [r3, #12]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	895b      	ldrh	r3, [r3, #10]
 80084b0:	461a      	mov	r2, r3
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	899b      	ldrh	r3, [r3, #12]
 80084b6:	fb02 f303 	mul.w	r3, r2, r3
 80084ba:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084c8:	e016      	b.n	80084f8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fe f87f 	bl	80065d2 <get_fat>
 80084d4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80084d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d802      	bhi.n	80084e2 <f_open+0x2e6>
 80084dc:	2302      	movs	r3, #2
 80084de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80084e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e8:	d102      	bne.n	80084f0 <f_open+0x2f4>
 80084ea:	2301      	movs	r3, #1
 80084ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80084f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d103      	bne.n	8008508 <f_open+0x30c>
 8008500:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008504:	429a      	cmp	r2, r3
 8008506:	d8e0      	bhi.n	80084ca <f_open+0x2ce>
				}
				fp->clust = clst;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800850c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800850e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008512:	2b00      	cmp	r3, #0
 8008514:	d131      	bne.n	800857a <f_open+0x37e>
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	899b      	ldrh	r3, [r3, #12]
 800851a:	461a      	mov	r2, r3
 800851c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800851e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008522:	fb01 f202 	mul.w	r2, r1, r2
 8008526:	1a9b      	subs	r3, r3, r2
 8008528:	2b00      	cmp	r3, #0
 800852a:	d026      	beq.n	800857a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008530:	4618      	mov	r0, r3
 8008532:	f7fe f82f 	bl	8006594 <clust2sect>
 8008536:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800853a:	2b00      	cmp	r3, #0
 800853c:	d103      	bne.n	8008546 <f_open+0x34a>
						res = FR_INT_ERR;
 800853e:	2302      	movs	r3, #2
 8008540:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008544:	e019      	b.n	800857a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	899b      	ldrh	r3, [r3, #12]
 800854a:	461a      	mov	r2, r3
 800854c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800854e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008554:	441a      	add	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	7858      	ldrb	r0, [r3, #1]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6a1a      	ldr	r2, [r3, #32]
 8008568:	2301      	movs	r3, #1
 800856a:	f7fd fc67 	bl	8005e3c <disk_read>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d002      	beq.n	800857a <f_open+0x37e>
 8008574:	2301      	movs	r3, #1
 8008576:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800857a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <f_open+0x38c>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008588:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800858c:	4618      	mov	r0, r3
 800858e:	3768      	adds	r7, #104	; 0x68
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08e      	sub	sp, #56	; 0x38
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
 80085a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2200      	movs	r2, #0
 80085aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f107 0214 	add.w	r2, r7, #20
 80085b2:	4611      	mov	r1, r2
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7ff fda5 	bl	8008104 <validate>
 80085ba:	4603      	mov	r3, r0
 80085bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80085c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d107      	bne.n	80085d8 <f_read+0x44>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	7d5b      	ldrb	r3, [r3, #21]
 80085cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80085d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <f_read+0x4a>
 80085d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085dc:	e135      	b.n	800884a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	7d1b      	ldrb	r3, [r3, #20]
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d101      	bne.n	80085ee <f_read+0x5a>
 80085ea:	2307      	movs	r3, #7
 80085ec:	e12d      	b.n	800884a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	429a      	cmp	r2, r3
 8008600:	f240 811e 	bls.w	8008840 <f_read+0x2ac>
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008608:	e11a      	b.n	8008840 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	8992      	ldrh	r2, [r2, #12]
 8008612:	fbb3 f1f2 	udiv	r1, r3, r2
 8008616:	fb01 f202 	mul.w	r2, r1, r2
 800861a:	1a9b      	subs	r3, r3, r2
 800861c:	2b00      	cmp	r3, #0
 800861e:	f040 80d5 	bne.w	80087cc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	8992      	ldrh	r2, [r2, #12]
 800862a:	fbb3 f3f2 	udiv	r3, r3, r2
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	8952      	ldrh	r2, [r2, #10]
 8008632:	3a01      	subs	r2, #1
 8008634:	4013      	ands	r3, r2
 8008636:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d12f      	bne.n	800869e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d103      	bne.n	800864e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	633b      	str	r3, [r7, #48]	; 0x30
 800864c:	e013      	b.n	8008676 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008652:	2b00      	cmp	r3, #0
 8008654:	d007      	beq.n	8008666 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	4619      	mov	r1, r3
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f7fe faa5 	bl	8006bac <clmt_clust>
 8008662:	6338      	str	r0, [r7, #48]	; 0x30
 8008664:	e007      	b.n	8008676 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	4619      	mov	r1, r3
 800866e:	4610      	mov	r0, r2
 8008670:	f7fd ffaf 	bl	80065d2 <get_fat>
 8008674:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	2b01      	cmp	r3, #1
 800867a:	d804      	bhi.n	8008686 <f_read+0xf2>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2202      	movs	r2, #2
 8008680:	755a      	strb	r2, [r3, #21]
 8008682:	2302      	movs	r3, #2
 8008684:	e0e1      	b.n	800884a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868c:	d104      	bne.n	8008698 <f_read+0x104>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2201      	movs	r2, #1
 8008692:	755a      	strb	r2, [r3, #21]
 8008694:	2301      	movs	r3, #1
 8008696:	e0d8      	b.n	800884a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800869c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	69db      	ldr	r3, [r3, #28]
 80086a4:	4619      	mov	r1, r3
 80086a6:	4610      	mov	r0, r2
 80086a8:	f7fd ff74 	bl	8006594 <clust2sect>
 80086ac:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d104      	bne.n	80086be <f_read+0x12a>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2202      	movs	r2, #2
 80086b8:	755a      	strb	r2, [r3, #21]
 80086ba:	2302      	movs	r3, #2
 80086bc:	e0c5      	b.n	800884a <f_read+0x2b6>
			sect += csect;
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	4413      	add	r3, r2
 80086c4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	899b      	ldrh	r3, [r3, #12]
 80086ca:	461a      	mov	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80086d2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d041      	beq.n	800875e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80086da:	69fa      	ldr	r2, [r7, #28]
 80086dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086de:	4413      	add	r3, r2
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	8952      	ldrh	r2, [r2, #10]
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d905      	bls.n	80086f4 <f_read+0x160>
					cc = fs->csize - csect;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	895b      	ldrh	r3, [r3, #10]
 80086ec:	461a      	mov	r2, r3
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	7858      	ldrb	r0, [r3, #1]
 80086f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086fe:	f7fd fb9d 	bl	8005e3c <disk_read>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d004      	beq.n	8008712 <f_read+0x17e>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	755a      	strb	r2, [r3, #21]
 800870e:	2301      	movs	r3, #1
 8008710:	e09b      	b.n	800884a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	7d1b      	ldrb	r3, [r3, #20]
 8008716:	b25b      	sxtb	r3, r3
 8008718:	2b00      	cmp	r3, #0
 800871a:	da18      	bge.n	800874e <f_read+0x1ba>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6a1a      	ldr	r2, [r3, #32]
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008726:	429a      	cmp	r2, r3
 8008728:	d911      	bls.n	800874e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6a1a      	ldr	r2, [r3, #32]
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	8992      	ldrh	r2, [r2, #12]
 8008736:	fb02 f303 	mul.w	r3, r2, r3
 800873a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873c:	18d0      	adds	r0, r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	899b      	ldrh	r3, [r3, #12]
 8008748:	461a      	mov	r2, r3
 800874a:	f7fd fc57 	bl	8005ffc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	899b      	ldrh	r3, [r3, #12]
 8008752:	461a      	mov	r2, r3
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	fb02 f303 	mul.w	r3, r2, r3
 800875a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800875c:	e05c      	b.n	8008818 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	429a      	cmp	r2, r3
 8008766:	d02e      	beq.n	80087c6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	7d1b      	ldrb	r3, [r3, #20]
 800876c:	b25b      	sxtb	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	da18      	bge.n	80087a4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	7858      	ldrb	r0, [r3, #1]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6a1a      	ldr	r2, [r3, #32]
 8008780:	2301      	movs	r3, #1
 8008782:	f7fd fb7b 	bl	8005e7c <disk_write>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d004      	beq.n	8008796 <f_read+0x202>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2201      	movs	r2, #1
 8008790:	755a      	strb	r2, [r3, #21]
 8008792:	2301      	movs	r3, #1
 8008794:	e059      	b.n	800884a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	7d1b      	ldrb	r3, [r3, #20]
 800879a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	7858      	ldrb	r0, [r3, #1]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087ae:	2301      	movs	r3, #1
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	f7fd fb43 	bl	8005e3c <disk_read>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d004      	beq.n	80087c6 <f_read+0x232>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2201      	movs	r2, #1
 80087c0:	755a      	strb	r2, [r3, #21]
 80087c2:	2301      	movs	r3, #1
 80087c4:	e041      	b.n	800884a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	899b      	ldrh	r3, [r3, #12]
 80087d0:	4618      	mov	r0, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	8992      	ldrh	r2, [r2, #12]
 80087da:	fbb3 f1f2 	udiv	r1, r3, r2
 80087de:	fb01 f202 	mul.w	r2, r1, r2
 80087e2:	1a9b      	subs	r3, r3, r2
 80087e4:	1ac3      	subs	r3, r0, r3
 80087e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80087e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d901      	bls.n	80087f4 <f_read+0x260>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	8992      	ldrh	r2, [r2, #12]
 8008802:	fbb3 f0f2 	udiv	r0, r3, r2
 8008806:	fb00 f202 	mul.w	r2, r0, r2
 800880a:	1a9b      	subs	r3, r3, r2
 800880c:	440b      	add	r3, r1
 800880e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008810:	4619      	mov	r1, r3
 8008812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008814:	f7fd fbf2 	bl	8005ffc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881c:	4413      	add	r3, r2
 800881e:	627b      	str	r3, [r7, #36]	; 0x24
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	699a      	ldr	r2, [r3, #24]
 8008824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008826:	441a      	add	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	619a      	str	r2, [r3, #24]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008832:	441a      	add	r2, r3
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	f47f aee1 	bne.w	800860a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3738      	adds	r7, #56	; 0x38
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b08c      	sub	sp, #48	; 0x30
 8008856:	af00      	add	r7, sp, #0
 8008858:	60f8      	str	r0, [r7, #12]
 800885a:	60b9      	str	r1, [r7, #8]
 800885c:	607a      	str	r2, [r7, #4]
 800885e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2200      	movs	r2, #0
 8008868:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f107 0210 	add.w	r2, r7, #16
 8008870:	4611      	mov	r1, r2
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff fc46 	bl	8008104 <validate>
 8008878:	4603      	mov	r3, r0
 800887a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800887e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008882:	2b00      	cmp	r3, #0
 8008884:	d107      	bne.n	8008896 <f_write+0x44>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	7d5b      	ldrb	r3, [r3, #21]
 800888a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800888e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008892:	2b00      	cmp	r3, #0
 8008894:	d002      	beq.n	800889c <f_write+0x4a>
 8008896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800889a:	e16a      	b.n	8008b72 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	7d1b      	ldrb	r3, [r3, #20]
 80088a0:	f003 0302 	and.w	r3, r3, #2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <f_write+0x5a>
 80088a8:	2307      	movs	r3, #7
 80088aa:	e162      	b.n	8008b72 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	699a      	ldr	r2, [r3, #24]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	441a      	add	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	f080 814c 	bcs.w	8008b56 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	43db      	mvns	r3, r3
 80088c4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80088c6:	e146      	b.n	8008b56 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	8992      	ldrh	r2, [r2, #12]
 80088d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80088d4:	fb01 f202 	mul.w	r2, r1, r2
 80088d8:	1a9b      	subs	r3, r3, r2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f040 80f1 	bne.w	8008ac2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	8992      	ldrh	r2, [r2, #12]
 80088e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	8952      	ldrh	r2, [r2, #10]
 80088f0:	3a01      	subs	r2, #1
 80088f2:	4013      	ands	r3, r2
 80088f4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d143      	bne.n	8008984 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10c      	bne.n	800891e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	2b00      	cmp	r3, #0
 800890e:	d11a      	bne.n	8008946 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2100      	movs	r1, #0
 8008914:	4618      	mov	r0, r3
 8008916:	f7fe f8b1 	bl	8006a7c <create_chain>
 800891a:	62b8      	str	r0, [r7, #40]	; 0x28
 800891c:	e013      	b.n	8008946 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d007      	beq.n	8008936 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	4619      	mov	r1, r3
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f7fe f93d 	bl	8006bac <clmt_clust>
 8008932:	62b8      	str	r0, [r7, #40]	; 0x28
 8008934:	e007      	b.n	8008946 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	4619      	mov	r1, r3
 800893e:	4610      	mov	r0, r2
 8008940:	f7fe f89c 	bl	8006a7c <create_chain>
 8008944:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	2b00      	cmp	r3, #0
 800894a:	f000 8109 	beq.w	8008b60 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800894e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008950:	2b01      	cmp	r3, #1
 8008952:	d104      	bne.n	800895e <f_write+0x10c>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2202      	movs	r2, #2
 8008958:	755a      	strb	r2, [r3, #21]
 800895a:	2302      	movs	r3, #2
 800895c:	e109      	b.n	8008b72 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800895e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008964:	d104      	bne.n	8008970 <f_write+0x11e>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2201      	movs	r2, #1
 800896a:	755a      	strb	r2, [r3, #21]
 800896c:	2301      	movs	r3, #1
 800896e:	e100      	b.n	8008b72 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008974:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d102      	bne.n	8008984 <f_write+0x132>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008982:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	7d1b      	ldrb	r3, [r3, #20]
 8008988:	b25b      	sxtb	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	da18      	bge.n	80089c0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	7858      	ldrb	r0, [r3, #1]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6a1a      	ldr	r2, [r3, #32]
 800899c:	2301      	movs	r3, #1
 800899e:	f7fd fa6d 	bl	8005e7c <disk_write>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d004      	beq.n	80089b2 <f_write+0x160>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2201      	movs	r2, #1
 80089ac:	755a      	strb	r2, [r3, #21]
 80089ae:	2301      	movs	r3, #1
 80089b0:	e0df      	b.n	8008b72 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	7d1b      	ldrb	r3, [r3, #20]
 80089b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	4619      	mov	r1, r3
 80089c8:	4610      	mov	r0, r2
 80089ca:	f7fd fde3 	bl	8006594 <clust2sect>
 80089ce:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d104      	bne.n	80089e0 <f_write+0x18e>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2202      	movs	r2, #2
 80089da:	755a      	strb	r2, [r3, #21]
 80089dc:	2302      	movs	r3, #2
 80089de:	e0c8      	b.n	8008b72 <f_write+0x320>
			sect += csect;
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	4413      	add	r3, r2
 80089e6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	899b      	ldrh	r3, [r3, #12]
 80089ec:	461a      	mov	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80089f4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d043      	beq.n	8008a84 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	4413      	add	r3, r2
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	8952      	ldrh	r2, [r2, #10]
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d905      	bls.n	8008a16 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	895b      	ldrh	r3, [r3, #10]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	7858      	ldrb	r0, [r3, #1]
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	69f9      	ldr	r1, [r7, #28]
 8008a20:	f7fd fa2c 	bl	8005e7c <disk_write>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d004      	beq.n	8008a34 <f_write+0x1e2>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	755a      	strb	r2, [r3, #21]
 8008a30:	2301      	movs	r3, #1
 8008a32:	e09e      	b.n	8008b72 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6a1a      	ldr	r2, [r3, #32]
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	6a3a      	ldr	r2, [r7, #32]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d918      	bls.n	8008a74 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a1a      	ldr	r2, [r3, #32]
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	8992      	ldrh	r2, [r2, #12]
 8008a54:	fb02 f303 	mul.w	r3, r2, r3
 8008a58:	69fa      	ldr	r2, [r7, #28]
 8008a5a:	18d1      	adds	r1, r2, r3
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	899b      	ldrh	r3, [r3, #12]
 8008a60:	461a      	mov	r2, r3
 8008a62:	f7fd facb 	bl	8005ffc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	7d1b      	ldrb	r3, [r3, #20]
 8008a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	899b      	ldrh	r3, [r3, #12]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	fb02 f303 	mul.w	r3, r2, r3
 8008a80:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008a82:	e04b      	b.n	8008b1c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6a1b      	ldr	r3, [r3, #32]
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d016      	beq.n	8008abc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	699a      	ldr	r2, [r3, #24]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d210      	bcs.n	8008abc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	7858      	ldrb	r0, [r3, #1]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	f7fd f9c8 	bl	8005e3c <disk_read>
 8008aac:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d004      	beq.n	8008abc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	755a      	strb	r2, [r3, #21]
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e05a      	b.n	8008b72 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	899b      	ldrh	r3, [r3, #12]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	8992      	ldrh	r2, [r2, #12]
 8008ad0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ad4:	fb01 f202 	mul.w	r2, r1, r2
 8008ad8:	1a9b      	subs	r3, r3, r2
 8008ada:	1ac3      	subs	r3, r0, r3
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d901      	bls.n	8008aea <f_write+0x298>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	8992      	ldrh	r2, [r2, #12]
 8008af8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008afc:	fb00 f202 	mul.w	r2, r0, r2
 8008b00:	1a9b      	subs	r3, r3, r2
 8008b02:	440b      	add	r3, r1
 8008b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b06:	69f9      	ldr	r1, [r7, #28]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7fd fa77 	bl	8005ffc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	7d1b      	ldrb	r3, [r3, #20]
 8008b12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008b1c:	69fa      	ldr	r2, [r7, #28]
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	4413      	add	r3, r2
 8008b22:	61fb      	str	r3, [r7, #28]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	699a      	ldr	r2, [r3, #24]
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	441a      	add	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	619a      	str	r2, [r3, #24]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	bf38      	it	cc
 8008b3c:	461a      	movcc	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	60da      	str	r2, [r3, #12]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	441a      	add	r2, r3
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f47f aeb5 	bne.w	80088c8 <f_write+0x76>
 8008b5e:	e000      	b.n	8008b62 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b60:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	7d1b      	ldrb	r3, [r3, #20]
 8008b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3730      	adds	r7, #48	; 0x30
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b086      	sub	sp, #24
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f107 0208 	add.w	r2, r7, #8
 8008b88:	4611      	mov	r1, r2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7ff faba 	bl	8008104 <validate>
 8008b90:	4603      	mov	r3, r0
 8008b92:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b94:	7dfb      	ldrb	r3, [r7, #23]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d168      	bne.n	8008c6c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	7d1b      	ldrb	r3, [r3, #20]
 8008b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d062      	beq.n	8008c6c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	7d1b      	ldrb	r3, [r3, #20]
 8008baa:	b25b      	sxtb	r3, r3
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	da15      	bge.n	8008bdc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	7858      	ldrb	r0, [r3, #1]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1a      	ldr	r2, [r3, #32]
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f7fd f95c 	bl	8005e7c <disk_write>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <f_sync+0x54>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e04f      	b.n	8008c6e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	7d1b      	ldrb	r3, [r3, #20]
 8008bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008bdc:	f7fd f890 	bl	8005d00 <get_fattime>
 8008be0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	4619      	mov	r1, r3
 8008bea:	4610      	mov	r0, r2
 8008bec:	f7fd fc34 	bl	8006458 <move_window>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d138      	bne.n	8008c6c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	330b      	adds	r3, #11
 8008c04:	781a      	ldrb	r2, [r3, #0]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	330b      	adds	r3, #11
 8008c0a:	f042 0220 	orr.w	r2, r2, #32
 8008c0e:	b2d2      	uxtb	r2, r2
 8008c10:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6818      	ldr	r0, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	68f9      	ldr	r1, [r7, #12]
 8008c1e:	f7fe f9c2 	bl	8006fa6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f103 021c 	add.w	r2, r3, #28
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4610      	mov	r0, r2
 8008c30:	f7fd f9b8 	bl	8005fa4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	3316      	adds	r3, #22
 8008c38:	6939      	ldr	r1, [r7, #16]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fd f9b2 	bl	8005fa4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3312      	adds	r3, #18
 8008c44:	2100      	movs	r1, #0
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fd f991 	bl	8005f6e <st_word>
					fs->wflag = 1;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7fd fc2d 	bl	80064b4 <sync_fs>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	7d1b      	ldrb	r3, [r3, #20]
 8008c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff ff7b 	bl	8008b7a <f_sync>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d118      	bne.n	8008cc0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f107 0208 	add.w	r2, r7, #8
 8008c94:	4611      	mov	r1, r2
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff fa34 	bl	8008104 <validate>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10c      	bne.n	8008cc0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fd fb30 	bl	8006310 <dec_lock>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d102      	bne.n	8008cc0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b092      	sub	sp, #72	; 0x48
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	60f8      	str	r0, [r7, #12]
 8008cd2:	60b9      	str	r1, [r7, #8]
 8008cd4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008cd6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008cda:	f107 030c 	add.w	r3, r7, #12
 8008cde:	2200      	movs	r2, #0
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe ff89 	bl	8007bf8 <find_volume>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008cec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f040 8099 	bne.w	8008e28 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	699a      	ldr	r2, [r3, #24]
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	69db      	ldr	r3, [r3, #28]
 8008d04:	3b02      	subs	r3, #2
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d804      	bhi.n	8008d14 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	699a      	ldr	r2, [r3, #24]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	e089      	b.n	8008e28 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d128      	bne.n	8008d72 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008d20:	2302      	movs	r3, #2
 8008d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008d28:	f107 0314 	add.w	r3, r7, #20
 8008d2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fd fc4f 	bl	80065d2 <get_fat>
 8008d34:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3c:	d103      	bne.n	8008d46 <f_getfree+0x7c>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d44:	e063      	b.n	8008e0e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d103      	bne.n	8008d54 <f_getfree+0x8a>
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d52:	e05c      	b.n	8008e0e <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d102      	bne.n	8008d60 <f_getfree+0x96>
 8008d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d62:	3301      	adds	r3, #1
 8008d64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d3db      	bcc.n	8008d28 <f_getfree+0x5e>
 8008d70:	e04d      	b.n	8008e0e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	637b      	str	r3, [r7, #52]	; 0x34
 8008d82:	2300      	movs	r3, #0
 8008d84:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d113      	bne.n	8008db4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d90:	1c5a      	adds	r2, r3, #1
 8008d92:	63ba      	str	r2, [r7, #56]	; 0x38
 8008d94:	4619      	mov	r1, r3
 8008d96:	f7fd fb5f 	bl	8006458 <move_window>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008da0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d131      	bne.n	8008e0c <f_getfree+0x142>
							p = fs->win;
 8008da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008daa:	3338      	adds	r3, #56	; 0x38
 8008dac:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8008dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db0:	899b      	ldrh	r3, [r3, #12]
 8008db2:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d10f      	bne.n	8008ddc <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dbe:	f7fd f89b 	bl	8005ef8 <ld_word>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d102      	bne.n	8008dce <f_getfree+0x104>
 8008dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dca:	3301      	adds	r3, #1
 8008dcc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	3302      	adds	r3, #2
 8008dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8008dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd6:	3b02      	subs	r3, #2
 8008dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8008dda:	e010      	b.n	8008dfe <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dde:	f7fd f8a3 	bl	8005f28 <ld_dword>
 8008de2:	4603      	mov	r3, r0
 8008de4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d102      	bne.n	8008df2 <f_getfree+0x128>
 8008dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dee:	3301      	adds	r3, #1
 8008df0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df4:	3304      	adds	r3, #4
 8008df6:	633b      	str	r3, [r7, #48]	; 0x30
 8008df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfa:	3b04      	subs	r3, #4
 8008dfc:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e00:	3b01      	subs	r3, #1
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1bd      	bne.n	8008d86 <f_getfree+0xbc>
 8008e0a:	e000      	b.n	8008e0e <f_getfree+0x144>
							if (res != FR_OK) break;
 8008e0c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e12:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e18:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1c:	791a      	ldrb	r2, [r3, #4]
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	f042 0201 	orr.w	r2, r2, #1
 8008e24:	b2d2      	uxtb	r2, r2
 8008e26:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008e28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3748      	adds	r7, #72	; 0x48
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008e40:	2300      	movs	r3, #0
 8008e42:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008e48:	e01b      	b.n	8008e82 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008e4a:	f107 0310 	add.w	r3, r7, #16
 8008e4e:	f107 0114 	add.w	r1, r7, #20
 8008e52:	2201      	movs	r2, #1
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff fb9d 	bl	8008594 <f_read>
		if (rc != 1) break;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d116      	bne.n	8008e8e <f_gets+0x5a>
		c = s[0];
 8008e60:	7d3b      	ldrb	r3, [r7, #20]
 8008e62:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	2b0d      	cmp	r3, #13
 8008e68:	d100      	bne.n	8008e6c <f_gets+0x38>
 8008e6a:	e00a      	b.n	8008e82 <f_gets+0x4e>
		*p++ = c;
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	1c5a      	adds	r2, r3, #1
 8008e70:	61ba      	str	r2, [r7, #24]
 8008e72:	7dfa      	ldrb	r2, [r7, #23]
 8008e74:	701a      	strb	r2, [r3, #0]
		n++;
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	2b0a      	cmp	r3, #10
 8008e80:	d007      	beq.n	8008e92 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	69fa      	ldr	r2, [r7, #28]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	dbde      	blt.n	8008e4a <f_gets+0x16>
 8008e8c:	e002      	b.n	8008e94 <f_gets+0x60>
		if (rc != 1) break;
 8008e8e:	bf00      	nop
 8008e90:	e000      	b.n	8008e94 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008e92:	bf00      	nop
	}
	*p = 0;
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	2200      	movs	r2, #0
 8008e98:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <f_gets+0x70>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	e000      	b.n	8008ea6 <f_gets+0x72>
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3720      	adds	r7, #32
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	2b0a      	cmp	r3, #10
 8008ebe:	d103      	bne.n	8008ec8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008ec0:	210d      	movs	r1, #13
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff fff3 	bl	8008eae <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	db25      	blt.n	8008f20 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	60fa      	str	r2, [r7, #12]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	4413      	add	r3, r2
 8008ede:	78fa      	ldrb	r2, [r7, #3]
 8008ee0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b3c      	cmp	r3, #60	; 0x3c
 8008ee6:	dd12      	ble.n	8008f0e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6818      	ldr	r0, [r3, #0]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f103 010c 	add.w	r1, r3, #12
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	f107 0308 	add.w	r3, r7, #8
 8008ef8:	f7ff fcab 	bl	8008852 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d101      	bne.n	8008f08 <putc_bfd+0x5a>
 8008f04:	2300      	movs	r3, #0
 8008f06:	e001      	b.n	8008f0c <putc_bfd+0x5e>
 8008f08:	f04f 33ff 	mov.w	r3, #4294967295
 8008f0c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	1c5a      	adds	r2, r3, #1
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	609a      	str	r2, [r3, #8]
 8008f1e:	e000      	b.n	8008f22 <putc_bfd+0x74>
	if (i < 0) return;
 8008f20:	bf00      	nop
}
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	db16      	blt.n	8008f66 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6818      	ldr	r0, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f103 010c 	add.w	r1, r3, #12
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	461a      	mov	r2, r3
 8008f48:	f107 030c 	add.w	r3, r7, #12
 8008f4c:	f7ff fc81 	bl	8008852 <f_write>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d107      	bne.n	8008f66 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d102      	bne.n	8008f66 <putc_flush+0x3e>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	e001      	b.n	8008f6a <putc_flush+0x42>
	return EOF;
 8008f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	605a      	str	r2, [r3, #4]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	609a      	str	r2, [r3, #8]
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b096      	sub	sp, #88	; 0x58
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008fa6:	f107 030c 	add.w	r3, r7, #12
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7ff ffe0 	bl	8008f72 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008fb2:	e009      	b.n	8008fc8 <f_puts+0x2c>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	607a      	str	r2, [r7, #4]
 8008fba:	781a      	ldrb	r2, [r3, #0]
 8008fbc:	f107 030c 	add.w	r3, r7, #12
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7ff ff73 	bl	8008eae <putc_bfd>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1f1      	bne.n	8008fb4 <f_puts+0x18>
	return putc_flush(&pb);
 8008fd0:	f107 030c 	add.w	r3, r7, #12
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7ff ffa7 	bl	8008f28 <putc_flush>
 8008fda:	4603      	mov	r3, r0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3758      	adds	r7, #88	; 0x58
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <FATFS_LinkDriverEx>:
=======
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	603a      	str	r2, [r7, #0]
 8007782:	71fb      	strb	r3, [r7, #7]
 8007784:	460b      	mov	r3, r1
 8007786:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8007788:	79b9      	ldrb	r1, [r7, #6]
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	4618      	mov	r0, r3
 8007790:	f7f9 fdfe 	bl	8001390 <SD_disk_ioctl>
 8007794:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <FATFS_LinkDriverEx>:
>>>>>>> Stashed changes
=======
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	603a      	str	r2, [r7, #0]
 80075ca:	71fb      	strb	r3, [r7, #7]
 80075cc:	460b      	mov	r3, r1
 80075ce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80075d0:	79b9      	ldrb	r1, [r7, #6]
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7f9 feda 	bl	8001390 <SD_disk_ioctl>
 80075dc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <FATFS_LinkDriverEx>:
>>>>>>> Stashed changes
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8008fe4:	b480      	push	{r7}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008ffa:	4b1f      	ldr	r3, [pc, #124]	; (8009078 <FATFS_LinkDriverEx+0x94>)
 8008ffc:	7a5b      	ldrb	r3, [r3, #9]
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b00      	cmp	r3, #0
 8009002:	d131      	bne.n	8009068 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009004:	4b1c      	ldr	r3, [pc, #112]	; (8009078 <FATFS_LinkDriverEx+0x94>)
 8009006:	7a5b      	ldrb	r3, [r3, #9]
 8009008:	b2db      	uxtb	r3, r3
 800900a:	461a      	mov	r2, r3
 800900c:	4b1a      	ldr	r3, [pc, #104]	; (8009078 <FATFS_LinkDriverEx+0x94>)
 800900e:	2100      	movs	r1, #0
 8009010:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009012:	4b19      	ldr	r3, [pc, #100]	; (8009078 <FATFS_LinkDriverEx+0x94>)
 8009014:	7a5b      	ldrb	r3, [r3, #9]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	4a17      	ldr	r2, [pc, #92]	; (8009078 <FATFS_LinkDriverEx+0x94>)
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4413      	add	r3, r2
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009022:	4b15      	ldr	r3, [pc, #84]	; (8009078 <FATFS_LinkDriverEx+0x94>)
 8009024:	7a5b      	ldrb	r3, [r3, #9]
 8009026:	b2db      	uxtb	r3, r3
 8009028:	461a      	mov	r2, r3
 800902a:	4b13      	ldr	r3, [pc, #76]	; (8009078 <FATFS_LinkDriverEx+0x94>)
 800902c:	4413      	add	r3, r2
 800902e:	79fa      	ldrb	r2, [r7, #7]
 8009030:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009032:	4b11      	ldr	r3, [pc, #68]	; (8009078 <FATFS_LinkDriverEx+0x94>)
 8009034:	7a5b      	ldrb	r3, [r3, #9]
 8009036:	b2db      	uxtb	r3, r3
 8009038:	1c5a      	adds	r2, r3, #1
 800903a:	b2d1      	uxtb	r1, r2
 800903c:	4a0e      	ldr	r2, [pc, #56]	; (8009078 <FATFS_LinkDriverEx+0x94>)
 800903e:	7251      	strb	r1, [r2, #9]
 8009040:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009042:	7dbb      	ldrb	r3, [r7, #22]
 8009044:	3330      	adds	r3, #48	; 0x30
 8009046:	b2da      	uxtb	r2, r3
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	3301      	adds	r3, #1
 8009050:	223a      	movs	r2, #58	; 0x3a
 8009052:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	3302      	adds	r3, #2
 8009058:	222f      	movs	r2, #47	; 0x2f
 800905a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	3303      	adds	r3, #3
 8009060:	2200      	movs	r2, #0
 8009062:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009068:	7dfb      	ldrb	r3, [r7, #23]
}
 800906a:	4618      	mov	r0, r3
 800906c:	371c      	adds	r7, #28
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	20002a3c 	.word	0x20002a3c

0800907c <FATFS_LinkDriver>:
=======
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	4613      	mov	r3, r2
 80077ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80077ae:	2301      	movs	r3, #1
 80077b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80077b6:	4b1f      	ldr	r3, [pc, #124]	; (8007834 <FATFS_LinkDriverEx+0x94>)
 80077b8:	7a5b      	ldrb	r3, [r3, #9]
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d131      	bne.n	8007824 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80077c0:	4b1c      	ldr	r3, [pc, #112]	; (8007834 <FATFS_LinkDriverEx+0x94>)
 80077c2:	7a5b      	ldrb	r3, [r3, #9]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	461a      	mov	r2, r3
 80077c8:	4b1a      	ldr	r3, [pc, #104]	; (8007834 <FATFS_LinkDriverEx+0x94>)
 80077ca:	2100      	movs	r1, #0
 80077cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80077ce:	4b19      	ldr	r3, [pc, #100]	; (8007834 <FATFS_LinkDriverEx+0x94>)
 80077d0:	7a5b      	ldrb	r3, [r3, #9]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	4a17      	ldr	r2, [pc, #92]	; (8007834 <FATFS_LinkDriverEx+0x94>)
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80077de:	4b15      	ldr	r3, [pc, #84]	; (8007834 <FATFS_LinkDriverEx+0x94>)
 80077e0:	7a5b      	ldrb	r3, [r3, #9]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	4b13      	ldr	r3, [pc, #76]	; (8007834 <FATFS_LinkDriverEx+0x94>)
 80077e8:	4413      	add	r3, r2
 80077ea:	79fa      	ldrb	r2, [r7, #7]
 80077ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80077ee:	4b11      	ldr	r3, [pc, #68]	; (8007834 <FATFS_LinkDriverEx+0x94>)
 80077f0:	7a5b      	ldrb	r3, [r3, #9]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	b2d1      	uxtb	r1, r2
 80077f8:	4a0e      	ldr	r2, [pc, #56]	; (8007834 <FATFS_LinkDriverEx+0x94>)
 80077fa:	7251      	strb	r1, [r2, #9]
 80077fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80077fe:	7dbb      	ldrb	r3, [r7, #22]
 8007800:	3330      	adds	r3, #48	; 0x30
 8007802:	b2da      	uxtb	r2, r3
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	3301      	adds	r3, #1
 800780c:	223a      	movs	r2, #58	; 0x3a
 800780e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	3302      	adds	r3, #2
 8007814:	222f      	movs	r2, #47	; 0x2f
 8007816:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	3303      	adds	r3, #3
 800781c:	2200      	movs	r2, #0
 800781e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007824:	7dfb      	ldrb	r3, [r7, #23]
}
 8007826:	4618      	mov	r0, r3
 8007828:	371c      	adds	r7, #28
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	20000890 	.word	0x20000890

08007838 <FATFS_LinkDriver>:
>>>>>>> Stashed changes
=======
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80075f6:	2301      	movs	r3, #1
 80075f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80075fe:	4b1f      	ldr	r3, [pc, #124]	; (800767c <FATFS_LinkDriverEx+0x94>)
 8007600:	7a5b      	ldrb	r3, [r3, #9]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d131      	bne.n	800766c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007608:	4b1c      	ldr	r3, [pc, #112]	; (800767c <FATFS_LinkDriverEx+0x94>)
 800760a:	7a5b      	ldrb	r3, [r3, #9]
 800760c:	b2db      	uxtb	r3, r3
 800760e:	461a      	mov	r2, r3
 8007610:	4b1a      	ldr	r3, [pc, #104]	; (800767c <FATFS_LinkDriverEx+0x94>)
 8007612:	2100      	movs	r1, #0
 8007614:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007616:	4b19      	ldr	r3, [pc, #100]	; (800767c <FATFS_LinkDriverEx+0x94>)
 8007618:	7a5b      	ldrb	r3, [r3, #9]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	4a17      	ldr	r2, [pc, #92]	; (800767c <FATFS_LinkDriverEx+0x94>)
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007626:	4b15      	ldr	r3, [pc, #84]	; (800767c <FATFS_LinkDriverEx+0x94>)
 8007628:	7a5b      	ldrb	r3, [r3, #9]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	461a      	mov	r2, r3
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <FATFS_LinkDriverEx+0x94>)
 8007630:	4413      	add	r3, r2
 8007632:	79fa      	ldrb	r2, [r7, #7]
 8007634:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007636:	4b11      	ldr	r3, [pc, #68]	; (800767c <FATFS_LinkDriverEx+0x94>)
 8007638:	7a5b      	ldrb	r3, [r3, #9]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	b2d1      	uxtb	r1, r2
 8007640:	4a0e      	ldr	r2, [pc, #56]	; (800767c <FATFS_LinkDriverEx+0x94>)
 8007642:	7251      	strb	r1, [r2, #9]
 8007644:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007646:	7dbb      	ldrb	r3, [r7, #22]
 8007648:	3330      	adds	r3, #48	; 0x30
 800764a:	b2da      	uxtb	r2, r3
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	3301      	adds	r3, #1
 8007654:	223a      	movs	r2, #58	; 0x3a
 8007656:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	3302      	adds	r3, #2
 800765c:	222f      	movs	r2, #47	; 0x2f
 800765e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	3303      	adds	r3, #3
 8007664:	2200      	movs	r2, #0
 8007666:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800766c:	7dfb      	ldrb	r3, [r7, #23]
}
 800766e:	4618      	mov	r0, r3
 8007670:	371c      	adds	r7, #28
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	200008d0 	.word	0x200008d0

08007680 <FATFS_LinkDriver>:
>>>>>>> Stashed changes
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009086:	2200      	movs	r2, #0
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7ff ffaa 	bl	8008fe4 <FATFS_LinkDriverEx>
 8009090:	4603      	mov	r3, r0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
	...

0800909c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	4603      	mov	r3, r0
 80090a4:	6039      	str	r1, [r7, #0]
 80090a6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80090a8:	88fb      	ldrh	r3, [r7, #6]
 80090aa:	2b7f      	cmp	r3, #127	; 0x7f
 80090ac:	d802      	bhi.n	80090b4 <ff_convert+0x18>
		c = chr;
 80090ae:	88fb      	ldrh	r3, [r7, #6]
 80090b0:	81fb      	strh	r3, [r7, #14]
 80090b2:	e025      	b.n	8009100 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00b      	beq.n	80090d2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80090ba:	88fb      	ldrh	r3, [r7, #6]
 80090bc:	2bff      	cmp	r3, #255	; 0xff
 80090be:	d805      	bhi.n	80090cc <ff_convert+0x30>
 80090c0:	88fb      	ldrh	r3, [r7, #6]
 80090c2:	3b80      	subs	r3, #128	; 0x80
 80090c4:	4a12      	ldr	r2, [pc, #72]	; (8009110 <ff_convert+0x74>)
 80090c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090ca:	e000      	b.n	80090ce <ff_convert+0x32>
 80090cc:	2300      	movs	r3, #0
 80090ce:	81fb      	strh	r3, [r7, #14]
 80090d0:	e016      	b.n	8009100 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80090d2:	2300      	movs	r3, #0
 80090d4:	81fb      	strh	r3, [r7, #14]
 80090d6:	e009      	b.n	80090ec <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80090d8:	89fb      	ldrh	r3, [r7, #14]
 80090da:	4a0d      	ldr	r2, [pc, #52]	; (8009110 <ff_convert+0x74>)
 80090dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090e0:	88fa      	ldrh	r2, [r7, #6]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d006      	beq.n	80090f4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80090e6:	89fb      	ldrh	r3, [r7, #14]
 80090e8:	3301      	adds	r3, #1
 80090ea:	81fb      	strh	r3, [r7, #14]
 80090ec:	89fb      	ldrh	r3, [r7, #14]
 80090ee:	2b7f      	cmp	r3, #127	; 0x7f
 80090f0:	d9f2      	bls.n	80090d8 <ff_convert+0x3c>
 80090f2:	e000      	b.n	80090f6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80090f4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80090f6:	89fb      	ldrh	r3, [r7, #14]
 80090f8:	3380      	adds	r3, #128	; 0x80
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009100:	89fb      	ldrh	r3, [r7, #14]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3714      	adds	r7, #20
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	0800945c 	.word	0x0800945c

08009114 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009114:	b480      	push	{r7}
 8009116:	b087      	sub	sp, #28
 8009118:	af00      	add	r7, sp, #0
 800911a:	4603      	mov	r3, r0
 800911c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800911e:	88fb      	ldrh	r3, [r7, #6]
 8009120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009124:	d201      	bcs.n	800912a <ff_wtoupper+0x16>
 8009126:	4b3e      	ldr	r3, [pc, #248]	; (8009220 <ff_wtoupper+0x10c>)
 8009128:	e000      	b.n	800912c <ff_wtoupper+0x18>
 800912a:	4b3e      	ldr	r3, [pc, #248]	; (8009224 <ff_wtoupper+0x110>)
 800912c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	1c9a      	adds	r2, r3, #2
 8009132:	617a      	str	r2, [r7, #20]
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009138:	8a7b      	ldrh	r3, [r7, #18]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d068      	beq.n	8009210 <ff_wtoupper+0xfc>
 800913e:	88fa      	ldrh	r2, [r7, #6]
 8009140:	8a7b      	ldrh	r3, [r7, #18]
 8009142:	429a      	cmp	r2, r3
 8009144:	d364      	bcc.n	8009210 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	1c9a      	adds	r2, r3, #2
 800914a:	617a      	str	r2, [r7, #20]
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	823b      	strh	r3, [r7, #16]
 8009150:	8a3b      	ldrh	r3, [r7, #16]
 8009152:	0a1b      	lsrs	r3, r3, #8
 8009154:	81fb      	strh	r3, [r7, #14]
 8009156:	8a3b      	ldrh	r3, [r7, #16]
 8009158:	b2db      	uxtb	r3, r3
 800915a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800915c:	88fa      	ldrh	r2, [r7, #6]
 800915e:	8a79      	ldrh	r1, [r7, #18]
 8009160:	8a3b      	ldrh	r3, [r7, #16]
 8009162:	440b      	add	r3, r1
 8009164:	429a      	cmp	r2, r3
 8009166:	da49      	bge.n	80091fc <ff_wtoupper+0xe8>
			switch (cmd) {
 8009168:	89fb      	ldrh	r3, [r7, #14]
 800916a:	2b08      	cmp	r3, #8
 800916c:	d84f      	bhi.n	800920e <ff_wtoupper+0xfa>
 800916e:	a201      	add	r2, pc, #4	; (adr r2, 8009174 <ff_wtoupper+0x60>)
 8009170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009174:	08009199 	.word	0x08009199
 8009178:	080091ab 	.word	0x080091ab
 800917c:	080091c1 	.word	0x080091c1
 8009180:	080091c9 	.word	0x080091c9
 8009184:	080091d1 	.word	0x080091d1
 8009188:	080091d9 	.word	0x080091d9
 800918c:	080091e1 	.word	0x080091e1
 8009190:	080091e9 	.word	0x080091e9
 8009194:	080091f1 	.word	0x080091f1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009198:	88fa      	ldrh	r2, [r7, #6]
 800919a:	8a7b      	ldrh	r3, [r7, #18]
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	005b      	lsls	r3, r3, #1
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	4413      	add	r3, r2
 80091a4:	881b      	ldrh	r3, [r3, #0]
 80091a6:	80fb      	strh	r3, [r7, #6]
 80091a8:	e027      	b.n	80091fa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80091aa:	88fa      	ldrh	r2, [r7, #6]
 80091ac:	8a7b      	ldrh	r3, [r7, #18]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	88fa      	ldrh	r2, [r7, #6]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	80fb      	strh	r3, [r7, #6]
 80091be:	e01c      	b.n	80091fa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80091c0:	88fb      	ldrh	r3, [r7, #6]
 80091c2:	3b10      	subs	r3, #16
 80091c4:	80fb      	strh	r3, [r7, #6]
 80091c6:	e018      	b.n	80091fa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80091c8:	88fb      	ldrh	r3, [r7, #6]
 80091ca:	3b20      	subs	r3, #32
 80091cc:	80fb      	strh	r3, [r7, #6]
 80091ce:	e014      	b.n	80091fa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80091d0:	88fb      	ldrh	r3, [r7, #6]
 80091d2:	3b30      	subs	r3, #48	; 0x30
 80091d4:	80fb      	strh	r3, [r7, #6]
 80091d6:	e010      	b.n	80091fa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80091d8:	88fb      	ldrh	r3, [r7, #6]
 80091da:	3b1a      	subs	r3, #26
 80091dc:	80fb      	strh	r3, [r7, #6]
 80091de:	e00c      	b.n	80091fa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80091e0:	88fb      	ldrh	r3, [r7, #6]
 80091e2:	3308      	adds	r3, #8
 80091e4:	80fb      	strh	r3, [r7, #6]
 80091e6:	e008      	b.n	80091fa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80091e8:	88fb      	ldrh	r3, [r7, #6]
 80091ea:	3b50      	subs	r3, #80	; 0x50
 80091ec:	80fb      	strh	r3, [r7, #6]
 80091ee:	e004      	b.n	80091fa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80091f0:	88fb      	ldrh	r3, [r7, #6]
 80091f2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80091f6:	80fb      	strh	r3, [r7, #6]
 80091f8:	bf00      	nop
			}
			break;
 80091fa:	e008      	b.n	800920e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80091fc:	89fb      	ldrh	r3, [r7, #14]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d195      	bne.n	800912e <ff_wtoupper+0x1a>
 8009202:	8a3b      	ldrh	r3, [r7, #16]
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	4413      	add	r3, r2
 800920a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800920c:	e78f      	b.n	800912e <ff_wtoupper+0x1a>
			break;
 800920e:	bf00      	nop
	}

	return chr;
 8009210:	88fb      	ldrh	r3, [r7, #6]
}
 8009212:	4618      	mov	r0, r3
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	0800955c 	.word	0x0800955c
 8009224:	08009750 	.word	0x08009750

08009228 <__libc_init_array>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	4d0d      	ldr	r5, [pc, #52]	; (8009260 <__libc_init_array+0x38>)
 800922c:	4c0d      	ldr	r4, [pc, #52]	; (8009264 <__libc_init_array+0x3c>)
 800922e:	1b64      	subs	r4, r4, r5
 8009230:	10a4      	asrs	r4, r4, #2
 8009232:	2600      	movs	r6, #0
 8009234:	42a6      	cmp	r6, r4
 8009236:	d109      	bne.n	800924c <__libc_init_array+0x24>
 8009238:	4d0b      	ldr	r5, [pc, #44]	; (8009268 <__libc_init_array+0x40>)
 800923a:	4c0c      	ldr	r4, [pc, #48]	; (800926c <__libc_init_array+0x44>)
 800923c:	f000 f834 	bl	80092a8 <_init>
 8009240:	1b64      	subs	r4, r4, r5
 8009242:	10a4      	asrs	r4, r4, #2
 8009244:	2600      	movs	r6, #0
 8009246:	42a6      	cmp	r6, r4
 8009248:	d105      	bne.n	8009256 <__libc_init_array+0x2e>
 800924a:	bd70      	pop	{r4, r5, r6, pc}
 800924c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009250:	4798      	blx	r3
 8009252:	3601      	adds	r6, #1
 8009254:	e7ee      	b.n	8009234 <__libc_init_array+0xc>
 8009256:	f855 3b04 	ldr.w	r3, [r5], #4
 800925a:	4798      	blx	r3
 800925c:	3601      	adds	r6, #1
 800925e:	e7f2      	b.n	8009246 <__libc_init_array+0x1e>
 8009260:	08009814 	.word	0x08009814
 8009264:	08009814 	.word	0x08009814
 8009268:	08009814 	.word	0x08009814
 800926c:	08009818 	.word	0x08009818

08009270 <memset>:
 8009270:	4402      	add	r2, r0
 8009272:	4603      	mov	r3, r0
 8009274:	4293      	cmp	r3, r2
 8009276:	d100      	bne.n	800927a <memset+0xa>
 8009278:	4770      	bx	lr
 800927a:	f803 1b01 	strb.w	r1, [r3], #1
 800927e:	e7f9      	b.n	8009274 <memset+0x4>

08009280 <strncpy>:
 8009280:	b510      	push	{r4, lr}
 8009282:	3901      	subs	r1, #1
 8009284:	4603      	mov	r3, r0
 8009286:	b132      	cbz	r2, 8009296 <strncpy+0x16>
 8009288:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800928c:	f803 4b01 	strb.w	r4, [r3], #1
 8009290:	3a01      	subs	r2, #1
 8009292:	2c00      	cmp	r4, #0
 8009294:	d1f7      	bne.n	8009286 <strncpy+0x6>
 8009296:	441a      	add	r2, r3
 8009298:	2100      	movs	r1, #0
 800929a:	4293      	cmp	r3, r2
 800929c:	d100      	bne.n	80092a0 <strncpy+0x20>
 800929e:	bd10      	pop	{r4, pc}
 80092a0:	f803 1b01 	strb.w	r1, [r3], #1
 80092a4:	e7f9      	b.n	800929a <strncpy+0x1a>
	...

080092a8 <_init>:
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092aa:	bf00      	nop
 80092ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ae:	bc08      	pop	{r3}
 80092b0:	469e      	mov	lr, r3
 80092b2:	4770      	bx	lr

080092b4 <_fini>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	bf00      	nop
 80092b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ba:	bc08      	pop	{r3}
 80092bc:	469e      	mov	lr, r3
 80092be:	4770      	bx	lr
=======
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007842:	2200      	movs	r2, #0
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7ff ffaa 	bl	80077a0 <FATFS_LinkDriverEx>
 800784c:	4603      	mov	r3, r0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
	...

08007858 <__errno>:
 8007858:	4b01      	ldr	r3, [pc, #4]	; (8007860 <__errno+0x8>)
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	20000024 	.word	0x20000024

08007864 <__libc_init_array>:
 8007864:	b570      	push	{r4, r5, r6, lr}
 8007866:	4d0d      	ldr	r5, [pc, #52]	; (800789c <__libc_init_array+0x38>)
 8007868:	4c0d      	ldr	r4, [pc, #52]	; (80078a0 <__libc_init_array+0x3c>)
 800786a:	1b64      	subs	r4, r4, r5
 800786c:	10a4      	asrs	r4, r4, #2
 800786e:	2600      	movs	r6, #0
 8007870:	42a6      	cmp	r6, r4
 8007872:	d109      	bne.n	8007888 <__libc_init_array+0x24>
 8007874:	4d0b      	ldr	r5, [pc, #44]	; (80078a4 <__libc_init_array+0x40>)
 8007876:	4c0c      	ldr	r4, [pc, #48]	; (80078a8 <__libc_init_array+0x44>)
 8007878:	f004 fb9e 	bl	800bfb8 <_init>
 800787c:	1b64      	subs	r4, r4, r5
 800787e:	10a4      	asrs	r4, r4, #2
 8007880:	2600      	movs	r6, #0
 8007882:	42a6      	cmp	r6, r4
 8007884:	d105      	bne.n	8007892 <__libc_init_array+0x2e>
 8007886:	bd70      	pop	{r4, r5, r6, pc}
 8007888:	f855 3b04 	ldr.w	r3, [r5], #4
 800788c:	4798      	blx	r3
 800788e:	3601      	adds	r6, #1
 8007890:	e7ee      	b.n	8007870 <__libc_init_array+0xc>
 8007892:	f855 3b04 	ldr.w	r3, [r5], #4
 8007896:	4798      	blx	r3
 8007898:	3601      	adds	r6, #1
 800789a:	e7f2      	b.n	8007882 <__libc_init_array+0x1e>
 800789c:	0800c584 	.word	0x0800c584
 80078a0:	0800c584 	.word	0x0800c584
 80078a4:	0800c584 	.word	0x0800c584
 80078a8:	0800c588 	.word	0x0800c588

080078ac <memset>:
 80078ac:	4402      	add	r2, r0
 80078ae:	4603      	mov	r3, r0
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d100      	bne.n	80078b6 <memset+0xa>
 80078b4:	4770      	bx	lr
 80078b6:	f803 1b01 	strb.w	r1, [r3], #1
 80078ba:	e7f9      	b.n	80078b0 <memset+0x4>

080078bc <__cvt>:
 80078bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078be:	ed2d 8b02 	vpush	{d8}
 80078c2:	eeb0 8b40 	vmov.f64	d8, d0
 80078c6:	b085      	sub	sp, #20
 80078c8:	4617      	mov	r7, r2
 80078ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80078cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80078ce:	ee18 2a90 	vmov	r2, s17
 80078d2:	f025 0520 	bic.w	r5, r5, #32
 80078d6:	2a00      	cmp	r2, #0
 80078d8:	bfb6      	itet	lt
 80078da:	222d      	movlt	r2, #45	; 0x2d
 80078dc:	2200      	movge	r2, #0
 80078de:	eeb1 8b40 	vneglt.f64	d8, d0
 80078e2:	2d46      	cmp	r5, #70	; 0x46
 80078e4:	460c      	mov	r4, r1
 80078e6:	701a      	strb	r2, [r3, #0]
 80078e8:	d004      	beq.n	80078f4 <__cvt+0x38>
 80078ea:	2d45      	cmp	r5, #69	; 0x45
 80078ec:	d100      	bne.n	80078f0 <__cvt+0x34>
 80078ee:	3401      	adds	r4, #1
 80078f0:	2102      	movs	r1, #2
 80078f2:	e000      	b.n	80078f6 <__cvt+0x3a>
 80078f4:	2103      	movs	r1, #3
 80078f6:	ab03      	add	r3, sp, #12
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	ab02      	add	r3, sp, #8
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	4622      	mov	r2, r4
 8007900:	4633      	mov	r3, r6
 8007902:	eeb0 0b48 	vmov.f64	d0, d8
 8007906:	f001 fd43 	bl	8009390 <_dtoa_r>
 800790a:	2d47      	cmp	r5, #71	; 0x47
 800790c:	d101      	bne.n	8007912 <__cvt+0x56>
 800790e:	07fb      	lsls	r3, r7, #31
 8007910:	d51a      	bpl.n	8007948 <__cvt+0x8c>
 8007912:	2d46      	cmp	r5, #70	; 0x46
 8007914:	eb00 0204 	add.w	r2, r0, r4
 8007918:	d10c      	bne.n	8007934 <__cvt+0x78>
 800791a:	7803      	ldrb	r3, [r0, #0]
 800791c:	2b30      	cmp	r3, #48	; 0x30
 800791e:	d107      	bne.n	8007930 <__cvt+0x74>
 8007920:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007928:	bf1c      	itt	ne
 800792a:	f1c4 0401 	rsbne	r4, r4, #1
 800792e:	6034      	strne	r4, [r6, #0]
 8007930:	6833      	ldr	r3, [r6, #0]
 8007932:	441a      	add	r2, r3
 8007934:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793c:	bf08      	it	eq
 800793e:	9203      	streq	r2, [sp, #12]
 8007940:	2130      	movs	r1, #48	; 0x30
 8007942:	9b03      	ldr	r3, [sp, #12]
 8007944:	4293      	cmp	r3, r2
 8007946:	d307      	bcc.n	8007958 <__cvt+0x9c>
 8007948:	9b03      	ldr	r3, [sp, #12]
 800794a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800794c:	1a1b      	subs	r3, r3, r0
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	b005      	add	sp, #20
 8007952:	ecbd 8b02 	vpop	{d8}
 8007956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007958:	1c5c      	adds	r4, r3, #1
 800795a:	9403      	str	r4, [sp, #12]
 800795c:	7019      	strb	r1, [r3, #0]
 800795e:	e7f0      	b.n	8007942 <__cvt+0x86>

08007960 <__exponent>:
 8007960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007962:	4603      	mov	r3, r0
 8007964:	2900      	cmp	r1, #0
 8007966:	bfb8      	it	lt
 8007968:	4249      	neglt	r1, r1
 800796a:	f803 2b02 	strb.w	r2, [r3], #2
 800796e:	bfb4      	ite	lt
 8007970:	222d      	movlt	r2, #45	; 0x2d
 8007972:	222b      	movge	r2, #43	; 0x2b
 8007974:	2909      	cmp	r1, #9
 8007976:	7042      	strb	r2, [r0, #1]
 8007978:	dd2a      	ble.n	80079d0 <__exponent+0x70>
 800797a:	f10d 0407 	add.w	r4, sp, #7
 800797e:	46a4      	mov	ip, r4
 8007980:	270a      	movs	r7, #10
 8007982:	46a6      	mov	lr, r4
 8007984:	460a      	mov	r2, r1
 8007986:	fb91 f6f7 	sdiv	r6, r1, r7
 800798a:	fb07 1516 	mls	r5, r7, r6, r1
 800798e:	3530      	adds	r5, #48	; 0x30
 8007990:	2a63      	cmp	r2, #99	; 0x63
 8007992:	f104 34ff 	add.w	r4, r4, #4294967295
 8007996:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800799a:	4631      	mov	r1, r6
 800799c:	dcf1      	bgt.n	8007982 <__exponent+0x22>
 800799e:	3130      	adds	r1, #48	; 0x30
 80079a0:	f1ae 0502 	sub.w	r5, lr, #2
 80079a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80079a8:	1c44      	adds	r4, r0, #1
 80079aa:	4629      	mov	r1, r5
 80079ac:	4561      	cmp	r1, ip
 80079ae:	d30a      	bcc.n	80079c6 <__exponent+0x66>
 80079b0:	f10d 0209 	add.w	r2, sp, #9
 80079b4:	eba2 020e 	sub.w	r2, r2, lr
 80079b8:	4565      	cmp	r5, ip
 80079ba:	bf88      	it	hi
 80079bc:	2200      	movhi	r2, #0
 80079be:	4413      	add	r3, r2
 80079c0:	1a18      	subs	r0, r3, r0
 80079c2:	b003      	add	sp, #12
 80079c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80079ce:	e7ed      	b.n	80079ac <__exponent+0x4c>
 80079d0:	2330      	movs	r3, #48	; 0x30
 80079d2:	3130      	adds	r1, #48	; 0x30
 80079d4:	7083      	strb	r3, [r0, #2]
 80079d6:	70c1      	strb	r1, [r0, #3]
 80079d8:	1d03      	adds	r3, r0, #4
 80079da:	e7f1      	b.n	80079c0 <__exponent+0x60>
 80079dc:	0000      	movs	r0, r0
	...

080079e0 <_printf_float>:
 80079e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	b08b      	sub	sp, #44	; 0x2c
 80079e6:	460c      	mov	r4, r1
 80079e8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80079ec:	4616      	mov	r6, r2
 80079ee:	461f      	mov	r7, r3
 80079f0:	4605      	mov	r5, r0
 80079f2:	f002 fdab 	bl	800a54c <_localeconv_r>
 80079f6:	f8d0 b000 	ldr.w	fp, [r0]
 80079fa:	4658      	mov	r0, fp
 80079fc:	f7f8 fc20 	bl	8000240 <strlen>
 8007a00:	2300      	movs	r3, #0
 8007a02:	9308      	str	r3, [sp, #32]
 8007a04:	f8d8 3000 	ldr.w	r3, [r8]
 8007a08:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007a0c:	6822      	ldr	r2, [r4, #0]
 8007a0e:	3307      	adds	r3, #7
 8007a10:	f023 0307 	bic.w	r3, r3, #7
 8007a14:	f103 0108 	add.w	r1, r3, #8
 8007a18:	f8c8 1000 	str.w	r1, [r8]
 8007a1c:	4682      	mov	sl, r0
 8007a1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a22:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007a26:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007c88 <_printf_float+0x2a8>
 8007a2a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007a2e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007a32:	eeb4 6b47 	vcmp.f64	d6, d7
 8007a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a3a:	dd24      	ble.n	8007a86 <_printf_float+0xa6>
 8007a3c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a44:	d502      	bpl.n	8007a4c <_printf_float+0x6c>
 8007a46:	232d      	movs	r3, #45	; 0x2d
 8007a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a4c:	4b90      	ldr	r3, [pc, #576]	; (8007c90 <_printf_float+0x2b0>)
 8007a4e:	4891      	ldr	r0, [pc, #580]	; (8007c94 <_printf_float+0x2b4>)
 8007a50:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007a54:	bf94      	ite	ls
 8007a56:	4698      	movls	r8, r3
 8007a58:	4680      	movhi	r8, r0
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	6123      	str	r3, [r4, #16]
 8007a5e:	f022 0204 	bic.w	r2, r2, #4
 8007a62:	2300      	movs	r3, #0
 8007a64:	6022      	str	r2, [r4, #0]
 8007a66:	9304      	str	r3, [sp, #16]
 8007a68:	9700      	str	r7, [sp, #0]
 8007a6a:	4633      	mov	r3, r6
 8007a6c:	aa09      	add	r2, sp, #36	; 0x24
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4628      	mov	r0, r5
 8007a72:	f000 f9d3 	bl	8007e1c <_printf_common>
 8007a76:	3001      	adds	r0, #1
 8007a78:	f040 808a 	bne.w	8007b90 <_printf_float+0x1b0>
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a80:	b00b      	add	sp, #44	; 0x2c
 8007a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a86:	eeb4 0b40 	vcmp.f64	d0, d0
 8007a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a8e:	d709      	bvc.n	8007aa4 <_printf_float+0xc4>
 8007a90:	ee10 3a90 	vmov	r3, s1
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	bfbc      	itt	lt
 8007a98:	232d      	movlt	r3, #45	; 0x2d
 8007a9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a9e:	487e      	ldr	r0, [pc, #504]	; (8007c98 <_printf_float+0x2b8>)
 8007aa0:	4b7e      	ldr	r3, [pc, #504]	; (8007c9c <_printf_float+0x2bc>)
 8007aa2:	e7d5      	b.n	8007a50 <_printf_float+0x70>
 8007aa4:	6863      	ldr	r3, [r4, #4]
 8007aa6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007aaa:	9104      	str	r1, [sp, #16]
 8007aac:	1c59      	adds	r1, r3, #1
 8007aae:	d13c      	bne.n	8007b2a <_printf_float+0x14a>
 8007ab0:	2306      	movs	r3, #6
 8007ab2:	6063      	str	r3, [r4, #4]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9303      	str	r3, [sp, #12]
 8007ab8:	ab08      	add	r3, sp, #32
 8007aba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007abe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ac2:	ab07      	add	r3, sp, #28
 8007ac4:	6861      	ldr	r1, [r4, #4]
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	6022      	str	r2, [r4, #0]
 8007aca:	f10d 031b 	add.w	r3, sp, #27
 8007ace:	4628      	mov	r0, r5
 8007ad0:	f7ff fef4 	bl	80078bc <__cvt>
 8007ad4:	9b04      	ldr	r3, [sp, #16]
 8007ad6:	9907      	ldr	r1, [sp, #28]
 8007ad8:	2b47      	cmp	r3, #71	; 0x47
 8007ada:	4680      	mov	r8, r0
 8007adc:	d108      	bne.n	8007af0 <_printf_float+0x110>
 8007ade:	1cc8      	adds	r0, r1, #3
 8007ae0:	db02      	blt.n	8007ae8 <_printf_float+0x108>
 8007ae2:	6863      	ldr	r3, [r4, #4]
 8007ae4:	4299      	cmp	r1, r3
 8007ae6:	dd41      	ble.n	8007b6c <_printf_float+0x18c>
 8007ae8:	f1a9 0902 	sub.w	r9, r9, #2
 8007aec:	fa5f f989 	uxtb.w	r9, r9
 8007af0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007af4:	d820      	bhi.n	8007b38 <_printf_float+0x158>
 8007af6:	3901      	subs	r1, #1
 8007af8:	464a      	mov	r2, r9
 8007afa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007afe:	9107      	str	r1, [sp, #28]
 8007b00:	f7ff ff2e 	bl	8007960 <__exponent>
 8007b04:	9a08      	ldr	r2, [sp, #32]
 8007b06:	9004      	str	r0, [sp, #16]
 8007b08:	1813      	adds	r3, r2, r0
 8007b0a:	2a01      	cmp	r2, #1
 8007b0c:	6123      	str	r3, [r4, #16]
 8007b0e:	dc02      	bgt.n	8007b16 <_printf_float+0x136>
 8007b10:	6822      	ldr	r2, [r4, #0]
 8007b12:	07d2      	lsls	r2, r2, #31
 8007b14:	d501      	bpl.n	8007b1a <_printf_float+0x13a>
 8007b16:	3301      	adds	r3, #1
 8007b18:	6123      	str	r3, [r4, #16]
 8007b1a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0a2      	beq.n	8007a68 <_printf_float+0x88>
 8007b22:	232d      	movs	r3, #45	; 0x2d
 8007b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b28:	e79e      	b.n	8007a68 <_printf_float+0x88>
 8007b2a:	9904      	ldr	r1, [sp, #16]
 8007b2c:	2947      	cmp	r1, #71	; 0x47
 8007b2e:	d1c1      	bne.n	8007ab4 <_printf_float+0xd4>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1bf      	bne.n	8007ab4 <_printf_float+0xd4>
 8007b34:	2301      	movs	r3, #1
 8007b36:	e7bc      	b.n	8007ab2 <_printf_float+0xd2>
 8007b38:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007b3c:	d118      	bne.n	8007b70 <_printf_float+0x190>
 8007b3e:	2900      	cmp	r1, #0
 8007b40:	6863      	ldr	r3, [r4, #4]
 8007b42:	dd0b      	ble.n	8007b5c <_printf_float+0x17c>
 8007b44:	6121      	str	r1, [r4, #16]
 8007b46:	b913      	cbnz	r3, 8007b4e <_printf_float+0x16e>
 8007b48:	6822      	ldr	r2, [r4, #0]
 8007b4a:	07d0      	lsls	r0, r2, #31
 8007b4c:	d502      	bpl.n	8007b54 <_printf_float+0x174>
 8007b4e:	3301      	adds	r3, #1
 8007b50:	440b      	add	r3, r1
 8007b52:	6123      	str	r3, [r4, #16]
 8007b54:	2300      	movs	r3, #0
 8007b56:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b58:	9304      	str	r3, [sp, #16]
 8007b5a:	e7de      	b.n	8007b1a <_printf_float+0x13a>
 8007b5c:	b913      	cbnz	r3, 8007b64 <_printf_float+0x184>
 8007b5e:	6822      	ldr	r2, [r4, #0]
 8007b60:	07d2      	lsls	r2, r2, #31
 8007b62:	d501      	bpl.n	8007b68 <_printf_float+0x188>
 8007b64:	3302      	adds	r3, #2
 8007b66:	e7f4      	b.n	8007b52 <_printf_float+0x172>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e7f2      	b.n	8007b52 <_printf_float+0x172>
 8007b6c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007b70:	9b08      	ldr	r3, [sp, #32]
 8007b72:	4299      	cmp	r1, r3
 8007b74:	db05      	blt.n	8007b82 <_printf_float+0x1a2>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	6121      	str	r1, [r4, #16]
 8007b7a:	07d8      	lsls	r0, r3, #31
 8007b7c:	d5ea      	bpl.n	8007b54 <_printf_float+0x174>
 8007b7e:	1c4b      	adds	r3, r1, #1
 8007b80:	e7e7      	b.n	8007b52 <_printf_float+0x172>
 8007b82:	2900      	cmp	r1, #0
 8007b84:	bfd4      	ite	le
 8007b86:	f1c1 0202 	rsble	r2, r1, #2
 8007b8a:	2201      	movgt	r2, #1
 8007b8c:	4413      	add	r3, r2
 8007b8e:	e7e0      	b.n	8007b52 <_printf_float+0x172>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	055a      	lsls	r2, r3, #21
 8007b94:	d407      	bmi.n	8007ba6 <_printf_float+0x1c6>
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	4642      	mov	r2, r8
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	47b8      	blx	r7
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d12a      	bne.n	8007bfa <_printf_float+0x21a>
 8007ba4:	e76a      	b.n	8007a7c <_printf_float+0x9c>
 8007ba6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007baa:	f240 80e2 	bls.w	8007d72 <_printf_float+0x392>
 8007bae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007bb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bba:	d133      	bne.n	8007c24 <_printf_float+0x244>
 8007bbc:	4a38      	ldr	r2, [pc, #224]	; (8007ca0 <_printf_float+0x2c0>)
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	47b8      	blx	r7
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	f43f af58 	beq.w	8007a7c <_printf_float+0x9c>
 8007bcc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	db02      	blt.n	8007bda <_printf_float+0x1fa>
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	07d8      	lsls	r0, r3, #31
 8007bd8:	d50f      	bpl.n	8007bfa <_printf_float+0x21a>
 8007bda:	4653      	mov	r3, sl
 8007bdc:	465a      	mov	r2, fp
 8007bde:	4631      	mov	r1, r6
 8007be0:	4628      	mov	r0, r5
 8007be2:	47b8      	blx	r7
 8007be4:	3001      	adds	r0, #1
 8007be6:	f43f af49 	beq.w	8007a7c <_printf_float+0x9c>
 8007bea:	f04f 0800 	mov.w	r8, #0
 8007bee:	f104 091a 	add.w	r9, r4, #26
 8007bf2:	9b08      	ldr	r3, [sp, #32]
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	4543      	cmp	r3, r8
 8007bf8:	dc09      	bgt.n	8007c0e <_printf_float+0x22e>
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	079b      	lsls	r3, r3, #30
 8007bfe:	f100 8108 	bmi.w	8007e12 <_printf_float+0x432>
 8007c02:	68e0      	ldr	r0, [r4, #12]
 8007c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c06:	4298      	cmp	r0, r3
 8007c08:	bfb8      	it	lt
 8007c0a:	4618      	movlt	r0, r3
 8007c0c:	e738      	b.n	8007a80 <_printf_float+0xa0>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	464a      	mov	r2, r9
 8007c12:	4631      	mov	r1, r6
 8007c14:	4628      	mov	r0, r5
 8007c16:	47b8      	blx	r7
 8007c18:	3001      	adds	r0, #1
 8007c1a:	f43f af2f 	beq.w	8007a7c <_printf_float+0x9c>
 8007c1e:	f108 0801 	add.w	r8, r8, #1
 8007c22:	e7e6      	b.n	8007bf2 <_printf_float+0x212>
 8007c24:	9b07      	ldr	r3, [sp, #28]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	dc3c      	bgt.n	8007ca4 <_printf_float+0x2c4>
 8007c2a:	4a1d      	ldr	r2, [pc, #116]	; (8007ca0 <_printf_float+0x2c0>)
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	4631      	mov	r1, r6
 8007c30:	4628      	mov	r0, r5
 8007c32:	47b8      	blx	r7
 8007c34:	3001      	adds	r0, #1
 8007c36:	f43f af21 	beq.w	8007a7c <_printf_float+0x9c>
 8007c3a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	d102      	bne.n	8007c48 <_printf_float+0x268>
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	07d9      	lsls	r1, r3, #31
 8007c46:	d5d8      	bpl.n	8007bfa <_printf_float+0x21a>
 8007c48:	4653      	mov	r3, sl
 8007c4a:	465a      	mov	r2, fp
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4628      	mov	r0, r5
 8007c50:	47b8      	blx	r7
 8007c52:	3001      	adds	r0, #1
 8007c54:	f43f af12 	beq.w	8007a7c <_printf_float+0x9c>
 8007c58:	f04f 0900 	mov.w	r9, #0
 8007c5c:	f104 0a1a 	add.w	sl, r4, #26
 8007c60:	9b07      	ldr	r3, [sp, #28]
 8007c62:	425b      	negs	r3, r3
 8007c64:	454b      	cmp	r3, r9
 8007c66:	dc01      	bgt.n	8007c6c <_printf_float+0x28c>
 8007c68:	9b08      	ldr	r3, [sp, #32]
 8007c6a:	e795      	b.n	8007b98 <_printf_float+0x1b8>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	4652      	mov	r2, sl
 8007c70:	4631      	mov	r1, r6
 8007c72:	4628      	mov	r0, r5
 8007c74:	47b8      	blx	r7
 8007c76:	3001      	adds	r0, #1
 8007c78:	f43f af00 	beq.w	8007a7c <_printf_float+0x9c>
 8007c7c:	f109 0901 	add.w	r9, r9, #1
 8007c80:	e7ee      	b.n	8007c60 <_printf_float+0x280>
 8007c82:	bf00      	nop
 8007c84:	f3af 8000 	nop.w
 8007c88:	ffffffff 	.word	0xffffffff
 8007c8c:	7fefffff 	.word	0x7fefffff
 8007c90:	0800c0dc 	.word	0x0800c0dc
 8007c94:	0800c0e0 	.word	0x0800c0e0
 8007c98:	0800c0e8 	.word	0x0800c0e8
 8007c9c:	0800c0e4 	.word	0x0800c0e4
 8007ca0:	0800c0ec 	.word	0x0800c0ec
 8007ca4:	9a08      	ldr	r2, [sp, #32]
 8007ca6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	bfa8      	it	ge
 8007cac:	461a      	movge	r2, r3
 8007cae:	2a00      	cmp	r2, #0
 8007cb0:	4691      	mov	r9, r2
 8007cb2:	dc38      	bgt.n	8007d26 <_printf_float+0x346>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	9305      	str	r3, [sp, #20]
 8007cb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cbc:	f104 021a 	add.w	r2, r4, #26
 8007cc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cc2:	9905      	ldr	r1, [sp, #20]
 8007cc4:	9304      	str	r3, [sp, #16]
 8007cc6:	eba3 0309 	sub.w	r3, r3, r9
 8007cca:	428b      	cmp	r3, r1
 8007ccc:	dc33      	bgt.n	8007d36 <_printf_float+0x356>
 8007cce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	db3c      	blt.n	8007d50 <_printf_float+0x370>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	07da      	lsls	r2, r3, #31
 8007cda:	d439      	bmi.n	8007d50 <_printf_float+0x370>
 8007cdc:	9b08      	ldr	r3, [sp, #32]
 8007cde:	9a04      	ldr	r2, [sp, #16]
 8007ce0:	9907      	ldr	r1, [sp, #28]
 8007ce2:	1a9a      	subs	r2, r3, r2
 8007ce4:	eba3 0901 	sub.w	r9, r3, r1
 8007ce8:	4591      	cmp	r9, r2
 8007cea:	bfa8      	it	ge
 8007cec:	4691      	movge	r9, r2
 8007cee:	f1b9 0f00 	cmp.w	r9, #0
 8007cf2:	dc35      	bgt.n	8007d60 <_printf_float+0x380>
 8007cf4:	f04f 0800 	mov.w	r8, #0
 8007cf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cfc:	f104 0a1a 	add.w	sl, r4, #26
 8007d00:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	eba3 0309 	sub.w	r3, r3, r9
 8007d0a:	4543      	cmp	r3, r8
 8007d0c:	f77f af75 	ble.w	8007bfa <_printf_float+0x21a>
 8007d10:	2301      	movs	r3, #1
 8007d12:	4652      	mov	r2, sl
 8007d14:	4631      	mov	r1, r6
 8007d16:	4628      	mov	r0, r5
 8007d18:	47b8      	blx	r7
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	f43f aeae 	beq.w	8007a7c <_printf_float+0x9c>
 8007d20:	f108 0801 	add.w	r8, r8, #1
 8007d24:	e7ec      	b.n	8007d00 <_printf_float+0x320>
 8007d26:	4613      	mov	r3, r2
 8007d28:	4631      	mov	r1, r6
 8007d2a:	4642      	mov	r2, r8
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	47b8      	blx	r7
 8007d30:	3001      	adds	r0, #1
 8007d32:	d1bf      	bne.n	8007cb4 <_printf_float+0x2d4>
 8007d34:	e6a2      	b.n	8007a7c <_printf_float+0x9c>
 8007d36:	2301      	movs	r3, #1
 8007d38:	4631      	mov	r1, r6
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	9204      	str	r2, [sp, #16]
 8007d3e:	47b8      	blx	r7
 8007d40:	3001      	adds	r0, #1
 8007d42:	f43f ae9b 	beq.w	8007a7c <_printf_float+0x9c>
 8007d46:	9b05      	ldr	r3, [sp, #20]
 8007d48:	9a04      	ldr	r2, [sp, #16]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	9305      	str	r3, [sp, #20]
 8007d4e:	e7b7      	b.n	8007cc0 <_printf_float+0x2e0>
 8007d50:	4653      	mov	r3, sl
 8007d52:	465a      	mov	r2, fp
 8007d54:	4631      	mov	r1, r6
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b8      	blx	r7
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	d1be      	bne.n	8007cdc <_printf_float+0x2fc>
 8007d5e:	e68d      	b.n	8007a7c <_printf_float+0x9c>
 8007d60:	9a04      	ldr	r2, [sp, #16]
 8007d62:	464b      	mov	r3, r9
 8007d64:	4442      	add	r2, r8
 8007d66:	4631      	mov	r1, r6
 8007d68:	4628      	mov	r0, r5
 8007d6a:	47b8      	blx	r7
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d1c1      	bne.n	8007cf4 <_printf_float+0x314>
 8007d70:	e684      	b.n	8007a7c <_printf_float+0x9c>
 8007d72:	9a08      	ldr	r2, [sp, #32]
 8007d74:	2a01      	cmp	r2, #1
 8007d76:	dc01      	bgt.n	8007d7c <_printf_float+0x39c>
 8007d78:	07db      	lsls	r3, r3, #31
 8007d7a:	d537      	bpl.n	8007dec <_printf_float+0x40c>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	4642      	mov	r2, r8
 8007d80:	4631      	mov	r1, r6
 8007d82:	4628      	mov	r0, r5
 8007d84:	47b8      	blx	r7
 8007d86:	3001      	adds	r0, #1
 8007d88:	f43f ae78 	beq.w	8007a7c <_printf_float+0x9c>
 8007d8c:	4653      	mov	r3, sl
 8007d8e:	465a      	mov	r2, fp
 8007d90:	4631      	mov	r1, r6
 8007d92:	4628      	mov	r0, r5
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f ae70 	beq.w	8007a7c <_printf_float+0x9c>
 8007d9c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007da0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da8:	d01b      	beq.n	8007de2 <_printf_float+0x402>
 8007daa:	9b08      	ldr	r3, [sp, #32]
 8007dac:	f108 0201 	add.w	r2, r8, #1
 8007db0:	3b01      	subs	r3, #1
 8007db2:	4631      	mov	r1, r6
 8007db4:	4628      	mov	r0, r5
 8007db6:	47b8      	blx	r7
 8007db8:	3001      	adds	r0, #1
 8007dba:	d10e      	bne.n	8007dda <_printf_float+0x3fa>
 8007dbc:	e65e      	b.n	8007a7c <_printf_float+0x9c>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	464a      	mov	r2, r9
 8007dc2:	4631      	mov	r1, r6
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	47b8      	blx	r7
 8007dc8:	3001      	adds	r0, #1
 8007dca:	f43f ae57 	beq.w	8007a7c <_printf_float+0x9c>
 8007dce:	f108 0801 	add.w	r8, r8, #1
 8007dd2:	9b08      	ldr	r3, [sp, #32]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	4543      	cmp	r3, r8
 8007dd8:	dcf1      	bgt.n	8007dbe <_printf_float+0x3de>
 8007dda:	9b04      	ldr	r3, [sp, #16]
 8007ddc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007de0:	e6db      	b.n	8007b9a <_printf_float+0x1ba>
 8007de2:	f04f 0800 	mov.w	r8, #0
 8007de6:	f104 091a 	add.w	r9, r4, #26
 8007dea:	e7f2      	b.n	8007dd2 <_printf_float+0x3f2>
 8007dec:	2301      	movs	r3, #1
 8007dee:	4642      	mov	r2, r8
 8007df0:	e7df      	b.n	8007db2 <_printf_float+0x3d2>
 8007df2:	2301      	movs	r3, #1
 8007df4:	464a      	mov	r2, r9
 8007df6:	4631      	mov	r1, r6
 8007df8:	4628      	mov	r0, r5
 8007dfa:	47b8      	blx	r7
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	f43f ae3d 	beq.w	8007a7c <_printf_float+0x9c>
 8007e02:	f108 0801 	add.w	r8, r8, #1
 8007e06:	68e3      	ldr	r3, [r4, #12]
 8007e08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e0a:	1a5b      	subs	r3, r3, r1
 8007e0c:	4543      	cmp	r3, r8
 8007e0e:	dcf0      	bgt.n	8007df2 <_printf_float+0x412>
 8007e10:	e6f7      	b.n	8007c02 <_printf_float+0x222>
 8007e12:	f04f 0800 	mov.w	r8, #0
 8007e16:	f104 0919 	add.w	r9, r4, #25
 8007e1a:	e7f4      	b.n	8007e06 <_printf_float+0x426>

08007e1c <_printf_common>:
 8007e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e20:	4616      	mov	r6, r2
 8007e22:	4699      	mov	r9, r3
 8007e24:	688a      	ldr	r2, [r1, #8]
 8007e26:	690b      	ldr	r3, [r1, #16]
 8007e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	bfb8      	it	lt
 8007e30:	4613      	movlt	r3, r2
 8007e32:	6033      	str	r3, [r6, #0]
 8007e34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e38:	4607      	mov	r7, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	b10a      	cbz	r2, 8007e42 <_printf_common+0x26>
 8007e3e:	3301      	adds	r3, #1
 8007e40:	6033      	str	r3, [r6, #0]
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	0699      	lsls	r1, r3, #26
 8007e46:	bf42      	ittt	mi
 8007e48:	6833      	ldrmi	r3, [r6, #0]
 8007e4a:	3302      	addmi	r3, #2
 8007e4c:	6033      	strmi	r3, [r6, #0]
 8007e4e:	6825      	ldr	r5, [r4, #0]
 8007e50:	f015 0506 	ands.w	r5, r5, #6
 8007e54:	d106      	bne.n	8007e64 <_printf_common+0x48>
 8007e56:	f104 0a19 	add.w	sl, r4, #25
 8007e5a:	68e3      	ldr	r3, [r4, #12]
 8007e5c:	6832      	ldr	r2, [r6, #0]
 8007e5e:	1a9b      	subs	r3, r3, r2
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	dc26      	bgt.n	8007eb2 <_printf_common+0x96>
 8007e64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e68:	1e13      	subs	r3, r2, #0
 8007e6a:	6822      	ldr	r2, [r4, #0]
 8007e6c:	bf18      	it	ne
 8007e6e:	2301      	movne	r3, #1
 8007e70:	0692      	lsls	r2, r2, #26
 8007e72:	d42b      	bmi.n	8007ecc <_printf_common+0xb0>
 8007e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e78:	4649      	mov	r1, r9
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	47c0      	blx	r8
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d01e      	beq.n	8007ec0 <_printf_common+0xa4>
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	68e5      	ldr	r5, [r4, #12]
 8007e86:	6832      	ldr	r2, [r6, #0]
 8007e88:	f003 0306 	and.w	r3, r3, #6
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	bf08      	it	eq
 8007e90:	1aad      	subeq	r5, r5, r2
 8007e92:	68a3      	ldr	r3, [r4, #8]
 8007e94:	6922      	ldr	r2, [r4, #16]
 8007e96:	bf0c      	ite	eq
 8007e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e9c:	2500      	movne	r5, #0
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	bfc4      	itt	gt
 8007ea2:	1a9b      	subgt	r3, r3, r2
 8007ea4:	18ed      	addgt	r5, r5, r3
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	341a      	adds	r4, #26
 8007eaa:	42b5      	cmp	r5, r6
 8007eac:	d11a      	bne.n	8007ee4 <_printf_common+0xc8>
 8007eae:	2000      	movs	r0, #0
 8007eb0:	e008      	b.n	8007ec4 <_printf_common+0xa8>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	4652      	mov	r2, sl
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	4638      	mov	r0, r7
 8007eba:	47c0      	blx	r8
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d103      	bne.n	8007ec8 <_printf_common+0xac>
 8007ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec8:	3501      	adds	r5, #1
 8007eca:	e7c6      	b.n	8007e5a <_printf_common+0x3e>
 8007ecc:	18e1      	adds	r1, r4, r3
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	2030      	movs	r0, #48	; 0x30
 8007ed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ed6:	4422      	add	r2, r4
 8007ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007edc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ee0:	3302      	adds	r3, #2
 8007ee2:	e7c7      	b.n	8007e74 <_printf_common+0x58>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	4649      	mov	r1, r9
 8007eea:	4638      	mov	r0, r7
 8007eec:	47c0      	blx	r8
 8007eee:	3001      	adds	r0, #1
 8007ef0:	d0e6      	beq.n	8007ec0 <_printf_common+0xa4>
 8007ef2:	3601      	adds	r6, #1
 8007ef4:	e7d9      	b.n	8007eaa <_printf_common+0x8e>
	...

08007ef8 <_printf_i>:
 8007ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007efc:	7e0f      	ldrb	r7, [r1, #24]
 8007efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f00:	2f78      	cmp	r7, #120	; 0x78
 8007f02:	4691      	mov	r9, r2
 8007f04:	4680      	mov	r8, r0
 8007f06:	460c      	mov	r4, r1
 8007f08:	469a      	mov	sl, r3
 8007f0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f0e:	d807      	bhi.n	8007f20 <_printf_i+0x28>
 8007f10:	2f62      	cmp	r7, #98	; 0x62
 8007f12:	d80a      	bhi.n	8007f2a <_printf_i+0x32>
 8007f14:	2f00      	cmp	r7, #0
 8007f16:	f000 80d8 	beq.w	80080ca <_printf_i+0x1d2>
 8007f1a:	2f58      	cmp	r7, #88	; 0x58
 8007f1c:	f000 80a3 	beq.w	8008066 <_printf_i+0x16e>
 8007f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f28:	e03a      	b.n	8007fa0 <_printf_i+0xa8>
 8007f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f2e:	2b15      	cmp	r3, #21
 8007f30:	d8f6      	bhi.n	8007f20 <_printf_i+0x28>
 8007f32:	a101      	add	r1, pc, #4	; (adr r1, 8007f38 <_printf_i+0x40>)
 8007f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f38:	08007f91 	.word	0x08007f91
 8007f3c:	08007fa5 	.word	0x08007fa5
 8007f40:	08007f21 	.word	0x08007f21
 8007f44:	08007f21 	.word	0x08007f21
 8007f48:	08007f21 	.word	0x08007f21
 8007f4c:	08007f21 	.word	0x08007f21
 8007f50:	08007fa5 	.word	0x08007fa5
 8007f54:	08007f21 	.word	0x08007f21
 8007f58:	08007f21 	.word	0x08007f21
 8007f5c:	08007f21 	.word	0x08007f21
 8007f60:	08007f21 	.word	0x08007f21
 8007f64:	080080b1 	.word	0x080080b1
 8007f68:	08007fd5 	.word	0x08007fd5
 8007f6c:	08008093 	.word	0x08008093
 8007f70:	08007f21 	.word	0x08007f21
 8007f74:	08007f21 	.word	0x08007f21
 8007f78:	080080d3 	.word	0x080080d3
 8007f7c:	08007f21 	.word	0x08007f21
 8007f80:	08007fd5 	.word	0x08007fd5
 8007f84:	08007f21 	.word	0x08007f21
 8007f88:	08007f21 	.word	0x08007f21
 8007f8c:	0800809b 	.word	0x0800809b
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	1d1a      	adds	r2, r3, #4
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	602a      	str	r2, [r5, #0]
 8007f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e0a3      	b.n	80080ec <_printf_i+0x1f4>
 8007fa4:	6820      	ldr	r0, [r4, #0]
 8007fa6:	6829      	ldr	r1, [r5, #0]
 8007fa8:	0606      	lsls	r6, r0, #24
 8007faa:	f101 0304 	add.w	r3, r1, #4
 8007fae:	d50a      	bpl.n	8007fc6 <_printf_i+0xce>
 8007fb0:	680e      	ldr	r6, [r1, #0]
 8007fb2:	602b      	str	r3, [r5, #0]
 8007fb4:	2e00      	cmp	r6, #0
 8007fb6:	da03      	bge.n	8007fc0 <_printf_i+0xc8>
 8007fb8:	232d      	movs	r3, #45	; 0x2d
 8007fba:	4276      	negs	r6, r6
 8007fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc0:	485e      	ldr	r0, [pc, #376]	; (800813c <_printf_i+0x244>)
 8007fc2:	230a      	movs	r3, #10
 8007fc4:	e019      	b.n	8007ffa <_printf_i+0x102>
 8007fc6:	680e      	ldr	r6, [r1, #0]
 8007fc8:	602b      	str	r3, [r5, #0]
 8007fca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fce:	bf18      	it	ne
 8007fd0:	b236      	sxthne	r6, r6
 8007fd2:	e7ef      	b.n	8007fb4 <_printf_i+0xbc>
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	6820      	ldr	r0, [r4, #0]
 8007fd8:	1d19      	adds	r1, r3, #4
 8007fda:	6029      	str	r1, [r5, #0]
 8007fdc:	0601      	lsls	r1, r0, #24
 8007fde:	d501      	bpl.n	8007fe4 <_printf_i+0xec>
 8007fe0:	681e      	ldr	r6, [r3, #0]
 8007fe2:	e002      	b.n	8007fea <_printf_i+0xf2>
 8007fe4:	0646      	lsls	r6, r0, #25
 8007fe6:	d5fb      	bpl.n	8007fe0 <_printf_i+0xe8>
 8007fe8:	881e      	ldrh	r6, [r3, #0]
 8007fea:	4854      	ldr	r0, [pc, #336]	; (800813c <_printf_i+0x244>)
 8007fec:	2f6f      	cmp	r7, #111	; 0x6f
 8007fee:	bf0c      	ite	eq
 8007ff0:	2308      	moveq	r3, #8
 8007ff2:	230a      	movne	r3, #10
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ffa:	6865      	ldr	r5, [r4, #4]
 8007ffc:	60a5      	str	r5, [r4, #8]
 8007ffe:	2d00      	cmp	r5, #0
 8008000:	bfa2      	ittt	ge
 8008002:	6821      	ldrge	r1, [r4, #0]
 8008004:	f021 0104 	bicge.w	r1, r1, #4
 8008008:	6021      	strge	r1, [r4, #0]
 800800a:	b90e      	cbnz	r6, 8008010 <_printf_i+0x118>
 800800c:	2d00      	cmp	r5, #0
 800800e:	d04d      	beq.n	80080ac <_printf_i+0x1b4>
 8008010:	4615      	mov	r5, r2
 8008012:	fbb6 f1f3 	udiv	r1, r6, r3
 8008016:	fb03 6711 	mls	r7, r3, r1, r6
 800801a:	5dc7      	ldrb	r7, [r0, r7]
 800801c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008020:	4637      	mov	r7, r6
 8008022:	42bb      	cmp	r3, r7
 8008024:	460e      	mov	r6, r1
 8008026:	d9f4      	bls.n	8008012 <_printf_i+0x11a>
 8008028:	2b08      	cmp	r3, #8
 800802a:	d10b      	bne.n	8008044 <_printf_i+0x14c>
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	07de      	lsls	r6, r3, #31
 8008030:	d508      	bpl.n	8008044 <_printf_i+0x14c>
 8008032:	6923      	ldr	r3, [r4, #16]
 8008034:	6861      	ldr	r1, [r4, #4]
 8008036:	4299      	cmp	r1, r3
 8008038:	bfde      	ittt	le
 800803a:	2330      	movle	r3, #48	; 0x30
 800803c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008040:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008044:	1b52      	subs	r2, r2, r5
 8008046:	6122      	str	r2, [r4, #16]
 8008048:	f8cd a000 	str.w	sl, [sp]
 800804c:	464b      	mov	r3, r9
 800804e:	aa03      	add	r2, sp, #12
 8008050:	4621      	mov	r1, r4
 8008052:	4640      	mov	r0, r8
 8008054:	f7ff fee2 	bl	8007e1c <_printf_common>
 8008058:	3001      	adds	r0, #1
 800805a:	d14c      	bne.n	80080f6 <_printf_i+0x1fe>
 800805c:	f04f 30ff 	mov.w	r0, #4294967295
 8008060:	b004      	add	sp, #16
 8008062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008066:	4835      	ldr	r0, [pc, #212]	; (800813c <_printf_i+0x244>)
 8008068:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800806c:	6829      	ldr	r1, [r5, #0]
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	f851 6b04 	ldr.w	r6, [r1], #4
 8008074:	6029      	str	r1, [r5, #0]
 8008076:	061d      	lsls	r5, r3, #24
 8008078:	d514      	bpl.n	80080a4 <_printf_i+0x1ac>
 800807a:	07df      	lsls	r7, r3, #31
 800807c:	bf44      	itt	mi
 800807e:	f043 0320 	orrmi.w	r3, r3, #32
 8008082:	6023      	strmi	r3, [r4, #0]
 8008084:	b91e      	cbnz	r6, 800808e <_printf_i+0x196>
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	f023 0320 	bic.w	r3, r3, #32
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	2310      	movs	r3, #16
 8008090:	e7b0      	b.n	8007ff4 <_printf_i+0xfc>
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	f043 0320 	orr.w	r3, r3, #32
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	2378      	movs	r3, #120	; 0x78
 800809c:	4828      	ldr	r0, [pc, #160]	; (8008140 <_printf_i+0x248>)
 800809e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080a2:	e7e3      	b.n	800806c <_printf_i+0x174>
 80080a4:	0659      	lsls	r1, r3, #25
 80080a6:	bf48      	it	mi
 80080a8:	b2b6      	uxthmi	r6, r6
 80080aa:	e7e6      	b.n	800807a <_printf_i+0x182>
 80080ac:	4615      	mov	r5, r2
 80080ae:	e7bb      	b.n	8008028 <_printf_i+0x130>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	6826      	ldr	r6, [r4, #0]
 80080b4:	6961      	ldr	r1, [r4, #20]
 80080b6:	1d18      	adds	r0, r3, #4
 80080b8:	6028      	str	r0, [r5, #0]
 80080ba:	0635      	lsls	r5, r6, #24
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	d501      	bpl.n	80080c4 <_printf_i+0x1cc>
 80080c0:	6019      	str	r1, [r3, #0]
 80080c2:	e002      	b.n	80080ca <_printf_i+0x1d2>
 80080c4:	0670      	lsls	r0, r6, #25
 80080c6:	d5fb      	bpl.n	80080c0 <_printf_i+0x1c8>
 80080c8:	8019      	strh	r1, [r3, #0]
 80080ca:	2300      	movs	r3, #0
 80080cc:	6123      	str	r3, [r4, #16]
 80080ce:	4615      	mov	r5, r2
 80080d0:	e7ba      	b.n	8008048 <_printf_i+0x150>
 80080d2:	682b      	ldr	r3, [r5, #0]
 80080d4:	1d1a      	adds	r2, r3, #4
 80080d6:	602a      	str	r2, [r5, #0]
 80080d8:	681d      	ldr	r5, [r3, #0]
 80080da:	6862      	ldr	r2, [r4, #4]
 80080dc:	2100      	movs	r1, #0
 80080de:	4628      	mov	r0, r5
 80080e0:	f7f8 f8b6 	bl	8000250 <memchr>
 80080e4:	b108      	cbz	r0, 80080ea <_printf_i+0x1f2>
 80080e6:	1b40      	subs	r0, r0, r5
 80080e8:	6060      	str	r0, [r4, #4]
 80080ea:	6863      	ldr	r3, [r4, #4]
 80080ec:	6123      	str	r3, [r4, #16]
 80080ee:	2300      	movs	r3, #0
 80080f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080f4:	e7a8      	b.n	8008048 <_printf_i+0x150>
 80080f6:	6923      	ldr	r3, [r4, #16]
 80080f8:	462a      	mov	r2, r5
 80080fa:	4649      	mov	r1, r9
 80080fc:	4640      	mov	r0, r8
 80080fe:	47d0      	blx	sl
 8008100:	3001      	adds	r0, #1
 8008102:	d0ab      	beq.n	800805c <_printf_i+0x164>
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	079b      	lsls	r3, r3, #30
 8008108:	d413      	bmi.n	8008132 <_printf_i+0x23a>
 800810a:	68e0      	ldr	r0, [r4, #12]
 800810c:	9b03      	ldr	r3, [sp, #12]
 800810e:	4298      	cmp	r0, r3
 8008110:	bfb8      	it	lt
 8008112:	4618      	movlt	r0, r3
 8008114:	e7a4      	b.n	8008060 <_printf_i+0x168>
 8008116:	2301      	movs	r3, #1
 8008118:	4632      	mov	r2, r6
 800811a:	4649      	mov	r1, r9
 800811c:	4640      	mov	r0, r8
 800811e:	47d0      	blx	sl
 8008120:	3001      	adds	r0, #1
 8008122:	d09b      	beq.n	800805c <_printf_i+0x164>
 8008124:	3501      	adds	r5, #1
 8008126:	68e3      	ldr	r3, [r4, #12]
 8008128:	9903      	ldr	r1, [sp, #12]
 800812a:	1a5b      	subs	r3, r3, r1
 800812c:	42ab      	cmp	r3, r5
 800812e:	dcf2      	bgt.n	8008116 <_printf_i+0x21e>
 8008130:	e7eb      	b.n	800810a <_printf_i+0x212>
 8008132:	2500      	movs	r5, #0
 8008134:	f104 0619 	add.w	r6, r4, #25
 8008138:	e7f5      	b.n	8008126 <_printf_i+0x22e>
 800813a:	bf00      	nop
 800813c:	0800c0ee 	.word	0x0800c0ee
 8008140:	0800c0ff 	.word	0x0800c0ff

08008144 <_scanf_float>:
 8008144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008148:	b087      	sub	sp, #28
 800814a:	4617      	mov	r7, r2
 800814c:	9303      	str	r3, [sp, #12]
 800814e:	688b      	ldr	r3, [r1, #8]
 8008150:	1e5a      	subs	r2, r3, #1
 8008152:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008156:	bf83      	ittte	hi
 8008158:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800815c:	195b      	addhi	r3, r3, r5
 800815e:	9302      	strhi	r3, [sp, #8]
 8008160:	2300      	movls	r3, #0
 8008162:	bf86      	itte	hi
 8008164:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008168:	608b      	strhi	r3, [r1, #8]
 800816a:	9302      	strls	r3, [sp, #8]
 800816c:	680b      	ldr	r3, [r1, #0]
 800816e:	468b      	mov	fp, r1
 8008170:	2500      	movs	r5, #0
 8008172:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008176:	f84b 3b1c 	str.w	r3, [fp], #28
 800817a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800817e:	4680      	mov	r8, r0
 8008180:	460c      	mov	r4, r1
 8008182:	465e      	mov	r6, fp
 8008184:	46aa      	mov	sl, r5
 8008186:	46a9      	mov	r9, r5
 8008188:	9501      	str	r5, [sp, #4]
 800818a:	68a2      	ldr	r2, [r4, #8]
 800818c:	b152      	cbz	r2, 80081a4 <_scanf_float+0x60>
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b4e      	cmp	r3, #78	; 0x4e
 8008194:	d864      	bhi.n	8008260 <_scanf_float+0x11c>
 8008196:	2b40      	cmp	r3, #64	; 0x40
 8008198:	d83c      	bhi.n	8008214 <_scanf_float+0xd0>
 800819a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800819e:	b2c8      	uxtb	r0, r1
 80081a0:	280e      	cmp	r0, #14
 80081a2:	d93a      	bls.n	800821a <_scanf_float+0xd6>
 80081a4:	f1b9 0f00 	cmp.w	r9, #0
 80081a8:	d003      	beq.n	80081b2 <_scanf_float+0x6e>
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081b6:	f1ba 0f01 	cmp.w	sl, #1
 80081ba:	f200 8113 	bhi.w	80083e4 <_scanf_float+0x2a0>
 80081be:	455e      	cmp	r6, fp
 80081c0:	f200 8105 	bhi.w	80083ce <_scanf_float+0x28a>
 80081c4:	2501      	movs	r5, #1
 80081c6:	4628      	mov	r0, r5
 80081c8:	b007      	add	sp, #28
 80081ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80081d2:	2a0d      	cmp	r2, #13
 80081d4:	d8e6      	bhi.n	80081a4 <_scanf_float+0x60>
 80081d6:	a101      	add	r1, pc, #4	; (adr r1, 80081dc <_scanf_float+0x98>)
 80081d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80081dc:	0800831b 	.word	0x0800831b
 80081e0:	080081a5 	.word	0x080081a5
 80081e4:	080081a5 	.word	0x080081a5
 80081e8:	080081a5 	.word	0x080081a5
 80081ec:	0800837b 	.word	0x0800837b
 80081f0:	08008353 	.word	0x08008353
 80081f4:	080081a5 	.word	0x080081a5
 80081f8:	080081a5 	.word	0x080081a5
 80081fc:	08008329 	.word	0x08008329
 8008200:	080081a5 	.word	0x080081a5
 8008204:	080081a5 	.word	0x080081a5
 8008208:	080081a5 	.word	0x080081a5
 800820c:	080081a5 	.word	0x080081a5
 8008210:	080082e1 	.word	0x080082e1
 8008214:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008218:	e7db      	b.n	80081d2 <_scanf_float+0x8e>
 800821a:	290e      	cmp	r1, #14
 800821c:	d8c2      	bhi.n	80081a4 <_scanf_float+0x60>
 800821e:	a001      	add	r0, pc, #4	; (adr r0, 8008224 <_scanf_float+0xe0>)
 8008220:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008224:	080082d3 	.word	0x080082d3
 8008228:	080081a5 	.word	0x080081a5
 800822c:	080082d3 	.word	0x080082d3
 8008230:	08008367 	.word	0x08008367
 8008234:	080081a5 	.word	0x080081a5
 8008238:	08008281 	.word	0x08008281
 800823c:	080082bd 	.word	0x080082bd
 8008240:	080082bd 	.word	0x080082bd
 8008244:	080082bd 	.word	0x080082bd
 8008248:	080082bd 	.word	0x080082bd
 800824c:	080082bd 	.word	0x080082bd
 8008250:	080082bd 	.word	0x080082bd
 8008254:	080082bd 	.word	0x080082bd
 8008258:	080082bd 	.word	0x080082bd
 800825c:	080082bd 	.word	0x080082bd
 8008260:	2b6e      	cmp	r3, #110	; 0x6e
 8008262:	d809      	bhi.n	8008278 <_scanf_float+0x134>
 8008264:	2b60      	cmp	r3, #96	; 0x60
 8008266:	d8b2      	bhi.n	80081ce <_scanf_float+0x8a>
 8008268:	2b54      	cmp	r3, #84	; 0x54
 800826a:	d077      	beq.n	800835c <_scanf_float+0x218>
 800826c:	2b59      	cmp	r3, #89	; 0x59
 800826e:	d199      	bne.n	80081a4 <_scanf_float+0x60>
 8008270:	2d07      	cmp	r5, #7
 8008272:	d197      	bne.n	80081a4 <_scanf_float+0x60>
 8008274:	2508      	movs	r5, #8
 8008276:	e029      	b.n	80082cc <_scanf_float+0x188>
 8008278:	2b74      	cmp	r3, #116	; 0x74
 800827a:	d06f      	beq.n	800835c <_scanf_float+0x218>
 800827c:	2b79      	cmp	r3, #121	; 0x79
 800827e:	e7f6      	b.n	800826e <_scanf_float+0x12a>
 8008280:	6821      	ldr	r1, [r4, #0]
 8008282:	05c8      	lsls	r0, r1, #23
 8008284:	d51a      	bpl.n	80082bc <_scanf_float+0x178>
 8008286:	9b02      	ldr	r3, [sp, #8]
 8008288:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800828c:	6021      	str	r1, [r4, #0]
 800828e:	f109 0901 	add.w	r9, r9, #1
 8008292:	b11b      	cbz	r3, 800829c <_scanf_float+0x158>
 8008294:	3b01      	subs	r3, #1
 8008296:	3201      	adds	r2, #1
 8008298:	9302      	str	r3, [sp, #8]
 800829a:	60a2      	str	r2, [r4, #8]
 800829c:	68a3      	ldr	r3, [r4, #8]
 800829e:	3b01      	subs	r3, #1
 80082a0:	60a3      	str	r3, [r4, #8]
 80082a2:	6923      	ldr	r3, [r4, #16]
 80082a4:	3301      	adds	r3, #1
 80082a6:	6123      	str	r3, [r4, #16]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	607b      	str	r3, [r7, #4]
 80082b0:	f340 8084 	ble.w	80083bc <_scanf_float+0x278>
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	3301      	adds	r3, #1
 80082b8:	603b      	str	r3, [r7, #0]
 80082ba:	e766      	b.n	800818a <_scanf_float+0x46>
 80082bc:	eb1a 0f05 	cmn.w	sl, r5
 80082c0:	f47f af70 	bne.w	80081a4 <_scanf_float+0x60>
 80082c4:	6822      	ldr	r2, [r4, #0]
 80082c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80082ca:	6022      	str	r2, [r4, #0]
 80082cc:	f806 3b01 	strb.w	r3, [r6], #1
 80082d0:	e7e4      	b.n	800829c <_scanf_float+0x158>
 80082d2:	6822      	ldr	r2, [r4, #0]
 80082d4:	0610      	lsls	r0, r2, #24
 80082d6:	f57f af65 	bpl.w	80081a4 <_scanf_float+0x60>
 80082da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082de:	e7f4      	b.n	80082ca <_scanf_float+0x186>
 80082e0:	f1ba 0f00 	cmp.w	sl, #0
 80082e4:	d10e      	bne.n	8008304 <_scanf_float+0x1c0>
 80082e6:	f1b9 0f00 	cmp.w	r9, #0
 80082ea:	d10e      	bne.n	800830a <_scanf_float+0x1c6>
 80082ec:	6822      	ldr	r2, [r4, #0]
 80082ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80082f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80082f6:	d108      	bne.n	800830a <_scanf_float+0x1c6>
 80082f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80082fc:	6022      	str	r2, [r4, #0]
 80082fe:	f04f 0a01 	mov.w	sl, #1
 8008302:	e7e3      	b.n	80082cc <_scanf_float+0x188>
 8008304:	f1ba 0f02 	cmp.w	sl, #2
 8008308:	d055      	beq.n	80083b6 <_scanf_float+0x272>
 800830a:	2d01      	cmp	r5, #1
 800830c:	d002      	beq.n	8008314 <_scanf_float+0x1d0>
 800830e:	2d04      	cmp	r5, #4
 8008310:	f47f af48 	bne.w	80081a4 <_scanf_float+0x60>
 8008314:	3501      	adds	r5, #1
 8008316:	b2ed      	uxtb	r5, r5
 8008318:	e7d8      	b.n	80082cc <_scanf_float+0x188>
 800831a:	f1ba 0f01 	cmp.w	sl, #1
 800831e:	f47f af41 	bne.w	80081a4 <_scanf_float+0x60>
 8008322:	f04f 0a02 	mov.w	sl, #2
 8008326:	e7d1      	b.n	80082cc <_scanf_float+0x188>
 8008328:	b97d      	cbnz	r5, 800834a <_scanf_float+0x206>
 800832a:	f1b9 0f00 	cmp.w	r9, #0
 800832e:	f47f af3c 	bne.w	80081aa <_scanf_float+0x66>
 8008332:	6822      	ldr	r2, [r4, #0]
 8008334:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008338:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800833c:	f47f af39 	bne.w	80081b2 <_scanf_float+0x6e>
 8008340:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008344:	6022      	str	r2, [r4, #0]
 8008346:	2501      	movs	r5, #1
 8008348:	e7c0      	b.n	80082cc <_scanf_float+0x188>
 800834a:	2d03      	cmp	r5, #3
 800834c:	d0e2      	beq.n	8008314 <_scanf_float+0x1d0>
 800834e:	2d05      	cmp	r5, #5
 8008350:	e7de      	b.n	8008310 <_scanf_float+0x1cc>
 8008352:	2d02      	cmp	r5, #2
 8008354:	f47f af26 	bne.w	80081a4 <_scanf_float+0x60>
 8008358:	2503      	movs	r5, #3
 800835a:	e7b7      	b.n	80082cc <_scanf_float+0x188>
 800835c:	2d06      	cmp	r5, #6
 800835e:	f47f af21 	bne.w	80081a4 <_scanf_float+0x60>
 8008362:	2507      	movs	r5, #7
 8008364:	e7b2      	b.n	80082cc <_scanf_float+0x188>
 8008366:	6822      	ldr	r2, [r4, #0]
 8008368:	0591      	lsls	r1, r2, #22
 800836a:	f57f af1b 	bpl.w	80081a4 <_scanf_float+0x60>
 800836e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008372:	6022      	str	r2, [r4, #0]
 8008374:	f8cd 9004 	str.w	r9, [sp, #4]
 8008378:	e7a8      	b.n	80082cc <_scanf_float+0x188>
 800837a:	6822      	ldr	r2, [r4, #0]
 800837c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008380:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008384:	d006      	beq.n	8008394 <_scanf_float+0x250>
 8008386:	0550      	lsls	r0, r2, #21
 8008388:	f57f af0c 	bpl.w	80081a4 <_scanf_float+0x60>
 800838c:	f1b9 0f00 	cmp.w	r9, #0
 8008390:	f43f af0f 	beq.w	80081b2 <_scanf_float+0x6e>
 8008394:	0591      	lsls	r1, r2, #22
 8008396:	bf58      	it	pl
 8008398:	9901      	ldrpl	r1, [sp, #4]
 800839a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800839e:	bf58      	it	pl
 80083a0:	eba9 0101 	subpl.w	r1, r9, r1
 80083a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80083a8:	bf58      	it	pl
 80083aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80083ae:	6022      	str	r2, [r4, #0]
 80083b0:	f04f 0900 	mov.w	r9, #0
 80083b4:	e78a      	b.n	80082cc <_scanf_float+0x188>
 80083b6:	f04f 0a03 	mov.w	sl, #3
 80083ba:	e787      	b.n	80082cc <_scanf_float+0x188>
 80083bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80083c0:	4639      	mov	r1, r7
 80083c2:	4640      	mov	r0, r8
 80083c4:	4798      	blx	r3
 80083c6:	2800      	cmp	r0, #0
 80083c8:	f43f aedf 	beq.w	800818a <_scanf_float+0x46>
 80083cc:	e6ea      	b.n	80081a4 <_scanf_float+0x60>
 80083ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083d6:	463a      	mov	r2, r7
 80083d8:	4640      	mov	r0, r8
 80083da:	4798      	blx	r3
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	3b01      	subs	r3, #1
 80083e0:	6123      	str	r3, [r4, #16]
 80083e2:	e6ec      	b.n	80081be <_scanf_float+0x7a>
 80083e4:	1e6b      	subs	r3, r5, #1
 80083e6:	2b06      	cmp	r3, #6
 80083e8:	d825      	bhi.n	8008436 <_scanf_float+0x2f2>
 80083ea:	2d02      	cmp	r5, #2
 80083ec:	d836      	bhi.n	800845c <_scanf_float+0x318>
 80083ee:	455e      	cmp	r6, fp
 80083f0:	f67f aee8 	bls.w	80081c4 <_scanf_float+0x80>
 80083f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083fc:	463a      	mov	r2, r7
 80083fe:	4640      	mov	r0, r8
 8008400:	4798      	blx	r3
 8008402:	6923      	ldr	r3, [r4, #16]
 8008404:	3b01      	subs	r3, #1
 8008406:	6123      	str	r3, [r4, #16]
 8008408:	e7f1      	b.n	80083ee <_scanf_float+0x2aa>
 800840a:	9802      	ldr	r0, [sp, #8]
 800840c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008410:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008414:	9002      	str	r0, [sp, #8]
 8008416:	463a      	mov	r2, r7
 8008418:	4640      	mov	r0, r8
 800841a:	4798      	blx	r3
 800841c:	6923      	ldr	r3, [r4, #16]
 800841e:	3b01      	subs	r3, #1
 8008420:	6123      	str	r3, [r4, #16]
 8008422:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008426:	fa5f fa8a 	uxtb.w	sl, sl
 800842a:	f1ba 0f02 	cmp.w	sl, #2
 800842e:	d1ec      	bne.n	800840a <_scanf_float+0x2c6>
 8008430:	3d03      	subs	r5, #3
 8008432:	b2ed      	uxtb	r5, r5
 8008434:	1b76      	subs	r6, r6, r5
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	05da      	lsls	r2, r3, #23
 800843a:	d52f      	bpl.n	800849c <_scanf_float+0x358>
 800843c:	055b      	lsls	r3, r3, #21
 800843e:	d510      	bpl.n	8008462 <_scanf_float+0x31e>
 8008440:	455e      	cmp	r6, fp
 8008442:	f67f aebf 	bls.w	80081c4 <_scanf_float+0x80>
 8008446:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800844a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800844e:	463a      	mov	r2, r7
 8008450:	4640      	mov	r0, r8
 8008452:	4798      	blx	r3
 8008454:	6923      	ldr	r3, [r4, #16]
 8008456:	3b01      	subs	r3, #1
 8008458:	6123      	str	r3, [r4, #16]
 800845a:	e7f1      	b.n	8008440 <_scanf_float+0x2fc>
 800845c:	46aa      	mov	sl, r5
 800845e:	9602      	str	r6, [sp, #8]
 8008460:	e7df      	b.n	8008422 <_scanf_float+0x2de>
 8008462:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008466:	6923      	ldr	r3, [r4, #16]
 8008468:	2965      	cmp	r1, #101	; 0x65
 800846a:	f103 33ff 	add.w	r3, r3, #4294967295
 800846e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008472:	6123      	str	r3, [r4, #16]
 8008474:	d00c      	beq.n	8008490 <_scanf_float+0x34c>
 8008476:	2945      	cmp	r1, #69	; 0x45
 8008478:	d00a      	beq.n	8008490 <_scanf_float+0x34c>
 800847a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800847e:	463a      	mov	r2, r7
 8008480:	4640      	mov	r0, r8
 8008482:	4798      	blx	r3
 8008484:	6923      	ldr	r3, [r4, #16]
 8008486:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800848a:	3b01      	subs	r3, #1
 800848c:	1eb5      	subs	r5, r6, #2
 800848e:	6123      	str	r3, [r4, #16]
 8008490:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008494:	463a      	mov	r2, r7
 8008496:	4640      	mov	r0, r8
 8008498:	4798      	blx	r3
 800849a:	462e      	mov	r6, r5
 800849c:	6825      	ldr	r5, [r4, #0]
 800849e:	f015 0510 	ands.w	r5, r5, #16
 80084a2:	d14e      	bne.n	8008542 <_scanf_float+0x3fe>
 80084a4:	7035      	strb	r5, [r6, #0]
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80084ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084b0:	d119      	bne.n	80084e6 <_scanf_float+0x3a2>
 80084b2:	9b01      	ldr	r3, [sp, #4]
 80084b4:	454b      	cmp	r3, r9
 80084b6:	eba3 0209 	sub.w	r2, r3, r9
 80084ba:	d121      	bne.n	8008500 <_scanf_float+0x3bc>
 80084bc:	2200      	movs	r2, #0
 80084be:	4659      	mov	r1, fp
 80084c0:	4640      	mov	r0, r8
 80084c2:	f000 fe4f 	bl	8009164 <_strtod_r>
 80084c6:	6822      	ldr	r2, [r4, #0]
 80084c8:	9b03      	ldr	r3, [sp, #12]
 80084ca:	f012 0f02 	tst.w	r2, #2
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	d021      	beq.n	8008516 <_scanf_float+0x3d2>
 80084d2:	9903      	ldr	r1, [sp, #12]
 80084d4:	1d1a      	adds	r2, r3, #4
 80084d6:	600a      	str	r2, [r1, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	ed83 0b00 	vstr	d0, [r3]
 80084de:	68e3      	ldr	r3, [r4, #12]
 80084e0:	3301      	adds	r3, #1
 80084e2:	60e3      	str	r3, [r4, #12]
 80084e4:	e66f      	b.n	80081c6 <_scanf_float+0x82>
 80084e6:	9b04      	ldr	r3, [sp, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d0e7      	beq.n	80084bc <_scanf_float+0x378>
 80084ec:	9905      	ldr	r1, [sp, #20]
 80084ee:	230a      	movs	r3, #10
 80084f0:	462a      	mov	r2, r5
 80084f2:	3101      	adds	r1, #1
 80084f4:	4640      	mov	r0, r8
 80084f6:	f000 febd 	bl	8009274 <_strtol_r>
 80084fa:	9b04      	ldr	r3, [sp, #16]
 80084fc:	9e05      	ldr	r6, [sp, #20]
 80084fe:	1ac2      	subs	r2, r0, r3
 8008500:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008504:	429e      	cmp	r6, r3
 8008506:	bf28      	it	cs
 8008508:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800850c:	490e      	ldr	r1, [pc, #56]	; (8008548 <_scanf_float+0x404>)
 800850e:	4630      	mov	r0, r6
 8008510:	f000 f824 	bl	800855c <siprintf>
 8008514:	e7d2      	b.n	80084bc <_scanf_float+0x378>
 8008516:	9903      	ldr	r1, [sp, #12]
 8008518:	f012 0f04 	tst.w	r2, #4
 800851c:	f103 0204 	add.w	r2, r3, #4
 8008520:	600a      	str	r2, [r1, #0]
 8008522:	d1d9      	bne.n	80084d8 <_scanf_float+0x394>
 8008524:	eeb4 0b40 	vcmp.f64	d0, d0
 8008528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852c:	681e      	ldr	r6, [r3, #0]
 800852e:	d705      	bvc.n	800853c <_scanf_float+0x3f8>
 8008530:	4806      	ldr	r0, [pc, #24]	; (800854c <_scanf_float+0x408>)
 8008532:	f000 f80d 	bl	8008550 <nanf>
 8008536:	ed86 0a00 	vstr	s0, [r6]
 800853a:	e7d0      	b.n	80084de <_scanf_float+0x39a>
 800853c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008540:	e7f9      	b.n	8008536 <_scanf_float+0x3f2>
 8008542:	2500      	movs	r5, #0
 8008544:	e63f      	b.n	80081c6 <_scanf_float+0x82>
 8008546:	bf00      	nop
 8008548:	0800c110 	.word	0x0800c110
 800854c:	0800c518 	.word	0x0800c518

08008550 <nanf>:
 8008550:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008558 <nanf+0x8>
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	7fc00000 	.word	0x7fc00000

0800855c <siprintf>:
 800855c:	b40e      	push	{r1, r2, r3}
 800855e:	b500      	push	{lr}
 8008560:	b09c      	sub	sp, #112	; 0x70
 8008562:	ab1d      	add	r3, sp, #116	; 0x74
 8008564:	9002      	str	r0, [sp, #8]
 8008566:	9006      	str	r0, [sp, #24]
 8008568:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800856c:	4809      	ldr	r0, [pc, #36]	; (8008594 <siprintf+0x38>)
 800856e:	9107      	str	r1, [sp, #28]
 8008570:	9104      	str	r1, [sp, #16]
 8008572:	4909      	ldr	r1, [pc, #36]	; (8008598 <siprintf+0x3c>)
 8008574:	f853 2b04 	ldr.w	r2, [r3], #4
 8008578:	9105      	str	r1, [sp, #20]
 800857a:	6800      	ldr	r0, [r0, #0]
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	a902      	add	r1, sp, #8
 8008580:	f002 fe20 	bl	800b1c4 <_svfiprintf_r>
 8008584:	9b02      	ldr	r3, [sp, #8]
 8008586:	2200      	movs	r2, #0
 8008588:	701a      	strb	r2, [r3, #0]
 800858a:	b01c      	add	sp, #112	; 0x70
 800858c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008590:	b003      	add	sp, #12
 8008592:	4770      	bx	lr
 8008594:	20000024 	.word	0x20000024
 8008598:	ffff0208 	.word	0xffff0208

0800859c <strncpy>:
 800859c:	b510      	push	{r4, lr}
 800859e:	3901      	subs	r1, #1
 80085a0:	4603      	mov	r3, r0
 80085a2:	b132      	cbz	r2, 80085b2 <strncpy+0x16>
 80085a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80085a8:	f803 4b01 	strb.w	r4, [r3], #1
 80085ac:	3a01      	subs	r2, #1
 80085ae:	2c00      	cmp	r4, #0
 80085b0:	d1f7      	bne.n	80085a2 <strncpy+0x6>
 80085b2:	441a      	add	r2, r3
 80085b4:	2100      	movs	r1, #0
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d100      	bne.n	80085bc <strncpy+0x20>
 80085ba:	bd10      	pop	{r4, pc}
 80085bc:	f803 1b01 	strb.w	r1, [r3], #1
 80085c0:	e7f9      	b.n	80085b6 <strncpy+0x1a>

080085c2 <sulp>:
 80085c2:	b570      	push	{r4, r5, r6, lr}
 80085c4:	4604      	mov	r4, r0
 80085c6:	460d      	mov	r5, r1
 80085c8:	4616      	mov	r6, r2
 80085ca:	ec45 4b10 	vmov	d0, r4, r5
 80085ce:	f002 fb5b 	bl	800ac88 <__ulp>
 80085d2:	b17e      	cbz	r6, 80085f4 <sulp+0x32>
 80085d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80085d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085dc:	2b00      	cmp	r3, #0
 80085de:	dd09      	ble.n	80085f4 <sulp+0x32>
 80085e0:	051b      	lsls	r3, r3, #20
 80085e2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80085e6:	2000      	movs	r0, #0
 80085e8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80085ec:	ec41 0b17 	vmov	d7, r0, r1
 80085f0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80085f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080085f8 <_strtod_l>:
 80085f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	ed2d 8b0e 	vpush	{d8-d14}
 8008600:	b097      	sub	sp, #92	; 0x5c
 8008602:	461f      	mov	r7, r3
 8008604:	2300      	movs	r3, #0
 8008606:	9312      	str	r3, [sp, #72]	; 0x48
 8008608:	4ba1      	ldr	r3, [pc, #644]	; (8008890 <_strtod_l+0x298>)
 800860a:	920d      	str	r2, [sp, #52]	; 0x34
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	9307      	str	r3, [sp, #28]
 8008610:	4604      	mov	r4, r0
 8008612:	4618      	mov	r0, r3
 8008614:	468b      	mov	fp, r1
 8008616:	f7f7 fe13 	bl	8000240 <strlen>
 800861a:	f04f 0800 	mov.w	r8, #0
 800861e:	4605      	mov	r5, r0
 8008620:	f04f 0900 	mov.w	r9, #0
 8008624:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008628:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800862a:	7813      	ldrb	r3, [r2, #0]
 800862c:	2b2b      	cmp	r3, #43	; 0x2b
 800862e:	d04d      	beq.n	80086cc <_strtod_l+0xd4>
 8008630:	d83a      	bhi.n	80086a8 <_strtod_l+0xb0>
 8008632:	2b0d      	cmp	r3, #13
 8008634:	d833      	bhi.n	800869e <_strtod_l+0xa6>
 8008636:	2b08      	cmp	r3, #8
 8008638:	d833      	bhi.n	80086a2 <_strtod_l+0xaa>
 800863a:	2b00      	cmp	r3, #0
 800863c:	d03d      	beq.n	80086ba <_strtod_l+0xc2>
 800863e:	2300      	movs	r3, #0
 8008640:	9308      	str	r3, [sp, #32]
 8008642:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008644:	7833      	ldrb	r3, [r6, #0]
 8008646:	2b30      	cmp	r3, #48	; 0x30
 8008648:	f040 80b0 	bne.w	80087ac <_strtod_l+0x1b4>
 800864c:	7873      	ldrb	r3, [r6, #1]
 800864e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008652:	2b58      	cmp	r3, #88	; 0x58
 8008654:	d167      	bne.n	8008726 <_strtod_l+0x12e>
 8008656:	9b08      	ldr	r3, [sp, #32]
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	ab12      	add	r3, sp, #72	; 0x48
 800865c:	9702      	str	r7, [sp, #8]
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	4a8c      	ldr	r2, [pc, #560]	; (8008894 <_strtod_l+0x29c>)
 8008662:	ab13      	add	r3, sp, #76	; 0x4c
 8008664:	a911      	add	r1, sp, #68	; 0x44
 8008666:	4620      	mov	r0, r4
 8008668:	f001 fc68 	bl	8009f3c <__gethex>
 800866c:	f010 0507 	ands.w	r5, r0, #7
 8008670:	4607      	mov	r7, r0
 8008672:	d005      	beq.n	8008680 <_strtod_l+0x88>
 8008674:	2d06      	cmp	r5, #6
 8008676:	d12b      	bne.n	80086d0 <_strtod_l+0xd8>
 8008678:	3601      	adds	r6, #1
 800867a:	2300      	movs	r3, #0
 800867c:	9611      	str	r6, [sp, #68]	; 0x44
 800867e:	9308      	str	r3, [sp, #32]
 8008680:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008682:	2b00      	cmp	r3, #0
 8008684:	f040 854e 	bne.w	8009124 <_strtod_l+0xb2c>
 8008688:	9b08      	ldr	r3, [sp, #32]
 800868a:	b1e3      	cbz	r3, 80086c6 <_strtod_l+0xce>
 800868c:	ec49 8b17 	vmov	d7, r8, r9
 8008690:	eeb1 0b47 	vneg.f64	d0, d7
 8008694:	b017      	add	sp, #92	; 0x5c
 8008696:	ecbd 8b0e 	vpop	{d8-d14}
 800869a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869e:	2b20      	cmp	r3, #32
 80086a0:	d1cd      	bne.n	800863e <_strtod_l+0x46>
 80086a2:	3201      	adds	r2, #1
 80086a4:	9211      	str	r2, [sp, #68]	; 0x44
 80086a6:	e7bf      	b.n	8008628 <_strtod_l+0x30>
 80086a8:	2b2d      	cmp	r3, #45	; 0x2d
 80086aa:	d1c8      	bne.n	800863e <_strtod_l+0x46>
 80086ac:	2301      	movs	r3, #1
 80086ae:	9308      	str	r3, [sp, #32]
 80086b0:	1c53      	adds	r3, r2, #1
 80086b2:	9311      	str	r3, [sp, #68]	; 0x44
 80086b4:	7853      	ldrb	r3, [r2, #1]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1c3      	bne.n	8008642 <_strtod_l+0x4a>
 80086ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086bc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f040 852d 	bne.w	8009120 <_strtod_l+0xb28>
 80086c6:	ec49 8b10 	vmov	d0, r8, r9
 80086ca:	e7e3      	b.n	8008694 <_strtod_l+0x9c>
 80086cc:	2300      	movs	r3, #0
 80086ce:	e7ee      	b.n	80086ae <_strtod_l+0xb6>
 80086d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086d2:	b13a      	cbz	r2, 80086e4 <_strtod_l+0xec>
 80086d4:	2135      	movs	r1, #53	; 0x35
 80086d6:	a814      	add	r0, sp, #80	; 0x50
 80086d8:	f002 fbde 	bl	800ae98 <__copybits>
 80086dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80086de:	4620      	mov	r0, r4
 80086e0:	f001 ffa0 	bl	800a624 <_Bfree>
 80086e4:	3d01      	subs	r5, #1
 80086e6:	2d04      	cmp	r5, #4
 80086e8:	d806      	bhi.n	80086f8 <_strtod_l+0x100>
 80086ea:	e8df f005 	tbb	[pc, r5]
 80086ee:	030a      	.short	0x030a
 80086f0:	1714      	.short	0x1714
 80086f2:	0a          	.byte	0x0a
 80086f3:	00          	.byte	0x00
 80086f4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80086f8:	073f      	lsls	r7, r7, #28
 80086fa:	d5c1      	bpl.n	8008680 <_strtod_l+0x88>
 80086fc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008700:	e7be      	b.n	8008680 <_strtod_l+0x88>
 8008702:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8008706:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008708:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800870c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008710:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008714:	e7f0      	b.n	80086f8 <_strtod_l+0x100>
 8008716:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8008898 <_strtod_l+0x2a0>
 800871a:	e7ed      	b.n	80086f8 <_strtod_l+0x100>
 800871c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008720:	f04f 38ff 	mov.w	r8, #4294967295
 8008724:	e7e8      	b.n	80086f8 <_strtod_l+0x100>
 8008726:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	9211      	str	r2, [sp, #68]	; 0x44
 800872c:	785b      	ldrb	r3, [r3, #1]
 800872e:	2b30      	cmp	r3, #48	; 0x30
 8008730:	d0f9      	beq.n	8008726 <_strtod_l+0x12e>
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0a4      	beq.n	8008680 <_strtod_l+0x88>
 8008736:	2301      	movs	r3, #1
 8008738:	f04f 0a00 	mov.w	sl, #0
 800873c:	9304      	str	r3, [sp, #16]
 800873e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008740:	930a      	str	r3, [sp, #40]	; 0x28
 8008742:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008746:	f8cd a018 	str.w	sl, [sp, #24]
 800874a:	220a      	movs	r2, #10
 800874c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800874e:	7807      	ldrb	r7, [r0, #0]
 8008750:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008754:	b2d9      	uxtb	r1, r3
 8008756:	2909      	cmp	r1, #9
 8008758:	d92a      	bls.n	80087b0 <_strtod_l+0x1b8>
 800875a:	9907      	ldr	r1, [sp, #28]
 800875c:	462a      	mov	r2, r5
 800875e:	f002 fe4b 	bl	800b3f8 <strncmp>
 8008762:	2800      	cmp	r0, #0
 8008764:	d033      	beq.n	80087ce <_strtod_l+0x1d6>
 8008766:	2000      	movs	r0, #0
 8008768:	9b06      	ldr	r3, [sp, #24]
 800876a:	463a      	mov	r2, r7
 800876c:	4601      	mov	r1, r0
 800876e:	4607      	mov	r7, r0
 8008770:	2a65      	cmp	r2, #101	; 0x65
 8008772:	d001      	beq.n	8008778 <_strtod_l+0x180>
 8008774:	2a45      	cmp	r2, #69	; 0x45
 8008776:	d117      	bne.n	80087a8 <_strtod_l+0x1b0>
 8008778:	b91b      	cbnz	r3, 8008782 <_strtod_l+0x18a>
 800877a:	9b04      	ldr	r3, [sp, #16]
 800877c:	4303      	orrs	r3, r0
 800877e:	d09c      	beq.n	80086ba <_strtod_l+0xc2>
 8008780:	2300      	movs	r3, #0
 8008782:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008786:	f10b 0201 	add.w	r2, fp, #1
 800878a:	9211      	str	r2, [sp, #68]	; 0x44
 800878c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008790:	2a2b      	cmp	r2, #43	; 0x2b
 8008792:	d071      	beq.n	8008878 <_strtod_l+0x280>
 8008794:	2a2d      	cmp	r2, #45	; 0x2d
 8008796:	d077      	beq.n	8008888 <_strtod_l+0x290>
 8008798:	f04f 0e00 	mov.w	lr, #0
 800879c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80087a0:	2d09      	cmp	r5, #9
 80087a2:	d97f      	bls.n	80088a4 <_strtod_l+0x2ac>
 80087a4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80087a8:	2500      	movs	r5, #0
 80087aa:	e09b      	b.n	80088e4 <_strtod_l+0x2ec>
 80087ac:	2300      	movs	r3, #0
 80087ae:	e7c3      	b.n	8008738 <_strtod_l+0x140>
 80087b0:	9906      	ldr	r1, [sp, #24]
 80087b2:	2908      	cmp	r1, #8
 80087b4:	bfdd      	ittte	le
 80087b6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80087b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80087bc:	9309      	strle	r3, [sp, #36]	; 0x24
 80087be:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80087c2:	9b06      	ldr	r3, [sp, #24]
 80087c4:	3001      	adds	r0, #1
 80087c6:	3301      	adds	r3, #1
 80087c8:	9306      	str	r3, [sp, #24]
 80087ca:	9011      	str	r0, [sp, #68]	; 0x44
 80087cc:	e7be      	b.n	800874c <_strtod_l+0x154>
 80087ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087d0:	195a      	adds	r2, r3, r5
 80087d2:	9211      	str	r2, [sp, #68]	; 0x44
 80087d4:	5d5a      	ldrb	r2, [r3, r5]
 80087d6:	9b06      	ldr	r3, [sp, #24]
 80087d8:	b3a3      	cbz	r3, 8008844 <_strtod_l+0x24c>
 80087da:	4607      	mov	r7, r0
 80087dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80087e0:	2909      	cmp	r1, #9
 80087e2:	d912      	bls.n	800880a <_strtod_l+0x212>
 80087e4:	2101      	movs	r1, #1
 80087e6:	e7c3      	b.n	8008770 <_strtod_l+0x178>
 80087e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	9211      	str	r2, [sp, #68]	; 0x44
 80087ee:	785a      	ldrb	r2, [r3, #1]
 80087f0:	3001      	adds	r0, #1
 80087f2:	2a30      	cmp	r2, #48	; 0x30
 80087f4:	d0f8      	beq.n	80087e8 <_strtod_l+0x1f0>
 80087f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80087fa:	2b08      	cmp	r3, #8
 80087fc:	f200 8497 	bhi.w	800912e <_strtod_l+0xb36>
 8008800:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008802:	930a      	str	r3, [sp, #40]	; 0x28
 8008804:	4607      	mov	r7, r0
 8008806:	2000      	movs	r0, #0
 8008808:	4603      	mov	r3, r0
 800880a:	3a30      	subs	r2, #48	; 0x30
 800880c:	f100 0101 	add.w	r1, r0, #1
 8008810:	d012      	beq.n	8008838 <_strtod_l+0x240>
 8008812:	440f      	add	r7, r1
 8008814:	eb00 0c03 	add.w	ip, r0, r3
 8008818:	4619      	mov	r1, r3
 800881a:	250a      	movs	r5, #10
 800881c:	4561      	cmp	r1, ip
 800881e:	d113      	bne.n	8008848 <_strtod_l+0x250>
 8008820:	1819      	adds	r1, r3, r0
 8008822:	2908      	cmp	r1, #8
 8008824:	f103 0301 	add.w	r3, r3, #1
 8008828:	4403      	add	r3, r0
 800882a:	dc1c      	bgt.n	8008866 <_strtod_l+0x26e>
 800882c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800882e:	210a      	movs	r1, #10
 8008830:	fb01 2200 	mla	r2, r1, r0, r2
 8008834:	9209      	str	r2, [sp, #36]	; 0x24
 8008836:	2100      	movs	r1, #0
 8008838:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800883a:	1c50      	adds	r0, r2, #1
 800883c:	9011      	str	r0, [sp, #68]	; 0x44
 800883e:	7852      	ldrb	r2, [r2, #1]
 8008840:	4608      	mov	r0, r1
 8008842:	e7cb      	b.n	80087dc <_strtod_l+0x1e4>
 8008844:	9806      	ldr	r0, [sp, #24]
 8008846:	e7d4      	b.n	80087f2 <_strtod_l+0x1fa>
 8008848:	2908      	cmp	r1, #8
 800884a:	dc04      	bgt.n	8008856 <_strtod_l+0x25e>
 800884c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800884e:	436e      	muls	r6, r5
 8008850:	9609      	str	r6, [sp, #36]	; 0x24
 8008852:	3101      	adds	r1, #1
 8008854:	e7e2      	b.n	800881c <_strtod_l+0x224>
 8008856:	f101 0e01 	add.w	lr, r1, #1
 800885a:	f1be 0f10 	cmp.w	lr, #16
 800885e:	bfd8      	it	le
 8008860:	fb05 fa0a 	mulle.w	sl, r5, sl
 8008864:	e7f5      	b.n	8008852 <_strtod_l+0x25a>
 8008866:	2b10      	cmp	r3, #16
 8008868:	bfdc      	itt	le
 800886a:	210a      	movle	r1, #10
 800886c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8008870:	e7e1      	b.n	8008836 <_strtod_l+0x23e>
 8008872:	2700      	movs	r7, #0
 8008874:	2101      	movs	r1, #1
 8008876:	e780      	b.n	800877a <_strtod_l+0x182>
 8008878:	f04f 0e00 	mov.w	lr, #0
 800887c:	f10b 0202 	add.w	r2, fp, #2
 8008880:	9211      	str	r2, [sp, #68]	; 0x44
 8008882:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8008886:	e789      	b.n	800879c <_strtod_l+0x1a4>
 8008888:	f04f 0e01 	mov.w	lr, #1
 800888c:	e7f6      	b.n	800887c <_strtod_l+0x284>
 800888e:	bf00      	nop
 8008890:	0800c360 	.word	0x0800c360
 8008894:	0800c118 	.word	0x0800c118
 8008898:	7ff00000 	.word	0x7ff00000
 800889c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800889e:	1c55      	adds	r5, r2, #1
 80088a0:	9511      	str	r5, [sp, #68]	; 0x44
 80088a2:	7852      	ldrb	r2, [r2, #1]
 80088a4:	2a30      	cmp	r2, #48	; 0x30
 80088a6:	d0f9      	beq.n	800889c <_strtod_l+0x2a4>
 80088a8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80088ac:	2d08      	cmp	r5, #8
 80088ae:	f63f af7b 	bhi.w	80087a8 <_strtod_l+0x1b0>
 80088b2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80088b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80088b8:	9207      	str	r2, [sp, #28]
 80088ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80088bc:	1c55      	adds	r5, r2, #1
 80088be:	9511      	str	r5, [sp, #68]	; 0x44
 80088c0:	7852      	ldrb	r2, [r2, #1]
 80088c2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80088c6:	2e09      	cmp	r6, #9
 80088c8:	d937      	bls.n	800893a <_strtod_l+0x342>
 80088ca:	9e07      	ldr	r6, [sp, #28]
 80088cc:	1bad      	subs	r5, r5, r6
 80088ce:	2d08      	cmp	r5, #8
 80088d0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80088d4:	dc02      	bgt.n	80088dc <_strtod_l+0x2e4>
 80088d6:	4565      	cmp	r5, ip
 80088d8:	bfa8      	it	ge
 80088da:	4665      	movge	r5, ip
 80088dc:	f1be 0f00 	cmp.w	lr, #0
 80088e0:	d000      	beq.n	80088e4 <_strtod_l+0x2ec>
 80088e2:	426d      	negs	r5, r5
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d14d      	bne.n	8008984 <_strtod_l+0x38c>
 80088e8:	9b04      	ldr	r3, [sp, #16]
 80088ea:	4303      	orrs	r3, r0
 80088ec:	f47f aec8 	bne.w	8008680 <_strtod_l+0x88>
 80088f0:	2900      	cmp	r1, #0
 80088f2:	f47f aee2 	bne.w	80086ba <_strtod_l+0xc2>
 80088f6:	2a69      	cmp	r2, #105	; 0x69
 80088f8:	d027      	beq.n	800894a <_strtod_l+0x352>
 80088fa:	dc24      	bgt.n	8008946 <_strtod_l+0x34e>
 80088fc:	2a49      	cmp	r2, #73	; 0x49
 80088fe:	d024      	beq.n	800894a <_strtod_l+0x352>
 8008900:	2a4e      	cmp	r2, #78	; 0x4e
 8008902:	f47f aeda 	bne.w	80086ba <_strtod_l+0xc2>
 8008906:	4996      	ldr	r1, [pc, #600]	; (8008b60 <_strtod_l+0x568>)
 8008908:	a811      	add	r0, sp, #68	; 0x44
 800890a:	f001 fd6f 	bl	800a3ec <__match>
 800890e:	2800      	cmp	r0, #0
 8008910:	f43f aed3 	beq.w	80086ba <_strtod_l+0xc2>
 8008914:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2b28      	cmp	r3, #40	; 0x28
 800891a:	d12d      	bne.n	8008978 <_strtod_l+0x380>
 800891c:	4991      	ldr	r1, [pc, #580]	; (8008b64 <_strtod_l+0x56c>)
 800891e:	aa14      	add	r2, sp, #80	; 0x50
 8008920:	a811      	add	r0, sp, #68	; 0x44
 8008922:	f001 fd77 	bl	800a414 <__hexnan>
 8008926:	2805      	cmp	r0, #5
 8008928:	d126      	bne.n	8008978 <_strtod_l+0x380>
 800892a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800892c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008930:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008934:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008938:	e6a2      	b.n	8008680 <_strtod_l+0x88>
 800893a:	250a      	movs	r5, #10
 800893c:	fb05 250c 	mla	r5, r5, ip, r2
 8008940:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008944:	e7b9      	b.n	80088ba <_strtod_l+0x2c2>
 8008946:	2a6e      	cmp	r2, #110	; 0x6e
 8008948:	e7db      	b.n	8008902 <_strtod_l+0x30a>
 800894a:	4987      	ldr	r1, [pc, #540]	; (8008b68 <_strtod_l+0x570>)
 800894c:	a811      	add	r0, sp, #68	; 0x44
 800894e:	f001 fd4d 	bl	800a3ec <__match>
 8008952:	2800      	cmp	r0, #0
 8008954:	f43f aeb1 	beq.w	80086ba <_strtod_l+0xc2>
 8008958:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800895a:	4984      	ldr	r1, [pc, #528]	; (8008b6c <_strtod_l+0x574>)
 800895c:	3b01      	subs	r3, #1
 800895e:	a811      	add	r0, sp, #68	; 0x44
 8008960:	9311      	str	r3, [sp, #68]	; 0x44
 8008962:	f001 fd43 	bl	800a3ec <__match>
 8008966:	b910      	cbnz	r0, 800896e <_strtod_l+0x376>
 8008968:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800896a:	3301      	adds	r3, #1
 800896c:	9311      	str	r3, [sp, #68]	; 0x44
 800896e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8008b80 <_strtod_l+0x588>
 8008972:	f04f 0800 	mov.w	r8, #0
 8008976:	e683      	b.n	8008680 <_strtod_l+0x88>
 8008978:	487d      	ldr	r0, [pc, #500]	; (8008b70 <_strtod_l+0x578>)
 800897a:	f002 fd25 	bl	800b3c8 <nan>
 800897e:	ec59 8b10 	vmov	r8, r9, d0
 8008982:	e67d      	b.n	8008680 <_strtod_l+0x88>
 8008984:	1bea      	subs	r2, r5, r7
 8008986:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800898a:	9207      	str	r2, [sp, #28]
 800898c:	9a06      	ldr	r2, [sp, #24]
 800898e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008992:	2a00      	cmp	r2, #0
 8008994:	bf08      	it	eq
 8008996:	461a      	moveq	r2, r3
 8008998:	2b10      	cmp	r3, #16
 800899a:	9206      	str	r2, [sp, #24]
 800899c:	461a      	mov	r2, r3
 800899e:	bfa8      	it	ge
 80089a0:	2210      	movge	r2, #16
 80089a2:	2b09      	cmp	r3, #9
 80089a4:	ec59 8b17 	vmov	r8, r9, d7
 80089a8:	dd0c      	ble.n	80089c4 <_strtod_l+0x3cc>
 80089aa:	4972      	ldr	r1, [pc, #456]	; (8008b74 <_strtod_l+0x57c>)
 80089ac:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80089b0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80089b4:	ee06 aa90 	vmov	s13, sl
 80089b8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80089bc:	eea7 6b05 	vfma.f64	d6, d7, d5
 80089c0:	ec59 8b16 	vmov	r8, r9, d6
 80089c4:	2b0f      	cmp	r3, #15
 80089c6:	dc36      	bgt.n	8008a36 <_strtod_l+0x43e>
 80089c8:	9907      	ldr	r1, [sp, #28]
 80089ca:	2900      	cmp	r1, #0
 80089cc:	f43f ae58 	beq.w	8008680 <_strtod_l+0x88>
 80089d0:	dd23      	ble.n	8008a1a <_strtod_l+0x422>
 80089d2:	2916      	cmp	r1, #22
 80089d4:	dc0b      	bgt.n	80089ee <_strtod_l+0x3f6>
 80089d6:	4b67      	ldr	r3, [pc, #412]	; (8008b74 <_strtod_l+0x57c>)
 80089d8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80089dc:	ed93 7b00 	vldr	d7, [r3]
 80089e0:	ec49 8b16 	vmov	d6, r8, r9
 80089e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80089e8:	ec59 8b17 	vmov	r8, r9, d7
 80089ec:	e648      	b.n	8008680 <_strtod_l+0x88>
 80089ee:	9807      	ldr	r0, [sp, #28]
 80089f0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80089f4:	4281      	cmp	r1, r0
 80089f6:	db1e      	blt.n	8008a36 <_strtod_l+0x43e>
 80089f8:	4a5e      	ldr	r2, [pc, #376]	; (8008b74 <_strtod_l+0x57c>)
 80089fa:	f1c3 030f 	rsb	r3, r3, #15
 80089fe:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008a02:	ed91 7b00 	vldr	d7, [r1]
 8008a06:	ec49 8b16 	vmov	d6, r8, r9
 8008a0a:	1ac3      	subs	r3, r0, r3
 8008a0c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008a10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a14:	ed92 6b00 	vldr	d6, [r2]
 8008a18:	e7e4      	b.n	80089e4 <_strtod_l+0x3ec>
 8008a1a:	9907      	ldr	r1, [sp, #28]
 8008a1c:	3116      	adds	r1, #22
 8008a1e:	db0a      	blt.n	8008a36 <_strtod_l+0x43e>
 8008a20:	4b54      	ldr	r3, [pc, #336]	; (8008b74 <_strtod_l+0x57c>)
 8008a22:	1b7d      	subs	r5, r7, r5
 8008a24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008a28:	ed95 7b00 	vldr	d7, [r5]
 8008a2c:	ec49 8b16 	vmov	d6, r8, r9
 8008a30:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008a34:	e7d8      	b.n	80089e8 <_strtod_l+0x3f0>
 8008a36:	9907      	ldr	r1, [sp, #28]
 8008a38:	1a9a      	subs	r2, r3, r2
 8008a3a:	440a      	add	r2, r1
 8008a3c:	2a00      	cmp	r2, #0
 8008a3e:	dd6f      	ble.n	8008b20 <_strtod_l+0x528>
 8008a40:	f012 000f 	ands.w	r0, r2, #15
 8008a44:	d00a      	beq.n	8008a5c <_strtod_l+0x464>
 8008a46:	494b      	ldr	r1, [pc, #300]	; (8008b74 <_strtod_l+0x57c>)
 8008a48:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008a4c:	ed91 7b00 	vldr	d7, [r1]
 8008a50:	ec49 8b16 	vmov	d6, r8, r9
 8008a54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a58:	ec59 8b17 	vmov	r8, r9, d7
 8008a5c:	f032 020f 	bics.w	r2, r2, #15
 8008a60:	d04f      	beq.n	8008b02 <_strtod_l+0x50a>
 8008a62:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008a66:	dd22      	ble.n	8008aae <_strtod_l+0x4b6>
 8008a68:	2500      	movs	r5, #0
 8008a6a:	462e      	mov	r6, r5
 8008a6c:	9506      	str	r5, [sp, #24]
 8008a6e:	462f      	mov	r7, r5
 8008a70:	2322      	movs	r3, #34	; 0x22
 8008a72:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8008b80 <_strtod_l+0x588>
 8008a76:	6023      	str	r3, [r4, #0]
 8008a78:	f04f 0800 	mov.w	r8, #0
 8008a7c:	9b06      	ldr	r3, [sp, #24]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f43f adfe 	beq.w	8008680 <_strtod_l+0x88>
 8008a84:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008a86:	4620      	mov	r0, r4
 8008a88:	f001 fdcc 	bl	800a624 <_Bfree>
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f001 fdc8 	bl	800a624 <_Bfree>
 8008a94:	4631      	mov	r1, r6
 8008a96:	4620      	mov	r0, r4
 8008a98:	f001 fdc4 	bl	800a624 <_Bfree>
 8008a9c:	9906      	ldr	r1, [sp, #24]
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f001 fdc0 	bl	800a624 <_Bfree>
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f001 fdbc 	bl	800a624 <_Bfree>
 8008aac:	e5e8      	b.n	8008680 <_strtod_l+0x88>
 8008aae:	2000      	movs	r0, #0
 8008ab0:	ec49 8b17 	vmov	d7, r8, r9
 8008ab4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8008b78 <_strtod_l+0x580>
 8008ab8:	1112      	asrs	r2, r2, #4
 8008aba:	4601      	mov	r1, r0
 8008abc:	2a01      	cmp	r2, #1
 8008abe:	dc23      	bgt.n	8008b08 <_strtod_l+0x510>
 8008ac0:	b108      	cbz	r0, 8008ac6 <_strtod_l+0x4ce>
 8008ac2:	ec59 8b17 	vmov	r8, r9, d7
 8008ac6:	4a2c      	ldr	r2, [pc, #176]	; (8008b78 <_strtod_l+0x580>)
 8008ac8:	482c      	ldr	r0, [pc, #176]	; (8008b7c <_strtod_l+0x584>)
 8008aca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008ace:	ed92 7b00 	vldr	d7, [r2]
 8008ad2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008ad6:	ec49 8b16 	vmov	d6, r8, r9
 8008ada:	4a29      	ldr	r2, [pc, #164]	; (8008b80 <_strtod_l+0x588>)
 8008adc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ae0:	ee17 1a90 	vmov	r1, s15
 8008ae4:	400a      	ands	r2, r1
 8008ae6:	4282      	cmp	r2, r0
 8008ae8:	ec59 8b17 	vmov	r8, r9, d7
 8008aec:	d8bc      	bhi.n	8008a68 <_strtod_l+0x470>
 8008aee:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008af2:	4282      	cmp	r2, r0
 8008af4:	bf86      	itte	hi
 8008af6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008b84 <_strtod_l+0x58c>
 8008afa:	f04f 38ff 	movhi.w	r8, #4294967295
 8008afe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008b02:	2200      	movs	r2, #0
 8008b04:	9204      	str	r2, [sp, #16]
 8008b06:	e078      	b.n	8008bfa <_strtod_l+0x602>
 8008b08:	07d6      	lsls	r6, r2, #31
 8008b0a:	d504      	bpl.n	8008b16 <_strtod_l+0x51e>
 8008b0c:	ed9c 6b00 	vldr	d6, [ip]
 8008b10:	2001      	movs	r0, #1
 8008b12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b16:	3101      	adds	r1, #1
 8008b18:	1052      	asrs	r2, r2, #1
 8008b1a:	f10c 0c08 	add.w	ip, ip, #8
 8008b1e:	e7cd      	b.n	8008abc <_strtod_l+0x4c4>
 8008b20:	d0ef      	beq.n	8008b02 <_strtod_l+0x50a>
 8008b22:	4252      	negs	r2, r2
 8008b24:	f012 000f 	ands.w	r0, r2, #15
 8008b28:	d00a      	beq.n	8008b40 <_strtod_l+0x548>
 8008b2a:	4912      	ldr	r1, [pc, #72]	; (8008b74 <_strtod_l+0x57c>)
 8008b2c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008b30:	ed91 7b00 	vldr	d7, [r1]
 8008b34:	ec49 8b16 	vmov	d6, r8, r9
 8008b38:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008b3c:	ec59 8b17 	vmov	r8, r9, d7
 8008b40:	1112      	asrs	r2, r2, #4
 8008b42:	d0de      	beq.n	8008b02 <_strtod_l+0x50a>
 8008b44:	2a1f      	cmp	r2, #31
 8008b46:	dd1f      	ble.n	8008b88 <_strtod_l+0x590>
 8008b48:	2500      	movs	r5, #0
 8008b4a:	462e      	mov	r6, r5
 8008b4c:	9506      	str	r5, [sp, #24]
 8008b4e:	462f      	mov	r7, r5
 8008b50:	2322      	movs	r3, #34	; 0x22
 8008b52:	f04f 0800 	mov.w	r8, #0
 8008b56:	f04f 0900 	mov.w	r9, #0
 8008b5a:	6023      	str	r3, [r4, #0]
 8008b5c:	e78e      	b.n	8008a7c <_strtod_l+0x484>
 8008b5e:	bf00      	nop
 8008b60:	0800c0e9 	.word	0x0800c0e9
 8008b64:	0800c12c 	.word	0x0800c12c
 8008b68:	0800c0e1 	.word	0x0800c0e1
 8008b6c:	0800c26c 	.word	0x0800c26c
 8008b70:	0800c518 	.word	0x0800c518
 8008b74:	0800c3f8 	.word	0x0800c3f8
 8008b78:	0800c3d0 	.word	0x0800c3d0
 8008b7c:	7ca00000 	.word	0x7ca00000
 8008b80:	7ff00000 	.word	0x7ff00000
 8008b84:	7fefffff 	.word	0x7fefffff
 8008b88:	f012 0110 	ands.w	r1, r2, #16
 8008b8c:	bf18      	it	ne
 8008b8e:	216a      	movne	r1, #106	; 0x6a
 8008b90:	9104      	str	r1, [sp, #16]
 8008b92:	ec49 8b17 	vmov	d7, r8, r9
 8008b96:	49be      	ldr	r1, [pc, #760]	; (8008e90 <_strtod_l+0x898>)
 8008b98:	2000      	movs	r0, #0
 8008b9a:	07d6      	lsls	r6, r2, #31
 8008b9c:	d504      	bpl.n	8008ba8 <_strtod_l+0x5b0>
 8008b9e:	ed91 6b00 	vldr	d6, [r1]
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ba8:	1052      	asrs	r2, r2, #1
 8008baa:	f101 0108 	add.w	r1, r1, #8
 8008bae:	d1f4      	bne.n	8008b9a <_strtod_l+0x5a2>
 8008bb0:	b108      	cbz	r0, 8008bb6 <_strtod_l+0x5be>
 8008bb2:	ec59 8b17 	vmov	r8, r9, d7
 8008bb6:	9a04      	ldr	r2, [sp, #16]
 8008bb8:	b1c2      	cbz	r2, 8008bec <_strtod_l+0x5f4>
 8008bba:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8008bbe:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8008bc2:	2a00      	cmp	r2, #0
 8008bc4:	4648      	mov	r0, r9
 8008bc6:	dd11      	ble.n	8008bec <_strtod_l+0x5f4>
 8008bc8:	2a1f      	cmp	r2, #31
 8008bca:	f340 812e 	ble.w	8008e2a <_strtod_l+0x832>
 8008bce:	2a34      	cmp	r2, #52	; 0x34
 8008bd0:	bfde      	ittt	le
 8008bd2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8008bd6:	f04f 32ff 	movle.w	r2, #4294967295
 8008bda:	fa02 f101 	lslle.w	r1, r2, r1
 8008bde:	f04f 0800 	mov.w	r8, #0
 8008be2:	bfcc      	ite	gt
 8008be4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008be8:	ea01 0900 	andle.w	r9, r1, r0
 8008bec:	ec49 8b17 	vmov	d7, r8, r9
 8008bf0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf8:	d0a6      	beq.n	8008b48 <_strtod_l+0x550>
 8008bfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bfc:	9200      	str	r2, [sp, #0]
 8008bfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c00:	9a06      	ldr	r2, [sp, #24]
 8008c02:	4620      	mov	r0, r4
 8008c04:	f001 fd76 	bl	800a6f4 <__s2b>
 8008c08:	9006      	str	r0, [sp, #24]
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f43f af2c 	beq.w	8008a68 <_strtod_l+0x470>
 8008c10:	9b07      	ldr	r3, [sp, #28]
 8008c12:	1b7d      	subs	r5, r7, r5
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	bfb4      	ite	lt
 8008c18:	462b      	movlt	r3, r5
 8008c1a:	2300      	movge	r3, #0
 8008c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1e:	9b07      	ldr	r3, [sp, #28]
 8008c20:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8008e70 <_strtod_l+0x878>
 8008c24:	ed9f ab94 	vldr	d10, [pc, #592]	; 8008e78 <_strtod_l+0x880>
 8008c28:	ed9f bb95 	vldr	d11, [pc, #596]	; 8008e80 <_strtod_l+0x888>
 8008c2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008c30:	2500      	movs	r5, #0
 8008c32:	930c      	str	r3, [sp, #48]	; 0x30
 8008c34:	462e      	mov	r6, r5
 8008c36:	9b06      	ldr	r3, [sp, #24]
 8008c38:	4620      	mov	r0, r4
 8008c3a:	6859      	ldr	r1, [r3, #4]
 8008c3c:	f001 fcb2 	bl	800a5a4 <_Balloc>
 8008c40:	4607      	mov	r7, r0
 8008c42:	2800      	cmp	r0, #0
 8008c44:	f43f af14 	beq.w	8008a70 <_strtod_l+0x478>
 8008c48:	9b06      	ldr	r3, [sp, #24]
 8008c4a:	691a      	ldr	r2, [r3, #16]
 8008c4c:	3202      	adds	r2, #2
 8008c4e:	f103 010c 	add.w	r1, r3, #12
 8008c52:	0092      	lsls	r2, r2, #2
 8008c54:	300c      	adds	r0, #12
 8008c56:	f001 fc97 	bl	800a588 <memcpy>
 8008c5a:	ec49 8b10 	vmov	d0, r8, r9
 8008c5e:	aa14      	add	r2, sp, #80	; 0x50
 8008c60:	a913      	add	r1, sp, #76	; 0x4c
 8008c62:	4620      	mov	r0, r4
 8008c64:	f002 f88c 	bl	800ad80 <__d2b>
 8008c68:	ec49 8b18 	vmov	d8, r8, r9
 8008c6c:	9012      	str	r0, [sp, #72]	; 0x48
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	f43f aefe 	beq.w	8008a70 <_strtod_l+0x478>
 8008c74:	2101      	movs	r1, #1
 8008c76:	4620      	mov	r0, r4
 8008c78:	f001 fdd6 	bl	800a828 <__i2b>
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	f43f aef6 	beq.w	8008a70 <_strtod_l+0x478>
 8008c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c86:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	bfab      	itete	ge
 8008c8c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8008c8e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008c90:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008c94:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008c98:	bfac      	ite	ge
 8008c9a:	eb03 0b02 	addge.w	fp, r3, r2
 8008c9e:	eba2 0a03 	sublt.w	sl, r2, r3
 8008ca2:	9a04      	ldr	r2, [sp, #16]
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	440b      	add	r3, r1
 8008ca8:	4a7a      	ldr	r2, [pc, #488]	; (8008e94 <_strtod_l+0x89c>)
 8008caa:	3b01      	subs	r3, #1
 8008cac:	4293      	cmp	r3, r2
 8008cae:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008cb2:	f280 80cd 	bge.w	8008e50 <_strtod_l+0x858>
 8008cb6:	1ad2      	subs	r2, r2, r3
 8008cb8:	2a1f      	cmp	r2, #31
 8008cba:	eba1 0102 	sub.w	r1, r1, r2
 8008cbe:	f04f 0001 	mov.w	r0, #1
 8008cc2:	f300 80b9 	bgt.w	8008e38 <_strtod_l+0x840>
 8008cc6:	fa00 f302 	lsl.w	r3, r0, r2
 8008cca:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ccc:	2300      	movs	r3, #0
 8008cce:	930a      	str	r3, [sp, #40]	; 0x28
 8008cd0:	eb0b 0301 	add.w	r3, fp, r1
 8008cd4:	9a04      	ldr	r2, [sp, #16]
 8008cd6:	459b      	cmp	fp, r3
 8008cd8:	448a      	add	sl, r1
 8008cda:	4492      	add	sl, r2
 8008cdc:	465a      	mov	r2, fp
 8008cde:	bfa8      	it	ge
 8008ce0:	461a      	movge	r2, r3
 8008ce2:	4552      	cmp	r2, sl
 8008ce4:	bfa8      	it	ge
 8008ce6:	4652      	movge	r2, sl
 8008ce8:	2a00      	cmp	r2, #0
 8008cea:	bfc2      	ittt	gt
 8008cec:	1a9b      	subgt	r3, r3, r2
 8008cee:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008cf2:	ebab 0b02 	subgt.w	fp, fp, r2
 8008cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cf8:	2a00      	cmp	r2, #0
 8008cfa:	dd18      	ble.n	8008d2e <_strtod_l+0x736>
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	4620      	mov	r0, r4
 8008d00:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d02:	f001 fe51 	bl	800a9a8 <__pow5mult>
 8008d06:	4606      	mov	r6, r0
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	f43f aeb1 	beq.w	8008a70 <_strtod_l+0x478>
 8008d0e:	4601      	mov	r1, r0
 8008d10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d12:	4620      	mov	r0, r4
 8008d14:	f001 fd9e 	bl	800a854 <__multiply>
 8008d18:	900e      	str	r0, [sp, #56]	; 0x38
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	f43f aea8 	beq.w	8008a70 <_strtod_l+0x478>
 8008d20:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008d22:	4620      	mov	r0, r4
 8008d24:	f001 fc7e 	bl	800a624 <_Bfree>
 8008d28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d2c:	9212      	str	r2, [sp, #72]	; 0x48
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f300 8093 	bgt.w	8008e5a <_strtod_l+0x862>
 8008d34:	9b07      	ldr	r3, [sp, #28]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	dd08      	ble.n	8008d4c <_strtod_l+0x754>
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f001 fe32 	bl	800a9a8 <__pow5mult>
 8008d44:	4607      	mov	r7, r0
 8008d46:	2800      	cmp	r0, #0
 8008d48:	f43f ae92 	beq.w	8008a70 <_strtod_l+0x478>
 8008d4c:	f1ba 0f00 	cmp.w	sl, #0
 8008d50:	dd08      	ble.n	8008d64 <_strtod_l+0x76c>
 8008d52:	4639      	mov	r1, r7
 8008d54:	4652      	mov	r2, sl
 8008d56:	4620      	mov	r0, r4
 8008d58:	f001 fe80 	bl	800aa5c <__lshift>
 8008d5c:	4607      	mov	r7, r0
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f43f ae86 	beq.w	8008a70 <_strtod_l+0x478>
 8008d64:	f1bb 0f00 	cmp.w	fp, #0
 8008d68:	dd08      	ble.n	8008d7c <_strtod_l+0x784>
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	465a      	mov	r2, fp
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f001 fe74 	bl	800aa5c <__lshift>
 8008d74:	4606      	mov	r6, r0
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f43f ae7a 	beq.w	8008a70 <_strtod_l+0x478>
 8008d7c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008d7e:	463a      	mov	r2, r7
 8008d80:	4620      	mov	r0, r4
 8008d82:	f001 fef7 	bl	800ab74 <__mdiff>
 8008d86:	4605      	mov	r5, r0
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	f43f ae71 	beq.w	8008a70 <_strtod_l+0x478>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008d94:	60c3      	str	r3, [r0, #12]
 8008d96:	4631      	mov	r1, r6
 8008d98:	f001 fed0 	bl	800ab3c <__mcmp>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	da7d      	bge.n	8008e9c <_strtod_l+0x8a4>
 8008da0:	ea5a 0308 	orrs.w	r3, sl, r8
 8008da4:	f040 80a3 	bne.w	8008eee <_strtod_l+0x8f6>
 8008da8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f040 809e 	bne.w	8008eee <_strtod_l+0x8f6>
 8008db2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008db6:	0d1b      	lsrs	r3, r3, #20
 8008db8:	051b      	lsls	r3, r3, #20
 8008dba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008dbe:	f240 8096 	bls.w	8008eee <_strtod_l+0x8f6>
 8008dc2:	696b      	ldr	r3, [r5, #20]
 8008dc4:	b91b      	cbnz	r3, 8008dce <_strtod_l+0x7d6>
 8008dc6:	692b      	ldr	r3, [r5, #16]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	f340 8090 	ble.w	8008eee <_strtod_l+0x8f6>
 8008dce:	4629      	mov	r1, r5
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f001 fe42 	bl	800aa5c <__lshift>
 8008dd8:	4631      	mov	r1, r6
 8008dda:	4605      	mov	r5, r0
 8008ddc:	f001 feae 	bl	800ab3c <__mcmp>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	f340 8084 	ble.w	8008eee <_strtod_l+0x8f6>
 8008de6:	9904      	ldr	r1, [sp, #16]
 8008de8:	4a2b      	ldr	r2, [pc, #172]	; (8008e98 <_strtod_l+0x8a0>)
 8008dea:	464b      	mov	r3, r9
 8008dec:	2900      	cmp	r1, #0
 8008dee:	f000 809d 	beq.w	8008f2c <_strtod_l+0x934>
 8008df2:	ea02 0109 	and.w	r1, r2, r9
 8008df6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008dfa:	f300 8097 	bgt.w	8008f2c <_strtod_l+0x934>
 8008dfe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008e02:	f77f aea5 	ble.w	8008b50 <_strtod_l+0x558>
 8008e06:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008e88 <_strtod_l+0x890>
 8008e0a:	ec49 8b16 	vmov	d6, r8, r9
 8008e0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008e12:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008e16:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	bf08      	it	eq
 8008e1e:	2322      	moveq	r3, #34	; 0x22
 8008e20:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008e24:	bf08      	it	eq
 8008e26:	6023      	streq	r3, [r4, #0]
 8008e28:	e62c      	b.n	8008a84 <_strtod_l+0x48c>
 8008e2a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8008e32:	ea02 0808 	and.w	r8, r2, r8
 8008e36:	e6d9      	b.n	8008bec <_strtod_l+0x5f4>
 8008e38:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008e3c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008e40:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008e44:	33e2      	adds	r3, #226	; 0xe2
 8008e46:	fa00 f303 	lsl.w	r3, r0, r3
 8008e4a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8008e4e:	e73f      	b.n	8008cd0 <_strtod_l+0x6d8>
 8008e50:	2200      	movs	r2, #0
 8008e52:	2301      	movs	r3, #1
 8008e54:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008e58:	e73a      	b.n	8008cd0 <_strtod_l+0x6d8>
 8008e5a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f001 fdfc 	bl	800aa5c <__lshift>
 8008e64:	9012      	str	r0, [sp, #72]	; 0x48
 8008e66:	2800      	cmp	r0, #0
 8008e68:	f47f af64 	bne.w	8008d34 <_strtod_l+0x73c>
 8008e6c:	e600      	b.n	8008a70 <_strtod_l+0x478>
 8008e6e:	bf00      	nop
 8008e70:	94a03595 	.word	0x94a03595
 8008e74:	3fcfffff 	.word	0x3fcfffff
 8008e78:	94a03595 	.word	0x94a03595
 8008e7c:	3fdfffff 	.word	0x3fdfffff
 8008e80:	35afe535 	.word	0x35afe535
 8008e84:	3fe00000 	.word	0x3fe00000
 8008e88:	00000000 	.word	0x00000000
 8008e8c:	39500000 	.word	0x39500000
 8008e90:	0800c140 	.word	0x0800c140
 8008e94:	fffffc02 	.word	0xfffffc02
 8008e98:	7ff00000 	.word	0x7ff00000
 8008e9c:	46cb      	mov	fp, r9
 8008e9e:	d15f      	bne.n	8008f60 <_strtod_l+0x968>
 8008ea0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ea4:	f1ba 0f00 	cmp.w	sl, #0
 8008ea8:	d02a      	beq.n	8008f00 <_strtod_l+0x908>
 8008eaa:	4aa7      	ldr	r2, [pc, #668]	; (8009148 <_strtod_l+0xb50>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d12b      	bne.n	8008f08 <_strtod_l+0x910>
 8008eb0:	9b04      	ldr	r3, [sp, #16]
 8008eb2:	4642      	mov	r2, r8
 8008eb4:	b1fb      	cbz	r3, 8008ef6 <_strtod_l+0x8fe>
 8008eb6:	4ba5      	ldr	r3, [pc, #660]	; (800914c <_strtod_l+0xb54>)
 8008eb8:	ea09 0303 	and.w	r3, r9, r3
 8008ebc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ec4:	d81a      	bhi.n	8008efc <_strtod_l+0x904>
 8008ec6:	0d1b      	lsrs	r3, r3, #20
 8008ec8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d119      	bne.n	8008f08 <_strtod_l+0x910>
 8008ed4:	4b9e      	ldr	r3, [pc, #632]	; (8009150 <_strtod_l+0xb58>)
 8008ed6:	459b      	cmp	fp, r3
 8008ed8:	d102      	bne.n	8008ee0 <_strtod_l+0x8e8>
 8008eda:	3201      	adds	r2, #1
 8008edc:	f43f adc8 	beq.w	8008a70 <_strtod_l+0x478>
 8008ee0:	4b9a      	ldr	r3, [pc, #616]	; (800914c <_strtod_l+0xb54>)
 8008ee2:	ea0b 0303 	and.w	r3, fp, r3
 8008ee6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008eea:	f04f 0800 	mov.w	r8, #0
 8008eee:	9b04      	ldr	r3, [sp, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d188      	bne.n	8008e06 <_strtod_l+0x80e>
 8008ef4:	e5c6      	b.n	8008a84 <_strtod_l+0x48c>
 8008ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8008efa:	e7e9      	b.n	8008ed0 <_strtod_l+0x8d8>
 8008efc:	460b      	mov	r3, r1
 8008efe:	e7e7      	b.n	8008ed0 <_strtod_l+0x8d8>
 8008f00:	ea53 0308 	orrs.w	r3, r3, r8
 8008f04:	f43f af6f 	beq.w	8008de6 <_strtod_l+0x7ee>
 8008f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f0a:	b1cb      	cbz	r3, 8008f40 <_strtod_l+0x948>
 8008f0c:	ea13 0f0b 	tst.w	r3, fp
 8008f10:	d0ed      	beq.n	8008eee <_strtod_l+0x8f6>
 8008f12:	9a04      	ldr	r2, [sp, #16]
 8008f14:	4640      	mov	r0, r8
 8008f16:	4649      	mov	r1, r9
 8008f18:	f1ba 0f00 	cmp.w	sl, #0
 8008f1c:	d014      	beq.n	8008f48 <_strtod_l+0x950>
 8008f1e:	f7ff fb50 	bl	80085c2 <sulp>
 8008f22:	ee38 7b00 	vadd.f64	d7, d8, d0
 8008f26:	ec59 8b17 	vmov	r8, r9, d7
 8008f2a:	e7e0      	b.n	8008eee <_strtod_l+0x8f6>
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008f32:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008f36:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008f3a:	f04f 38ff 	mov.w	r8, #4294967295
 8008f3e:	e7d6      	b.n	8008eee <_strtod_l+0x8f6>
 8008f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f42:	ea13 0f08 	tst.w	r3, r8
 8008f46:	e7e3      	b.n	8008f10 <_strtod_l+0x918>
 8008f48:	f7ff fb3b 	bl	80085c2 <sulp>
 8008f4c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8008f50:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f58:	ec59 8b10 	vmov	r8, r9, d0
 8008f5c:	d1c7      	bne.n	8008eee <_strtod_l+0x8f6>
 8008f5e:	e5f7      	b.n	8008b50 <_strtod_l+0x558>
 8008f60:	4631      	mov	r1, r6
 8008f62:	4628      	mov	r0, r5
 8008f64:	f001 ff68 	bl	800ae38 <__ratio>
 8008f68:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008f6c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f74:	d865      	bhi.n	8009042 <_strtod_l+0xa4a>
 8008f76:	f1ba 0f00 	cmp.w	sl, #0
 8008f7a:	d042      	beq.n	8009002 <_strtod_l+0xa0a>
 8008f7c:	4b75      	ldr	r3, [pc, #468]	; (8009154 <_strtod_l+0xb5c>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8008f84:	4871      	ldr	r0, [pc, #452]	; (800914c <_strtod_l+0xb54>)
 8008f86:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009160 <_strtod_l+0xb68>
 8008f8a:	ea0b 0100 	and.w	r1, fp, r0
 8008f8e:	4561      	cmp	r1, ip
 8008f90:	f040 808e 	bne.w	80090b0 <_strtod_l+0xab8>
 8008f94:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008f98:	ec49 8b10 	vmov	d0, r8, r9
 8008f9c:	ec43 2b1c 	vmov	d12, r2, r3
 8008fa0:	910a      	str	r1, [sp, #40]	; 0x28
 8008fa2:	f001 fe71 	bl	800ac88 <__ulp>
 8008fa6:	ec49 8b1e 	vmov	d14, r8, r9
 8008faa:	4868      	ldr	r0, [pc, #416]	; (800914c <_strtod_l+0xb54>)
 8008fac:	eeac eb00 	vfma.f64	d14, d12, d0
 8008fb0:	ee1e 3a90 	vmov	r3, s29
 8008fb4:	4a68      	ldr	r2, [pc, #416]	; (8009158 <_strtod_l+0xb60>)
 8008fb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008fb8:	4018      	ands	r0, r3
 8008fba:	4290      	cmp	r0, r2
 8008fbc:	ec59 8b1e 	vmov	r8, r9, d14
 8008fc0:	d94e      	bls.n	8009060 <_strtod_l+0xa68>
 8008fc2:	ee18 3a90 	vmov	r3, s17
 8008fc6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d104      	bne.n	8008fd8 <_strtod_l+0x9e0>
 8008fce:	ee18 3a10 	vmov	r3, s16
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	f43f ad4c 	beq.w	8008a70 <_strtod_l+0x478>
 8008fd8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009150 <_strtod_l+0xb58>
 8008fdc:	f04f 38ff 	mov.w	r8, #4294967295
 8008fe0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f001 fb1e 	bl	800a624 <_Bfree>
 8008fe8:	4639      	mov	r1, r7
 8008fea:	4620      	mov	r0, r4
 8008fec:	f001 fb1a 	bl	800a624 <_Bfree>
 8008ff0:	4631      	mov	r1, r6
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f001 fb16 	bl	800a624 <_Bfree>
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f001 fb12 	bl	800a624 <_Bfree>
 8009000:	e619      	b.n	8008c36 <_strtod_l+0x63e>
 8009002:	f1b8 0f00 	cmp.w	r8, #0
 8009006:	d112      	bne.n	800902e <_strtod_l+0xa36>
 8009008:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800900c:	b9b3      	cbnz	r3, 800903c <_strtod_l+0xa44>
 800900e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009012:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800901a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800901e:	bf58      	it	pl
 8009020:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8009024:	eeb1 7b4d 	vneg.f64	d7, d13
 8009028:	ec53 2b17 	vmov	r2, r3, d7
 800902c:	e7aa      	b.n	8008f84 <_strtod_l+0x98c>
 800902e:	f1b8 0f01 	cmp.w	r8, #1
 8009032:	d103      	bne.n	800903c <_strtod_l+0xa44>
 8009034:	f1b9 0f00 	cmp.w	r9, #0
 8009038:	f43f ad8a 	beq.w	8008b50 <_strtod_l+0x558>
 800903c:	4b47      	ldr	r3, [pc, #284]	; (800915c <_strtod_l+0xb64>)
 800903e:	2200      	movs	r2, #0
 8009040:	e79e      	b.n	8008f80 <_strtod_l+0x988>
 8009042:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009046:	ee20 db0d 	vmul.f64	d13, d0, d13
 800904a:	f1ba 0f00 	cmp.w	sl, #0
 800904e:	d104      	bne.n	800905a <_strtod_l+0xa62>
 8009050:	eeb1 7b4d 	vneg.f64	d7, d13
 8009054:	ec53 2b17 	vmov	r2, r3, d7
 8009058:	e794      	b.n	8008f84 <_strtod_l+0x98c>
 800905a:	eeb0 7b4d 	vmov.f64	d7, d13
 800905e:	e7f9      	b.n	8009054 <_strtod_l+0xa5c>
 8009060:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009064:	9b04      	ldr	r3, [sp, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1ba      	bne.n	8008fe0 <_strtod_l+0x9e8>
 800906a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800906e:	0d1b      	lsrs	r3, r3, #20
 8009070:	051b      	lsls	r3, r3, #20
 8009072:	4299      	cmp	r1, r3
 8009074:	d1b4      	bne.n	8008fe0 <_strtod_l+0x9e8>
 8009076:	ec51 0b1d 	vmov	r0, r1, d13
 800907a:	f7f7 fb0d 	bl	8000698 <__aeabi_d2lz>
 800907e:	f7f7 fac5 	bl	800060c <__aeabi_l2d>
 8009082:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009086:	ec41 0b17 	vmov	d7, r0, r1
 800908a:	ea43 0308 	orr.w	r3, r3, r8
 800908e:	ea53 030a 	orrs.w	r3, r3, sl
 8009092:	ee3d db47 	vsub.f64	d13, d13, d7
 8009096:	d03c      	beq.n	8009112 <_strtod_l+0xb1a>
 8009098:	eeb4 dbca 	vcmpe.f64	d13, d10
 800909c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a0:	f53f acf0 	bmi.w	8008a84 <_strtod_l+0x48c>
 80090a4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80090a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ac:	dd98      	ble.n	8008fe0 <_strtod_l+0x9e8>
 80090ae:	e4e9      	b.n	8008a84 <_strtod_l+0x48c>
 80090b0:	9804      	ldr	r0, [sp, #16]
 80090b2:	b1f0      	cbz	r0, 80090f2 <_strtod_l+0xafa>
 80090b4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80090b8:	d81b      	bhi.n	80090f2 <_strtod_l+0xafa>
 80090ba:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009140 <_strtod_l+0xb48>
 80090be:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80090c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c6:	d811      	bhi.n	80090ec <_strtod_l+0xaf4>
 80090c8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80090cc:	ee1d 3a10 	vmov	r3, s26
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	bf38      	it	cc
 80090d4:	2301      	movcc	r3, #1
 80090d6:	ee0d 3a10 	vmov	s26, r3
 80090da:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80090de:	f1ba 0f00 	cmp.w	sl, #0
 80090e2:	d113      	bne.n	800910c <_strtod_l+0xb14>
 80090e4:	eeb1 7b4d 	vneg.f64	d7, d13
 80090e8:	ec53 2b17 	vmov	r2, r3, d7
 80090ec:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80090f0:	1a43      	subs	r3, r0, r1
 80090f2:	eeb0 0b48 	vmov.f64	d0, d8
 80090f6:	ec43 2b1c 	vmov	d12, r2, r3
 80090fa:	910a      	str	r1, [sp, #40]	; 0x28
 80090fc:	f001 fdc4 	bl	800ac88 <__ulp>
 8009100:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009102:	eeac 8b00 	vfma.f64	d8, d12, d0
 8009106:	ec59 8b18 	vmov	r8, r9, d8
 800910a:	e7ab      	b.n	8009064 <_strtod_l+0xa6c>
 800910c:	eeb0 7b4d 	vmov.f64	d7, d13
 8009110:	e7ea      	b.n	80090e8 <_strtod_l+0xaf0>
 8009112:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8009116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800911a:	f57f af61 	bpl.w	8008fe0 <_strtod_l+0x9e8>
 800911e:	e4b1      	b.n	8008a84 <_strtod_l+0x48c>
 8009120:	2300      	movs	r3, #0
 8009122:	9308      	str	r3, [sp, #32]
 8009124:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009126:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009128:	6013      	str	r3, [r2, #0]
 800912a:	f7ff baad 	b.w	8008688 <_strtod_l+0x90>
 800912e:	2a65      	cmp	r2, #101	; 0x65
 8009130:	f43f ab9f 	beq.w	8008872 <_strtod_l+0x27a>
 8009134:	2a45      	cmp	r2, #69	; 0x45
 8009136:	f43f ab9c 	beq.w	8008872 <_strtod_l+0x27a>
 800913a:	2101      	movs	r1, #1
 800913c:	f7ff bbd4 	b.w	80088e8 <_strtod_l+0x2f0>
 8009140:	ffc00000 	.word	0xffc00000
 8009144:	41dfffff 	.word	0x41dfffff
 8009148:	000fffff 	.word	0x000fffff
 800914c:	7ff00000 	.word	0x7ff00000
 8009150:	7fefffff 	.word	0x7fefffff
 8009154:	3ff00000 	.word	0x3ff00000
 8009158:	7c9fffff 	.word	0x7c9fffff
 800915c:	bff00000 	.word	0xbff00000
 8009160:	7fe00000 	.word	0x7fe00000

08009164 <_strtod_r>:
 8009164:	4b01      	ldr	r3, [pc, #4]	; (800916c <_strtod_r+0x8>)
 8009166:	f7ff ba47 	b.w	80085f8 <_strtod_l>
 800916a:	bf00      	nop
 800916c:	2000008c 	.word	0x2000008c

08009170 <_strtol_l.constprop.0>:
 8009170:	2b01      	cmp	r3, #1
 8009172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009176:	d001      	beq.n	800917c <_strtol_l.constprop.0+0xc>
 8009178:	2b24      	cmp	r3, #36	; 0x24
 800917a:	d906      	bls.n	800918a <_strtol_l.constprop.0+0x1a>
 800917c:	f7fe fb6c 	bl	8007858 <__errno>
 8009180:	2316      	movs	r3, #22
 8009182:	6003      	str	r3, [r0, #0]
 8009184:	2000      	movs	r0, #0
 8009186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009270 <_strtol_l.constprop.0+0x100>
 800918e:	460d      	mov	r5, r1
 8009190:	462e      	mov	r6, r5
 8009192:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009196:	f814 700c 	ldrb.w	r7, [r4, ip]
 800919a:	f017 0708 	ands.w	r7, r7, #8
 800919e:	d1f7      	bne.n	8009190 <_strtol_l.constprop.0+0x20>
 80091a0:	2c2d      	cmp	r4, #45	; 0x2d
 80091a2:	d132      	bne.n	800920a <_strtol_l.constprop.0+0x9a>
 80091a4:	782c      	ldrb	r4, [r5, #0]
 80091a6:	2701      	movs	r7, #1
 80091a8:	1cb5      	adds	r5, r6, #2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d05b      	beq.n	8009266 <_strtol_l.constprop.0+0xf6>
 80091ae:	2b10      	cmp	r3, #16
 80091b0:	d109      	bne.n	80091c6 <_strtol_l.constprop.0+0x56>
 80091b2:	2c30      	cmp	r4, #48	; 0x30
 80091b4:	d107      	bne.n	80091c6 <_strtol_l.constprop.0+0x56>
 80091b6:	782c      	ldrb	r4, [r5, #0]
 80091b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80091bc:	2c58      	cmp	r4, #88	; 0x58
 80091be:	d14d      	bne.n	800925c <_strtol_l.constprop.0+0xec>
 80091c0:	786c      	ldrb	r4, [r5, #1]
 80091c2:	2310      	movs	r3, #16
 80091c4:	3502      	adds	r5, #2
 80091c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80091ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80091ce:	f04f 0c00 	mov.w	ip, #0
 80091d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80091d6:	4666      	mov	r6, ip
 80091d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80091dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80091e0:	f1be 0f09 	cmp.w	lr, #9
 80091e4:	d816      	bhi.n	8009214 <_strtol_l.constprop.0+0xa4>
 80091e6:	4674      	mov	r4, lr
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	dd24      	ble.n	8009236 <_strtol_l.constprop.0+0xc6>
 80091ec:	f1bc 0f00 	cmp.w	ip, #0
 80091f0:	db1e      	blt.n	8009230 <_strtol_l.constprop.0+0xc0>
 80091f2:	45b1      	cmp	r9, r6
 80091f4:	d31c      	bcc.n	8009230 <_strtol_l.constprop.0+0xc0>
 80091f6:	d101      	bne.n	80091fc <_strtol_l.constprop.0+0x8c>
 80091f8:	45a2      	cmp	sl, r4
 80091fa:	db19      	blt.n	8009230 <_strtol_l.constprop.0+0xc0>
 80091fc:	fb06 4603 	mla	r6, r6, r3, r4
 8009200:	f04f 0c01 	mov.w	ip, #1
 8009204:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009208:	e7e8      	b.n	80091dc <_strtol_l.constprop.0+0x6c>
 800920a:	2c2b      	cmp	r4, #43	; 0x2b
 800920c:	bf04      	itt	eq
 800920e:	782c      	ldrbeq	r4, [r5, #0]
 8009210:	1cb5      	addeq	r5, r6, #2
 8009212:	e7ca      	b.n	80091aa <_strtol_l.constprop.0+0x3a>
 8009214:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009218:	f1be 0f19 	cmp.w	lr, #25
 800921c:	d801      	bhi.n	8009222 <_strtol_l.constprop.0+0xb2>
 800921e:	3c37      	subs	r4, #55	; 0x37
 8009220:	e7e2      	b.n	80091e8 <_strtol_l.constprop.0+0x78>
 8009222:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009226:	f1be 0f19 	cmp.w	lr, #25
 800922a:	d804      	bhi.n	8009236 <_strtol_l.constprop.0+0xc6>
 800922c:	3c57      	subs	r4, #87	; 0x57
 800922e:	e7db      	b.n	80091e8 <_strtol_l.constprop.0+0x78>
 8009230:	f04f 3cff 	mov.w	ip, #4294967295
 8009234:	e7e6      	b.n	8009204 <_strtol_l.constprop.0+0x94>
 8009236:	f1bc 0f00 	cmp.w	ip, #0
 800923a:	da05      	bge.n	8009248 <_strtol_l.constprop.0+0xd8>
 800923c:	2322      	movs	r3, #34	; 0x22
 800923e:	6003      	str	r3, [r0, #0]
 8009240:	4646      	mov	r6, r8
 8009242:	b942      	cbnz	r2, 8009256 <_strtol_l.constprop.0+0xe6>
 8009244:	4630      	mov	r0, r6
 8009246:	e79e      	b.n	8009186 <_strtol_l.constprop.0+0x16>
 8009248:	b107      	cbz	r7, 800924c <_strtol_l.constprop.0+0xdc>
 800924a:	4276      	negs	r6, r6
 800924c:	2a00      	cmp	r2, #0
 800924e:	d0f9      	beq.n	8009244 <_strtol_l.constprop.0+0xd4>
 8009250:	f1bc 0f00 	cmp.w	ip, #0
 8009254:	d000      	beq.n	8009258 <_strtol_l.constprop.0+0xe8>
 8009256:	1e69      	subs	r1, r5, #1
 8009258:	6011      	str	r1, [r2, #0]
 800925a:	e7f3      	b.n	8009244 <_strtol_l.constprop.0+0xd4>
 800925c:	2430      	movs	r4, #48	; 0x30
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1b1      	bne.n	80091c6 <_strtol_l.constprop.0+0x56>
 8009262:	2308      	movs	r3, #8
 8009264:	e7af      	b.n	80091c6 <_strtol_l.constprop.0+0x56>
 8009266:	2c30      	cmp	r4, #48	; 0x30
 8009268:	d0a5      	beq.n	80091b6 <_strtol_l.constprop.0+0x46>
 800926a:	230a      	movs	r3, #10
 800926c:	e7ab      	b.n	80091c6 <_strtol_l.constprop.0+0x56>
 800926e:	bf00      	nop
 8009270:	0800c169 	.word	0x0800c169

08009274 <_strtol_r>:
 8009274:	f7ff bf7c 	b.w	8009170 <_strtol_l.constprop.0>

08009278 <quorem>:
 8009278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	6903      	ldr	r3, [r0, #16]
 800927e:	690c      	ldr	r4, [r1, #16]
 8009280:	42a3      	cmp	r3, r4
 8009282:	4607      	mov	r7, r0
 8009284:	f2c0 8081 	blt.w	800938a <quorem+0x112>
 8009288:	3c01      	subs	r4, #1
 800928a:	f101 0814 	add.w	r8, r1, #20
 800928e:	f100 0514 	add.w	r5, r0, #20
 8009292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009296:	9301      	str	r3, [sp, #4]
 8009298:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800929c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092a0:	3301      	adds	r3, #1
 80092a2:	429a      	cmp	r2, r3
 80092a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80092a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80092b0:	d331      	bcc.n	8009316 <quorem+0x9e>
 80092b2:	f04f 0e00 	mov.w	lr, #0
 80092b6:	4640      	mov	r0, r8
 80092b8:	46ac      	mov	ip, r5
 80092ba:	46f2      	mov	sl, lr
 80092bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80092c0:	b293      	uxth	r3, r2
 80092c2:	fb06 e303 	mla	r3, r6, r3, lr
 80092c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	ebaa 0303 	sub.w	r3, sl, r3
 80092d0:	f8dc a000 	ldr.w	sl, [ip]
 80092d4:	0c12      	lsrs	r2, r2, #16
 80092d6:	fa13 f38a 	uxtah	r3, r3, sl
 80092da:	fb06 e202 	mla	r2, r6, r2, lr
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	9b00      	ldr	r3, [sp, #0]
 80092e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80092e6:	b292      	uxth	r2, r2
 80092e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80092ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80092f4:	4581      	cmp	r9, r0
 80092f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092fa:	f84c 3b04 	str.w	r3, [ip], #4
 80092fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009302:	d2db      	bcs.n	80092bc <quorem+0x44>
 8009304:	f855 300b 	ldr.w	r3, [r5, fp]
 8009308:	b92b      	cbnz	r3, 8009316 <quorem+0x9e>
 800930a:	9b01      	ldr	r3, [sp, #4]
 800930c:	3b04      	subs	r3, #4
 800930e:	429d      	cmp	r5, r3
 8009310:	461a      	mov	r2, r3
 8009312:	d32e      	bcc.n	8009372 <quorem+0xfa>
 8009314:	613c      	str	r4, [r7, #16]
 8009316:	4638      	mov	r0, r7
 8009318:	f001 fc10 	bl	800ab3c <__mcmp>
 800931c:	2800      	cmp	r0, #0
 800931e:	db24      	blt.n	800936a <quorem+0xf2>
 8009320:	3601      	adds	r6, #1
 8009322:	4628      	mov	r0, r5
 8009324:	f04f 0c00 	mov.w	ip, #0
 8009328:	f858 2b04 	ldr.w	r2, [r8], #4
 800932c:	f8d0 e000 	ldr.w	lr, [r0]
 8009330:	b293      	uxth	r3, r2
 8009332:	ebac 0303 	sub.w	r3, ip, r3
 8009336:	0c12      	lsrs	r2, r2, #16
 8009338:	fa13 f38e 	uxtah	r3, r3, lr
 800933c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009340:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009344:	b29b      	uxth	r3, r3
 8009346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800934a:	45c1      	cmp	r9, r8
 800934c:	f840 3b04 	str.w	r3, [r0], #4
 8009350:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009354:	d2e8      	bcs.n	8009328 <quorem+0xb0>
 8009356:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800935a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800935e:	b922      	cbnz	r2, 800936a <quorem+0xf2>
 8009360:	3b04      	subs	r3, #4
 8009362:	429d      	cmp	r5, r3
 8009364:	461a      	mov	r2, r3
 8009366:	d30a      	bcc.n	800937e <quorem+0x106>
 8009368:	613c      	str	r4, [r7, #16]
 800936a:	4630      	mov	r0, r6
 800936c:	b003      	add	sp, #12
 800936e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009372:	6812      	ldr	r2, [r2, #0]
 8009374:	3b04      	subs	r3, #4
 8009376:	2a00      	cmp	r2, #0
 8009378:	d1cc      	bne.n	8009314 <quorem+0x9c>
 800937a:	3c01      	subs	r4, #1
 800937c:	e7c7      	b.n	800930e <quorem+0x96>
 800937e:	6812      	ldr	r2, [r2, #0]
 8009380:	3b04      	subs	r3, #4
 8009382:	2a00      	cmp	r2, #0
 8009384:	d1f0      	bne.n	8009368 <quorem+0xf0>
 8009386:	3c01      	subs	r4, #1
 8009388:	e7eb      	b.n	8009362 <quorem+0xea>
 800938a:	2000      	movs	r0, #0
 800938c:	e7ee      	b.n	800936c <quorem+0xf4>
	...

08009390 <_dtoa_r>:
 8009390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009394:	ed2d 8b02 	vpush	{d8}
 8009398:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800939a:	b091      	sub	sp, #68	; 0x44
 800939c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80093a0:	ec59 8b10 	vmov	r8, r9, d0
 80093a4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80093a6:	9106      	str	r1, [sp, #24]
 80093a8:	4606      	mov	r6, r0
 80093aa:	9208      	str	r2, [sp, #32]
 80093ac:	930c      	str	r3, [sp, #48]	; 0x30
 80093ae:	b975      	cbnz	r5, 80093ce <_dtoa_r+0x3e>
 80093b0:	2010      	movs	r0, #16
 80093b2:	f001 f8cf 	bl	800a554 <malloc>
 80093b6:	4602      	mov	r2, r0
 80093b8:	6270      	str	r0, [r6, #36]	; 0x24
 80093ba:	b920      	cbnz	r0, 80093c6 <_dtoa_r+0x36>
 80093bc:	4baa      	ldr	r3, [pc, #680]	; (8009668 <_dtoa_r+0x2d8>)
 80093be:	21ea      	movs	r1, #234	; 0xea
 80093c0:	48aa      	ldr	r0, [pc, #680]	; (800966c <_dtoa_r+0x2dc>)
 80093c2:	f002 f83b 	bl	800b43c <__assert_func>
 80093c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80093ca:	6005      	str	r5, [r0, #0]
 80093cc:	60c5      	str	r5, [r0, #12]
 80093ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80093d0:	6819      	ldr	r1, [r3, #0]
 80093d2:	b151      	cbz	r1, 80093ea <_dtoa_r+0x5a>
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	604a      	str	r2, [r1, #4]
 80093d8:	2301      	movs	r3, #1
 80093da:	4093      	lsls	r3, r2
 80093dc:	608b      	str	r3, [r1, #8]
 80093de:	4630      	mov	r0, r6
 80093e0:	f001 f920 	bl	800a624 <_Bfree>
 80093e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80093e6:	2200      	movs	r2, #0
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	f1b9 0300 	subs.w	r3, r9, #0
 80093ee:	bfbb      	ittet	lt
 80093f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80093f4:	9303      	strlt	r3, [sp, #12]
 80093f6:	2300      	movge	r3, #0
 80093f8:	2201      	movlt	r2, #1
 80093fa:	bfac      	ite	ge
 80093fc:	6023      	strge	r3, [r4, #0]
 80093fe:	6022      	strlt	r2, [r4, #0]
 8009400:	4b9b      	ldr	r3, [pc, #620]	; (8009670 <_dtoa_r+0x2e0>)
 8009402:	9c03      	ldr	r4, [sp, #12]
 8009404:	43a3      	bics	r3, r4
 8009406:	d11c      	bne.n	8009442 <_dtoa_r+0xb2>
 8009408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800940a:	f242 730f 	movw	r3, #9999	; 0x270f
 800940e:	6013      	str	r3, [r2, #0]
 8009410:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009414:	ea53 0308 	orrs.w	r3, r3, r8
 8009418:	f000 84fd 	beq.w	8009e16 <_dtoa_r+0xa86>
 800941c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800941e:	b963      	cbnz	r3, 800943a <_dtoa_r+0xaa>
 8009420:	4b94      	ldr	r3, [pc, #592]	; (8009674 <_dtoa_r+0x2e4>)
 8009422:	e01f      	b.n	8009464 <_dtoa_r+0xd4>
 8009424:	4b94      	ldr	r3, [pc, #592]	; (8009678 <_dtoa_r+0x2e8>)
 8009426:	9301      	str	r3, [sp, #4]
 8009428:	3308      	adds	r3, #8
 800942a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	9801      	ldr	r0, [sp, #4]
 8009430:	b011      	add	sp, #68	; 0x44
 8009432:	ecbd 8b02 	vpop	{d8}
 8009436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943a:	4b8e      	ldr	r3, [pc, #568]	; (8009674 <_dtoa_r+0x2e4>)
 800943c:	9301      	str	r3, [sp, #4]
 800943e:	3303      	adds	r3, #3
 8009440:	e7f3      	b.n	800942a <_dtoa_r+0x9a>
 8009442:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009446:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800944a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800944e:	d10b      	bne.n	8009468 <_dtoa_r+0xd8>
 8009450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009452:	2301      	movs	r3, #1
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 84d9 	beq.w	8009e10 <_dtoa_r+0xa80>
 800945e:	4887      	ldr	r0, [pc, #540]	; (800967c <_dtoa_r+0x2ec>)
 8009460:	6018      	str	r0, [r3, #0]
 8009462:	1e43      	subs	r3, r0, #1
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	e7e2      	b.n	800942e <_dtoa_r+0x9e>
 8009468:	a90f      	add	r1, sp, #60	; 0x3c
 800946a:	aa0e      	add	r2, sp, #56	; 0x38
 800946c:	4630      	mov	r0, r6
 800946e:	eeb0 0b48 	vmov.f64	d0, d8
 8009472:	f001 fc85 	bl	800ad80 <__d2b>
 8009476:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800947a:	4605      	mov	r5, r0
 800947c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800947e:	2900      	cmp	r1, #0
 8009480:	d046      	beq.n	8009510 <_dtoa_r+0x180>
 8009482:	ee18 4a90 	vmov	r4, s17
 8009486:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800948a:	ec53 2b18 	vmov	r2, r3, d8
 800948e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009492:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009496:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800949a:	2400      	movs	r4, #0
 800949c:	ec43 2b16 	vmov	d6, r2, r3
 80094a0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80094a4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009650 <_dtoa_r+0x2c0>
 80094a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80094ac:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009658 <_dtoa_r+0x2c8>
 80094b0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80094b4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009660 <_dtoa_r+0x2d0>
 80094b8:	ee07 1a90 	vmov	s15, r1
 80094bc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80094c0:	eeb0 7b46 	vmov.f64	d7, d6
 80094c4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80094c8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80094cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80094d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d4:	ee16 ba90 	vmov	fp, s13
 80094d8:	940a      	str	r4, [sp, #40]	; 0x28
 80094da:	d508      	bpl.n	80094ee <_dtoa_r+0x15e>
 80094dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80094e0:	eeb4 6b47 	vcmp.f64	d6, d7
 80094e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094e8:	bf18      	it	ne
 80094ea:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80094ee:	f1bb 0f16 	cmp.w	fp, #22
 80094f2:	d82f      	bhi.n	8009554 <_dtoa_r+0x1c4>
 80094f4:	4b62      	ldr	r3, [pc, #392]	; (8009680 <_dtoa_r+0x2f0>)
 80094f6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80094fa:	ed93 7b00 	vldr	d7, [r3]
 80094fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009506:	d501      	bpl.n	800950c <_dtoa_r+0x17c>
 8009508:	f10b 3bff 	add.w	fp, fp, #4294967295
 800950c:	2300      	movs	r3, #0
 800950e:	e022      	b.n	8009556 <_dtoa_r+0x1c6>
 8009510:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009512:	4401      	add	r1, r0
 8009514:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009518:	2b20      	cmp	r3, #32
 800951a:	bfc1      	itttt	gt
 800951c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009520:	fa04 f303 	lslgt.w	r3, r4, r3
 8009524:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009528:	fa28 f804 	lsrgt.w	r8, r8, r4
 800952c:	bfd6      	itet	le
 800952e:	f1c3 0320 	rsble	r3, r3, #32
 8009532:	ea43 0808 	orrgt.w	r8, r3, r8
 8009536:	fa08 f803 	lslle.w	r8, r8, r3
 800953a:	ee07 8a90 	vmov	s15, r8
 800953e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009542:	3901      	subs	r1, #1
 8009544:	ee17 4a90 	vmov	r4, s15
 8009548:	ec53 2b17 	vmov	r2, r3, d7
 800954c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009550:	2401      	movs	r4, #1
 8009552:	e7a3      	b.n	800949c <_dtoa_r+0x10c>
 8009554:	2301      	movs	r3, #1
 8009556:	930b      	str	r3, [sp, #44]	; 0x2c
 8009558:	1a43      	subs	r3, r0, r1
 800955a:	1e5a      	subs	r2, r3, #1
 800955c:	bf45      	ittet	mi
 800955e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009562:	9304      	strmi	r3, [sp, #16]
 8009564:	2300      	movpl	r3, #0
 8009566:	2300      	movmi	r3, #0
 8009568:	9205      	str	r2, [sp, #20]
 800956a:	bf54      	ite	pl
 800956c:	9304      	strpl	r3, [sp, #16]
 800956e:	9305      	strmi	r3, [sp, #20]
 8009570:	f1bb 0f00 	cmp.w	fp, #0
 8009574:	db18      	blt.n	80095a8 <_dtoa_r+0x218>
 8009576:	9b05      	ldr	r3, [sp, #20]
 8009578:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800957c:	445b      	add	r3, fp
 800957e:	9305      	str	r3, [sp, #20]
 8009580:	2300      	movs	r3, #0
 8009582:	9a06      	ldr	r2, [sp, #24]
 8009584:	2a09      	cmp	r2, #9
 8009586:	d849      	bhi.n	800961c <_dtoa_r+0x28c>
 8009588:	2a05      	cmp	r2, #5
 800958a:	bfc4      	itt	gt
 800958c:	3a04      	subgt	r2, #4
 800958e:	9206      	strgt	r2, [sp, #24]
 8009590:	9a06      	ldr	r2, [sp, #24]
 8009592:	f1a2 0202 	sub.w	r2, r2, #2
 8009596:	bfcc      	ite	gt
 8009598:	2400      	movgt	r4, #0
 800959a:	2401      	movle	r4, #1
 800959c:	2a03      	cmp	r2, #3
 800959e:	d848      	bhi.n	8009632 <_dtoa_r+0x2a2>
 80095a0:	e8df f002 	tbb	[pc, r2]
 80095a4:	3a2c2e0b 	.word	0x3a2c2e0b
 80095a8:	9b04      	ldr	r3, [sp, #16]
 80095aa:	2200      	movs	r2, #0
 80095ac:	eba3 030b 	sub.w	r3, r3, fp
 80095b0:	9304      	str	r3, [sp, #16]
 80095b2:	9209      	str	r2, [sp, #36]	; 0x24
 80095b4:	f1cb 0300 	rsb	r3, fp, #0
 80095b8:	e7e3      	b.n	8009582 <_dtoa_r+0x1f2>
 80095ba:	2200      	movs	r2, #0
 80095bc:	9207      	str	r2, [sp, #28]
 80095be:	9a08      	ldr	r2, [sp, #32]
 80095c0:	2a00      	cmp	r2, #0
 80095c2:	dc39      	bgt.n	8009638 <_dtoa_r+0x2a8>
 80095c4:	f04f 0a01 	mov.w	sl, #1
 80095c8:	46d1      	mov	r9, sl
 80095ca:	4652      	mov	r2, sl
 80095cc:	f8cd a020 	str.w	sl, [sp, #32]
 80095d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80095d2:	2100      	movs	r1, #0
 80095d4:	6079      	str	r1, [r7, #4]
 80095d6:	2004      	movs	r0, #4
 80095d8:	f100 0c14 	add.w	ip, r0, #20
 80095dc:	4594      	cmp	ip, r2
 80095de:	6879      	ldr	r1, [r7, #4]
 80095e0:	d92f      	bls.n	8009642 <_dtoa_r+0x2b2>
 80095e2:	4630      	mov	r0, r6
 80095e4:	930d      	str	r3, [sp, #52]	; 0x34
 80095e6:	f000 ffdd 	bl	800a5a4 <_Balloc>
 80095ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095ec:	9001      	str	r0, [sp, #4]
 80095ee:	4602      	mov	r2, r0
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d149      	bne.n	8009688 <_dtoa_r+0x2f8>
 80095f4:	4b23      	ldr	r3, [pc, #140]	; (8009684 <_dtoa_r+0x2f4>)
 80095f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80095fa:	e6e1      	b.n	80093c0 <_dtoa_r+0x30>
 80095fc:	2201      	movs	r2, #1
 80095fe:	e7dd      	b.n	80095bc <_dtoa_r+0x22c>
 8009600:	2200      	movs	r2, #0
 8009602:	9207      	str	r2, [sp, #28]
 8009604:	9a08      	ldr	r2, [sp, #32]
 8009606:	eb0b 0a02 	add.w	sl, fp, r2
 800960a:	f10a 0901 	add.w	r9, sl, #1
 800960e:	464a      	mov	r2, r9
 8009610:	2a01      	cmp	r2, #1
 8009612:	bfb8      	it	lt
 8009614:	2201      	movlt	r2, #1
 8009616:	e7db      	b.n	80095d0 <_dtoa_r+0x240>
 8009618:	2201      	movs	r2, #1
 800961a:	e7f2      	b.n	8009602 <_dtoa_r+0x272>
 800961c:	2401      	movs	r4, #1
 800961e:	2200      	movs	r2, #0
 8009620:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009624:	f04f 3aff 	mov.w	sl, #4294967295
 8009628:	2100      	movs	r1, #0
 800962a:	46d1      	mov	r9, sl
 800962c:	2212      	movs	r2, #18
 800962e:	9108      	str	r1, [sp, #32]
 8009630:	e7ce      	b.n	80095d0 <_dtoa_r+0x240>
 8009632:	2201      	movs	r2, #1
 8009634:	9207      	str	r2, [sp, #28]
 8009636:	e7f5      	b.n	8009624 <_dtoa_r+0x294>
 8009638:	f8dd a020 	ldr.w	sl, [sp, #32]
 800963c:	46d1      	mov	r9, sl
 800963e:	4652      	mov	r2, sl
 8009640:	e7c6      	b.n	80095d0 <_dtoa_r+0x240>
 8009642:	3101      	adds	r1, #1
 8009644:	6079      	str	r1, [r7, #4]
 8009646:	0040      	lsls	r0, r0, #1
 8009648:	e7c6      	b.n	80095d8 <_dtoa_r+0x248>
 800964a:	bf00      	nop
 800964c:	f3af 8000 	nop.w
 8009650:	636f4361 	.word	0x636f4361
 8009654:	3fd287a7 	.word	0x3fd287a7
 8009658:	8b60c8b3 	.word	0x8b60c8b3
 800965c:	3fc68a28 	.word	0x3fc68a28
 8009660:	509f79fb 	.word	0x509f79fb
 8009664:	3fd34413 	.word	0x3fd34413
 8009668:	0800c276 	.word	0x0800c276
 800966c:	0800c28d 	.word	0x0800c28d
 8009670:	7ff00000 	.word	0x7ff00000
 8009674:	0800c272 	.word	0x0800c272
 8009678:	0800c269 	.word	0x0800c269
 800967c:	0800c0ed 	.word	0x0800c0ed
 8009680:	0800c3f8 	.word	0x0800c3f8
 8009684:	0800c2e8 	.word	0x0800c2e8
 8009688:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800968a:	9901      	ldr	r1, [sp, #4]
 800968c:	6011      	str	r1, [r2, #0]
 800968e:	f1b9 0f0e 	cmp.w	r9, #14
 8009692:	d86c      	bhi.n	800976e <_dtoa_r+0x3de>
 8009694:	2c00      	cmp	r4, #0
 8009696:	d06a      	beq.n	800976e <_dtoa_r+0x3de>
 8009698:	f1bb 0f00 	cmp.w	fp, #0
 800969c:	f340 80a0 	ble.w	80097e0 <_dtoa_r+0x450>
 80096a0:	49c1      	ldr	r1, [pc, #772]	; (80099a8 <_dtoa_r+0x618>)
 80096a2:	f00b 020f 	and.w	r2, fp, #15
 80096a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80096aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80096ae:	ed92 7b00 	vldr	d7, [r2]
 80096b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80096b6:	f000 8087 	beq.w	80097c8 <_dtoa_r+0x438>
 80096ba:	4abc      	ldr	r2, [pc, #752]	; (80099ac <_dtoa_r+0x61c>)
 80096bc:	ed92 6b08 	vldr	d6, [r2, #32]
 80096c0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80096c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80096c8:	f001 010f 	and.w	r1, r1, #15
 80096cc:	2203      	movs	r2, #3
 80096ce:	48b7      	ldr	r0, [pc, #732]	; (80099ac <_dtoa_r+0x61c>)
 80096d0:	2900      	cmp	r1, #0
 80096d2:	d17b      	bne.n	80097cc <_dtoa_r+0x43c>
 80096d4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80096d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80096dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80096e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096e2:	2900      	cmp	r1, #0
 80096e4:	f000 80a2 	beq.w	800982c <_dtoa_r+0x49c>
 80096e8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80096ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80096f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096f8:	f140 8098 	bpl.w	800982c <_dtoa_r+0x49c>
 80096fc:	f1b9 0f00 	cmp.w	r9, #0
 8009700:	f000 8094 	beq.w	800982c <_dtoa_r+0x49c>
 8009704:	f1ba 0f00 	cmp.w	sl, #0
 8009708:	dd2f      	ble.n	800976a <_dtoa_r+0x3da>
 800970a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800970e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009712:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009716:	f10b 37ff 	add.w	r7, fp, #4294967295
 800971a:	3201      	adds	r2, #1
 800971c:	4650      	mov	r0, sl
 800971e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009722:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009726:	ee07 2a90 	vmov	s15, r2
 800972a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800972e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009732:	ee15 4a90 	vmov	r4, s11
 8009736:	ec52 1b15 	vmov	r1, r2, d5
 800973a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800973e:	2800      	cmp	r0, #0
 8009740:	d177      	bne.n	8009832 <_dtoa_r+0x4a2>
 8009742:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009746:	ee36 6b47 	vsub.f64	d6, d6, d7
 800974a:	ec42 1b17 	vmov	d7, r1, r2
 800974e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009756:	f300 8263 	bgt.w	8009c20 <_dtoa_r+0x890>
 800975a:	eeb1 7b47 	vneg.f64	d7, d7
 800975e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009766:	f100 8258 	bmi.w	8009c1a <_dtoa_r+0x88a>
 800976a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800976e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009770:	2a00      	cmp	r2, #0
 8009772:	f2c0 811d 	blt.w	80099b0 <_dtoa_r+0x620>
 8009776:	f1bb 0f0e 	cmp.w	fp, #14
 800977a:	f300 8119 	bgt.w	80099b0 <_dtoa_r+0x620>
 800977e:	4b8a      	ldr	r3, [pc, #552]	; (80099a8 <_dtoa_r+0x618>)
 8009780:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009784:	ed93 6b00 	vldr	d6, [r3]
 8009788:	9b08      	ldr	r3, [sp, #32]
 800978a:	2b00      	cmp	r3, #0
 800978c:	f280 80b7 	bge.w	80098fe <_dtoa_r+0x56e>
 8009790:	f1b9 0f00 	cmp.w	r9, #0
 8009794:	f300 80b3 	bgt.w	80098fe <_dtoa_r+0x56e>
 8009798:	f040 823f 	bne.w	8009c1a <_dtoa_r+0x88a>
 800979c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80097a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80097a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80097ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b0:	464c      	mov	r4, r9
 80097b2:	464f      	mov	r7, r9
 80097b4:	f280 8215 	bge.w	8009be2 <_dtoa_r+0x852>
 80097b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80097bc:	2331      	movs	r3, #49	; 0x31
 80097be:	f808 3b01 	strb.w	r3, [r8], #1
 80097c2:	f10b 0b01 	add.w	fp, fp, #1
 80097c6:	e211      	b.n	8009bec <_dtoa_r+0x85c>
 80097c8:	2202      	movs	r2, #2
 80097ca:	e780      	b.n	80096ce <_dtoa_r+0x33e>
 80097cc:	07cc      	lsls	r4, r1, #31
 80097ce:	d504      	bpl.n	80097da <_dtoa_r+0x44a>
 80097d0:	ed90 6b00 	vldr	d6, [r0]
 80097d4:	3201      	adds	r2, #1
 80097d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80097da:	1049      	asrs	r1, r1, #1
 80097dc:	3008      	adds	r0, #8
 80097de:	e777      	b.n	80096d0 <_dtoa_r+0x340>
 80097e0:	d022      	beq.n	8009828 <_dtoa_r+0x498>
 80097e2:	f1cb 0100 	rsb	r1, fp, #0
 80097e6:	4a70      	ldr	r2, [pc, #448]	; (80099a8 <_dtoa_r+0x618>)
 80097e8:	f001 000f 	and.w	r0, r1, #15
 80097ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80097f0:	ed92 7b00 	vldr	d7, [r2]
 80097f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80097f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80097fc:	486b      	ldr	r0, [pc, #428]	; (80099ac <_dtoa_r+0x61c>)
 80097fe:	1109      	asrs	r1, r1, #4
 8009800:	2400      	movs	r4, #0
 8009802:	2202      	movs	r2, #2
 8009804:	b929      	cbnz	r1, 8009812 <_dtoa_r+0x482>
 8009806:	2c00      	cmp	r4, #0
 8009808:	f43f af6a 	beq.w	80096e0 <_dtoa_r+0x350>
 800980c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009810:	e766      	b.n	80096e0 <_dtoa_r+0x350>
 8009812:	07cf      	lsls	r7, r1, #31
 8009814:	d505      	bpl.n	8009822 <_dtoa_r+0x492>
 8009816:	ed90 6b00 	vldr	d6, [r0]
 800981a:	3201      	adds	r2, #1
 800981c:	2401      	movs	r4, #1
 800981e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009822:	1049      	asrs	r1, r1, #1
 8009824:	3008      	adds	r0, #8
 8009826:	e7ed      	b.n	8009804 <_dtoa_r+0x474>
 8009828:	2202      	movs	r2, #2
 800982a:	e759      	b.n	80096e0 <_dtoa_r+0x350>
 800982c:	465f      	mov	r7, fp
 800982e:	4648      	mov	r0, r9
 8009830:	e775      	b.n	800971e <_dtoa_r+0x38e>
 8009832:	ec42 1b17 	vmov	d7, r1, r2
 8009836:	4a5c      	ldr	r2, [pc, #368]	; (80099a8 <_dtoa_r+0x618>)
 8009838:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800983c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009840:	9a01      	ldr	r2, [sp, #4]
 8009842:	1814      	adds	r4, r2, r0
 8009844:	9a07      	ldr	r2, [sp, #28]
 8009846:	b352      	cbz	r2, 800989e <_dtoa_r+0x50e>
 8009848:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800984c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009850:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009854:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009858:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800985c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009860:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009864:	ee14 2a90 	vmov	r2, s9
 8009868:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800986c:	3230      	adds	r2, #48	; 0x30
 800986e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009872:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800987a:	f808 2b01 	strb.w	r2, [r8], #1
 800987e:	d439      	bmi.n	80098f4 <_dtoa_r+0x564>
 8009880:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009884:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800988c:	d472      	bmi.n	8009974 <_dtoa_r+0x5e4>
 800988e:	45a0      	cmp	r8, r4
 8009890:	f43f af6b 	beq.w	800976a <_dtoa_r+0x3da>
 8009894:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009898:	ee26 6b03 	vmul.f64	d6, d6, d3
 800989c:	e7e0      	b.n	8009860 <_dtoa_r+0x4d0>
 800989e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80098a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80098a6:	4621      	mov	r1, r4
 80098a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80098ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80098b0:	ee14 2a90 	vmov	r2, s9
 80098b4:	3230      	adds	r2, #48	; 0x30
 80098b6:	f808 2b01 	strb.w	r2, [r8], #1
 80098ba:	45a0      	cmp	r8, r4
 80098bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80098c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80098c4:	d118      	bne.n	80098f8 <_dtoa_r+0x568>
 80098c6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80098ca:	ee37 4b05 	vadd.f64	d4, d7, d5
 80098ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80098d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098d6:	dc4d      	bgt.n	8009974 <_dtoa_r+0x5e4>
 80098d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80098dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80098e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e4:	f57f af41 	bpl.w	800976a <_dtoa_r+0x3da>
 80098e8:	4688      	mov	r8, r1
 80098ea:	3901      	subs	r1, #1
 80098ec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80098f0:	2b30      	cmp	r3, #48	; 0x30
 80098f2:	d0f9      	beq.n	80098e8 <_dtoa_r+0x558>
 80098f4:	46bb      	mov	fp, r7
 80098f6:	e02a      	b.n	800994e <_dtoa_r+0x5be>
 80098f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80098fc:	e7d6      	b.n	80098ac <_dtoa_r+0x51c>
 80098fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009902:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009906:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800990a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800990e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009912:	ee15 3a10 	vmov	r3, s10
 8009916:	3330      	adds	r3, #48	; 0x30
 8009918:	f808 3b01 	strb.w	r3, [r8], #1
 800991c:	9b01      	ldr	r3, [sp, #4]
 800991e:	eba8 0303 	sub.w	r3, r8, r3
 8009922:	4599      	cmp	r9, r3
 8009924:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009928:	eea3 7b46 	vfms.f64	d7, d3, d6
 800992c:	d133      	bne.n	8009996 <_dtoa_r+0x606>
 800992e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009932:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800993a:	dc1a      	bgt.n	8009972 <_dtoa_r+0x5e2>
 800993c:	eeb4 7b46 	vcmp.f64	d7, d6
 8009940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009944:	d103      	bne.n	800994e <_dtoa_r+0x5be>
 8009946:	ee15 3a10 	vmov	r3, s10
 800994a:	07d9      	lsls	r1, r3, #31
 800994c:	d411      	bmi.n	8009972 <_dtoa_r+0x5e2>
 800994e:	4629      	mov	r1, r5
 8009950:	4630      	mov	r0, r6
 8009952:	f000 fe67 	bl	800a624 <_Bfree>
 8009956:	2300      	movs	r3, #0
 8009958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800995a:	f888 3000 	strb.w	r3, [r8]
 800995e:	f10b 0301 	add.w	r3, fp, #1
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009966:	2b00      	cmp	r3, #0
 8009968:	f43f ad61 	beq.w	800942e <_dtoa_r+0x9e>
 800996c:	f8c3 8000 	str.w	r8, [r3]
 8009970:	e55d      	b.n	800942e <_dtoa_r+0x9e>
 8009972:	465f      	mov	r7, fp
 8009974:	4643      	mov	r3, r8
 8009976:	4698      	mov	r8, r3
 8009978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800997c:	2a39      	cmp	r2, #57	; 0x39
 800997e:	d106      	bne.n	800998e <_dtoa_r+0x5fe>
 8009980:	9a01      	ldr	r2, [sp, #4]
 8009982:	429a      	cmp	r2, r3
 8009984:	d1f7      	bne.n	8009976 <_dtoa_r+0x5e6>
 8009986:	9901      	ldr	r1, [sp, #4]
 8009988:	2230      	movs	r2, #48	; 0x30
 800998a:	3701      	adds	r7, #1
 800998c:	700a      	strb	r2, [r1, #0]
 800998e:	781a      	ldrb	r2, [r3, #0]
 8009990:	3201      	adds	r2, #1
 8009992:	701a      	strb	r2, [r3, #0]
 8009994:	e7ae      	b.n	80098f4 <_dtoa_r+0x564>
 8009996:	ee27 7b04 	vmul.f64	d7, d7, d4
 800999a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800999e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a2:	d1b2      	bne.n	800990a <_dtoa_r+0x57a>
 80099a4:	e7d3      	b.n	800994e <_dtoa_r+0x5be>
 80099a6:	bf00      	nop
 80099a8:	0800c3f8 	.word	0x0800c3f8
 80099ac:	0800c3d0 	.word	0x0800c3d0
 80099b0:	9907      	ldr	r1, [sp, #28]
 80099b2:	2900      	cmp	r1, #0
 80099b4:	f000 80d0 	beq.w	8009b58 <_dtoa_r+0x7c8>
 80099b8:	9906      	ldr	r1, [sp, #24]
 80099ba:	2901      	cmp	r1, #1
 80099bc:	f300 80b4 	bgt.w	8009b28 <_dtoa_r+0x798>
 80099c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80099c2:	2900      	cmp	r1, #0
 80099c4:	f000 80ac 	beq.w	8009b20 <_dtoa_r+0x790>
 80099c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80099cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80099d0:	461c      	mov	r4, r3
 80099d2:	930a      	str	r3, [sp, #40]	; 0x28
 80099d4:	9b04      	ldr	r3, [sp, #16]
 80099d6:	4413      	add	r3, r2
 80099d8:	9304      	str	r3, [sp, #16]
 80099da:	9b05      	ldr	r3, [sp, #20]
 80099dc:	2101      	movs	r1, #1
 80099de:	4413      	add	r3, r2
 80099e0:	4630      	mov	r0, r6
 80099e2:	9305      	str	r3, [sp, #20]
 80099e4:	f000 ff20 	bl	800a828 <__i2b>
 80099e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ea:	4607      	mov	r7, r0
 80099ec:	f1b8 0f00 	cmp.w	r8, #0
 80099f0:	dd0d      	ble.n	8009a0e <_dtoa_r+0x67e>
 80099f2:	9a05      	ldr	r2, [sp, #20]
 80099f4:	2a00      	cmp	r2, #0
 80099f6:	dd0a      	ble.n	8009a0e <_dtoa_r+0x67e>
 80099f8:	4542      	cmp	r2, r8
 80099fa:	9904      	ldr	r1, [sp, #16]
 80099fc:	bfa8      	it	ge
 80099fe:	4642      	movge	r2, r8
 8009a00:	1a89      	subs	r1, r1, r2
 8009a02:	9104      	str	r1, [sp, #16]
 8009a04:	9905      	ldr	r1, [sp, #20]
 8009a06:	eba8 0802 	sub.w	r8, r8, r2
 8009a0a:	1a8a      	subs	r2, r1, r2
 8009a0c:	9205      	str	r2, [sp, #20]
 8009a0e:	b303      	cbz	r3, 8009a52 <_dtoa_r+0x6c2>
 8009a10:	9a07      	ldr	r2, [sp, #28]
 8009a12:	2a00      	cmp	r2, #0
 8009a14:	f000 80a5 	beq.w	8009b62 <_dtoa_r+0x7d2>
 8009a18:	2c00      	cmp	r4, #0
 8009a1a:	dd13      	ble.n	8009a44 <_dtoa_r+0x6b4>
 8009a1c:	4639      	mov	r1, r7
 8009a1e:	4622      	mov	r2, r4
 8009a20:	4630      	mov	r0, r6
 8009a22:	930d      	str	r3, [sp, #52]	; 0x34
 8009a24:	f000 ffc0 	bl	800a9a8 <__pow5mult>
 8009a28:	462a      	mov	r2, r5
 8009a2a:	4601      	mov	r1, r0
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f000 ff10 	bl	800a854 <__multiply>
 8009a34:	4629      	mov	r1, r5
 8009a36:	900a      	str	r0, [sp, #40]	; 0x28
 8009a38:	4630      	mov	r0, r6
 8009a3a:	f000 fdf3 	bl	800a624 <_Bfree>
 8009a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a42:	4615      	mov	r5, r2
 8009a44:	1b1a      	subs	r2, r3, r4
 8009a46:	d004      	beq.n	8009a52 <_dtoa_r+0x6c2>
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f000 ffac 	bl	800a9a8 <__pow5mult>
 8009a50:	4605      	mov	r5, r0
 8009a52:	2101      	movs	r1, #1
 8009a54:	4630      	mov	r0, r6
 8009a56:	f000 fee7 	bl	800a828 <__i2b>
 8009a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	f340 8081 	ble.w	8009b66 <_dtoa_r+0x7d6>
 8009a64:	461a      	mov	r2, r3
 8009a66:	4601      	mov	r1, r0
 8009a68:	4630      	mov	r0, r6
 8009a6a:	f000 ff9d 	bl	800a9a8 <__pow5mult>
 8009a6e:	9b06      	ldr	r3, [sp, #24]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	4604      	mov	r4, r0
 8009a74:	dd7a      	ble.n	8009b6c <_dtoa_r+0x7dc>
 8009a76:	2300      	movs	r3, #0
 8009a78:	930a      	str	r3, [sp, #40]	; 0x28
 8009a7a:	6922      	ldr	r2, [r4, #16]
 8009a7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009a80:	6910      	ldr	r0, [r2, #16]
 8009a82:	f000 fe81 	bl	800a788 <__hi0bits>
 8009a86:	f1c0 0020 	rsb	r0, r0, #32
 8009a8a:	9b05      	ldr	r3, [sp, #20]
 8009a8c:	4418      	add	r0, r3
 8009a8e:	f010 001f 	ands.w	r0, r0, #31
 8009a92:	f000 808c 	beq.w	8009bae <_dtoa_r+0x81e>
 8009a96:	f1c0 0220 	rsb	r2, r0, #32
 8009a9a:	2a04      	cmp	r2, #4
 8009a9c:	f340 8085 	ble.w	8009baa <_dtoa_r+0x81a>
 8009aa0:	f1c0 001c 	rsb	r0, r0, #28
 8009aa4:	9b04      	ldr	r3, [sp, #16]
 8009aa6:	4403      	add	r3, r0
 8009aa8:	9304      	str	r3, [sp, #16]
 8009aaa:	9b05      	ldr	r3, [sp, #20]
 8009aac:	4403      	add	r3, r0
 8009aae:	4480      	add	r8, r0
 8009ab0:	9305      	str	r3, [sp, #20]
 8009ab2:	9b04      	ldr	r3, [sp, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	dd05      	ble.n	8009ac4 <_dtoa_r+0x734>
 8009ab8:	4629      	mov	r1, r5
 8009aba:	461a      	mov	r2, r3
 8009abc:	4630      	mov	r0, r6
 8009abe:	f000 ffcd 	bl	800aa5c <__lshift>
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	9b05      	ldr	r3, [sp, #20]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	dd05      	ble.n	8009ad6 <_dtoa_r+0x746>
 8009aca:	4621      	mov	r1, r4
 8009acc:	461a      	mov	r2, r3
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f000 ffc4 	bl	800aa5c <__lshift>
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d06a      	beq.n	8009bb2 <_dtoa_r+0x822>
 8009adc:	4621      	mov	r1, r4
 8009ade:	4628      	mov	r0, r5
 8009ae0:	f001 f82c 	bl	800ab3c <__mcmp>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	da64      	bge.n	8009bb2 <_dtoa_r+0x822>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4629      	mov	r1, r5
 8009aec:	220a      	movs	r2, #10
 8009aee:	4630      	mov	r0, r6
 8009af0:	f000 fdba 	bl	800a668 <__multadd>
 8009af4:	9b07      	ldr	r3, [sp, #28]
 8009af6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009afa:	4605      	mov	r5, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f000 8191 	beq.w	8009e24 <_dtoa_r+0xa94>
 8009b02:	4639      	mov	r1, r7
 8009b04:	2300      	movs	r3, #0
 8009b06:	220a      	movs	r2, #10
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f000 fdad 	bl	800a668 <__multadd>
 8009b0e:	f1ba 0f00 	cmp.w	sl, #0
 8009b12:	4607      	mov	r7, r0
 8009b14:	f300 808d 	bgt.w	8009c32 <_dtoa_r+0x8a2>
 8009b18:	9b06      	ldr	r3, [sp, #24]
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	dc50      	bgt.n	8009bc0 <_dtoa_r+0x830>
 8009b1e:	e088      	b.n	8009c32 <_dtoa_r+0x8a2>
 8009b20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b22:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009b26:	e751      	b.n	80099cc <_dtoa_r+0x63c>
 8009b28:	f109 34ff 	add.w	r4, r9, #4294967295
 8009b2c:	42a3      	cmp	r3, r4
 8009b2e:	bfbf      	itttt	lt
 8009b30:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009b32:	1ae3      	sublt	r3, r4, r3
 8009b34:	18d2      	addlt	r2, r2, r3
 8009b36:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009b38:	bfb6      	itet	lt
 8009b3a:	4623      	movlt	r3, r4
 8009b3c:	1b1c      	subge	r4, r3, r4
 8009b3e:	2400      	movlt	r4, #0
 8009b40:	f1b9 0f00 	cmp.w	r9, #0
 8009b44:	bfb5      	itete	lt
 8009b46:	9a04      	ldrlt	r2, [sp, #16]
 8009b48:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009b4c:	eba2 0809 	sublt.w	r8, r2, r9
 8009b50:	464a      	movge	r2, r9
 8009b52:	bfb8      	it	lt
 8009b54:	2200      	movlt	r2, #0
 8009b56:	e73c      	b.n	80099d2 <_dtoa_r+0x642>
 8009b58:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009b5c:	9f07      	ldr	r7, [sp, #28]
 8009b5e:	461c      	mov	r4, r3
 8009b60:	e744      	b.n	80099ec <_dtoa_r+0x65c>
 8009b62:	461a      	mov	r2, r3
 8009b64:	e770      	b.n	8009a48 <_dtoa_r+0x6b8>
 8009b66:	9b06      	ldr	r3, [sp, #24]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	dc18      	bgt.n	8009b9e <_dtoa_r+0x80e>
 8009b6c:	9b02      	ldr	r3, [sp, #8]
 8009b6e:	b9b3      	cbnz	r3, 8009b9e <_dtoa_r+0x80e>
 8009b70:	9b03      	ldr	r3, [sp, #12]
 8009b72:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009b76:	b9a2      	cbnz	r2, 8009ba2 <_dtoa_r+0x812>
 8009b78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009b7c:	0d12      	lsrs	r2, r2, #20
 8009b7e:	0512      	lsls	r2, r2, #20
 8009b80:	b18a      	cbz	r2, 8009ba6 <_dtoa_r+0x816>
 8009b82:	9b04      	ldr	r3, [sp, #16]
 8009b84:	3301      	adds	r3, #1
 8009b86:	9304      	str	r3, [sp, #16]
 8009b88:	9b05      	ldr	r3, [sp, #20]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	9305      	str	r3, [sp, #20]
 8009b8e:	2301      	movs	r3, #1
 8009b90:	930a      	str	r3, [sp, #40]	; 0x28
 8009b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f47f af70 	bne.w	8009a7a <_dtoa_r+0x6ea>
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	e775      	b.n	8009a8a <_dtoa_r+0x6fa>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	e7f6      	b.n	8009b90 <_dtoa_r+0x800>
 8009ba2:	9b02      	ldr	r3, [sp, #8]
 8009ba4:	e7f4      	b.n	8009b90 <_dtoa_r+0x800>
 8009ba6:	920a      	str	r2, [sp, #40]	; 0x28
 8009ba8:	e7f3      	b.n	8009b92 <_dtoa_r+0x802>
 8009baa:	d082      	beq.n	8009ab2 <_dtoa_r+0x722>
 8009bac:	4610      	mov	r0, r2
 8009bae:	301c      	adds	r0, #28
 8009bb0:	e778      	b.n	8009aa4 <_dtoa_r+0x714>
 8009bb2:	f1b9 0f00 	cmp.w	r9, #0
 8009bb6:	dc37      	bgt.n	8009c28 <_dtoa_r+0x898>
 8009bb8:	9b06      	ldr	r3, [sp, #24]
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	dd34      	ble.n	8009c28 <_dtoa_r+0x898>
 8009bbe:	46ca      	mov	sl, r9
 8009bc0:	f1ba 0f00 	cmp.w	sl, #0
 8009bc4:	d10d      	bne.n	8009be2 <_dtoa_r+0x852>
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	4653      	mov	r3, sl
 8009bca:	2205      	movs	r2, #5
 8009bcc:	4630      	mov	r0, r6
 8009bce:	f000 fd4b 	bl	800a668 <__multadd>
 8009bd2:	4601      	mov	r1, r0
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	f000 ffb0 	bl	800ab3c <__mcmp>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	f73f adeb 	bgt.w	80097b8 <_dtoa_r+0x428>
 8009be2:	9b08      	ldr	r3, [sp, #32]
 8009be4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009be8:	ea6f 0b03 	mvn.w	fp, r3
 8009bec:	f04f 0900 	mov.w	r9, #0
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f000 fd16 	bl	800a624 <_Bfree>
 8009bf8:	2f00      	cmp	r7, #0
 8009bfa:	f43f aea8 	beq.w	800994e <_dtoa_r+0x5be>
 8009bfe:	f1b9 0f00 	cmp.w	r9, #0
 8009c02:	d005      	beq.n	8009c10 <_dtoa_r+0x880>
 8009c04:	45b9      	cmp	r9, r7
 8009c06:	d003      	beq.n	8009c10 <_dtoa_r+0x880>
 8009c08:	4649      	mov	r1, r9
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f000 fd0a 	bl	800a624 <_Bfree>
 8009c10:	4639      	mov	r1, r7
 8009c12:	4630      	mov	r0, r6
 8009c14:	f000 fd06 	bl	800a624 <_Bfree>
 8009c18:	e699      	b.n	800994e <_dtoa_r+0x5be>
 8009c1a:	2400      	movs	r4, #0
 8009c1c:	4627      	mov	r7, r4
 8009c1e:	e7e0      	b.n	8009be2 <_dtoa_r+0x852>
 8009c20:	46bb      	mov	fp, r7
 8009c22:	4604      	mov	r4, r0
 8009c24:	4607      	mov	r7, r0
 8009c26:	e5c7      	b.n	80097b8 <_dtoa_r+0x428>
 8009c28:	9b07      	ldr	r3, [sp, #28]
 8009c2a:	46ca      	mov	sl, r9
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 8100 	beq.w	8009e32 <_dtoa_r+0xaa2>
 8009c32:	f1b8 0f00 	cmp.w	r8, #0
 8009c36:	dd05      	ble.n	8009c44 <_dtoa_r+0x8b4>
 8009c38:	4639      	mov	r1, r7
 8009c3a:	4642      	mov	r2, r8
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f000 ff0d 	bl	800aa5c <__lshift>
 8009c42:	4607      	mov	r7, r0
 8009c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d05d      	beq.n	8009d06 <_dtoa_r+0x976>
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f000 fca9 	bl	800a5a4 <_Balloc>
 8009c52:	4680      	mov	r8, r0
 8009c54:	b928      	cbnz	r0, 8009c62 <_dtoa_r+0x8d2>
 8009c56:	4b82      	ldr	r3, [pc, #520]	; (8009e60 <_dtoa_r+0xad0>)
 8009c58:	4602      	mov	r2, r0
 8009c5a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009c5e:	f7ff bbaf 	b.w	80093c0 <_dtoa_r+0x30>
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	3202      	adds	r2, #2
 8009c66:	0092      	lsls	r2, r2, #2
 8009c68:	f107 010c 	add.w	r1, r7, #12
 8009c6c:	300c      	adds	r0, #12
 8009c6e:	f000 fc8b 	bl	800a588 <memcpy>
 8009c72:	2201      	movs	r2, #1
 8009c74:	4641      	mov	r1, r8
 8009c76:	4630      	mov	r0, r6
 8009c78:	f000 fef0 	bl	800aa5c <__lshift>
 8009c7c:	9b01      	ldr	r3, [sp, #4]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	9304      	str	r3, [sp, #16]
 8009c82:	9b01      	ldr	r3, [sp, #4]
 8009c84:	4453      	add	r3, sl
 8009c86:	9308      	str	r3, [sp, #32]
 8009c88:	9b02      	ldr	r3, [sp, #8]
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	46b9      	mov	r9, r7
 8009c90:	9307      	str	r3, [sp, #28]
 8009c92:	4607      	mov	r7, r0
 8009c94:	9b04      	ldr	r3, [sp, #16]
 8009c96:	4621      	mov	r1, r4
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	9302      	str	r3, [sp, #8]
 8009c9e:	f7ff faeb 	bl	8009278 <quorem>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	3330      	adds	r3, #48	; 0x30
 8009ca6:	9005      	str	r0, [sp, #20]
 8009ca8:	4649      	mov	r1, r9
 8009caa:	4628      	mov	r0, r5
 8009cac:	9309      	str	r3, [sp, #36]	; 0x24
 8009cae:	f000 ff45 	bl	800ab3c <__mcmp>
 8009cb2:	463a      	mov	r2, r7
 8009cb4:	4682      	mov	sl, r0
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	4630      	mov	r0, r6
 8009cba:	f000 ff5b 	bl	800ab74 <__mdiff>
 8009cbe:	68c2      	ldr	r2, [r0, #12]
 8009cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc2:	4680      	mov	r8, r0
 8009cc4:	bb0a      	cbnz	r2, 8009d0a <_dtoa_r+0x97a>
 8009cc6:	4601      	mov	r1, r0
 8009cc8:	4628      	mov	r0, r5
 8009cca:	f000 ff37 	bl	800ab3c <__mcmp>
 8009cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	4641      	mov	r1, r8
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009cda:	f000 fca3 	bl	800a624 <_Bfree>
 8009cde:	9b06      	ldr	r3, [sp, #24]
 8009ce0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ce2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009ce6:	ea43 0102 	orr.w	r1, r3, r2
 8009cea:	9b07      	ldr	r3, [sp, #28]
 8009cec:	430b      	orrs	r3, r1
 8009cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf0:	d10d      	bne.n	8009d0e <_dtoa_r+0x97e>
 8009cf2:	2b39      	cmp	r3, #57	; 0x39
 8009cf4:	d029      	beq.n	8009d4a <_dtoa_r+0x9ba>
 8009cf6:	f1ba 0f00 	cmp.w	sl, #0
 8009cfa:	dd01      	ble.n	8009d00 <_dtoa_r+0x970>
 8009cfc:	9b05      	ldr	r3, [sp, #20]
 8009cfe:	3331      	adds	r3, #49	; 0x31
 8009d00:	9a02      	ldr	r2, [sp, #8]
 8009d02:	7013      	strb	r3, [r2, #0]
 8009d04:	e774      	b.n	8009bf0 <_dtoa_r+0x860>
 8009d06:	4638      	mov	r0, r7
 8009d08:	e7b8      	b.n	8009c7c <_dtoa_r+0x8ec>
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	e7e1      	b.n	8009cd2 <_dtoa_r+0x942>
 8009d0e:	f1ba 0f00 	cmp.w	sl, #0
 8009d12:	db06      	blt.n	8009d22 <_dtoa_r+0x992>
 8009d14:	9906      	ldr	r1, [sp, #24]
 8009d16:	ea41 0a0a 	orr.w	sl, r1, sl
 8009d1a:	9907      	ldr	r1, [sp, #28]
 8009d1c:	ea5a 0101 	orrs.w	r1, sl, r1
 8009d20:	d120      	bne.n	8009d64 <_dtoa_r+0x9d4>
 8009d22:	2a00      	cmp	r2, #0
 8009d24:	ddec      	ble.n	8009d00 <_dtoa_r+0x970>
 8009d26:	4629      	mov	r1, r5
 8009d28:	2201      	movs	r2, #1
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	9304      	str	r3, [sp, #16]
 8009d2e:	f000 fe95 	bl	800aa5c <__lshift>
 8009d32:	4621      	mov	r1, r4
 8009d34:	4605      	mov	r5, r0
 8009d36:	f000 ff01 	bl	800ab3c <__mcmp>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	9b04      	ldr	r3, [sp, #16]
 8009d3e:	dc02      	bgt.n	8009d46 <_dtoa_r+0x9b6>
 8009d40:	d1de      	bne.n	8009d00 <_dtoa_r+0x970>
 8009d42:	07da      	lsls	r2, r3, #31
 8009d44:	d5dc      	bpl.n	8009d00 <_dtoa_r+0x970>
 8009d46:	2b39      	cmp	r3, #57	; 0x39
 8009d48:	d1d8      	bne.n	8009cfc <_dtoa_r+0x96c>
 8009d4a:	9a02      	ldr	r2, [sp, #8]
 8009d4c:	2339      	movs	r3, #57	; 0x39
 8009d4e:	7013      	strb	r3, [r2, #0]
 8009d50:	4643      	mov	r3, r8
 8009d52:	4698      	mov	r8, r3
 8009d54:	3b01      	subs	r3, #1
 8009d56:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009d5a:	2a39      	cmp	r2, #57	; 0x39
 8009d5c:	d051      	beq.n	8009e02 <_dtoa_r+0xa72>
 8009d5e:	3201      	adds	r2, #1
 8009d60:	701a      	strb	r2, [r3, #0]
 8009d62:	e745      	b.n	8009bf0 <_dtoa_r+0x860>
 8009d64:	2a00      	cmp	r2, #0
 8009d66:	dd03      	ble.n	8009d70 <_dtoa_r+0x9e0>
 8009d68:	2b39      	cmp	r3, #57	; 0x39
 8009d6a:	d0ee      	beq.n	8009d4a <_dtoa_r+0x9ba>
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	e7c7      	b.n	8009d00 <_dtoa_r+0x970>
 8009d70:	9a04      	ldr	r2, [sp, #16]
 8009d72:	9908      	ldr	r1, [sp, #32]
 8009d74:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009d78:	428a      	cmp	r2, r1
 8009d7a:	d02b      	beq.n	8009dd4 <_dtoa_r+0xa44>
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	2300      	movs	r3, #0
 8009d80:	220a      	movs	r2, #10
 8009d82:	4630      	mov	r0, r6
 8009d84:	f000 fc70 	bl	800a668 <__multadd>
 8009d88:	45b9      	cmp	r9, r7
 8009d8a:	4605      	mov	r5, r0
 8009d8c:	f04f 0300 	mov.w	r3, #0
 8009d90:	f04f 020a 	mov.w	r2, #10
 8009d94:	4649      	mov	r1, r9
 8009d96:	4630      	mov	r0, r6
 8009d98:	d107      	bne.n	8009daa <_dtoa_r+0xa1a>
 8009d9a:	f000 fc65 	bl	800a668 <__multadd>
 8009d9e:	4681      	mov	r9, r0
 8009da0:	4607      	mov	r7, r0
 8009da2:	9b04      	ldr	r3, [sp, #16]
 8009da4:	3301      	adds	r3, #1
 8009da6:	9304      	str	r3, [sp, #16]
 8009da8:	e774      	b.n	8009c94 <_dtoa_r+0x904>
 8009daa:	f000 fc5d 	bl	800a668 <__multadd>
 8009dae:	4639      	mov	r1, r7
 8009db0:	4681      	mov	r9, r0
 8009db2:	2300      	movs	r3, #0
 8009db4:	220a      	movs	r2, #10
 8009db6:	4630      	mov	r0, r6
 8009db8:	f000 fc56 	bl	800a668 <__multadd>
 8009dbc:	4607      	mov	r7, r0
 8009dbe:	e7f0      	b.n	8009da2 <_dtoa_r+0xa12>
 8009dc0:	f1ba 0f00 	cmp.w	sl, #0
 8009dc4:	9a01      	ldr	r2, [sp, #4]
 8009dc6:	bfcc      	ite	gt
 8009dc8:	46d0      	movgt	r8, sl
 8009dca:	f04f 0801 	movle.w	r8, #1
 8009dce:	4490      	add	r8, r2
 8009dd0:	f04f 0900 	mov.w	r9, #0
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	4630      	mov	r0, r6
 8009dda:	9302      	str	r3, [sp, #8]
 8009ddc:	f000 fe3e 	bl	800aa5c <__lshift>
 8009de0:	4621      	mov	r1, r4
 8009de2:	4605      	mov	r5, r0
 8009de4:	f000 feaa 	bl	800ab3c <__mcmp>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	dcb1      	bgt.n	8009d50 <_dtoa_r+0x9c0>
 8009dec:	d102      	bne.n	8009df4 <_dtoa_r+0xa64>
 8009dee:	9b02      	ldr	r3, [sp, #8]
 8009df0:	07db      	lsls	r3, r3, #31
 8009df2:	d4ad      	bmi.n	8009d50 <_dtoa_r+0x9c0>
 8009df4:	4643      	mov	r3, r8
 8009df6:	4698      	mov	r8, r3
 8009df8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dfc:	2a30      	cmp	r2, #48	; 0x30
 8009dfe:	d0fa      	beq.n	8009df6 <_dtoa_r+0xa66>
 8009e00:	e6f6      	b.n	8009bf0 <_dtoa_r+0x860>
 8009e02:	9a01      	ldr	r2, [sp, #4]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d1a4      	bne.n	8009d52 <_dtoa_r+0x9c2>
 8009e08:	f10b 0b01 	add.w	fp, fp, #1
 8009e0c:	2331      	movs	r3, #49	; 0x31
 8009e0e:	e778      	b.n	8009d02 <_dtoa_r+0x972>
 8009e10:	4b14      	ldr	r3, [pc, #80]	; (8009e64 <_dtoa_r+0xad4>)
 8009e12:	f7ff bb27 	b.w	8009464 <_dtoa_r+0xd4>
 8009e16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f47f ab03 	bne.w	8009424 <_dtoa_r+0x94>
 8009e1e:	4b12      	ldr	r3, [pc, #72]	; (8009e68 <_dtoa_r+0xad8>)
 8009e20:	f7ff bb20 	b.w	8009464 <_dtoa_r+0xd4>
 8009e24:	f1ba 0f00 	cmp.w	sl, #0
 8009e28:	dc03      	bgt.n	8009e32 <_dtoa_r+0xaa2>
 8009e2a:	9b06      	ldr	r3, [sp, #24]
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	f73f aec7 	bgt.w	8009bc0 <_dtoa_r+0x830>
 8009e32:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e36:	4621      	mov	r1, r4
 8009e38:	4628      	mov	r0, r5
 8009e3a:	f7ff fa1d 	bl	8009278 <quorem>
 8009e3e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009e42:	f808 3b01 	strb.w	r3, [r8], #1
 8009e46:	9a01      	ldr	r2, [sp, #4]
 8009e48:	eba8 0202 	sub.w	r2, r8, r2
 8009e4c:	4592      	cmp	sl, r2
 8009e4e:	ddb7      	ble.n	8009dc0 <_dtoa_r+0xa30>
 8009e50:	4629      	mov	r1, r5
 8009e52:	2300      	movs	r3, #0
 8009e54:	220a      	movs	r2, #10
 8009e56:	4630      	mov	r0, r6
 8009e58:	f000 fc06 	bl	800a668 <__multadd>
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	e7ea      	b.n	8009e36 <_dtoa_r+0xaa6>
 8009e60:	0800c2e8 	.word	0x0800c2e8
 8009e64:	0800c0ec 	.word	0x0800c0ec
 8009e68:	0800c269 	.word	0x0800c269

08009e6c <rshift>:
 8009e6c:	6903      	ldr	r3, [r0, #16]
 8009e6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e7a:	f100 0414 	add.w	r4, r0, #20
 8009e7e:	dd45      	ble.n	8009f0c <rshift+0xa0>
 8009e80:	f011 011f 	ands.w	r1, r1, #31
 8009e84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e8c:	d10c      	bne.n	8009ea8 <rshift+0x3c>
 8009e8e:	f100 0710 	add.w	r7, r0, #16
 8009e92:	4629      	mov	r1, r5
 8009e94:	42b1      	cmp	r1, r6
 8009e96:	d334      	bcc.n	8009f02 <rshift+0x96>
 8009e98:	1a9b      	subs	r3, r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	1eea      	subs	r2, r5, #3
 8009e9e:	4296      	cmp	r6, r2
 8009ea0:	bf38      	it	cc
 8009ea2:	2300      	movcc	r3, #0
 8009ea4:	4423      	add	r3, r4
 8009ea6:	e015      	b.n	8009ed4 <rshift+0x68>
 8009ea8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009eac:	f1c1 0820 	rsb	r8, r1, #32
 8009eb0:	40cf      	lsrs	r7, r1
 8009eb2:	f105 0e04 	add.w	lr, r5, #4
 8009eb6:	46a1      	mov	r9, r4
 8009eb8:	4576      	cmp	r6, lr
 8009eba:	46f4      	mov	ip, lr
 8009ebc:	d815      	bhi.n	8009eea <rshift+0x7e>
 8009ebe:	1a9a      	subs	r2, r3, r2
 8009ec0:	0092      	lsls	r2, r2, #2
 8009ec2:	3a04      	subs	r2, #4
 8009ec4:	3501      	adds	r5, #1
 8009ec6:	42ae      	cmp	r6, r5
 8009ec8:	bf38      	it	cc
 8009eca:	2200      	movcc	r2, #0
 8009ecc:	18a3      	adds	r3, r4, r2
 8009ece:	50a7      	str	r7, [r4, r2]
 8009ed0:	b107      	cbz	r7, 8009ed4 <rshift+0x68>
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	1b1a      	subs	r2, r3, r4
 8009ed6:	42a3      	cmp	r3, r4
 8009ed8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009edc:	bf08      	it	eq
 8009ede:	2300      	moveq	r3, #0
 8009ee0:	6102      	str	r2, [r0, #16]
 8009ee2:	bf08      	it	eq
 8009ee4:	6143      	streq	r3, [r0, #20]
 8009ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eea:	f8dc c000 	ldr.w	ip, [ip]
 8009eee:	fa0c fc08 	lsl.w	ip, ip, r8
 8009ef2:	ea4c 0707 	orr.w	r7, ip, r7
 8009ef6:	f849 7b04 	str.w	r7, [r9], #4
 8009efa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009efe:	40cf      	lsrs	r7, r1
 8009f00:	e7da      	b.n	8009eb8 <rshift+0x4c>
 8009f02:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f06:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f0a:	e7c3      	b.n	8009e94 <rshift+0x28>
 8009f0c:	4623      	mov	r3, r4
 8009f0e:	e7e1      	b.n	8009ed4 <rshift+0x68>

08009f10 <__hexdig_fun>:
 8009f10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009f14:	2b09      	cmp	r3, #9
 8009f16:	d802      	bhi.n	8009f1e <__hexdig_fun+0xe>
 8009f18:	3820      	subs	r0, #32
 8009f1a:	b2c0      	uxtb	r0, r0
 8009f1c:	4770      	bx	lr
 8009f1e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009f22:	2b05      	cmp	r3, #5
 8009f24:	d801      	bhi.n	8009f2a <__hexdig_fun+0x1a>
 8009f26:	3847      	subs	r0, #71	; 0x47
 8009f28:	e7f7      	b.n	8009f1a <__hexdig_fun+0xa>
 8009f2a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009f2e:	2b05      	cmp	r3, #5
 8009f30:	d801      	bhi.n	8009f36 <__hexdig_fun+0x26>
 8009f32:	3827      	subs	r0, #39	; 0x27
 8009f34:	e7f1      	b.n	8009f1a <__hexdig_fun+0xa>
 8009f36:	2000      	movs	r0, #0
 8009f38:	4770      	bx	lr
	...

08009f3c <__gethex>:
 8009f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f40:	ed2d 8b02 	vpush	{d8}
 8009f44:	b089      	sub	sp, #36	; 0x24
 8009f46:	ee08 0a10 	vmov	s16, r0
 8009f4a:	9304      	str	r3, [sp, #16]
 8009f4c:	4bb4      	ldr	r3, [pc, #720]	; (800a220 <__gethex+0x2e4>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	9301      	str	r3, [sp, #4]
 8009f52:	4618      	mov	r0, r3
 8009f54:	468b      	mov	fp, r1
 8009f56:	4690      	mov	r8, r2
 8009f58:	f7f6 f972 	bl	8000240 <strlen>
 8009f5c:	9b01      	ldr	r3, [sp, #4]
 8009f5e:	f8db 2000 	ldr.w	r2, [fp]
 8009f62:	4403      	add	r3, r0
 8009f64:	4682      	mov	sl, r0
 8009f66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009f6a:	9305      	str	r3, [sp, #20]
 8009f6c:	1c93      	adds	r3, r2, #2
 8009f6e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009f72:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009f76:	32fe      	adds	r2, #254	; 0xfe
 8009f78:	18d1      	adds	r1, r2, r3
 8009f7a:	461f      	mov	r7, r3
 8009f7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009f80:	9100      	str	r1, [sp, #0]
 8009f82:	2830      	cmp	r0, #48	; 0x30
 8009f84:	d0f8      	beq.n	8009f78 <__gethex+0x3c>
 8009f86:	f7ff ffc3 	bl	8009f10 <__hexdig_fun>
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	d13a      	bne.n	800a006 <__gethex+0xca>
 8009f90:	9901      	ldr	r1, [sp, #4]
 8009f92:	4652      	mov	r2, sl
 8009f94:	4638      	mov	r0, r7
 8009f96:	f001 fa2f 	bl	800b3f8 <strncmp>
 8009f9a:	4605      	mov	r5, r0
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d168      	bne.n	800a072 <__gethex+0x136>
 8009fa0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009fa4:	eb07 060a 	add.w	r6, r7, sl
 8009fa8:	f7ff ffb2 	bl	8009f10 <__hexdig_fun>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d062      	beq.n	800a076 <__gethex+0x13a>
 8009fb0:	4633      	mov	r3, r6
 8009fb2:	7818      	ldrb	r0, [r3, #0]
 8009fb4:	2830      	cmp	r0, #48	; 0x30
 8009fb6:	461f      	mov	r7, r3
 8009fb8:	f103 0301 	add.w	r3, r3, #1
 8009fbc:	d0f9      	beq.n	8009fb2 <__gethex+0x76>
 8009fbe:	f7ff ffa7 	bl	8009f10 <__hexdig_fun>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	fab0 f480 	clz	r4, r0
 8009fc8:	0964      	lsrs	r4, r4, #5
 8009fca:	4635      	mov	r5, r6
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	463a      	mov	r2, r7
 8009fd0:	4616      	mov	r6, r2
 8009fd2:	3201      	adds	r2, #1
 8009fd4:	7830      	ldrb	r0, [r6, #0]
 8009fd6:	f7ff ff9b 	bl	8009f10 <__hexdig_fun>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d1f8      	bne.n	8009fd0 <__gethex+0x94>
 8009fde:	9901      	ldr	r1, [sp, #4]
 8009fe0:	4652      	mov	r2, sl
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f001 fa08 	bl	800b3f8 <strncmp>
 8009fe8:	b980      	cbnz	r0, 800a00c <__gethex+0xd0>
 8009fea:	b94d      	cbnz	r5, 800a000 <__gethex+0xc4>
 8009fec:	eb06 050a 	add.w	r5, r6, sl
 8009ff0:	462a      	mov	r2, r5
 8009ff2:	4616      	mov	r6, r2
 8009ff4:	3201      	adds	r2, #1
 8009ff6:	7830      	ldrb	r0, [r6, #0]
 8009ff8:	f7ff ff8a 	bl	8009f10 <__hexdig_fun>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d1f8      	bne.n	8009ff2 <__gethex+0xb6>
 800a000:	1bad      	subs	r5, r5, r6
 800a002:	00ad      	lsls	r5, r5, #2
 800a004:	e004      	b.n	800a010 <__gethex+0xd4>
 800a006:	2400      	movs	r4, #0
 800a008:	4625      	mov	r5, r4
 800a00a:	e7e0      	b.n	8009fce <__gethex+0x92>
 800a00c:	2d00      	cmp	r5, #0
 800a00e:	d1f7      	bne.n	800a000 <__gethex+0xc4>
 800a010:	7833      	ldrb	r3, [r6, #0]
 800a012:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a016:	2b50      	cmp	r3, #80	; 0x50
 800a018:	d13b      	bne.n	800a092 <__gethex+0x156>
 800a01a:	7873      	ldrb	r3, [r6, #1]
 800a01c:	2b2b      	cmp	r3, #43	; 0x2b
 800a01e:	d02c      	beq.n	800a07a <__gethex+0x13e>
 800a020:	2b2d      	cmp	r3, #45	; 0x2d
 800a022:	d02e      	beq.n	800a082 <__gethex+0x146>
 800a024:	1c71      	adds	r1, r6, #1
 800a026:	f04f 0900 	mov.w	r9, #0
 800a02a:	7808      	ldrb	r0, [r1, #0]
 800a02c:	f7ff ff70 	bl	8009f10 <__hexdig_fun>
 800a030:	1e43      	subs	r3, r0, #1
 800a032:	b2db      	uxtb	r3, r3
 800a034:	2b18      	cmp	r3, #24
 800a036:	d82c      	bhi.n	800a092 <__gethex+0x156>
 800a038:	f1a0 0210 	sub.w	r2, r0, #16
 800a03c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a040:	f7ff ff66 	bl	8009f10 <__hexdig_fun>
 800a044:	1e43      	subs	r3, r0, #1
 800a046:	b2db      	uxtb	r3, r3
 800a048:	2b18      	cmp	r3, #24
 800a04a:	d91d      	bls.n	800a088 <__gethex+0x14c>
 800a04c:	f1b9 0f00 	cmp.w	r9, #0
 800a050:	d000      	beq.n	800a054 <__gethex+0x118>
 800a052:	4252      	negs	r2, r2
 800a054:	4415      	add	r5, r2
 800a056:	f8cb 1000 	str.w	r1, [fp]
 800a05a:	b1e4      	cbz	r4, 800a096 <__gethex+0x15a>
 800a05c:	9b00      	ldr	r3, [sp, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	bf14      	ite	ne
 800a062:	2700      	movne	r7, #0
 800a064:	2706      	moveq	r7, #6
 800a066:	4638      	mov	r0, r7
 800a068:	b009      	add	sp, #36	; 0x24
 800a06a:	ecbd 8b02 	vpop	{d8}
 800a06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a072:	463e      	mov	r6, r7
 800a074:	4625      	mov	r5, r4
 800a076:	2401      	movs	r4, #1
 800a078:	e7ca      	b.n	800a010 <__gethex+0xd4>
 800a07a:	f04f 0900 	mov.w	r9, #0
 800a07e:	1cb1      	adds	r1, r6, #2
 800a080:	e7d3      	b.n	800a02a <__gethex+0xee>
 800a082:	f04f 0901 	mov.w	r9, #1
 800a086:	e7fa      	b.n	800a07e <__gethex+0x142>
 800a088:	230a      	movs	r3, #10
 800a08a:	fb03 0202 	mla	r2, r3, r2, r0
 800a08e:	3a10      	subs	r2, #16
 800a090:	e7d4      	b.n	800a03c <__gethex+0x100>
 800a092:	4631      	mov	r1, r6
 800a094:	e7df      	b.n	800a056 <__gethex+0x11a>
 800a096:	1bf3      	subs	r3, r6, r7
 800a098:	3b01      	subs	r3, #1
 800a09a:	4621      	mov	r1, r4
 800a09c:	2b07      	cmp	r3, #7
 800a09e:	dc0b      	bgt.n	800a0b8 <__gethex+0x17c>
 800a0a0:	ee18 0a10 	vmov	r0, s16
 800a0a4:	f000 fa7e 	bl	800a5a4 <_Balloc>
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	b940      	cbnz	r0, 800a0be <__gethex+0x182>
 800a0ac:	4b5d      	ldr	r3, [pc, #372]	; (800a224 <__gethex+0x2e8>)
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	21de      	movs	r1, #222	; 0xde
 800a0b2:	485d      	ldr	r0, [pc, #372]	; (800a228 <__gethex+0x2ec>)
 800a0b4:	f001 f9c2 	bl	800b43c <__assert_func>
 800a0b8:	3101      	adds	r1, #1
 800a0ba:	105b      	asrs	r3, r3, #1
 800a0bc:	e7ee      	b.n	800a09c <__gethex+0x160>
 800a0be:	f100 0914 	add.w	r9, r0, #20
 800a0c2:	f04f 0b00 	mov.w	fp, #0
 800a0c6:	f1ca 0301 	rsb	r3, sl, #1
 800a0ca:	f8cd 9008 	str.w	r9, [sp, #8]
 800a0ce:	f8cd b000 	str.w	fp, [sp]
 800a0d2:	9306      	str	r3, [sp, #24]
 800a0d4:	42b7      	cmp	r7, r6
 800a0d6:	d340      	bcc.n	800a15a <__gethex+0x21e>
 800a0d8:	9802      	ldr	r0, [sp, #8]
 800a0da:	9b00      	ldr	r3, [sp, #0]
 800a0dc:	f840 3b04 	str.w	r3, [r0], #4
 800a0e0:	eba0 0009 	sub.w	r0, r0, r9
 800a0e4:	1080      	asrs	r0, r0, #2
 800a0e6:	0146      	lsls	r6, r0, #5
 800a0e8:	6120      	str	r0, [r4, #16]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f000 fb4c 	bl	800a788 <__hi0bits>
 800a0f0:	1a30      	subs	r0, r6, r0
 800a0f2:	f8d8 6000 	ldr.w	r6, [r8]
 800a0f6:	42b0      	cmp	r0, r6
 800a0f8:	dd63      	ble.n	800a1c2 <__gethex+0x286>
 800a0fa:	1b87      	subs	r7, r0, r6
 800a0fc:	4639      	mov	r1, r7
 800a0fe:	4620      	mov	r0, r4
 800a100:	f000 feed 	bl	800aede <__any_on>
 800a104:	4682      	mov	sl, r0
 800a106:	b1a8      	cbz	r0, 800a134 <__gethex+0x1f8>
 800a108:	1e7b      	subs	r3, r7, #1
 800a10a:	1159      	asrs	r1, r3, #5
 800a10c:	f003 021f 	and.w	r2, r3, #31
 800a110:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a114:	f04f 0a01 	mov.w	sl, #1
 800a118:	fa0a f202 	lsl.w	r2, sl, r2
 800a11c:	420a      	tst	r2, r1
 800a11e:	d009      	beq.n	800a134 <__gethex+0x1f8>
 800a120:	4553      	cmp	r3, sl
 800a122:	dd05      	ble.n	800a130 <__gethex+0x1f4>
 800a124:	1eb9      	subs	r1, r7, #2
 800a126:	4620      	mov	r0, r4
 800a128:	f000 fed9 	bl	800aede <__any_on>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d145      	bne.n	800a1bc <__gethex+0x280>
 800a130:	f04f 0a02 	mov.w	sl, #2
 800a134:	4639      	mov	r1, r7
 800a136:	4620      	mov	r0, r4
 800a138:	f7ff fe98 	bl	8009e6c <rshift>
 800a13c:	443d      	add	r5, r7
 800a13e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a142:	42ab      	cmp	r3, r5
 800a144:	da4c      	bge.n	800a1e0 <__gethex+0x2a4>
 800a146:	ee18 0a10 	vmov	r0, s16
 800a14a:	4621      	mov	r1, r4
 800a14c:	f000 fa6a 	bl	800a624 <_Bfree>
 800a150:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a152:	2300      	movs	r3, #0
 800a154:	6013      	str	r3, [r2, #0]
 800a156:	27a3      	movs	r7, #163	; 0xa3
 800a158:	e785      	b.n	800a066 <__gethex+0x12a>
 800a15a:	1e73      	subs	r3, r6, #1
 800a15c:	9a05      	ldr	r2, [sp, #20]
 800a15e:	9303      	str	r3, [sp, #12]
 800a160:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a164:	4293      	cmp	r3, r2
 800a166:	d019      	beq.n	800a19c <__gethex+0x260>
 800a168:	f1bb 0f20 	cmp.w	fp, #32
 800a16c:	d107      	bne.n	800a17e <__gethex+0x242>
 800a16e:	9b02      	ldr	r3, [sp, #8]
 800a170:	9a00      	ldr	r2, [sp, #0]
 800a172:	f843 2b04 	str.w	r2, [r3], #4
 800a176:	9302      	str	r3, [sp, #8]
 800a178:	2300      	movs	r3, #0
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	469b      	mov	fp, r3
 800a17e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a182:	f7ff fec5 	bl	8009f10 <__hexdig_fun>
 800a186:	9b00      	ldr	r3, [sp, #0]
 800a188:	f000 000f 	and.w	r0, r0, #15
 800a18c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a190:	4303      	orrs	r3, r0
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	f10b 0b04 	add.w	fp, fp, #4
 800a198:	9b03      	ldr	r3, [sp, #12]
 800a19a:	e00d      	b.n	800a1b8 <__gethex+0x27c>
 800a19c:	9b03      	ldr	r3, [sp, #12]
 800a19e:	9a06      	ldr	r2, [sp, #24]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	42bb      	cmp	r3, r7
 800a1a4:	d3e0      	bcc.n	800a168 <__gethex+0x22c>
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	9901      	ldr	r1, [sp, #4]
 800a1aa:	9307      	str	r3, [sp, #28]
 800a1ac:	4652      	mov	r2, sl
 800a1ae:	f001 f923 	bl	800b3f8 <strncmp>
 800a1b2:	9b07      	ldr	r3, [sp, #28]
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d1d7      	bne.n	800a168 <__gethex+0x22c>
 800a1b8:	461e      	mov	r6, r3
 800a1ba:	e78b      	b.n	800a0d4 <__gethex+0x198>
 800a1bc:	f04f 0a03 	mov.w	sl, #3
 800a1c0:	e7b8      	b.n	800a134 <__gethex+0x1f8>
 800a1c2:	da0a      	bge.n	800a1da <__gethex+0x29e>
 800a1c4:	1a37      	subs	r7, r6, r0
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	ee18 0a10 	vmov	r0, s16
 800a1cc:	463a      	mov	r2, r7
 800a1ce:	f000 fc45 	bl	800aa5c <__lshift>
 800a1d2:	1bed      	subs	r5, r5, r7
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	f100 0914 	add.w	r9, r0, #20
 800a1da:	f04f 0a00 	mov.w	sl, #0
 800a1de:	e7ae      	b.n	800a13e <__gethex+0x202>
 800a1e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a1e4:	42a8      	cmp	r0, r5
 800a1e6:	dd72      	ble.n	800a2ce <__gethex+0x392>
 800a1e8:	1b45      	subs	r5, r0, r5
 800a1ea:	42ae      	cmp	r6, r5
 800a1ec:	dc36      	bgt.n	800a25c <__gethex+0x320>
 800a1ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d02a      	beq.n	800a24c <__gethex+0x310>
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	d02c      	beq.n	800a254 <__gethex+0x318>
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d11c      	bne.n	800a238 <__gethex+0x2fc>
 800a1fe:	42ae      	cmp	r6, r5
 800a200:	d11a      	bne.n	800a238 <__gethex+0x2fc>
 800a202:	2e01      	cmp	r6, #1
 800a204:	d112      	bne.n	800a22c <__gethex+0x2f0>
 800a206:	9a04      	ldr	r2, [sp, #16]
 800a208:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	2301      	movs	r3, #1
 800a210:	6123      	str	r3, [r4, #16]
 800a212:	f8c9 3000 	str.w	r3, [r9]
 800a216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a218:	2762      	movs	r7, #98	; 0x62
 800a21a:	601c      	str	r4, [r3, #0]
 800a21c:	e723      	b.n	800a066 <__gethex+0x12a>
 800a21e:	bf00      	nop
 800a220:	0800c360 	.word	0x0800c360
 800a224:	0800c2e8 	.word	0x0800c2e8
 800a228:	0800c2f9 	.word	0x0800c2f9
 800a22c:	1e71      	subs	r1, r6, #1
 800a22e:	4620      	mov	r0, r4
 800a230:	f000 fe55 	bl	800aede <__any_on>
 800a234:	2800      	cmp	r0, #0
 800a236:	d1e6      	bne.n	800a206 <__gethex+0x2ca>
 800a238:	ee18 0a10 	vmov	r0, s16
 800a23c:	4621      	mov	r1, r4
 800a23e:	f000 f9f1 	bl	800a624 <_Bfree>
 800a242:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a244:	2300      	movs	r3, #0
 800a246:	6013      	str	r3, [r2, #0]
 800a248:	2750      	movs	r7, #80	; 0x50
 800a24a:	e70c      	b.n	800a066 <__gethex+0x12a>
 800a24c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1f2      	bne.n	800a238 <__gethex+0x2fc>
 800a252:	e7d8      	b.n	800a206 <__gethex+0x2ca>
 800a254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1d5      	bne.n	800a206 <__gethex+0x2ca>
 800a25a:	e7ed      	b.n	800a238 <__gethex+0x2fc>
 800a25c:	1e6f      	subs	r7, r5, #1
 800a25e:	f1ba 0f00 	cmp.w	sl, #0
 800a262:	d131      	bne.n	800a2c8 <__gethex+0x38c>
 800a264:	b127      	cbz	r7, 800a270 <__gethex+0x334>
 800a266:	4639      	mov	r1, r7
 800a268:	4620      	mov	r0, r4
 800a26a:	f000 fe38 	bl	800aede <__any_on>
 800a26e:	4682      	mov	sl, r0
 800a270:	117b      	asrs	r3, r7, #5
 800a272:	2101      	movs	r1, #1
 800a274:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a278:	f007 071f 	and.w	r7, r7, #31
 800a27c:	fa01 f707 	lsl.w	r7, r1, r7
 800a280:	421f      	tst	r7, r3
 800a282:	4629      	mov	r1, r5
 800a284:	4620      	mov	r0, r4
 800a286:	bf18      	it	ne
 800a288:	f04a 0a02 	orrne.w	sl, sl, #2
 800a28c:	1b76      	subs	r6, r6, r5
 800a28e:	f7ff fded 	bl	8009e6c <rshift>
 800a292:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a296:	2702      	movs	r7, #2
 800a298:	f1ba 0f00 	cmp.w	sl, #0
 800a29c:	d048      	beq.n	800a330 <__gethex+0x3f4>
 800a29e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d015      	beq.n	800a2d2 <__gethex+0x396>
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	d017      	beq.n	800a2da <__gethex+0x39e>
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d109      	bne.n	800a2c2 <__gethex+0x386>
 800a2ae:	f01a 0f02 	tst.w	sl, #2
 800a2b2:	d006      	beq.n	800a2c2 <__gethex+0x386>
 800a2b4:	f8d9 0000 	ldr.w	r0, [r9]
 800a2b8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a2bc:	f01a 0f01 	tst.w	sl, #1
 800a2c0:	d10e      	bne.n	800a2e0 <__gethex+0x3a4>
 800a2c2:	f047 0710 	orr.w	r7, r7, #16
 800a2c6:	e033      	b.n	800a330 <__gethex+0x3f4>
 800a2c8:	f04f 0a01 	mov.w	sl, #1
 800a2cc:	e7d0      	b.n	800a270 <__gethex+0x334>
 800a2ce:	2701      	movs	r7, #1
 800a2d0:	e7e2      	b.n	800a298 <__gethex+0x35c>
 800a2d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2d4:	f1c3 0301 	rsb	r3, r3, #1
 800a2d8:	9315      	str	r3, [sp, #84]	; 0x54
 800a2da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d0f0      	beq.n	800a2c2 <__gethex+0x386>
 800a2e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2e4:	f104 0314 	add.w	r3, r4, #20
 800a2e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a2ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a2f0:	f04f 0c00 	mov.w	ip, #0
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a2fe:	d01c      	beq.n	800a33a <__gethex+0x3fe>
 800a300:	3201      	adds	r2, #1
 800a302:	6002      	str	r2, [r0, #0]
 800a304:	2f02      	cmp	r7, #2
 800a306:	f104 0314 	add.w	r3, r4, #20
 800a30a:	d13f      	bne.n	800a38c <__gethex+0x450>
 800a30c:	f8d8 2000 	ldr.w	r2, [r8]
 800a310:	3a01      	subs	r2, #1
 800a312:	42b2      	cmp	r2, r6
 800a314:	d10a      	bne.n	800a32c <__gethex+0x3f0>
 800a316:	1171      	asrs	r1, r6, #5
 800a318:	2201      	movs	r2, #1
 800a31a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a31e:	f006 061f 	and.w	r6, r6, #31
 800a322:	fa02 f606 	lsl.w	r6, r2, r6
 800a326:	421e      	tst	r6, r3
 800a328:	bf18      	it	ne
 800a32a:	4617      	movne	r7, r2
 800a32c:	f047 0720 	orr.w	r7, r7, #32
 800a330:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a332:	601c      	str	r4, [r3, #0]
 800a334:	9b04      	ldr	r3, [sp, #16]
 800a336:	601d      	str	r5, [r3, #0]
 800a338:	e695      	b.n	800a066 <__gethex+0x12a>
 800a33a:	4299      	cmp	r1, r3
 800a33c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a340:	d8d8      	bhi.n	800a2f4 <__gethex+0x3b8>
 800a342:	68a3      	ldr	r3, [r4, #8]
 800a344:	459b      	cmp	fp, r3
 800a346:	db19      	blt.n	800a37c <__gethex+0x440>
 800a348:	6861      	ldr	r1, [r4, #4]
 800a34a:	ee18 0a10 	vmov	r0, s16
 800a34e:	3101      	adds	r1, #1
 800a350:	f000 f928 	bl	800a5a4 <_Balloc>
 800a354:	4681      	mov	r9, r0
 800a356:	b918      	cbnz	r0, 800a360 <__gethex+0x424>
 800a358:	4b1a      	ldr	r3, [pc, #104]	; (800a3c4 <__gethex+0x488>)
 800a35a:	4602      	mov	r2, r0
 800a35c:	2184      	movs	r1, #132	; 0x84
 800a35e:	e6a8      	b.n	800a0b2 <__gethex+0x176>
 800a360:	6922      	ldr	r2, [r4, #16]
 800a362:	3202      	adds	r2, #2
 800a364:	f104 010c 	add.w	r1, r4, #12
 800a368:	0092      	lsls	r2, r2, #2
 800a36a:	300c      	adds	r0, #12
 800a36c:	f000 f90c 	bl	800a588 <memcpy>
 800a370:	4621      	mov	r1, r4
 800a372:	ee18 0a10 	vmov	r0, s16
 800a376:	f000 f955 	bl	800a624 <_Bfree>
 800a37a:	464c      	mov	r4, r9
 800a37c:	6923      	ldr	r3, [r4, #16]
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a384:	6122      	str	r2, [r4, #16]
 800a386:	2201      	movs	r2, #1
 800a388:	615a      	str	r2, [r3, #20]
 800a38a:	e7bb      	b.n	800a304 <__gethex+0x3c8>
 800a38c:	6922      	ldr	r2, [r4, #16]
 800a38e:	455a      	cmp	r2, fp
 800a390:	dd0b      	ble.n	800a3aa <__gethex+0x46e>
 800a392:	2101      	movs	r1, #1
 800a394:	4620      	mov	r0, r4
 800a396:	f7ff fd69 	bl	8009e6c <rshift>
 800a39a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a39e:	3501      	adds	r5, #1
 800a3a0:	42ab      	cmp	r3, r5
 800a3a2:	f6ff aed0 	blt.w	800a146 <__gethex+0x20a>
 800a3a6:	2701      	movs	r7, #1
 800a3a8:	e7c0      	b.n	800a32c <__gethex+0x3f0>
 800a3aa:	f016 061f 	ands.w	r6, r6, #31
 800a3ae:	d0fa      	beq.n	800a3a6 <__gethex+0x46a>
 800a3b0:	4453      	add	r3, sl
 800a3b2:	f1c6 0620 	rsb	r6, r6, #32
 800a3b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a3ba:	f000 f9e5 	bl	800a788 <__hi0bits>
 800a3be:	42b0      	cmp	r0, r6
 800a3c0:	dbe7      	blt.n	800a392 <__gethex+0x456>
 800a3c2:	e7f0      	b.n	800a3a6 <__gethex+0x46a>
 800a3c4:	0800c2e8 	.word	0x0800c2e8

0800a3c8 <L_shift>:
 800a3c8:	f1c2 0208 	rsb	r2, r2, #8
 800a3cc:	0092      	lsls	r2, r2, #2
 800a3ce:	b570      	push	{r4, r5, r6, lr}
 800a3d0:	f1c2 0620 	rsb	r6, r2, #32
 800a3d4:	6843      	ldr	r3, [r0, #4]
 800a3d6:	6804      	ldr	r4, [r0, #0]
 800a3d8:	fa03 f506 	lsl.w	r5, r3, r6
 800a3dc:	432c      	orrs	r4, r5
 800a3de:	40d3      	lsrs	r3, r2
 800a3e0:	6004      	str	r4, [r0, #0]
 800a3e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3e6:	4288      	cmp	r0, r1
 800a3e8:	d3f4      	bcc.n	800a3d4 <L_shift+0xc>
 800a3ea:	bd70      	pop	{r4, r5, r6, pc}

0800a3ec <__match>:
 800a3ec:	b530      	push	{r4, r5, lr}
 800a3ee:	6803      	ldr	r3, [r0, #0]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3f6:	b914      	cbnz	r4, 800a3fe <__match+0x12>
 800a3f8:	6003      	str	r3, [r0, #0]
 800a3fa:	2001      	movs	r0, #1
 800a3fc:	bd30      	pop	{r4, r5, pc}
 800a3fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a402:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a406:	2d19      	cmp	r5, #25
 800a408:	bf98      	it	ls
 800a40a:	3220      	addls	r2, #32
 800a40c:	42a2      	cmp	r2, r4
 800a40e:	d0f0      	beq.n	800a3f2 <__match+0x6>
 800a410:	2000      	movs	r0, #0
 800a412:	e7f3      	b.n	800a3fc <__match+0x10>

0800a414 <__hexnan>:
 800a414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a418:	680b      	ldr	r3, [r1, #0]
 800a41a:	115e      	asrs	r6, r3, #5
 800a41c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a420:	f013 031f 	ands.w	r3, r3, #31
 800a424:	b087      	sub	sp, #28
 800a426:	bf18      	it	ne
 800a428:	3604      	addne	r6, #4
 800a42a:	2500      	movs	r5, #0
 800a42c:	1f37      	subs	r7, r6, #4
 800a42e:	4690      	mov	r8, r2
 800a430:	6802      	ldr	r2, [r0, #0]
 800a432:	9301      	str	r3, [sp, #4]
 800a434:	4682      	mov	sl, r0
 800a436:	f846 5c04 	str.w	r5, [r6, #-4]
 800a43a:	46b9      	mov	r9, r7
 800a43c:	463c      	mov	r4, r7
 800a43e:	9502      	str	r5, [sp, #8]
 800a440:	46ab      	mov	fp, r5
 800a442:	7851      	ldrb	r1, [r2, #1]
 800a444:	1c53      	adds	r3, r2, #1
 800a446:	9303      	str	r3, [sp, #12]
 800a448:	b341      	cbz	r1, 800a49c <__hexnan+0x88>
 800a44a:	4608      	mov	r0, r1
 800a44c:	9205      	str	r2, [sp, #20]
 800a44e:	9104      	str	r1, [sp, #16]
 800a450:	f7ff fd5e 	bl	8009f10 <__hexdig_fun>
 800a454:	2800      	cmp	r0, #0
 800a456:	d14f      	bne.n	800a4f8 <__hexnan+0xe4>
 800a458:	9904      	ldr	r1, [sp, #16]
 800a45a:	9a05      	ldr	r2, [sp, #20]
 800a45c:	2920      	cmp	r1, #32
 800a45e:	d818      	bhi.n	800a492 <__hexnan+0x7e>
 800a460:	9b02      	ldr	r3, [sp, #8]
 800a462:	459b      	cmp	fp, r3
 800a464:	dd13      	ble.n	800a48e <__hexnan+0x7a>
 800a466:	454c      	cmp	r4, r9
 800a468:	d206      	bcs.n	800a478 <__hexnan+0x64>
 800a46a:	2d07      	cmp	r5, #7
 800a46c:	dc04      	bgt.n	800a478 <__hexnan+0x64>
 800a46e:	462a      	mov	r2, r5
 800a470:	4649      	mov	r1, r9
 800a472:	4620      	mov	r0, r4
 800a474:	f7ff ffa8 	bl	800a3c8 <L_shift>
 800a478:	4544      	cmp	r4, r8
 800a47a:	d950      	bls.n	800a51e <__hexnan+0x10a>
 800a47c:	2300      	movs	r3, #0
 800a47e:	f1a4 0904 	sub.w	r9, r4, #4
 800a482:	f844 3c04 	str.w	r3, [r4, #-4]
 800a486:	f8cd b008 	str.w	fp, [sp, #8]
 800a48a:	464c      	mov	r4, r9
 800a48c:	461d      	mov	r5, r3
 800a48e:	9a03      	ldr	r2, [sp, #12]
 800a490:	e7d7      	b.n	800a442 <__hexnan+0x2e>
 800a492:	2929      	cmp	r1, #41	; 0x29
 800a494:	d156      	bne.n	800a544 <__hexnan+0x130>
 800a496:	3202      	adds	r2, #2
 800a498:	f8ca 2000 	str.w	r2, [sl]
 800a49c:	f1bb 0f00 	cmp.w	fp, #0
 800a4a0:	d050      	beq.n	800a544 <__hexnan+0x130>
 800a4a2:	454c      	cmp	r4, r9
 800a4a4:	d206      	bcs.n	800a4b4 <__hexnan+0xa0>
 800a4a6:	2d07      	cmp	r5, #7
 800a4a8:	dc04      	bgt.n	800a4b4 <__hexnan+0xa0>
 800a4aa:	462a      	mov	r2, r5
 800a4ac:	4649      	mov	r1, r9
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f7ff ff8a 	bl	800a3c8 <L_shift>
 800a4b4:	4544      	cmp	r4, r8
 800a4b6:	d934      	bls.n	800a522 <__hexnan+0x10e>
 800a4b8:	f1a8 0204 	sub.w	r2, r8, #4
 800a4bc:	4623      	mov	r3, r4
 800a4be:	f853 1b04 	ldr.w	r1, [r3], #4
 800a4c2:	f842 1f04 	str.w	r1, [r2, #4]!
 800a4c6:	429f      	cmp	r7, r3
 800a4c8:	d2f9      	bcs.n	800a4be <__hexnan+0xaa>
 800a4ca:	1b3b      	subs	r3, r7, r4
 800a4cc:	f023 0303 	bic.w	r3, r3, #3
 800a4d0:	3304      	adds	r3, #4
 800a4d2:	3401      	adds	r4, #1
 800a4d4:	3e03      	subs	r6, #3
 800a4d6:	42b4      	cmp	r4, r6
 800a4d8:	bf88      	it	hi
 800a4da:	2304      	movhi	r3, #4
 800a4dc:	4443      	add	r3, r8
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f843 2b04 	str.w	r2, [r3], #4
 800a4e4:	429f      	cmp	r7, r3
 800a4e6:	d2fb      	bcs.n	800a4e0 <__hexnan+0xcc>
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	b91b      	cbnz	r3, 800a4f4 <__hexnan+0xe0>
 800a4ec:	4547      	cmp	r7, r8
 800a4ee:	d127      	bne.n	800a540 <__hexnan+0x12c>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	603b      	str	r3, [r7, #0]
 800a4f4:	2005      	movs	r0, #5
 800a4f6:	e026      	b.n	800a546 <__hexnan+0x132>
 800a4f8:	3501      	adds	r5, #1
 800a4fa:	2d08      	cmp	r5, #8
 800a4fc:	f10b 0b01 	add.w	fp, fp, #1
 800a500:	dd06      	ble.n	800a510 <__hexnan+0xfc>
 800a502:	4544      	cmp	r4, r8
 800a504:	d9c3      	bls.n	800a48e <__hexnan+0x7a>
 800a506:	2300      	movs	r3, #0
 800a508:	f844 3c04 	str.w	r3, [r4, #-4]
 800a50c:	2501      	movs	r5, #1
 800a50e:	3c04      	subs	r4, #4
 800a510:	6822      	ldr	r2, [r4, #0]
 800a512:	f000 000f 	and.w	r0, r0, #15
 800a516:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a51a:	6022      	str	r2, [r4, #0]
 800a51c:	e7b7      	b.n	800a48e <__hexnan+0x7a>
 800a51e:	2508      	movs	r5, #8
 800a520:	e7b5      	b.n	800a48e <__hexnan+0x7a>
 800a522:	9b01      	ldr	r3, [sp, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d0df      	beq.n	800a4e8 <__hexnan+0xd4>
 800a528:	f04f 32ff 	mov.w	r2, #4294967295
 800a52c:	f1c3 0320 	rsb	r3, r3, #32
 800a530:	fa22 f303 	lsr.w	r3, r2, r3
 800a534:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a538:	401a      	ands	r2, r3
 800a53a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a53e:	e7d3      	b.n	800a4e8 <__hexnan+0xd4>
 800a540:	3f04      	subs	r7, #4
 800a542:	e7d1      	b.n	800a4e8 <__hexnan+0xd4>
 800a544:	2004      	movs	r0, #4
 800a546:	b007      	add	sp, #28
 800a548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a54c <_localeconv_r>:
 800a54c:	4800      	ldr	r0, [pc, #0]	; (800a550 <_localeconv_r+0x4>)
 800a54e:	4770      	bx	lr
 800a550:	2000017c 	.word	0x2000017c

0800a554 <malloc>:
 800a554:	4b02      	ldr	r3, [pc, #8]	; (800a560 <malloc+0xc>)
 800a556:	4601      	mov	r1, r0
 800a558:	6818      	ldr	r0, [r3, #0]
 800a55a:	f000 bd63 	b.w	800b024 <_malloc_r>
 800a55e:	bf00      	nop
 800a560:	20000024 	.word	0x20000024

0800a564 <__ascii_mbtowc>:
 800a564:	b082      	sub	sp, #8
 800a566:	b901      	cbnz	r1, 800a56a <__ascii_mbtowc+0x6>
 800a568:	a901      	add	r1, sp, #4
 800a56a:	b142      	cbz	r2, 800a57e <__ascii_mbtowc+0x1a>
 800a56c:	b14b      	cbz	r3, 800a582 <__ascii_mbtowc+0x1e>
 800a56e:	7813      	ldrb	r3, [r2, #0]
 800a570:	600b      	str	r3, [r1, #0]
 800a572:	7812      	ldrb	r2, [r2, #0]
 800a574:	1e10      	subs	r0, r2, #0
 800a576:	bf18      	it	ne
 800a578:	2001      	movne	r0, #1
 800a57a:	b002      	add	sp, #8
 800a57c:	4770      	bx	lr
 800a57e:	4610      	mov	r0, r2
 800a580:	e7fb      	b.n	800a57a <__ascii_mbtowc+0x16>
 800a582:	f06f 0001 	mvn.w	r0, #1
 800a586:	e7f8      	b.n	800a57a <__ascii_mbtowc+0x16>

0800a588 <memcpy>:
 800a588:	440a      	add	r2, r1
 800a58a:	4291      	cmp	r1, r2
 800a58c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a590:	d100      	bne.n	800a594 <memcpy+0xc>
 800a592:	4770      	bx	lr
 800a594:	b510      	push	{r4, lr}
 800a596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a59a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a59e:	4291      	cmp	r1, r2
 800a5a0:	d1f9      	bne.n	800a596 <memcpy+0xe>
 800a5a2:	bd10      	pop	{r4, pc}

0800a5a4 <_Balloc>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	460d      	mov	r5, r1
 800a5ac:	b976      	cbnz	r6, 800a5cc <_Balloc+0x28>
 800a5ae:	2010      	movs	r0, #16
 800a5b0:	f7ff ffd0 	bl	800a554 <malloc>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	6260      	str	r0, [r4, #36]	; 0x24
 800a5b8:	b920      	cbnz	r0, 800a5c4 <_Balloc+0x20>
 800a5ba:	4b18      	ldr	r3, [pc, #96]	; (800a61c <_Balloc+0x78>)
 800a5bc:	4818      	ldr	r0, [pc, #96]	; (800a620 <_Balloc+0x7c>)
 800a5be:	2166      	movs	r1, #102	; 0x66
 800a5c0:	f000 ff3c 	bl	800b43c <__assert_func>
 800a5c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5c8:	6006      	str	r6, [r0, #0]
 800a5ca:	60c6      	str	r6, [r0, #12]
 800a5cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a5ce:	68f3      	ldr	r3, [r6, #12]
 800a5d0:	b183      	cbz	r3, 800a5f4 <_Balloc+0x50>
 800a5d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a5da:	b9b8      	cbnz	r0, 800a60c <_Balloc+0x68>
 800a5dc:	2101      	movs	r1, #1
 800a5de:	fa01 f605 	lsl.w	r6, r1, r5
 800a5e2:	1d72      	adds	r2, r6, #5
 800a5e4:	0092      	lsls	r2, r2, #2
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f000 fc9a 	bl	800af20 <_calloc_r>
 800a5ec:	b160      	cbz	r0, 800a608 <_Balloc+0x64>
 800a5ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a5f2:	e00e      	b.n	800a612 <_Balloc+0x6e>
 800a5f4:	2221      	movs	r2, #33	; 0x21
 800a5f6:	2104      	movs	r1, #4
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f000 fc91 	bl	800af20 <_calloc_r>
 800a5fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a600:	60f0      	str	r0, [r6, #12]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1e4      	bne.n	800a5d2 <_Balloc+0x2e>
 800a608:	2000      	movs	r0, #0
 800a60a:	bd70      	pop	{r4, r5, r6, pc}
 800a60c:	6802      	ldr	r2, [r0, #0]
 800a60e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a612:	2300      	movs	r3, #0
 800a614:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a618:	e7f7      	b.n	800a60a <_Balloc+0x66>
 800a61a:	bf00      	nop
 800a61c:	0800c276 	.word	0x0800c276
 800a620:	0800c374 	.word	0x0800c374

0800a624 <_Bfree>:
 800a624:	b570      	push	{r4, r5, r6, lr}
 800a626:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a628:	4605      	mov	r5, r0
 800a62a:	460c      	mov	r4, r1
 800a62c:	b976      	cbnz	r6, 800a64c <_Bfree+0x28>
 800a62e:	2010      	movs	r0, #16
 800a630:	f7ff ff90 	bl	800a554 <malloc>
 800a634:	4602      	mov	r2, r0
 800a636:	6268      	str	r0, [r5, #36]	; 0x24
 800a638:	b920      	cbnz	r0, 800a644 <_Bfree+0x20>
 800a63a:	4b09      	ldr	r3, [pc, #36]	; (800a660 <_Bfree+0x3c>)
 800a63c:	4809      	ldr	r0, [pc, #36]	; (800a664 <_Bfree+0x40>)
 800a63e:	218a      	movs	r1, #138	; 0x8a
 800a640:	f000 fefc 	bl	800b43c <__assert_func>
 800a644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a648:	6006      	str	r6, [r0, #0]
 800a64a:	60c6      	str	r6, [r0, #12]
 800a64c:	b13c      	cbz	r4, 800a65e <_Bfree+0x3a>
 800a64e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a650:	6862      	ldr	r2, [r4, #4]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a658:	6021      	str	r1, [r4, #0]
 800a65a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a65e:	bd70      	pop	{r4, r5, r6, pc}
 800a660:	0800c276 	.word	0x0800c276
 800a664:	0800c374 	.word	0x0800c374

0800a668 <__multadd>:
 800a668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a66c:	690d      	ldr	r5, [r1, #16]
 800a66e:	4607      	mov	r7, r0
 800a670:	460c      	mov	r4, r1
 800a672:	461e      	mov	r6, r3
 800a674:	f101 0c14 	add.w	ip, r1, #20
 800a678:	2000      	movs	r0, #0
 800a67a:	f8dc 3000 	ldr.w	r3, [ip]
 800a67e:	b299      	uxth	r1, r3
 800a680:	fb02 6101 	mla	r1, r2, r1, r6
 800a684:	0c1e      	lsrs	r6, r3, #16
 800a686:	0c0b      	lsrs	r3, r1, #16
 800a688:	fb02 3306 	mla	r3, r2, r6, r3
 800a68c:	b289      	uxth	r1, r1
 800a68e:	3001      	adds	r0, #1
 800a690:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a694:	4285      	cmp	r5, r0
 800a696:	f84c 1b04 	str.w	r1, [ip], #4
 800a69a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a69e:	dcec      	bgt.n	800a67a <__multadd+0x12>
 800a6a0:	b30e      	cbz	r6, 800a6e6 <__multadd+0x7e>
 800a6a2:	68a3      	ldr	r3, [r4, #8]
 800a6a4:	42ab      	cmp	r3, r5
 800a6a6:	dc19      	bgt.n	800a6dc <__multadd+0x74>
 800a6a8:	6861      	ldr	r1, [r4, #4]
 800a6aa:	4638      	mov	r0, r7
 800a6ac:	3101      	adds	r1, #1
 800a6ae:	f7ff ff79 	bl	800a5a4 <_Balloc>
 800a6b2:	4680      	mov	r8, r0
 800a6b4:	b928      	cbnz	r0, 800a6c2 <__multadd+0x5a>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	4b0c      	ldr	r3, [pc, #48]	; (800a6ec <__multadd+0x84>)
 800a6ba:	480d      	ldr	r0, [pc, #52]	; (800a6f0 <__multadd+0x88>)
 800a6bc:	21b5      	movs	r1, #181	; 0xb5
 800a6be:	f000 febd 	bl	800b43c <__assert_func>
 800a6c2:	6922      	ldr	r2, [r4, #16]
 800a6c4:	3202      	adds	r2, #2
 800a6c6:	f104 010c 	add.w	r1, r4, #12
 800a6ca:	0092      	lsls	r2, r2, #2
 800a6cc:	300c      	adds	r0, #12
 800a6ce:	f7ff ff5b 	bl	800a588 <memcpy>
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	4638      	mov	r0, r7
 800a6d6:	f7ff ffa5 	bl	800a624 <_Bfree>
 800a6da:	4644      	mov	r4, r8
 800a6dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a6e0:	3501      	adds	r5, #1
 800a6e2:	615e      	str	r6, [r3, #20]
 800a6e4:	6125      	str	r5, [r4, #16]
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6ec:	0800c2e8 	.word	0x0800c2e8
 800a6f0:	0800c374 	.word	0x0800c374

0800a6f4 <__s2b>:
 800a6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f8:	460c      	mov	r4, r1
 800a6fa:	4615      	mov	r5, r2
 800a6fc:	461f      	mov	r7, r3
 800a6fe:	2209      	movs	r2, #9
 800a700:	3308      	adds	r3, #8
 800a702:	4606      	mov	r6, r0
 800a704:	fb93 f3f2 	sdiv	r3, r3, r2
 800a708:	2100      	movs	r1, #0
 800a70a:	2201      	movs	r2, #1
 800a70c:	429a      	cmp	r2, r3
 800a70e:	db09      	blt.n	800a724 <__s2b+0x30>
 800a710:	4630      	mov	r0, r6
 800a712:	f7ff ff47 	bl	800a5a4 <_Balloc>
 800a716:	b940      	cbnz	r0, 800a72a <__s2b+0x36>
 800a718:	4602      	mov	r2, r0
 800a71a:	4b19      	ldr	r3, [pc, #100]	; (800a780 <__s2b+0x8c>)
 800a71c:	4819      	ldr	r0, [pc, #100]	; (800a784 <__s2b+0x90>)
 800a71e:	21ce      	movs	r1, #206	; 0xce
 800a720:	f000 fe8c 	bl	800b43c <__assert_func>
 800a724:	0052      	lsls	r2, r2, #1
 800a726:	3101      	adds	r1, #1
 800a728:	e7f0      	b.n	800a70c <__s2b+0x18>
 800a72a:	9b08      	ldr	r3, [sp, #32]
 800a72c:	6143      	str	r3, [r0, #20]
 800a72e:	2d09      	cmp	r5, #9
 800a730:	f04f 0301 	mov.w	r3, #1
 800a734:	6103      	str	r3, [r0, #16]
 800a736:	dd16      	ble.n	800a766 <__s2b+0x72>
 800a738:	f104 0909 	add.w	r9, r4, #9
 800a73c:	46c8      	mov	r8, r9
 800a73e:	442c      	add	r4, r5
 800a740:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a744:	4601      	mov	r1, r0
 800a746:	3b30      	subs	r3, #48	; 0x30
 800a748:	220a      	movs	r2, #10
 800a74a:	4630      	mov	r0, r6
 800a74c:	f7ff ff8c 	bl	800a668 <__multadd>
 800a750:	45a0      	cmp	r8, r4
 800a752:	d1f5      	bne.n	800a740 <__s2b+0x4c>
 800a754:	f1a5 0408 	sub.w	r4, r5, #8
 800a758:	444c      	add	r4, r9
 800a75a:	1b2d      	subs	r5, r5, r4
 800a75c:	1963      	adds	r3, r4, r5
 800a75e:	42bb      	cmp	r3, r7
 800a760:	db04      	blt.n	800a76c <__s2b+0x78>
 800a762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a766:	340a      	adds	r4, #10
 800a768:	2509      	movs	r5, #9
 800a76a:	e7f6      	b.n	800a75a <__s2b+0x66>
 800a76c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a770:	4601      	mov	r1, r0
 800a772:	3b30      	subs	r3, #48	; 0x30
 800a774:	220a      	movs	r2, #10
 800a776:	4630      	mov	r0, r6
 800a778:	f7ff ff76 	bl	800a668 <__multadd>
 800a77c:	e7ee      	b.n	800a75c <__s2b+0x68>
 800a77e:	bf00      	nop
 800a780:	0800c2e8 	.word	0x0800c2e8
 800a784:	0800c374 	.word	0x0800c374

0800a788 <__hi0bits>:
 800a788:	0c03      	lsrs	r3, r0, #16
 800a78a:	041b      	lsls	r3, r3, #16
 800a78c:	b9d3      	cbnz	r3, 800a7c4 <__hi0bits+0x3c>
 800a78e:	0400      	lsls	r0, r0, #16
 800a790:	2310      	movs	r3, #16
 800a792:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a796:	bf04      	itt	eq
 800a798:	0200      	lsleq	r0, r0, #8
 800a79a:	3308      	addeq	r3, #8
 800a79c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a7a0:	bf04      	itt	eq
 800a7a2:	0100      	lsleq	r0, r0, #4
 800a7a4:	3304      	addeq	r3, #4
 800a7a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a7aa:	bf04      	itt	eq
 800a7ac:	0080      	lsleq	r0, r0, #2
 800a7ae:	3302      	addeq	r3, #2
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	db05      	blt.n	800a7c0 <__hi0bits+0x38>
 800a7b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a7b8:	f103 0301 	add.w	r3, r3, #1
 800a7bc:	bf08      	it	eq
 800a7be:	2320      	moveq	r3, #32
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	4770      	bx	lr
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	e7e4      	b.n	800a792 <__hi0bits+0xa>

0800a7c8 <__lo0bits>:
 800a7c8:	6803      	ldr	r3, [r0, #0]
 800a7ca:	f013 0207 	ands.w	r2, r3, #7
 800a7ce:	4601      	mov	r1, r0
 800a7d0:	d00b      	beq.n	800a7ea <__lo0bits+0x22>
 800a7d2:	07da      	lsls	r2, r3, #31
 800a7d4:	d423      	bmi.n	800a81e <__lo0bits+0x56>
 800a7d6:	0798      	lsls	r0, r3, #30
 800a7d8:	bf49      	itett	mi
 800a7da:	085b      	lsrmi	r3, r3, #1
 800a7dc:	089b      	lsrpl	r3, r3, #2
 800a7de:	2001      	movmi	r0, #1
 800a7e0:	600b      	strmi	r3, [r1, #0]
 800a7e2:	bf5c      	itt	pl
 800a7e4:	600b      	strpl	r3, [r1, #0]
 800a7e6:	2002      	movpl	r0, #2
 800a7e8:	4770      	bx	lr
 800a7ea:	b298      	uxth	r0, r3
 800a7ec:	b9a8      	cbnz	r0, 800a81a <__lo0bits+0x52>
 800a7ee:	0c1b      	lsrs	r3, r3, #16
 800a7f0:	2010      	movs	r0, #16
 800a7f2:	b2da      	uxtb	r2, r3
 800a7f4:	b90a      	cbnz	r2, 800a7fa <__lo0bits+0x32>
 800a7f6:	3008      	adds	r0, #8
 800a7f8:	0a1b      	lsrs	r3, r3, #8
 800a7fa:	071a      	lsls	r2, r3, #28
 800a7fc:	bf04      	itt	eq
 800a7fe:	091b      	lsreq	r3, r3, #4
 800a800:	3004      	addeq	r0, #4
 800a802:	079a      	lsls	r2, r3, #30
 800a804:	bf04      	itt	eq
 800a806:	089b      	lsreq	r3, r3, #2
 800a808:	3002      	addeq	r0, #2
 800a80a:	07da      	lsls	r2, r3, #31
 800a80c:	d403      	bmi.n	800a816 <__lo0bits+0x4e>
 800a80e:	085b      	lsrs	r3, r3, #1
 800a810:	f100 0001 	add.w	r0, r0, #1
 800a814:	d005      	beq.n	800a822 <__lo0bits+0x5a>
 800a816:	600b      	str	r3, [r1, #0]
 800a818:	4770      	bx	lr
 800a81a:	4610      	mov	r0, r2
 800a81c:	e7e9      	b.n	800a7f2 <__lo0bits+0x2a>
 800a81e:	2000      	movs	r0, #0
 800a820:	4770      	bx	lr
 800a822:	2020      	movs	r0, #32
 800a824:	4770      	bx	lr
	...

0800a828 <__i2b>:
 800a828:	b510      	push	{r4, lr}
 800a82a:	460c      	mov	r4, r1
 800a82c:	2101      	movs	r1, #1
 800a82e:	f7ff feb9 	bl	800a5a4 <_Balloc>
 800a832:	4602      	mov	r2, r0
 800a834:	b928      	cbnz	r0, 800a842 <__i2b+0x1a>
 800a836:	4b05      	ldr	r3, [pc, #20]	; (800a84c <__i2b+0x24>)
 800a838:	4805      	ldr	r0, [pc, #20]	; (800a850 <__i2b+0x28>)
 800a83a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a83e:	f000 fdfd 	bl	800b43c <__assert_func>
 800a842:	2301      	movs	r3, #1
 800a844:	6144      	str	r4, [r0, #20]
 800a846:	6103      	str	r3, [r0, #16]
 800a848:	bd10      	pop	{r4, pc}
 800a84a:	bf00      	nop
 800a84c:	0800c2e8 	.word	0x0800c2e8
 800a850:	0800c374 	.word	0x0800c374

0800a854 <__multiply>:
 800a854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a858:	4691      	mov	r9, r2
 800a85a:	690a      	ldr	r2, [r1, #16]
 800a85c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a860:	429a      	cmp	r2, r3
 800a862:	bfb8      	it	lt
 800a864:	460b      	movlt	r3, r1
 800a866:	460c      	mov	r4, r1
 800a868:	bfbc      	itt	lt
 800a86a:	464c      	movlt	r4, r9
 800a86c:	4699      	movlt	r9, r3
 800a86e:	6927      	ldr	r7, [r4, #16]
 800a870:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a874:	68a3      	ldr	r3, [r4, #8]
 800a876:	6861      	ldr	r1, [r4, #4]
 800a878:	eb07 060a 	add.w	r6, r7, sl
 800a87c:	42b3      	cmp	r3, r6
 800a87e:	b085      	sub	sp, #20
 800a880:	bfb8      	it	lt
 800a882:	3101      	addlt	r1, #1
 800a884:	f7ff fe8e 	bl	800a5a4 <_Balloc>
 800a888:	b930      	cbnz	r0, 800a898 <__multiply+0x44>
 800a88a:	4602      	mov	r2, r0
 800a88c:	4b44      	ldr	r3, [pc, #272]	; (800a9a0 <__multiply+0x14c>)
 800a88e:	4845      	ldr	r0, [pc, #276]	; (800a9a4 <__multiply+0x150>)
 800a890:	f240 115d 	movw	r1, #349	; 0x15d
 800a894:	f000 fdd2 	bl	800b43c <__assert_func>
 800a898:	f100 0514 	add.w	r5, r0, #20
 800a89c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a8a0:	462b      	mov	r3, r5
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	4543      	cmp	r3, r8
 800a8a6:	d321      	bcc.n	800a8ec <__multiply+0x98>
 800a8a8:	f104 0314 	add.w	r3, r4, #20
 800a8ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a8b0:	f109 0314 	add.w	r3, r9, #20
 800a8b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a8b8:	9202      	str	r2, [sp, #8]
 800a8ba:	1b3a      	subs	r2, r7, r4
 800a8bc:	3a15      	subs	r2, #21
 800a8be:	f022 0203 	bic.w	r2, r2, #3
 800a8c2:	3204      	adds	r2, #4
 800a8c4:	f104 0115 	add.w	r1, r4, #21
 800a8c8:	428f      	cmp	r7, r1
 800a8ca:	bf38      	it	cc
 800a8cc:	2204      	movcc	r2, #4
 800a8ce:	9201      	str	r2, [sp, #4]
 800a8d0:	9a02      	ldr	r2, [sp, #8]
 800a8d2:	9303      	str	r3, [sp, #12]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d80c      	bhi.n	800a8f2 <__multiply+0x9e>
 800a8d8:	2e00      	cmp	r6, #0
 800a8da:	dd03      	ble.n	800a8e4 <__multiply+0x90>
 800a8dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d05a      	beq.n	800a99a <__multiply+0x146>
 800a8e4:	6106      	str	r6, [r0, #16]
 800a8e6:	b005      	add	sp, #20
 800a8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ec:	f843 2b04 	str.w	r2, [r3], #4
 800a8f0:	e7d8      	b.n	800a8a4 <__multiply+0x50>
 800a8f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a8f6:	f1ba 0f00 	cmp.w	sl, #0
 800a8fa:	d024      	beq.n	800a946 <__multiply+0xf2>
 800a8fc:	f104 0e14 	add.w	lr, r4, #20
 800a900:	46a9      	mov	r9, r5
 800a902:	f04f 0c00 	mov.w	ip, #0
 800a906:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a90a:	f8d9 1000 	ldr.w	r1, [r9]
 800a90e:	fa1f fb82 	uxth.w	fp, r2
 800a912:	b289      	uxth	r1, r1
 800a914:	fb0a 110b 	mla	r1, sl, fp, r1
 800a918:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a91c:	f8d9 2000 	ldr.w	r2, [r9]
 800a920:	4461      	add	r1, ip
 800a922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a926:	fb0a c20b 	mla	r2, sl, fp, ip
 800a92a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a92e:	b289      	uxth	r1, r1
 800a930:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a934:	4577      	cmp	r7, lr
 800a936:	f849 1b04 	str.w	r1, [r9], #4
 800a93a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a93e:	d8e2      	bhi.n	800a906 <__multiply+0xb2>
 800a940:	9a01      	ldr	r2, [sp, #4]
 800a942:	f845 c002 	str.w	ip, [r5, r2]
 800a946:	9a03      	ldr	r2, [sp, #12]
 800a948:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a94c:	3304      	adds	r3, #4
 800a94e:	f1b9 0f00 	cmp.w	r9, #0
 800a952:	d020      	beq.n	800a996 <__multiply+0x142>
 800a954:	6829      	ldr	r1, [r5, #0]
 800a956:	f104 0c14 	add.w	ip, r4, #20
 800a95a:	46ae      	mov	lr, r5
 800a95c:	f04f 0a00 	mov.w	sl, #0
 800a960:	f8bc b000 	ldrh.w	fp, [ip]
 800a964:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a968:	fb09 220b 	mla	r2, r9, fp, r2
 800a96c:	4492      	add	sl, r2
 800a96e:	b289      	uxth	r1, r1
 800a970:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a974:	f84e 1b04 	str.w	r1, [lr], #4
 800a978:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a97c:	f8be 1000 	ldrh.w	r1, [lr]
 800a980:	0c12      	lsrs	r2, r2, #16
 800a982:	fb09 1102 	mla	r1, r9, r2, r1
 800a986:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a98a:	4567      	cmp	r7, ip
 800a98c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a990:	d8e6      	bhi.n	800a960 <__multiply+0x10c>
 800a992:	9a01      	ldr	r2, [sp, #4]
 800a994:	50a9      	str	r1, [r5, r2]
 800a996:	3504      	adds	r5, #4
 800a998:	e79a      	b.n	800a8d0 <__multiply+0x7c>
 800a99a:	3e01      	subs	r6, #1
 800a99c:	e79c      	b.n	800a8d8 <__multiply+0x84>
 800a99e:	bf00      	nop
 800a9a0:	0800c2e8 	.word	0x0800c2e8
 800a9a4:	0800c374 	.word	0x0800c374

0800a9a8 <__pow5mult>:
 800a9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9ac:	4615      	mov	r5, r2
 800a9ae:	f012 0203 	ands.w	r2, r2, #3
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	460f      	mov	r7, r1
 800a9b6:	d007      	beq.n	800a9c8 <__pow5mult+0x20>
 800a9b8:	4c25      	ldr	r4, [pc, #148]	; (800aa50 <__pow5mult+0xa8>)
 800a9ba:	3a01      	subs	r2, #1
 800a9bc:	2300      	movs	r3, #0
 800a9be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9c2:	f7ff fe51 	bl	800a668 <__multadd>
 800a9c6:	4607      	mov	r7, r0
 800a9c8:	10ad      	asrs	r5, r5, #2
 800a9ca:	d03d      	beq.n	800aa48 <__pow5mult+0xa0>
 800a9cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a9ce:	b97c      	cbnz	r4, 800a9f0 <__pow5mult+0x48>
 800a9d0:	2010      	movs	r0, #16
 800a9d2:	f7ff fdbf 	bl	800a554 <malloc>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	6270      	str	r0, [r6, #36]	; 0x24
 800a9da:	b928      	cbnz	r0, 800a9e8 <__pow5mult+0x40>
 800a9dc:	4b1d      	ldr	r3, [pc, #116]	; (800aa54 <__pow5mult+0xac>)
 800a9de:	481e      	ldr	r0, [pc, #120]	; (800aa58 <__pow5mult+0xb0>)
 800a9e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a9e4:	f000 fd2a 	bl	800b43c <__assert_func>
 800a9e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9ec:	6004      	str	r4, [r0, #0]
 800a9ee:	60c4      	str	r4, [r0, #12]
 800a9f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a9f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9f8:	b94c      	cbnz	r4, 800aa0e <__pow5mult+0x66>
 800a9fa:	f240 2171 	movw	r1, #625	; 0x271
 800a9fe:	4630      	mov	r0, r6
 800aa00:	f7ff ff12 	bl	800a828 <__i2b>
 800aa04:	2300      	movs	r3, #0
 800aa06:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	6003      	str	r3, [r0, #0]
 800aa0e:	f04f 0900 	mov.w	r9, #0
 800aa12:	07eb      	lsls	r3, r5, #31
 800aa14:	d50a      	bpl.n	800aa2c <__pow5mult+0x84>
 800aa16:	4639      	mov	r1, r7
 800aa18:	4622      	mov	r2, r4
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	f7ff ff1a 	bl	800a854 <__multiply>
 800aa20:	4639      	mov	r1, r7
 800aa22:	4680      	mov	r8, r0
 800aa24:	4630      	mov	r0, r6
 800aa26:	f7ff fdfd 	bl	800a624 <_Bfree>
 800aa2a:	4647      	mov	r7, r8
 800aa2c:	106d      	asrs	r5, r5, #1
 800aa2e:	d00b      	beq.n	800aa48 <__pow5mult+0xa0>
 800aa30:	6820      	ldr	r0, [r4, #0]
 800aa32:	b938      	cbnz	r0, 800aa44 <__pow5mult+0x9c>
 800aa34:	4622      	mov	r2, r4
 800aa36:	4621      	mov	r1, r4
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f7ff ff0b 	bl	800a854 <__multiply>
 800aa3e:	6020      	str	r0, [r4, #0]
 800aa40:	f8c0 9000 	str.w	r9, [r0]
 800aa44:	4604      	mov	r4, r0
 800aa46:	e7e4      	b.n	800aa12 <__pow5mult+0x6a>
 800aa48:	4638      	mov	r0, r7
 800aa4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa4e:	bf00      	nop
 800aa50:	0800c4c0 	.word	0x0800c4c0
 800aa54:	0800c276 	.word	0x0800c276
 800aa58:	0800c374 	.word	0x0800c374

0800aa5c <__lshift>:
 800aa5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa60:	460c      	mov	r4, r1
 800aa62:	6849      	ldr	r1, [r1, #4]
 800aa64:	6923      	ldr	r3, [r4, #16]
 800aa66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa6a:	68a3      	ldr	r3, [r4, #8]
 800aa6c:	4607      	mov	r7, r0
 800aa6e:	4691      	mov	r9, r2
 800aa70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa74:	f108 0601 	add.w	r6, r8, #1
 800aa78:	42b3      	cmp	r3, r6
 800aa7a:	db0b      	blt.n	800aa94 <__lshift+0x38>
 800aa7c:	4638      	mov	r0, r7
 800aa7e:	f7ff fd91 	bl	800a5a4 <_Balloc>
 800aa82:	4605      	mov	r5, r0
 800aa84:	b948      	cbnz	r0, 800aa9a <__lshift+0x3e>
 800aa86:	4602      	mov	r2, r0
 800aa88:	4b2a      	ldr	r3, [pc, #168]	; (800ab34 <__lshift+0xd8>)
 800aa8a:	482b      	ldr	r0, [pc, #172]	; (800ab38 <__lshift+0xdc>)
 800aa8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa90:	f000 fcd4 	bl	800b43c <__assert_func>
 800aa94:	3101      	adds	r1, #1
 800aa96:	005b      	lsls	r3, r3, #1
 800aa98:	e7ee      	b.n	800aa78 <__lshift+0x1c>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	f100 0114 	add.w	r1, r0, #20
 800aaa0:	f100 0210 	add.w	r2, r0, #16
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	4553      	cmp	r3, sl
 800aaa8:	db37      	blt.n	800ab1a <__lshift+0xbe>
 800aaaa:	6920      	ldr	r0, [r4, #16]
 800aaac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aab0:	f104 0314 	add.w	r3, r4, #20
 800aab4:	f019 091f 	ands.w	r9, r9, #31
 800aab8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aabc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aac0:	d02f      	beq.n	800ab22 <__lshift+0xc6>
 800aac2:	f1c9 0e20 	rsb	lr, r9, #32
 800aac6:	468a      	mov	sl, r1
 800aac8:	f04f 0c00 	mov.w	ip, #0
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	fa02 f209 	lsl.w	r2, r2, r9
 800aad2:	ea42 020c 	orr.w	r2, r2, ip
 800aad6:	f84a 2b04 	str.w	r2, [sl], #4
 800aada:	f853 2b04 	ldr.w	r2, [r3], #4
 800aade:	4298      	cmp	r0, r3
 800aae0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aae4:	d8f2      	bhi.n	800aacc <__lshift+0x70>
 800aae6:	1b03      	subs	r3, r0, r4
 800aae8:	3b15      	subs	r3, #21
 800aaea:	f023 0303 	bic.w	r3, r3, #3
 800aaee:	3304      	adds	r3, #4
 800aaf0:	f104 0215 	add.w	r2, r4, #21
 800aaf4:	4290      	cmp	r0, r2
 800aaf6:	bf38      	it	cc
 800aaf8:	2304      	movcc	r3, #4
 800aafa:	f841 c003 	str.w	ip, [r1, r3]
 800aafe:	f1bc 0f00 	cmp.w	ip, #0
 800ab02:	d001      	beq.n	800ab08 <__lshift+0xac>
 800ab04:	f108 0602 	add.w	r6, r8, #2
 800ab08:	3e01      	subs	r6, #1
 800ab0a:	4638      	mov	r0, r7
 800ab0c:	612e      	str	r6, [r5, #16]
 800ab0e:	4621      	mov	r1, r4
 800ab10:	f7ff fd88 	bl	800a624 <_Bfree>
 800ab14:	4628      	mov	r0, r5
 800ab16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab1e:	3301      	adds	r3, #1
 800ab20:	e7c1      	b.n	800aaa6 <__lshift+0x4a>
 800ab22:	3904      	subs	r1, #4
 800ab24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab28:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab2c:	4298      	cmp	r0, r3
 800ab2e:	d8f9      	bhi.n	800ab24 <__lshift+0xc8>
 800ab30:	e7ea      	b.n	800ab08 <__lshift+0xac>
 800ab32:	bf00      	nop
 800ab34:	0800c2e8 	.word	0x0800c2e8
 800ab38:	0800c374 	.word	0x0800c374

0800ab3c <__mcmp>:
 800ab3c:	b530      	push	{r4, r5, lr}
 800ab3e:	6902      	ldr	r2, [r0, #16]
 800ab40:	690c      	ldr	r4, [r1, #16]
 800ab42:	1b12      	subs	r2, r2, r4
 800ab44:	d10e      	bne.n	800ab64 <__mcmp+0x28>
 800ab46:	f100 0314 	add.w	r3, r0, #20
 800ab4a:	3114      	adds	r1, #20
 800ab4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab5c:	42a5      	cmp	r5, r4
 800ab5e:	d003      	beq.n	800ab68 <__mcmp+0x2c>
 800ab60:	d305      	bcc.n	800ab6e <__mcmp+0x32>
 800ab62:	2201      	movs	r2, #1
 800ab64:	4610      	mov	r0, r2
 800ab66:	bd30      	pop	{r4, r5, pc}
 800ab68:	4283      	cmp	r3, r0
 800ab6a:	d3f3      	bcc.n	800ab54 <__mcmp+0x18>
 800ab6c:	e7fa      	b.n	800ab64 <__mcmp+0x28>
 800ab6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab72:	e7f7      	b.n	800ab64 <__mcmp+0x28>

0800ab74 <__mdiff>:
 800ab74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab78:	460c      	mov	r4, r1
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	4620      	mov	r0, r4
 800ab80:	4690      	mov	r8, r2
 800ab82:	f7ff ffdb 	bl	800ab3c <__mcmp>
 800ab86:	1e05      	subs	r5, r0, #0
 800ab88:	d110      	bne.n	800abac <__mdiff+0x38>
 800ab8a:	4629      	mov	r1, r5
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f7ff fd09 	bl	800a5a4 <_Balloc>
 800ab92:	b930      	cbnz	r0, 800aba2 <__mdiff+0x2e>
 800ab94:	4b3a      	ldr	r3, [pc, #232]	; (800ac80 <__mdiff+0x10c>)
 800ab96:	4602      	mov	r2, r0
 800ab98:	f240 2132 	movw	r1, #562	; 0x232
 800ab9c:	4839      	ldr	r0, [pc, #228]	; (800ac84 <__mdiff+0x110>)
 800ab9e:	f000 fc4d 	bl	800b43c <__assert_func>
 800aba2:	2301      	movs	r3, #1
 800aba4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abac:	bfa4      	itt	ge
 800abae:	4643      	movge	r3, r8
 800abb0:	46a0      	movge	r8, r4
 800abb2:	4630      	mov	r0, r6
 800abb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800abb8:	bfa6      	itte	ge
 800abba:	461c      	movge	r4, r3
 800abbc:	2500      	movge	r5, #0
 800abbe:	2501      	movlt	r5, #1
 800abc0:	f7ff fcf0 	bl	800a5a4 <_Balloc>
 800abc4:	b920      	cbnz	r0, 800abd0 <__mdiff+0x5c>
 800abc6:	4b2e      	ldr	r3, [pc, #184]	; (800ac80 <__mdiff+0x10c>)
 800abc8:	4602      	mov	r2, r0
 800abca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800abce:	e7e5      	b.n	800ab9c <__mdiff+0x28>
 800abd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800abd4:	6926      	ldr	r6, [r4, #16]
 800abd6:	60c5      	str	r5, [r0, #12]
 800abd8:	f104 0914 	add.w	r9, r4, #20
 800abdc:	f108 0514 	add.w	r5, r8, #20
 800abe0:	f100 0e14 	add.w	lr, r0, #20
 800abe4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800abe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800abec:	f108 0210 	add.w	r2, r8, #16
 800abf0:	46f2      	mov	sl, lr
 800abf2:	2100      	movs	r1, #0
 800abf4:	f859 3b04 	ldr.w	r3, [r9], #4
 800abf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800abfc:	fa1f f883 	uxth.w	r8, r3
 800ac00:	fa11 f18b 	uxtah	r1, r1, fp
 800ac04:	0c1b      	lsrs	r3, r3, #16
 800ac06:	eba1 0808 	sub.w	r8, r1, r8
 800ac0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ac12:	fa1f f888 	uxth.w	r8, r8
 800ac16:	1419      	asrs	r1, r3, #16
 800ac18:	454e      	cmp	r6, r9
 800ac1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ac1e:	f84a 3b04 	str.w	r3, [sl], #4
 800ac22:	d8e7      	bhi.n	800abf4 <__mdiff+0x80>
 800ac24:	1b33      	subs	r3, r6, r4
 800ac26:	3b15      	subs	r3, #21
 800ac28:	f023 0303 	bic.w	r3, r3, #3
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	3415      	adds	r4, #21
 800ac30:	42a6      	cmp	r6, r4
 800ac32:	bf38      	it	cc
 800ac34:	2304      	movcc	r3, #4
 800ac36:	441d      	add	r5, r3
 800ac38:	4473      	add	r3, lr
 800ac3a:	469e      	mov	lr, r3
 800ac3c:	462e      	mov	r6, r5
 800ac3e:	4566      	cmp	r6, ip
 800ac40:	d30e      	bcc.n	800ac60 <__mdiff+0xec>
 800ac42:	f10c 0203 	add.w	r2, ip, #3
 800ac46:	1b52      	subs	r2, r2, r5
 800ac48:	f022 0203 	bic.w	r2, r2, #3
 800ac4c:	3d03      	subs	r5, #3
 800ac4e:	45ac      	cmp	ip, r5
 800ac50:	bf38      	it	cc
 800ac52:	2200      	movcc	r2, #0
 800ac54:	441a      	add	r2, r3
 800ac56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ac5a:	b17b      	cbz	r3, 800ac7c <__mdiff+0x108>
 800ac5c:	6107      	str	r7, [r0, #16]
 800ac5e:	e7a3      	b.n	800aba8 <__mdiff+0x34>
 800ac60:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac64:	fa11 f288 	uxtah	r2, r1, r8
 800ac68:	1414      	asrs	r4, r2, #16
 800ac6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac6e:	b292      	uxth	r2, r2
 800ac70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac74:	f84e 2b04 	str.w	r2, [lr], #4
 800ac78:	1421      	asrs	r1, r4, #16
 800ac7a:	e7e0      	b.n	800ac3e <__mdiff+0xca>
 800ac7c:	3f01      	subs	r7, #1
 800ac7e:	e7ea      	b.n	800ac56 <__mdiff+0xe2>
 800ac80:	0800c2e8 	.word	0x0800c2e8
 800ac84:	0800c374 	.word	0x0800c374

0800ac88 <__ulp>:
 800ac88:	b082      	sub	sp, #8
 800ac8a:	ed8d 0b00 	vstr	d0, [sp]
 800ac8e:	9b01      	ldr	r3, [sp, #4]
 800ac90:	4912      	ldr	r1, [pc, #72]	; (800acdc <__ulp+0x54>)
 800ac92:	4019      	ands	r1, r3
 800ac94:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ac98:	2900      	cmp	r1, #0
 800ac9a:	dd05      	ble.n	800aca8 <__ulp+0x20>
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	ec43 2b10 	vmov	d0, r2, r3
 800aca4:	b002      	add	sp, #8
 800aca6:	4770      	bx	lr
 800aca8:	4249      	negs	r1, r1
 800acaa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800acae:	ea4f 5021 	mov.w	r0, r1, asr #20
 800acb2:	f04f 0200 	mov.w	r2, #0
 800acb6:	f04f 0300 	mov.w	r3, #0
 800acba:	da04      	bge.n	800acc6 <__ulp+0x3e>
 800acbc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800acc0:	fa41 f300 	asr.w	r3, r1, r0
 800acc4:	e7ec      	b.n	800aca0 <__ulp+0x18>
 800acc6:	f1a0 0114 	sub.w	r1, r0, #20
 800acca:	291e      	cmp	r1, #30
 800accc:	bfda      	itte	le
 800acce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800acd2:	fa20 f101 	lsrle.w	r1, r0, r1
 800acd6:	2101      	movgt	r1, #1
 800acd8:	460a      	mov	r2, r1
 800acda:	e7e1      	b.n	800aca0 <__ulp+0x18>
 800acdc:	7ff00000 	.word	0x7ff00000

0800ace0 <__b2d>:
 800ace0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace2:	6905      	ldr	r5, [r0, #16]
 800ace4:	f100 0714 	add.w	r7, r0, #20
 800ace8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800acec:	1f2e      	subs	r6, r5, #4
 800acee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800acf2:	4620      	mov	r0, r4
 800acf4:	f7ff fd48 	bl	800a788 <__hi0bits>
 800acf8:	f1c0 0320 	rsb	r3, r0, #32
 800acfc:	280a      	cmp	r0, #10
 800acfe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ad7c <__b2d+0x9c>
 800ad02:	600b      	str	r3, [r1, #0]
 800ad04:	dc14      	bgt.n	800ad30 <__b2d+0x50>
 800ad06:	f1c0 0e0b 	rsb	lr, r0, #11
 800ad0a:	fa24 f10e 	lsr.w	r1, r4, lr
 800ad0e:	42b7      	cmp	r7, r6
 800ad10:	ea41 030c 	orr.w	r3, r1, ip
 800ad14:	bf34      	ite	cc
 800ad16:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ad1a:	2100      	movcs	r1, #0
 800ad1c:	3015      	adds	r0, #21
 800ad1e:	fa04 f000 	lsl.w	r0, r4, r0
 800ad22:	fa21 f10e 	lsr.w	r1, r1, lr
 800ad26:	ea40 0201 	orr.w	r2, r0, r1
 800ad2a:	ec43 2b10 	vmov	d0, r2, r3
 800ad2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad30:	42b7      	cmp	r7, r6
 800ad32:	bf3a      	itte	cc
 800ad34:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ad38:	f1a5 0608 	subcc.w	r6, r5, #8
 800ad3c:	2100      	movcs	r1, #0
 800ad3e:	380b      	subs	r0, #11
 800ad40:	d017      	beq.n	800ad72 <__b2d+0x92>
 800ad42:	f1c0 0c20 	rsb	ip, r0, #32
 800ad46:	fa04 f500 	lsl.w	r5, r4, r0
 800ad4a:	42be      	cmp	r6, r7
 800ad4c:	fa21 f40c 	lsr.w	r4, r1, ip
 800ad50:	ea45 0504 	orr.w	r5, r5, r4
 800ad54:	bf8c      	ite	hi
 800ad56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ad5a:	2400      	movls	r4, #0
 800ad5c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ad60:	fa01 f000 	lsl.w	r0, r1, r0
 800ad64:	fa24 f40c 	lsr.w	r4, r4, ip
 800ad68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ad6c:	ea40 0204 	orr.w	r2, r0, r4
 800ad70:	e7db      	b.n	800ad2a <__b2d+0x4a>
 800ad72:	ea44 030c 	orr.w	r3, r4, ip
 800ad76:	460a      	mov	r2, r1
 800ad78:	e7d7      	b.n	800ad2a <__b2d+0x4a>
 800ad7a:	bf00      	nop
 800ad7c:	3ff00000 	.word	0x3ff00000

0800ad80 <__d2b>:
 800ad80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad84:	4689      	mov	r9, r1
 800ad86:	2101      	movs	r1, #1
 800ad88:	ec57 6b10 	vmov	r6, r7, d0
 800ad8c:	4690      	mov	r8, r2
 800ad8e:	f7ff fc09 	bl	800a5a4 <_Balloc>
 800ad92:	4604      	mov	r4, r0
 800ad94:	b930      	cbnz	r0, 800ada4 <__d2b+0x24>
 800ad96:	4602      	mov	r2, r0
 800ad98:	4b25      	ldr	r3, [pc, #148]	; (800ae30 <__d2b+0xb0>)
 800ad9a:	4826      	ldr	r0, [pc, #152]	; (800ae34 <__d2b+0xb4>)
 800ad9c:	f240 310a 	movw	r1, #778	; 0x30a
 800ada0:	f000 fb4c 	bl	800b43c <__assert_func>
 800ada4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ada8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800adac:	bb35      	cbnz	r5, 800adfc <__d2b+0x7c>
 800adae:	2e00      	cmp	r6, #0
 800adb0:	9301      	str	r3, [sp, #4]
 800adb2:	d028      	beq.n	800ae06 <__d2b+0x86>
 800adb4:	4668      	mov	r0, sp
 800adb6:	9600      	str	r6, [sp, #0]
 800adb8:	f7ff fd06 	bl	800a7c8 <__lo0bits>
 800adbc:	9900      	ldr	r1, [sp, #0]
 800adbe:	b300      	cbz	r0, 800ae02 <__d2b+0x82>
 800adc0:	9a01      	ldr	r2, [sp, #4]
 800adc2:	f1c0 0320 	rsb	r3, r0, #32
 800adc6:	fa02 f303 	lsl.w	r3, r2, r3
 800adca:	430b      	orrs	r3, r1
 800adcc:	40c2      	lsrs	r2, r0
 800adce:	6163      	str	r3, [r4, #20]
 800add0:	9201      	str	r2, [sp, #4]
 800add2:	9b01      	ldr	r3, [sp, #4]
 800add4:	61a3      	str	r3, [r4, #24]
 800add6:	2b00      	cmp	r3, #0
 800add8:	bf14      	ite	ne
 800adda:	2202      	movne	r2, #2
 800addc:	2201      	moveq	r2, #1
 800adde:	6122      	str	r2, [r4, #16]
 800ade0:	b1d5      	cbz	r5, 800ae18 <__d2b+0x98>
 800ade2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ade6:	4405      	add	r5, r0
 800ade8:	f8c9 5000 	str.w	r5, [r9]
 800adec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800adf0:	f8c8 0000 	str.w	r0, [r8]
 800adf4:	4620      	mov	r0, r4
 800adf6:	b003      	add	sp, #12
 800adf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae00:	e7d5      	b.n	800adae <__d2b+0x2e>
 800ae02:	6161      	str	r1, [r4, #20]
 800ae04:	e7e5      	b.n	800add2 <__d2b+0x52>
 800ae06:	a801      	add	r0, sp, #4
 800ae08:	f7ff fcde 	bl	800a7c8 <__lo0bits>
 800ae0c:	9b01      	ldr	r3, [sp, #4]
 800ae0e:	6163      	str	r3, [r4, #20]
 800ae10:	2201      	movs	r2, #1
 800ae12:	6122      	str	r2, [r4, #16]
 800ae14:	3020      	adds	r0, #32
 800ae16:	e7e3      	b.n	800ade0 <__d2b+0x60>
 800ae18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae20:	f8c9 0000 	str.w	r0, [r9]
 800ae24:	6918      	ldr	r0, [r3, #16]
 800ae26:	f7ff fcaf 	bl	800a788 <__hi0bits>
 800ae2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae2e:	e7df      	b.n	800adf0 <__d2b+0x70>
 800ae30:	0800c2e8 	.word	0x0800c2e8
 800ae34:	0800c374 	.word	0x0800c374

0800ae38 <__ratio>:
 800ae38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae3c:	4688      	mov	r8, r1
 800ae3e:	4669      	mov	r1, sp
 800ae40:	4681      	mov	r9, r0
 800ae42:	f7ff ff4d 	bl	800ace0 <__b2d>
 800ae46:	a901      	add	r1, sp, #4
 800ae48:	4640      	mov	r0, r8
 800ae4a:	ec55 4b10 	vmov	r4, r5, d0
 800ae4e:	ee10 aa10 	vmov	sl, s0
 800ae52:	f7ff ff45 	bl	800ace0 <__b2d>
 800ae56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae5a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ae5e:	1a59      	subs	r1, r3, r1
 800ae60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ae6a:	ec57 6b10 	vmov	r6, r7, d0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	bfd6      	itet	le
 800ae72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ae76:	462a      	movgt	r2, r5
 800ae78:	463a      	movle	r2, r7
 800ae7a:	46ab      	mov	fp, r5
 800ae7c:	bfd6      	itet	le
 800ae7e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800ae82:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ae86:	ee00 3a90 	vmovle	s1, r3
 800ae8a:	ec4b ab17 	vmov	d7, sl, fp
 800ae8e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800ae92:	b003      	add	sp, #12
 800ae94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae98 <__copybits>:
 800ae98:	3901      	subs	r1, #1
 800ae9a:	b570      	push	{r4, r5, r6, lr}
 800ae9c:	1149      	asrs	r1, r1, #5
 800ae9e:	6914      	ldr	r4, [r2, #16]
 800aea0:	3101      	adds	r1, #1
 800aea2:	f102 0314 	add.w	r3, r2, #20
 800aea6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aeaa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aeae:	1f05      	subs	r5, r0, #4
 800aeb0:	42a3      	cmp	r3, r4
 800aeb2:	d30c      	bcc.n	800aece <__copybits+0x36>
 800aeb4:	1aa3      	subs	r3, r4, r2
 800aeb6:	3b11      	subs	r3, #17
 800aeb8:	f023 0303 	bic.w	r3, r3, #3
 800aebc:	3211      	adds	r2, #17
 800aebe:	42a2      	cmp	r2, r4
 800aec0:	bf88      	it	hi
 800aec2:	2300      	movhi	r3, #0
 800aec4:	4418      	add	r0, r3
 800aec6:	2300      	movs	r3, #0
 800aec8:	4288      	cmp	r0, r1
 800aeca:	d305      	bcc.n	800aed8 <__copybits+0x40>
 800aecc:	bd70      	pop	{r4, r5, r6, pc}
 800aece:	f853 6b04 	ldr.w	r6, [r3], #4
 800aed2:	f845 6f04 	str.w	r6, [r5, #4]!
 800aed6:	e7eb      	b.n	800aeb0 <__copybits+0x18>
 800aed8:	f840 3b04 	str.w	r3, [r0], #4
 800aedc:	e7f4      	b.n	800aec8 <__copybits+0x30>

0800aede <__any_on>:
 800aede:	f100 0214 	add.w	r2, r0, #20
 800aee2:	6900      	ldr	r0, [r0, #16]
 800aee4:	114b      	asrs	r3, r1, #5
 800aee6:	4298      	cmp	r0, r3
 800aee8:	b510      	push	{r4, lr}
 800aeea:	db11      	blt.n	800af10 <__any_on+0x32>
 800aeec:	dd0a      	ble.n	800af04 <__any_on+0x26>
 800aeee:	f011 011f 	ands.w	r1, r1, #31
 800aef2:	d007      	beq.n	800af04 <__any_on+0x26>
 800aef4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aef8:	fa24 f001 	lsr.w	r0, r4, r1
 800aefc:	fa00 f101 	lsl.w	r1, r0, r1
 800af00:	428c      	cmp	r4, r1
 800af02:	d10b      	bne.n	800af1c <__any_on+0x3e>
 800af04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af08:	4293      	cmp	r3, r2
 800af0a:	d803      	bhi.n	800af14 <__any_on+0x36>
 800af0c:	2000      	movs	r0, #0
 800af0e:	bd10      	pop	{r4, pc}
 800af10:	4603      	mov	r3, r0
 800af12:	e7f7      	b.n	800af04 <__any_on+0x26>
 800af14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af18:	2900      	cmp	r1, #0
 800af1a:	d0f5      	beq.n	800af08 <__any_on+0x2a>
 800af1c:	2001      	movs	r0, #1
 800af1e:	e7f6      	b.n	800af0e <__any_on+0x30>

0800af20 <_calloc_r>:
 800af20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af22:	fba1 2402 	umull	r2, r4, r1, r2
 800af26:	b94c      	cbnz	r4, 800af3c <_calloc_r+0x1c>
 800af28:	4611      	mov	r1, r2
 800af2a:	9201      	str	r2, [sp, #4]
 800af2c:	f000 f87a 	bl	800b024 <_malloc_r>
 800af30:	9a01      	ldr	r2, [sp, #4]
 800af32:	4605      	mov	r5, r0
 800af34:	b930      	cbnz	r0, 800af44 <_calloc_r+0x24>
 800af36:	4628      	mov	r0, r5
 800af38:	b003      	add	sp, #12
 800af3a:	bd30      	pop	{r4, r5, pc}
 800af3c:	220c      	movs	r2, #12
 800af3e:	6002      	str	r2, [r0, #0]
 800af40:	2500      	movs	r5, #0
 800af42:	e7f8      	b.n	800af36 <_calloc_r+0x16>
 800af44:	4621      	mov	r1, r4
 800af46:	f7fc fcb1 	bl	80078ac <memset>
 800af4a:	e7f4      	b.n	800af36 <_calloc_r+0x16>

0800af4c <_free_r>:
 800af4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af4e:	2900      	cmp	r1, #0
 800af50:	d044      	beq.n	800afdc <_free_r+0x90>
 800af52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af56:	9001      	str	r0, [sp, #4]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f1a1 0404 	sub.w	r4, r1, #4
 800af5e:	bfb8      	it	lt
 800af60:	18e4      	addlt	r4, r4, r3
 800af62:	f000 fab5 	bl	800b4d0 <__malloc_lock>
 800af66:	4a1e      	ldr	r2, [pc, #120]	; (800afe0 <_free_r+0x94>)
 800af68:	9801      	ldr	r0, [sp, #4]
 800af6a:	6813      	ldr	r3, [r2, #0]
 800af6c:	b933      	cbnz	r3, 800af7c <_free_r+0x30>
 800af6e:	6063      	str	r3, [r4, #4]
 800af70:	6014      	str	r4, [r2, #0]
 800af72:	b003      	add	sp, #12
 800af74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af78:	f000 bab0 	b.w	800b4dc <__malloc_unlock>
 800af7c:	42a3      	cmp	r3, r4
 800af7e:	d908      	bls.n	800af92 <_free_r+0x46>
 800af80:	6825      	ldr	r5, [r4, #0]
 800af82:	1961      	adds	r1, r4, r5
 800af84:	428b      	cmp	r3, r1
 800af86:	bf01      	itttt	eq
 800af88:	6819      	ldreq	r1, [r3, #0]
 800af8a:	685b      	ldreq	r3, [r3, #4]
 800af8c:	1949      	addeq	r1, r1, r5
 800af8e:	6021      	streq	r1, [r4, #0]
 800af90:	e7ed      	b.n	800af6e <_free_r+0x22>
 800af92:	461a      	mov	r2, r3
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	b10b      	cbz	r3, 800af9c <_free_r+0x50>
 800af98:	42a3      	cmp	r3, r4
 800af9a:	d9fa      	bls.n	800af92 <_free_r+0x46>
 800af9c:	6811      	ldr	r1, [r2, #0]
 800af9e:	1855      	adds	r5, r2, r1
 800afa0:	42a5      	cmp	r5, r4
 800afa2:	d10b      	bne.n	800afbc <_free_r+0x70>
 800afa4:	6824      	ldr	r4, [r4, #0]
 800afa6:	4421      	add	r1, r4
 800afa8:	1854      	adds	r4, r2, r1
 800afaa:	42a3      	cmp	r3, r4
 800afac:	6011      	str	r1, [r2, #0]
 800afae:	d1e0      	bne.n	800af72 <_free_r+0x26>
 800afb0:	681c      	ldr	r4, [r3, #0]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	6053      	str	r3, [r2, #4]
 800afb6:	4421      	add	r1, r4
 800afb8:	6011      	str	r1, [r2, #0]
 800afba:	e7da      	b.n	800af72 <_free_r+0x26>
 800afbc:	d902      	bls.n	800afc4 <_free_r+0x78>
 800afbe:	230c      	movs	r3, #12
 800afc0:	6003      	str	r3, [r0, #0]
 800afc2:	e7d6      	b.n	800af72 <_free_r+0x26>
 800afc4:	6825      	ldr	r5, [r4, #0]
 800afc6:	1961      	adds	r1, r4, r5
 800afc8:	428b      	cmp	r3, r1
 800afca:	bf04      	itt	eq
 800afcc:	6819      	ldreq	r1, [r3, #0]
 800afce:	685b      	ldreq	r3, [r3, #4]
 800afd0:	6063      	str	r3, [r4, #4]
 800afd2:	bf04      	itt	eq
 800afd4:	1949      	addeq	r1, r1, r5
 800afd6:	6021      	streq	r1, [r4, #0]
 800afd8:	6054      	str	r4, [r2, #4]
 800afda:	e7ca      	b.n	800af72 <_free_r+0x26>
 800afdc:	b003      	add	sp, #12
 800afde:	bd30      	pop	{r4, r5, pc}
 800afe0:	2000089c 	.word	0x2000089c

0800afe4 <sbrk_aligned>:
 800afe4:	b570      	push	{r4, r5, r6, lr}
 800afe6:	4e0e      	ldr	r6, [pc, #56]	; (800b020 <sbrk_aligned+0x3c>)
 800afe8:	460c      	mov	r4, r1
 800afea:	6831      	ldr	r1, [r6, #0]
 800afec:	4605      	mov	r5, r0
 800afee:	b911      	cbnz	r1, 800aff6 <sbrk_aligned+0x12>
 800aff0:	f000 f9f2 	bl	800b3d8 <_sbrk_r>
 800aff4:	6030      	str	r0, [r6, #0]
 800aff6:	4621      	mov	r1, r4
 800aff8:	4628      	mov	r0, r5
 800affa:	f000 f9ed 	bl	800b3d8 <_sbrk_r>
 800affe:	1c43      	adds	r3, r0, #1
 800b000:	d00a      	beq.n	800b018 <sbrk_aligned+0x34>
 800b002:	1cc4      	adds	r4, r0, #3
 800b004:	f024 0403 	bic.w	r4, r4, #3
 800b008:	42a0      	cmp	r0, r4
 800b00a:	d007      	beq.n	800b01c <sbrk_aligned+0x38>
 800b00c:	1a21      	subs	r1, r4, r0
 800b00e:	4628      	mov	r0, r5
 800b010:	f000 f9e2 	bl	800b3d8 <_sbrk_r>
 800b014:	3001      	adds	r0, #1
 800b016:	d101      	bne.n	800b01c <sbrk_aligned+0x38>
 800b018:	f04f 34ff 	mov.w	r4, #4294967295
 800b01c:	4620      	mov	r0, r4
 800b01e:	bd70      	pop	{r4, r5, r6, pc}
 800b020:	200008a0 	.word	0x200008a0

0800b024 <_malloc_r>:
 800b024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b028:	1ccd      	adds	r5, r1, #3
 800b02a:	f025 0503 	bic.w	r5, r5, #3
 800b02e:	3508      	adds	r5, #8
 800b030:	2d0c      	cmp	r5, #12
 800b032:	bf38      	it	cc
 800b034:	250c      	movcc	r5, #12
 800b036:	2d00      	cmp	r5, #0
 800b038:	4607      	mov	r7, r0
 800b03a:	db01      	blt.n	800b040 <_malloc_r+0x1c>
 800b03c:	42a9      	cmp	r1, r5
 800b03e:	d905      	bls.n	800b04c <_malloc_r+0x28>
 800b040:	230c      	movs	r3, #12
 800b042:	603b      	str	r3, [r7, #0]
 800b044:	2600      	movs	r6, #0
 800b046:	4630      	mov	r0, r6
 800b048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b04c:	4e2e      	ldr	r6, [pc, #184]	; (800b108 <_malloc_r+0xe4>)
 800b04e:	f000 fa3f 	bl	800b4d0 <__malloc_lock>
 800b052:	6833      	ldr	r3, [r6, #0]
 800b054:	461c      	mov	r4, r3
 800b056:	bb34      	cbnz	r4, 800b0a6 <_malloc_r+0x82>
 800b058:	4629      	mov	r1, r5
 800b05a:	4638      	mov	r0, r7
 800b05c:	f7ff ffc2 	bl	800afe4 <sbrk_aligned>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	4604      	mov	r4, r0
 800b064:	d14d      	bne.n	800b102 <_malloc_r+0xde>
 800b066:	6834      	ldr	r4, [r6, #0]
 800b068:	4626      	mov	r6, r4
 800b06a:	2e00      	cmp	r6, #0
 800b06c:	d140      	bne.n	800b0f0 <_malloc_r+0xcc>
 800b06e:	6823      	ldr	r3, [r4, #0]
 800b070:	4631      	mov	r1, r6
 800b072:	4638      	mov	r0, r7
 800b074:	eb04 0803 	add.w	r8, r4, r3
 800b078:	f000 f9ae 	bl	800b3d8 <_sbrk_r>
 800b07c:	4580      	cmp	r8, r0
 800b07e:	d13a      	bne.n	800b0f6 <_malloc_r+0xd2>
 800b080:	6821      	ldr	r1, [r4, #0]
 800b082:	3503      	adds	r5, #3
 800b084:	1a6d      	subs	r5, r5, r1
 800b086:	f025 0503 	bic.w	r5, r5, #3
 800b08a:	3508      	adds	r5, #8
 800b08c:	2d0c      	cmp	r5, #12
 800b08e:	bf38      	it	cc
 800b090:	250c      	movcc	r5, #12
 800b092:	4629      	mov	r1, r5
 800b094:	4638      	mov	r0, r7
 800b096:	f7ff ffa5 	bl	800afe4 <sbrk_aligned>
 800b09a:	3001      	adds	r0, #1
 800b09c:	d02b      	beq.n	800b0f6 <_malloc_r+0xd2>
 800b09e:	6823      	ldr	r3, [r4, #0]
 800b0a0:	442b      	add	r3, r5
 800b0a2:	6023      	str	r3, [r4, #0]
 800b0a4:	e00e      	b.n	800b0c4 <_malloc_r+0xa0>
 800b0a6:	6822      	ldr	r2, [r4, #0]
 800b0a8:	1b52      	subs	r2, r2, r5
 800b0aa:	d41e      	bmi.n	800b0ea <_malloc_r+0xc6>
 800b0ac:	2a0b      	cmp	r2, #11
 800b0ae:	d916      	bls.n	800b0de <_malloc_r+0xba>
 800b0b0:	1961      	adds	r1, r4, r5
 800b0b2:	42a3      	cmp	r3, r4
 800b0b4:	6025      	str	r5, [r4, #0]
 800b0b6:	bf18      	it	ne
 800b0b8:	6059      	strne	r1, [r3, #4]
 800b0ba:	6863      	ldr	r3, [r4, #4]
 800b0bc:	bf08      	it	eq
 800b0be:	6031      	streq	r1, [r6, #0]
 800b0c0:	5162      	str	r2, [r4, r5]
 800b0c2:	604b      	str	r3, [r1, #4]
 800b0c4:	4638      	mov	r0, r7
 800b0c6:	f104 060b 	add.w	r6, r4, #11
 800b0ca:	f000 fa07 	bl	800b4dc <__malloc_unlock>
 800b0ce:	f026 0607 	bic.w	r6, r6, #7
 800b0d2:	1d23      	adds	r3, r4, #4
 800b0d4:	1af2      	subs	r2, r6, r3
 800b0d6:	d0b6      	beq.n	800b046 <_malloc_r+0x22>
 800b0d8:	1b9b      	subs	r3, r3, r6
 800b0da:	50a3      	str	r3, [r4, r2]
 800b0dc:	e7b3      	b.n	800b046 <_malloc_r+0x22>
 800b0de:	6862      	ldr	r2, [r4, #4]
 800b0e0:	42a3      	cmp	r3, r4
 800b0e2:	bf0c      	ite	eq
 800b0e4:	6032      	streq	r2, [r6, #0]
 800b0e6:	605a      	strne	r2, [r3, #4]
 800b0e8:	e7ec      	b.n	800b0c4 <_malloc_r+0xa0>
 800b0ea:	4623      	mov	r3, r4
 800b0ec:	6864      	ldr	r4, [r4, #4]
 800b0ee:	e7b2      	b.n	800b056 <_malloc_r+0x32>
 800b0f0:	4634      	mov	r4, r6
 800b0f2:	6876      	ldr	r6, [r6, #4]
 800b0f4:	e7b9      	b.n	800b06a <_malloc_r+0x46>
 800b0f6:	230c      	movs	r3, #12
 800b0f8:	603b      	str	r3, [r7, #0]
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	f000 f9ee 	bl	800b4dc <__malloc_unlock>
 800b100:	e7a1      	b.n	800b046 <_malloc_r+0x22>
 800b102:	6025      	str	r5, [r4, #0]
 800b104:	e7de      	b.n	800b0c4 <_malloc_r+0xa0>
 800b106:	bf00      	nop
 800b108:	2000089c 	.word	0x2000089c

0800b10c <__ssputs_r>:
 800b10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b110:	688e      	ldr	r6, [r1, #8]
 800b112:	429e      	cmp	r6, r3
 800b114:	4682      	mov	sl, r0
 800b116:	460c      	mov	r4, r1
 800b118:	4690      	mov	r8, r2
 800b11a:	461f      	mov	r7, r3
 800b11c:	d838      	bhi.n	800b190 <__ssputs_r+0x84>
 800b11e:	898a      	ldrh	r2, [r1, #12]
 800b120:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b124:	d032      	beq.n	800b18c <__ssputs_r+0x80>
 800b126:	6825      	ldr	r5, [r4, #0]
 800b128:	6909      	ldr	r1, [r1, #16]
 800b12a:	eba5 0901 	sub.w	r9, r5, r1
 800b12e:	6965      	ldr	r5, [r4, #20]
 800b130:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b134:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b138:	3301      	adds	r3, #1
 800b13a:	444b      	add	r3, r9
 800b13c:	106d      	asrs	r5, r5, #1
 800b13e:	429d      	cmp	r5, r3
 800b140:	bf38      	it	cc
 800b142:	461d      	movcc	r5, r3
 800b144:	0553      	lsls	r3, r2, #21
 800b146:	d531      	bpl.n	800b1ac <__ssputs_r+0xa0>
 800b148:	4629      	mov	r1, r5
 800b14a:	f7ff ff6b 	bl	800b024 <_malloc_r>
 800b14e:	4606      	mov	r6, r0
 800b150:	b950      	cbnz	r0, 800b168 <__ssputs_r+0x5c>
 800b152:	230c      	movs	r3, #12
 800b154:	f8ca 3000 	str.w	r3, [sl]
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b15e:	81a3      	strh	r3, [r4, #12]
 800b160:	f04f 30ff 	mov.w	r0, #4294967295
 800b164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b168:	6921      	ldr	r1, [r4, #16]
 800b16a:	464a      	mov	r2, r9
 800b16c:	f7ff fa0c 	bl	800a588 <memcpy>
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b17a:	81a3      	strh	r3, [r4, #12]
 800b17c:	6126      	str	r6, [r4, #16]
 800b17e:	6165      	str	r5, [r4, #20]
 800b180:	444e      	add	r6, r9
 800b182:	eba5 0509 	sub.w	r5, r5, r9
 800b186:	6026      	str	r6, [r4, #0]
 800b188:	60a5      	str	r5, [r4, #8]
 800b18a:	463e      	mov	r6, r7
 800b18c:	42be      	cmp	r6, r7
 800b18e:	d900      	bls.n	800b192 <__ssputs_r+0x86>
 800b190:	463e      	mov	r6, r7
 800b192:	6820      	ldr	r0, [r4, #0]
 800b194:	4632      	mov	r2, r6
 800b196:	4641      	mov	r1, r8
 800b198:	f000 f980 	bl	800b49c <memmove>
 800b19c:	68a3      	ldr	r3, [r4, #8]
 800b19e:	1b9b      	subs	r3, r3, r6
 800b1a0:	60a3      	str	r3, [r4, #8]
 800b1a2:	6823      	ldr	r3, [r4, #0]
 800b1a4:	4433      	add	r3, r6
 800b1a6:	6023      	str	r3, [r4, #0]
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	e7db      	b.n	800b164 <__ssputs_r+0x58>
 800b1ac:	462a      	mov	r2, r5
 800b1ae:	f000 f99b 	bl	800b4e8 <_realloc_r>
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d1e1      	bne.n	800b17c <__ssputs_r+0x70>
 800b1b8:	6921      	ldr	r1, [r4, #16]
 800b1ba:	4650      	mov	r0, sl
 800b1bc:	f7ff fec6 	bl	800af4c <_free_r>
 800b1c0:	e7c7      	b.n	800b152 <__ssputs_r+0x46>
	...

0800b1c4 <_svfiprintf_r>:
 800b1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c8:	4698      	mov	r8, r3
 800b1ca:	898b      	ldrh	r3, [r1, #12]
 800b1cc:	061b      	lsls	r3, r3, #24
 800b1ce:	b09d      	sub	sp, #116	; 0x74
 800b1d0:	4607      	mov	r7, r0
 800b1d2:	460d      	mov	r5, r1
 800b1d4:	4614      	mov	r4, r2
 800b1d6:	d50e      	bpl.n	800b1f6 <_svfiprintf_r+0x32>
 800b1d8:	690b      	ldr	r3, [r1, #16]
 800b1da:	b963      	cbnz	r3, 800b1f6 <_svfiprintf_r+0x32>
 800b1dc:	2140      	movs	r1, #64	; 0x40
 800b1de:	f7ff ff21 	bl	800b024 <_malloc_r>
 800b1e2:	6028      	str	r0, [r5, #0]
 800b1e4:	6128      	str	r0, [r5, #16]
 800b1e6:	b920      	cbnz	r0, 800b1f2 <_svfiprintf_r+0x2e>
 800b1e8:	230c      	movs	r3, #12
 800b1ea:	603b      	str	r3, [r7, #0]
 800b1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f0:	e0d1      	b.n	800b396 <_svfiprintf_r+0x1d2>
 800b1f2:	2340      	movs	r3, #64	; 0x40
 800b1f4:	616b      	str	r3, [r5, #20]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b1fa:	2320      	movs	r3, #32
 800b1fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b200:	f8cd 800c 	str.w	r8, [sp, #12]
 800b204:	2330      	movs	r3, #48	; 0x30
 800b206:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b3b0 <_svfiprintf_r+0x1ec>
 800b20a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b20e:	f04f 0901 	mov.w	r9, #1
 800b212:	4623      	mov	r3, r4
 800b214:	469a      	mov	sl, r3
 800b216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b21a:	b10a      	cbz	r2, 800b220 <_svfiprintf_r+0x5c>
 800b21c:	2a25      	cmp	r2, #37	; 0x25
 800b21e:	d1f9      	bne.n	800b214 <_svfiprintf_r+0x50>
 800b220:	ebba 0b04 	subs.w	fp, sl, r4
 800b224:	d00b      	beq.n	800b23e <_svfiprintf_r+0x7a>
 800b226:	465b      	mov	r3, fp
 800b228:	4622      	mov	r2, r4
 800b22a:	4629      	mov	r1, r5
 800b22c:	4638      	mov	r0, r7
 800b22e:	f7ff ff6d 	bl	800b10c <__ssputs_r>
 800b232:	3001      	adds	r0, #1
 800b234:	f000 80aa 	beq.w	800b38c <_svfiprintf_r+0x1c8>
 800b238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b23a:	445a      	add	r2, fp
 800b23c:	9209      	str	r2, [sp, #36]	; 0x24
 800b23e:	f89a 3000 	ldrb.w	r3, [sl]
 800b242:	2b00      	cmp	r3, #0
 800b244:	f000 80a2 	beq.w	800b38c <_svfiprintf_r+0x1c8>
 800b248:	2300      	movs	r3, #0
 800b24a:	f04f 32ff 	mov.w	r2, #4294967295
 800b24e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b252:	f10a 0a01 	add.w	sl, sl, #1
 800b256:	9304      	str	r3, [sp, #16]
 800b258:	9307      	str	r3, [sp, #28]
 800b25a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b25e:	931a      	str	r3, [sp, #104]	; 0x68
 800b260:	4654      	mov	r4, sl
 800b262:	2205      	movs	r2, #5
 800b264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b268:	4851      	ldr	r0, [pc, #324]	; (800b3b0 <_svfiprintf_r+0x1ec>)
 800b26a:	f7f4 fff1 	bl	8000250 <memchr>
 800b26e:	9a04      	ldr	r2, [sp, #16]
 800b270:	b9d8      	cbnz	r0, 800b2aa <_svfiprintf_r+0xe6>
 800b272:	06d0      	lsls	r0, r2, #27
 800b274:	bf44      	itt	mi
 800b276:	2320      	movmi	r3, #32
 800b278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b27c:	0711      	lsls	r1, r2, #28
 800b27e:	bf44      	itt	mi
 800b280:	232b      	movmi	r3, #43	; 0x2b
 800b282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b286:	f89a 3000 	ldrb.w	r3, [sl]
 800b28a:	2b2a      	cmp	r3, #42	; 0x2a
 800b28c:	d015      	beq.n	800b2ba <_svfiprintf_r+0xf6>
 800b28e:	9a07      	ldr	r2, [sp, #28]
 800b290:	4654      	mov	r4, sl
 800b292:	2000      	movs	r0, #0
 800b294:	f04f 0c0a 	mov.w	ip, #10
 800b298:	4621      	mov	r1, r4
 800b29a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b29e:	3b30      	subs	r3, #48	; 0x30
 800b2a0:	2b09      	cmp	r3, #9
 800b2a2:	d94e      	bls.n	800b342 <_svfiprintf_r+0x17e>
 800b2a4:	b1b0      	cbz	r0, 800b2d4 <_svfiprintf_r+0x110>
 800b2a6:	9207      	str	r2, [sp, #28]
 800b2a8:	e014      	b.n	800b2d4 <_svfiprintf_r+0x110>
 800b2aa:	eba0 0308 	sub.w	r3, r0, r8
 800b2ae:	fa09 f303 	lsl.w	r3, r9, r3
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	9304      	str	r3, [sp, #16]
 800b2b6:	46a2      	mov	sl, r4
 800b2b8:	e7d2      	b.n	800b260 <_svfiprintf_r+0x9c>
 800b2ba:	9b03      	ldr	r3, [sp, #12]
 800b2bc:	1d19      	adds	r1, r3, #4
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	9103      	str	r1, [sp, #12]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	bfbb      	ittet	lt
 800b2c6:	425b      	neglt	r3, r3
 800b2c8:	f042 0202 	orrlt.w	r2, r2, #2
 800b2cc:	9307      	strge	r3, [sp, #28]
 800b2ce:	9307      	strlt	r3, [sp, #28]
 800b2d0:	bfb8      	it	lt
 800b2d2:	9204      	strlt	r2, [sp, #16]
 800b2d4:	7823      	ldrb	r3, [r4, #0]
 800b2d6:	2b2e      	cmp	r3, #46	; 0x2e
 800b2d8:	d10c      	bne.n	800b2f4 <_svfiprintf_r+0x130>
 800b2da:	7863      	ldrb	r3, [r4, #1]
 800b2dc:	2b2a      	cmp	r3, #42	; 0x2a
 800b2de:	d135      	bne.n	800b34c <_svfiprintf_r+0x188>
 800b2e0:	9b03      	ldr	r3, [sp, #12]
 800b2e2:	1d1a      	adds	r2, r3, #4
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	9203      	str	r2, [sp, #12]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	bfb8      	it	lt
 800b2ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2f0:	3402      	adds	r4, #2
 800b2f2:	9305      	str	r3, [sp, #20]
 800b2f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b3c0 <_svfiprintf_r+0x1fc>
 800b2f8:	7821      	ldrb	r1, [r4, #0]
 800b2fa:	2203      	movs	r2, #3
 800b2fc:	4650      	mov	r0, sl
 800b2fe:	f7f4 ffa7 	bl	8000250 <memchr>
 800b302:	b140      	cbz	r0, 800b316 <_svfiprintf_r+0x152>
 800b304:	2340      	movs	r3, #64	; 0x40
 800b306:	eba0 000a 	sub.w	r0, r0, sl
 800b30a:	fa03 f000 	lsl.w	r0, r3, r0
 800b30e:	9b04      	ldr	r3, [sp, #16]
 800b310:	4303      	orrs	r3, r0
 800b312:	3401      	adds	r4, #1
 800b314:	9304      	str	r3, [sp, #16]
 800b316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b31a:	4826      	ldr	r0, [pc, #152]	; (800b3b4 <_svfiprintf_r+0x1f0>)
 800b31c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b320:	2206      	movs	r2, #6
 800b322:	f7f4 ff95 	bl	8000250 <memchr>
 800b326:	2800      	cmp	r0, #0
 800b328:	d038      	beq.n	800b39c <_svfiprintf_r+0x1d8>
 800b32a:	4b23      	ldr	r3, [pc, #140]	; (800b3b8 <_svfiprintf_r+0x1f4>)
 800b32c:	bb1b      	cbnz	r3, 800b376 <_svfiprintf_r+0x1b2>
 800b32e:	9b03      	ldr	r3, [sp, #12]
 800b330:	3307      	adds	r3, #7
 800b332:	f023 0307 	bic.w	r3, r3, #7
 800b336:	3308      	adds	r3, #8
 800b338:	9303      	str	r3, [sp, #12]
 800b33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b33c:	4433      	add	r3, r6
 800b33e:	9309      	str	r3, [sp, #36]	; 0x24
 800b340:	e767      	b.n	800b212 <_svfiprintf_r+0x4e>
 800b342:	fb0c 3202 	mla	r2, ip, r2, r3
 800b346:	460c      	mov	r4, r1
 800b348:	2001      	movs	r0, #1
 800b34a:	e7a5      	b.n	800b298 <_svfiprintf_r+0xd4>
 800b34c:	2300      	movs	r3, #0
 800b34e:	3401      	adds	r4, #1
 800b350:	9305      	str	r3, [sp, #20]
 800b352:	4619      	mov	r1, r3
 800b354:	f04f 0c0a 	mov.w	ip, #10
 800b358:	4620      	mov	r0, r4
 800b35a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b35e:	3a30      	subs	r2, #48	; 0x30
 800b360:	2a09      	cmp	r2, #9
 800b362:	d903      	bls.n	800b36c <_svfiprintf_r+0x1a8>
 800b364:	2b00      	cmp	r3, #0
 800b366:	d0c5      	beq.n	800b2f4 <_svfiprintf_r+0x130>
 800b368:	9105      	str	r1, [sp, #20]
 800b36a:	e7c3      	b.n	800b2f4 <_svfiprintf_r+0x130>
 800b36c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b370:	4604      	mov	r4, r0
 800b372:	2301      	movs	r3, #1
 800b374:	e7f0      	b.n	800b358 <_svfiprintf_r+0x194>
 800b376:	ab03      	add	r3, sp, #12
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	462a      	mov	r2, r5
 800b37c:	4b0f      	ldr	r3, [pc, #60]	; (800b3bc <_svfiprintf_r+0x1f8>)
 800b37e:	a904      	add	r1, sp, #16
 800b380:	4638      	mov	r0, r7
 800b382:	f7fc fb2d 	bl	80079e0 <_printf_float>
 800b386:	1c42      	adds	r2, r0, #1
 800b388:	4606      	mov	r6, r0
 800b38a:	d1d6      	bne.n	800b33a <_svfiprintf_r+0x176>
 800b38c:	89ab      	ldrh	r3, [r5, #12]
 800b38e:	065b      	lsls	r3, r3, #25
 800b390:	f53f af2c 	bmi.w	800b1ec <_svfiprintf_r+0x28>
 800b394:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b396:	b01d      	add	sp, #116	; 0x74
 800b398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39c:	ab03      	add	r3, sp, #12
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	462a      	mov	r2, r5
 800b3a2:	4b06      	ldr	r3, [pc, #24]	; (800b3bc <_svfiprintf_r+0x1f8>)
 800b3a4:	a904      	add	r1, sp, #16
 800b3a6:	4638      	mov	r0, r7
 800b3a8:	f7fc fda6 	bl	8007ef8 <_printf_i>
 800b3ac:	e7eb      	b.n	800b386 <_svfiprintf_r+0x1c2>
 800b3ae:	bf00      	nop
 800b3b0:	0800c4cc 	.word	0x0800c4cc
 800b3b4:	0800c4d6 	.word	0x0800c4d6
 800b3b8:	080079e1 	.word	0x080079e1
 800b3bc:	0800b10d 	.word	0x0800b10d
 800b3c0:	0800c4d2 	.word	0x0800c4d2
 800b3c4:	00000000 	.word	0x00000000

0800b3c8 <nan>:
 800b3c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b3d0 <nan+0x8>
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	00000000 	.word	0x00000000
 800b3d4:	7ff80000 	.word	0x7ff80000

0800b3d8 <_sbrk_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4d06      	ldr	r5, [pc, #24]	; (800b3f4 <_sbrk_r+0x1c>)
 800b3dc:	2300      	movs	r3, #0
 800b3de:	4604      	mov	r4, r0
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	602b      	str	r3, [r5, #0]
 800b3e4:	f7f6 fe86 	bl	80020f4 <_sbrk>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d102      	bne.n	800b3f2 <_sbrk_r+0x1a>
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	b103      	cbz	r3, 800b3f2 <_sbrk_r+0x1a>
 800b3f0:	6023      	str	r3, [r4, #0]
 800b3f2:	bd38      	pop	{r3, r4, r5, pc}
 800b3f4:	200008a4 	.word	0x200008a4

0800b3f8 <strncmp>:
 800b3f8:	b510      	push	{r4, lr}
 800b3fa:	b17a      	cbz	r2, 800b41c <strncmp+0x24>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	3901      	subs	r1, #1
 800b400:	1884      	adds	r4, r0, r2
 800b402:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b406:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b40a:	4290      	cmp	r0, r2
 800b40c:	d101      	bne.n	800b412 <strncmp+0x1a>
 800b40e:	42a3      	cmp	r3, r4
 800b410:	d101      	bne.n	800b416 <strncmp+0x1e>
 800b412:	1a80      	subs	r0, r0, r2
 800b414:	bd10      	pop	{r4, pc}
 800b416:	2800      	cmp	r0, #0
 800b418:	d1f3      	bne.n	800b402 <strncmp+0xa>
 800b41a:	e7fa      	b.n	800b412 <strncmp+0x1a>
 800b41c:	4610      	mov	r0, r2
 800b41e:	e7f9      	b.n	800b414 <strncmp+0x1c>

0800b420 <__ascii_wctomb>:
 800b420:	b149      	cbz	r1, 800b436 <__ascii_wctomb+0x16>
 800b422:	2aff      	cmp	r2, #255	; 0xff
 800b424:	bf85      	ittet	hi
 800b426:	238a      	movhi	r3, #138	; 0x8a
 800b428:	6003      	strhi	r3, [r0, #0]
 800b42a:	700a      	strbls	r2, [r1, #0]
 800b42c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b430:	bf98      	it	ls
 800b432:	2001      	movls	r0, #1
 800b434:	4770      	bx	lr
 800b436:	4608      	mov	r0, r1
 800b438:	4770      	bx	lr
	...

0800b43c <__assert_func>:
 800b43c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b43e:	4614      	mov	r4, r2
 800b440:	461a      	mov	r2, r3
 800b442:	4b09      	ldr	r3, [pc, #36]	; (800b468 <__assert_func+0x2c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4605      	mov	r5, r0
 800b448:	68d8      	ldr	r0, [r3, #12]
 800b44a:	b14c      	cbz	r4, 800b460 <__assert_func+0x24>
 800b44c:	4b07      	ldr	r3, [pc, #28]	; (800b46c <__assert_func+0x30>)
 800b44e:	9100      	str	r1, [sp, #0]
 800b450:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b454:	4906      	ldr	r1, [pc, #24]	; (800b470 <__assert_func+0x34>)
 800b456:	462b      	mov	r3, r5
 800b458:	f000 f80e 	bl	800b478 <fiprintf>
 800b45c:	f000 fa8c 	bl	800b978 <abort>
 800b460:	4b04      	ldr	r3, [pc, #16]	; (800b474 <__assert_func+0x38>)
 800b462:	461c      	mov	r4, r3
 800b464:	e7f3      	b.n	800b44e <__assert_func+0x12>
 800b466:	bf00      	nop
 800b468:	20000024 	.word	0x20000024
 800b46c:	0800c4dd 	.word	0x0800c4dd
 800b470:	0800c4ea 	.word	0x0800c4ea
 800b474:	0800c518 	.word	0x0800c518

0800b478 <fiprintf>:
 800b478:	b40e      	push	{r1, r2, r3}
 800b47a:	b503      	push	{r0, r1, lr}
 800b47c:	4601      	mov	r1, r0
 800b47e:	ab03      	add	r3, sp, #12
 800b480:	4805      	ldr	r0, [pc, #20]	; (800b498 <fiprintf+0x20>)
 800b482:	f853 2b04 	ldr.w	r2, [r3], #4
 800b486:	6800      	ldr	r0, [r0, #0]
 800b488:	9301      	str	r3, [sp, #4]
 800b48a:	f000 f885 	bl	800b598 <_vfiprintf_r>
 800b48e:	b002      	add	sp, #8
 800b490:	f85d eb04 	ldr.w	lr, [sp], #4
 800b494:	b003      	add	sp, #12
 800b496:	4770      	bx	lr
 800b498:	20000024 	.word	0x20000024

0800b49c <memmove>:
 800b49c:	4288      	cmp	r0, r1
 800b49e:	b510      	push	{r4, lr}
 800b4a0:	eb01 0402 	add.w	r4, r1, r2
 800b4a4:	d902      	bls.n	800b4ac <memmove+0x10>
 800b4a6:	4284      	cmp	r4, r0
 800b4a8:	4623      	mov	r3, r4
 800b4aa:	d807      	bhi.n	800b4bc <memmove+0x20>
 800b4ac:	1e43      	subs	r3, r0, #1
 800b4ae:	42a1      	cmp	r1, r4
 800b4b0:	d008      	beq.n	800b4c4 <memmove+0x28>
 800b4b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4ba:	e7f8      	b.n	800b4ae <memmove+0x12>
 800b4bc:	4402      	add	r2, r0
 800b4be:	4601      	mov	r1, r0
 800b4c0:	428a      	cmp	r2, r1
 800b4c2:	d100      	bne.n	800b4c6 <memmove+0x2a>
 800b4c4:	bd10      	pop	{r4, pc}
 800b4c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4ce:	e7f7      	b.n	800b4c0 <memmove+0x24>

0800b4d0 <__malloc_lock>:
 800b4d0:	4801      	ldr	r0, [pc, #4]	; (800b4d8 <__malloc_lock+0x8>)
 800b4d2:	f000 bc11 	b.w	800bcf8 <__retarget_lock_acquire_recursive>
 800b4d6:	bf00      	nop
 800b4d8:	200008a8 	.word	0x200008a8

0800b4dc <__malloc_unlock>:
 800b4dc:	4801      	ldr	r0, [pc, #4]	; (800b4e4 <__malloc_unlock+0x8>)
 800b4de:	f000 bc0c 	b.w	800bcfa <__retarget_lock_release_recursive>
 800b4e2:	bf00      	nop
 800b4e4:	200008a8 	.word	0x200008a8

0800b4e8 <_realloc_r>:
 800b4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ec:	4680      	mov	r8, r0
 800b4ee:	4614      	mov	r4, r2
 800b4f0:	460e      	mov	r6, r1
 800b4f2:	b921      	cbnz	r1, 800b4fe <_realloc_r+0x16>
 800b4f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f8:	4611      	mov	r1, r2
 800b4fa:	f7ff bd93 	b.w	800b024 <_malloc_r>
 800b4fe:	b92a      	cbnz	r2, 800b50c <_realloc_r+0x24>
 800b500:	f7ff fd24 	bl	800af4c <_free_r>
 800b504:	4625      	mov	r5, r4
 800b506:	4628      	mov	r0, r5
 800b508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b50c:	f000 fc5c 	bl	800bdc8 <_malloc_usable_size_r>
 800b510:	4284      	cmp	r4, r0
 800b512:	4607      	mov	r7, r0
 800b514:	d802      	bhi.n	800b51c <_realloc_r+0x34>
 800b516:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b51a:	d812      	bhi.n	800b542 <_realloc_r+0x5a>
 800b51c:	4621      	mov	r1, r4
 800b51e:	4640      	mov	r0, r8
 800b520:	f7ff fd80 	bl	800b024 <_malloc_r>
 800b524:	4605      	mov	r5, r0
 800b526:	2800      	cmp	r0, #0
 800b528:	d0ed      	beq.n	800b506 <_realloc_r+0x1e>
 800b52a:	42bc      	cmp	r4, r7
 800b52c:	4622      	mov	r2, r4
 800b52e:	4631      	mov	r1, r6
 800b530:	bf28      	it	cs
 800b532:	463a      	movcs	r2, r7
 800b534:	f7ff f828 	bl	800a588 <memcpy>
 800b538:	4631      	mov	r1, r6
 800b53a:	4640      	mov	r0, r8
 800b53c:	f7ff fd06 	bl	800af4c <_free_r>
 800b540:	e7e1      	b.n	800b506 <_realloc_r+0x1e>
 800b542:	4635      	mov	r5, r6
 800b544:	e7df      	b.n	800b506 <_realloc_r+0x1e>

0800b546 <__sfputc_r>:
 800b546:	6893      	ldr	r3, [r2, #8]
 800b548:	3b01      	subs	r3, #1
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	b410      	push	{r4}
 800b54e:	6093      	str	r3, [r2, #8]
 800b550:	da08      	bge.n	800b564 <__sfputc_r+0x1e>
 800b552:	6994      	ldr	r4, [r2, #24]
 800b554:	42a3      	cmp	r3, r4
 800b556:	db01      	blt.n	800b55c <__sfputc_r+0x16>
 800b558:	290a      	cmp	r1, #10
 800b55a:	d103      	bne.n	800b564 <__sfputc_r+0x1e>
 800b55c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b560:	f000 b94a 	b.w	800b7f8 <__swbuf_r>
 800b564:	6813      	ldr	r3, [r2, #0]
 800b566:	1c58      	adds	r0, r3, #1
 800b568:	6010      	str	r0, [r2, #0]
 800b56a:	7019      	strb	r1, [r3, #0]
 800b56c:	4608      	mov	r0, r1
 800b56e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <__sfputs_r>:
 800b574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b576:	4606      	mov	r6, r0
 800b578:	460f      	mov	r7, r1
 800b57a:	4614      	mov	r4, r2
 800b57c:	18d5      	adds	r5, r2, r3
 800b57e:	42ac      	cmp	r4, r5
 800b580:	d101      	bne.n	800b586 <__sfputs_r+0x12>
 800b582:	2000      	movs	r0, #0
 800b584:	e007      	b.n	800b596 <__sfputs_r+0x22>
 800b586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b58a:	463a      	mov	r2, r7
 800b58c:	4630      	mov	r0, r6
 800b58e:	f7ff ffda 	bl	800b546 <__sfputc_r>
 800b592:	1c43      	adds	r3, r0, #1
 800b594:	d1f3      	bne.n	800b57e <__sfputs_r+0xa>
 800b596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b598 <_vfiprintf_r>:
 800b598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59c:	460d      	mov	r5, r1
 800b59e:	b09d      	sub	sp, #116	; 0x74
 800b5a0:	4614      	mov	r4, r2
 800b5a2:	4698      	mov	r8, r3
 800b5a4:	4606      	mov	r6, r0
 800b5a6:	b118      	cbz	r0, 800b5b0 <_vfiprintf_r+0x18>
 800b5a8:	6983      	ldr	r3, [r0, #24]
 800b5aa:	b90b      	cbnz	r3, 800b5b0 <_vfiprintf_r+0x18>
 800b5ac:	f000 fb06 	bl	800bbbc <__sinit>
 800b5b0:	4b89      	ldr	r3, [pc, #548]	; (800b7d8 <_vfiprintf_r+0x240>)
 800b5b2:	429d      	cmp	r5, r3
 800b5b4:	d11b      	bne.n	800b5ee <_vfiprintf_r+0x56>
 800b5b6:	6875      	ldr	r5, [r6, #4]
 800b5b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5ba:	07d9      	lsls	r1, r3, #31
 800b5bc:	d405      	bmi.n	800b5ca <_vfiprintf_r+0x32>
 800b5be:	89ab      	ldrh	r3, [r5, #12]
 800b5c0:	059a      	lsls	r2, r3, #22
 800b5c2:	d402      	bmi.n	800b5ca <_vfiprintf_r+0x32>
 800b5c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5c6:	f000 fb97 	bl	800bcf8 <__retarget_lock_acquire_recursive>
 800b5ca:	89ab      	ldrh	r3, [r5, #12]
 800b5cc:	071b      	lsls	r3, r3, #28
 800b5ce:	d501      	bpl.n	800b5d4 <_vfiprintf_r+0x3c>
 800b5d0:	692b      	ldr	r3, [r5, #16]
 800b5d2:	b9eb      	cbnz	r3, 800b610 <_vfiprintf_r+0x78>
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	f000 f960 	bl	800b89c <__swsetup_r>
 800b5dc:	b1c0      	cbz	r0, 800b610 <_vfiprintf_r+0x78>
 800b5de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5e0:	07dc      	lsls	r4, r3, #31
 800b5e2:	d50e      	bpl.n	800b602 <_vfiprintf_r+0x6a>
 800b5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e8:	b01d      	add	sp, #116	; 0x74
 800b5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ee:	4b7b      	ldr	r3, [pc, #492]	; (800b7dc <_vfiprintf_r+0x244>)
 800b5f0:	429d      	cmp	r5, r3
 800b5f2:	d101      	bne.n	800b5f8 <_vfiprintf_r+0x60>
 800b5f4:	68b5      	ldr	r5, [r6, #8]
 800b5f6:	e7df      	b.n	800b5b8 <_vfiprintf_r+0x20>
 800b5f8:	4b79      	ldr	r3, [pc, #484]	; (800b7e0 <_vfiprintf_r+0x248>)
 800b5fa:	429d      	cmp	r5, r3
 800b5fc:	bf08      	it	eq
 800b5fe:	68f5      	ldreq	r5, [r6, #12]
 800b600:	e7da      	b.n	800b5b8 <_vfiprintf_r+0x20>
 800b602:	89ab      	ldrh	r3, [r5, #12]
 800b604:	0598      	lsls	r0, r3, #22
 800b606:	d4ed      	bmi.n	800b5e4 <_vfiprintf_r+0x4c>
 800b608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b60a:	f000 fb76 	bl	800bcfa <__retarget_lock_release_recursive>
 800b60e:	e7e9      	b.n	800b5e4 <_vfiprintf_r+0x4c>
 800b610:	2300      	movs	r3, #0
 800b612:	9309      	str	r3, [sp, #36]	; 0x24
 800b614:	2320      	movs	r3, #32
 800b616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b61a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b61e:	2330      	movs	r3, #48	; 0x30
 800b620:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b7e4 <_vfiprintf_r+0x24c>
 800b624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b628:	f04f 0901 	mov.w	r9, #1
 800b62c:	4623      	mov	r3, r4
 800b62e:	469a      	mov	sl, r3
 800b630:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b634:	b10a      	cbz	r2, 800b63a <_vfiprintf_r+0xa2>
 800b636:	2a25      	cmp	r2, #37	; 0x25
 800b638:	d1f9      	bne.n	800b62e <_vfiprintf_r+0x96>
 800b63a:	ebba 0b04 	subs.w	fp, sl, r4
 800b63e:	d00b      	beq.n	800b658 <_vfiprintf_r+0xc0>
 800b640:	465b      	mov	r3, fp
 800b642:	4622      	mov	r2, r4
 800b644:	4629      	mov	r1, r5
 800b646:	4630      	mov	r0, r6
 800b648:	f7ff ff94 	bl	800b574 <__sfputs_r>
 800b64c:	3001      	adds	r0, #1
 800b64e:	f000 80aa 	beq.w	800b7a6 <_vfiprintf_r+0x20e>
 800b652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b654:	445a      	add	r2, fp
 800b656:	9209      	str	r2, [sp, #36]	; 0x24
 800b658:	f89a 3000 	ldrb.w	r3, [sl]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f000 80a2 	beq.w	800b7a6 <_vfiprintf_r+0x20e>
 800b662:	2300      	movs	r3, #0
 800b664:	f04f 32ff 	mov.w	r2, #4294967295
 800b668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b66c:	f10a 0a01 	add.w	sl, sl, #1
 800b670:	9304      	str	r3, [sp, #16]
 800b672:	9307      	str	r3, [sp, #28]
 800b674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b678:	931a      	str	r3, [sp, #104]	; 0x68
 800b67a:	4654      	mov	r4, sl
 800b67c:	2205      	movs	r2, #5
 800b67e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b682:	4858      	ldr	r0, [pc, #352]	; (800b7e4 <_vfiprintf_r+0x24c>)
 800b684:	f7f4 fde4 	bl	8000250 <memchr>
 800b688:	9a04      	ldr	r2, [sp, #16]
 800b68a:	b9d8      	cbnz	r0, 800b6c4 <_vfiprintf_r+0x12c>
 800b68c:	06d1      	lsls	r1, r2, #27
 800b68e:	bf44      	itt	mi
 800b690:	2320      	movmi	r3, #32
 800b692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b696:	0713      	lsls	r3, r2, #28
 800b698:	bf44      	itt	mi
 800b69a:	232b      	movmi	r3, #43	; 0x2b
 800b69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b6a4:	2b2a      	cmp	r3, #42	; 0x2a
 800b6a6:	d015      	beq.n	800b6d4 <_vfiprintf_r+0x13c>
 800b6a8:	9a07      	ldr	r2, [sp, #28]
 800b6aa:	4654      	mov	r4, sl
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	f04f 0c0a 	mov.w	ip, #10
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6b8:	3b30      	subs	r3, #48	; 0x30
 800b6ba:	2b09      	cmp	r3, #9
 800b6bc:	d94e      	bls.n	800b75c <_vfiprintf_r+0x1c4>
 800b6be:	b1b0      	cbz	r0, 800b6ee <_vfiprintf_r+0x156>
 800b6c0:	9207      	str	r2, [sp, #28]
 800b6c2:	e014      	b.n	800b6ee <_vfiprintf_r+0x156>
 800b6c4:	eba0 0308 	sub.w	r3, r0, r8
 800b6c8:	fa09 f303 	lsl.w	r3, r9, r3
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	9304      	str	r3, [sp, #16]
 800b6d0:	46a2      	mov	sl, r4
 800b6d2:	e7d2      	b.n	800b67a <_vfiprintf_r+0xe2>
 800b6d4:	9b03      	ldr	r3, [sp, #12]
 800b6d6:	1d19      	adds	r1, r3, #4
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	9103      	str	r1, [sp, #12]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	bfbb      	ittet	lt
 800b6e0:	425b      	neglt	r3, r3
 800b6e2:	f042 0202 	orrlt.w	r2, r2, #2
 800b6e6:	9307      	strge	r3, [sp, #28]
 800b6e8:	9307      	strlt	r3, [sp, #28]
 800b6ea:	bfb8      	it	lt
 800b6ec:	9204      	strlt	r2, [sp, #16]
 800b6ee:	7823      	ldrb	r3, [r4, #0]
 800b6f0:	2b2e      	cmp	r3, #46	; 0x2e
 800b6f2:	d10c      	bne.n	800b70e <_vfiprintf_r+0x176>
 800b6f4:	7863      	ldrb	r3, [r4, #1]
 800b6f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b6f8:	d135      	bne.n	800b766 <_vfiprintf_r+0x1ce>
 800b6fa:	9b03      	ldr	r3, [sp, #12]
 800b6fc:	1d1a      	adds	r2, r3, #4
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	9203      	str	r2, [sp, #12]
 800b702:	2b00      	cmp	r3, #0
 800b704:	bfb8      	it	lt
 800b706:	f04f 33ff 	movlt.w	r3, #4294967295
 800b70a:	3402      	adds	r4, #2
 800b70c:	9305      	str	r3, [sp, #20]
 800b70e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b7f4 <_vfiprintf_r+0x25c>
 800b712:	7821      	ldrb	r1, [r4, #0]
 800b714:	2203      	movs	r2, #3
 800b716:	4650      	mov	r0, sl
 800b718:	f7f4 fd9a 	bl	8000250 <memchr>
 800b71c:	b140      	cbz	r0, 800b730 <_vfiprintf_r+0x198>
 800b71e:	2340      	movs	r3, #64	; 0x40
 800b720:	eba0 000a 	sub.w	r0, r0, sl
 800b724:	fa03 f000 	lsl.w	r0, r3, r0
 800b728:	9b04      	ldr	r3, [sp, #16]
 800b72a:	4303      	orrs	r3, r0
 800b72c:	3401      	adds	r4, #1
 800b72e:	9304      	str	r3, [sp, #16]
 800b730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b734:	482c      	ldr	r0, [pc, #176]	; (800b7e8 <_vfiprintf_r+0x250>)
 800b736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b73a:	2206      	movs	r2, #6
 800b73c:	f7f4 fd88 	bl	8000250 <memchr>
 800b740:	2800      	cmp	r0, #0
 800b742:	d03f      	beq.n	800b7c4 <_vfiprintf_r+0x22c>
 800b744:	4b29      	ldr	r3, [pc, #164]	; (800b7ec <_vfiprintf_r+0x254>)
 800b746:	bb1b      	cbnz	r3, 800b790 <_vfiprintf_r+0x1f8>
 800b748:	9b03      	ldr	r3, [sp, #12]
 800b74a:	3307      	adds	r3, #7
 800b74c:	f023 0307 	bic.w	r3, r3, #7
 800b750:	3308      	adds	r3, #8
 800b752:	9303      	str	r3, [sp, #12]
 800b754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b756:	443b      	add	r3, r7
 800b758:	9309      	str	r3, [sp, #36]	; 0x24
 800b75a:	e767      	b.n	800b62c <_vfiprintf_r+0x94>
 800b75c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b760:	460c      	mov	r4, r1
 800b762:	2001      	movs	r0, #1
 800b764:	e7a5      	b.n	800b6b2 <_vfiprintf_r+0x11a>
 800b766:	2300      	movs	r3, #0
 800b768:	3401      	adds	r4, #1
 800b76a:	9305      	str	r3, [sp, #20]
 800b76c:	4619      	mov	r1, r3
 800b76e:	f04f 0c0a 	mov.w	ip, #10
 800b772:	4620      	mov	r0, r4
 800b774:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b778:	3a30      	subs	r2, #48	; 0x30
 800b77a:	2a09      	cmp	r2, #9
 800b77c:	d903      	bls.n	800b786 <_vfiprintf_r+0x1ee>
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d0c5      	beq.n	800b70e <_vfiprintf_r+0x176>
 800b782:	9105      	str	r1, [sp, #20]
 800b784:	e7c3      	b.n	800b70e <_vfiprintf_r+0x176>
 800b786:	fb0c 2101 	mla	r1, ip, r1, r2
 800b78a:	4604      	mov	r4, r0
 800b78c:	2301      	movs	r3, #1
 800b78e:	e7f0      	b.n	800b772 <_vfiprintf_r+0x1da>
 800b790:	ab03      	add	r3, sp, #12
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	462a      	mov	r2, r5
 800b796:	4b16      	ldr	r3, [pc, #88]	; (800b7f0 <_vfiprintf_r+0x258>)
 800b798:	a904      	add	r1, sp, #16
 800b79a:	4630      	mov	r0, r6
 800b79c:	f7fc f920 	bl	80079e0 <_printf_float>
 800b7a0:	4607      	mov	r7, r0
 800b7a2:	1c78      	adds	r0, r7, #1
 800b7a4:	d1d6      	bne.n	800b754 <_vfiprintf_r+0x1bc>
 800b7a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7a8:	07d9      	lsls	r1, r3, #31
 800b7aa:	d405      	bmi.n	800b7b8 <_vfiprintf_r+0x220>
 800b7ac:	89ab      	ldrh	r3, [r5, #12]
 800b7ae:	059a      	lsls	r2, r3, #22
 800b7b0:	d402      	bmi.n	800b7b8 <_vfiprintf_r+0x220>
 800b7b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7b4:	f000 faa1 	bl	800bcfa <__retarget_lock_release_recursive>
 800b7b8:	89ab      	ldrh	r3, [r5, #12]
 800b7ba:	065b      	lsls	r3, r3, #25
 800b7bc:	f53f af12 	bmi.w	800b5e4 <_vfiprintf_r+0x4c>
 800b7c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7c2:	e711      	b.n	800b5e8 <_vfiprintf_r+0x50>
 800b7c4:	ab03      	add	r3, sp, #12
 800b7c6:	9300      	str	r3, [sp, #0]
 800b7c8:	462a      	mov	r2, r5
 800b7ca:	4b09      	ldr	r3, [pc, #36]	; (800b7f0 <_vfiprintf_r+0x258>)
 800b7cc:	a904      	add	r1, sp, #16
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	f7fc fb92 	bl	8007ef8 <_printf_i>
 800b7d4:	e7e4      	b.n	800b7a0 <_vfiprintf_r+0x208>
 800b7d6:	bf00      	nop
 800b7d8:	0800c53c 	.word	0x0800c53c
 800b7dc:	0800c55c 	.word	0x0800c55c
 800b7e0:	0800c51c 	.word	0x0800c51c
 800b7e4:	0800c4cc 	.word	0x0800c4cc
 800b7e8:	0800c4d6 	.word	0x0800c4d6
 800b7ec:	080079e1 	.word	0x080079e1
 800b7f0:	0800b575 	.word	0x0800b575
 800b7f4:	0800c4d2 	.word	0x0800c4d2

0800b7f8 <__swbuf_r>:
 800b7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fa:	460e      	mov	r6, r1
 800b7fc:	4614      	mov	r4, r2
 800b7fe:	4605      	mov	r5, r0
 800b800:	b118      	cbz	r0, 800b80a <__swbuf_r+0x12>
 800b802:	6983      	ldr	r3, [r0, #24]
 800b804:	b90b      	cbnz	r3, 800b80a <__swbuf_r+0x12>
 800b806:	f000 f9d9 	bl	800bbbc <__sinit>
 800b80a:	4b21      	ldr	r3, [pc, #132]	; (800b890 <__swbuf_r+0x98>)
 800b80c:	429c      	cmp	r4, r3
 800b80e:	d12b      	bne.n	800b868 <__swbuf_r+0x70>
 800b810:	686c      	ldr	r4, [r5, #4]
 800b812:	69a3      	ldr	r3, [r4, #24]
 800b814:	60a3      	str	r3, [r4, #8]
 800b816:	89a3      	ldrh	r3, [r4, #12]
 800b818:	071a      	lsls	r2, r3, #28
 800b81a:	d52f      	bpl.n	800b87c <__swbuf_r+0x84>
 800b81c:	6923      	ldr	r3, [r4, #16]
 800b81e:	b36b      	cbz	r3, 800b87c <__swbuf_r+0x84>
 800b820:	6923      	ldr	r3, [r4, #16]
 800b822:	6820      	ldr	r0, [r4, #0]
 800b824:	1ac0      	subs	r0, r0, r3
 800b826:	6963      	ldr	r3, [r4, #20]
 800b828:	b2f6      	uxtb	r6, r6
 800b82a:	4283      	cmp	r3, r0
 800b82c:	4637      	mov	r7, r6
 800b82e:	dc04      	bgt.n	800b83a <__swbuf_r+0x42>
 800b830:	4621      	mov	r1, r4
 800b832:	4628      	mov	r0, r5
 800b834:	f000 f92e 	bl	800ba94 <_fflush_r>
 800b838:	bb30      	cbnz	r0, 800b888 <__swbuf_r+0x90>
 800b83a:	68a3      	ldr	r3, [r4, #8]
 800b83c:	3b01      	subs	r3, #1
 800b83e:	60a3      	str	r3, [r4, #8]
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	1c5a      	adds	r2, r3, #1
 800b844:	6022      	str	r2, [r4, #0]
 800b846:	701e      	strb	r6, [r3, #0]
 800b848:	6963      	ldr	r3, [r4, #20]
 800b84a:	3001      	adds	r0, #1
 800b84c:	4283      	cmp	r3, r0
 800b84e:	d004      	beq.n	800b85a <__swbuf_r+0x62>
 800b850:	89a3      	ldrh	r3, [r4, #12]
 800b852:	07db      	lsls	r3, r3, #31
 800b854:	d506      	bpl.n	800b864 <__swbuf_r+0x6c>
 800b856:	2e0a      	cmp	r6, #10
 800b858:	d104      	bne.n	800b864 <__swbuf_r+0x6c>
 800b85a:	4621      	mov	r1, r4
 800b85c:	4628      	mov	r0, r5
 800b85e:	f000 f919 	bl	800ba94 <_fflush_r>
 800b862:	b988      	cbnz	r0, 800b888 <__swbuf_r+0x90>
 800b864:	4638      	mov	r0, r7
 800b866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b868:	4b0a      	ldr	r3, [pc, #40]	; (800b894 <__swbuf_r+0x9c>)
 800b86a:	429c      	cmp	r4, r3
 800b86c:	d101      	bne.n	800b872 <__swbuf_r+0x7a>
 800b86e:	68ac      	ldr	r4, [r5, #8]
 800b870:	e7cf      	b.n	800b812 <__swbuf_r+0x1a>
 800b872:	4b09      	ldr	r3, [pc, #36]	; (800b898 <__swbuf_r+0xa0>)
 800b874:	429c      	cmp	r4, r3
 800b876:	bf08      	it	eq
 800b878:	68ec      	ldreq	r4, [r5, #12]
 800b87a:	e7ca      	b.n	800b812 <__swbuf_r+0x1a>
 800b87c:	4621      	mov	r1, r4
 800b87e:	4628      	mov	r0, r5
 800b880:	f000 f80c 	bl	800b89c <__swsetup_r>
 800b884:	2800      	cmp	r0, #0
 800b886:	d0cb      	beq.n	800b820 <__swbuf_r+0x28>
 800b888:	f04f 37ff 	mov.w	r7, #4294967295
 800b88c:	e7ea      	b.n	800b864 <__swbuf_r+0x6c>
 800b88e:	bf00      	nop
 800b890:	0800c53c 	.word	0x0800c53c
 800b894:	0800c55c 	.word	0x0800c55c
 800b898:	0800c51c 	.word	0x0800c51c

0800b89c <__swsetup_r>:
 800b89c:	4b32      	ldr	r3, [pc, #200]	; (800b968 <__swsetup_r+0xcc>)
 800b89e:	b570      	push	{r4, r5, r6, lr}
 800b8a0:	681d      	ldr	r5, [r3, #0]
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	460c      	mov	r4, r1
 800b8a6:	b125      	cbz	r5, 800b8b2 <__swsetup_r+0x16>
 800b8a8:	69ab      	ldr	r3, [r5, #24]
 800b8aa:	b913      	cbnz	r3, 800b8b2 <__swsetup_r+0x16>
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	f000 f985 	bl	800bbbc <__sinit>
 800b8b2:	4b2e      	ldr	r3, [pc, #184]	; (800b96c <__swsetup_r+0xd0>)
 800b8b4:	429c      	cmp	r4, r3
 800b8b6:	d10f      	bne.n	800b8d8 <__swsetup_r+0x3c>
 800b8b8:	686c      	ldr	r4, [r5, #4]
 800b8ba:	89a3      	ldrh	r3, [r4, #12]
 800b8bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8c0:	0719      	lsls	r1, r3, #28
 800b8c2:	d42c      	bmi.n	800b91e <__swsetup_r+0x82>
 800b8c4:	06dd      	lsls	r5, r3, #27
 800b8c6:	d411      	bmi.n	800b8ec <__swsetup_r+0x50>
 800b8c8:	2309      	movs	r3, #9
 800b8ca:	6033      	str	r3, [r6, #0]
 800b8cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8d0:	81a3      	strh	r3, [r4, #12]
 800b8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d6:	e03e      	b.n	800b956 <__swsetup_r+0xba>
 800b8d8:	4b25      	ldr	r3, [pc, #148]	; (800b970 <__swsetup_r+0xd4>)
 800b8da:	429c      	cmp	r4, r3
 800b8dc:	d101      	bne.n	800b8e2 <__swsetup_r+0x46>
 800b8de:	68ac      	ldr	r4, [r5, #8]
 800b8e0:	e7eb      	b.n	800b8ba <__swsetup_r+0x1e>
 800b8e2:	4b24      	ldr	r3, [pc, #144]	; (800b974 <__swsetup_r+0xd8>)
 800b8e4:	429c      	cmp	r4, r3
 800b8e6:	bf08      	it	eq
 800b8e8:	68ec      	ldreq	r4, [r5, #12]
 800b8ea:	e7e6      	b.n	800b8ba <__swsetup_r+0x1e>
 800b8ec:	0758      	lsls	r0, r3, #29
 800b8ee:	d512      	bpl.n	800b916 <__swsetup_r+0x7a>
 800b8f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8f2:	b141      	cbz	r1, 800b906 <__swsetup_r+0x6a>
 800b8f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8f8:	4299      	cmp	r1, r3
 800b8fa:	d002      	beq.n	800b902 <__swsetup_r+0x66>
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7ff fb25 	bl	800af4c <_free_r>
 800b902:	2300      	movs	r3, #0
 800b904:	6363      	str	r3, [r4, #52]	; 0x34
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b90c:	81a3      	strh	r3, [r4, #12]
 800b90e:	2300      	movs	r3, #0
 800b910:	6063      	str	r3, [r4, #4]
 800b912:	6923      	ldr	r3, [r4, #16]
 800b914:	6023      	str	r3, [r4, #0]
 800b916:	89a3      	ldrh	r3, [r4, #12]
 800b918:	f043 0308 	orr.w	r3, r3, #8
 800b91c:	81a3      	strh	r3, [r4, #12]
 800b91e:	6923      	ldr	r3, [r4, #16]
 800b920:	b94b      	cbnz	r3, 800b936 <__swsetup_r+0x9a>
 800b922:	89a3      	ldrh	r3, [r4, #12]
 800b924:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b92c:	d003      	beq.n	800b936 <__swsetup_r+0x9a>
 800b92e:	4621      	mov	r1, r4
 800b930:	4630      	mov	r0, r6
 800b932:	f000 fa09 	bl	800bd48 <__smakebuf_r>
 800b936:	89a0      	ldrh	r0, [r4, #12]
 800b938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b93c:	f010 0301 	ands.w	r3, r0, #1
 800b940:	d00a      	beq.n	800b958 <__swsetup_r+0xbc>
 800b942:	2300      	movs	r3, #0
 800b944:	60a3      	str	r3, [r4, #8]
 800b946:	6963      	ldr	r3, [r4, #20]
 800b948:	425b      	negs	r3, r3
 800b94a:	61a3      	str	r3, [r4, #24]
 800b94c:	6923      	ldr	r3, [r4, #16]
 800b94e:	b943      	cbnz	r3, 800b962 <__swsetup_r+0xc6>
 800b950:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b954:	d1ba      	bne.n	800b8cc <__swsetup_r+0x30>
 800b956:	bd70      	pop	{r4, r5, r6, pc}
 800b958:	0781      	lsls	r1, r0, #30
 800b95a:	bf58      	it	pl
 800b95c:	6963      	ldrpl	r3, [r4, #20]
 800b95e:	60a3      	str	r3, [r4, #8]
 800b960:	e7f4      	b.n	800b94c <__swsetup_r+0xb0>
 800b962:	2000      	movs	r0, #0
 800b964:	e7f7      	b.n	800b956 <__swsetup_r+0xba>
 800b966:	bf00      	nop
 800b968:	20000024 	.word	0x20000024
 800b96c:	0800c53c 	.word	0x0800c53c
 800b970:	0800c55c 	.word	0x0800c55c
 800b974:	0800c51c 	.word	0x0800c51c

0800b978 <abort>:
 800b978:	b508      	push	{r3, lr}
 800b97a:	2006      	movs	r0, #6
 800b97c:	f000 fa54 	bl	800be28 <raise>
 800b980:	2001      	movs	r0, #1
 800b982:	f7f6 fb3f 	bl	8002004 <_exit>
	...

0800b988 <__sflush_r>:
 800b988:	898a      	ldrh	r2, [r1, #12]
 800b98a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b98e:	4605      	mov	r5, r0
 800b990:	0710      	lsls	r0, r2, #28
 800b992:	460c      	mov	r4, r1
 800b994:	d458      	bmi.n	800ba48 <__sflush_r+0xc0>
 800b996:	684b      	ldr	r3, [r1, #4]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	dc05      	bgt.n	800b9a8 <__sflush_r+0x20>
 800b99c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	dc02      	bgt.n	800b9a8 <__sflush_r+0x20>
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9aa:	2e00      	cmp	r6, #0
 800b9ac:	d0f9      	beq.n	800b9a2 <__sflush_r+0x1a>
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9b4:	682f      	ldr	r7, [r5, #0]
 800b9b6:	602b      	str	r3, [r5, #0]
 800b9b8:	d032      	beq.n	800ba20 <__sflush_r+0x98>
 800b9ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9bc:	89a3      	ldrh	r3, [r4, #12]
 800b9be:	075a      	lsls	r2, r3, #29
 800b9c0:	d505      	bpl.n	800b9ce <__sflush_r+0x46>
 800b9c2:	6863      	ldr	r3, [r4, #4]
 800b9c4:	1ac0      	subs	r0, r0, r3
 800b9c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9c8:	b10b      	cbz	r3, 800b9ce <__sflush_r+0x46>
 800b9ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9cc:	1ac0      	subs	r0, r0, r3
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9d4:	6a21      	ldr	r1, [r4, #32]
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	47b0      	blx	r6
 800b9da:	1c43      	adds	r3, r0, #1
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	d106      	bne.n	800b9ee <__sflush_r+0x66>
 800b9e0:	6829      	ldr	r1, [r5, #0]
 800b9e2:	291d      	cmp	r1, #29
 800b9e4:	d82c      	bhi.n	800ba40 <__sflush_r+0xb8>
 800b9e6:	4a2a      	ldr	r2, [pc, #168]	; (800ba90 <__sflush_r+0x108>)
 800b9e8:	40ca      	lsrs	r2, r1
 800b9ea:	07d6      	lsls	r6, r2, #31
 800b9ec:	d528      	bpl.n	800ba40 <__sflush_r+0xb8>
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	6062      	str	r2, [r4, #4]
 800b9f2:	04d9      	lsls	r1, r3, #19
 800b9f4:	6922      	ldr	r2, [r4, #16]
 800b9f6:	6022      	str	r2, [r4, #0]
 800b9f8:	d504      	bpl.n	800ba04 <__sflush_r+0x7c>
 800b9fa:	1c42      	adds	r2, r0, #1
 800b9fc:	d101      	bne.n	800ba02 <__sflush_r+0x7a>
 800b9fe:	682b      	ldr	r3, [r5, #0]
 800ba00:	b903      	cbnz	r3, 800ba04 <__sflush_r+0x7c>
 800ba02:	6560      	str	r0, [r4, #84]	; 0x54
 800ba04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba06:	602f      	str	r7, [r5, #0]
 800ba08:	2900      	cmp	r1, #0
 800ba0a:	d0ca      	beq.n	800b9a2 <__sflush_r+0x1a>
 800ba0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba10:	4299      	cmp	r1, r3
 800ba12:	d002      	beq.n	800ba1a <__sflush_r+0x92>
 800ba14:	4628      	mov	r0, r5
 800ba16:	f7ff fa99 	bl	800af4c <_free_r>
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	6360      	str	r0, [r4, #52]	; 0x34
 800ba1e:	e7c1      	b.n	800b9a4 <__sflush_r+0x1c>
 800ba20:	6a21      	ldr	r1, [r4, #32]
 800ba22:	2301      	movs	r3, #1
 800ba24:	4628      	mov	r0, r5
 800ba26:	47b0      	blx	r6
 800ba28:	1c41      	adds	r1, r0, #1
 800ba2a:	d1c7      	bne.n	800b9bc <__sflush_r+0x34>
 800ba2c:	682b      	ldr	r3, [r5, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d0c4      	beq.n	800b9bc <__sflush_r+0x34>
 800ba32:	2b1d      	cmp	r3, #29
 800ba34:	d001      	beq.n	800ba3a <__sflush_r+0xb2>
 800ba36:	2b16      	cmp	r3, #22
 800ba38:	d101      	bne.n	800ba3e <__sflush_r+0xb6>
 800ba3a:	602f      	str	r7, [r5, #0]
 800ba3c:	e7b1      	b.n	800b9a2 <__sflush_r+0x1a>
 800ba3e:	89a3      	ldrh	r3, [r4, #12]
 800ba40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba44:	81a3      	strh	r3, [r4, #12]
 800ba46:	e7ad      	b.n	800b9a4 <__sflush_r+0x1c>
 800ba48:	690f      	ldr	r7, [r1, #16]
 800ba4a:	2f00      	cmp	r7, #0
 800ba4c:	d0a9      	beq.n	800b9a2 <__sflush_r+0x1a>
 800ba4e:	0793      	lsls	r3, r2, #30
 800ba50:	680e      	ldr	r6, [r1, #0]
 800ba52:	bf08      	it	eq
 800ba54:	694b      	ldreq	r3, [r1, #20]
 800ba56:	600f      	str	r7, [r1, #0]
 800ba58:	bf18      	it	ne
 800ba5a:	2300      	movne	r3, #0
 800ba5c:	eba6 0807 	sub.w	r8, r6, r7
 800ba60:	608b      	str	r3, [r1, #8]
 800ba62:	f1b8 0f00 	cmp.w	r8, #0
 800ba66:	dd9c      	ble.n	800b9a2 <__sflush_r+0x1a>
 800ba68:	6a21      	ldr	r1, [r4, #32]
 800ba6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba6c:	4643      	mov	r3, r8
 800ba6e:	463a      	mov	r2, r7
 800ba70:	4628      	mov	r0, r5
 800ba72:	47b0      	blx	r6
 800ba74:	2800      	cmp	r0, #0
 800ba76:	dc06      	bgt.n	800ba86 <__sflush_r+0xfe>
 800ba78:	89a3      	ldrh	r3, [r4, #12]
 800ba7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba7e:	81a3      	strh	r3, [r4, #12]
 800ba80:	f04f 30ff 	mov.w	r0, #4294967295
 800ba84:	e78e      	b.n	800b9a4 <__sflush_r+0x1c>
 800ba86:	4407      	add	r7, r0
 800ba88:	eba8 0800 	sub.w	r8, r8, r0
 800ba8c:	e7e9      	b.n	800ba62 <__sflush_r+0xda>
 800ba8e:	bf00      	nop
 800ba90:	20400001 	.word	0x20400001

0800ba94 <_fflush_r>:
 800ba94:	b538      	push	{r3, r4, r5, lr}
 800ba96:	690b      	ldr	r3, [r1, #16]
 800ba98:	4605      	mov	r5, r0
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	b913      	cbnz	r3, 800baa4 <_fflush_r+0x10>
 800ba9e:	2500      	movs	r5, #0
 800baa0:	4628      	mov	r0, r5
 800baa2:	bd38      	pop	{r3, r4, r5, pc}
 800baa4:	b118      	cbz	r0, 800baae <_fflush_r+0x1a>
 800baa6:	6983      	ldr	r3, [r0, #24]
 800baa8:	b90b      	cbnz	r3, 800baae <_fflush_r+0x1a>
 800baaa:	f000 f887 	bl	800bbbc <__sinit>
 800baae:	4b14      	ldr	r3, [pc, #80]	; (800bb00 <_fflush_r+0x6c>)
 800bab0:	429c      	cmp	r4, r3
 800bab2:	d11b      	bne.n	800baec <_fflush_r+0x58>
 800bab4:	686c      	ldr	r4, [r5, #4]
 800bab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d0ef      	beq.n	800ba9e <_fflush_r+0xa>
 800babe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bac0:	07d0      	lsls	r0, r2, #31
 800bac2:	d404      	bmi.n	800bace <_fflush_r+0x3a>
 800bac4:	0599      	lsls	r1, r3, #22
 800bac6:	d402      	bmi.n	800bace <_fflush_r+0x3a>
 800bac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baca:	f000 f915 	bl	800bcf8 <__retarget_lock_acquire_recursive>
 800bace:	4628      	mov	r0, r5
 800bad0:	4621      	mov	r1, r4
 800bad2:	f7ff ff59 	bl	800b988 <__sflush_r>
 800bad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bad8:	07da      	lsls	r2, r3, #31
 800bada:	4605      	mov	r5, r0
 800badc:	d4e0      	bmi.n	800baa0 <_fflush_r+0xc>
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	059b      	lsls	r3, r3, #22
 800bae2:	d4dd      	bmi.n	800baa0 <_fflush_r+0xc>
 800bae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bae6:	f000 f908 	bl	800bcfa <__retarget_lock_release_recursive>
 800baea:	e7d9      	b.n	800baa0 <_fflush_r+0xc>
 800baec:	4b05      	ldr	r3, [pc, #20]	; (800bb04 <_fflush_r+0x70>)
 800baee:	429c      	cmp	r4, r3
 800baf0:	d101      	bne.n	800baf6 <_fflush_r+0x62>
 800baf2:	68ac      	ldr	r4, [r5, #8]
 800baf4:	e7df      	b.n	800bab6 <_fflush_r+0x22>
 800baf6:	4b04      	ldr	r3, [pc, #16]	; (800bb08 <_fflush_r+0x74>)
 800baf8:	429c      	cmp	r4, r3
 800bafa:	bf08      	it	eq
 800bafc:	68ec      	ldreq	r4, [r5, #12]
 800bafe:	e7da      	b.n	800bab6 <_fflush_r+0x22>
 800bb00:	0800c53c 	.word	0x0800c53c
 800bb04:	0800c55c 	.word	0x0800c55c
 800bb08:	0800c51c 	.word	0x0800c51c

0800bb0c <std>:
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	b510      	push	{r4, lr}
 800bb10:	4604      	mov	r4, r0
 800bb12:	e9c0 3300 	strd	r3, r3, [r0]
 800bb16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb1a:	6083      	str	r3, [r0, #8]
 800bb1c:	8181      	strh	r1, [r0, #12]
 800bb1e:	6643      	str	r3, [r0, #100]	; 0x64
 800bb20:	81c2      	strh	r2, [r0, #14]
 800bb22:	6183      	str	r3, [r0, #24]
 800bb24:	4619      	mov	r1, r3
 800bb26:	2208      	movs	r2, #8
 800bb28:	305c      	adds	r0, #92	; 0x5c
 800bb2a:	f7fb febf 	bl	80078ac <memset>
 800bb2e:	4b05      	ldr	r3, [pc, #20]	; (800bb44 <std+0x38>)
 800bb30:	6263      	str	r3, [r4, #36]	; 0x24
 800bb32:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <std+0x3c>)
 800bb34:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb36:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <std+0x40>)
 800bb38:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb3a:	4b05      	ldr	r3, [pc, #20]	; (800bb50 <std+0x44>)
 800bb3c:	6224      	str	r4, [r4, #32]
 800bb3e:	6323      	str	r3, [r4, #48]	; 0x30
 800bb40:	bd10      	pop	{r4, pc}
 800bb42:	bf00      	nop
 800bb44:	0800be61 	.word	0x0800be61
 800bb48:	0800be83 	.word	0x0800be83
 800bb4c:	0800bebb 	.word	0x0800bebb
 800bb50:	0800bedf 	.word	0x0800bedf

0800bb54 <_cleanup_r>:
 800bb54:	4901      	ldr	r1, [pc, #4]	; (800bb5c <_cleanup_r+0x8>)
 800bb56:	f000 b8af 	b.w	800bcb8 <_fwalk_reent>
 800bb5a:	bf00      	nop
 800bb5c:	0800ba95 	.word	0x0800ba95

0800bb60 <__sfmoreglue>:
 800bb60:	b570      	push	{r4, r5, r6, lr}
 800bb62:	2268      	movs	r2, #104	; 0x68
 800bb64:	1e4d      	subs	r5, r1, #1
 800bb66:	4355      	muls	r5, r2
 800bb68:	460e      	mov	r6, r1
 800bb6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb6e:	f7ff fa59 	bl	800b024 <_malloc_r>
 800bb72:	4604      	mov	r4, r0
 800bb74:	b140      	cbz	r0, 800bb88 <__sfmoreglue+0x28>
 800bb76:	2100      	movs	r1, #0
 800bb78:	e9c0 1600 	strd	r1, r6, [r0]
 800bb7c:	300c      	adds	r0, #12
 800bb7e:	60a0      	str	r0, [r4, #8]
 800bb80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb84:	f7fb fe92 	bl	80078ac <memset>
 800bb88:	4620      	mov	r0, r4
 800bb8a:	bd70      	pop	{r4, r5, r6, pc}

0800bb8c <__sfp_lock_acquire>:
 800bb8c:	4801      	ldr	r0, [pc, #4]	; (800bb94 <__sfp_lock_acquire+0x8>)
 800bb8e:	f000 b8b3 	b.w	800bcf8 <__retarget_lock_acquire_recursive>
 800bb92:	bf00      	nop
 800bb94:	200008a9 	.word	0x200008a9

0800bb98 <__sfp_lock_release>:
 800bb98:	4801      	ldr	r0, [pc, #4]	; (800bba0 <__sfp_lock_release+0x8>)
 800bb9a:	f000 b8ae 	b.w	800bcfa <__retarget_lock_release_recursive>
 800bb9e:	bf00      	nop
 800bba0:	200008a9 	.word	0x200008a9

0800bba4 <__sinit_lock_acquire>:
 800bba4:	4801      	ldr	r0, [pc, #4]	; (800bbac <__sinit_lock_acquire+0x8>)
 800bba6:	f000 b8a7 	b.w	800bcf8 <__retarget_lock_acquire_recursive>
 800bbaa:	bf00      	nop
 800bbac:	200008aa 	.word	0x200008aa

0800bbb0 <__sinit_lock_release>:
 800bbb0:	4801      	ldr	r0, [pc, #4]	; (800bbb8 <__sinit_lock_release+0x8>)
 800bbb2:	f000 b8a2 	b.w	800bcfa <__retarget_lock_release_recursive>
 800bbb6:	bf00      	nop
 800bbb8:	200008aa 	.word	0x200008aa

0800bbbc <__sinit>:
 800bbbc:	b510      	push	{r4, lr}
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	f7ff fff0 	bl	800bba4 <__sinit_lock_acquire>
 800bbc4:	69a3      	ldr	r3, [r4, #24]
 800bbc6:	b11b      	cbz	r3, 800bbd0 <__sinit+0x14>
 800bbc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbcc:	f7ff bff0 	b.w	800bbb0 <__sinit_lock_release>
 800bbd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bbd4:	6523      	str	r3, [r4, #80]	; 0x50
 800bbd6:	4b13      	ldr	r3, [pc, #76]	; (800bc24 <__sinit+0x68>)
 800bbd8:	4a13      	ldr	r2, [pc, #76]	; (800bc28 <__sinit+0x6c>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	62a2      	str	r2, [r4, #40]	; 0x28
 800bbde:	42a3      	cmp	r3, r4
 800bbe0:	bf04      	itt	eq
 800bbe2:	2301      	moveq	r3, #1
 800bbe4:	61a3      	streq	r3, [r4, #24]
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f000 f820 	bl	800bc2c <__sfp>
 800bbec:	6060      	str	r0, [r4, #4]
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f000 f81c 	bl	800bc2c <__sfp>
 800bbf4:	60a0      	str	r0, [r4, #8]
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f000 f818 	bl	800bc2c <__sfp>
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	60e0      	str	r0, [r4, #12]
 800bc00:	2104      	movs	r1, #4
 800bc02:	6860      	ldr	r0, [r4, #4]
 800bc04:	f7ff ff82 	bl	800bb0c <std>
 800bc08:	68a0      	ldr	r0, [r4, #8]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	2109      	movs	r1, #9
 800bc0e:	f7ff ff7d 	bl	800bb0c <std>
 800bc12:	68e0      	ldr	r0, [r4, #12]
 800bc14:	2202      	movs	r2, #2
 800bc16:	2112      	movs	r1, #18
 800bc18:	f7ff ff78 	bl	800bb0c <std>
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	61a3      	str	r3, [r4, #24]
 800bc20:	e7d2      	b.n	800bbc8 <__sinit+0xc>
 800bc22:	bf00      	nop
 800bc24:	0800c0d8 	.word	0x0800c0d8
 800bc28:	0800bb55 	.word	0x0800bb55

0800bc2c <__sfp>:
 800bc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2e:	4607      	mov	r7, r0
 800bc30:	f7ff ffac 	bl	800bb8c <__sfp_lock_acquire>
 800bc34:	4b1e      	ldr	r3, [pc, #120]	; (800bcb0 <__sfp+0x84>)
 800bc36:	681e      	ldr	r6, [r3, #0]
 800bc38:	69b3      	ldr	r3, [r6, #24]
 800bc3a:	b913      	cbnz	r3, 800bc42 <__sfp+0x16>
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	f7ff ffbd 	bl	800bbbc <__sinit>
 800bc42:	3648      	adds	r6, #72	; 0x48
 800bc44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	d503      	bpl.n	800bc54 <__sfp+0x28>
 800bc4c:	6833      	ldr	r3, [r6, #0]
 800bc4e:	b30b      	cbz	r3, 800bc94 <__sfp+0x68>
 800bc50:	6836      	ldr	r6, [r6, #0]
 800bc52:	e7f7      	b.n	800bc44 <__sfp+0x18>
 800bc54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc58:	b9d5      	cbnz	r5, 800bc90 <__sfp+0x64>
 800bc5a:	4b16      	ldr	r3, [pc, #88]	; (800bcb4 <__sfp+0x88>)
 800bc5c:	60e3      	str	r3, [r4, #12]
 800bc5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc62:	6665      	str	r5, [r4, #100]	; 0x64
 800bc64:	f000 f847 	bl	800bcf6 <__retarget_lock_init_recursive>
 800bc68:	f7ff ff96 	bl	800bb98 <__sfp_lock_release>
 800bc6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bc70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bc74:	6025      	str	r5, [r4, #0]
 800bc76:	61a5      	str	r5, [r4, #24]
 800bc78:	2208      	movs	r2, #8
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc80:	f7fb fe14 	bl	80078ac <memset>
 800bc84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc90:	3468      	adds	r4, #104	; 0x68
 800bc92:	e7d9      	b.n	800bc48 <__sfp+0x1c>
 800bc94:	2104      	movs	r1, #4
 800bc96:	4638      	mov	r0, r7
 800bc98:	f7ff ff62 	bl	800bb60 <__sfmoreglue>
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	6030      	str	r0, [r6, #0]
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d1d5      	bne.n	800bc50 <__sfp+0x24>
 800bca4:	f7ff ff78 	bl	800bb98 <__sfp_lock_release>
 800bca8:	230c      	movs	r3, #12
 800bcaa:	603b      	str	r3, [r7, #0]
 800bcac:	e7ee      	b.n	800bc8c <__sfp+0x60>
 800bcae:	bf00      	nop
 800bcb0:	0800c0d8 	.word	0x0800c0d8
 800bcb4:	ffff0001 	.word	0xffff0001

0800bcb8 <_fwalk_reent>:
 800bcb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcbc:	4606      	mov	r6, r0
 800bcbe:	4688      	mov	r8, r1
 800bcc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bcc4:	2700      	movs	r7, #0
 800bcc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcca:	f1b9 0901 	subs.w	r9, r9, #1
 800bcce:	d505      	bpl.n	800bcdc <_fwalk_reent+0x24>
 800bcd0:	6824      	ldr	r4, [r4, #0]
 800bcd2:	2c00      	cmp	r4, #0
 800bcd4:	d1f7      	bne.n	800bcc6 <_fwalk_reent+0xe>
 800bcd6:	4638      	mov	r0, r7
 800bcd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcdc:	89ab      	ldrh	r3, [r5, #12]
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d907      	bls.n	800bcf2 <_fwalk_reent+0x3a>
 800bce2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bce6:	3301      	adds	r3, #1
 800bce8:	d003      	beq.n	800bcf2 <_fwalk_reent+0x3a>
 800bcea:	4629      	mov	r1, r5
 800bcec:	4630      	mov	r0, r6
 800bcee:	47c0      	blx	r8
 800bcf0:	4307      	orrs	r7, r0
 800bcf2:	3568      	adds	r5, #104	; 0x68
 800bcf4:	e7e9      	b.n	800bcca <_fwalk_reent+0x12>

0800bcf6 <__retarget_lock_init_recursive>:
 800bcf6:	4770      	bx	lr

0800bcf8 <__retarget_lock_acquire_recursive>:
 800bcf8:	4770      	bx	lr

0800bcfa <__retarget_lock_release_recursive>:
 800bcfa:	4770      	bx	lr

0800bcfc <__swhatbuf_r>:
 800bcfc:	b570      	push	{r4, r5, r6, lr}
 800bcfe:	460e      	mov	r6, r1
 800bd00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd04:	2900      	cmp	r1, #0
 800bd06:	b096      	sub	sp, #88	; 0x58
 800bd08:	4614      	mov	r4, r2
 800bd0a:	461d      	mov	r5, r3
 800bd0c:	da08      	bge.n	800bd20 <__swhatbuf_r+0x24>
 800bd0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	602a      	str	r2, [r5, #0]
 800bd16:	061a      	lsls	r2, r3, #24
 800bd18:	d410      	bmi.n	800bd3c <__swhatbuf_r+0x40>
 800bd1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd1e:	e00e      	b.n	800bd3e <__swhatbuf_r+0x42>
 800bd20:	466a      	mov	r2, sp
 800bd22:	f000 f903 	bl	800bf2c <_fstat_r>
 800bd26:	2800      	cmp	r0, #0
 800bd28:	dbf1      	blt.n	800bd0e <__swhatbuf_r+0x12>
 800bd2a:	9a01      	ldr	r2, [sp, #4]
 800bd2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd34:	425a      	negs	r2, r3
 800bd36:	415a      	adcs	r2, r3
 800bd38:	602a      	str	r2, [r5, #0]
 800bd3a:	e7ee      	b.n	800bd1a <__swhatbuf_r+0x1e>
 800bd3c:	2340      	movs	r3, #64	; 0x40
 800bd3e:	2000      	movs	r0, #0
 800bd40:	6023      	str	r3, [r4, #0]
 800bd42:	b016      	add	sp, #88	; 0x58
 800bd44:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bd48 <__smakebuf_r>:
 800bd48:	898b      	ldrh	r3, [r1, #12]
 800bd4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd4c:	079d      	lsls	r5, r3, #30
 800bd4e:	4606      	mov	r6, r0
 800bd50:	460c      	mov	r4, r1
 800bd52:	d507      	bpl.n	800bd64 <__smakebuf_r+0x1c>
 800bd54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	6123      	str	r3, [r4, #16]
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	6163      	str	r3, [r4, #20]
 800bd60:	b002      	add	sp, #8
 800bd62:	bd70      	pop	{r4, r5, r6, pc}
 800bd64:	ab01      	add	r3, sp, #4
 800bd66:	466a      	mov	r2, sp
 800bd68:	f7ff ffc8 	bl	800bcfc <__swhatbuf_r>
 800bd6c:	9900      	ldr	r1, [sp, #0]
 800bd6e:	4605      	mov	r5, r0
 800bd70:	4630      	mov	r0, r6
 800bd72:	f7ff f957 	bl	800b024 <_malloc_r>
 800bd76:	b948      	cbnz	r0, 800bd8c <__smakebuf_r+0x44>
 800bd78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd7c:	059a      	lsls	r2, r3, #22
 800bd7e:	d4ef      	bmi.n	800bd60 <__smakebuf_r+0x18>
 800bd80:	f023 0303 	bic.w	r3, r3, #3
 800bd84:	f043 0302 	orr.w	r3, r3, #2
 800bd88:	81a3      	strh	r3, [r4, #12]
 800bd8a:	e7e3      	b.n	800bd54 <__smakebuf_r+0xc>
 800bd8c:	4b0d      	ldr	r3, [pc, #52]	; (800bdc4 <__smakebuf_r+0x7c>)
 800bd8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	6020      	str	r0, [r4, #0]
 800bd94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd98:	81a3      	strh	r3, [r4, #12]
 800bd9a:	9b00      	ldr	r3, [sp, #0]
 800bd9c:	6163      	str	r3, [r4, #20]
 800bd9e:	9b01      	ldr	r3, [sp, #4]
 800bda0:	6120      	str	r0, [r4, #16]
 800bda2:	b15b      	cbz	r3, 800bdbc <__smakebuf_r+0x74>
 800bda4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bda8:	4630      	mov	r0, r6
 800bdaa:	f000 f8d1 	bl	800bf50 <_isatty_r>
 800bdae:	b128      	cbz	r0, 800bdbc <__smakebuf_r+0x74>
 800bdb0:	89a3      	ldrh	r3, [r4, #12]
 800bdb2:	f023 0303 	bic.w	r3, r3, #3
 800bdb6:	f043 0301 	orr.w	r3, r3, #1
 800bdba:	81a3      	strh	r3, [r4, #12]
 800bdbc:	89a0      	ldrh	r0, [r4, #12]
 800bdbe:	4305      	orrs	r5, r0
 800bdc0:	81a5      	strh	r5, [r4, #12]
 800bdc2:	e7cd      	b.n	800bd60 <__smakebuf_r+0x18>
 800bdc4:	0800bb55 	.word	0x0800bb55

0800bdc8 <_malloc_usable_size_r>:
 800bdc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdcc:	1f18      	subs	r0, r3, #4
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	bfbc      	itt	lt
 800bdd2:	580b      	ldrlt	r3, [r1, r0]
 800bdd4:	18c0      	addlt	r0, r0, r3
 800bdd6:	4770      	bx	lr

0800bdd8 <_raise_r>:
 800bdd8:	291f      	cmp	r1, #31
 800bdda:	b538      	push	{r3, r4, r5, lr}
 800bddc:	4604      	mov	r4, r0
 800bdde:	460d      	mov	r5, r1
 800bde0:	d904      	bls.n	800bdec <_raise_r+0x14>
 800bde2:	2316      	movs	r3, #22
 800bde4:	6003      	str	r3, [r0, #0]
 800bde6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdea:	bd38      	pop	{r3, r4, r5, pc}
 800bdec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bdee:	b112      	cbz	r2, 800bdf6 <_raise_r+0x1e>
 800bdf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdf4:	b94b      	cbnz	r3, 800be0a <_raise_r+0x32>
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f000 f830 	bl	800be5c <_getpid_r>
 800bdfc:	462a      	mov	r2, r5
 800bdfe:	4601      	mov	r1, r0
 800be00:	4620      	mov	r0, r4
 800be02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be06:	f000 b817 	b.w	800be38 <_kill_r>
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d00a      	beq.n	800be24 <_raise_r+0x4c>
 800be0e:	1c59      	adds	r1, r3, #1
 800be10:	d103      	bne.n	800be1a <_raise_r+0x42>
 800be12:	2316      	movs	r3, #22
 800be14:	6003      	str	r3, [r0, #0]
 800be16:	2001      	movs	r0, #1
 800be18:	e7e7      	b.n	800bdea <_raise_r+0x12>
 800be1a:	2400      	movs	r4, #0
 800be1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be20:	4628      	mov	r0, r5
 800be22:	4798      	blx	r3
 800be24:	2000      	movs	r0, #0
 800be26:	e7e0      	b.n	800bdea <_raise_r+0x12>

0800be28 <raise>:
 800be28:	4b02      	ldr	r3, [pc, #8]	; (800be34 <raise+0xc>)
 800be2a:	4601      	mov	r1, r0
 800be2c:	6818      	ldr	r0, [r3, #0]
 800be2e:	f7ff bfd3 	b.w	800bdd8 <_raise_r>
 800be32:	bf00      	nop
 800be34:	20000024 	.word	0x20000024

0800be38 <_kill_r>:
 800be38:	b538      	push	{r3, r4, r5, lr}
 800be3a:	4d07      	ldr	r5, [pc, #28]	; (800be58 <_kill_r+0x20>)
 800be3c:	2300      	movs	r3, #0
 800be3e:	4604      	mov	r4, r0
 800be40:	4608      	mov	r0, r1
 800be42:	4611      	mov	r1, r2
 800be44:	602b      	str	r3, [r5, #0]
 800be46:	f7f6 f8cd 	bl	8001fe4 <_kill>
 800be4a:	1c43      	adds	r3, r0, #1
 800be4c:	d102      	bne.n	800be54 <_kill_r+0x1c>
 800be4e:	682b      	ldr	r3, [r5, #0]
 800be50:	b103      	cbz	r3, 800be54 <_kill_r+0x1c>
 800be52:	6023      	str	r3, [r4, #0]
 800be54:	bd38      	pop	{r3, r4, r5, pc}
 800be56:	bf00      	nop
 800be58:	200008a4 	.word	0x200008a4

0800be5c <_getpid_r>:
 800be5c:	f7f6 b8ba 	b.w	8001fd4 <_getpid>

0800be60 <__sread>:
 800be60:	b510      	push	{r4, lr}
 800be62:	460c      	mov	r4, r1
 800be64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be68:	f000 f894 	bl	800bf94 <_read_r>
 800be6c:	2800      	cmp	r0, #0
 800be6e:	bfab      	itete	ge
 800be70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be72:	89a3      	ldrhlt	r3, [r4, #12]
 800be74:	181b      	addge	r3, r3, r0
 800be76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be7a:	bfac      	ite	ge
 800be7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800be7e:	81a3      	strhlt	r3, [r4, #12]
 800be80:	bd10      	pop	{r4, pc}

0800be82 <__swrite>:
 800be82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be86:	461f      	mov	r7, r3
 800be88:	898b      	ldrh	r3, [r1, #12]
 800be8a:	05db      	lsls	r3, r3, #23
 800be8c:	4605      	mov	r5, r0
 800be8e:	460c      	mov	r4, r1
 800be90:	4616      	mov	r6, r2
 800be92:	d505      	bpl.n	800bea0 <__swrite+0x1e>
 800be94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be98:	2302      	movs	r3, #2
 800be9a:	2200      	movs	r2, #0
 800be9c:	f000 f868 	bl	800bf70 <_lseek_r>
 800bea0:	89a3      	ldrh	r3, [r4, #12]
 800bea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800beaa:	81a3      	strh	r3, [r4, #12]
 800beac:	4632      	mov	r2, r6
 800beae:	463b      	mov	r3, r7
 800beb0:	4628      	mov	r0, r5
 800beb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beb6:	f000 b817 	b.w	800bee8 <_write_r>

0800beba <__sseek>:
 800beba:	b510      	push	{r4, lr}
 800bebc:	460c      	mov	r4, r1
 800bebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec2:	f000 f855 	bl	800bf70 <_lseek_r>
 800bec6:	1c43      	adds	r3, r0, #1
 800bec8:	89a3      	ldrh	r3, [r4, #12]
 800beca:	bf15      	itete	ne
 800becc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bed6:	81a3      	strheq	r3, [r4, #12]
 800bed8:	bf18      	it	ne
 800beda:	81a3      	strhne	r3, [r4, #12]
 800bedc:	bd10      	pop	{r4, pc}

0800bede <__sclose>:
 800bede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee2:	f000 b813 	b.w	800bf0c <_close_r>
	...

0800bee8 <_write_r>:
 800bee8:	b538      	push	{r3, r4, r5, lr}
 800beea:	4d07      	ldr	r5, [pc, #28]	; (800bf08 <_write_r+0x20>)
 800beec:	4604      	mov	r4, r0
 800beee:	4608      	mov	r0, r1
 800bef0:	4611      	mov	r1, r2
 800bef2:	2200      	movs	r2, #0
 800bef4:	602a      	str	r2, [r5, #0]
 800bef6:	461a      	mov	r2, r3
 800bef8:	f7f6 f8ab 	bl	8002052 <_write>
 800befc:	1c43      	adds	r3, r0, #1
 800befe:	d102      	bne.n	800bf06 <_write_r+0x1e>
 800bf00:	682b      	ldr	r3, [r5, #0]
 800bf02:	b103      	cbz	r3, 800bf06 <_write_r+0x1e>
 800bf04:	6023      	str	r3, [r4, #0]
 800bf06:	bd38      	pop	{r3, r4, r5, pc}
 800bf08:	200008a4 	.word	0x200008a4

0800bf0c <_close_r>:
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	4d06      	ldr	r5, [pc, #24]	; (800bf28 <_close_r+0x1c>)
 800bf10:	2300      	movs	r3, #0
 800bf12:	4604      	mov	r4, r0
 800bf14:	4608      	mov	r0, r1
 800bf16:	602b      	str	r3, [r5, #0]
 800bf18:	f7f6 f8b7 	bl	800208a <_close>
 800bf1c:	1c43      	adds	r3, r0, #1
 800bf1e:	d102      	bne.n	800bf26 <_close_r+0x1a>
 800bf20:	682b      	ldr	r3, [r5, #0]
 800bf22:	b103      	cbz	r3, 800bf26 <_close_r+0x1a>
 800bf24:	6023      	str	r3, [r4, #0]
 800bf26:	bd38      	pop	{r3, r4, r5, pc}
 800bf28:	200008a4 	.word	0x200008a4

0800bf2c <_fstat_r>:
 800bf2c:	b538      	push	{r3, r4, r5, lr}
 800bf2e:	4d07      	ldr	r5, [pc, #28]	; (800bf4c <_fstat_r+0x20>)
 800bf30:	2300      	movs	r3, #0
 800bf32:	4604      	mov	r4, r0
 800bf34:	4608      	mov	r0, r1
 800bf36:	4611      	mov	r1, r2
 800bf38:	602b      	str	r3, [r5, #0]
 800bf3a:	f7f6 f8b2 	bl	80020a2 <_fstat>
 800bf3e:	1c43      	adds	r3, r0, #1
 800bf40:	d102      	bne.n	800bf48 <_fstat_r+0x1c>
 800bf42:	682b      	ldr	r3, [r5, #0]
 800bf44:	b103      	cbz	r3, 800bf48 <_fstat_r+0x1c>
 800bf46:	6023      	str	r3, [r4, #0]
 800bf48:	bd38      	pop	{r3, r4, r5, pc}
 800bf4a:	bf00      	nop
 800bf4c:	200008a4 	.word	0x200008a4

0800bf50 <_isatty_r>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4d06      	ldr	r5, [pc, #24]	; (800bf6c <_isatty_r+0x1c>)
 800bf54:	2300      	movs	r3, #0
 800bf56:	4604      	mov	r4, r0
 800bf58:	4608      	mov	r0, r1
 800bf5a:	602b      	str	r3, [r5, #0]
 800bf5c:	f7f6 f8b1 	bl	80020c2 <_isatty>
 800bf60:	1c43      	adds	r3, r0, #1
 800bf62:	d102      	bne.n	800bf6a <_isatty_r+0x1a>
 800bf64:	682b      	ldr	r3, [r5, #0]
 800bf66:	b103      	cbz	r3, 800bf6a <_isatty_r+0x1a>
 800bf68:	6023      	str	r3, [r4, #0]
 800bf6a:	bd38      	pop	{r3, r4, r5, pc}
 800bf6c:	200008a4 	.word	0x200008a4

0800bf70 <_lseek_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	4d07      	ldr	r5, [pc, #28]	; (800bf90 <_lseek_r+0x20>)
 800bf74:	4604      	mov	r4, r0
 800bf76:	4608      	mov	r0, r1
 800bf78:	4611      	mov	r1, r2
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	602a      	str	r2, [r5, #0]
 800bf7e:	461a      	mov	r2, r3
 800bf80:	f7f6 f8aa 	bl	80020d8 <_lseek>
 800bf84:	1c43      	adds	r3, r0, #1
 800bf86:	d102      	bne.n	800bf8e <_lseek_r+0x1e>
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	b103      	cbz	r3, 800bf8e <_lseek_r+0x1e>
 800bf8c:	6023      	str	r3, [r4, #0]
 800bf8e:	bd38      	pop	{r3, r4, r5, pc}
 800bf90:	200008a4 	.word	0x200008a4

0800bf94 <_read_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	4d07      	ldr	r5, [pc, #28]	; (800bfb4 <_read_r+0x20>)
 800bf98:	4604      	mov	r4, r0
 800bf9a:	4608      	mov	r0, r1
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	602a      	str	r2, [r5, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	f7f6 f838 	bl	8002018 <_read>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d102      	bne.n	800bfb2 <_read_r+0x1e>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	b103      	cbz	r3, 800bfb2 <_read_r+0x1e>
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	200008a4 	.word	0x200008a4

0800bfb8 <_init>:
 800bfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfba:	bf00      	nop
 800bfbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfbe:	bc08      	pop	{r3}
 800bfc0:	469e      	mov	lr, r3
 800bfc2:	4770      	bx	lr

0800bfc4 <_fini>:
 800bfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc6:	bf00      	nop
 800bfc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfca:	bc08      	pop	{r3}
 800bfcc:	469e      	mov	lr, r3
 800bfce:	4770      	bx	lr
>>>>>>> Stashed changes
=======
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800768a:	2200      	movs	r2, #0
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff ffaa 	bl	80075e8 <FATFS_LinkDriverEx>
 8007694:	4603      	mov	r3, r0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <__errno>:
 80076a0:	4b01      	ldr	r3, [pc, #4]	; (80076a8 <__errno+0x8>)
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	20000024 	.word	0x20000024

080076ac <__libc_init_array>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	4d0d      	ldr	r5, [pc, #52]	; (80076e4 <__libc_init_array+0x38>)
 80076b0:	4c0d      	ldr	r4, [pc, #52]	; (80076e8 <__libc_init_array+0x3c>)
 80076b2:	1b64      	subs	r4, r4, r5
 80076b4:	10a4      	asrs	r4, r4, #2
 80076b6:	2600      	movs	r6, #0
 80076b8:	42a6      	cmp	r6, r4
 80076ba:	d109      	bne.n	80076d0 <__libc_init_array+0x24>
 80076bc:	4d0b      	ldr	r5, [pc, #44]	; (80076ec <__libc_init_array+0x40>)
 80076be:	4c0c      	ldr	r4, [pc, #48]	; (80076f0 <__libc_init_array+0x44>)
 80076c0:	f004 fb9e 	bl	800be00 <_init>
 80076c4:	1b64      	subs	r4, r4, r5
 80076c6:	10a4      	asrs	r4, r4, #2
 80076c8:	2600      	movs	r6, #0
 80076ca:	42a6      	cmp	r6, r4
 80076cc:	d105      	bne.n	80076da <__libc_init_array+0x2e>
 80076ce:	bd70      	pop	{r4, r5, r6, pc}
 80076d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d4:	4798      	blx	r3
 80076d6:	3601      	adds	r6, #1
 80076d8:	e7ee      	b.n	80076b8 <__libc_init_array+0xc>
 80076da:	f855 3b04 	ldr.w	r3, [r5], #4
 80076de:	4798      	blx	r3
 80076e0:	3601      	adds	r6, #1
 80076e2:	e7f2      	b.n	80076ca <__libc_init_array+0x1e>
 80076e4:	0800c34c 	.word	0x0800c34c
 80076e8:	0800c34c 	.word	0x0800c34c
 80076ec:	0800c34c 	.word	0x0800c34c
 80076f0:	0800c350 	.word	0x0800c350

080076f4 <memset>:
 80076f4:	4402      	add	r2, r0
 80076f6:	4603      	mov	r3, r0
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d100      	bne.n	80076fe <memset+0xa>
 80076fc:	4770      	bx	lr
 80076fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007702:	e7f9      	b.n	80076f8 <memset+0x4>

08007704 <__cvt>:
 8007704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007706:	ed2d 8b02 	vpush	{d8}
 800770a:	eeb0 8b40 	vmov.f64	d8, d0
 800770e:	b085      	sub	sp, #20
 8007710:	4617      	mov	r7, r2
 8007712:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007714:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007716:	ee18 2a90 	vmov	r2, s17
 800771a:	f025 0520 	bic.w	r5, r5, #32
 800771e:	2a00      	cmp	r2, #0
 8007720:	bfb6      	itet	lt
 8007722:	222d      	movlt	r2, #45	; 0x2d
 8007724:	2200      	movge	r2, #0
 8007726:	eeb1 8b40 	vneglt.f64	d8, d0
 800772a:	2d46      	cmp	r5, #70	; 0x46
 800772c:	460c      	mov	r4, r1
 800772e:	701a      	strb	r2, [r3, #0]
 8007730:	d004      	beq.n	800773c <__cvt+0x38>
 8007732:	2d45      	cmp	r5, #69	; 0x45
 8007734:	d100      	bne.n	8007738 <__cvt+0x34>
 8007736:	3401      	adds	r4, #1
 8007738:	2102      	movs	r1, #2
 800773a:	e000      	b.n	800773e <__cvt+0x3a>
 800773c:	2103      	movs	r1, #3
 800773e:	ab03      	add	r3, sp, #12
 8007740:	9301      	str	r3, [sp, #4]
 8007742:	ab02      	add	r3, sp, #8
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	4622      	mov	r2, r4
 8007748:	4633      	mov	r3, r6
 800774a:	eeb0 0b48 	vmov.f64	d0, d8
 800774e:	f001 fd43 	bl	80091d8 <_dtoa_r>
 8007752:	2d47      	cmp	r5, #71	; 0x47
 8007754:	d101      	bne.n	800775a <__cvt+0x56>
 8007756:	07fb      	lsls	r3, r7, #31
 8007758:	d51a      	bpl.n	8007790 <__cvt+0x8c>
 800775a:	2d46      	cmp	r5, #70	; 0x46
 800775c:	eb00 0204 	add.w	r2, r0, r4
 8007760:	d10c      	bne.n	800777c <__cvt+0x78>
 8007762:	7803      	ldrb	r3, [r0, #0]
 8007764:	2b30      	cmp	r3, #48	; 0x30
 8007766:	d107      	bne.n	8007778 <__cvt+0x74>
 8007768:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800776c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007770:	bf1c      	itt	ne
 8007772:	f1c4 0401 	rsbne	r4, r4, #1
 8007776:	6034      	strne	r4, [r6, #0]
 8007778:	6833      	ldr	r3, [r6, #0]
 800777a:	441a      	add	r2, r3
 800777c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007784:	bf08      	it	eq
 8007786:	9203      	streq	r2, [sp, #12]
 8007788:	2130      	movs	r1, #48	; 0x30
 800778a:	9b03      	ldr	r3, [sp, #12]
 800778c:	4293      	cmp	r3, r2
 800778e:	d307      	bcc.n	80077a0 <__cvt+0x9c>
 8007790:	9b03      	ldr	r3, [sp, #12]
 8007792:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007794:	1a1b      	subs	r3, r3, r0
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	b005      	add	sp, #20
 800779a:	ecbd 8b02 	vpop	{d8}
 800779e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077a0:	1c5c      	adds	r4, r3, #1
 80077a2:	9403      	str	r4, [sp, #12]
 80077a4:	7019      	strb	r1, [r3, #0]
 80077a6:	e7f0      	b.n	800778a <__cvt+0x86>

080077a8 <__exponent>:
 80077a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077aa:	4603      	mov	r3, r0
 80077ac:	2900      	cmp	r1, #0
 80077ae:	bfb8      	it	lt
 80077b0:	4249      	neglt	r1, r1
 80077b2:	f803 2b02 	strb.w	r2, [r3], #2
 80077b6:	bfb4      	ite	lt
 80077b8:	222d      	movlt	r2, #45	; 0x2d
 80077ba:	222b      	movge	r2, #43	; 0x2b
 80077bc:	2909      	cmp	r1, #9
 80077be:	7042      	strb	r2, [r0, #1]
 80077c0:	dd2a      	ble.n	8007818 <__exponent+0x70>
 80077c2:	f10d 0407 	add.w	r4, sp, #7
 80077c6:	46a4      	mov	ip, r4
 80077c8:	270a      	movs	r7, #10
 80077ca:	46a6      	mov	lr, r4
 80077cc:	460a      	mov	r2, r1
 80077ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80077d2:	fb07 1516 	mls	r5, r7, r6, r1
 80077d6:	3530      	adds	r5, #48	; 0x30
 80077d8:	2a63      	cmp	r2, #99	; 0x63
 80077da:	f104 34ff 	add.w	r4, r4, #4294967295
 80077de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80077e2:	4631      	mov	r1, r6
 80077e4:	dcf1      	bgt.n	80077ca <__exponent+0x22>
 80077e6:	3130      	adds	r1, #48	; 0x30
 80077e8:	f1ae 0502 	sub.w	r5, lr, #2
 80077ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077f0:	1c44      	adds	r4, r0, #1
 80077f2:	4629      	mov	r1, r5
 80077f4:	4561      	cmp	r1, ip
 80077f6:	d30a      	bcc.n	800780e <__exponent+0x66>
 80077f8:	f10d 0209 	add.w	r2, sp, #9
 80077fc:	eba2 020e 	sub.w	r2, r2, lr
 8007800:	4565      	cmp	r5, ip
 8007802:	bf88      	it	hi
 8007804:	2200      	movhi	r2, #0
 8007806:	4413      	add	r3, r2
 8007808:	1a18      	subs	r0, r3, r0
 800780a:	b003      	add	sp, #12
 800780c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800780e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007812:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007816:	e7ed      	b.n	80077f4 <__exponent+0x4c>
 8007818:	2330      	movs	r3, #48	; 0x30
 800781a:	3130      	adds	r1, #48	; 0x30
 800781c:	7083      	strb	r3, [r0, #2]
 800781e:	70c1      	strb	r1, [r0, #3]
 8007820:	1d03      	adds	r3, r0, #4
 8007822:	e7f1      	b.n	8007808 <__exponent+0x60>
 8007824:	0000      	movs	r0, r0
	...

08007828 <_printf_float>:
 8007828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	b08b      	sub	sp, #44	; 0x2c
 800782e:	460c      	mov	r4, r1
 8007830:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007834:	4616      	mov	r6, r2
 8007836:	461f      	mov	r7, r3
 8007838:	4605      	mov	r5, r0
 800783a:	f002 fdab 	bl	800a394 <_localeconv_r>
 800783e:	f8d0 b000 	ldr.w	fp, [r0]
 8007842:	4658      	mov	r0, fp
 8007844:	f7f8 fcfc 	bl	8000240 <strlen>
 8007848:	2300      	movs	r3, #0
 800784a:	9308      	str	r3, [sp, #32]
 800784c:	f8d8 3000 	ldr.w	r3, [r8]
 8007850:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007854:	6822      	ldr	r2, [r4, #0]
 8007856:	3307      	adds	r3, #7
 8007858:	f023 0307 	bic.w	r3, r3, #7
 800785c:	f103 0108 	add.w	r1, r3, #8
 8007860:	f8c8 1000 	str.w	r1, [r8]
 8007864:	4682      	mov	sl, r0
 8007866:	e9d3 0100 	ldrd	r0, r1, [r3]
 800786a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800786e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007ad0 <_printf_float+0x2a8>
 8007872:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007876:	eeb0 6bc0 	vabs.f64	d6, d0
 800787a:	eeb4 6b47 	vcmp.f64	d6, d7
 800787e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007882:	dd24      	ble.n	80078ce <_printf_float+0xa6>
 8007884:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800788c:	d502      	bpl.n	8007894 <_printf_float+0x6c>
 800788e:	232d      	movs	r3, #45	; 0x2d
 8007890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007894:	4b90      	ldr	r3, [pc, #576]	; (8007ad8 <_printf_float+0x2b0>)
 8007896:	4891      	ldr	r0, [pc, #580]	; (8007adc <_printf_float+0x2b4>)
 8007898:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800789c:	bf94      	ite	ls
 800789e:	4698      	movls	r8, r3
 80078a0:	4680      	movhi	r8, r0
 80078a2:	2303      	movs	r3, #3
 80078a4:	6123      	str	r3, [r4, #16]
 80078a6:	f022 0204 	bic.w	r2, r2, #4
 80078aa:	2300      	movs	r3, #0
 80078ac:	6022      	str	r2, [r4, #0]
 80078ae:	9304      	str	r3, [sp, #16]
 80078b0:	9700      	str	r7, [sp, #0]
 80078b2:	4633      	mov	r3, r6
 80078b4:	aa09      	add	r2, sp, #36	; 0x24
 80078b6:	4621      	mov	r1, r4
 80078b8:	4628      	mov	r0, r5
 80078ba:	f000 f9d3 	bl	8007c64 <_printf_common>
 80078be:	3001      	adds	r0, #1
 80078c0:	f040 808a 	bne.w	80079d8 <_printf_float+0x1b0>
 80078c4:	f04f 30ff 	mov.w	r0, #4294967295
 80078c8:	b00b      	add	sp, #44	; 0x2c
 80078ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ce:	eeb4 0b40 	vcmp.f64	d0, d0
 80078d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d6:	d709      	bvc.n	80078ec <_printf_float+0xc4>
 80078d8:	ee10 3a90 	vmov	r3, s1
 80078dc:	2b00      	cmp	r3, #0
 80078de:	bfbc      	itt	lt
 80078e0:	232d      	movlt	r3, #45	; 0x2d
 80078e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078e6:	487e      	ldr	r0, [pc, #504]	; (8007ae0 <_printf_float+0x2b8>)
 80078e8:	4b7e      	ldr	r3, [pc, #504]	; (8007ae4 <_printf_float+0x2bc>)
 80078ea:	e7d5      	b.n	8007898 <_printf_float+0x70>
 80078ec:	6863      	ldr	r3, [r4, #4]
 80078ee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80078f2:	9104      	str	r1, [sp, #16]
 80078f4:	1c59      	adds	r1, r3, #1
 80078f6:	d13c      	bne.n	8007972 <_printf_float+0x14a>
 80078f8:	2306      	movs	r3, #6
 80078fa:	6063      	str	r3, [r4, #4]
 80078fc:	2300      	movs	r3, #0
 80078fe:	9303      	str	r3, [sp, #12]
 8007900:	ab08      	add	r3, sp, #32
 8007902:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007906:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800790a:	ab07      	add	r3, sp, #28
 800790c:	6861      	ldr	r1, [r4, #4]
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	6022      	str	r2, [r4, #0]
 8007912:	f10d 031b 	add.w	r3, sp, #27
 8007916:	4628      	mov	r0, r5
 8007918:	f7ff fef4 	bl	8007704 <__cvt>
 800791c:	9b04      	ldr	r3, [sp, #16]
 800791e:	9907      	ldr	r1, [sp, #28]
 8007920:	2b47      	cmp	r3, #71	; 0x47
 8007922:	4680      	mov	r8, r0
 8007924:	d108      	bne.n	8007938 <_printf_float+0x110>
 8007926:	1cc8      	adds	r0, r1, #3
 8007928:	db02      	blt.n	8007930 <_printf_float+0x108>
 800792a:	6863      	ldr	r3, [r4, #4]
 800792c:	4299      	cmp	r1, r3
 800792e:	dd41      	ble.n	80079b4 <_printf_float+0x18c>
 8007930:	f1a9 0902 	sub.w	r9, r9, #2
 8007934:	fa5f f989 	uxtb.w	r9, r9
 8007938:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800793c:	d820      	bhi.n	8007980 <_printf_float+0x158>
 800793e:	3901      	subs	r1, #1
 8007940:	464a      	mov	r2, r9
 8007942:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007946:	9107      	str	r1, [sp, #28]
 8007948:	f7ff ff2e 	bl	80077a8 <__exponent>
 800794c:	9a08      	ldr	r2, [sp, #32]
 800794e:	9004      	str	r0, [sp, #16]
 8007950:	1813      	adds	r3, r2, r0
 8007952:	2a01      	cmp	r2, #1
 8007954:	6123      	str	r3, [r4, #16]
 8007956:	dc02      	bgt.n	800795e <_printf_float+0x136>
 8007958:	6822      	ldr	r2, [r4, #0]
 800795a:	07d2      	lsls	r2, r2, #31
 800795c:	d501      	bpl.n	8007962 <_printf_float+0x13a>
 800795e:	3301      	adds	r3, #1
 8007960:	6123      	str	r3, [r4, #16]
 8007962:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0a2      	beq.n	80078b0 <_printf_float+0x88>
 800796a:	232d      	movs	r3, #45	; 0x2d
 800796c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007970:	e79e      	b.n	80078b0 <_printf_float+0x88>
 8007972:	9904      	ldr	r1, [sp, #16]
 8007974:	2947      	cmp	r1, #71	; 0x47
 8007976:	d1c1      	bne.n	80078fc <_printf_float+0xd4>
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1bf      	bne.n	80078fc <_printf_float+0xd4>
 800797c:	2301      	movs	r3, #1
 800797e:	e7bc      	b.n	80078fa <_printf_float+0xd2>
 8007980:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007984:	d118      	bne.n	80079b8 <_printf_float+0x190>
 8007986:	2900      	cmp	r1, #0
 8007988:	6863      	ldr	r3, [r4, #4]
 800798a:	dd0b      	ble.n	80079a4 <_printf_float+0x17c>
 800798c:	6121      	str	r1, [r4, #16]
 800798e:	b913      	cbnz	r3, 8007996 <_printf_float+0x16e>
 8007990:	6822      	ldr	r2, [r4, #0]
 8007992:	07d0      	lsls	r0, r2, #31
 8007994:	d502      	bpl.n	800799c <_printf_float+0x174>
 8007996:	3301      	adds	r3, #1
 8007998:	440b      	add	r3, r1
 800799a:	6123      	str	r3, [r4, #16]
 800799c:	2300      	movs	r3, #0
 800799e:	65a1      	str	r1, [r4, #88]	; 0x58
 80079a0:	9304      	str	r3, [sp, #16]
 80079a2:	e7de      	b.n	8007962 <_printf_float+0x13a>
 80079a4:	b913      	cbnz	r3, 80079ac <_printf_float+0x184>
 80079a6:	6822      	ldr	r2, [r4, #0]
 80079a8:	07d2      	lsls	r2, r2, #31
 80079aa:	d501      	bpl.n	80079b0 <_printf_float+0x188>
 80079ac:	3302      	adds	r3, #2
 80079ae:	e7f4      	b.n	800799a <_printf_float+0x172>
 80079b0:	2301      	movs	r3, #1
 80079b2:	e7f2      	b.n	800799a <_printf_float+0x172>
 80079b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80079b8:	9b08      	ldr	r3, [sp, #32]
 80079ba:	4299      	cmp	r1, r3
 80079bc:	db05      	blt.n	80079ca <_printf_float+0x1a2>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	6121      	str	r1, [r4, #16]
 80079c2:	07d8      	lsls	r0, r3, #31
 80079c4:	d5ea      	bpl.n	800799c <_printf_float+0x174>
 80079c6:	1c4b      	adds	r3, r1, #1
 80079c8:	e7e7      	b.n	800799a <_printf_float+0x172>
 80079ca:	2900      	cmp	r1, #0
 80079cc:	bfd4      	ite	le
 80079ce:	f1c1 0202 	rsble	r2, r1, #2
 80079d2:	2201      	movgt	r2, #1
 80079d4:	4413      	add	r3, r2
 80079d6:	e7e0      	b.n	800799a <_printf_float+0x172>
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	055a      	lsls	r2, r3, #21
 80079dc:	d407      	bmi.n	80079ee <_printf_float+0x1c6>
 80079de:	6923      	ldr	r3, [r4, #16]
 80079e0:	4642      	mov	r2, r8
 80079e2:	4631      	mov	r1, r6
 80079e4:	4628      	mov	r0, r5
 80079e6:	47b8      	blx	r7
 80079e8:	3001      	adds	r0, #1
 80079ea:	d12a      	bne.n	8007a42 <_printf_float+0x21a>
 80079ec:	e76a      	b.n	80078c4 <_printf_float+0x9c>
 80079ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80079f2:	f240 80e2 	bls.w	8007bba <_printf_float+0x392>
 80079f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80079fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80079fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a02:	d133      	bne.n	8007a6c <_printf_float+0x244>
 8007a04:	4a38      	ldr	r2, [pc, #224]	; (8007ae8 <_printf_float+0x2c0>)
 8007a06:	2301      	movs	r3, #1
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	47b8      	blx	r7
 8007a0e:	3001      	adds	r0, #1
 8007a10:	f43f af58 	beq.w	80078c4 <_printf_float+0x9c>
 8007a14:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	db02      	blt.n	8007a22 <_printf_float+0x1fa>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	07d8      	lsls	r0, r3, #31
 8007a20:	d50f      	bpl.n	8007a42 <_printf_float+0x21a>
 8007a22:	4653      	mov	r3, sl
 8007a24:	465a      	mov	r2, fp
 8007a26:	4631      	mov	r1, r6
 8007a28:	4628      	mov	r0, r5
 8007a2a:	47b8      	blx	r7
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	f43f af49 	beq.w	80078c4 <_printf_float+0x9c>
 8007a32:	f04f 0800 	mov.w	r8, #0
 8007a36:	f104 091a 	add.w	r9, r4, #26
 8007a3a:	9b08      	ldr	r3, [sp, #32]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	4543      	cmp	r3, r8
 8007a40:	dc09      	bgt.n	8007a56 <_printf_float+0x22e>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	079b      	lsls	r3, r3, #30
 8007a46:	f100 8108 	bmi.w	8007c5a <_printf_float+0x432>
 8007a4a:	68e0      	ldr	r0, [r4, #12]
 8007a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a4e:	4298      	cmp	r0, r3
 8007a50:	bfb8      	it	lt
 8007a52:	4618      	movlt	r0, r3
 8007a54:	e738      	b.n	80078c8 <_printf_float+0xa0>
 8007a56:	2301      	movs	r3, #1
 8007a58:	464a      	mov	r2, r9
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b8      	blx	r7
 8007a60:	3001      	adds	r0, #1
 8007a62:	f43f af2f 	beq.w	80078c4 <_printf_float+0x9c>
 8007a66:	f108 0801 	add.w	r8, r8, #1
 8007a6a:	e7e6      	b.n	8007a3a <_printf_float+0x212>
 8007a6c:	9b07      	ldr	r3, [sp, #28]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	dc3c      	bgt.n	8007aec <_printf_float+0x2c4>
 8007a72:	4a1d      	ldr	r2, [pc, #116]	; (8007ae8 <_printf_float+0x2c0>)
 8007a74:	2301      	movs	r3, #1
 8007a76:	4631      	mov	r1, r6
 8007a78:	4628      	mov	r0, r5
 8007a7a:	47b8      	blx	r7
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	f43f af21 	beq.w	80078c4 <_printf_float+0x9c>
 8007a82:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	d102      	bne.n	8007a90 <_printf_float+0x268>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	07d9      	lsls	r1, r3, #31
 8007a8e:	d5d8      	bpl.n	8007a42 <_printf_float+0x21a>
 8007a90:	4653      	mov	r3, sl
 8007a92:	465a      	mov	r2, fp
 8007a94:	4631      	mov	r1, r6
 8007a96:	4628      	mov	r0, r5
 8007a98:	47b8      	blx	r7
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	f43f af12 	beq.w	80078c4 <_printf_float+0x9c>
 8007aa0:	f04f 0900 	mov.w	r9, #0
 8007aa4:	f104 0a1a 	add.w	sl, r4, #26
 8007aa8:	9b07      	ldr	r3, [sp, #28]
 8007aaa:	425b      	negs	r3, r3
 8007aac:	454b      	cmp	r3, r9
 8007aae:	dc01      	bgt.n	8007ab4 <_printf_float+0x28c>
 8007ab0:	9b08      	ldr	r3, [sp, #32]
 8007ab2:	e795      	b.n	80079e0 <_printf_float+0x1b8>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	4652      	mov	r2, sl
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b8      	blx	r7
 8007abe:	3001      	adds	r0, #1
 8007ac0:	f43f af00 	beq.w	80078c4 <_printf_float+0x9c>
 8007ac4:	f109 0901 	add.w	r9, r9, #1
 8007ac8:	e7ee      	b.n	8007aa8 <_printf_float+0x280>
 8007aca:	bf00      	nop
 8007acc:	f3af 8000 	nop.w
 8007ad0:	ffffffff 	.word	0xffffffff
 8007ad4:	7fefffff 	.word	0x7fefffff
 8007ad8:	0800bea0 	.word	0x0800bea0
 8007adc:	0800bea4 	.word	0x0800bea4
 8007ae0:	0800beac 	.word	0x0800beac
 8007ae4:	0800bea8 	.word	0x0800bea8
 8007ae8:	0800beb0 	.word	0x0800beb0
 8007aec:	9a08      	ldr	r2, [sp, #32]
 8007aee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007af0:	429a      	cmp	r2, r3
 8007af2:	bfa8      	it	ge
 8007af4:	461a      	movge	r2, r3
 8007af6:	2a00      	cmp	r2, #0
 8007af8:	4691      	mov	r9, r2
 8007afa:	dc38      	bgt.n	8007b6e <_printf_float+0x346>
 8007afc:	2300      	movs	r3, #0
 8007afe:	9305      	str	r3, [sp, #20]
 8007b00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b04:	f104 021a 	add.w	r2, r4, #26
 8007b08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b0a:	9905      	ldr	r1, [sp, #20]
 8007b0c:	9304      	str	r3, [sp, #16]
 8007b0e:	eba3 0309 	sub.w	r3, r3, r9
 8007b12:	428b      	cmp	r3, r1
 8007b14:	dc33      	bgt.n	8007b7e <_printf_float+0x356>
 8007b16:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	db3c      	blt.n	8007b98 <_printf_float+0x370>
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	07da      	lsls	r2, r3, #31
 8007b22:	d439      	bmi.n	8007b98 <_printf_float+0x370>
 8007b24:	9b08      	ldr	r3, [sp, #32]
 8007b26:	9a04      	ldr	r2, [sp, #16]
 8007b28:	9907      	ldr	r1, [sp, #28]
 8007b2a:	1a9a      	subs	r2, r3, r2
 8007b2c:	eba3 0901 	sub.w	r9, r3, r1
 8007b30:	4591      	cmp	r9, r2
 8007b32:	bfa8      	it	ge
 8007b34:	4691      	movge	r9, r2
 8007b36:	f1b9 0f00 	cmp.w	r9, #0
 8007b3a:	dc35      	bgt.n	8007ba8 <_printf_float+0x380>
 8007b3c:	f04f 0800 	mov.w	r8, #0
 8007b40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b44:	f104 0a1a 	add.w	sl, r4, #26
 8007b48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007b4c:	1a9b      	subs	r3, r3, r2
 8007b4e:	eba3 0309 	sub.w	r3, r3, r9
 8007b52:	4543      	cmp	r3, r8
 8007b54:	f77f af75 	ble.w	8007a42 <_printf_float+0x21a>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	4652      	mov	r2, sl
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	4628      	mov	r0, r5
 8007b60:	47b8      	blx	r7
 8007b62:	3001      	adds	r0, #1
 8007b64:	f43f aeae 	beq.w	80078c4 <_printf_float+0x9c>
 8007b68:	f108 0801 	add.w	r8, r8, #1
 8007b6c:	e7ec      	b.n	8007b48 <_printf_float+0x320>
 8007b6e:	4613      	mov	r3, r2
 8007b70:	4631      	mov	r1, r6
 8007b72:	4642      	mov	r2, r8
 8007b74:	4628      	mov	r0, r5
 8007b76:	47b8      	blx	r7
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d1bf      	bne.n	8007afc <_printf_float+0x2d4>
 8007b7c:	e6a2      	b.n	80078c4 <_printf_float+0x9c>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	4631      	mov	r1, r6
 8007b82:	4628      	mov	r0, r5
 8007b84:	9204      	str	r2, [sp, #16]
 8007b86:	47b8      	blx	r7
 8007b88:	3001      	adds	r0, #1
 8007b8a:	f43f ae9b 	beq.w	80078c4 <_printf_float+0x9c>
 8007b8e:	9b05      	ldr	r3, [sp, #20]
 8007b90:	9a04      	ldr	r2, [sp, #16]
 8007b92:	3301      	adds	r3, #1
 8007b94:	9305      	str	r3, [sp, #20]
 8007b96:	e7b7      	b.n	8007b08 <_printf_float+0x2e0>
 8007b98:	4653      	mov	r3, sl
 8007b9a:	465a      	mov	r2, fp
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	47b8      	blx	r7
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	d1be      	bne.n	8007b24 <_printf_float+0x2fc>
 8007ba6:	e68d      	b.n	80078c4 <_printf_float+0x9c>
 8007ba8:	9a04      	ldr	r2, [sp, #16]
 8007baa:	464b      	mov	r3, r9
 8007bac:	4442      	add	r2, r8
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	47b8      	blx	r7
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	d1c1      	bne.n	8007b3c <_printf_float+0x314>
 8007bb8:	e684      	b.n	80078c4 <_printf_float+0x9c>
 8007bba:	9a08      	ldr	r2, [sp, #32]
 8007bbc:	2a01      	cmp	r2, #1
 8007bbe:	dc01      	bgt.n	8007bc4 <_printf_float+0x39c>
 8007bc0:	07db      	lsls	r3, r3, #31
 8007bc2:	d537      	bpl.n	8007c34 <_printf_float+0x40c>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	4642      	mov	r2, r8
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4628      	mov	r0, r5
 8007bcc:	47b8      	blx	r7
 8007bce:	3001      	adds	r0, #1
 8007bd0:	f43f ae78 	beq.w	80078c4 <_printf_float+0x9c>
 8007bd4:	4653      	mov	r3, sl
 8007bd6:	465a      	mov	r2, fp
 8007bd8:	4631      	mov	r1, r6
 8007bda:	4628      	mov	r0, r5
 8007bdc:	47b8      	blx	r7
 8007bde:	3001      	adds	r0, #1
 8007be0:	f43f ae70 	beq.w	80078c4 <_printf_float+0x9c>
 8007be4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007be8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf0:	d01b      	beq.n	8007c2a <_printf_float+0x402>
 8007bf2:	9b08      	ldr	r3, [sp, #32]
 8007bf4:	f108 0201 	add.w	r2, r8, #1
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	47b8      	blx	r7
 8007c00:	3001      	adds	r0, #1
 8007c02:	d10e      	bne.n	8007c22 <_printf_float+0x3fa>
 8007c04:	e65e      	b.n	80078c4 <_printf_float+0x9c>
 8007c06:	2301      	movs	r3, #1
 8007c08:	464a      	mov	r2, r9
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	47b8      	blx	r7
 8007c10:	3001      	adds	r0, #1
 8007c12:	f43f ae57 	beq.w	80078c4 <_printf_float+0x9c>
 8007c16:	f108 0801 	add.w	r8, r8, #1
 8007c1a:	9b08      	ldr	r3, [sp, #32]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	4543      	cmp	r3, r8
 8007c20:	dcf1      	bgt.n	8007c06 <_printf_float+0x3de>
 8007c22:	9b04      	ldr	r3, [sp, #16]
 8007c24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c28:	e6db      	b.n	80079e2 <_printf_float+0x1ba>
 8007c2a:	f04f 0800 	mov.w	r8, #0
 8007c2e:	f104 091a 	add.w	r9, r4, #26
 8007c32:	e7f2      	b.n	8007c1a <_printf_float+0x3f2>
 8007c34:	2301      	movs	r3, #1
 8007c36:	4642      	mov	r2, r8
 8007c38:	e7df      	b.n	8007bfa <_printf_float+0x3d2>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	464a      	mov	r2, r9
 8007c3e:	4631      	mov	r1, r6
 8007c40:	4628      	mov	r0, r5
 8007c42:	47b8      	blx	r7
 8007c44:	3001      	adds	r0, #1
 8007c46:	f43f ae3d 	beq.w	80078c4 <_printf_float+0x9c>
 8007c4a:	f108 0801 	add.w	r8, r8, #1
 8007c4e:	68e3      	ldr	r3, [r4, #12]
 8007c50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c52:	1a5b      	subs	r3, r3, r1
 8007c54:	4543      	cmp	r3, r8
 8007c56:	dcf0      	bgt.n	8007c3a <_printf_float+0x412>
 8007c58:	e6f7      	b.n	8007a4a <_printf_float+0x222>
 8007c5a:	f04f 0800 	mov.w	r8, #0
 8007c5e:	f104 0919 	add.w	r9, r4, #25
 8007c62:	e7f4      	b.n	8007c4e <_printf_float+0x426>

08007c64 <_printf_common>:
 8007c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c68:	4616      	mov	r6, r2
 8007c6a:	4699      	mov	r9, r3
 8007c6c:	688a      	ldr	r2, [r1, #8]
 8007c6e:	690b      	ldr	r3, [r1, #16]
 8007c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c74:	4293      	cmp	r3, r2
 8007c76:	bfb8      	it	lt
 8007c78:	4613      	movlt	r3, r2
 8007c7a:	6033      	str	r3, [r6, #0]
 8007c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c80:	4607      	mov	r7, r0
 8007c82:	460c      	mov	r4, r1
 8007c84:	b10a      	cbz	r2, 8007c8a <_printf_common+0x26>
 8007c86:	3301      	adds	r3, #1
 8007c88:	6033      	str	r3, [r6, #0]
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	0699      	lsls	r1, r3, #26
 8007c8e:	bf42      	ittt	mi
 8007c90:	6833      	ldrmi	r3, [r6, #0]
 8007c92:	3302      	addmi	r3, #2
 8007c94:	6033      	strmi	r3, [r6, #0]
 8007c96:	6825      	ldr	r5, [r4, #0]
 8007c98:	f015 0506 	ands.w	r5, r5, #6
 8007c9c:	d106      	bne.n	8007cac <_printf_common+0x48>
 8007c9e:	f104 0a19 	add.w	sl, r4, #25
 8007ca2:	68e3      	ldr	r3, [r4, #12]
 8007ca4:	6832      	ldr	r2, [r6, #0]
 8007ca6:	1a9b      	subs	r3, r3, r2
 8007ca8:	42ab      	cmp	r3, r5
 8007caa:	dc26      	bgt.n	8007cfa <_printf_common+0x96>
 8007cac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cb0:	1e13      	subs	r3, r2, #0
 8007cb2:	6822      	ldr	r2, [r4, #0]
 8007cb4:	bf18      	it	ne
 8007cb6:	2301      	movne	r3, #1
 8007cb8:	0692      	lsls	r2, r2, #26
 8007cba:	d42b      	bmi.n	8007d14 <_printf_common+0xb0>
 8007cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	47c0      	blx	r8
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	d01e      	beq.n	8007d08 <_printf_common+0xa4>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	68e5      	ldr	r5, [r4, #12]
 8007cce:	6832      	ldr	r2, [r6, #0]
 8007cd0:	f003 0306 	and.w	r3, r3, #6
 8007cd4:	2b04      	cmp	r3, #4
 8007cd6:	bf08      	it	eq
 8007cd8:	1aad      	subeq	r5, r5, r2
 8007cda:	68a3      	ldr	r3, [r4, #8]
 8007cdc:	6922      	ldr	r2, [r4, #16]
 8007cde:	bf0c      	ite	eq
 8007ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ce4:	2500      	movne	r5, #0
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	bfc4      	itt	gt
 8007cea:	1a9b      	subgt	r3, r3, r2
 8007cec:	18ed      	addgt	r5, r5, r3
 8007cee:	2600      	movs	r6, #0
 8007cf0:	341a      	adds	r4, #26
 8007cf2:	42b5      	cmp	r5, r6
 8007cf4:	d11a      	bne.n	8007d2c <_printf_common+0xc8>
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	e008      	b.n	8007d0c <_printf_common+0xa8>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	4652      	mov	r2, sl
 8007cfe:	4649      	mov	r1, r9
 8007d00:	4638      	mov	r0, r7
 8007d02:	47c0      	blx	r8
 8007d04:	3001      	adds	r0, #1
 8007d06:	d103      	bne.n	8007d10 <_printf_common+0xac>
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d10:	3501      	adds	r5, #1
 8007d12:	e7c6      	b.n	8007ca2 <_printf_common+0x3e>
 8007d14:	18e1      	adds	r1, r4, r3
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	2030      	movs	r0, #48	; 0x30
 8007d1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d1e:	4422      	add	r2, r4
 8007d20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d28:	3302      	adds	r3, #2
 8007d2a:	e7c7      	b.n	8007cbc <_printf_common+0x58>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	4622      	mov	r2, r4
 8007d30:	4649      	mov	r1, r9
 8007d32:	4638      	mov	r0, r7
 8007d34:	47c0      	blx	r8
 8007d36:	3001      	adds	r0, #1
 8007d38:	d0e6      	beq.n	8007d08 <_printf_common+0xa4>
 8007d3a:	3601      	adds	r6, #1
 8007d3c:	e7d9      	b.n	8007cf2 <_printf_common+0x8e>
	...

08007d40 <_printf_i>:
 8007d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d44:	7e0f      	ldrb	r7, [r1, #24]
 8007d46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d48:	2f78      	cmp	r7, #120	; 0x78
 8007d4a:	4691      	mov	r9, r2
 8007d4c:	4680      	mov	r8, r0
 8007d4e:	460c      	mov	r4, r1
 8007d50:	469a      	mov	sl, r3
 8007d52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d56:	d807      	bhi.n	8007d68 <_printf_i+0x28>
 8007d58:	2f62      	cmp	r7, #98	; 0x62
 8007d5a:	d80a      	bhi.n	8007d72 <_printf_i+0x32>
 8007d5c:	2f00      	cmp	r7, #0
 8007d5e:	f000 80d8 	beq.w	8007f12 <_printf_i+0x1d2>
 8007d62:	2f58      	cmp	r7, #88	; 0x58
 8007d64:	f000 80a3 	beq.w	8007eae <_printf_i+0x16e>
 8007d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d70:	e03a      	b.n	8007de8 <_printf_i+0xa8>
 8007d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d76:	2b15      	cmp	r3, #21
 8007d78:	d8f6      	bhi.n	8007d68 <_printf_i+0x28>
 8007d7a:	a101      	add	r1, pc, #4	; (adr r1, 8007d80 <_printf_i+0x40>)
 8007d7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d80:	08007dd9 	.word	0x08007dd9
 8007d84:	08007ded 	.word	0x08007ded
 8007d88:	08007d69 	.word	0x08007d69
 8007d8c:	08007d69 	.word	0x08007d69
 8007d90:	08007d69 	.word	0x08007d69
 8007d94:	08007d69 	.word	0x08007d69
 8007d98:	08007ded 	.word	0x08007ded
 8007d9c:	08007d69 	.word	0x08007d69
 8007da0:	08007d69 	.word	0x08007d69
 8007da4:	08007d69 	.word	0x08007d69
 8007da8:	08007d69 	.word	0x08007d69
 8007dac:	08007ef9 	.word	0x08007ef9
 8007db0:	08007e1d 	.word	0x08007e1d
 8007db4:	08007edb 	.word	0x08007edb
 8007db8:	08007d69 	.word	0x08007d69
 8007dbc:	08007d69 	.word	0x08007d69
 8007dc0:	08007f1b 	.word	0x08007f1b
 8007dc4:	08007d69 	.word	0x08007d69
 8007dc8:	08007e1d 	.word	0x08007e1d
 8007dcc:	08007d69 	.word	0x08007d69
 8007dd0:	08007d69 	.word	0x08007d69
 8007dd4:	08007ee3 	.word	0x08007ee3
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	1d1a      	adds	r2, r3, #4
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	602a      	str	r2, [r5, #0]
 8007de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007de8:	2301      	movs	r3, #1
 8007dea:	e0a3      	b.n	8007f34 <_printf_i+0x1f4>
 8007dec:	6820      	ldr	r0, [r4, #0]
 8007dee:	6829      	ldr	r1, [r5, #0]
 8007df0:	0606      	lsls	r6, r0, #24
 8007df2:	f101 0304 	add.w	r3, r1, #4
 8007df6:	d50a      	bpl.n	8007e0e <_printf_i+0xce>
 8007df8:	680e      	ldr	r6, [r1, #0]
 8007dfa:	602b      	str	r3, [r5, #0]
 8007dfc:	2e00      	cmp	r6, #0
 8007dfe:	da03      	bge.n	8007e08 <_printf_i+0xc8>
 8007e00:	232d      	movs	r3, #45	; 0x2d
 8007e02:	4276      	negs	r6, r6
 8007e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e08:	485e      	ldr	r0, [pc, #376]	; (8007f84 <_printf_i+0x244>)
 8007e0a:	230a      	movs	r3, #10
 8007e0c:	e019      	b.n	8007e42 <_printf_i+0x102>
 8007e0e:	680e      	ldr	r6, [r1, #0]
 8007e10:	602b      	str	r3, [r5, #0]
 8007e12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e16:	bf18      	it	ne
 8007e18:	b236      	sxthne	r6, r6
 8007e1a:	e7ef      	b.n	8007dfc <_printf_i+0xbc>
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	6820      	ldr	r0, [r4, #0]
 8007e20:	1d19      	adds	r1, r3, #4
 8007e22:	6029      	str	r1, [r5, #0]
 8007e24:	0601      	lsls	r1, r0, #24
 8007e26:	d501      	bpl.n	8007e2c <_printf_i+0xec>
 8007e28:	681e      	ldr	r6, [r3, #0]
 8007e2a:	e002      	b.n	8007e32 <_printf_i+0xf2>
 8007e2c:	0646      	lsls	r6, r0, #25
 8007e2e:	d5fb      	bpl.n	8007e28 <_printf_i+0xe8>
 8007e30:	881e      	ldrh	r6, [r3, #0]
 8007e32:	4854      	ldr	r0, [pc, #336]	; (8007f84 <_printf_i+0x244>)
 8007e34:	2f6f      	cmp	r7, #111	; 0x6f
 8007e36:	bf0c      	ite	eq
 8007e38:	2308      	moveq	r3, #8
 8007e3a:	230a      	movne	r3, #10
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e42:	6865      	ldr	r5, [r4, #4]
 8007e44:	60a5      	str	r5, [r4, #8]
 8007e46:	2d00      	cmp	r5, #0
 8007e48:	bfa2      	ittt	ge
 8007e4a:	6821      	ldrge	r1, [r4, #0]
 8007e4c:	f021 0104 	bicge.w	r1, r1, #4
 8007e50:	6021      	strge	r1, [r4, #0]
 8007e52:	b90e      	cbnz	r6, 8007e58 <_printf_i+0x118>
 8007e54:	2d00      	cmp	r5, #0
 8007e56:	d04d      	beq.n	8007ef4 <_printf_i+0x1b4>
 8007e58:	4615      	mov	r5, r2
 8007e5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e5e:	fb03 6711 	mls	r7, r3, r1, r6
 8007e62:	5dc7      	ldrb	r7, [r0, r7]
 8007e64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e68:	4637      	mov	r7, r6
 8007e6a:	42bb      	cmp	r3, r7
 8007e6c:	460e      	mov	r6, r1
 8007e6e:	d9f4      	bls.n	8007e5a <_printf_i+0x11a>
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	d10b      	bne.n	8007e8c <_printf_i+0x14c>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	07de      	lsls	r6, r3, #31
 8007e78:	d508      	bpl.n	8007e8c <_printf_i+0x14c>
 8007e7a:	6923      	ldr	r3, [r4, #16]
 8007e7c:	6861      	ldr	r1, [r4, #4]
 8007e7e:	4299      	cmp	r1, r3
 8007e80:	bfde      	ittt	le
 8007e82:	2330      	movle	r3, #48	; 0x30
 8007e84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e8c:	1b52      	subs	r2, r2, r5
 8007e8e:	6122      	str	r2, [r4, #16]
 8007e90:	f8cd a000 	str.w	sl, [sp]
 8007e94:	464b      	mov	r3, r9
 8007e96:	aa03      	add	r2, sp, #12
 8007e98:	4621      	mov	r1, r4
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	f7ff fee2 	bl	8007c64 <_printf_common>
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d14c      	bne.n	8007f3e <_printf_i+0x1fe>
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea8:	b004      	add	sp, #16
 8007eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eae:	4835      	ldr	r0, [pc, #212]	; (8007f84 <_printf_i+0x244>)
 8007eb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007eb4:	6829      	ldr	r1, [r5, #0]
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ebc:	6029      	str	r1, [r5, #0]
 8007ebe:	061d      	lsls	r5, r3, #24
 8007ec0:	d514      	bpl.n	8007eec <_printf_i+0x1ac>
 8007ec2:	07df      	lsls	r7, r3, #31
 8007ec4:	bf44      	itt	mi
 8007ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8007eca:	6023      	strmi	r3, [r4, #0]
 8007ecc:	b91e      	cbnz	r6, 8007ed6 <_printf_i+0x196>
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	f023 0320 	bic.w	r3, r3, #32
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	2310      	movs	r3, #16
 8007ed8:	e7b0      	b.n	8007e3c <_printf_i+0xfc>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	f043 0320 	orr.w	r3, r3, #32
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	2378      	movs	r3, #120	; 0x78
 8007ee4:	4828      	ldr	r0, [pc, #160]	; (8007f88 <_printf_i+0x248>)
 8007ee6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007eea:	e7e3      	b.n	8007eb4 <_printf_i+0x174>
 8007eec:	0659      	lsls	r1, r3, #25
 8007eee:	bf48      	it	mi
 8007ef0:	b2b6      	uxthmi	r6, r6
 8007ef2:	e7e6      	b.n	8007ec2 <_printf_i+0x182>
 8007ef4:	4615      	mov	r5, r2
 8007ef6:	e7bb      	b.n	8007e70 <_printf_i+0x130>
 8007ef8:	682b      	ldr	r3, [r5, #0]
 8007efa:	6826      	ldr	r6, [r4, #0]
 8007efc:	6961      	ldr	r1, [r4, #20]
 8007efe:	1d18      	adds	r0, r3, #4
 8007f00:	6028      	str	r0, [r5, #0]
 8007f02:	0635      	lsls	r5, r6, #24
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	d501      	bpl.n	8007f0c <_printf_i+0x1cc>
 8007f08:	6019      	str	r1, [r3, #0]
 8007f0a:	e002      	b.n	8007f12 <_printf_i+0x1d2>
 8007f0c:	0670      	lsls	r0, r6, #25
 8007f0e:	d5fb      	bpl.n	8007f08 <_printf_i+0x1c8>
 8007f10:	8019      	strh	r1, [r3, #0]
 8007f12:	2300      	movs	r3, #0
 8007f14:	6123      	str	r3, [r4, #16]
 8007f16:	4615      	mov	r5, r2
 8007f18:	e7ba      	b.n	8007e90 <_printf_i+0x150>
 8007f1a:	682b      	ldr	r3, [r5, #0]
 8007f1c:	1d1a      	adds	r2, r3, #4
 8007f1e:	602a      	str	r2, [r5, #0]
 8007f20:	681d      	ldr	r5, [r3, #0]
 8007f22:	6862      	ldr	r2, [r4, #4]
 8007f24:	2100      	movs	r1, #0
 8007f26:	4628      	mov	r0, r5
 8007f28:	f7f8 f992 	bl	8000250 <memchr>
 8007f2c:	b108      	cbz	r0, 8007f32 <_printf_i+0x1f2>
 8007f2e:	1b40      	subs	r0, r0, r5
 8007f30:	6060      	str	r0, [r4, #4]
 8007f32:	6863      	ldr	r3, [r4, #4]
 8007f34:	6123      	str	r3, [r4, #16]
 8007f36:	2300      	movs	r3, #0
 8007f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f3c:	e7a8      	b.n	8007e90 <_printf_i+0x150>
 8007f3e:	6923      	ldr	r3, [r4, #16]
 8007f40:	462a      	mov	r2, r5
 8007f42:	4649      	mov	r1, r9
 8007f44:	4640      	mov	r0, r8
 8007f46:	47d0      	blx	sl
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d0ab      	beq.n	8007ea4 <_printf_i+0x164>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	079b      	lsls	r3, r3, #30
 8007f50:	d413      	bmi.n	8007f7a <_printf_i+0x23a>
 8007f52:	68e0      	ldr	r0, [r4, #12]
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	4298      	cmp	r0, r3
 8007f58:	bfb8      	it	lt
 8007f5a:	4618      	movlt	r0, r3
 8007f5c:	e7a4      	b.n	8007ea8 <_printf_i+0x168>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	4632      	mov	r2, r6
 8007f62:	4649      	mov	r1, r9
 8007f64:	4640      	mov	r0, r8
 8007f66:	47d0      	blx	sl
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d09b      	beq.n	8007ea4 <_printf_i+0x164>
 8007f6c:	3501      	adds	r5, #1
 8007f6e:	68e3      	ldr	r3, [r4, #12]
 8007f70:	9903      	ldr	r1, [sp, #12]
 8007f72:	1a5b      	subs	r3, r3, r1
 8007f74:	42ab      	cmp	r3, r5
 8007f76:	dcf2      	bgt.n	8007f5e <_printf_i+0x21e>
 8007f78:	e7eb      	b.n	8007f52 <_printf_i+0x212>
 8007f7a:	2500      	movs	r5, #0
 8007f7c:	f104 0619 	add.w	r6, r4, #25
 8007f80:	e7f5      	b.n	8007f6e <_printf_i+0x22e>
 8007f82:	bf00      	nop
 8007f84:	0800beb2 	.word	0x0800beb2
 8007f88:	0800bec3 	.word	0x0800bec3

08007f8c <_scanf_float>:
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	b087      	sub	sp, #28
 8007f92:	4617      	mov	r7, r2
 8007f94:	9303      	str	r3, [sp, #12]
 8007f96:	688b      	ldr	r3, [r1, #8]
 8007f98:	1e5a      	subs	r2, r3, #1
 8007f9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007f9e:	bf83      	ittte	hi
 8007fa0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007fa4:	195b      	addhi	r3, r3, r5
 8007fa6:	9302      	strhi	r3, [sp, #8]
 8007fa8:	2300      	movls	r3, #0
 8007faa:	bf86      	itte	hi
 8007fac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007fb0:	608b      	strhi	r3, [r1, #8]
 8007fb2:	9302      	strls	r3, [sp, #8]
 8007fb4:	680b      	ldr	r3, [r1, #0]
 8007fb6:	468b      	mov	fp, r1
 8007fb8:	2500      	movs	r5, #0
 8007fba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007fbe:	f84b 3b1c 	str.w	r3, [fp], #28
 8007fc2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007fc6:	4680      	mov	r8, r0
 8007fc8:	460c      	mov	r4, r1
 8007fca:	465e      	mov	r6, fp
 8007fcc:	46aa      	mov	sl, r5
 8007fce:	46a9      	mov	r9, r5
 8007fd0:	9501      	str	r5, [sp, #4]
 8007fd2:	68a2      	ldr	r2, [r4, #8]
 8007fd4:	b152      	cbz	r2, 8007fec <_scanf_float+0x60>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b4e      	cmp	r3, #78	; 0x4e
 8007fdc:	d864      	bhi.n	80080a8 <_scanf_float+0x11c>
 8007fde:	2b40      	cmp	r3, #64	; 0x40
 8007fe0:	d83c      	bhi.n	800805c <_scanf_float+0xd0>
 8007fe2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007fe6:	b2c8      	uxtb	r0, r1
 8007fe8:	280e      	cmp	r0, #14
 8007fea:	d93a      	bls.n	8008062 <_scanf_float+0xd6>
 8007fec:	f1b9 0f00 	cmp.w	r9, #0
 8007ff0:	d003      	beq.n	8007ffa <_scanf_float+0x6e>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ffe:	f1ba 0f01 	cmp.w	sl, #1
 8008002:	f200 8113 	bhi.w	800822c <_scanf_float+0x2a0>
 8008006:	455e      	cmp	r6, fp
 8008008:	f200 8105 	bhi.w	8008216 <_scanf_float+0x28a>
 800800c:	2501      	movs	r5, #1
 800800e:	4628      	mov	r0, r5
 8008010:	b007      	add	sp, #28
 8008012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008016:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800801a:	2a0d      	cmp	r2, #13
 800801c:	d8e6      	bhi.n	8007fec <_scanf_float+0x60>
 800801e:	a101      	add	r1, pc, #4	; (adr r1, 8008024 <_scanf_float+0x98>)
 8008020:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008024:	08008163 	.word	0x08008163
 8008028:	08007fed 	.word	0x08007fed
 800802c:	08007fed 	.word	0x08007fed
 8008030:	08007fed 	.word	0x08007fed
 8008034:	080081c3 	.word	0x080081c3
 8008038:	0800819b 	.word	0x0800819b
 800803c:	08007fed 	.word	0x08007fed
 8008040:	08007fed 	.word	0x08007fed
 8008044:	08008171 	.word	0x08008171
 8008048:	08007fed 	.word	0x08007fed
 800804c:	08007fed 	.word	0x08007fed
 8008050:	08007fed 	.word	0x08007fed
 8008054:	08007fed 	.word	0x08007fed
 8008058:	08008129 	.word	0x08008129
 800805c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008060:	e7db      	b.n	800801a <_scanf_float+0x8e>
 8008062:	290e      	cmp	r1, #14
 8008064:	d8c2      	bhi.n	8007fec <_scanf_float+0x60>
 8008066:	a001      	add	r0, pc, #4	; (adr r0, 800806c <_scanf_float+0xe0>)
 8008068:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800806c:	0800811b 	.word	0x0800811b
 8008070:	08007fed 	.word	0x08007fed
 8008074:	0800811b 	.word	0x0800811b
 8008078:	080081af 	.word	0x080081af
 800807c:	08007fed 	.word	0x08007fed
 8008080:	080080c9 	.word	0x080080c9
 8008084:	08008105 	.word	0x08008105
 8008088:	08008105 	.word	0x08008105
 800808c:	08008105 	.word	0x08008105
 8008090:	08008105 	.word	0x08008105
 8008094:	08008105 	.word	0x08008105
 8008098:	08008105 	.word	0x08008105
 800809c:	08008105 	.word	0x08008105
 80080a0:	08008105 	.word	0x08008105
 80080a4:	08008105 	.word	0x08008105
 80080a8:	2b6e      	cmp	r3, #110	; 0x6e
 80080aa:	d809      	bhi.n	80080c0 <_scanf_float+0x134>
 80080ac:	2b60      	cmp	r3, #96	; 0x60
 80080ae:	d8b2      	bhi.n	8008016 <_scanf_float+0x8a>
 80080b0:	2b54      	cmp	r3, #84	; 0x54
 80080b2:	d077      	beq.n	80081a4 <_scanf_float+0x218>
 80080b4:	2b59      	cmp	r3, #89	; 0x59
 80080b6:	d199      	bne.n	8007fec <_scanf_float+0x60>
 80080b8:	2d07      	cmp	r5, #7
 80080ba:	d197      	bne.n	8007fec <_scanf_float+0x60>
 80080bc:	2508      	movs	r5, #8
 80080be:	e029      	b.n	8008114 <_scanf_float+0x188>
 80080c0:	2b74      	cmp	r3, #116	; 0x74
 80080c2:	d06f      	beq.n	80081a4 <_scanf_float+0x218>
 80080c4:	2b79      	cmp	r3, #121	; 0x79
 80080c6:	e7f6      	b.n	80080b6 <_scanf_float+0x12a>
 80080c8:	6821      	ldr	r1, [r4, #0]
 80080ca:	05c8      	lsls	r0, r1, #23
 80080cc:	d51a      	bpl.n	8008104 <_scanf_float+0x178>
 80080ce:	9b02      	ldr	r3, [sp, #8]
 80080d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80080d4:	6021      	str	r1, [r4, #0]
 80080d6:	f109 0901 	add.w	r9, r9, #1
 80080da:	b11b      	cbz	r3, 80080e4 <_scanf_float+0x158>
 80080dc:	3b01      	subs	r3, #1
 80080de:	3201      	adds	r2, #1
 80080e0:	9302      	str	r3, [sp, #8]
 80080e2:	60a2      	str	r2, [r4, #8]
 80080e4:	68a3      	ldr	r3, [r4, #8]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	60a3      	str	r3, [r4, #8]
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	3301      	adds	r3, #1
 80080ee:	6123      	str	r3, [r4, #16]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	607b      	str	r3, [r7, #4]
 80080f8:	f340 8084 	ble.w	8008204 <_scanf_float+0x278>
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	3301      	adds	r3, #1
 8008100:	603b      	str	r3, [r7, #0]
 8008102:	e766      	b.n	8007fd2 <_scanf_float+0x46>
 8008104:	eb1a 0f05 	cmn.w	sl, r5
 8008108:	f47f af70 	bne.w	8007fec <_scanf_float+0x60>
 800810c:	6822      	ldr	r2, [r4, #0]
 800810e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008112:	6022      	str	r2, [r4, #0]
 8008114:	f806 3b01 	strb.w	r3, [r6], #1
 8008118:	e7e4      	b.n	80080e4 <_scanf_float+0x158>
 800811a:	6822      	ldr	r2, [r4, #0]
 800811c:	0610      	lsls	r0, r2, #24
 800811e:	f57f af65 	bpl.w	8007fec <_scanf_float+0x60>
 8008122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008126:	e7f4      	b.n	8008112 <_scanf_float+0x186>
 8008128:	f1ba 0f00 	cmp.w	sl, #0
 800812c:	d10e      	bne.n	800814c <_scanf_float+0x1c0>
 800812e:	f1b9 0f00 	cmp.w	r9, #0
 8008132:	d10e      	bne.n	8008152 <_scanf_float+0x1c6>
 8008134:	6822      	ldr	r2, [r4, #0]
 8008136:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800813a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800813e:	d108      	bne.n	8008152 <_scanf_float+0x1c6>
 8008140:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008144:	6022      	str	r2, [r4, #0]
 8008146:	f04f 0a01 	mov.w	sl, #1
 800814a:	e7e3      	b.n	8008114 <_scanf_float+0x188>
 800814c:	f1ba 0f02 	cmp.w	sl, #2
 8008150:	d055      	beq.n	80081fe <_scanf_float+0x272>
 8008152:	2d01      	cmp	r5, #1
 8008154:	d002      	beq.n	800815c <_scanf_float+0x1d0>
 8008156:	2d04      	cmp	r5, #4
 8008158:	f47f af48 	bne.w	8007fec <_scanf_float+0x60>
 800815c:	3501      	adds	r5, #1
 800815e:	b2ed      	uxtb	r5, r5
 8008160:	e7d8      	b.n	8008114 <_scanf_float+0x188>
 8008162:	f1ba 0f01 	cmp.w	sl, #1
 8008166:	f47f af41 	bne.w	8007fec <_scanf_float+0x60>
 800816a:	f04f 0a02 	mov.w	sl, #2
 800816e:	e7d1      	b.n	8008114 <_scanf_float+0x188>
 8008170:	b97d      	cbnz	r5, 8008192 <_scanf_float+0x206>
 8008172:	f1b9 0f00 	cmp.w	r9, #0
 8008176:	f47f af3c 	bne.w	8007ff2 <_scanf_float+0x66>
 800817a:	6822      	ldr	r2, [r4, #0]
 800817c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008180:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008184:	f47f af39 	bne.w	8007ffa <_scanf_float+0x6e>
 8008188:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800818c:	6022      	str	r2, [r4, #0]
 800818e:	2501      	movs	r5, #1
 8008190:	e7c0      	b.n	8008114 <_scanf_float+0x188>
 8008192:	2d03      	cmp	r5, #3
 8008194:	d0e2      	beq.n	800815c <_scanf_float+0x1d0>
 8008196:	2d05      	cmp	r5, #5
 8008198:	e7de      	b.n	8008158 <_scanf_float+0x1cc>
 800819a:	2d02      	cmp	r5, #2
 800819c:	f47f af26 	bne.w	8007fec <_scanf_float+0x60>
 80081a0:	2503      	movs	r5, #3
 80081a2:	e7b7      	b.n	8008114 <_scanf_float+0x188>
 80081a4:	2d06      	cmp	r5, #6
 80081a6:	f47f af21 	bne.w	8007fec <_scanf_float+0x60>
 80081aa:	2507      	movs	r5, #7
 80081ac:	e7b2      	b.n	8008114 <_scanf_float+0x188>
 80081ae:	6822      	ldr	r2, [r4, #0]
 80081b0:	0591      	lsls	r1, r2, #22
 80081b2:	f57f af1b 	bpl.w	8007fec <_scanf_float+0x60>
 80081b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80081ba:	6022      	str	r2, [r4, #0]
 80081bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80081c0:	e7a8      	b.n	8008114 <_scanf_float+0x188>
 80081c2:	6822      	ldr	r2, [r4, #0]
 80081c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80081c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80081cc:	d006      	beq.n	80081dc <_scanf_float+0x250>
 80081ce:	0550      	lsls	r0, r2, #21
 80081d0:	f57f af0c 	bpl.w	8007fec <_scanf_float+0x60>
 80081d4:	f1b9 0f00 	cmp.w	r9, #0
 80081d8:	f43f af0f 	beq.w	8007ffa <_scanf_float+0x6e>
 80081dc:	0591      	lsls	r1, r2, #22
 80081de:	bf58      	it	pl
 80081e0:	9901      	ldrpl	r1, [sp, #4]
 80081e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80081e6:	bf58      	it	pl
 80081e8:	eba9 0101 	subpl.w	r1, r9, r1
 80081ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80081f0:	bf58      	it	pl
 80081f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80081f6:	6022      	str	r2, [r4, #0]
 80081f8:	f04f 0900 	mov.w	r9, #0
 80081fc:	e78a      	b.n	8008114 <_scanf_float+0x188>
 80081fe:	f04f 0a03 	mov.w	sl, #3
 8008202:	e787      	b.n	8008114 <_scanf_float+0x188>
 8008204:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008208:	4639      	mov	r1, r7
 800820a:	4640      	mov	r0, r8
 800820c:	4798      	blx	r3
 800820e:	2800      	cmp	r0, #0
 8008210:	f43f aedf 	beq.w	8007fd2 <_scanf_float+0x46>
 8008214:	e6ea      	b.n	8007fec <_scanf_float+0x60>
 8008216:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800821a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800821e:	463a      	mov	r2, r7
 8008220:	4640      	mov	r0, r8
 8008222:	4798      	blx	r3
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	3b01      	subs	r3, #1
 8008228:	6123      	str	r3, [r4, #16]
 800822a:	e6ec      	b.n	8008006 <_scanf_float+0x7a>
 800822c:	1e6b      	subs	r3, r5, #1
 800822e:	2b06      	cmp	r3, #6
 8008230:	d825      	bhi.n	800827e <_scanf_float+0x2f2>
 8008232:	2d02      	cmp	r5, #2
 8008234:	d836      	bhi.n	80082a4 <_scanf_float+0x318>
 8008236:	455e      	cmp	r6, fp
 8008238:	f67f aee8 	bls.w	800800c <_scanf_float+0x80>
 800823c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008240:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008244:	463a      	mov	r2, r7
 8008246:	4640      	mov	r0, r8
 8008248:	4798      	blx	r3
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	3b01      	subs	r3, #1
 800824e:	6123      	str	r3, [r4, #16]
 8008250:	e7f1      	b.n	8008236 <_scanf_float+0x2aa>
 8008252:	9802      	ldr	r0, [sp, #8]
 8008254:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008258:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800825c:	9002      	str	r0, [sp, #8]
 800825e:	463a      	mov	r2, r7
 8008260:	4640      	mov	r0, r8
 8008262:	4798      	blx	r3
 8008264:	6923      	ldr	r3, [r4, #16]
 8008266:	3b01      	subs	r3, #1
 8008268:	6123      	str	r3, [r4, #16]
 800826a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800826e:	fa5f fa8a 	uxtb.w	sl, sl
 8008272:	f1ba 0f02 	cmp.w	sl, #2
 8008276:	d1ec      	bne.n	8008252 <_scanf_float+0x2c6>
 8008278:	3d03      	subs	r5, #3
 800827a:	b2ed      	uxtb	r5, r5
 800827c:	1b76      	subs	r6, r6, r5
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	05da      	lsls	r2, r3, #23
 8008282:	d52f      	bpl.n	80082e4 <_scanf_float+0x358>
 8008284:	055b      	lsls	r3, r3, #21
 8008286:	d510      	bpl.n	80082aa <_scanf_float+0x31e>
 8008288:	455e      	cmp	r6, fp
 800828a:	f67f aebf 	bls.w	800800c <_scanf_float+0x80>
 800828e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008292:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008296:	463a      	mov	r2, r7
 8008298:	4640      	mov	r0, r8
 800829a:	4798      	blx	r3
 800829c:	6923      	ldr	r3, [r4, #16]
 800829e:	3b01      	subs	r3, #1
 80082a0:	6123      	str	r3, [r4, #16]
 80082a2:	e7f1      	b.n	8008288 <_scanf_float+0x2fc>
 80082a4:	46aa      	mov	sl, r5
 80082a6:	9602      	str	r6, [sp, #8]
 80082a8:	e7df      	b.n	800826a <_scanf_float+0x2de>
 80082aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80082ae:	6923      	ldr	r3, [r4, #16]
 80082b0:	2965      	cmp	r1, #101	; 0x65
 80082b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80082b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80082ba:	6123      	str	r3, [r4, #16]
 80082bc:	d00c      	beq.n	80082d8 <_scanf_float+0x34c>
 80082be:	2945      	cmp	r1, #69	; 0x45
 80082c0:	d00a      	beq.n	80082d8 <_scanf_float+0x34c>
 80082c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082c6:	463a      	mov	r2, r7
 80082c8:	4640      	mov	r0, r8
 80082ca:	4798      	blx	r3
 80082cc:	6923      	ldr	r3, [r4, #16]
 80082ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	1eb5      	subs	r5, r6, #2
 80082d6:	6123      	str	r3, [r4, #16]
 80082d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082dc:	463a      	mov	r2, r7
 80082de:	4640      	mov	r0, r8
 80082e0:	4798      	blx	r3
 80082e2:	462e      	mov	r6, r5
 80082e4:	6825      	ldr	r5, [r4, #0]
 80082e6:	f015 0510 	ands.w	r5, r5, #16
 80082ea:	d14e      	bne.n	800838a <_scanf_float+0x3fe>
 80082ec:	7035      	strb	r5, [r6, #0]
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80082f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f8:	d119      	bne.n	800832e <_scanf_float+0x3a2>
 80082fa:	9b01      	ldr	r3, [sp, #4]
 80082fc:	454b      	cmp	r3, r9
 80082fe:	eba3 0209 	sub.w	r2, r3, r9
 8008302:	d121      	bne.n	8008348 <_scanf_float+0x3bc>
 8008304:	2200      	movs	r2, #0
 8008306:	4659      	mov	r1, fp
 8008308:	4640      	mov	r0, r8
 800830a:	f000 fe4f 	bl	8008fac <_strtod_r>
 800830e:	6822      	ldr	r2, [r4, #0]
 8008310:	9b03      	ldr	r3, [sp, #12]
 8008312:	f012 0f02 	tst.w	r2, #2
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	d021      	beq.n	800835e <_scanf_float+0x3d2>
 800831a:	9903      	ldr	r1, [sp, #12]
 800831c:	1d1a      	adds	r2, r3, #4
 800831e:	600a      	str	r2, [r1, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	ed83 0b00 	vstr	d0, [r3]
 8008326:	68e3      	ldr	r3, [r4, #12]
 8008328:	3301      	adds	r3, #1
 800832a:	60e3      	str	r3, [r4, #12]
 800832c:	e66f      	b.n	800800e <_scanf_float+0x82>
 800832e:	9b04      	ldr	r3, [sp, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0e7      	beq.n	8008304 <_scanf_float+0x378>
 8008334:	9905      	ldr	r1, [sp, #20]
 8008336:	230a      	movs	r3, #10
 8008338:	462a      	mov	r2, r5
 800833a:	3101      	adds	r1, #1
 800833c:	4640      	mov	r0, r8
 800833e:	f000 febd 	bl	80090bc <_strtol_r>
 8008342:	9b04      	ldr	r3, [sp, #16]
 8008344:	9e05      	ldr	r6, [sp, #20]
 8008346:	1ac2      	subs	r2, r0, r3
 8008348:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800834c:	429e      	cmp	r6, r3
 800834e:	bf28      	it	cs
 8008350:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008354:	490e      	ldr	r1, [pc, #56]	; (8008390 <_scanf_float+0x404>)
 8008356:	4630      	mov	r0, r6
 8008358:	f000 f824 	bl	80083a4 <siprintf>
 800835c:	e7d2      	b.n	8008304 <_scanf_float+0x378>
 800835e:	9903      	ldr	r1, [sp, #12]
 8008360:	f012 0f04 	tst.w	r2, #4
 8008364:	f103 0204 	add.w	r2, r3, #4
 8008368:	600a      	str	r2, [r1, #0]
 800836a:	d1d9      	bne.n	8008320 <_scanf_float+0x394>
 800836c:	eeb4 0b40 	vcmp.f64	d0, d0
 8008370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008374:	681e      	ldr	r6, [r3, #0]
 8008376:	d705      	bvc.n	8008384 <_scanf_float+0x3f8>
 8008378:	4806      	ldr	r0, [pc, #24]	; (8008394 <_scanf_float+0x408>)
 800837a:	f000 f80d 	bl	8008398 <nanf>
 800837e:	ed86 0a00 	vstr	s0, [r6]
 8008382:	e7d0      	b.n	8008326 <_scanf_float+0x39a>
 8008384:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008388:	e7f9      	b.n	800837e <_scanf_float+0x3f2>
 800838a:	2500      	movs	r5, #0
 800838c:	e63f      	b.n	800800e <_scanf_float+0x82>
 800838e:	bf00      	nop
 8008390:	0800bed4 	.word	0x0800bed4
 8008394:	0800c2e0 	.word	0x0800c2e0

08008398 <nanf>:
 8008398:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80083a0 <nanf+0x8>
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	7fc00000 	.word	0x7fc00000

080083a4 <siprintf>:
 80083a4:	b40e      	push	{r1, r2, r3}
 80083a6:	b500      	push	{lr}
 80083a8:	b09c      	sub	sp, #112	; 0x70
 80083aa:	ab1d      	add	r3, sp, #116	; 0x74
 80083ac:	9002      	str	r0, [sp, #8]
 80083ae:	9006      	str	r0, [sp, #24]
 80083b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083b4:	4809      	ldr	r0, [pc, #36]	; (80083dc <siprintf+0x38>)
 80083b6:	9107      	str	r1, [sp, #28]
 80083b8:	9104      	str	r1, [sp, #16]
 80083ba:	4909      	ldr	r1, [pc, #36]	; (80083e0 <siprintf+0x3c>)
 80083bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c0:	9105      	str	r1, [sp, #20]
 80083c2:	6800      	ldr	r0, [r0, #0]
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	a902      	add	r1, sp, #8
 80083c8:	f002 fe20 	bl	800b00c <_svfiprintf_r>
 80083cc:	9b02      	ldr	r3, [sp, #8]
 80083ce:	2200      	movs	r2, #0
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	b01c      	add	sp, #112	; 0x70
 80083d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083d8:	b003      	add	sp, #12
 80083da:	4770      	bx	lr
 80083dc:	20000024 	.word	0x20000024
 80083e0:	ffff0208 	.word	0xffff0208

080083e4 <strncpy>:
 80083e4:	b510      	push	{r4, lr}
 80083e6:	3901      	subs	r1, #1
 80083e8:	4603      	mov	r3, r0
 80083ea:	b132      	cbz	r2, 80083fa <strncpy+0x16>
 80083ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80083f0:	f803 4b01 	strb.w	r4, [r3], #1
 80083f4:	3a01      	subs	r2, #1
 80083f6:	2c00      	cmp	r4, #0
 80083f8:	d1f7      	bne.n	80083ea <strncpy+0x6>
 80083fa:	441a      	add	r2, r3
 80083fc:	2100      	movs	r1, #0
 80083fe:	4293      	cmp	r3, r2
 8008400:	d100      	bne.n	8008404 <strncpy+0x20>
 8008402:	bd10      	pop	{r4, pc}
 8008404:	f803 1b01 	strb.w	r1, [r3], #1
 8008408:	e7f9      	b.n	80083fe <strncpy+0x1a>

0800840a <sulp>:
 800840a:	b570      	push	{r4, r5, r6, lr}
 800840c:	4604      	mov	r4, r0
 800840e:	460d      	mov	r5, r1
 8008410:	4616      	mov	r6, r2
 8008412:	ec45 4b10 	vmov	d0, r4, r5
 8008416:	f002 fb5b 	bl	800aad0 <__ulp>
 800841a:	b17e      	cbz	r6, 800843c <sulp+0x32>
 800841c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008420:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008424:	2b00      	cmp	r3, #0
 8008426:	dd09      	ble.n	800843c <sulp+0x32>
 8008428:	051b      	lsls	r3, r3, #20
 800842a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800842e:	2000      	movs	r0, #0
 8008430:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008434:	ec41 0b17 	vmov	d7, r0, r1
 8008438:	ee20 0b07 	vmul.f64	d0, d0, d7
 800843c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008440 <_strtod_l>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	ed2d 8b0e 	vpush	{d8-d14}
 8008448:	b097      	sub	sp, #92	; 0x5c
 800844a:	461f      	mov	r7, r3
 800844c:	2300      	movs	r3, #0
 800844e:	9312      	str	r3, [sp, #72]	; 0x48
 8008450:	4ba1      	ldr	r3, [pc, #644]	; (80086d8 <_strtod_l+0x298>)
 8008452:	920d      	str	r2, [sp, #52]	; 0x34
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	9307      	str	r3, [sp, #28]
 8008458:	4604      	mov	r4, r0
 800845a:	4618      	mov	r0, r3
 800845c:	468b      	mov	fp, r1
 800845e:	f7f7 feef 	bl	8000240 <strlen>
 8008462:	f04f 0800 	mov.w	r8, #0
 8008466:	4605      	mov	r5, r0
 8008468:	f04f 0900 	mov.w	r9, #0
 800846c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008470:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008472:	7813      	ldrb	r3, [r2, #0]
 8008474:	2b2b      	cmp	r3, #43	; 0x2b
 8008476:	d04d      	beq.n	8008514 <_strtod_l+0xd4>
 8008478:	d83a      	bhi.n	80084f0 <_strtod_l+0xb0>
 800847a:	2b0d      	cmp	r3, #13
 800847c:	d833      	bhi.n	80084e6 <_strtod_l+0xa6>
 800847e:	2b08      	cmp	r3, #8
 8008480:	d833      	bhi.n	80084ea <_strtod_l+0xaa>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d03d      	beq.n	8008502 <_strtod_l+0xc2>
 8008486:	2300      	movs	r3, #0
 8008488:	9308      	str	r3, [sp, #32]
 800848a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800848c:	7833      	ldrb	r3, [r6, #0]
 800848e:	2b30      	cmp	r3, #48	; 0x30
 8008490:	f040 80b0 	bne.w	80085f4 <_strtod_l+0x1b4>
 8008494:	7873      	ldrb	r3, [r6, #1]
 8008496:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800849a:	2b58      	cmp	r3, #88	; 0x58
 800849c:	d167      	bne.n	800856e <_strtod_l+0x12e>
 800849e:	9b08      	ldr	r3, [sp, #32]
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	ab12      	add	r3, sp, #72	; 0x48
 80084a4:	9702      	str	r7, [sp, #8]
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	4a8c      	ldr	r2, [pc, #560]	; (80086dc <_strtod_l+0x29c>)
 80084aa:	ab13      	add	r3, sp, #76	; 0x4c
 80084ac:	a911      	add	r1, sp, #68	; 0x44
 80084ae:	4620      	mov	r0, r4
 80084b0:	f001 fc68 	bl	8009d84 <__gethex>
 80084b4:	f010 0507 	ands.w	r5, r0, #7
 80084b8:	4607      	mov	r7, r0
 80084ba:	d005      	beq.n	80084c8 <_strtod_l+0x88>
 80084bc:	2d06      	cmp	r5, #6
 80084be:	d12b      	bne.n	8008518 <_strtod_l+0xd8>
 80084c0:	3601      	adds	r6, #1
 80084c2:	2300      	movs	r3, #0
 80084c4:	9611      	str	r6, [sp, #68]	; 0x44
 80084c6:	9308      	str	r3, [sp, #32]
 80084c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f040 854e 	bne.w	8008f6c <_strtod_l+0xb2c>
 80084d0:	9b08      	ldr	r3, [sp, #32]
 80084d2:	b1e3      	cbz	r3, 800850e <_strtod_l+0xce>
 80084d4:	ec49 8b17 	vmov	d7, r8, r9
 80084d8:	eeb1 0b47 	vneg.f64	d0, d7
 80084dc:	b017      	add	sp, #92	; 0x5c
 80084de:	ecbd 8b0e 	vpop	{d8-d14}
 80084e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e6:	2b20      	cmp	r3, #32
 80084e8:	d1cd      	bne.n	8008486 <_strtod_l+0x46>
 80084ea:	3201      	adds	r2, #1
 80084ec:	9211      	str	r2, [sp, #68]	; 0x44
 80084ee:	e7bf      	b.n	8008470 <_strtod_l+0x30>
 80084f0:	2b2d      	cmp	r3, #45	; 0x2d
 80084f2:	d1c8      	bne.n	8008486 <_strtod_l+0x46>
 80084f4:	2301      	movs	r3, #1
 80084f6:	9308      	str	r3, [sp, #32]
 80084f8:	1c53      	adds	r3, r2, #1
 80084fa:	9311      	str	r3, [sp, #68]	; 0x44
 80084fc:	7853      	ldrb	r3, [r2, #1]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1c3      	bne.n	800848a <_strtod_l+0x4a>
 8008502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008504:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008508:	2b00      	cmp	r3, #0
 800850a:	f040 852d 	bne.w	8008f68 <_strtod_l+0xb28>
 800850e:	ec49 8b10 	vmov	d0, r8, r9
 8008512:	e7e3      	b.n	80084dc <_strtod_l+0x9c>
 8008514:	2300      	movs	r3, #0
 8008516:	e7ee      	b.n	80084f6 <_strtod_l+0xb6>
 8008518:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800851a:	b13a      	cbz	r2, 800852c <_strtod_l+0xec>
 800851c:	2135      	movs	r1, #53	; 0x35
 800851e:	a814      	add	r0, sp, #80	; 0x50
 8008520:	f002 fbde 	bl	800ace0 <__copybits>
 8008524:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008526:	4620      	mov	r0, r4
 8008528:	f001 ffa0 	bl	800a46c <_Bfree>
 800852c:	3d01      	subs	r5, #1
 800852e:	2d04      	cmp	r5, #4
 8008530:	d806      	bhi.n	8008540 <_strtod_l+0x100>
 8008532:	e8df f005 	tbb	[pc, r5]
 8008536:	030a      	.short	0x030a
 8008538:	1714      	.short	0x1714
 800853a:	0a          	.byte	0x0a
 800853b:	00          	.byte	0x00
 800853c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8008540:	073f      	lsls	r7, r7, #28
 8008542:	d5c1      	bpl.n	80084c8 <_strtod_l+0x88>
 8008544:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008548:	e7be      	b.n	80084c8 <_strtod_l+0x88>
 800854a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800854e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008550:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008554:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008558:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800855c:	e7f0      	b.n	8008540 <_strtod_l+0x100>
 800855e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80086e0 <_strtod_l+0x2a0>
 8008562:	e7ed      	b.n	8008540 <_strtod_l+0x100>
 8008564:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008568:	f04f 38ff 	mov.w	r8, #4294967295
 800856c:	e7e8      	b.n	8008540 <_strtod_l+0x100>
 800856e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	9211      	str	r2, [sp, #68]	; 0x44
 8008574:	785b      	ldrb	r3, [r3, #1]
 8008576:	2b30      	cmp	r3, #48	; 0x30
 8008578:	d0f9      	beq.n	800856e <_strtod_l+0x12e>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0a4      	beq.n	80084c8 <_strtod_l+0x88>
 800857e:	2301      	movs	r3, #1
 8008580:	f04f 0a00 	mov.w	sl, #0
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008588:	930a      	str	r3, [sp, #40]	; 0x28
 800858a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800858e:	f8cd a018 	str.w	sl, [sp, #24]
 8008592:	220a      	movs	r2, #10
 8008594:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008596:	7807      	ldrb	r7, [r0, #0]
 8008598:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800859c:	b2d9      	uxtb	r1, r3
 800859e:	2909      	cmp	r1, #9
 80085a0:	d92a      	bls.n	80085f8 <_strtod_l+0x1b8>
 80085a2:	9907      	ldr	r1, [sp, #28]
 80085a4:	462a      	mov	r2, r5
 80085a6:	f002 fe4b 	bl	800b240 <strncmp>
 80085aa:	2800      	cmp	r0, #0
 80085ac:	d033      	beq.n	8008616 <_strtod_l+0x1d6>
 80085ae:	2000      	movs	r0, #0
 80085b0:	9b06      	ldr	r3, [sp, #24]
 80085b2:	463a      	mov	r2, r7
 80085b4:	4601      	mov	r1, r0
 80085b6:	4607      	mov	r7, r0
 80085b8:	2a65      	cmp	r2, #101	; 0x65
 80085ba:	d001      	beq.n	80085c0 <_strtod_l+0x180>
 80085bc:	2a45      	cmp	r2, #69	; 0x45
 80085be:	d117      	bne.n	80085f0 <_strtod_l+0x1b0>
 80085c0:	b91b      	cbnz	r3, 80085ca <_strtod_l+0x18a>
 80085c2:	9b04      	ldr	r3, [sp, #16]
 80085c4:	4303      	orrs	r3, r0
 80085c6:	d09c      	beq.n	8008502 <_strtod_l+0xc2>
 80085c8:	2300      	movs	r3, #0
 80085ca:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80085ce:	f10b 0201 	add.w	r2, fp, #1
 80085d2:	9211      	str	r2, [sp, #68]	; 0x44
 80085d4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80085d8:	2a2b      	cmp	r2, #43	; 0x2b
 80085da:	d071      	beq.n	80086c0 <_strtod_l+0x280>
 80085dc:	2a2d      	cmp	r2, #45	; 0x2d
 80085de:	d077      	beq.n	80086d0 <_strtod_l+0x290>
 80085e0:	f04f 0e00 	mov.w	lr, #0
 80085e4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80085e8:	2d09      	cmp	r5, #9
 80085ea:	d97f      	bls.n	80086ec <_strtod_l+0x2ac>
 80085ec:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80085f0:	2500      	movs	r5, #0
 80085f2:	e09b      	b.n	800872c <_strtod_l+0x2ec>
 80085f4:	2300      	movs	r3, #0
 80085f6:	e7c3      	b.n	8008580 <_strtod_l+0x140>
 80085f8:	9906      	ldr	r1, [sp, #24]
 80085fa:	2908      	cmp	r1, #8
 80085fc:	bfdd      	ittte	le
 80085fe:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008600:	fb02 3301 	mlale	r3, r2, r1, r3
 8008604:	9309      	strle	r3, [sp, #36]	; 0x24
 8008606:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800860a:	9b06      	ldr	r3, [sp, #24]
 800860c:	3001      	adds	r0, #1
 800860e:	3301      	adds	r3, #1
 8008610:	9306      	str	r3, [sp, #24]
 8008612:	9011      	str	r0, [sp, #68]	; 0x44
 8008614:	e7be      	b.n	8008594 <_strtod_l+0x154>
 8008616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008618:	195a      	adds	r2, r3, r5
 800861a:	9211      	str	r2, [sp, #68]	; 0x44
 800861c:	5d5a      	ldrb	r2, [r3, r5]
 800861e:	9b06      	ldr	r3, [sp, #24]
 8008620:	b3a3      	cbz	r3, 800868c <_strtod_l+0x24c>
 8008622:	4607      	mov	r7, r0
 8008624:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008628:	2909      	cmp	r1, #9
 800862a:	d912      	bls.n	8008652 <_strtod_l+0x212>
 800862c:	2101      	movs	r1, #1
 800862e:	e7c3      	b.n	80085b8 <_strtod_l+0x178>
 8008630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	9211      	str	r2, [sp, #68]	; 0x44
 8008636:	785a      	ldrb	r2, [r3, #1]
 8008638:	3001      	adds	r0, #1
 800863a:	2a30      	cmp	r2, #48	; 0x30
 800863c:	d0f8      	beq.n	8008630 <_strtod_l+0x1f0>
 800863e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008642:	2b08      	cmp	r3, #8
 8008644:	f200 8497 	bhi.w	8008f76 <_strtod_l+0xb36>
 8008648:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800864a:	930a      	str	r3, [sp, #40]	; 0x28
 800864c:	4607      	mov	r7, r0
 800864e:	2000      	movs	r0, #0
 8008650:	4603      	mov	r3, r0
 8008652:	3a30      	subs	r2, #48	; 0x30
 8008654:	f100 0101 	add.w	r1, r0, #1
 8008658:	d012      	beq.n	8008680 <_strtod_l+0x240>
 800865a:	440f      	add	r7, r1
 800865c:	eb00 0c03 	add.w	ip, r0, r3
 8008660:	4619      	mov	r1, r3
 8008662:	250a      	movs	r5, #10
 8008664:	4561      	cmp	r1, ip
 8008666:	d113      	bne.n	8008690 <_strtod_l+0x250>
 8008668:	1819      	adds	r1, r3, r0
 800866a:	2908      	cmp	r1, #8
 800866c:	f103 0301 	add.w	r3, r3, #1
 8008670:	4403      	add	r3, r0
 8008672:	dc1c      	bgt.n	80086ae <_strtod_l+0x26e>
 8008674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008676:	210a      	movs	r1, #10
 8008678:	fb01 2200 	mla	r2, r1, r0, r2
 800867c:	9209      	str	r2, [sp, #36]	; 0x24
 800867e:	2100      	movs	r1, #0
 8008680:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008682:	1c50      	adds	r0, r2, #1
 8008684:	9011      	str	r0, [sp, #68]	; 0x44
 8008686:	7852      	ldrb	r2, [r2, #1]
 8008688:	4608      	mov	r0, r1
 800868a:	e7cb      	b.n	8008624 <_strtod_l+0x1e4>
 800868c:	9806      	ldr	r0, [sp, #24]
 800868e:	e7d4      	b.n	800863a <_strtod_l+0x1fa>
 8008690:	2908      	cmp	r1, #8
 8008692:	dc04      	bgt.n	800869e <_strtod_l+0x25e>
 8008694:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008696:	436e      	muls	r6, r5
 8008698:	9609      	str	r6, [sp, #36]	; 0x24
 800869a:	3101      	adds	r1, #1
 800869c:	e7e2      	b.n	8008664 <_strtod_l+0x224>
 800869e:	f101 0e01 	add.w	lr, r1, #1
 80086a2:	f1be 0f10 	cmp.w	lr, #16
 80086a6:	bfd8      	it	le
 80086a8:	fb05 fa0a 	mulle.w	sl, r5, sl
 80086ac:	e7f5      	b.n	800869a <_strtod_l+0x25a>
 80086ae:	2b10      	cmp	r3, #16
 80086b0:	bfdc      	itt	le
 80086b2:	210a      	movle	r1, #10
 80086b4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80086b8:	e7e1      	b.n	800867e <_strtod_l+0x23e>
 80086ba:	2700      	movs	r7, #0
 80086bc:	2101      	movs	r1, #1
 80086be:	e780      	b.n	80085c2 <_strtod_l+0x182>
 80086c0:	f04f 0e00 	mov.w	lr, #0
 80086c4:	f10b 0202 	add.w	r2, fp, #2
 80086c8:	9211      	str	r2, [sp, #68]	; 0x44
 80086ca:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80086ce:	e789      	b.n	80085e4 <_strtod_l+0x1a4>
 80086d0:	f04f 0e01 	mov.w	lr, #1
 80086d4:	e7f6      	b.n	80086c4 <_strtod_l+0x284>
 80086d6:	bf00      	nop
 80086d8:	0800c128 	.word	0x0800c128
 80086dc:	0800bedc 	.word	0x0800bedc
 80086e0:	7ff00000 	.word	0x7ff00000
 80086e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086e6:	1c55      	adds	r5, r2, #1
 80086e8:	9511      	str	r5, [sp, #68]	; 0x44
 80086ea:	7852      	ldrb	r2, [r2, #1]
 80086ec:	2a30      	cmp	r2, #48	; 0x30
 80086ee:	d0f9      	beq.n	80086e4 <_strtod_l+0x2a4>
 80086f0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80086f4:	2d08      	cmp	r5, #8
 80086f6:	f63f af7b 	bhi.w	80085f0 <_strtod_l+0x1b0>
 80086fa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80086fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008700:	9207      	str	r2, [sp, #28]
 8008702:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008704:	1c55      	adds	r5, r2, #1
 8008706:	9511      	str	r5, [sp, #68]	; 0x44
 8008708:	7852      	ldrb	r2, [r2, #1]
 800870a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800870e:	2e09      	cmp	r6, #9
 8008710:	d937      	bls.n	8008782 <_strtod_l+0x342>
 8008712:	9e07      	ldr	r6, [sp, #28]
 8008714:	1bad      	subs	r5, r5, r6
 8008716:	2d08      	cmp	r5, #8
 8008718:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800871c:	dc02      	bgt.n	8008724 <_strtod_l+0x2e4>
 800871e:	4565      	cmp	r5, ip
 8008720:	bfa8      	it	ge
 8008722:	4665      	movge	r5, ip
 8008724:	f1be 0f00 	cmp.w	lr, #0
 8008728:	d000      	beq.n	800872c <_strtod_l+0x2ec>
 800872a:	426d      	negs	r5, r5
 800872c:	2b00      	cmp	r3, #0
 800872e:	d14d      	bne.n	80087cc <_strtod_l+0x38c>
 8008730:	9b04      	ldr	r3, [sp, #16]
 8008732:	4303      	orrs	r3, r0
 8008734:	f47f aec8 	bne.w	80084c8 <_strtod_l+0x88>
 8008738:	2900      	cmp	r1, #0
 800873a:	f47f aee2 	bne.w	8008502 <_strtod_l+0xc2>
 800873e:	2a69      	cmp	r2, #105	; 0x69
 8008740:	d027      	beq.n	8008792 <_strtod_l+0x352>
 8008742:	dc24      	bgt.n	800878e <_strtod_l+0x34e>
 8008744:	2a49      	cmp	r2, #73	; 0x49
 8008746:	d024      	beq.n	8008792 <_strtod_l+0x352>
 8008748:	2a4e      	cmp	r2, #78	; 0x4e
 800874a:	f47f aeda 	bne.w	8008502 <_strtod_l+0xc2>
 800874e:	4996      	ldr	r1, [pc, #600]	; (80089a8 <_strtod_l+0x568>)
 8008750:	a811      	add	r0, sp, #68	; 0x44
 8008752:	f001 fd6f 	bl	800a234 <__match>
 8008756:	2800      	cmp	r0, #0
 8008758:	f43f aed3 	beq.w	8008502 <_strtod_l+0xc2>
 800875c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b28      	cmp	r3, #40	; 0x28
 8008762:	d12d      	bne.n	80087c0 <_strtod_l+0x380>
 8008764:	4991      	ldr	r1, [pc, #580]	; (80089ac <_strtod_l+0x56c>)
 8008766:	aa14      	add	r2, sp, #80	; 0x50
 8008768:	a811      	add	r0, sp, #68	; 0x44
 800876a:	f001 fd77 	bl	800a25c <__hexnan>
 800876e:	2805      	cmp	r0, #5
 8008770:	d126      	bne.n	80087c0 <_strtod_l+0x380>
 8008772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008774:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008778:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800877c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008780:	e6a2      	b.n	80084c8 <_strtod_l+0x88>
 8008782:	250a      	movs	r5, #10
 8008784:	fb05 250c 	mla	r5, r5, ip, r2
 8008788:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800878c:	e7b9      	b.n	8008702 <_strtod_l+0x2c2>
 800878e:	2a6e      	cmp	r2, #110	; 0x6e
 8008790:	e7db      	b.n	800874a <_strtod_l+0x30a>
 8008792:	4987      	ldr	r1, [pc, #540]	; (80089b0 <_strtod_l+0x570>)
 8008794:	a811      	add	r0, sp, #68	; 0x44
 8008796:	f001 fd4d 	bl	800a234 <__match>
 800879a:	2800      	cmp	r0, #0
 800879c:	f43f aeb1 	beq.w	8008502 <_strtod_l+0xc2>
 80087a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087a2:	4984      	ldr	r1, [pc, #528]	; (80089b4 <_strtod_l+0x574>)
 80087a4:	3b01      	subs	r3, #1
 80087a6:	a811      	add	r0, sp, #68	; 0x44
 80087a8:	9311      	str	r3, [sp, #68]	; 0x44
 80087aa:	f001 fd43 	bl	800a234 <__match>
 80087ae:	b910      	cbnz	r0, 80087b6 <_strtod_l+0x376>
 80087b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087b2:	3301      	adds	r3, #1
 80087b4:	9311      	str	r3, [sp, #68]	; 0x44
 80087b6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80089c8 <_strtod_l+0x588>
 80087ba:	f04f 0800 	mov.w	r8, #0
 80087be:	e683      	b.n	80084c8 <_strtod_l+0x88>
 80087c0:	487d      	ldr	r0, [pc, #500]	; (80089b8 <_strtod_l+0x578>)
 80087c2:	f002 fd25 	bl	800b210 <nan>
 80087c6:	ec59 8b10 	vmov	r8, r9, d0
 80087ca:	e67d      	b.n	80084c8 <_strtod_l+0x88>
 80087cc:	1bea      	subs	r2, r5, r7
 80087ce:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80087d2:	9207      	str	r2, [sp, #28]
 80087d4:	9a06      	ldr	r2, [sp, #24]
 80087d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80087da:	2a00      	cmp	r2, #0
 80087dc:	bf08      	it	eq
 80087de:	461a      	moveq	r2, r3
 80087e0:	2b10      	cmp	r3, #16
 80087e2:	9206      	str	r2, [sp, #24]
 80087e4:	461a      	mov	r2, r3
 80087e6:	bfa8      	it	ge
 80087e8:	2210      	movge	r2, #16
 80087ea:	2b09      	cmp	r3, #9
 80087ec:	ec59 8b17 	vmov	r8, r9, d7
 80087f0:	dd0c      	ble.n	800880c <_strtod_l+0x3cc>
 80087f2:	4972      	ldr	r1, [pc, #456]	; (80089bc <_strtod_l+0x57c>)
 80087f4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80087f8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80087fc:	ee06 aa90 	vmov	s13, sl
 8008800:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008804:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008808:	ec59 8b16 	vmov	r8, r9, d6
 800880c:	2b0f      	cmp	r3, #15
 800880e:	dc36      	bgt.n	800887e <_strtod_l+0x43e>
 8008810:	9907      	ldr	r1, [sp, #28]
 8008812:	2900      	cmp	r1, #0
 8008814:	f43f ae58 	beq.w	80084c8 <_strtod_l+0x88>
 8008818:	dd23      	ble.n	8008862 <_strtod_l+0x422>
 800881a:	2916      	cmp	r1, #22
 800881c:	dc0b      	bgt.n	8008836 <_strtod_l+0x3f6>
 800881e:	4b67      	ldr	r3, [pc, #412]	; (80089bc <_strtod_l+0x57c>)
 8008820:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008824:	ed93 7b00 	vldr	d7, [r3]
 8008828:	ec49 8b16 	vmov	d6, r8, r9
 800882c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008830:	ec59 8b17 	vmov	r8, r9, d7
 8008834:	e648      	b.n	80084c8 <_strtod_l+0x88>
 8008836:	9807      	ldr	r0, [sp, #28]
 8008838:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800883c:	4281      	cmp	r1, r0
 800883e:	db1e      	blt.n	800887e <_strtod_l+0x43e>
 8008840:	4a5e      	ldr	r2, [pc, #376]	; (80089bc <_strtod_l+0x57c>)
 8008842:	f1c3 030f 	rsb	r3, r3, #15
 8008846:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800884a:	ed91 7b00 	vldr	d7, [r1]
 800884e:	ec49 8b16 	vmov	d6, r8, r9
 8008852:	1ac3      	subs	r3, r0, r3
 8008854:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008858:	ee27 7b06 	vmul.f64	d7, d7, d6
 800885c:	ed92 6b00 	vldr	d6, [r2]
 8008860:	e7e4      	b.n	800882c <_strtod_l+0x3ec>
 8008862:	9907      	ldr	r1, [sp, #28]
 8008864:	3116      	adds	r1, #22
 8008866:	db0a      	blt.n	800887e <_strtod_l+0x43e>
 8008868:	4b54      	ldr	r3, [pc, #336]	; (80089bc <_strtod_l+0x57c>)
 800886a:	1b7d      	subs	r5, r7, r5
 800886c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008870:	ed95 7b00 	vldr	d7, [r5]
 8008874:	ec49 8b16 	vmov	d6, r8, r9
 8008878:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800887c:	e7d8      	b.n	8008830 <_strtod_l+0x3f0>
 800887e:	9907      	ldr	r1, [sp, #28]
 8008880:	1a9a      	subs	r2, r3, r2
 8008882:	440a      	add	r2, r1
 8008884:	2a00      	cmp	r2, #0
 8008886:	dd6f      	ble.n	8008968 <_strtod_l+0x528>
 8008888:	f012 000f 	ands.w	r0, r2, #15
 800888c:	d00a      	beq.n	80088a4 <_strtod_l+0x464>
 800888e:	494b      	ldr	r1, [pc, #300]	; (80089bc <_strtod_l+0x57c>)
 8008890:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008894:	ed91 7b00 	vldr	d7, [r1]
 8008898:	ec49 8b16 	vmov	d6, r8, r9
 800889c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80088a0:	ec59 8b17 	vmov	r8, r9, d7
 80088a4:	f032 020f 	bics.w	r2, r2, #15
 80088a8:	d04f      	beq.n	800894a <_strtod_l+0x50a>
 80088aa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80088ae:	dd22      	ble.n	80088f6 <_strtod_l+0x4b6>
 80088b0:	2500      	movs	r5, #0
 80088b2:	462e      	mov	r6, r5
 80088b4:	9506      	str	r5, [sp, #24]
 80088b6:	462f      	mov	r7, r5
 80088b8:	2322      	movs	r3, #34	; 0x22
 80088ba:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80089c8 <_strtod_l+0x588>
 80088be:	6023      	str	r3, [r4, #0]
 80088c0:	f04f 0800 	mov.w	r8, #0
 80088c4:	9b06      	ldr	r3, [sp, #24]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f43f adfe 	beq.w	80084c8 <_strtod_l+0x88>
 80088cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80088ce:	4620      	mov	r0, r4
 80088d0:	f001 fdcc 	bl	800a46c <_Bfree>
 80088d4:	4639      	mov	r1, r7
 80088d6:	4620      	mov	r0, r4
 80088d8:	f001 fdc8 	bl	800a46c <_Bfree>
 80088dc:	4631      	mov	r1, r6
 80088de:	4620      	mov	r0, r4
 80088e0:	f001 fdc4 	bl	800a46c <_Bfree>
 80088e4:	9906      	ldr	r1, [sp, #24]
 80088e6:	4620      	mov	r0, r4
 80088e8:	f001 fdc0 	bl	800a46c <_Bfree>
 80088ec:	4629      	mov	r1, r5
 80088ee:	4620      	mov	r0, r4
 80088f0:	f001 fdbc 	bl	800a46c <_Bfree>
 80088f4:	e5e8      	b.n	80084c8 <_strtod_l+0x88>
 80088f6:	2000      	movs	r0, #0
 80088f8:	ec49 8b17 	vmov	d7, r8, r9
 80088fc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80089c0 <_strtod_l+0x580>
 8008900:	1112      	asrs	r2, r2, #4
 8008902:	4601      	mov	r1, r0
 8008904:	2a01      	cmp	r2, #1
 8008906:	dc23      	bgt.n	8008950 <_strtod_l+0x510>
 8008908:	b108      	cbz	r0, 800890e <_strtod_l+0x4ce>
 800890a:	ec59 8b17 	vmov	r8, r9, d7
 800890e:	4a2c      	ldr	r2, [pc, #176]	; (80089c0 <_strtod_l+0x580>)
 8008910:	482c      	ldr	r0, [pc, #176]	; (80089c4 <_strtod_l+0x584>)
 8008912:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008916:	ed92 7b00 	vldr	d7, [r2]
 800891a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800891e:	ec49 8b16 	vmov	d6, r8, r9
 8008922:	4a29      	ldr	r2, [pc, #164]	; (80089c8 <_strtod_l+0x588>)
 8008924:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008928:	ee17 1a90 	vmov	r1, s15
 800892c:	400a      	ands	r2, r1
 800892e:	4282      	cmp	r2, r0
 8008930:	ec59 8b17 	vmov	r8, r9, d7
 8008934:	d8bc      	bhi.n	80088b0 <_strtod_l+0x470>
 8008936:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800893a:	4282      	cmp	r2, r0
 800893c:	bf86      	itte	hi
 800893e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80089cc <_strtod_l+0x58c>
 8008942:	f04f 38ff 	movhi.w	r8, #4294967295
 8008946:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800894a:	2200      	movs	r2, #0
 800894c:	9204      	str	r2, [sp, #16]
 800894e:	e078      	b.n	8008a42 <_strtod_l+0x602>
 8008950:	07d6      	lsls	r6, r2, #31
 8008952:	d504      	bpl.n	800895e <_strtod_l+0x51e>
 8008954:	ed9c 6b00 	vldr	d6, [ip]
 8008958:	2001      	movs	r0, #1
 800895a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800895e:	3101      	adds	r1, #1
 8008960:	1052      	asrs	r2, r2, #1
 8008962:	f10c 0c08 	add.w	ip, ip, #8
 8008966:	e7cd      	b.n	8008904 <_strtod_l+0x4c4>
 8008968:	d0ef      	beq.n	800894a <_strtod_l+0x50a>
 800896a:	4252      	negs	r2, r2
 800896c:	f012 000f 	ands.w	r0, r2, #15
 8008970:	d00a      	beq.n	8008988 <_strtod_l+0x548>
 8008972:	4912      	ldr	r1, [pc, #72]	; (80089bc <_strtod_l+0x57c>)
 8008974:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008978:	ed91 7b00 	vldr	d7, [r1]
 800897c:	ec49 8b16 	vmov	d6, r8, r9
 8008980:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008984:	ec59 8b17 	vmov	r8, r9, d7
 8008988:	1112      	asrs	r2, r2, #4
 800898a:	d0de      	beq.n	800894a <_strtod_l+0x50a>
 800898c:	2a1f      	cmp	r2, #31
 800898e:	dd1f      	ble.n	80089d0 <_strtod_l+0x590>
 8008990:	2500      	movs	r5, #0
 8008992:	462e      	mov	r6, r5
 8008994:	9506      	str	r5, [sp, #24]
 8008996:	462f      	mov	r7, r5
 8008998:	2322      	movs	r3, #34	; 0x22
 800899a:	f04f 0800 	mov.w	r8, #0
 800899e:	f04f 0900 	mov.w	r9, #0
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	e78e      	b.n	80088c4 <_strtod_l+0x484>
 80089a6:	bf00      	nop
 80089a8:	0800bead 	.word	0x0800bead
 80089ac:	0800bef0 	.word	0x0800bef0
 80089b0:	0800bea5 	.word	0x0800bea5
 80089b4:	0800c034 	.word	0x0800c034
 80089b8:	0800c2e0 	.word	0x0800c2e0
 80089bc:	0800c1c0 	.word	0x0800c1c0
 80089c0:	0800c198 	.word	0x0800c198
 80089c4:	7ca00000 	.word	0x7ca00000
 80089c8:	7ff00000 	.word	0x7ff00000
 80089cc:	7fefffff 	.word	0x7fefffff
 80089d0:	f012 0110 	ands.w	r1, r2, #16
 80089d4:	bf18      	it	ne
 80089d6:	216a      	movne	r1, #106	; 0x6a
 80089d8:	9104      	str	r1, [sp, #16]
 80089da:	ec49 8b17 	vmov	d7, r8, r9
 80089de:	49be      	ldr	r1, [pc, #760]	; (8008cd8 <_strtod_l+0x898>)
 80089e0:	2000      	movs	r0, #0
 80089e2:	07d6      	lsls	r6, r2, #31
 80089e4:	d504      	bpl.n	80089f0 <_strtod_l+0x5b0>
 80089e6:	ed91 6b00 	vldr	d6, [r1]
 80089ea:	2001      	movs	r0, #1
 80089ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80089f0:	1052      	asrs	r2, r2, #1
 80089f2:	f101 0108 	add.w	r1, r1, #8
 80089f6:	d1f4      	bne.n	80089e2 <_strtod_l+0x5a2>
 80089f8:	b108      	cbz	r0, 80089fe <_strtod_l+0x5be>
 80089fa:	ec59 8b17 	vmov	r8, r9, d7
 80089fe:	9a04      	ldr	r2, [sp, #16]
 8008a00:	b1c2      	cbz	r2, 8008a34 <_strtod_l+0x5f4>
 8008a02:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8008a06:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8008a0a:	2a00      	cmp	r2, #0
 8008a0c:	4648      	mov	r0, r9
 8008a0e:	dd11      	ble.n	8008a34 <_strtod_l+0x5f4>
 8008a10:	2a1f      	cmp	r2, #31
 8008a12:	f340 812e 	ble.w	8008c72 <_strtod_l+0x832>
 8008a16:	2a34      	cmp	r2, #52	; 0x34
 8008a18:	bfde      	ittt	le
 8008a1a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8008a1e:	f04f 32ff 	movle.w	r2, #4294967295
 8008a22:	fa02 f101 	lslle.w	r1, r2, r1
 8008a26:	f04f 0800 	mov.w	r8, #0
 8008a2a:	bfcc      	ite	gt
 8008a2c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008a30:	ea01 0900 	andle.w	r9, r1, r0
 8008a34:	ec49 8b17 	vmov	d7, r8, r9
 8008a38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a40:	d0a6      	beq.n	8008990 <_strtod_l+0x550>
 8008a42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a44:	9200      	str	r2, [sp, #0]
 8008a46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a48:	9a06      	ldr	r2, [sp, #24]
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f001 fd76 	bl	800a53c <__s2b>
 8008a50:	9006      	str	r0, [sp, #24]
 8008a52:	2800      	cmp	r0, #0
 8008a54:	f43f af2c 	beq.w	80088b0 <_strtod_l+0x470>
 8008a58:	9b07      	ldr	r3, [sp, #28]
 8008a5a:	1b7d      	subs	r5, r7, r5
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	bfb4      	ite	lt
 8008a60:	462b      	movlt	r3, r5
 8008a62:	2300      	movge	r3, #0
 8008a64:	9309      	str	r3, [sp, #36]	; 0x24
 8008a66:	9b07      	ldr	r3, [sp, #28]
 8008a68:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8008cb8 <_strtod_l+0x878>
 8008a6c:	ed9f ab94 	vldr	d10, [pc, #592]	; 8008cc0 <_strtod_l+0x880>
 8008a70:	ed9f bb95 	vldr	d11, [pc, #596]	; 8008cc8 <_strtod_l+0x888>
 8008a74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008a78:	2500      	movs	r5, #0
 8008a7a:	930c      	str	r3, [sp, #48]	; 0x30
 8008a7c:	462e      	mov	r6, r5
 8008a7e:	9b06      	ldr	r3, [sp, #24]
 8008a80:	4620      	mov	r0, r4
 8008a82:	6859      	ldr	r1, [r3, #4]
 8008a84:	f001 fcb2 	bl	800a3ec <_Balloc>
 8008a88:	4607      	mov	r7, r0
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	f43f af14 	beq.w	80088b8 <_strtod_l+0x478>
 8008a90:	9b06      	ldr	r3, [sp, #24]
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	3202      	adds	r2, #2
 8008a96:	f103 010c 	add.w	r1, r3, #12
 8008a9a:	0092      	lsls	r2, r2, #2
 8008a9c:	300c      	adds	r0, #12
 8008a9e:	f001 fc97 	bl	800a3d0 <memcpy>
 8008aa2:	ec49 8b10 	vmov	d0, r8, r9
 8008aa6:	aa14      	add	r2, sp, #80	; 0x50
 8008aa8:	a913      	add	r1, sp, #76	; 0x4c
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f002 f88c 	bl	800abc8 <__d2b>
 8008ab0:	ec49 8b18 	vmov	d8, r8, r9
 8008ab4:	9012      	str	r0, [sp, #72]	; 0x48
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	f43f aefe 	beq.w	80088b8 <_strtod_l+0x478>
 8008abc:	2101      	movs	r1, #1
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f001 fdd6 	bl	800a670 <__i2b>
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	f43f aef6 	beq.w	80088b8 <_strtod_l+0x478>
 8008acc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ace:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	bfab      	itete	ge
 8008ad4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8008ad6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008ad8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008adc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008ae0:	bfac      	ite	ge
 8008ae2:	eb03 0b02 	addge.w	fp, r3, r2
 8008ae6:	eba2 0a03 	sublt.w	sl, r2, r3
 8008aea:	9a04      	ldr	r2, [sp, #16]
 8008aec:	1a9b      	subs	r3, r3, r2
 8008aee:	440b      	add	r3, r1
 8008af0:	4a7a      	ldr	r2, [pc, #488]	; (8008cdc <_strtod_l+0x89c>)
 8008af2:	3b01      	subs	r3, #1
 8008af4:	4293      	cmp	r3, r2
 8008af6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008afa:	f280 80cd 	bge.w	8008c98 <_strtod_l+0x858>
 8008afe:	1ad2      	subs	r2, r2, r3
 8008b00:	2a1f      	cmp	r2, #31
 8008b02:	eba1 0102 	sub.w	r1, r1, r2
 8008b06:	f04f 0001 	mov.w	r0, #1
 8008b0a:	f300 80b9 	bgt.w	8008c80 <_strtod_l+0x840>
 8008b0e:	fa00 f302 	lsl.w	r3, r0, r2
 8008b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b14:	2300      	movs	r3, #0
 8008b16:	930a      	str	r3, [sp, #40]	; 0x28
 8008b18:	eb0b 0301 	add.w	r3, fp, r1
 8008b1c:	9a04      	ldr	r2, [sp, #16]
 8008b1e:	459b      	cmp	fp, r3
 8008b20:	448a      	add	sl, r1
 8008b22:	4492      	add	sl, r2
 8008b24:	465a      	mov	r2, fp
 8008b26:	bfa8      	it	ge
 8008b28:	461a      	movge	r2, r3
 8008b2a:	4552      	cmp	r2, sl
 8008b2c:	bfa8      	it	ge
 8008b2e:	4652      	movge	r2, sl
 8008b30:	2a00      	cmp	r2, #0
 8008b32:	bfc2      	ittt	gt
 8008b34:	1a9b      	subgt	r3, r3, r2
 8008b36:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008b3a:	ebab 0b02 	subgt.w	fp, fp, r2
 8008b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b40:	2a00      	cmp	r2, #0
 8008b42:	dd18      	ble.n	8008b76 <_strtod_l+0x736>
 8008b44:	4631      	mov	r1, r6
 8008b46:	4620      	mov	r0, r4
 8008b48:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b4a:	f001 fe51 	bl	800a7f0 <__pow5mult>
 8008b4e:	4606      	mov	r6, r0
 8008b50:	2800      	cmp	r0, #0
 8008b52:	f43f aeb1 	beq.w	80088b8 <_strtod_l+0x478>
 8008b56:	4601      	mov	r1, r0
 8008b58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f001 fd9e 	bl	800a69c <__multiply>
 8008b60:	900e      	str	r0, [sp, #56]	; 0x38
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f43f aea8 	beq.w	80088b8 <_strtod_l+0x478>
 8008b68:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f001 fc7e 	bl	800a46c <_Bfree>
 8008b70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b74:	9212      	str	r2, [sp, #72]	; 0x48
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f300 8093 	bgt.w	8008ca2 <_strtod_l+0x862>
 8008b7c:	9b07      	ldr	r3, [sp, #28]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	dd08      	ble.n	8008b94 <_strtod_l+0x754>
 8008b82:	4639      	mov	r1, r7
 8008b84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b86:	4620      	mov	r0, r4
 8008b88:	f001 fe32 	bl	800a7f0 <__pow5mult>
 8008b8c:	4607      	mov	r7, r0
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	f43f ae92 	beq.w	80088b8 <_strtod_l+0x478>
 8008b94:	f1ba 0f00 	cmp.w	sl, #0
 8008b98:	dd08      	ble.n	8008bac <_strtod_l+0x76c>
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	4652      	mov	r2, sl
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f001 fe80 	bl	800a8a4 <__lshift>
 8008ba4:	4607      	mov	r7, r0
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f43f ae86 	beq.w	80088b8 <_strtod_l+0x478>
 8008bac:	f1bb 0f00 	cmp.w	fp, #0
 8008bb0:	dd08      	ble.n	8008bc4 <_strtod_l+0x784>
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	465a      	mov	r2, fp
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f001 fe74 	bl	800a8a4 <__lshift>
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	f43f ae7a 	beq.w	80088b8 <_strtod_l+0x478>
 8008bc4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008bc6:	463a      	mov	r2, r7
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f001 fef7 	bl	800a9bc <__mdiff>
 8008bce:	4605      	mov	r5, r0
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	f43f ae71 	beq.w	80088b8 <_strtod_l+0x478>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008bdc:	60c3      	str	r3, [r0, #12]
 8008bde:	4631      	mov	r1, r6
 8008be0:	f001 fed0 	bl	800a984 <__mcmp>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	da7d      	bge.n	8008ce4 <_strtod_l+0x8a4>
 8008be8:	ea5a 0308 	orrs.w	r3, sl, r8
 8008bec:	f040 80a3 	bne.w	8008d36 <_strtod_l+0x8f6>
 8008bf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f040 809e 	bne.w	8008d36 <_strtod_l+0x8f6>
 8008bfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bfe:	0d1b      	lsrs	r3, r3, #20
 8008c00:	051b      	lsls	r3, r3, #20
 8008c02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008c06:	f240 8096 	bls.w	8008d36 <_strtod_l+0x8f6>
 8008c0a:	696b      	ldr	r3, [r5, #20]
 8008c0c:	b91b      	cbnz	r3, 8008c16 <_strtod_l+0x7d6>
 8008c0e:	692b      	ldr	r3, [r5, #16]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	f340 8090 	ble.w	8008d36 <_strtod_l+0x8f6>
 8008c16:	4629      	mov	r1, r5
 8008c18:	2201      	movs	r2, #1
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f001 fe42 	bl	800a8a4 <__lshift>
 8008c20:	4631      	mov	r1, r6
 8008c22:	4605      	mov	r5, r0
 8008c24:	f001 feae 	bl	800a984 <__mcmp>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	f340 8084 	ble.w	8008d36 <_strtod_l+0x8f6>
 8008c2e:	9904      	ldr	r1, [sp, #16]
 8008c30:	4a2b      	ldr	r2, [pc, #172]	; (8008ce0 <_strtod_l+0x8a0>)
 8008c32:	464b      	mov	r3, r9
 8008c34:	2900      	cmp	r1, #0
 8008c36:	f000 809d 	beq.w	8008d74 <_strtod_l+0x934>
 8008c3a:	ea02 0109 	and.w	r1, r2, r9
 8008c3e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008c42:	f300 8097 	bgt.w	8008d74 <_strtod_l+0x934>
 8008c46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008c4a:	f77f aea5 	ble.w	8008998 <_strtod_l+0x558>
 8008c4e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008cd0 <_strtod_l+0x890>
 8008c52:	ec49 8b16 	vmov	d6, r8, r9
 8008c56:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008c5a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008c5e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	bf08      	it	eq
 8008c66:	2322      	moveq	r3, #34	; 0x22
 8008c68:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008c6c:	bf08      	it	eq
 8008c6e:	6023      	streq	r3, [r4, #0]
 8008c70:	e62c      	b.n	80088cc <_strtod_l+0x48c>
 8008c72:	f04f 31ff 	mov.w	r1, #4294967295
 8008c76:	fa01 f202 	lsl.w	r2, r1, r2
 8008c7a:	ea02 0808 	and.w	r8, r2, r8
 8008c7e:	e6d9      	b.n	8008a34 <_strtod_l+0x5f4>
 8008c80:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008c84:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008c88:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008c8c:	33e2      	adds	r3, #226	; 0xe2
 8008c8e:	fa00 f303 	lsl.w	r3, r0, r3
 8008c92:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8008c96:	e73f      	b.n	8008b18 <_strtod_l+0x6d8>
 8008c98:	2200      	movs	r2, #0
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008ca0:	e73a      	b.n	8008b18 <_strtod_l+0x6d8>
 8008ca2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f001 fdfc 	bl	800a8a4 <__lshift>
 8008cac:	9012      	str	r0, [sp, #72]	; 0x48
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f47f af64 	bne.w	8008b7c <_strtod_l+0x73c>
 8008cb4:	e600      	b.n	80088b8 <_strtod_l+0x478>
 8008cb6:	bf00      	nop
 8008cb8:	94a03595 	.word	0x94a03595
 8008cbc:	3fcfffff 	.word	0x3fcfffff
 8008cc0:	94a03595 	.word	0x94a03595
 8008cc4:	3fdfffff 	.word	0x3fdfffff
 8008cc8:	35afe535 	.word	0x35afe535
 8008ccc:	3fe00000 	.word	0x3fe00000
 8008cd0:	00000000 	.word	0x00000000
 8008cd4:	39500000 	.word	0x39500000
 8008cd8:	0800bf08 	.word	0x0800bf08
 8008cdc:	fffffc02 	.word	0xfffffc02
 8008ce0:	7ff00000 	.word	0x7ff00000
 8008ce4:	46cb      	mov	fp, r9
 8008ce6:	d15f      	bne.n	8008da8 <_strtod_l+0x968>
 8008ce8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cec:	f1ba 0f00 	cmp.w	sl, #0
 8008cf0:	d02a      	beq.n	8008d48 <_strtod_l+0x908>
 8008cf2:	4aa7      	ldr	r2, [pc, #668]	; (8008f90 <_strtod_l+0xb50>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d12b      	bne.n	8008d50 <_strtod_l+0x910>
 8008cf8:	9b04      	ldr	r3, [sp, #16]
 8008cfa:	4642      	mov	r2, r8
 8008cfc:	b1fb      	cbz	r3, 8008d3e <_strtod_l+0x8fe>
 8008cfe:	4ba5      	ldr	r3, [pc, #660]	; (8008f94 <_strtod_l+0xb54>)
 8008d00:	ea09 0303 	and.w	r3, r9, r3
 8008d04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d08:	f04f 31ff 	mov.w	r1, #4294967295
 8008d0c:	d81a      	bhi.n	8008d44 <_strtod_l+0x904>
 8008d0e:	0d1b      	lsrs	r3, r3, #20
 8008d10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d14:	fa01 f303 	lsl.w	r3, r1, r3
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d119      	bne.n	8008d50 <_strtod_l+0x910>
 8008d1c:	4b9e      	ldr	r3, [pc, #632]	; (8008f98 <_strtod_l+0xb58>)
 8008d1e:	459b      	cmp	fp, r3
 8008d20:	d102      	bne.n	8008d28 <_strtod_l+0x8e8>
 8008d22:	3201      	adds	r2, #1
 8008d24:	f43f adc8 	beq.w	80088b8 <_strtod_l+0x478>
 8008d28:	4b9a      	ldr	r3, [pc, #616]	; (8008f94 <_strtod_l+0xb54>)
 8008d2a:	ea0b 0303 	and.w	r3, fp, r3
 8008d2e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008d32:	f04f 0800 	mov.w	r8, #0
 8008d36:	9b04      	ldr	r3, [sp, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d188      	bne.n	8008c4e <_strtod_l+0x80e>
 8008d3c:	e5c6      	b.n	80088cc <_strtod_l+0x48c>
 8008d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d42:	e7e9      	b.n	8008d18 <_strtod_l+0x8d8>
 8008d44:	460b      	mov	r3, r1
 8008d46:	e7e7      	b.n	8008d18 <_strtod_l+0x8d8>
 8008d48:	ea53 0308 	orrs.w	r3, r3, r8
 8008d4c:	f43f af6f 	beq.w	8008c2e <_strtod_l+0x7ee>
 8008d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d52:	b1cb      	cbz	r3, 8008d88 <_strtod_l+0x948>
 8008d54:	ea13 0f0b 	tst.w	r3, fp
 8008d58:	d0ed      	beq.n	8008d36 <_strtod_l+0x8f6>
 8008d5a:	9a04      	ldr	r2, [sp, #16]
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	4649      	mov	r1, r9
 8008d60:	f1ba 0f00 	cmp.w	sl, #0
 8008d64:	d014      	beq.n	8008d90 <_strtod_l+0x950>
 8008d66:	f7ff fb50 	bl	800840a <sulp>
 8008d6a:	ee38 7b00 	vadd.f64	d7, d8, d0
 8008d6e:	ec59 8b17 	vmov	r8, r9, d7
 8008d72:	e7e0      	b.n	8008d36 <_strtod_l+0x8f6>
 8008d74:	4013      	ands	r3, r2
 8008d76:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008d7a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008d7e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008d82:	f04f 38ff 	mov.w	r8, #4294967295
 8008d86:	e7d6      	b.n	8008d36 <_strtod_l+0x8f6>
 8008d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d8a:	ea13 0f08 	tst.w	r3, r8
 8008d8e:	e7e3      	b.n	8008d58 <_strtod_l+0x918>
 8008d90:	f7ff fb3b 	bl	800840a <sulp>
 8008d94:	ee38 0b40 	vsub.f64	d0, d8, d0
 8008d98:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da0:	ec59 8b10 	vmov	r8, r9, d0
 8008da4:	d1c7      	bne.n	8008d36 <_strtod_l+0x8f6>
 8008da6:	e5f7      	b.n	8008998 <_strtod_l+0x558>
 8008da8:	4631      	mov	r1, r6
 8008daa:	4628      	mov	r0, r5
 8008dac:	f001 ff68 	bl	800ac80 <__ratio>
 8008db0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008db4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dbc:	d865      	bhi.n	8008e8a <_strtod_l+0xa4a>
 8008dbe:	f1ba 0f00 	cmp.w	sl, #0
 8008dc2:	d042      	beq.n	8008e4a <_strtod_l+0xa0a>
 8008dc4:	4b75      	ldr	r3, [pc, #468]	; (8008f9c <_strtod_l+0xb5c>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8008dcc:	4871      	ldr	r0, [pc, #452]	; (8008f94 <_strtod_l+0xb54>)
 8008dce:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8008fa8 <_strtod_l+0xb68>
 8008dd2:	ea0b 0100 	and.w	r1, fp, r0
 8008dd6:	4561      	cmp	r1, ip
 8008dd8:	f040 808e 	bne.w	8008ef8 <_strtod_l+0xab8>
 8008ddc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008de0:	ec49 8b10 	vmov	d0, r8, r9
 8008de4:	ec43 2b1c 	vmov	d12, r2, r3
 8008de8:	910a      	str	r1, [sp, #40]	; 0x28
 8008dea:	f001 fe71 	bl	800aad0 <__ulp>
 8008dee:	ec49 8b1e 	vmov	d14, r8, r9
 8008df2:	4868      	ldr	r0, [pc, #416]	; (8008f94 <_strtod_l+0xb54>)
 8008df4:	eeac eb00 	vfma.f64	d14, d12, d0
 8008df8:	ee1e 3a90 	vmov	r3, s29
 8008dfc:	4a68      	ldr	r2, [pc, #416]	; (8008fa0 <_strtod_l+0xb60>)
 8008dfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e00:	4018      	ands	r0, r3
 8008e02:	4290      	cmp	r0, r2
 8008e04:	ec59 8b1e 	vmov	r8, r9, d14
 8008e08:	d94e      	bls.n	8008ea8 <_strtod_l+0xa68>
 8008e0a:	ee18 3a90 	vmov	r3, s17
 8008e0e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d104      	bne.n	8008e20 <_strtod_l+0x9e0>
 8008e16:	ee18 3a10 	vmov	r3, s16
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	f43f ad4c 	beq.w	80088b8 <_strtod_l+0x478>
 8008e20:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008f98 <_strtod_l+0xb58>
 8008e24:	f04f 38ff 	mov.w	r8, #4294967295
 8008e28:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f001 fb1e 	bl	800a46c <_Bfree>
 8008e30:	4639      	mov	r1, r7
 8008e32:	4620      	mov	r0, r4
 8008e34:	f001 fb1a 	bl	800a46c <_Bfree>
 8008e38:	4631      	mov	r1, r6
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f001 fb16 	bl	800a46c <_Bfree>
 8008e40:	4629      	mov	r1, r5
 8008e42:	4620      	mov	r0, r4
 8008e44:	f001 fb12 	bl	800a46c <_Bfree>
 8008e48:	e619      	b.n	8008a7e <_strtod_l+0x63e>
 8008e4a:	f1b8 0f00 	cmp.w	r8, #0
 8008e4e:	d112      	bne.n	8008e76 <_strtod_l+0xa36>
 8008e50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e54:	b9b3      	cbnz	r3, 8008e84 <_strtod_l+0xa44>
 8008e56:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008e5a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e62:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008e66:	bf58      	it	pl
 8008e68:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8008e6c:	eeb1 7b4d 	vneg.f64	d7, d13
 8008e70:	ec53 2b17 	vmov	r2, r3, d7
 8008e74:	e7aa      	b.n	8008dcc <_strtod_l+0x98c>
 8008e76:	f1b8 0f01 	cmp.w	r8, #1
 8008e7a:	d103      	bne.n	8008e84 <_strtod_l+0xa44>
 8008e7c:	f1b9 0f00 	cmp.w	r9, #0
 8008e80:	f43f ad8a 	beq.w	8008998 <_strtod_l+0x558>
 8008e84:	4b47      	ldr	r3, [pc, #284]	; (8008fa4 <_strtod_l+0xb64>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	e79e      	b.n	8008dc8 <_strtod_l+0x988>
 8008e8a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008e8e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8008e92:	f1ba 0f00 	cmp.w	sl, #0
 8008e96:	d104      	bne.n	8008ea2 <_strtod_l+0xa62>
 8008e98:	eeb1 7b4d 	vneg.f64	d7, d13
 8008e9c:	ec53 2b17 	vmov	r2, r3, d7
 8008ea0:	e794      	b.n	8008dcc <_strtod_l+0x98c>
 8008ea2:	eeb0 7b4d 	vmov.f64	d7, d13
 8008ea6:	e7f9      	b.n	8008e9c <_strtod_l+0xa5c>
 8008ea8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008eac:	9b04      	ldr	r3, [sp, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1ba      	bne.n	8008e28 <_strtod_l+0x9e8>
 8008eb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008eb6:	0d1b      	lsrs	r3, r3, #20
 8008eb8:	051b      	lsls	r3, r3, #20
 8008eba:	4299      	cmp	r1, r3
 8008ebc:	d1b4      	bne.n	8008e28 <_strtod_l+0x9e8>
 8008ebe:	ec51 0b1d 	vmov	r0, r1, d13
 8008ec2:	f7f7 fbe9 	bl	8000698 <__aeabi_d2lz>
 8008ec6:	f7f7 fba1 	bl	800060c <__aeabi_l2d>
 8008eca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ece:	ec41 0b17 	vmov	d7, r0, r1
 8008ed2:	ea43 0308 	orr.w	r3, r3, r8
 8008ed6:	ea53 030a 	orrs.w	r3, r3, sl
 8008eda:	ee3d db47 	vsub.f64	d13, d13, d7
 8008ede:	d03c      	beq.n	8008f5a <_strtod_l+0xb1a>
 8008ee0:	eeb4 dbca 	vcmpe.f64	d13, d10
 8008ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee8:	f53f acf0 	bmi.w	80088cc <_strtod_l+0x48c>
 8008eec:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8008ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef4:	dd98      	ble.n	8008e28 <_strtod_l+0x9e8>
 8008ef6:	e4e9      	b.n	80088cc <_strtod_l+0x48c>
 8008ef8:	9804      	ldr	r0, [sp, #16]
 8008efa:	b1f0      	cbz	r0, 8008f3a <_strtod_l+0xafa>
 8008efc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8008f00:	d81b      	bhi.n	8008f3a <_strtod_l+0xafa>
 8008f02:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008f88 <_strtod_l+0xb48>
 8008f06:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8008f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f0e:	d811      	bhi.n	8008f34 <_strtod_l+0xaf4>
 8008f10:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8008f14:	ee1d 3a10 	vmov	r3, s26
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	bf38      	it	cc
 8008f1c:	2301      	movcc	r3, #1
 8008f1e:	ee0d 3a10 	vmov	s26, r3
 8008f22:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8008f26:	f1ba 0f00 	cmp.w	sl, #0
 8008f2a:	d113      	bne.n	8008f54 <_strtod_l+0xb14>
 8008f2c:	eeb1 7b4d 	vneg.f64	d7, d13
 8008f30:	ec53 2b17 	vmov	r2, r3, d7
 8008f34:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8008f38:	1a43      	subs	r3, r0, r1
 8008f3a:	eeb0 0b48 	vmov.f64	d0, d8
 8008f3e:	ec43 2b1c 	vmov	d12, r2, r3
 8008f42:	910a      	str	r1, [sp, #40]	; 0x28
 8008f44:	f001 fdc4 	bl	800aad0 <__ulp>
 8008f48:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f4a:	eeac 8b00 	vfma.f64	d8, d12, d0
 8008f4e:	ec59 8b18 	vmov	r8, r9, d8
 8008f52:	e7ab      	b.n	8008eac <_strtod_l+0xa6c>
 8008f54:	eeb0 7b4d 	vmov.f64	d7, d13
 8008f58:	e7ea      	b.n	8008f30 <_strtod_l+0xaf0>
 8008f5a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8008f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f62:	f57f af61 	bpl.w	8008e28 <_strtod_l+0x9e8>
 8008f66:	e4b1      	b.n	80088cc <_strtod_l+0x48c>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	9308      	str	r3, [sp, #32]
 8008f6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f70:	6013      	str	r3, [r2, #0]
 8008f72:	f7ff baad 	b.w	80084d0 <_strtod_l+0x90>
 8008f76:	2a65      	cmp	r2, #101	; 0x65
 8008f78:	f43f ab9f 	beq.w	80086ba <_strtod_l+0x27a>
 8008f7c:	2a45      	cmp	r2, #69	; 0x45
 8008f7e:	f43f ab9c 	beq.w	80086ba <_strtod_l+0x27a>
 8008f82:	2101      	movs	r1, #1
 8008f84:	f7ff bbd4 	b.w	8008730 <_strtod_l+0x2f0>
 8008f88:	ffc00000 	.word	0xffc00000
 8008f8c:	41dfffff 	.word	0x41dfffff
 8008f90:	000fffff 	.word	0x000fffff
 8008f94:	7ff00000 	.word	0x7ff00000
 8008f98:	7fefffff 	.word	0x7fefffff
 8008f9c:	3ff00000 	.word	0x3ff00000
 8008fa0:	7c9fffff 	.word	0x7c9fffff
 8008fa4:	bff00000 	.word	0xbff00000
 8008fa8:	7fe00000 	.word	0x7fe00000

08008fac <_strtod_r>:
 8008fac:	4b01      	ldr	r3, [pc, #4]	; (8008fb4 <_strtod_r+0x8>)
 8008fae:	f7ff ba47 	b.w	8008440 <_strtod_l>
 8008fb2:	bf00      	nop
 8008fb4:	2000008c 	.word	0x2000008c

08008fb8 <_strtol_l.constprop.0>:
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fbe:	d001      	beq.n	8008fc4 <_strtol_l.constprop.0+0xc>
 8008fc0:	2b24      	cmp	r3, #36	; 0x24
 8008fc2:	d906      	bls.n	8008fd2 <_strtol_l.constprop.0+0x1a>
 8008fc4:	f7fe fb6c 	bl	80076a0 <__errno>
 8008fc8:	2316      	movs	r3, #22
 8008fca:	6003      	str	r3, [r0, #0]
 8008fcc:	2000      	movs	r0, #0
 8008fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80090b8 <_strtol_l.constprop.0+0x100>
 8008fd6:	460d      	mov	r5, r1
 8008fd8:	462e      	mov	r6, r5
 8008fda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fde:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008fe2:	f017 0708 	ands.w	r7, r7, #8
 8008fe6:	d1f7      	bne.n	8008fd8 <_strtol_l.constprop.0+0x20>
 8008fe8:	2c2d      	cmp	r4, #45	; 0x2d
 8008fea:	d132      	bne.n	8009052 <_strtol_l.constprop.0+0x9a>
 8008fec:	782c      	ldrb	r4, [r5, #0]
 8008fee:	2701      	movs	r7, #1
 8008ff0:	1cb5      	adds	r5, r6, #2
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d05b      	beq.n	80090ae <_strtol_l.constprop.0+0xf6>
 8008ff6:	2b10      	cmp	r3, #16
 8008ff8:	d109      	bne.n	800900e <_strtol_l.constprop.0+0x56>
 8008ffa:	2c30      	cmp	r4, #48	; 0x30
 8008ffc:	d107      	bne.n	800900e <_strtol_l.constprop.0+0x56>
 8008ffe:	782c      	ldrb	r4, [r5, #0]
 8009000:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009004:	2c58      	cmp	r4, #88	; 0x58
 8009006:	d14d      	bne.n	80090a4 <_strtol_l.constprop.0+0xec>
 8009008:	786c      	ldrb	r4, [r5, #1]
 800900a:	2310      	movs	r3, #16
 800900c:	3502      	adds	r5, #2
 800900e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009012:	f108 38ff 	add.w	r8, r8, #4294967295
 8009016:	f04f 0c00 	mov.w	ip, #0
 800901a:	fbb8 f9f3 	udiv	r9, r8, r3
 800901e:	4666      	mov	r6, ip
 8009020:	fb03 8a19 	mls	sl, r3, r9, r8
 8009024:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009028:	f1be 0f09 	cmp.w	lr, #9
 800902c:	d816      	bhi.n	800905c <_strtol_l.constprop.0+0xa4>
 800902e:	4674      	mov	r4, lr
 8009030:	42a3      	cmp	r3, r4
 8009032:	dd24      	ble.n	800907e <_strtol_l.constprop.0+0xc6>
 8009034:	f1bc 0f00 	cmp.w	ip, #0
 8009038:	db1e      	blt.n	8009078 <_strtol_l.constprop.0+0xc0>
 800903a:	45b1      	cmp	r9, r6
 800903c:	d31c      	bcc.n	8009078 <_strtol_l.constprop.0+0xc0>
 800903e:	d101      	bne.n	8009044 <_strtol_l.constprop.0+0x8c>
 8009040:	45a2      	cmp	sl, r4
 8009042:	db19      	blt.n	8009078 <_strtol_l.constprop.0+0xc0>
 8009044:	fb06 4603 	mla	r6, r6, r3, r4
 8009048:	f04f 0c01 	mov.w	ip, #1
 800904c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009050:	e7e8      	b.n	8009024 <_strtol_l.constprop.0+0x6c>
 8009052:	2c2b      	cmp	r4, #43	; 0x2b
 8009054:	bf04      	itt	eq
 8009056:	782c      	ldrbeq	r4, [r5, #0]
 8009058:	1cb5      	addeq	r5, r6, #2
 800905a:	e7ca      	b.n	8008ff2 <_strtol_l.constprop.0+0x3a>
 800905c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009060:	f1be 0f19 	cmp.w	lr, #25
 8009064:	d801      	bhi.n	800906a <_strtol_l.constprop.0+0xb2>
 8009066:	3c37      	subs	r4, #55	; 0x37
 8009068:	e7e2      	b.n	8009030 <_strtol_l.constprop.0+0x78>
 800906a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800906e:	f1be 0f19 	cmp.w	lr, #25
 8009072:	d804      	bhi.n	800907e <_strtol_l.constprop.0+0xc6>
 8009074:	3c57      	subs	r4, #87	; 0x57
 8009076:	e7db      	b.n	8009030 <_strtol_l.constprop.0+0x78>
 8009078:	f04f 3cff 	mov.w	ip, #4294967295
 800907c:	e7e6      	b.n	800904c <_strtol_l.constprop.0+0x94>
 800907e:	f1bc 0f00 	cmp.w	ip, #0
 8009082:	da05      	bge.n	8009090 <_strtol_l.constprop.0+0xd8>
 8009084:	2322      	movs	r3, #34	; 0x22
 8009086:	6003      	str	r3, [r0, #0]
 8009088:	4646      	mov	r6, r8
 800908a:	b942      	cbnz	r2, 800909e <_strtol_l.constprop.0+0xe6>
 800908c:	4630      	mov	r0, r6
 800908e:	e79e      	b.n	8008fce <_strtol_l.constprop.0+0x16>
 8009090:	b107      	cbz	r7, 8009094 <_strtol_l.constprop.0+0xdc>
 8009092:	4276      	negs	r6, r6
 8009094:	2a00      	cmp	r2, #0
 8009096:	d0f9      	beq.n	800908c <_strtol_l.constprop.0+0xd4>
 8009098:	f1bc 0f00 	cmp.w	ip, #0
 800909c:	d000      	beq.n	80090a0 <_strtol_l.constprop.0+0xe8>
 800909e:	1e69      	subs	r1, r5, #1
 80090a0:	6011      	str	r1, [r2, #0]
 80090a2:	e7f3      	b.n	800908c <_strtol_l.constprop.0+0xd4>
 80090a4:	2430      	movs	r4, #48	; 0x30
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1b1      	bne.n	800900e <_strtol_l.constprop.0+0x56>
 80090aa:	2308      	movs	r3, #8
 80090ac:	e7af      	b.n	800900e <_strtol_l.constprop.0+0x56>
 80090ae:	2c30      	cmp	r4, #48	; 0x30
 80090b0:	d0a5      	beq.n	8008ffe <_strtol_l.constprop.0+0x46>
 80090b2:	230a      	movs	r3, #10
 80090b4:	e7ab      	b.n	800900e <_strtol_l.constprop.0+0x56>
 80090b6:	bf00      	nop
 80090b8:	0800bf31 	.word	0x0800bf31

080090bc <_strtol_r>:
 80090bc:	f7ff bf7c 	b.w	8008fb8 <_strtol_l.constprop.0>

080090c0 <quorem>:
 80090c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	6903      	ldr	r3, [r0, #16]
 80090c6:	690c      	ldr	r4, [r1, #16]
 80090c8:	42a3      	cmp	r3, r4
 80090ca:	4607      	mov	r7, r0
 80090cc:	f2c0 8081 	blt.w	80091d2 <quorem+0x112>
 80090d0:	3c01      	subs	r4, #1
 80090d2:	f101 0814 	add.w	r8, r1, #20
 80090d6:	f100 0514 	add.w	r5, r0, #20
 80090da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090de:	9301      	str	r3, [sp, #4]
 80090e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80090e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090e8:	3301      	adds	r3, #1
 80090ea:	429a      	cmp	r2, r3
 80090ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80090f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80090f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80090f8:	d331      	bcc.n	800915e <quorem+0x9e>
 80090fa:	f04f 0e00 	mov.w	lr, #0
 80090fe:	4640      	mov	r0, r8
 8009100:	46ac      	mov	ip, r5
 8009102:	46f2      	mov	sl, lr
 8009104:	f850 2b04 	ldr.w	r2, [r0], #4
 8009108:	b293      	uxth	r3, r2
 800910a:	fb06 e303 	mla	r3, r6, r3, lr
 800910e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009112:	b29b      	uxth	r3, r3
 8009114:	ebaa 0303 	sub.w	r3, sl, r3
 8009118:	f8dc a000 	ldr.w	sl, [ip]
 800911c:	0c12      	lsrs	r2, r2, #16
 800911e:	fa13 f38a 	uxtah	r3, r3, sl
 8009122:	fb06 e202 	mla	r2, r6, r2, lr
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	9b00      	ldr	r3, [sp, #0]
 800912a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800912e:	b292      	uxth	r2, r2
 8009130:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009138:	f8bd 3000 	ldrh.w	r3, [sp]
 800913c:	4581      	cmp	r9, r0
 800913e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009142:	f84c 3b04 	str.w	r3, [ip], #4
 8009146:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800914a:	d2db      	bcs.n	8009104 <quorem+0x44>
 800914c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009150:	b92b      	cbnz	r3, 800915e <quorem+0x9e>
 8009152:	9b01      	ldr	r3, [sp, #4]
 8009154:	3b04      	subs	r3, #4
 8009156:	429d      	cmp	r5, r3
 8009158:	461a      	mov	r2, r3
 800915a:	d32e      	bcc.n	80091ba <quorem+0xfa>
 800915c:	613c      	str	r4, [r7, #16]
 800915e:	4638      	mov	r0, r7
 8009160:	f001 fc10 	bl	800a984 <__mcmp>
 8009164:	2800      	cmp	r0, #0
 8009166:	db24      	blt.n	80091b2 <quorem+0xf2>
 8009168:	3601      	adds	r6, #1
 800916a:	4628      	mov	r0, r5
 800916c:	f04f 0c00 	mov.w	ip, #0
 8009170:	f858 2b04 	ldr.w	r2, [r8], #4
 8009174:	f8d0 e000 	ldr.w	lr, [r0]
 8009178:	b293      	uxth	r3, r2
 800917a:	ebac 0303 	sub.w	r3, ip, r3
 800917e:	0c12      	lsrs	r2, r2, #16
 8009180:	fa13 f38e 	uxtah	r3, r3, lr
 8009184:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800918c:	b29b      	uxth	r3, r3
 800918e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009192:	45c1      	cmp	r9, r8
 8009194:	f840 3b04 	str.w	r3, [r0], #4
 8009198:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800919c:	d2e8      	bcs.n	8009170 <quorem+0xb0>
 800919e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091a6:	b922      	cbnz	r2, 80091b2 <quorem+0xf2>
 80091a8:	3b04      	subs	r3, #4
 80091aa:	429d      	cmp	r5, r3
 80091ac:	461a      	mov	r2, r3
 80091ae:	d30a      	bcc.n	80091c6 <quorem+0x106>
 80091b0:	613c      	str	r4, [r7, #16]
 80091b2:	4630      	mov	r0, r6
 80091b4:	b003      	add	sp, #12
 80091b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ba:	6812      	ldr	r2, [r2, #0]
 80091bc:	3b04      	subs	r3, #4
 80091be:	2a00      	cmp	r2, #0
 80091c0:	d1cc      	bne.n	800915c <quorem+0x9c>
 80091c2:	3c01      	subs	r4, #1
 80091c4:	e7c7      	b.n	8009156 <quorem+0x96>
 80091c6:	6812      	ldr	r2, [r2, #0]
 80091c8:	3b04      	subs	r3, #4
 80091ca:	2a00      	cmp	r2, #0
 80091cc:	d1f0      	bne.n	80091b0 <quorem+0xf0>
 80091ce:	3c01      	subs	r4, #1
 80091d0:	e7eb      	b.n	80091aa <quorem+0xea>
 80091d2:	2000      	movs	r0, #0
 80091d4:	e7ee      	b.n	80091b4 <quorem+0xf4>
	...

080091d8 <_dtoa_r>:
 80091d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091dc:	ed2d 8b02 	vpush	{d8}
 80091e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80091e2:	b091      	sub	sp, #68	; 0x44
 80091e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80091e8:	ec59 8b10 	vmov	r8, r9, d0
 80091ec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80091ee:	9106      	str	r1, [sp, #24]
 80091f0:	4606      	mov	r6, r0
 80091f2:	9208      	str	r2, [sp, #32]
 80091f4:	930c      	str	r3, [sp, #48]	; 0x30
 80091f6:	b975      	cbnz	r5, 8009216 <_dtoa_r+0x3e>
 80091f8:	2010      	movs	r0, #16
 80091fa:	f001 f8cf 	bl	800a39c <malloc>
 80091fe:	4602      	mov	r2, r0
 8009200:	6270      	str	r0, [r6, #36]	; 0x24
 8009202:	b920      	cbnz	r0, 800920e <_dtoa_r+0x36>
 8009204:	4baa      	ldr	r3, [pc, #680]	; (80094b0 <_dtoa_r+0x2d8>)
 8009206:	21ea      	movs	r1, #234	; 0xea
 8009208:	48aa      	ldr	r0, [pc, #680]	; (80094b4 <_dtoa_r+0x2dc>)
 800920a:	f002 f83b 	bl	800b284 <__assert_func>
 800920e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009212:	6005      	str	r5, [r0, #0]
 8009214:	60c5      	str	r5, [r0, #12]
 8009216:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009218:	6819      	ldr	r1, [r3, #0]
 800921a:	b151      	cbz	r1, 8009232 <_dtoa_r+0x5a>
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	604a      	str	r2, [r1, #4]
 8009220:	2301      	movs	r3, #1
 8009222:	4093      	lsls	r3, r2
 8009224:	608b      	str	r3, [r1, #8]
 8009226:	4630      	mov	r0, r6
 8009228:	f001 f920 	bl	800a46c <_Bfree>
 800922c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800922e:	2200      	movs	r2, #0
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	f1b9 0300 	subs.w	r3, r9, #0
 8009236:	bfbb      	ittet	lt
 8009238:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800923c:	9303      	strlt	r3, [sp, #12]
 800923e:	2300      	movge	r3, #0
 8009240:	2201      	movlt	r2, #1
 8009242:	bfac      	ite	ge
 8009244:	6023      	strge	r3, [r4, #0]
 8009246:	6022      	strlt	r2, [r4, #0]
 8009248:	4b9b      	ldr	r3, [pc, #620]	; (80094b8 <_dtoa_r+0x2e0>)
 800924a:	9c03      	ldr	r4, [sp, #12]
 800924c:	43a3      	bics	r3, r4
 800924e:	d11c      	bne.n	800928a <_dtoa_r+0xb2>
 8009250:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009252:	f242 730f 	movw	r3, #9999	; 0x270f
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800925c:	ea53 0308 	orrs.w	r3, r3, r8
 8009260:	f000 84fd 	beq.w	8009c5e <_dtoa_r+0xa86>
 8009264:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009266:	b963      	cbnz	r3, 8009282 <_dtoa_r+0xaa>
 8009268:	4b94      	ldr	r3, [pc, #592]	; (80094bc <_dtoa_r+0x2e4>)
 800926a:	e01f      	b.n	80092ac <_dtoa_r+0xd4>
 800926c:	4b94      	ldr	r3, [pc, #592]	; (80094c0 <_dtoa_r+0x2e8>)
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	3308      	adds	r3, #8
 8009272:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009274:	6013      	str	r3, [r2, #0]
 8009276:	9801      	ldr	r0, [sp, #4]
 8009278:	b011      	add	sp, #68	; 0x44
 800927a:	ecbd 8b02 	vpop	{d8}
 800927e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009282:	4b8e      	ldr	r3, [pc, #568]	; (80094bc <_dtoa_r+0x2e4>)
 8009284:	9301      	str	r3, [sp, #4]
 8009286:	3303      	adds	r3, #3
 8009288:	e7f3      	b.n	8009272 <_dtoa_r+0x9a>
 800928a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800928e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009296:	d10b      	bne.n	80092b0 <_dtoa_r+0xd8>
 8009298:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800929a:	2301      	movs	r3, #1
 800929c:	6013      	str	r3, [r2, #0]
 800929e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 84d9 	beq.w	8009c58 <_dtoa_r+0xa80>
 80092a6:	4887      	ldr	r0, [pc, #540]	; (80094c4 <_dtoa_r+0x2ec>)
 80092a8:	6018      	str	r0, [r3, #0]
 80092aa:	1e43      	subs	r3, r0, #1
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	e7e2      	b.n	8009276 <_dtoa_r+0x9e>
 80092b0:	a90f      	add	r1, sp, #60	; 0x3c
 80092b2:	aa0e      	add	r2, sp, #56	; 0x38
 80092b4:	4630      	mov	r0, r6
 80092b6:	eeb0 0b48 	vmov.f64	d0, d8
 80092ba:	f001 fc85 	bl	800abc8 <__d2b>
 80092be:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80092c2:	4605      	mov	r5, r0
 80092c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80092c6:	2900      	cmp	r1, #0
 80092c8:	d046      	beq.n	8009358 <_dtoa_r+0x180>
 80092ca:	ee18 4a90 	vmov	r4, s17
 80092ce:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80092d2:	ec53 2b18 	vmov	r2, r3, d8
 80092d6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80092da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80092de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80092e2:	2400      	movs	r4, #0
 80092e4:	ec43 2b16 	vmov	d6, r2, r3
 80092e8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80092ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009498 <_dtoa_r+0x2c0>
 80092f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80092f4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80094a0 <_dtoa_r+0x2c8>
 80092f8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80092fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80094a8 <_dtoa_r+0x2d0>
 8009300:	ee07 1a90 	vmov	s15, r1
 8009304:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009308:	eeb0 7b46 	vmov.f64	d7, d6
 800930c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009310:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009314:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800931c:	ee16 ba90 	vmov	fp, s13
 8009320:	940a      	str	r4, [sp, #40]	; 0x28
 8009322:	d508      	bpl.n	8009336 <_dtoa_r+0x15e>
 8009324:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009328:	eeb4 6b47 	vcmp.f64	d6, d7
 800932c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009330:	bf18      	it	ne
 8009332:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009336:	f1bb 0f16 	cmp.w	fp, #22
 800933a:	d82f      	bhi.n	800939c <_dtoa_r+0x1c4>
 800933c:	4b62      	ldr	r3, [pc, #392]	; (80094c8 <_dtoa_r+0x2f0>)
 800933e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009342:	ed93 7b00 	vldr	d7, [r3]
 8009346:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800934a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934e:	d501      	bpl.n	8009354 <_dtoa_r+0x17c>
 8009350:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009354:	2300      	movs	r3, #0
 8009356:	e022      	b.n	800939e <_dtoa_r+0x1c6>
 8009358:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800935a:	4401      	add	r1, r0
 800935c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009360:	2b20      	cmp	r3, #32
 8009362:	bfc1      	itttt	gt
 8009364:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009368:	fa04 f303 	lslgt.w	r3, r4, r3
 800936c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009370:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009374:	bfd6      	itet	le
 8009376:	f1c3 0320 	rsble	r3, r3, #32
 800937a:	ea43 0808 	orrgt.w	r8, r3, r8
 800937e:	fa08 f803 	lslle.w	r8, r8, r3
 8009382:	ee07 8a90 	vmov	s15, r8
 8009386:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800938a:	3901      	subs	r1, #1
 800938c:	ee17 4a90 	vmov	r4, s15
 8009390:	ec53 2b17 	vmov	r2, r3, d7
 8009394:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009398:	2401      	movs	r4, #1
 800939a:	e7a3      	b.n	80092e4 <_dtoa_r+0x10c>
 800939c:	2301      	movs	r3, #1
 800939e:	930b      	str	r3, [sp, #44]	; 0x2c
 80093a0:	1a43      	subs	r3, r0, r1
 80093a2:	1e5a      	subs	r2, r3, #1
 80093a4:	bf45      	ittet	mi
 80093a6:	f1c3 0301 	rsbmi	r3, r3, #1
 80093aa:	9304      	strmi	r3, [sp, #16]
 80093ac:	2300      	movpl	r3, #0
 80093ae:	2300      	movmi	r3, #0
 80093b0:	9205      	str	r2, [sp, #20]
 80093b2:	bf54      	ite	pl
 80093b4:	9304      	strpl	r3, [sp, #16]
 80093b6:	9305      	strmi	r3, [sp, #20]
 80093b8:	f1bb 0f00 	cmp.w	fp, #0
 80093bc:	db18      	blt.n	80093f0 <_dtoa_r+0x218>
 80093be:	9b05      	ldr	r3, [sp, #20]
 80093c0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80093c4:	445b      	add	r3, fp
 80093c6:	9305      	str	r3, [sp, #20]
 80093c8:	2300      	movs	r3, #0
 80093ca:	9a06      	ldr	r2, [sp, #24]
 80093cc:	2a09      	cmp	r2, #9
 80093ce:	d849      	bhi.n	8009464 <_dtoa_r+0x28c>
 80093d0:	2a05      	cmp	r2, #5
 80093d2:	bfc4      	itt	gt
 80093d4:	3a04      	subgt	r2, #4
 80093d6:	9206      	strgt	r2, [sp, #24]
 80093d8:	9a06      	ldr	r2, [sp, #24]
 80093da:	f1a2 0202 	sub.w	r2, r2, #2
 80093de:	bfcc      	ite	gt
 80093e0:	2400      	movgt	r4, #0
 80093e2:	2401      	movle	r4, #1
 80093e4:	2a03      	cmp	r2, #3
 80093e6:	d848      	bhi.n	800947a <_dtoa_r+0x2a2>
 80093e8:	e8df f002 	tbb	[pc, r2]
 80093ec:	3a2c2e0b 	.word	0x3a2c2e0b
 80093f0:	9b04      	ldr	r3, [sp, #16]
 80093f2:	2200      	movs	r2, #0
 80093f4:	eba3 030b 	sub.w	r3, r3, fp
 80093f8:	9304      	str	r3, [sp, #16]
 80093fa:	9209      	str	r2, [sp, #36]	; 0x24
 80093fc:	f1cb 0300 	rsb	r3, fp, #0
 8009400:	e7e3      	b.n	80093ca <_dtoa_r+0x1f2>
 8009402:	2200      	movs	r2, #0
 8009404:	9207      	str	r2, [sp, #28]
 8009406:	9a08      	ldr	r2, [sp, #32]
 8009408:	2a00      	cmp	r2, #0
 800940a:	dc39      	bgt.n	8009480 <_dtoa_r+0x2a8>
 800940c:	f04f 0a01 	mov.w	sl, #1
 8009410:	46d1      	mov	r9, sl
 8009412:	4652      	mov	r2, sl
 8009414:	f8cd a020 	str.w	sl, [sp, #32]
 8009418:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800941a:	2100      	movs	r1, #0
 800941c:	6079      	str	r1, [r7, #4]
 800941e:	2004      	movs	r0, #4
 8009420:	f100 0c14 	add.w	ip, r0, #20
 8009424:	4594      	cmp	ip, r2
 8009426:	6879      	ldr	r1, [r7, #4]
 8009428:	d92f      	bls.n	800948a <_dtoa_r+0x2b2>
 800942a:	4630      	mov	r0, r6
 800942c:	930d      	str	r3, [sp, #52]	; 0x34
 800942e:	f000 ffdd 	bl	800a3ec <_Balloc>
 8009432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009434:	9001      	str	r0, [sp, #4]
 8009436:	4602      	mov	r2, r0
 8009438:	2800      	cmp	r0, #0
 800943a:	d149      	bne.n	80094d0 <_dtoa_r+0x2f8>
 800943c:	4b23      	ldr	r3, [pc, #140]	; (80094cc <_dtoa_r+0x2f4>)
 800943e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009442:	e6e1      	b.n	8009208 <_dtoa_r+0x30>
 8009444:	2201      	movs	r2, #1
 8009446:	e7dd      	b.n	8009404 <_dtoa_r+0x22c>
 8009448:	2200      	movs	r2, #0
 800944a:	9207      	str	r2, [sp, #28]
 800944c:	9a08      	ldr	r2, [sp, #32]
 800944e:	eb0b 0a02 	add.w	sl, fp, r2
 8009452:	f10a 0901 	add.w	r9, sl, #1
 8009456:	464a      	mov	r2, r9
 8009458:	2a01      	cmp	r2, #1
 800945a:	bfb8      	it	lt
 800945c:	2201      	movlt	r2, #1
 800945e:	e7db      	b.n	8009418 <_dtoa_r+0x240>
 8009460:	2201      	movs	r2, #1
 8009462:	e7f2      	b.n	800944a <_dtoa_r+0x272>
 8009464:	2401      	movs	r4, #1
 8009466:	2200      	movs	r2, #0
 8009468:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800946c:	f04f 3aff 	mov.w	sl, #4294967295
 8009470:	2100      	movs	r1, #0
 8009472:	46d1      	mov	r9, sl
 8009474:	2212      	movs	r2, #18
 8009476:	9108      	str	r1, [sp, #32]
 8009478:	e7ce      	b.n	8009418 <_dtoa_r+0x240>
 800947a:	2201      	movs	r2, #1
 800947c:	9207      	str	r2, [sp, #28]
 800947e:	e7f5      	b.n	800946c <_dtoa_r+0x294>
 8009480:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009484:	46d1      	mov	r9, sl
 8009486:	4652      	mov	r2, sl
 8009488:	e7c6      	b.n	8009418 <_dtoa_r+0x240>
 800948a:	3101      	adds	r1, #1
 800948c:	6079      	str	r1, [r7, #4]
 800948e:	0040      	lsls	r0, r0, #1
 8009490:	e7c6      	b.n	8009420 <_dtoa_r+0x248>
 8009492:	bf00      	nop
 8009494:	f3af 8000 	nop.w
 8009498:	636f4361 	.word	0x636f4361
 800949c:	3fd287a7 	.word	0x3fd287a7
 80094a0:	8b60c8b3 	.word	0x8b60c8b3
 80094a4:	3fc68a28 	.word	0x3fc68a28
 80094a8:	509f79fb 	.word	0x509f79fb
 80094ac:	3fd34413 	.word	0x3fd34413
 80094b0:	0800c03e 	.word	0x0800c03e
 80094b4:	0800c055 	.word	0x0800c055
 80094b8:	7ff00000 	.word	0x7ff00000
 80094bc:	0800c03a 	.word	0x0800c03a
 80094c0:	0800c031 	.word	0x0800c031
 80094c4:	0800beb1 	.word	0x0800beb1
 80094c8:	0800c1c0 	.word	0x0800c1c0
 80094cc:	0800c0b0 	.word	0x0800c0b0
 80094d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80094d2:	9901      	ldr	r1, [sp, #4]
 80094d4:	6011      	str	r1, [r2, #0]
 80094d6:	f1b9 0f0e 	cmp.w	r9, #14
 80094da:	d86c      	bhi.n	80095b6 <_dtoa_r+0x3de>
 80094dc:	2c00      	cmp	r4, #0
 80094de:	d06a      	beq.n	80095b6 <_dtoa_r+0x3de>
 80094e0:	f1bb 0f00 	cmp.w	fp, #0
 80094e4:	f340 80a0 	ble.w	8009628 <_dtoa_r+0x450>
 80094e8:	49c1      	ldr	r1, [pc, #772]	; (80097f0 <_dtoa_r+0x618>)
 80094ea:	f00b 020f 	and.w	r2, fp, #15
 80094ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80094f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80094f6:	ed92 7b00 	vldr	d7, [r2]
 80094fa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80094fe:	f000 8087 	beq.w	8009610 <_dtoa_r+0x438>
 8009502:	4abc      	ldr	r2, [pc, #752]	; (80097f4 <_dtoa_r+0x61c>)
 8009504:	ed92 6b08 	vldr	d6, [r2, #32]
 8009508:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800950c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009510:	f001 010f 	and.w	r1, r1, #15
 8009514:	2203      	movs	r2, #3
 8009516:	48b7      	ldr	r0, [pc, #732]	; (80097f4 <_dtoa_r+0x61c>)
 8009518:	2900      	cmp	r1, #0
 800951a:	d17b      	bne.n	8009614 <_dtoa_r+0x43c>
 800951c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009520:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009524:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009528:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800952a:	2900      	cmp	r1, #0
 800952c:	f000 80a2 	beq.w	8009674 <_dtoa_r+0x49c>
 8009530:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009534:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009538:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800953c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009540:	f140 8098 	bpl.w	8009674 <_dtoa_r+0x49c>
 8009544:	f1b9 0f00 	cmp.w	r9, #0
 8009548:	f000 8094 	beq.w	8009674 <_dtoa_r+0x49c>
 800954c:	f1ba 0f00 	cmp.w	sl, #0
 8009550:	dd2f      	ble.n	80095b2 <_dtoa_r+0x3da>
 8009552:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009556:	ee27 7b06 	vmul.f64	d7, d7, d6
 800955a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800955e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009562:	3201      	adds	r2, #1
 8009564:	4650      	mov	r0, sl
 8009566:	ed9d 6b02 	vldr	d6, [sp, #8]
 800956a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800956e:	ee07 2a90 	vmov	s15, r2
 8009572:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009576:	eea7 5b06 	vfma.f64	d5, d7, d6
 800957a:	ee15 4a90 	vmov	r4, s11
 800957e:	ec52 1b15 	vmov	r1, r2, d5
 8009582:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009586:	2800      	cmp	r0, #0
 8009588:	d177      	bne.n	800967a <_dtoa_r+0x4a2>
 800958a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800958e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009592:	ec42 1b17 	vmov	d7, r1, r2
 8009596:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800959a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800959e:	f300 8263 	bgt.w	8009a68 <_dtoa_r+0x890>
 80095a2:	eeb1 7b47 	vneg.f64	d7, d7
 80095a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80095aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ae:	f100 8258 	bmi.w	8009a62 <_dtoa_r+0x88a>
 80095b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80095b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095b8:	2a00      	cmp	r2, #0
 80095ba:	f2c0 811d 	blt.w	80097f8 <_dtoa_r+0x620>
 80095be:	f1bb 0f0e 	cmp.w	fp, #14
 80095c2:	f300 8119 	bgt.w	80097f8 <_dtoa_r+0x620>
 80095c6:	4b8a      	ldr	r3, [pc, #552]	; (80097f0 <_dtoa_r+0x618>)
 80095c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80095cc:	ed93 6b00 	vldr	d6, [r3]
 80095d0:	9b08      	ldr	r3, [sp, #32]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f280 80b7 	bge.w	8009746 <_dtoa_r+0x56e>
 80095d8:	f1b9 0f00 	cmp.w	r9, #0
 80095dc:	f300 80b3 	bgt.w	8009746 <_dtoa_r+0x56e>
 80095e0:	f040 823f 	bne.w	8009a62 <_dtoa_r+0x88a>
 80095e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80095e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80095ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80095f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f8:	464c      	mov	r4, r9
 80095fa:	464f      	mov	r7, r9
 80095fc:	f280 8215 	bge.w	8009a2a <_dtoa_r+0x852>
 8009600:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009604:	2331      	movs	r3, #49	; 0x31
 8009606:	f808 3b01 	strb.w	r3, [r8], #1
 800960a:	f10b 0b01 	add.w	fp, fp, #1
 800960e:	e211      	b.n	8009a34 <_dtoa_r+0x85c>
 8009610:	2202      	movs	r2, #2
 8009612:	e780      	b.n	8009516 <_dtoa_r+0x33e>
 8009614:	07cc      	lsls	r4, r1, #31
 8009616:	d504      	bpl.n	8009622 <_dtoa_r+0x44a>
 8009618:	ed90 6b00 	vldr	d6, [r0]
 800961c:	3201      	adds	r2, #1
 800961e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009622:	1049      	asrs	r1, r1, #1
 8009624:	3008      	adds	r0, #8
 8009626:	e777      	b.n	8009518 <_dtoa_r+0x340>
 8009628:	d022      	beq.n	8009670 <_dtoa_r+0x498>
 800962a:	f1cb 0100 	rsb	r1, fp, #0
 800962e:	4a70      	ldr	r2, [pc, #448]	; (80097f0 <_dtoa_r+0x618>)
 8009630:	f001 000f 	and.w	r0, r1, #15
 8009634:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009638:	ed92 7b00 	vldr	d7, [r2]
 800963c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009640:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009644:	486b      	ldr	r0, [pc, #428]	; (80097f4 <_dtoa_r+0x61c>)
 8009646:	1109      	asrs	r1, r1, #4
 8009648:	2400      	movs	r4, #0
 800964a:	2202      	movs	r2, #2
 800964c:	b929      	cbnz	r1, 800965a <_dtoa_r+0x482>
 800964e:	2c00      	cmp	r4, #0
 8009650:	f43f af6a 	beq.w	8009528 <_dtoa_r+0x350>
 8009654:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009658:	e766      	b.n	8009528 <_dtoa_r+0x350>
 800965a:	07cf      	lsls	r7, r1, #31
 800965c:	d505      	bpl.n	800966a <_dtoa_r+0x492>
 800965e:	ed90 6b00 	vldr	d6, [r0]
 8009662:	3201      	adds	r2, #1
 8009664:	2401      	movs	r4, #1
 8009666:	ee27 7b06 	vmul.f64	d7, d7, d6
 800966a:	1049      	asrs	r1, r1, #1
 800966c:	3008      	adds	r0, #8
 800966e:	e7ed      	b.n	800964c <_dtoa_r+0x474>
 8009670:	2202      	movs	r2, #2
 8009672:	e759      	b.n	8009528 <_dtoa_r+0x350>
 8009674:	465f      	mov	r7, fp
 8009676:	4648      	mov	r0, r9
 8009678:	e775      	b.n	8009566 <_dtoa_r+0x38e>
 800967a:	ec42 1b17 	vmov	d7, r1, r2
 800967e:	4a5c      	ldr	r2, [pc, #368]	; (80097f0 <_dtoa_r+0x618>)
 8009680:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009684:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009688:	9a01      	ldr	r2, [sp, #4]
 800968a:	1814      	adds	r4, r2, r0
 800968c:	9a07      	ldr	r2, [sp, #28]
 800968e:	b352      	cbz	r2, 80096e6 <_dtoa_r+0x50e>
 8009690:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009694:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009698:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800969c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80096a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80096a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80096a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80096ac:	ee14 2a90 	vmov	r2, s9
 80096b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80096b4:	3230      	adds	r2, #48	; 0x30
 80096b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80096ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c2:	f808 2b01 	strb.w	r2, [r8], #1
 80096c6:	d439      	bmi.n	800973c <_dtoa_r+0x564>
 80096c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80096cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80096d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d4:	d472      	bmi.n	80097bc <_dtoa_r+0x5e4>
 80096d6:	45a0      	cmp	r8, r4
 80096d8:	f43f af6b 	beq.w	80095b2 <_dtoa_r+0x3da>
 80096dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80096e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80096e4:	e7e0      	b.n	80096a8 <_dtoa_r+0x4d0>
 80096e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80096ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80096ee:	4621      	mov	r1, r4
 80096f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80096f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80096f8:	ee14 2a90 	vmov	r2, s9
 80096fc:	3230      	adds	r2, #48	; 0x30
 80096fe:	f808 2b01 	strb.w	r2, [r8], #1
 8009702:	45a0      	cmp	r8, r4
 8009704:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009708:	ee36 6b45 	vsub.f64	d6, d6, d5
 800970c:	d118      	bne.n	8009740 <_dtoa_r+0x568>
 800970e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009712:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009716:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800971a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971e:	dc4d      	bgt.n	80097bc <_dtoa_r+0x5e4>
 8009720:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009724:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800972c:	f57f af41 	bpl.w	80095b2 <_dtoa_r+0x3da>
 8009730:	4688      	mov	r8, r1
 8009732:	3901      	subs	r1, #1
 8009734:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009738:	2b30      	cmp	r3, #48	; 0x30
 800973a:	d0f9      	beq.n	8009730 <_dtoa_r+0x558>
 800973c:	46bb      	mov	fp, r7
 800973e:	e02a      	b.n	8009796 <_dtoa_r+0x5be>
 8009740:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009744:	e7d6      	b.n	80096f4 <_dtoa_r+0x51c>
 8009746:	ed9d 7b02 	vldr	d7, [sp, #8]
 800974a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800974e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009752:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009756:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800975a:	ee15 3a10 	vmov	r3, s10
 800975e:	3330      	adds	r3, #48	; 0x30
 8009760:	f808 3b01 	strb.w	r3, [r8], #1
 8009764:	9b01      	ldr	r3, [sp, #4]
 8009766:	eba8 0303 	sub.w	r3, r8, r3
 800976a:	4599      	cmp	r9, r3
 800976c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009770:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009774:	d133      	bne.n	80097de <_dtoa_r+0x606>
 8009776:	ee37 7b07 	vadd.f64	d7, d7, d7
 800977a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800977e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009782:	dc1a      	bgt.n	80097ba <_dtoa_r+0x5e2>
 8009784:	eeb4 7b46 	vcmp.f64	d7, d6
 8009788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800978c:	d103      	bne.n	8009796 <_dtoa_r+0x5be>
 800978e:	ee15 3a10 	vmov	r3, s10
 8009792:	07d9      	lsls	r1, r3, #31
 8009794:	d411      	bmi.n	80097ba <_dtoa_r+0x5e2>
 8009796:	4629      	mov	r1, r5
 8009798:	4630      	mov	r0, r6
 800979a:	f000 fe67 	bl	800a46c <_Bfree>
 800979e:	2300      	movs	r3, #0
 80097a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097a2:	f888 3000 	strb.w	r3, [r8]
 80097a6:	f10b 0301 	add.w	r3, fp, #1
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f43f ad61 	beq.w	8009276 <_dtoa_r+0x9e>
 80097b4:	f8c3 8000 	str.w	r8, [r3]
 80097b8:	e55d      	b.n	8009276 <_dtoa_r+0x9e>
 80097ba:	465f      	mov	r7, fp
 80097bc:	4643      	mov	r3, r8
 80097be:	4698      	mov	r8, r3
 80097c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097c4:	2a39      	cmp	r2, #57	; 0x39
 80097c6:	d106      	bne.n	80097d6 <_dtoa_r+0x5fe>
 80097c8:	9a01      	ldr	r2, [sp, #4]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d1f7      	bne.n	80097be <_dtoa_r+0x5e6>
 80097ce:	9901      	ldr	r1, [sp, #4]
 80097d0:	2230      	movs	r2, #48	; 0x30
 80097d2:	3701      	adds	r7, #1
 80097d4:	700a      	strb	r2, [r1, #0]
 80097d6:	781a      	ldrb	r2, [r3, #0]
 80097d8:	3201      	adds	r2, #1
 80097da:	701a      	strb	r2, [r3, #0]
 80097dc:	e7ae      	b.n	800973c <_dtoa_r+0x564>
 80097de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80097e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80097e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ea:	d1b2      	bne.n	8009752 <_dtoa_r+0x57a>
 80097ec:	e7d3      	b.n	8009796 <_dtoa_r+0x5be>
 80097ee:	bf00      	nop
 80097f0:	0800c1c0 	.word	0x0800c1c0
 80097f4:	0800c198 	.word	0x0800c198
 80097f8:	9907      	ldr	r1, [sp, #28]
 80097fa:	2900      	cmp	r1, #0
 80097fc:	f000 80d0 	beq.w	80099a0 <_dtoa_r+0x7c8>
 8009800:	9906      	ldr	r1, [sp, #24]
 8009802:	2901      	cmp	r1, #1
 8009804:	f300 80b4 	bgt.w	8009970 <_dtoa_r+0x798>
 8009808:	990a      	ldr	r1, [sp, #40]	; 0x28
 800980a:	2900      	cmp	r1, #0
 800980c:	f000 80ac 	beq.w	8009968 <_dtoa_r+0x790>
 8009810:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009814:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009818:	461c      	mov	r4, r3
 800981a:	930a      	str	r3, [sp, #40]	; 0x28
 800981c:	9b04      	ldr	r3, [sp, #16]
 800981e:	4413      	add	r3, r2
 8009820:	9304      	str	r3, [sp, #16]
 8009822:	9b05      	ldr	r3, [sp, #20]
 8009824:	2101      	movs	r1, #1
 8009826:	4413      	add	r3, r2
 8009828:	4630      	mov	r0, r6
 800982a:	9305      	str	r3, [sp, #20]
 800982c:	f000 ff20 	bl	800a670 <__i2b>
 8009830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009832:	4607      	mov	r7, r0
 8009834:	f1b8 0f00 	cmp.w	r8, #0
 8009838:	dd0d      	ble.n	8009856 <_dtoa_r+0x67e>
 800983a:	9a05      	ldr	r2, [sp, #20]
 800983c:	2a00      	cmp	r2, #0
 800983e:	dd0a      	ble.n	8009856 <_dtoa_r+0x67e>
 8009840:	4542      	cmp	r2, r8
 8009842:	9904      	ldr	r1, [sp, #16]
 8009844:	bfa8      	it	ge
 8009846:	4642      	movge	r2, r8
 8009848:	1a89      	subs	r1, r1, r2
 800984a:	9104      	str	r1, [sp, #16]
 800984c:	9905      	ldr	r1, [sp, #20]
 800984e:	eba8 0802 	sub.w	r8, r8, r2
 8009852:	1a8a      	subs	r2, r1, r2
 8009854:	9205      	str	r2, [sp, #20]
 8009856:	b303      	cbz	r3, 800989a <_dtoa_r+0x6c2>
 8009858:	9a07      	ldr	r2, [sp, #28]
 800985a:	2a00      	cmp	r2, #0
 800985c:	f000 80a5 	beq.w	80099aa <_dtoa_r+0x7d2>
 8009860:	2c00      	cmp	r4, #0
 8009862:	dd13      	ble.n	800988c <_dtoa_r+0x6b4>
 8009864:	4639      	mov	r1, r7
 8009866:	4622      	mov	r2, r4
 8009868:	4630      	mov	r0, r6
 800986a:	930d      	str	r3, [sp, #52]	; 0x34
 800986c:	f000 ffc0 	bl	800a7f0 <__pow5mult>
 8009870:	462a      	mov	r2, r5
 8009872:	4601      	mov	r1, r0
 8009874:	4607      	mov	r7, r0
 8009876:	4630      	mov	r0, r6
 8009878:	f000 ff10 	bl	800a69c <__multiply>
 800987c:	4629      	mov	r1, r5
 800987e:	900a      	str	r0, [sp, #40]	; 0x28
 8009880:	4630      	mov	r0, r6
 8009882:	f000 fdf3 	bl	800a46c <_Bfree>
 8009886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800988a:	4615      	mov	r5, r2
 800988c:	1b1a      	subs	r2, r3, r4
 800988e:	d004      	beq.n	800989a <_dtoa_r+0x6c2>
 8009890:	4629      	mov	r1, r5
 8009892:	4630      	mov	r0, r6
 8009894:	f000 ffac 	bl	800a7f0 <__pow5mult>
 8009898:	4605      	mov	r5, r0
 800989a:	2101      	movs	r1, #1
 800989c:	4630      	mov	r0, r6
 800989e:	f000 fee7 	bl	800a670 <__i2b>
 80098a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	4604      	mov	r4, r0
 80098a8:	f340 8081 	ble.w	80099ae <_dtoa_r+0x7d6>
 80098ac:	461a      	mov	r2, r3
 80098ae:	4601      	mov	r1, r0
 80098b0:	4630      	mov	r0, r6
 80098b2:	f000 ff9d 	bl	800a7f0 <__pow5mult>
 80098b6:	9b06      	ldr	r3, [sp, #24]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	4604      	mov	r4, r0
 80098bc:	dd7a      	ble.n	80099b4 <_dtoa_r+0x7dc>
 80098be:	2300      	movs	r3, #0
 80098c0:	930a      	str	r3, [sp, #40]	; 0x28
 80098c2:	6922      	ldr	r2, [r4, #16]
 80098c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80098c8:	6910      	ldr	r0, [r2, #16]
 80098ca:	f000 fe81 	bl	800a5d0 <__hi0bits>
 80098ce:	f1c0 0020 	rsb	r0, r0, #32
 80098d2:	9b05      	ldr	r3, [sp, #20]
 80098d4:	4418      	add	r0, r3
 80098d6:	f010 001f 	ands.w	r0, r0, #31
 80098da:	f000 808c 	beq.w	80099f6 <_dtoa_r+0x81e>
 80098de:	f1c0 0220 	rsb	r2, r0, #32
 80098e2:	2a04      	cmp	r2, #4
 80098e4:	f340 8085 	ble.w	80099f2 <_dtoa_r+0x81a>
 80098e8:	f1c0 001c 	rsb	r0, r0, #28
 80098ec:	9b04      	ldr	r3, [sp, #16]
 80098ee:	4403      	add	r3, r0
 80098f0:	9304      	str	r3, [sp, #16]
 80098f2:	9b05      	ldr	r3, [sp, #20]
 80098f4:	4403      	add	r3, r0
 80098f6:	4480      	add	r8, r0
 80098f8:	9305      	str	r3, [sp, #20]
 80098fa:	9b04      	ldr	r3, [sp, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	dd05      	ble.n	800990c <_dtoa_r+0x734>
 8009900:	4629      	mov	r1, r5
 8009902:	461a      	mov	r2, r3
 8009904:	4630      	mov	r0, r6
 8009906:	f000 ffcd 	bl	800a8a4 <__lshift>
 800990a:	4605      	mov	r5, r0
 800990c:	9b05      	ldr	r3, [sp, #20]
 800990e:	2b00      	cmp	r3, #0
 8009910:	dd05      	ble.n	800991e <_dtoa_r+0x746>
 8009912:	4621      	mov	r1, r4
 8009914:	461a      	mov	r2, r3
 8009916:	4630      	mov	r0, r6
 8009918:	f000 ffc4 	bl	800a8a4 <__lshift>
 800991c:	4604      	mov	r4, r0
 800991e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009920:	2b00      	cmp	r3, #0
 8009922:	d06a      	beq.n	80099fa <_dtoa_r+0x822>
 8009924:	4621      	mov	r1, r4
 8009926:	4628      	mov	r0, r5
 8009928:	f001 f82c 	bl	800a984 <__mcmp>
 800992c:	2800      	cmp	r0, #0
 800992e:	da64      	bge.n	80099fa <_dtoa_r+0x822>
 8009930:	2300      	movs	r3, #0
 8009932:	4629      	mov	r1, r5
 8009934:	220a      	movs	r2, #10
 8009936:	4630      	mov	r0, r6
 8009938:	f000 fdba 	bl	800a4b0 <__multadd>
 800993c:	9b07      	ldr	r3, [sp, #28]
 800993e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009942:	4605      	mov	r5, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 8191 	beq.w	8009c6c <_dtoa_r+0xa94>
 800994a:	4639      	mov	r1, r7
 800994c:	2300      	movs	r3, #0
 800994e:	220a      	movs	r2, #10
 8009950:	4630      	mov	r0, r6
 8009952:	f000 fdad 	bl	800a4b0 <__multadd>
 8009956:	f1ba 0f00 	cmp.w	sl, #0
 800995a:	4607      	mov	r7, r0
 800995c:	f300 808d 	bgt.w	8009a7a <_dtoa_r+0x8a2>
 8009960:	9b06      	ldr	r3, [sp, #24]
 8009962:	2b02      	cmp	r3, #2
 8009964:	dc50      	bgt.n	8009a08 <_dtoa_r+0x830>
 8009966:	e088      	b.n	8009a7a <_dtoa_r+0x8a2>
 8009968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800996a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800996e:	e751      	b.n	8009814 <_dtoa_r+0x63c>
 8009970:	f109 34ff 	add.w	r4, r9, #4294967295
 8009974:	42a3      	cmp	r3, r4
 8009976:	bfbf      	itttt	lt
 8009978:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800997a:	1ae3      	sublt	r3, r4, r3
 800997c:	18d2      	addlt	r2, r2, r3
 800997e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009980:	bfb6      	itet	lt
 8009982:	4623      	movlt	r3, r4
 8009984:	1b1c      	subge	r4, r3, r4
 8009986:	2400      	movlt	r4, #0
 8009988:	f1b9 0f00 	cmp.w	r9, #0
 800998c:	bfb5      	itete	lt
 800998e:	9a04      	ldrlt	r2, [sp, #16]
 8009990:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009994:	eba2 0809 	sublt.w	r8, r2, r9
 8009998:	464a      	movge	r2, r9
 800999a:	bfb8      	it	lt
 800999c:	2200      	movlt	r2, #0
 800999e:	e73c      	b.n	800981a <_dtoa_r+0x642>
 80099a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80099a4:	9f07      	ldr	r7, [sp, #28]
 80099a6:	461c      	mov	r4, r3
 80099a8:	e744      	b.n	8009834 <_dtoa_r+0x65c>
 80099aa:	461a      	mov	r2, r3
 80099ac:	e770      	b.n	8009890 <_dtoa_r+0x6b8>
 80099ae:	9b06      	ldr	r3, [sp, #24]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	dc18      	bgt.n	80099e6 <_dtoa_r+0x80e>
 80099b4:	9b02      	ldr	r3, [sp, #8]
 80099b6:	b9b3      	cbnz	r3, 80099e6 <_dtoa_r+0x80e>
 80099b8:	9b03      	ldr	r3, [sp, #12]
 80099ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80099be:	b9a2      	cbnz	r2, 80099ea <_dtoa_r+0x812>
 80099c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80099c4:	0d12      	lsrs	r2, r2, #20
 80099c6:	0512      	lsls	r2, r2, #20
 80099c8:	b18a      	cbz	r2, 80099ee <_dtoa_r+0x816>
 80099ca:	9b04      	ldr	r3, [sp, #16]
 80099cc:	3301      	adds	r3, #1
 80099ce:	9304      	str	r3, [sp, #16]
 80099d0:	9b05      	ldr	r3, [sp, #20]
 80099d2:	3301      	adds	r3, #1
 80099d4:	9305      	str	r3, [sp, #20]
 80099d6:	2301      	movs	r3, #1
 80099d8:	930a      	str	r3, [sp, #40]	; 0x28
 80099da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f47f af70 	bne.w	80098c2 <_dtoa_r+0x6ea>
 80099e2:	2001      	movs	r0, #1
 80099e4:	e775      	b.n	80098d2 <_dtoa_r+0x6fa>
 80099e6:	2300      	movs	r3, #0
 80099e8:	e7f6      	b.n	80099d8 <_dtoa_r+0x800>
 80099ea:	9b02      	ldr	r3, [sp, #8]
 80099ec:	e7f4      	b.n	80099d8 <_dtoa_r+0x800>
 80099ee:	920a      	str	r2, [sp, #40]	; 0x28
 80099f0:	e7f3      	b.n	80099da <_dtoa_r+0x802>
 80099f2:	d082      	beq.n	80098fa <_dtoa_r+0x722>
 80099f4:	4610      	mov	r0, r2
 80099f6:	301c      	adds	r0, #28
 80099f8:	e778      	b.n	80098ec <_dtoa_r+0x714>
 80099fa:	f1b9 0f00 	cmp.w	r9, #0
 80099fe:	dc37      	bgt.n	8009a70 <_dtoa_r+0x898>
 8009a00:	9b06      	ldr	r3, [sp, #24]
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	dd34      	ble.n	8009a70 <_dtoa_r+0x898>
 8009a06:	46ca      	mov	sl, r9
 8009a08:	f1ba 0f00 	cmp.w	sl, #0
 8009a0c:	d10d      	bne.n	8009a2a <_dtoa_r+0x852>
 8009a0e:	4621      	mov	r1, r4
 8009a10:	4653      	mov	r3, sl
 8009a12:	2205      	movs	r2, #5
 8009a14:	4630      	mov	r0, r6
 8009a16:	f000 fd4b 	bl	800a4b0 <__multadd>
 8009a1a:	4601      	mov	r1, r0
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f000 ffb0 	bl	800a984 <__mcmp>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	f73f adeb 	bgt.w	8009600 <_dtoa_r+0x428>
 8009a2a:	9b08      	ldr	r3, [sp, #32]
 8009a2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009a30:	ea6f 0b03 	mvn.w	fp, r3
 8009a34:	f04f 0900 	mov.w	r9, #0
 8009a38:	4621      	mov	r1, r4
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f000 fd16 	bl	800a46c <_Bfree>
 8009a40:	2f00      	cmp	r7, #0
 8009a42:	f43f aea8 	beq.w	8009796 <_dtoa_r+0x5be>
 8009a46:	f1b9 0f00 	cmp.w	r9, #0
 8009a4a:	d005      	beq.n	8009a58 <_dtoa_r+0x880>
 8009a4c:	45b9      	cmp	r9, r7
 8009a4e:	d003      	beq.n	8009a58 <_dtoa_r+0x880>
 8009a50:	4649      	mov	r1, r9
 8009a52:	4630      	mov	r0, r6
 8009a54:	f000 fd0a 	bl	800a46c <_Bfree>
 8009a58:	4639      	mov	r1, r7
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	f000 fd06 	bl	800a46c <_Bfree>
 8009a60:	e699      	b.n	8009796 <_dtoa_r+0x5be>
 8009a62:	2400      	movs	r4, #0
 8009a64:	4627      	mov	r7, r4
 8009a66:	e7e0      	b.n	8009a2a <_dtoa_r+0x852>
 8009a68:	46bb      	mov	fp, r7
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	4607      	mov	r7, r0
 8009a6e:	e5c7      	b.n	8009600 <_dtoa_r+0x428>
 8009a70:	9b07      	ldr	r3, [sp, #28]
 8009a72:	46ca      	mov	sl, r9
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f000 8100 	beq.w	8009c7a <_dtoa_r+0xaa2>
 8009a7a:	f1b8 0f00 	cmp.w	r8, #0
 8009a7e:	dd05      	ble.n	8009a8c <_dtoa_r+0x8b4>
 8009a80:	4639      	mov	r1, r7
 8009a82:	4642      	mov	r2, r8
 8009a84:	4630      	mov	r0, r6
 8009a86:	f000 ff0d 	bl	800a8a4 <__lshift>
 8009a8a:	4607      	mov	r7, r0
 8009a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d05d      	beq.n	8009b4e <_dtoa_r+0x976>
 8009a92:	6879      	ldr	r1, [r7, #4]
 8009a94:	4630      	mov	r0, r6
 8009a96:	f000 fca9 	bl	800a3ec <_Balloc>
 8009a9a:	4680      	mov	r8, r0
 8009a9c:	b928      	cbnz	r0, 8009aaa <_dtoa_r+0x8d2>
 8009a9e:	4b82      	ldr	r3, [pc, #520]	; (8009ca8 <_dtoa_r+0xad0>)
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009aa6:	f7ff bbaf 	b.w	8009208 <_dtoa_r+0x30>
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	3202      	adds	r2, #2
 8009aae:	0092      	lsls	r2, r2, #2
 8009ab0:	f107 010c 	add.w	r1, r7, #12
 8009ab4:	300c      	adds	r0, #12
 8009ab6:	f000 fc8b 	bl	800a3d0 <memcpy>
 8009aba:	2201      	movs	r2, #1
 8009abc:	4641      	mov	r1, r8
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f000 fef0 	bl	800a8a4 <__lshift>
 8009ac4:	9b01      	ldr	r3, [sp, #4]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	9304      	str	r3, [sp, #16]
 8009aca:	9b01      	ldr	r3, [sp, #4]
 8009acc:	4453      	add	r3, sl
 8009ace:	9308      	str	r3, [sp, #32]
 8009ad0:	9b02      	ldr	r3, [sp, #8]
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	46b9      	mov	r9, r7
 8009ad8:	9307      	str	r3, [sp, #28]
 8009ada:	4607      	mov	r7, r0
 8009adc:	9b04      	ldr	r3, [sp, #16]
 8009ade:	4621      	mov	r1, r4
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	9302      	str	r3, [sp, #8]
 8009ae6:	f7ff faeb 	bl	80090c0 <quorem>
 8009aea:	4603      	mov	r3, r0
 8009aec:	3330      	adds	r3, #48	; 0x30
 8009aee:	9005      	str	r0, [sp, #20]
 8009af0:	4649      	mov	r1, r9
 8009af2:	4628      	mov	r0, r5
 8009af4:	9309      	str	r3, [sp, #36]	; 0x24
 8009af6:	f000 ff45 	bl	800a984 <__mcmp>
 8009afa:	463a      	mov	r2, r7
 8009afc:	4682      	mov	sl, r0
 8009afe:	4621      	mov	r1, r4
 8009b00:	4630      	mov	r0, r6
 8009b02:	f000 ff5b 	bl	800a9bc <__mdiff>
 8009b06:	68c2      	ldr	r2, [r0, #12]
 8009b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0a:	4680      	mov	r8, r0
 8009b0c:	bb0a      	cbnz	r2, 8009b52 <_dtoa_r+0x97a>
 8009b0e:	4601      	mov	r1, r0
 8009b10:	4628      	mov	r0, r5
 8009b12:	f000 ff37 	bl	800a984 <__mcmp>
 8009b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b18:	4602      	mov	r2, r0
 8009b1a:	4641      	mov	r1, r8
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009b22:	f000 fca3 	bl	800a46c <_Bfree>
 8009b26:	9b06      	ldr	r3, [sp, #24]
 8009b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b2a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009b2e:	ea43 0102 	orr.w	r1, r3, r2
 8009b32:	9b07      	ldr	r3, [sp, #28]
 8009b34:	430b      	orrs	r3, r1
 8009b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b38:	d10d      	bne.n	8009b56 <_dtoa_r+0x97e>
 8009b3a:	2b39      	cmp	r3, #57	; 0x39
 8009b3c:	d029      	beq.n	8009b92 <_dtoa_r+0x9ba>
 8009b3e:	f1ba 0f00 	cmp.w	sl, #0
 8009b42:	dd01      	ble.n	8009b48 <_dtoa_r+0x970>
 8009b44:	9b05      	ldr	r3, [sp, #20]
 8009b46:	3331      	adds	r3, #49	; 0x31
 8009b48:	9a02      	ldr	r2, [sp, #8]
 8009b4a:	7013      	strb	r3, [r2, #0]
 8009b4c:	e774      	b.n	8009a38 <_dtoa_r+0x860>
 8009b4e:	4638      	mov	r0, r7
 8009b50:	e7b8      	b.n	8009ac4 <_dtoa_r+0x8ec>
 8009b52:	2201      	movs	r2, #1
 8009b54:	e7e1      	b.n	8009b1a <_dtoa_r+0x942>
 8009b56:	f1ba 0f00 	cmp.w	sl, #0
 8009b5a:	db06      	blt.n	8009b6a <_dtoa_r+0x992>
 8009b5c:	9906      	ldr	r1, [sp, #24]
 8009b5e:	ea41 0a0a 	orr.w	sl, r1, sl
 8009b62:	9907      	ldr	r1, [sp, #28]
 8009b64:	ea5a 0101 	orrs.w	r1, sl, r1
 8009b68:	d120      	bne.n	8009bac <_dtoa_r+0x9d4>
 8009b6a:	2a00      	cmp	r2, #0
 8009b6c:	ddec      	ble.n	8009b48 <_dtoa_r+0x970>
 8009b6e:	4629      	mov	r1, r5
 8009b70:	2201      	movs	r2, #1
 8009b72:	4630      	mov	r0, r6
 8009b74:	9304      	str	r3, [sp, #16]
 8009b76:	f000 fe95 	bl	800a8a4 <__lshift>
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	f000 ff01 	bl	800a984 <__mcmp>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	9b04      	ldr	r3, [sp, #16]
 8009b86:	dc02      	bgt.n	8009b8e <_dtoa_r+0x9b6>
 8009b88:	d1de      	bne.n	8009b48 <_dtoa_r+0x970>
 8009b8a:	07da      	lsls	r2, r3, #31
 8009b8c:	d5dc      	bpl.n	8009b48 <_dtoa_r+0x970>
 8009b8e:	2b39      	cmp	r3, #57	; 0x39
 8009b90:	d1d8      	bne.n	8009b44 <_dtoa_r+0x96c>
 8009b92:	9a02      	ldr	r2, [sp, #8]
 8009b94:	2339      	movs	r3, #57	; 0x39
 8009b96:	7013      	strb	r3, [r2, #0]
 8009b98:	4643      	mov	r3, r8
 8009b9a:	4698      	mov	r8, r3
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009ba2:	2a39      	cmp	r2, #57	; 0x39
 8009ba4:	d051      	beq.n	8009c4a <_dtoa_r+0xa72>
 8009ba6:	3201      	adds	r2, #1
 8009ba8:	701a      	strb	r2, [r3, #0]
 8009baa:	e745      	b.n	8009a38 <_dtoa_r+0x860>
 8009bac:	2a00      	cmp	r2, #0
 8009bae:	dd03      	ble.n	8009bb8 <_dtoa_r+0x9e0>
 8009bb0:	2b39      	cmp	r3, #57	; 0x39
 8009bb2:	d0ee      	beq.n	8009b92 <_dtoa_r+0x9ba>
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	e7c7      	b.n	8009b48 <_dtoa_r+0x970>
 8009bb8:	9a04      	ldr	r2, [sp, #16]
 8009bba:	9908      	ldr	r1, [sp, #32]
 8009bbc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009bc0:	428a      	cmp	r2, r1
 8009bc2:	d02b      	beq.n	8009c1c <_dtoa_r+0xa44>
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	220a      	movs	r2, #10
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f000 fc70 	bl	800a4b0 <__multadd>
 8009bd0:	45b9      	cmp	r9, r7
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	f04f 0300 	mov.w	r3, #0
 8009bd8:	f04f 020a 	mov.w	r2, #10
 8009bdc:	4649      	mov	r1, r9
 8009bde:	4630      	mov	r0, r6
 8009be0:	d107      	bne.n	8009bf2 <_dtoa_r+0xa1a>
 8009be2:	f000 fc65 	bl	800a4b0 <__multadd>
 8009be6:	4681      	mov	r9, r0
 8009be8:	4607      	mov	r7, r0
 8009bea:	9b04      	ldr	r3, [sp, #16]
 8009bec:	3301      	adds	r3, #1
 8009bee:	9304      	str	r3, [sp, #16]
 8009bf0:	e774      	b.n	8009adc <_dtoa_r+0x904>
 8009bf2:	f000 fc5d 	bl	800a4b0 <__multadd>
 8009bf6:	4639      	mov	r1, r7
 8009bf8:	4681      	mov	r9, r0
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	220a      	movs	r2, #10
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f000 fc56 	bl	800a4b0 <__multadd>
 8009c04:	4607      	mov	r7, r0
 8009c06:	e7f0      	b.n	8009bea <_dtoa_r+0xa12>
 8009c08:	f1ba 0f00 	cmp.w	sl, #0
 8009c0c:	9a01      	ldr	r2, [sp, #4]
 8009c0e:	bfcc      	ite	gt
 8009c10:	46d0      	movgt	r8, sl
 8009c12:	f04f 0801 	movle.w	r8, #1
 8009c16:	4490      	add	r8, r2
 8009c18:	f04f 0900 	mov.w	r9, #0
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	2201      	movs	r2, #1
 8009c20:	4630      	mov	r0, r6
 8009c22:	9302      	str	r3, [sp, #8]
 8009c24:	f000 fe3e 	bl	800a8a4 <__lshift>
 8009c28:	4621      	mov	r1, r4
 8009c2a:	4605      	mov	r5, r0
 8009c2c:	f000 feaa 	bl	800a984 <__mcmp>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	dcb1      	bgt.n	8009b98 <_dtoa_r+0x9c0>
 8009c34:	d102      	bne.n	8009c3c <_dtoa_r+0xa64>
 8009c36:	9b02      	ldr	r3, [sp, #8]
 8009c38:	07db      	lsls	r3, r3, #31
 8009c3a:	d4ad      	bmi.n	8009b98 <_dtoa_r+0x9c0>
 8009c3c:	4643      	mov	r3, r8
 8009c3e:	4698      	mov	r8, r3
 8009c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c44:	2a30      	cmp	r2, #48	; 0x30
 8009c46:	d0fa      	beq.n	8009c3e <_dtoa_r+0xa66>
 8009c48:	e6f6      	b.n	8009a38 <_dtoa_r+0x860>
 8009c4a:	9a01      	ldr	r2, [sp, #4]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d1a4      	bne.n	8009b9a <_dtoa_r+0x9c2>
 8009c50:	f10b 0b01 	add.w	fp, fp, #1
 8009c54:	2331      	movs	r3, #49	; 0x31
 8009c56:	e778      	b.n	8009b4a <_dtoa_r+0x972>
 8009c58:	4b14      	ldr	r3, [pc, #80]	; (8009cac <_dtoa_r+0xad4>)
 8009c5a:	f7ff bb27 	b.w	80092ac <_dtoa_r+0xd4>
 8009c5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f47f ab03 	bne.w	800926c <_dtoa_r+0x94>
 8009c66:	4b12      	ldr	r3, [pc, #72]	; (8009cb0 <_dtoa_r+0xad8>)
 8009c68:	f7ff bb20 	b.w	80092ac <_dtoa_r+0xd4>
 8009c6c:	f1ba 0f00 	cmp.w	sl, #0
 8009c70:	dc03      	bgt.n	8009c7a <_dtoa_r+0xaa2>
 8009c72:	9b06      	ldr	r3, [sp, #24]
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	f73f aec7 	bgt.w	8009a08 <_dtoa_r+0x830>
 8009c7a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c7e:	4621      	mov	r1, r4
 8009c80:	4628      	mov	r0, r5
 8009c82:	f7ff fa1d 	bl	80090c0 <quorem>
 8009c86:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009c8a:	f808 3b01 	strb.w	r3, [r8], #1
 8009c8e:	9a01      	ldr	r2, [sp, #4]
 8009c90:	eba8 0202 	sub.w	r2, r8, r2
 8009c94:	4592      	cmp	sl, r2
 8009c96:	ddb7      	ble.n	8009c08 <_dtoa_r+0xa30>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	220a      	movs	r2, #10
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f000 fc06 	bl	800a4b0 <__multadd>
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	e7ea      	b.n	8009c7e <_dtoa_r+0xaa6>
 8009ca8:	0800c0b0 	.word	0x0800c0b0
 8009cac:	0800beb0 	.word	0x0800beb0
 8009cb0:	0800c031 	.word	0x0800c031

08009cb4 <rshift>:
 8009cb4:	6903      	ldr	r3, [r0, #16]
 8009cb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009cba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009cc2:	f100 0414 	add.w	r4, r0, #20
 8009cc6:	dd45      	ble.n	8009d54 <rshift+0xa0>
 8009cc8:	f011 011f 	ands.w	r1, r1, #31
 8009ccc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009cd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009cd4:	d10c      	bne.n	8009cf0 <rshift+0x3c>
 8009cd6:	f100 0710 	add.w	r7, r0, #16
 8009cda:	4629      	mov	r1, r5
 8009cdc:	42b1      	cmp	r1, r6
 8009cde:	d334      	bcc.n	8009d4a <rshift+0x96>
 8009ce0:	1a9b      	subs	r3, r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	1eea      	subs	r2, r5, #3
 8009ce6:	4296      	cmp	r6, r2
 8009ce8:	bf38      	it	cc
 8009cea:	2300      	movcc	r3, #0
 8009cec:	4423      	add	r3, r4
 8009cee:	e015      	b.n	8009d1c <rshift+0x68>
 8009cf0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009cf4:	f1c1 0820 	rsb	r8, r1, #32
 8009cf8:	40cf      	lsrs	r7, r1
 8009cfa:	f105 0e04 	add.w	lr, r5, #4
 8009cfe:	46a1      	mov	r9, r4
 8009d00:	4576      	cmp	r6, lr
 8009d02:	46f4      	mov	ip, lr
 8009d04:	d815      	bhi.n	8009d32 <rshift+0x7e>
 8009d06:	1a9a      	subs	r2, r3, r2
 8009d08:	0092      	lsls	r2, r2, #2
 8009d0a:	3a04      	subs	r2, #4
 8009d0c:	3501      	adds	r5, #1
 8009d0e:	42ae      	cmp	r6, r5
 8009d10:	bf38      	it	cc
 8009d12:	2200      	movcc	r2, #0
 8009d14:	18a3      	adds	r3, r4, r2
 8009d16:	50a7      	str	r7, [r4, r2]
 8009d18:	b107      	cbz	r7, 8009d1c <rshift+0x68>
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	1b1a      	subs	r2, r3, r4
 8009d1e:	42a3      	cmp	r3, r4
 8009d20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d24:	bf08      	it	eq
 8009d26:	2300      	moveq	r3, #0
 8009d28:	6102      	str	r2, [r0, #16]
 8009d2a:	bf08      	it	eq
 8009d2c:	6143      	streq	r3, [r0, #20]
 8009d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d32:	f8dc c000 	ldr.w	ip, [ip]
 8009d36:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d3a:	ea4c 0707 	orr.w	r7, ip, r7
 8009d3e:	f849 7b04 	str.w	r7, [r9], #4
 8009d42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d46:	40cf      	lsrs	r7, r1
 8009d48:	e7da      	b.n	8009d00 <rshift+0x4c>
 8009d4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d52:	e7c3      	b.n	8009cdc <rshift+0x28>
 8009d54:	4623      	mov	r3, r4
 8009d56:	e7e1      	b.n	8009d1c <rshift+0x68>

08009d58 <__hexdig_fun>:
 8009d58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009d5c:	2b09      	cmp	r3, #9
 8009d5e:	d802      	bhi.n	8009d66 <__hexdig_fun+0xe>
 8009d60:	3820      	subs	r0, #32
 8009d62:	b2c0      	uxtb	r0, r0
 8009d64:	4770      	bx	lr
 8009d66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009d6a:	2b05      	cmp	r3, #5
 8009d6c:	d801      	bhi.n	8009d72 <__hexdig_fun+0x1a>
 8009d6e:	3847      	subs	r0, #71	; 0x47
 8009d70:	e7f7      	b.n	8009d62 <__hexdig_fun+0xa>
 8009d72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009d76:	2b05      	cmp	r3, #5
 8009d78:	d801      	bhi.n	8009d7e <__hexdig_fun+0x26>
 8009d7a:	3827      	subs	r0, #39	; 0x27
 8009d7c:	e7f1      	b.n	8009d62 <__hexdig_fun+0xa>
 8009d7e:	2000      	movs	r0, #0
 8009d80:	4770      	bx	lr
	...

08009d84 <__gethex>:
 8009d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d88:	ed2d 8b02 	vpush	{d8}
 8009d8c:	b089      	sub	sp, #36	; 0x24
 8009d8e:	ee08 0a10 	vmov	s16, r0
 8009d92:	9304      	str	r3, [sp, #16]
 8009d94:	4bb4      	ldr	r3, [pc, #720]	; (800a068 <__gethex+0x2e4>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	468b      	mov	fp, r1
 8009d9e:	4690      	mov	r8, r2
 8009da0:	f7f6 fa4e 	bl	8000240 <strlen>
 8009da4:	9b01      	ldr	r3, [sp, #4]
 8009da6:	f8db 2000 	ldr.w	r2, [fp]
 8009daa:	4403      	add	r3, r0
 8009dac:	4682      	mov	sl, r0
 8009dae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009db2:	9305      	str	r3, [sp, #20]
 8009db4:	1c93      	adds	r3, r2, #2
 8009db6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009dba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009dbe:	32fe      	adds	r2, #254	; 0xfe
 8009dc0:	18d1      	adds	r1, r2, r3
 8009dc2:	461f      	mov	r7, r3
 8009dc4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009dc8:	9100      	str	r1, [sp, #0]
 8009dca:	2830      	cmp	r0, #48	; 0x30
 8009dcc:	d0f8      	beq.n	8009dc0 <__gethex+0x3c>
 8009dce:	f7ff ffc3 	bl	8009d58 <__hexdig_fun>
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d13a      	bne.n	8009e4e <__gethex+0xca>
 8009dd8:	9901      	ldr	r1, [sp, #4]
 8009dda:	4652      	mov	r2, sl
 8009ddc:	4638      	mov	r0, r7
 8009dde:	f001 fa2f 	bl	800b240 <strncmp>
 8009de2:	4605      	mov	r5, r0
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d168      	bne.n	8009eba <__gethex+0x136>
 8009de8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009dec:	eb07 060a 	add.w	r6, r7, sl
 8009df0:	f7ff ffb2 	bl	8009d58 <__hexdig_fun>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	d062      	beq.n	8009ebe <__gethex+0x13a>
 8009df8:	4633      	mov	r3, r6
 8009dfa:	7818      	ldrb	r0, [r3, #0]
 8009dfc:	2830      	cmp	r0, #48	; 0x30
 8009dfe:	461f      	mov	r7, r3
 8009e00:	f103 0301 	add.w	r3, r3, #1
 8009e04:	d0f9      	beq.n	8009dfa <__gethex+0x76>
 8009e06:	f7ff ffa7 	bl	8009d58 <__hexdig_fun>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	fab0 f480 	clz	r4, r0
 8009e10:	0964      	lsrs	r4, r4, #5
 8009e12:	4635      	mov	r5, r6
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	463a      	mov	r2, r7
 8009e18:	4616      	mov	r6, r2
 8009e1a:	3201      	adds	r2, #1
 8009e1c:	7830      	ldrb	r0, [r6, #0]
 8009e1e:	f7ff ff9b 	bl	8009d58 <__hexdig_fun>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d1f8      	bne.n	8009e18 <__gethex+0x94>
 8009e26:	9901      	ldr	r1, [sp, #4]
 8009e28:	4652      	mov	r2, sl
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f001 fa08 	bl	800b240 <strncmp>
 8009e30:	b980      	cbnz	r0, 8009e54 <__gethex+0xd0>
 8009e32:	b94d      	cbnz	r5, 8009e48 <__gethex+0xc4>
 8009e34:	eb06 050a 	add.w	r5, r6, sl
 8009e38:	462a      	mov	r2, r5
 8009e3a:	4616      	mov	r6, r2
 8009e3c:	3201      	adds	r2, #1
 8009e3e:	7830      	ldrb	r0, [r6, #0]
 8009e40:	f7ff ff8a 	bl	8009d58 <__hexdig_fun>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d1f8      	bne.n	8009e3a <__gethex+0xb6>
 8009e48:	1bad      	subs	r5, r5, r6
 8009e4a:	00ad      	lsls	r5, r5, #2
 8009e4c:	e004      	b.n	8009e58 <__gethex+0xd4>
 8009e4e:	2400      	movs	r4, #0
 8009e50:	4625      	mov	r5, r4
 8009e52:	e7e0      	b.n	8009e16 <__gethex+0x92>
 8009e54:	2d00      	cmp	r5, #0
 8009e56:	d1f7      	bne.n	8009e48 <__gethex+0xc4>
 8009e58:	7833      	ldrb	r3, [r6, #0]
 8009e5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e5e:	2b50      	cmp	r3, #80	; 0x50
 8009e60:	d13b      	bne.n	8009eda <__gethex+0x156>
 8009e62:	7873      	ldrb	r3, [r6, #1]
 8009e64:	2b2b      	cmp	r3, #43	; 0x2b
 8009e66:	d02c      	beq.n	8009ec2 <__gethex+0x13e>
 8009e68:	2b2d      	cmp	r3, #45	; 0x2d
 8009e6a:	d02e      	beq.n	8009eca <__gethex+0x146>
 8009e6c:	1c71      	adds	r1, r6, #1
 8009e6e:	f04f 0900 	mov.w	r9, #0
 8009e72:	7808      	ldrb	r0, [r1, #0]
 8009e74:	f7ff ff70 	bl	8009d58 <__hexdig_fun>
 8009e78:	1e43      	subs	r3, r0, #1
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b18      	cmp	r3, #24
 8009e7e:	d82c      	bhi.n	8009eda <__gethex+0x156>
 8009e80:	f1a0 0210 	sub.w	r2, r0, #16
 8009e84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e88:	f7ff ff66 	bl	8009d58 <__hexdig_fun>
 8009e8c:	1e43      	subs	r3, r0, #1
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b18      	cmp	r3, #24
 8009e92:	d91d      	bls.n	8009ed0 <__gethex+0x14c>
 8009e94:	f1b9 0f00 	cmp.w	r9, #0
 8009e98:	d000      	beq.n	8009e9c <__gethex+0x118>
 8009e9a:	4252      	negs	r2, r2
 8009e9c:	4415      	add	r5, r2
 8009e9e:	f8cb 1000 	str.w	r1, [fp]
 8009ea2:	b1e4      	cbz	r4, 8009ede <__gethex+0x15a>
 8009ea4:	9b00      	ldr	r3, [sp, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bf14      	ite	ne
 8009eaa:	2700      	movne	r7, #0
 8009eac:	2706      	moveq	r7, #6
 8009eae:	4638      	mov	r0, r7
 8009eb0:	b009      	add	sp, #36	; 0x24
 8009eb2:	ecbd 8b02 	vpop	{d8}
 8009eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eba:	463e      	mov	r6, r7
 8009ebc:	4625      	mov	r5, r4
 8009ebe:	2401      	movs	r4, #1
 8009ec0:	e7ca      	b.n	8009e58 <__gethex+0xd4>
 8009ec2:	f04f 0900 	mov.w	r9, #0
 8009ec6:	1cb1      	adds	r1, r6, #2
 8009ec8:	e7d3      	b.n	8009e72 <__gethex+0xee>
 8009eca:	f04f 0901 	mov.w	r9, #1
 8009ece:	e7fa      	b.n	8009ec6 <__gethex+0x142>
 8009ed0:	230a      	movs	r3, #10
 8009ed2:	fb03 0202 	mla	r2, r3, r2, r0
 8009ed6:	3a10      	subs	r2, #16
 8009ed8:	e7d4      	b.n	8009e84 <__gethex+0x100>
 8009eda:	4631      	mov	r1, r6
 8009edc:	e7df      	b.n	8009e9e <__gethex+0x11a>
 8009ede:	1bf3      	subs	r3, r6, r7
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	2b07      	cmp	r3, #7
 8009ee6:	dc0b      	bgt.n	8009f00 <__gethex+0x17c>
 8009ee8:	ee18 0a10 	vmov	r0, s16
 8009eec:	f000 fa7e 	bl	800a3ec <_Balloc>
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	b940      	cbnz	r0, 8009f06 <__gethex+0x182>
 8009ef4:	4b5d      	ldr	r3, [pc, #372]	; (800a06c <__gethex+0x2e8>)
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	21de      	movs	r1, #222	; 0xde
 8009efa:	485d      	ldr	r0, [pc, #372]	; (800a070 <__gethex+0x2ec>)
 8009efc:	f001 f9c2 	bl	800b284 <__assert_func>
 8009f00:	3101      	adds	r1, #1
 8009f02:	105b      	asrs	r3, r3, #1
 8009f04:	e7ee      	b.n	8009ee4 <__gethex+0x160>
 8009f06:	f100 0914 	add.w	r9, r0, #20
 8009f0a:	f04f 0b00 	mov.w	fp, #0
 8009f0e:	f1ca 0301 	rsb	r3, sl, #1
 8009f12:	f8cd 9008 	str.w	r9, [sp, #8]
 8009f16:	f8cd b000 	str.w	fp, [sp]
 8009f1a:	9306      	str	r3, [sp, #24]
 8009f1c:	42b7      	cmp	r7, r6
 8009f1e:	d340      	bcc.n	8009fa2 <__gethex+0x21e>
 8009f20:	9802      	ldr	r0, [sp, #8]
 8009f22:	9b00      	ldr	r3, [sp, #0]
 8009f24:	f840 3b04 	str.w	r3, [r0], #4
 8009f28:	eba0 0009 	sub.w	r0, r0, r9
 8009f2c:	1080      	asrs	r0, r0, #2
 8009f2e:	0146      	lsls	r6, r0, #5
 8009f30:	6120      	str	r0, [r4, #16]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 fb4c 	bl	800a5d0 <__hi0bits>
 8009f38:	1a30      	subs	r0, r6, r0
 8009f3a:	f8d8 6000 	ldr.w	r6, [r8]
 8009f3e:	42b0      	cmp	r0, r6
 8009f40:	dd63      	ble.n	800a00a <__gethex+0x286>
 8009f42:	1b87      	subs	r7, r0, r6
 8009f44:	4639      	mov	r1, r7
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 feed 	bl	800ad26 <__any_on>
 8009f4c:	4682      	mov	sl, r0
 8009f4e:	b1a8      	cbz	r0, 8009f7c <__gethex+0x1f8>
 8009f50:	1e7b      	subs	r3, r7, #1
 8009f52:	1159      	asrs	r1, r3, #5
 8009f54:	f003 021f 	and.w	r2, r3, #31
 8009f58:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009f5c:	f04f 0a01 	mov.w	sl, #1
 8009f60:	fa0a f202 	lsl.w	r2, sl, r2
 8009f64:	420a      	tst	r2, r1
 8009f66:	d009      	beq.n	8009f7c <__gethex+0x1f8>
 8009f68:	4553      	cmp	r3, sl
 8009f6a:	dd05      	ble.n	8009f78 <__gethex+0x1f4>
 8009f6c:	1eb9      	subs	r1, r7, #2
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f000 fed9 	bl	800ad26 <__any_on>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d145      	bne.n	800a004 <__gethex+0x280>
 8009f78:	f04f 0a02 	mov.w	sl, #2
 8009f7c:	4639      	mov	r1, r7
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f7ff fe98 	bl	8009cb4 <rshift>
 8009f84:	443d      	add	r5, r7
 8009f86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f8a:	42ab      	cmp	r3, r5
 8009f8c:	da4c      	bge.n	800a028 <__gethex+0x2a4>
 8009f8e:	ee18 0a10 	vmov	r0, s16
 8009f92:	4621      	mov	r1, r4
 8009f94:	f000 fa6a 	bl	800a46c <_Bfree>
 8009f98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	6013      	str	r3, [r2, #0]
 8009f9e:	27a3      	movs	r7, #163	; 0xa3
 8009fa0:	e785      	b.n	8009eae <__gethex+0x12a>
 8009fa2:	1e73      	subs	r3, r6, #1
 8009fa4:	9a05      	ldr	r2, [sp, #20]
 8009fa6:	9303      	str	r3, [sp, #12]
 8009fa8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d019      	beq.n	8009fe4 <__gethex+0x260>
 8009fb0:	f1bb 0f20 	cmp.w	fp, #32
 8009fb4:	d107      	bne.n	8009fc6 <__gethex+0x242>
 8009fb6:	9b02      	ldr	r3, [sp, #8]
 8009fb8:	9a00      	ldr	r2, [sp, #0]
 8009fba:	f843 2b04 	str.w	r2, [r3], #4
 8009fbe:	9302      	str	r3, [sp, #8]
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	469b      	mov	fp, r3
 8009fc6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009fca:	f7ff fec5 	bl	8009d58 <__hexdig_fun>
 8009fce:	9b00      	ldr	r3, [sp, #0]
 8009fd0:	f000 000f 	and.w	r0, r0, #15
 8009fd4:	fa00 f00b 	lsl.w	r0, r0, fp
 8009fd8:	4303      	orrs	r3, r0
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	f10b 0b04 	add.w	fp, fp, #4
 8009fe0:	9b03      	ldr	r3, [sp, #12]
 8009fe2:	e00d      	b.n	800a000 <__gethex+0x27c>
 8009fe4:	9b03      	ldr	r3, [sp, #12]
 8009fe6:	9a06      	ldr	r2, [sp, #24]
 8009fe8:	4413      	add	r3, r2
 8009fea:	42bb      	cmp	r3, r7
 8009fec:	d3e0      	bcc.n	8009fb0 <__gethex+0x22c>
 8009fee:	4618      	mov	r0, r3
 8009ff0:	9901      	ldr	r1, [sp, #4]
 8009ff2:	9307      	str	r3, [sp, #28]
 8009ff4:	4652      	mov	r2, sl
 8009ff6:	f001 f923 	bl	800b240 <strncmp>
 8009ffa:	9b07      	ldr	r3, [sp, #28]
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d1d7      	bne.n	8009fb0 <__gethex+0x22c>
 800a000:	461e      	mov	r6, r3
 800a002:	e78b      	b.n	8009f1c <__gethex+0x198>
 800a004:	f04f 0a03 	mov.w	sl, #3
 800a008:	e7b8      	b.n	8009f7c <__gethex+0x1f8>
 800a00a:	da0a      	bge.n	800a022 <__gethex+0x29e>
 800a00c:	1a37      	subs	r7, r6, r0
 800a00e:	4621      	mov	r1, r4
 800a010:	ee18 0a10 	vmov	r0, s16
 800a014:	463a      	mov	r2, r7
 800a016:	f000 fc45 	bl	800a8a4 <__lshift>
 800a01a:	1bed      	subs	r5, r5, r7
 800a01c:	4604      	mov	r4, r0
 800a01e:	f100 0914 	add.w	r9, r0, #20
 800a022:	f04f 0a00 	mov.w	sl, #0
 800a026:	e7ae      	b.n	8009f86 <__gethex+0x202>
 800a028:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a02c:	42a8      	cmp	r0, r5
 800a02e:	dd72      	ble.n	800a116 <__gethex+0x392>
 800a030:	1b45      	subs	r5, r0, r5
 800a032:	42ae      	cmp	r6, r5
 800a034:	dc36      	bgt.n	800a0a4 <__gethex+0x320>
 800a036:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d02a      	beq.n	800a094 <__gethex+0x310>
 800a03e:	2b03      	cmp	r3, #3
 800a040:	d02c      	beq.n	800a09c <__gethex+0x318>
 800a042:	2b01      	cmp	r3, #1
 800a044:	d11c      	bne.n	800a080 <__gethex+0x2fc>
 800a046:	42ae      	cmp	r6, r5
 800a048:	d11a      	bne.n	800a080 <__gethex+0x2fc>
 800a04a:	2e01      	cmp	r6, #1
 800a04c:	d112      	bne.n	800a074 <__gethex+0x2f0>
 800a04e:	9a04      	ldr	r2, [sp, #16]
 800a050:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a054:	6013      	str	r3, [r2, #0]
 800a056:	2301      	movs	r3, #1
 800a058:	6123      	str	r3, [r4, #16]
 800a05a:	f8c9 3000 	str.w	r3, [r9]
 800a05e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a060:	2762      	movs	r7, #98	; 0x62
 800a062:	601c      	str	r4, [r3, #0]
 800a064:	e723      	b.n	8009eae <__gethex+0x12a>
 800a066:	bf00      	nop
 800a068:	0800c128 	.word	0x0800c128
 800a06c:	0800c0b0 	.word	0x0800c0b0
 800a070:	0800c0c1 	.word	0x0800c0c1
 800a074:	1e71      	subs	r1, r6, #1
 800a076:	4620      	mov	r0, r4
 800a078:	f000 fe55 	bl	800ad26 <__any_on>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	d1e6      	bne.n	800a04e <__gethex+0x2ca>
 800a080:	ee18 0a10 	vmov	r0, s16
 800a084:	4621      	mov	r1, r4
 800a086:	f000 f9f1 	bl	800a46c <_Bfree>
 800a08a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a08c:	2300      	movs	r3, #0
 800a08e:	6013      	str	r3, [r2, #0]
 800a090:	2750      	movs	r7, #80	; 0x50
 800a092:	e70c      	b.n	8009eae <__gethex+0x12a>
 800a094:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1f2      	bne.n	800a080 <__gethex+0x2fc>
 800a09a:	e7d8      	b.n	800a04e <__gethex+0x2ca>
 800a09c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1d5      	bne.n	800a04e <__gethex+0x2ca>
 800a0a2:	e7ed      	b.n	800a080 <__gethex+0x2fc>
 800a0a4:	1e6f      	subs	r7, r5, #1
 800a0a6:	f1ba 0f00 	cmp.w	sl, #0
 800a0aa:	d131      	bne.n	800a110 <__gethex+0x38c>
 800a0ac:	b127      	cbz	r7, 800a0b8 <__gethex+0x334>
 800a0ae:	4639      	mov	r1, r7
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f000 fe38 	bl	800ad26 <__any_on>
 800a0b6:	4682      	mov	sl, r0
 800a0b8:	117b      	asrs	r3, r7, #5
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a0c0:	f007 071f 	and.w	r7, r7, #31
 800a0c4:	fa01 f707 	lsl.w	r7, r1, r7
 800a0c8:	421f      	tst	r7, r3
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	bf18      	it	ne
 800a0d0:	f04a 0a02 	orrne.w	sl, sl, #2
 800a0d4:	1b76      	subs	r6, r6, r5
 800a0d6:	f7ff fded 	bl	8009cb4 <rshift>
 800a0da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a0de:	2702      	movs	r7, #2
 800a0e0:	f1ba 0f00 	cmp.w	sl, #0
 800a0e4:	d048      	beq.n	800a178 <__gethex+0x3f4>
 800a0e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d015      	beq.n	800a11a <__gethex+0x396>
 800a0ee:	2b03      	cmp	r3, #3
 800a0f0:	d017      	beq.n	800a122 <__gethex+0x39e>
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d109      	bne.n	800a10a <__gethex+0x386>
 800a0f6:	f01a 0f02 	tst.w	sl, #2
 800a0fa:	d006      	beq.n	800a10a <__gethex+0x386>
 800a0fc:	f8d9 0000 	ldr.w	r0, [r9]
 800a100:	ea4a 0a00 	orr.w	sl, sl, r0
 800a104:	f01a 0f01 	tst.w	sl, #1
 800a108:	d10e      	bne.n	800a128 <__gethex+0x3a4>
 800a10a:	f047 0710 	orr.w	r7, r7, #16
 800a10e:	e033      	b.n	800a178 <__gethex+0x3f4>
 800a110:	f04f 0a01 	mov.w	sl, #1
 800a114:	e7d0      	b.n	800a0b8 <__gethex+0x334>
 800a116:	2701      	movs	r7, #1
 800a118:	e7e2      	b.n	800a0e0 <__gethex+0x35c>
 800a11a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a11c:	f1c3 0301 	rsb	r3, r3, #1
 800a120:	9315      	str	r3, [sp, #84]	; 0x54
 800a122:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a124:	2b00      	cmp	r3, #0
 800a126:	d0f0      	beq.n	800a10a <__gethex+0x386>
 800a128:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a12c:	f104 0314 	add.w	r3, r4, #20
 800a130:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a134:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a138:	f04f 0c00 	mov.w	ip, #0
 800a13c:	4618      	mov	r0, r3
 800a13e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a142:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a146:	d01c      	beq.n	800a182 <__gethex+0x3fe>
 800a148:	3201      	adds	r2, #1
 800a14a:	6002      	str	r2, [r0, #0]
 800a14c:	2f02      	cmp	r7, #2
 800a14e:	f104 0314 	add.w	r3, r4, #20
 800a152:	d13f      	bne.n	800a1d4 <__gethex+0x450>
 800a154:	f8d8 2000 	ldr.w	r2, [r8]
 800a158:	3a01      	subs	r2, #1
 800a15a:	42b2      	cmp	r2, r6
 800a15c:	d10a      	bne.n	800a174 <__gethex+0x3f0>
 800a15e:	1171      	asrs	r1, r6, #5
 800a160:	2201      	movs	r2, #1
 800a162:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a166:	f006 061f 	and.w	r6, r6, #31
 800a16a:	fa02 f606 	lsl.w	r6, r2, r6
 800a16e:	421e      	tst	r6, r3
 800a170:	bf18      	it	ne
 800a172:	4617      	movne	r7, r2
 800a174:	f047 0720 	orr.w	r7, r7, #32
 800a178:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a17a:	601c      	str	r4, [r3, #0]
 800a17c:	9b04      	ldr	r3, [sp, #16]
 800a17e:	601d      	str	r5, [r3, #0]
 800a180:	e695      	b.n	8009eae <__gethex+0x12a>
 800a182:	4299      	cmp	r1, r3
 800a184:	f843 cc04 	str.w	ip, [r3, #-4]
 800a188:	d8d8      	bhi.n	800a13c <__gethex+0x3b8>
 800a18a:	68a3      	ldr	r3, [r4, #8]
 800a18c:	459b      	cmp	fp, r3
 800a18e:	db19      	blt.n	800a1c4 <__gethex+0x440>
 800a190:	6861      	ldr	r1, [r4, #4]
 800a192:	ee18 0a10 	vmov	r0, s16
 800a196:	3101      	adds	r1, #1
 800a198:	f000 f928 	bl	800a3ec <_Balloc>
 800a19c:	4681      	mov	r9, r0
 800a19e:	b918      	cbnz	r0, 800a1a8 <__gethex+0x424>
 800a1a0:	4b1a      	ldr	r3, [pc, #104]	; (800a20c <__gethex+0x488>)
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	2184      	movs	r1, #132	; 0x84
 800a1a6:	e6a8      	b.n	8009efa <__gethex+0x176>
 800a1a8:	6922      	ldr	r2, [r4, #16]
 800a1aa:	3202      	adds	r2, #2
 800a1ac:	f104 010c 	add.w	r1, r4, #12
 800a1b0:	0092      	lsls	r2, r2, #2
 800a1b2:	300c      	adds	r0, #12
 800a1b4:	f000 f90c 	bl	800a3d0 <memcpy>
 800a1b8:	4621      	mov	r1, r4
 800a1ba:	ee18 0a10 	vmov	r0, s16
 800a1be:	f000 f955 	bl	800a46c <_Bfree>
 800a1c2:	464c      	mov	r4, r9
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	1c5a      	adds	r2, r3, #1
 800a1c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1cc:	6122      	str	r2, [r4, #16]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	615a      	str	r2, [r3, #20]
 800a1d2:	e7bb      	b.n	800a14c <__gethex+0x3c8>
 800a1d4:	6922      	ldr	r2, [r4, #16]
 800a1d6:	455a      	cmp	r2, fp
 800a1d8:	dd0b      	ble.n	800a1f2 <__gethex+0x46e>
 800a1da:	2101      	movs	r1, #1
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f7ff fd69 	bl	8009cb4 <rshift>
 800a1e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1e6:	3501      	adds	r5, #1
 800a1e8:	42ab      	cmp	r3, r5
 800a1ea:	f6ff aed0 	blt.w	8009f8e <__gethex+0x20a>
 800a1ee:	2701      	movs	r7, #1
 800a1f0:	e7c0      	b.n	800a174 <__gethex+0x3f0>
 800a1f2:	f016 061f 	ands.w	r6, r6, #31
 800a1f6:	d0fa      	beq.n	800a1ee <__gethex+0x46a>
 800a1f8:	4453      	add	r3, sl
 800a1fa:	f1c6 0620 	rsb	r6, r6, #32
 800a1fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a202:	f000 f9e5 	bl	800a5d0 <__hi0bits>
 800a206:	42b0      	cmp	r0, r6
 800a208:	dbe7      	blt.n	800a1da <__gethex+0x456>
 800a20a:	e7f0      	b.n	800a1ee <__gethex+0x46a>
 800a20c:	0800c0b0 	.word	0x0800c0b0

0800a210 <L_shift>:
 800a210:	f1c2 0208 	rsb	r2, r2, #8
 800a214:	0092      	lsls	r2, r2, #2
 800a216:	b570      	push	{r4, r5, r6, lr}
 800a218:	f1c2 0620 	rsb	r6, r2, #32
 800a21c:	6843      	ldr	r3, [r0, #4]
 800a21e:	6804      	ldr	r4, [r0, #0]
 800a220:	fa03 f506 	lsl.w	r5, r3, r6
 800a224:	432c      	orrs	r4, r5
 800a226:	40d3      	lsrs	r3, r2
 800a228:	6004      	str	r4, [r0, #0]
 800a22a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a22e:	4288      	cmp	r0, r1
 800a230:	d3f4      	bcc.n	800a21c <L_shift+0xc>
 800a232:	bd70      	pop	{r4, r5, r6, pc}

0800a234 <__match>:
 800a234:	b530      	push	{r4, r5, lr}
 800a236:	6803      	ldr	r3, [r0, #0]
 800a238:	3301      	adds	r3, #1
 800a23a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a23e:	b914      	cbnz	r4, 800a246 <__match+0x12>
 800a240:	6003      	str	r3, [r0, #0]
 800a242:	2001      	movs	r0, #1
 800a244:	bd30      	pop	{r4, r5, pc}
 800a246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a24a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a24e:	2d19      	cmp	r5, #25
 800a250:	bf98      	it	ls
 800a252:	3220      	addls	r2, #32
 800a254:	42a2      	cmp	r2, r4
 800a256:	d0f0      	beq.n	800a23a <__match+0x6>
 800a258:	2000      	movs	r0, #0
 800a25a:	e7f3      	b.n	800a244 <__match+0x10>

0800a25c <__hexnan>:
 800a25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a260:	680b      	ldr	r3, [r1, #0]
 800a262:	115e      	asrs	r6, r3, #5
 800a264:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a268:	f013 031f 	ands.w	r3, r3, #31
 800a26c:	b087      	sub	sp, #28
 800a26e:	bf18      	it	ne
 800a270:	3604      	addne	r6, #4
 800a272:	2500      	movs	r5, #0
 800a274:	1f37      	subs	r7, r6, #4
 800a276:	4690      	mov	r8, r2
 800a278:	6802      	ldr	r2, [r0, #0]
 800a27a:	9301      	str	r3, [sp, #4]
 800a27c:	4682      	mov	sl, r0
 800a27e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a282:	46b9      	mov	r9, r7
 800a284:	463c      	mov	r4, r7
 800a286:	9502      	str	r5, [sp, #8]
 800a288:	46ab      	mov	fp, r5
 800a28a:	7851      	ldrb	r1, [r2, #1]
 800a28c:	1c53      	adds	r3, r2, #1
 800a28e:	9303      	str	r3, [sp, #12]
 800a290:	b341      	cbz	r1, 800a2e4 <__hexnan+0x88>
 800a292:	4608      	mov	r0, r1
 800a294:	9205      	str	r2, [sp, #20]
 800a296:	9104      	str	r1, [sp, #16]
 800a298:	f7ff fd5e 	bl	8009d58 <__hexdig_fun>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d14f      	bne.n	800a340 <__hexnan+0xe4>
 800a2a0:	9904      	ldr	r1, [sp, #16]
 800a2a2:	9a05      	ldr	r2, [sp, #20]
 800a2a4:	2920      	cmp	r1, #32
 800a2a6:	d818      	bhi.n	800a2da <__hexnan+0x7e>
 800a2a8:	9b02      	ldr	r3, [sp, #8]
 800a2aa:	459b      	cmp	fp, r3
 800a2ac:	dd13      	ble.n	800a2d6 <__hexnan+0x7a>
 800a2ae:	454c      	cmp	r4, r9
 800a2b0:	d206      	bcs.n	800a2c0 <__hexnan+0x64>
 800a2b2:	2d07      	cmp	r5, #7
 800a2b4:	dc04      	bgt.n	800a2c0 <__hexnan+0x64>
 800a2b6:	462a      	mov	r2, r5
 800a2b8:	4649      	mov	r1, r9
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f7ff ffa8 	bl	800a210 <L_shift>
 800a2c0:	4544      	cmp	r4, r8
 800a2c2:	d950      	bls.n	800a366 <__hexnan+0x10a>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f1a4 0904 	sub.w	r9, r4, #4
 800a2ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2ce:	f8cd b008 	str.w	fp, [sp, #8]
 800a2d2:	464c      	mov	r4, r9
 800a2d4:	461d      	mov	r5, r3
 800a2d6:	9a03      	ldr	r2, [sp, #12]
 800a2d8:	e7d7      	b.n	800a28a <__hexnan+0x2e>
 800a2da:	2929      	cmp	r1, #41	; 0x29
 800a2dc:	d156      	bne.n	800a38c <__hexnan+0x130>
 800a2de:	3202      	adds	r2, #2
 800a2e0:	f8ca 2000 	str.w	r2, [sl]
 800a2e4:	f1bb 0f00 	cmp.w	fp, #0
 800a2e8:	d050      	beq.n	800a38c <__hexnan+0x130>
 800a2ea:	454c      	cmp	r4, r9
 800a2ec:	d206      	bcs.n	800a2fc <__hexnan+0xa0>
 800a2ee:	2d07      	cmp	r5, #7
 800a2f0:	dc04      	bgt.n	800a2fc <__hexnan+0xa0>
 800a2f2:	462a      	mov	r2, r5
 800a2f4:	4649      	mov	r1, r9
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f7ff ff8a 	bl	800a210 <L_shift>
 800a2fc:	4544      	cmp	r4, r8
 800a2fe:	d934      	bls.n	800a36a <__hexnan+0x10e>
 800a300:	f1a8 0204 	sub.w	r2, r8, #4
 800a304:	4623      	mov	r3, r4
 800a306:	f853 1b04 	ldr.w	r1, [r3], #4
 800a30a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a30e:	429f      	cmp	r7, r3
 800a310:	d2f9      	bcs.n	800a306 <__hexnan+0xaa>
 800a312:	1b3b      	subs	r3, r7, r4
 800a314:	f023 0303 	bic.w	r3, r3, #3
 800a318:	3304      	adds	r3, #4
 800a31a:	3401      	adds	r4, #1
 800a31c:	3e03      	subs	r6, #3
 800a31e:	42b4      	cmp	r4, r6
 800a320:	bf88      	it	hi
 800a322:	2304      	movhi	r3, #4
 800a324:	4443      	add	r3, r8
 800a326:	2200      	movs	r2, #0
 800a328:	f843 2b04 	str.w	r2, [r3], #4
 800a32c:	429f      	cmp	r7, r3
 800a32e:	d2fb      	bcs.n	800a328 <__hexnan+0xcc>
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	b91b      	cbnz	r3, 800a33c <__hexnan+0xe0>
 800a334:	4547      	cmp	r7, r8
 800a336:	d127      	bne.n	800a388 <__hexnan+0x12c>
 800a338:	2301      	movs	r3, #1
 800a33a:	603b      	str	r3, [r7, #0]
 800a33c:	2005      	movs	r0, #5
 800a33e:	e026      	b.n	800a38e <__hexnan+0x132>
 800a340:	3501      	adds	r5, #1
 800a342:	2d08      	cmp	r5, #8
 800a344:	f10b 0b01 	add.w	fp, fp, #1
 800a348:	dd06      	ble.n	800a358 <__hexnan+0xfc>
 800a34a:	4544      	cmp	r4, r8
 800a34c:	d9c3      	bls.n	800a2d6 <__hexnan+0x7a>
 800a34e:	2300      	movs	r3, #0
 800a350:	f844 3c04 	str.w	r3, [r4, #-4]
 800a354:	2501      	movs	r5, #1
 800a356:	3c04      	subs	r4, #4
 800a358:	6822      	ldr	r2, [r4, #0]
 800a35a:	f000 000f 	and.w	r0, r0, #15
 800a35e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a362:	6022      	str	r2, [r4, #0]
 800a364:	e7b7      	b.n	800a2d6 <__hexnan+0x7a>
 800a366:	2508      	movs	r5, #8
 800a368:	e7b5      	b.n	800a2d6 <__hexnan+0x7a>
 800a36a:	9b01      	ldr	r3, [sp, #4]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d0df      	beq.n	800a330 <__hexnan+0xd4>
 800a370:	f04f 32ff 	mov.w	r2, #4294967295
 800a374:	f1c3 0320 	rsb	r3, r3, #32
 800a378:	fa22 f303 	lsr.w	r3, r2, r3
 800a37c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a380:	401a      	ands	r2, r3
 800a382:	f846 2c04 	str.w	r2, [r6, #-4]
 800a386:	e7d3      	b.n	800a330 <__hexnan+0xd4>
 800a388:	3f04      	subs	r7, #4
 800a38a:	e7d1      	b.n	800a330 <__hexnan+0xd4>
 800a38c:	2004      	movs	r0, #4
 800a38e:	b007      	add	sp, #28
 800a390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a394 <_localeconv_r>:
 800a394:	4800      	ldr	r0, [pc, #0]	; (800a398 <_localeconv_r+0x4>)
 800a396:	4770      	bx	lr
 800a398:	2000017c 	.word	0x2000017c

0800a39c <malloc>:
 800a39c:	4b02      	ldr	r3, [pc, #8]	; (800a3a8 <malloc+0xc>)
 800a39e:	4601      	mov	r1, r0
 800a3a0:	6818      	ldr	r0, [r3, #0]
 800a3a2:	f000 bd63 	b.w	800ae6c <_malloc_r>
 800a3a6:	bf00      	nop
 800a3a8:	20000024 	.word	0x20000024

0800a3ac <__ascii_mbtowc>:
 800a3ac:	b082      	sub	sp, #8
 800a3ae:	b901      	cbnz	r1, 800a3b2 <__ascii_mbtowc+0x6>
 800a3b0:	a901      	add	r1, sp, #4
 800a3b2:	b142      	cbz	r2, 800a3c6 <__ascii_mbtowc+0x1a>
 800a3b4:	b14b      	cbz	r3, 800a3ca <__ascii_mbtowc+0x1e>
 800a3b6:	7813      	ldrb	r3, [r2, #0]
 800a3b8:	600b      	str	r3, [r1, #0]
 800a3ba:	7812      	ldrb	r2, [r2, #0]
 800a3bc:	1e10      	subs	r0, r2, #0
 800a3be:	bf18      	it	ne
 800a3c0:	2001      	movne	r0, #1
 800a3c2:	b002      	add	sp, #8
 800a3c4:	4770      	bx	lr
 800a3c6:	4610      	mov	r0, r2
 800a3c8:	e7fb      	b.n	800a3c2 <__ascii_mbtowc+0x16>
 800a3ca:	f06f 0001 	mvn.w	r0, #1
 800a3ce:	e7f8      	b.n	800a3c2 <__ascii_mbtowc+0x16>

0800a3d0 <memcpy>:
 800a3d0:	440a      	add	r2, r1
 800a3d2:	4291      	cmp	r1, r2
 800a3d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3d8:	d100      	bne.n	800a3dc <memcpy+0xc>
 800a3da:	4770      	bx	lr
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3e6:	4291      	cmp	r1, r2
 800a3e8:	d1f9      	bne.n	800a3de <memcpy+0xe>
 800a3ea:	bd10      	pop	{r4, pc}

0800a3ec <_Balloc>:
 800a3ec:	b570      	push	{r4, r5, r6, lr}
 800a3ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	460d      	mov	r5, r1
 800a3f4:	b976      	cbnz	r6, 800a414 <_Balloc+0x28>
 800a3f6:	2010      	movs	r0, #16
 800a3f8:	f7ff ffd0 	bl	800a39c <malloc>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	6260      	str	r0, [r4, #36]	; 0x24
 800a400:	b920      	cbnz	r0, 800a40c <_Balloc+0x20>
 800a402:	4b18      	ldr	r3, [pc, #96]	; (800a464 <_Balloc+0x78>)
 800a404:	4818      	ldr	r0, [pc, #96]	; (800a468 <_Balloc+0x7c>)
 800a406:	2166      	movs	r1, #102	; 0x66
 800a408:	f000 ff3c 	bl	800b284 <__assert_func>
 800a40c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a410:	6006      	str	r6, [r0, #0]
 800a412:	60c6      	str	r6, [r0, #12]
 800a414:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a416:	68f3      	ldr	r3, [r6, #12]
 800a418:	b183      	cbz	r3, 800a43c <_Balloc+0x50>
 800a41a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a422:	b9b8      	cbnz	r0, 800a454 <_Balloc+0x68>
 800a424:	2101      	movs	r1, #1
 800a426:	fa01 f605 	lsl.w	r6, r1, r5
 800a42a:	1d72      	adds	r2, r6, #5
 800a42c:	0092      	lsls	r2, r2, #2
 800a42e:	4620      	mov	r0, r4
 800a430:	f000 fc9a 	bl	800ad68 <_calloc_r>
 800a434:	b160      	cbz	r0, 800a450 <_Balloc+0x64>
 800a436:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a43a:	e00e      	b.n	800a45a <_Balloc+0x6e>
 800a43c:	2221      	movs	r2, #33	; 0x21
 800a43e:	2104      	movs	r1, #4
 800a440:	4620      	mov	r0, r4
 800a442:	f000 fc91 	bl	800ad68 <_calloc_r>
 800a446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a448:	60f0      	str	r0, [r6, #12]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1e4      	bne.n	800a41a <_Balloc+0x2e>
 800a450:	2000      	movs	r0, #0
 800a452:	bd70      	pop	{r4, r5, r6, pc}
 800a454:	6802      	ldr	r2, [r0, #0]
 800a456:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a45a:	2300      	movs	r3, #0
 800a45c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a460:	e7f7      	b.n	800a452 <_Balloc+0x66>
 800a462:	bf00      	nop
 800a464:	0800c03e 	.word	0x0800c03e
 800a468:	0800c13c 	.word	0x0800c13c

0800a46c <_Bfree>:
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a470:	4605      	mov	r5, r0
 800a472:	460c      	mov	r4, r1
 800a474:	b976      	cbnz	r6, 800a494 <_Bfree+0x28>
 800a476:	2010      	movs	r0, #16
 800a478:	f7ff ff90 	bl	800a39c <malloc>
 800a47c:	4602      	mov	r2, r0
 800a47e:	6268      	str	r0, [r5, #36]	; 0x24
 800a480:	b920      	cbnz	r0, 800a48c <_Bfree+0x20>
 800a482:	4b09      	ldr	r3, [pc, #36]	; (800a4a8 <_Bfree+0x3c>)
 800a484:	4809      	ldr	r0, [pc, #36]	; (800a4ac <_Bfree+0x40>)
 800a486:	218a      	movs	r1, #138	; 0x8a
 800a488:	f000 fefc 	bl	800b284 <__assert_func>
 800a48c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a490:	6006      	str	r6, [r0, #0]
 800a492:	60c6      	str	r6, [r0, #12]
 800a494:	b13c      	cbz	r4, 800a4a6 <_Bfree+0x3a>
 800a496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a498:	6862      	ldr	r2, [r4, #4]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4a0:	6021      	str	r1, [r4, #0]
 800a4a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
 800a4a8:	0800c03e 	.word	0x0800c03e
 800a4ac:	0800c13c 	.word	0x0800c13c

0800a4b0 <__multadd>:
 800a4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b4:	690d      	ldr	r5, [r1, #16]
 800a4b6:	4607      	mov	r7, r0
 800a4b8:	460c      	mov	r4, r1
 800a4ba:	461e      	mov	r6, r3
 800a4bc:	f101 0c14 	add.w	ip, r1, #20
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	f8dc 3000 	ldr.w	r3, [ip]
 800a4c6:	b299      	uxth	r1, r3
 800a4c8:	fb02 6101 	mla	r1, r2, r1, r6
 800a4cc:	0c1e      	lsrs	r6, r3, #16
 800a4ce:	0c0b      	lsrs	r3, r1, #16
 800a4d0:	fb02 3306 	mla	r3, r2, r6, r3
 800a4d4:	b289      	uxth	r1, r1
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4dc:	4285      	cmp	r5, r0
 800a4de:	f84c 1b04 	str.w	r1, [ip], #4
 800a4e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4e6:	dcec      	bgt.n	800a4c2 <__multadd+0x12>
 800a4e8:	b30e      	cbz	r6, 800a52e <__multadd+0x7e>
 800a4ea:	68a3      	ldr	r3, [r4, #8]
 800a4ec:	42ab      	cmp	r3, r5
 800a4ee:	dc19      	bgt.n	800a524 <__multadd+0x74>
 800a4f0:	6861      	ldr	r1, [r4, #4]
 800a4f2:	4638      	mov	r0, r7
 800a4f4:	3101      	adds	r1, #1
 800a4f6:	f7ff ff79 	bl	800a3ec <_Balloc>
 800a4fa:	4680      	mov	r8, r0
 800a4fc:	b928      	cbnz	r0, 800a50a <__multadd+0x5a>
 800a4fe:	4602      	mov	r2, r0
 800a500:	4b0c      	ldr	r3, [pc, #48]	; (800a534 <__multadd+0x84>)
 800a502:	480d      	ldr	r0, [pc, #52]	; (800a538 <__multadd+0x88>)
 800a504:	21b5      	movs	r1, #181	; 0xb5
 800a506:	f000 febd 	bl	800b284 <__assert_func>
 800a50a:	6922      	ldr	r2, [r4, #16]
 800a50c:	3202      	adds	r2, #2
 800a50e:	f104 010c 	add.w	r1, r4, #12
 800a512:	0092      	lsls	r2, r2, #2
 800a514:	300c      	adds	r0, #12
 800a516:	f7ff ff5b 	bl	800a3d0 <memcpy>
 800a51a:	4621      	mov	r1, r4
 800a51c:	4638      	mov	r0, r7
 800a51e:	f7ff ffa5 	bl	800a46c <_Bfree>
 800a522:	4644      	mov	r4, r8
 800a524:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a528:	3501      	adds	r5, #1
 800a52a:	615e      	str	r6, [r3, #20]
 800a52c:	6125      	str	r5, [r4, #16]
 800a52e:	4620      	mov	r0, r4
 800a530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a534:	0800c0b0 	.word	0x0800c0b0
 800a538:	0800c13c 	.word	0x0800c13c

0800a53c <__s2b>:
 800a53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a540:	460c      	mov	r4, r1
 800a542:	4615      	mov	r5, r2
 800a544:	461f      	mov	r7, r3
 800a546:	2209      	movs	r2, #9
 800a548:	3308      	adds	r3, #8
 800a54a:	4606      	mov	r6, r0
 800a54c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a550:	2100      	movs	r1, #0
 800a552:	2201      	movs	r2, #1
 800a554:	429a      	cmp	r2, r3
 800a556:	db09      	blt.n	800a56c <__s2b+0x30>
 800a558:	4630      	mov	r0, r6
 800a55a:	f7ff ff47 	bl	800a3ec <_Balloc>
 800a55e:	b940      	cbnz	r0, 800a572 <__s2b+0x36>
 800a560:	4602      	mov	r2, r0
 800a562:	4b19      	ldr	r3, [pc, #100]	; (800a5c8 <__s2b+0x8c>)
 800a564:	4819      	ldr	r0, [pc, #100]	; (800a5cc <__s2b+0x90>)
 800a566:	21ce      	movs	r1, #206	; 0xce
 800a568:	f000 fe8c 	bl	800b284 <__assert_func>
 800a56c:	0052      	lsls	r2, r2, #1
 800a56e:	3101      	adds	r1, #1
 800a570:	e7f0      	b.n	800a554 <__s2b+0x18>
 800a572:	9b08      	ldr	r3, [sp, #32]
 800a574:	6143      	str	r3, [r0, #20]
 800a576:	2d09      	cmp	r5, #9
 800a578:	f04f 0301 	mov.w	r3, #1
 800a57c:	6103      	str	r3, [r0, #16]
 800a57e:	dd16      	ble.n	800a5ae <__s2b+0x72>
 800a580:	f104 0909 	add.w	r9, r4, #9
 800a584:	46c8      	mov	r8, r9
 800a586:	442c      	add	r4, r5
 800a588:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a58c:	4601      	mov	r1, r0
 800a58e:	3b30      	subs	r3, #48	; 0x30
 800a590:	220a      	movs	r2, #10
 800a592:	4630      	mov	r0, r6
 800a594:	f7ff ff8c 	bl	800a4b0 <__multadd>
 800a598:	45a0      	cmp	r8, r4
 800a59a:	d1f5      	bne.n	800a588 <__s2b+0x4c>
 800a59c:	f1a5 0408 	sub.w	r4, r5, #8
 800a5a0:	444c      	add	r4, r9
 800a5a2:	1b2d      	subs	r5, r5, r4
 800a5a4:	1963      	adds	r3, r4, r5
 800a5a6:	42bb      	cmp	r3, r7
 800a5a8:	db04      	blt.n	800a5b4 <__s2b+0x78>
 800a5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ae:	340a      	adds	r4, #10
 800a5b0:	2509      	movs	r5, #9
 800a5b2:	e7f6      	b.n	800a5a2 <__s2b+0x66>
 800a5b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5b8:	4601      	mov	r1, r0
 800a5ba:	3b30      	subs	r3, #48	; 0x30
 800a5bc:	220a      	movs	r2, #10
 800a5be:	4630      	mov	r0, r6
 800a5c0:	f7ff ff76 	bl	800a4b0 <__multadd>
 800a5c4:	e7ee      	b.n	800a5a4 <__s2b+0x68>
 800a5c6:	bf00      	nop
 800a5c8:	0800c0b0 	.word	0x0800c0b0
 800a5cc:	0800c13c 	.word	0x0800c13c

0800a5d0 <__hi0bits>:
 800a5d0:	0c03      	lsrs	r3, r0, #16
 800a5d2:	041b      	lsls	r3, r3, #16
 800a5d4:	b9d3      	cbnz	r3, 800a60c <__hi0bits+0x3c>
 800a5d6:	0400      	lsls	r0, r0, #16
 800a5d8:	2310      	movs	r3, #16
 800a5da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a5de:	bf04      	itt	eq
 800a5e0:	0200      	lsleq	r0, r0, #8
 800a5e2:	3308      	addeq	r3, #8
 800a5e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a5e8:	bf04      	itt	eq
 800a5ea:	0100      	lsleq	r0, r0, #4
 800a5ec:	3304      	addeq	r3, #4
 800a5ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5f2:	bf04      	itt	eq
 800a5f4:	0080      	lsleq	r0, r0, #2
 800a5f6:	3302      	addeq	r3, #2
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	db05      	blt.n	800a608 <__hi0bits+0x38>
 800a5fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a600:	f103 0301 	add.w	r3, r3, #1
 800a604:	bf08      	it	eq
 800a606:	2320      	moveq	r3, #32
 800a608:	4618      	mov	r0, r3
 800a60a:	4770      	bx	lr
 800a60c:	2300      	movs	r3, #0
 800a60e:	e7e4      	b.n	800a5da <__hi0bits+0xa>

0800a610 <__lo0bits>:
 800a610:	6803      	ldr	r3, [r0, #0]
 800a612:	f013 0207 	ands.w	r2, r3, #7
 800a616:	4601      	mov	r1, r0
 800a618:	d00b      	beq.n	800a632 <__lo0bits+0x22>
 800a61a:	07da      	lsls	r2, r3, #31
 800a61c:	d423      	bmi.n	800a666 <__lo0bits+0x56>
 800a61e:	0798      	lsls	r0, r3, #30
 800a620:	bf49      	itett	mi
 800a622:	085b      	lsrmi	r3, r3, #1
 800a624:	089b      	lsrpl	r3, r3, #2
 800a626:	2001      	movmi	r0, #1
 800a628:	600b      	strmi	r3, [r1, #0]
 800a62a:	bf5c      	itt	pl
 800a62c:	600b      	strpl	r3, [r1, #0]
 800a62e:	2002      	movpl	r0, #2
 800a630:	4770      	bx	lr
 800a632:	b298      	uxth	r0, r3
 800a634:	b9a8      	cbnz	r0, 800a662 <__lo0bits+0x52>
 800a636:	0c1b      	lsrs	r3, r3, #16
 800a638:	2010      	movs	r0, #16
 800a63a:	b2da      	uxtb	r2, r3
 800a63c:	b90a      	cbnz	r2, 800a642 <__lo0bits+0x32>
 800a63e:	3008      	adds	r0, #8
 800a640:	0a1b      	lsrs	r3, r3, #8
 800a642:	071a      	lsls	r2, r3, #28
 800a644:	bf04      	itt	eq
 800a646:	091b      	lsreq	r3, r3, #4
 800a648:	3004      	addeq	r0, #4
 800a64a:	079a      	lsls	r2, r3, #30
 800a64c:	bf04      	itt	eq
 800a64e:	089b      	lsreq	r3, r3, #2
 800a650:	3002      	addeq	r0, #2
 800a652:	07da      	lsls	r2, r3, #31
 800a654:	d403      	bmi.n	800a65e <__lo0bits+0x4e>
 800a656:	085b      	lsrs	r3, r3, #1
 800a658:	f100 0001 	add.w	r0, r0, #1
 800a65c:	d005      	beq.n	800a66a <__lo0bits+0x5a>
 800a65e:	600b      	str	r3, [r1, #0]
 800a660:	4770      	bx	lr
 800a662:	4610      	mov	r0, r2
 800a664:	e7e9      	b.n	800a63a <__lo0bits+0x2a>
 800a666:	2000      	movs	r0, #0
 800a668:	4770      	bx	lr
 800a66a:	2020      	movs	r0, #32
 800a66c:	4770      	bx	lr
	...

0800a670 <__i2b>:
 800a670:	b510      	push	{r4, lr}
 800a672:	460c      	mov	r4, r1
 800a674:	2101      	movs	r1, #1
 800a676:	f7ff feb9 	bl	800a3ec <_Balloc>
 800a67a:	4602      	mov	r2, r0
 800a67c:	b928      	cbnz	r0, 800a68a <__i2b+0x1a>
 800a67e:	4b05      	ldr	r3, [pc, #20]	; (800a694 <__i2b+0x24>)
 800a680:	4805      	ldr	r0, [pc, #20]	; (800a698 <__i2b+0x28>)
 800a682:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a686:	f000 fdfd 	bl	800b284 <__assert_func>
 800a68a:	2301      	movs	r3, #1
 800a68c:	6144      	str	r4, [r0, #20]
 800a68e:	6103      	str	r3, [r0, #16]
 800a690:	bd10      	pop	{r4, pc}
 800a692:	bf00      	nop
 800a694:	0800c0b0 	.word	0x0800c0b0
 800a698:	0800c13c 	.word	0x0800c13c

0800a69c <__multiply>:
 800a69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	4691      	mov	r9, r2
 800a6a2:	690a      	ldr	r2, [r1, #16]
 800a6a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	bfb8      	it	lt
 800a6ac:	460b      	movlt	r3, r1
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	bfbc      	itt	lt
 800a6b2:	464c      	movlt	r4, r9
 800a6b4:	4699      	movlt	r9, r3
 800a6b6:	6927      	ldr	r7, [r4, #16]
 800a6b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6bc:	68a3      	ldr	r3, [r4, #8]
 800a6be:	6861      	ldr	r1, [r4, #4]
 800a6c0:	eb07 060a 	add.w	r6, r7, sl
 800a6c4:	42b3      	cmp	r3, r6
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	bfb8      	it	lt
 800a6ca:	3101      	addlt	r1, #1
 800a6cc:	f7ff fe8e 	bl	800a3ec <_Balloc>
 800a6d0:	b930      	cbnz	r0, 800a6e0 <__multiply+0x44>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	4b44      	ldr	r3, [pc, #272]	; (800a7e8 <__multiply+0x14c>)
 800a6d6:	4845      	ldr	r0, [pc, #276]	; (800a7ec <__multiply+0x150>)
 800a6d8:	f240 115d 	movw	r1, #349	; 0x15d
 800a6dc:	f000 fdd2 	bl	800b284 <__assert_func>
 800a6e0:	f100 0514 	add.w	r5, r0, #20
 800a6e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6e8:	462b      	mov	r3, r5
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	4543      	cmp	r3, r8
 800a6ee:	d321      	bcc.n	800a734 <__multiply+0x98>
 800a6f0:	f104 0314 	add.w	r3, r4, #20
 800a6f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a6f8:	f109 0314 	add.w	r3, r9, #20
 800a6fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a700:	9202      	str	r2, [sp, #8]
 800a702:	1b3a      	subs	r2, r7, r4
 800a704:	3a15      	subs	r2, #21
 800a706:	f022 0203 	bic.w	r2, r2, #3
 800a70a:	3204      	adds	r2, #4
 800a70c:	f104 0115 	add.w	r1, r4, #21
 800a710:	428f      	cmp	r7, r1
 800a712:	bf38      	it	cc
 800a714:	2204      	movcc	r2, #4
 800a716:	9201      	str	r2, [sp, #4]
 800a718:	9a02      	ldr	r2, [sp, #8]
 800a71a:	9303      	str	r3, [sp, #12]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d80c      	bhi.n	800a73a <__multiply+0x9e>
 800a720:	2e00      	cmp	r6, #0
 800a722:	dd03      	ble.n	800a72c <__multiply+0x90>
 800a724:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d05a      	beq.n	800a7e2 <__multiply+0x146>
 800a72c:	6106      	str	r6, [r0, #16]
 800a72e:	b005      	add	sp, #20
 800a730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a734:	f843 2b04 	str.w	r2, [r3], #4
 800a738:	e7d8      	b.n	800a6ec <__multiply+0x50>
 800a73a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a73e:	f1ba 0f00 	cmp.w	sl, #0
 800a742:	d024      	beq.n	800a78e <__multiply+0xf2>
 800a744:	f104 0e14 	add.w	lr, r4, #20
 800a748:	46a9      	mov	r9, r5
 800a74a:	f04f 0c00 	mov.w	ip, #0
 800a74e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a752:	f8d9 1000 	ldr.w	r1, [r9]
 800a756:	fa1f fb82 	uxth.w	fp, r2
 800a75a:	b289      	uxth	r1, r1
 800a75c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a760:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a764:	f8d9 2000 	ldr.w	r2, [r9]
 800a768:	4461      	add	r1, ip
 800a76a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a76e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a772:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a776:	b289      	uxth	r1, r1
 800a778:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a77c:	4577      	cmp	r7, lr
 800a77e:	f849 1b04 	str.w	r1, [r9], #4
 800a782:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a786:	d8e2      	bhi.n	800a74e <__multiply+0xb2>
 800a788:	9a01      	ldr	r2, [sp, #4]
 800a78a:	f845 c002 	str.w	ip, [r5, r2]
 800a78e:	9a03      	ldr	r2, [sp, #12]
 800a790:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a794:	3304      	adds	r3, #4
 800a796:	f1b9 0f00 	cmp.w	r9, #0
 800a79a:	d020      	beq.n	800a7de <__multiply+0x142>
 800a79c:	6829      	ldr	r1, [r5, #0]
 800a79e:	f104 0c14 	add.w	ip, r4, #20
 800a7a2:	46ae      	mov	lr, r5
 800a7a4:	f04f 0a00 	mov.w	sl, #0
 800a7a8:	f8bc b000 	ldrh.w	fp, [ip]
 800a7ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a7b0:	fb09 220b 	mla	r2, r9, fp, r2
 800a7b4:	4492      	add	sl, r2
 800a7b6:	b289      	uxth	r1, r1
 800a7b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a7bc:	f84e 1b04 	str.w	r1, [lr], #4
 800a7c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a7c4:	f8be 1000 	ldrh.w	r1, [lr]
 800a7c8:	0c12      	lsrs	r2, r2, #16
 800a7ca:	fb09 1102 	mla	r1, r9, r2, r1
 800a7ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a7d2:	4567      	cmp	r7, ip
 800a7d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7d8:	d8e6      	bhi.n	800a7a8 <__multiply+0x10c>
 800a7da:	9a01      	ldr	r2, [sp, #4]
 800a7dc:	50a9      	str	r1, [r5, r2]
 800a7de:	3504      	adds	r5, #4
 800a7e0:	e79a      	b.n	800a718 <__multiply+0x7c>
 800a7e2:	3e01      	subs	r6, #1
 800a7e4:	e79c      	b.n	800a720 <__multiply+0x84>
 800a7e6:	bf00      	nop
 800a7e8:	0800c0b0 	.word	0x0800c0b0
 800a7ec:	0800c13c 	.word	0x0800c13c

0800a7f0 <__pow5mult>:
 800a7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f4:	4615      	mov	r5, r2
 800a7f6:	f012 0203 	ands.w	r2, r2, #3
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	460f      	mov	r7, r1
 800a7fe:	d007      	beq.n	800a810 <__pow5mult+0x20>
 800a800:	4c25      	ldr	r4, [pc, #148]	; (800a898 <__pow5mult+0xa8>)
 800a802:	3a01      	subs	r2, #1
 800a804:	2300      	movs	r3, #0
 800a806:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a80a:	f7ff fe51 	bl	800a4b0 <__multadd>
 800a80e:	4607      	mov	r7, r0
 800a810:	10ad      	asrs	r5, r5, #2
 800a812:	d03d      	beq.n	800a890 <__pow5mult+0xa0>
 800a814:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a816:	b97c      	cbnz	r4, 800a838 <__pow5mult+0x48>
 800a818:	2010      	movs	r0, #16
 800a81a:	f7ff fdbf 	bl	800a39c <malloc>
 800a81e:	4602      	mov	r2, r0
 800a820:	6270      	str	r0, [r6, #36]	; 0x24
 800a822:	b928      	cbnz	r0, 800a830 <__pow5mult+0x40>
 800a824:	4b1d      	ldr	r3, [pc, #116]	; (800a89c <__pow5mult+0xac>)
 800a826:	481e      	ldr	r0, [pc, #120]	; (800a8a0 <__pow5mult+0xb0>)
 800a828:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a82c:	f000 fd2a 	bl	800b284 <__assert_func>
 800a830:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a834:	6004      	str	r4, [r0, #0]
 800a836:	60c4      	str	r4, [r0, #12]
 800a838:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a83c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a840:	b94c      	cbnz	r4, 800a856 <__pow5mult+0x66>
 800a842:	f240 2171 	movw	r1, #625	; 0x271
 800a846:	4630      	mov	r0, r6
 800a848:	f7ff ff12 	bl	800a670 <__i2b>
 800a84c:	2300      	movs	r3, #0
 800a84e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a852:	4604      	mov	r4, r0
 800a854:	6003      	str	r3, [r0, #0]
 800a856:	f04f 0900 	mov.w	r9, #0
 800a85a:	07eb      	lsls	r3, r5, #31
 800a85c:	d50a      	bpl.n	800a874 <__pow5mult+0x84>
 800a85e:	4639      	mov	r1, r7
 800a860:	4622      	mov	r2, r4
 800a862:	4630      	mov	r0, r6
 800a864:	f7ff ff1a 	bl	800a69c <__multiply>
 800a868:	4639      	mov	r1, r7
 800a86a:	4680      	mov	r8, r0
 800a86c:	4630      	mov	r0, r6
 800a86e:	f7ff fdfd 	bl	800a46c <_Bfree>
 800a872:	4647      	mov	r7, r8
 800a874:	106d      	asrs	r5, r5, #1
 800a876:	d00b      	beq.n	800a890 <__pow5mult+0xa0>
 800a878:	6820      	ldr	r0, [r4, #0]
 800a87a:	b938      	cbnz	r0, 800a88c <__pow5mult+0x9c>
 800a87c:	4622      	mov	r2, r4
 800a87e:	4621      	mov	r1, r4
 800a880:	4630      	mov	r0, r6
 800a882:	f7ff ff0b 	bl	800a69c <__multiply>
 800a886:	6020      	str	r0, [r4, #0]
 800a888:	f8c0 9000 	str.w	r9, [r0]
 800a88c:	4604      	mov	r4, r0
 800a88e:	e7e4      	b.n	800a85a <__pow5mult+0x6a>
 800a890:	4638      	mov	r0, r7
 800a892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a896:	bf00      	nop
 800a898:	0800c288 	.word	0x0800c288
 800a89c:	0800c03e 	.word	0x0800c03e
 800a8a0:	0800c13c 	.word	0x0800c13c

0800a8a4 <__lshift>:
 800a8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	6849      	ldr	r1, [r1, #4]
 800a8ac:	6923      	ldr	r3, [r4, #16]
 800a8ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8b2:	68a3      	ldr	r3, [r4, #8]
 800a8b4:	4607      	mov	r7, r0
 800a8b6:	4691      	mov	r9, r2
 800a8b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8bc:	f108 0601 	add.w	r6, r8, #1
 800a8c0:	42b3      	cmp	r3, r6
 800a8c2:	db0b      	blt.n	800a8dc <__lshift+0x38>
 800a8c4:	4638      	mov	r0, r7
 800a8c6:	f7ff fd91 	bl	800a3ec <_Balloc>
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	b948      	cbnz	r0, 800a8e2 <__lshift+0x3e>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	4b2a      	ldr	r3, [pc, #168]	; (800a97c <__lshift+0xd8>)
 800a8d2:	482b      	ldr	r0, [pc, #172]	; (800a980 <__lshift+0xdc>)
 800a8d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a8d8:	f000 fcd4 	bl	800b284 <__assert_func>
 800a8dc:	3101      	adds	r1, #1
 800a8de:	005b      	lsls	r3, r3, #1
 800a8e0:	e7ee      	b.n	800a8c0 <__lshift+0x1c>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	f100 0114 	add.w	r1, r0, #20
 800a8e8:	f100 0210 	add.w	r2, r0, #16
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	4553      	cmp	r3, sl
 800a8f0:	db37      	blt.n	800a962 <__lshift+0xbe>
 800a8f2:	6920      	ldr	r0, [r4, #16]
 800a8f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8f8:	f104 0314 	add.w	r3, r4, #20
 800a8fc:	f019 091f 	ands.w	r9, r9, #31
 800a900:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a904:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a908:	d02f      	beq.n	800a96a <__lshift+0xc6>
 800a90a:	f1c9 0e20 	rsb	lr, r9, #32
 800a90e:	468a      	mov	sl, r1
 800a910:	f04f 0c00 	mov.w	ip, #0
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	fa02 f209 	lsl.w	r2, r2, r9
 800a91a:	ea42 020c 	orr.w	r2, r2, ip
 800a91e:	f84a 2b04 	str.w	r2, [sl], #4
 800a922:	f853 2b04 	ldr.w	r2, [r3], #4
 800a926:	4298      	cmp	r0, r3
 800a928:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a92c:	d8f2      	bhi.n	800a914 <__lshift+0x70>
 800a92e:	1b03      	subs	r3, r0, r4
 800a930:	3b15      	subs	r3, #21
 800a932:	f023 0303 	bic.w	r3, r3, #3
 800a936:	3304      	adds	r3, #4
 800a938:	f104 0215 	add.w	r2, r4, #21
 800a93c:	4290      	cmp	r0, r2
 800a93e:	bf38      	it	cc
 800a940:	2304      	movcc	r3, #4
 800a942:	f841 c003 	str.w	ip, [r1, r3]
 800a946:	f1bc 0f00 	cmp.w	ip, #0
 800a94a:	d001      	beq.n	800a950 <__lshift+0xac>
 800a94c:	f108 0602 	add.w	r6, r8, #2
 800a950:	3e01      	subs	r6, #1
 800a952:	4638      	mov	r0, r7
 800a954:	612e      	str	r6, [r5, #16]
 800a956:	4621      	mov	r1, r4
 800a958:	f7ff fd88 	bl	800a46c <_Bfree>
 800a95c:	4628      	mov	r0, r5
 800a95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a962:	f842 0f04 	str.w	r0, [r2, #4]!
 800a966:	3301      	adds	r3, #1
 800a968:	e7c1      	b.n	800a8ee <__lshift+0x4a>
 800a96a:	3904      	subs	r1, #4
 800a96c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a970:	f841 2f04 	str.w	r2, [r1, #4]!
 800a974:	4298      	cmp	r0, r3
 800a976:	d8f9      	bhi.n	800a96c <__lshift+0xc8>
 800a978:	e7ea      	b.n	800a950 <__lshift+0xac>
 800a97a:	bf00      	nop
 800a97c:	0800c0b0 	.word	0x0800c0b0
 800a980:	0800c13c 	.word	0x0800c13c

0800a984 <__mcmp>:
 800a984:	b530      	push	{r4, r5, lr}
 800a986:	6902      	ldr	r2, [r0, #16]
 800a988:	690c      	ldr	r4, [r1, #16]
 800a98a:	1b12      	subs	r2, r2, r4
 800a98c:	d10e      	bne.n	800a9ac <__mcmp+0x28>
 800a98e:	f100 0314 	add.w	r3, r0, #20
 800a992:	3114      	adds	r1, #20
 800a994:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a998:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a99c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a9a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a9a4:	42a5      	cmp	r5, r4
 800a9a6:	d003      	beq.n	800a9b0 <__mcmp+0x2c>
 800a9a8:	d305      	bcc.n	800a9b6 <__mcmp+0x32>
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	bd30      	pop	{r4, r5, pc}
 800a9b0:	4283      	cmp	r3, r0
 800a9b2:	d3f3      	bcc.n	800a99c <__mcmp+0x18>
 800a9b4:	e7fa      	b.n	800a9ac <__mcmp+0x28>
 800a9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ba:	e7f7      	b.n	800a9ac <__mcmp+0x28>

0800a9bc <__mdiff>:
 800a9bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c0:	460c      	mov	r4, r1
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	4690      	mov	r8, r2
 800a9ca:	f7ff ffdb 	bl	800a984 <__mcmp>
 800a9ce:	1e05      	subs	r5, r0, #0
 800a9d0:	d110      	bne.n	800a9f4 <__mdiff+0x38>
 800a9d2:	4629      	mov	r1, r5
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	f7ff fd09 	bl	800a3ec <_Balloc>
 800a9da:	b930      	cbnz	r0, 800a9ea <__mdiff+0x2e>
 800a9dc:	4b3a      	ldr	r3, [pc, #232]	; (800aac8 <__mdiff+0x10c>)
 800a9de:	4602      	mov	r2, r0
 800a9e0:	f240 2132 	movw	r1, #562	; 0x232
 800a9e4:	4839      	ldr	r0, [pc, #228]	; (800aacc <__mdiff+0x110>)
 800a9e6:	f000 fc4d 	bl	800b284 <__assert_func>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f4:	bfa4      	itt	ge
 800a9f6:	4643      	movge	r3, r8
 800a9f8:	46a0      	movge	r8, r4
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aa00:	bfa6      	itte	ge
 800aa02:	461c      	movge	r4, r3
 800aa04:	2500      	movge	r5, #0
 800aa06:	2501      	movlt	r5, #1
 800aa08:	f7ff fcf0 	bl	800a3ec <_Balloc>
 800aa0c:	b920      	cbnz	r0, 800aa18 <__mdiff+0x5c>
 800aa0e:	4b2e      	ldr	r3, [pc, #184]	; (800aac8 <__mdiff+0x10c>)
 800aa10:	4602      	mov	r2, r0
 800aa12:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aa16:	e7e5      	b.n	800a9e4 <__mdiff+0x28>
 800aa18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa1c:	6926      	ldr	r6, [r4, #16]
 800aa1e:	60c5      	str	r5, [r0, #12]
 800aa20:	f104 0914 	add.w	r9, r4, #20
 800aa24:	f108 0514 	add.w	r5, r8, #20
 800aa28:	f100 0e14 	add.w	lr, r0, #20
 800aa2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aa30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa34:	f108 0210 	add.w	r2, r8, #16
 800aa38:	46f2      	mov	sl, lr
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa44:	fa1f f883 	uxth.w	r8, r3
 800aa48:	fa11 f18b 	uxtah	r1, r1, fp
 800aa4c:	0c1b      	lsrs	r3, r3, #16
 800aa4e:	eba1 0808 	sub.w	r8, r1, r8
 800aa52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa5a:	fa1f f888 	uxth.w	r8, r8
 800aa5e:	1419      	asrs	r1, r3, #16
 800aa60:	454e      	cmp	r6, r9
 800aa62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa66:	f84a 3b04 	str.w	r3, [sl], #4
 800aa6a:	d8e7      	bhi.n	800aa3c <__mdiff+0x80>
 800aa6c:	1b33      	subs	r3, r6, r4
 800aa6e:	3b15      	subs	r3, #21
 800aa70:	f023 0303 	bic.w	r3, r3, #3
 800aa74:	3304      	adds	r3, #4
 800aa76:	3415      	adds	r4, #21
 800aa78:	42a6      	cmp	r6, r4
 800aa7a:	bf38      	it	cc
 800aa7c:	2304      	movcc	r3, #4
 800aa7e:	441d      	add	r5, r3
 800aa80:	4473      	add	r3, lr
 800aa82:	469e      	mov	lr, r3
 800aa84:	462e      	mov	r6, r5
 800aa86:	4566      	cmp	r6, ip
 800aa88:	d30e      	bcc.n	800aaa8 <__mdiff+0xec>
 800aa8a:	f10c 0203 	add.w	r2, ip, #3
 800aa8e:	1b52      	subs	r2, r2, r5
 800aa90:	f022 0203 	bic.w	r2, r2, #3
 800aa94:	3d03      	subs	r5, #3
 800aa96:	45ac      	cmp	ip, r5
 800aa98:	bf38      	it	cc
 800aa9a:	2200      	movcc	r2, #0
 800aa9c:	441a      	add	r2, r3
 800aa9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aaa2:	b17b      	cbz	r3, 800aac4 <__mdiff+0x108>
 800aaa4:	6107      	str	r7, [r0, #16]
 800aaa6:	e7a3      	b.n	800a9f0 <__mdiff+0x34>
 800aaa8:	f856 8b04 	ldr.w	r8, [r6], #4
 800aaac:	fa11 f288 	uxtah	r2, r1, r8
 800aab0:	1414      	asrs	r4, r2, #16
 800aab2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aab6:	b292      	uxth	r2, r2
 800aab8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aabc:	f84e 2b04 	str.w	r2, [lr], #4
 800aac0:	1421      	asrs	r1, r4, #16
 800aac2:	e7e0      	b.n	800aa86 <__mdiff+0xca>
 800aac4:	3f01      	subs	r7, #1
 800aac6:	e7ea      	b.n	800aa9e <__mdiff+0xe2>
 800aac8:	0800c0b0 	.word	0x0800c0b0
 800aacc:	0800c13c 	.word	0x0800c13c

0800aad0 <__ulp>:
 800aad0:	b082      	sub	sp, #8
 800aad2:	ed8d 0b00 	vstr	d0, [sp]
 800aad6:	9b01      	ldr	r3, [sp, #4]
 800aad8:	4912      	ldr	r1, [pc, #72]	; (800ab24 <__ulp+0x54>)
 800aada:	4019      	ands	r1, r3
 800aadc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800aae0:	2900      	cmp	r1, #0
 800aae2:	dd05      	ble.n	800aaf0 <__ulp+0x20>
 800aae4:	2200      	movs	r2, #0
 800aae6:	460b      	mov	r3, r1
 800aae8:	ec43 2b10 	vmov	d0, r2, r3
 800aaec:	b002      	add	sp, #8
 800aaee:	4770      	bx	lr
 800aaf0:	4249      	negs	r1, r1
 800aaf2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800aaf6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aafa:	f04f 0200 	mov.w	r2, #0
 800aafe:	f04f 0300 	mov.w	r3, #0
 800ab02:	da04      	bge.n	800ab0e <__ulp+0x3e>
 800ab04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ab08:	fa41 f300 	asr.w	r3, r1, r0
 800ab0c:	e7ec      	b.n	800aae8 <__ulp+0x18>
 800ab0e:	f1a0 0114 	sub.w	r1, r0, #20
 800ab12:	291e      	cmp	r1, #30
 800ab14:	bfda      	itte	le
 800ab16:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ab1a:	fa20 f101 	lsrle.w	r1, r0, r1
 800ab1e:	2101      	movgt	r1, #1
 800ab20:	460a      	mov	r2, r1
 800ab22:	e7e1      	b.n	800aae8 <__ulp+0x18>
 800ab24:	7ff00000 	.word	0x7ff00000

0800ab28 <__b2d>:
 800ab28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2a:	6905      	ldr	r5, [r0, #16]
 800ab2c:	f100 0714 	add.w	r7, r0, #20
 800ab30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ab34:	1f2e      	subs	r6, r5, #4
 800ab36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f7ff fd48 	bl	800a5d0 <__hi0bits>
 800ab40:	f1c0 0320 	rsb	r3, r0, #32
 800ab44:	280a      	cmp	r0, #10
 800ab46:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800abc4 <__b2d+0x9c>
 800ab4a:	600b      	str	r3, [r1, #0]
 800ab4c:	dc14      	bgt.n	800ab78 <__b2d+0x50>
 800ab4e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ab52:	fa24 f10e 	lsr.w	r1, r4, lr
 800ab56:	42b7      	cmp	r7, r6
 800ab58:	ea41 030c 	orr.w	r3, r1, ip
 800ab5c:	bf34      	ite	cc
 800ab5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ab62:	2100      	movcs	r1, #0
 800ab64:	3015      	adds	r0, #21
 800ab66:	fa04 f000 	lsl.w	r0, r4, r0
 800ab6a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ab6e:	ea40 0201 	orr.w	r2, r0, r1
 800ab72:	ec43 2b10 	vmov	d0, r2, r3
 800ab76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab78:	42b7      	cmp	r7, r6
 800ab7a:	bf3a      	itte	cc
 800ab7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ab80:	f1a5 0608 	subcc.w	r6, r5, #8
 800ab84:	2100      	movcs	r1, #0
 800ab86:	380b      	subs	r0, #11
 800ab88:	d017      	beq.n	800abba <__b2d+0x92>
 800ab8a:	f1c0 0c20 	rsb	ip, r0, #32
 800ab8e:	fa04 f500 	lsl.w	r5, r4, r0
 800ab92:	42be      	cmp	r6, r7
 800ab94:	fa21 f40c 	lsr.w	r4, r1, ip
 800ab98:	ea45 0504 	orr.w	r5, r5, r4
 800ab9c:	bf8c      	ite	hi
 800ab9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aba2:	2400      	movls	r4, #0
 800aba4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800aba8:	fa01 f000 	lsl.w	r0, r1, r0
 800abac:	fa24 f40c 	lsr.w	r4, r4, ip
 800abb0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800abb4:	ea40 0204 	orr.w	r2, r0, r4
 800abb8:	e7db      	b.n	800ab72 <__b2d+0x4a>
 800abba:	ea44 030c 	orr.w	r3, r4, ip
 800abbe:	460a      	mov	r2, r1
 800abc0:	e7d7      	b.n	800ab72 <__b2d+0x4a>
 800abc2:	bf00      	nop
 800abc4:	3ff00000 	.word	0x3ff00000

0800abc8 <__d2b>:
 800abc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800abcc:	4689      	mov	r9, r1
 800abce:	2101      	movs	r1, #1
 800abd0:	ec57 6b10 	vmov	r6, r7, d0
 800abd4:	4690      	mov	r8, r2
 800abd6:	f7ff fc09 	bl	800a3ec <_Balloc>
 800abda:	4604      	mov	r4, r0
 800abdc:	b930      	cbnz	r0, 800abec <__d2b+0x24>
 800abde:	4602      	mov	r2, r0
 800abe0:	4b25      	ldr	r3, [pc, #148]	; (800ac78 <__d2b+0xb0>)
 800abe2:	4826      	ldr	r0, [pc, #152]	; (800ac7c <__d2b+0xb4>)
 800abe4:	f240 310a 	movw	r1, #778	; 0x30a
 800abe8:	f000 fb4c 	bl	800b284 <__assert_func>
 800abec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800abf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800abf4:	bb35      	cbnz	r5, 800ac44 <__d2b+0x7c>
 800abf6:	2e00      	cmp	r6, #0
 800abf8:	9301      	str	r3, [sp, #4]
 800abfa:	d028      	beq.n	800ac4e <__d2b+0x86>
 800abfc:	4668      	mov	r0, sp
 800abfe:	9600      	str	r6, [sp, #0]
 800ac00:	f7ff fd06 	bl	800a610 <__lo0bits>
 800ac04:	9900      	ldr	r1, [sp, #0]
 800ac06:	b300      	cbz	r0, 800ac4a <__d2b+0x82>
 800ac08:	9a01      	ldr	r2, [sp, #4]
 800ac0a:	f1c0 0320 	rsb	r3, r0, #32
 800ac0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac12:	430b      	orrs	r3, r1
 800ac14:	40c2      	lsrs	r2, r0
 800ac16:	6163      	str	r3, [r4, #20]
 800ac18:	9201      	str	r2, [sp, #4]
 800ac1a:	9b01      	ldr	r3, [sp, #4]
 800ac1c:	61a3      	str	r3, [r4, #24]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	bf14      	ite	ne
 800ac22:	2202      	movne	r2, #2
 800ac24:	2201      	moveq	r2, #1
 800ac26:	6122      	str	r2, [r4, #16]
 800ac28:	b1d5      	cbz	r5, 800ac60 <__d2b+0x98>
 800ac2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac2e:	4405      	add	r5, r0
 800ac30:	f8c9 5000 	str.w	r5, [r9]
 800ac34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac38:	f8c8 0000 	str.w	r0, [r8]
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	b003      	add	sp, #12
 800ac40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac48:	e7d5      	b.n	800abf6 <__d2b+0x2e>
 800ac4a:	6161      	str	r1, [r4, #20]
 800ac4c:	e7e5      	b.n	800ac1a <__d2b+0x52>
 800ac4e:	a801      	add	r0, sp, #4
 800ac50:	f7ff fcde 	bl	800a610 <__lo0bits>
 800ac54:	9b01      	ldr	r3, [sp, #4]
 800ac56:	6163      	str	r3, [r4, #20]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	6122      	str	r2, [r4, #16]
 800ac5c:	3020      	adds	r0, #32
 800ac5e:	e7e3      	b.n	800ac28 <__d2b+0x60>
 800ac60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac68:	f8c9 0000 	str.w	r0, [r9]
 800ac6c:	6918      	ldr	r0, [r3, #16]
 800ac6e:	f7ff fcaf 	bl	800a5d0 <__hi0bits>
 800ac72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac76:	e7df      	b.n	800ac38 <__d2b+0x70>
 800ac78:	0800c0b0 	.word	0x0800c0b0
 800ac7c:	0800c13c 	.word	0x0800c13c

0800ac80 <__ratio>:
 800ac80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac84:	4688      	mov	r8, r1
 800ac86:	4669      	mov	r1, sp
 800ac88:	4681      	mov	r9, r0
 800ac8a:	f7ff ff4d 	bl	800ab28 <__b2d>
 800ac8e:	a901      	add	r1, sp, #4
 800ac90:	4640      	mov	r0, r8
 800ac92:	ec55 4b10 	vmov	r4, r5, d0
 800ac96:	ee10 aa10 	vmov	sl, s0
 800ac9a:	f7ff ff45 	bl	800ab28 <__b2d>
 800ac9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aca2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800aca6:	1a59      	subs	r1, r3, r1
 800aca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800acb2:	ec57 6b10 	vmov	r6, r7, d0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	bfd6      	itet	le
 800acba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800acbe:	462a      	movgt	r2, r5
 800acc0:	463a      	movle	r2, r7
 800acc2:	46ab      	mov	fp, r5
 800acc4:	bfd6      	itet	le
 800acc6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800acca:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800acce:	ee00 3a90 	vmovle	s1, r3
 800acd2:	ec4b ab17 	vmov	d7, sl, fp
 800acd6:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800acda:	b003      	add	sp, #12
 800acdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ace0 <__copybits>:
 800ace0:	3901      	subs	r1, #1
 800ace2:	b570      	push	{r4, r5, r6, lr}
 800ace4:	1149      	asrs	r1, r1, #5
 800ace6:	6914      	ldr	r4, [r2, #16]
 800ace8:	3101      	adds	r1, #1
 800acea:	f102 0314 	add.w	r3, r2, #20
 800acee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800acf2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800acf6:	1f05      	subs	r5, r0, #4
 800acf8:	42a3      	cmp	r3, r4
 800acfa:	d30c      	bcc.n	800ad16 <__copybits+0x36>
 800acfc:	1aa3      	subs	r3, r4, r2
 800acfe:	3b11      	subs	r3, #17
 800ad00:	f023 0303 	bic.w	r3, r3, #3
 800ad04:	3211      	adds	r2, #17
 800ad06:	42a2      	cmp	r2, r4
 800ad08:	bf88      	it	hi
 800ad0a:	2300      	movhi	r3, #0
 800ad0c:	4418      	add	r0, r3
 800ad0e:	2300      	movs	r3, #0
 800ad10:	4288      	cmp	r0, r1
 800ad12:	d305      	bcc.n	800ad20 <__copybits+0x40>
 800ad14:	bd70      	pop	{r4, r5, r6, pc}
 800ad16:	f853 6b04 	ldr.w	r6, [r3], #4
 800ad1a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ad1e:	e7eb      	b.n	800acf8 <__copybits+0x18>
 800ad20:	f840 3b04 	str.w	r3, [r0], #4
 800ad24:	e7f4      	b.n	800ad10 <__copybits+0x30>

0800ad26 <__any_on>:
 800ad26:	f100 0214 	add.w	r2, r0, #20
 800ad2a:	6900      	ldr	r0, [r0, #16]
 800ad2c:	114b      	asrs	r3, r1, #5
 800ad2e:	4298      	cmp	r0, r3
 800ad30:	b510      	push	{r4, lr}
 800ad32:	db11      	blt.n	800ad58 <__any_on+0x32>
 800ad34:	dd0a      	ble.n	800ad4c <__any_on+0x26>
 800ad36:	f011 011f 	ands.w	r1, r1, #31
 800ad3a:	d007      	beq.n	800ad4c <__any_on+0x26>
 800ad3c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ad40:	fa24 f001 	lsr.w	r0, r4, r1
 800ad44:	fa00 f101 	lsl.w	r1, r0, r1
 800ad48:	428c      	cmp	r4, r1
 800ad4a:	d10b      	bne.n	800ad64 <__any_on+0x3e>
 800ad4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d803      	bhi.n	800ad5c <__any_on+0x36>
 800ad54:	2000      	movs	r0, #0
 800ad56:	bd10      	pop	{r4, pc}
 800ad58:	4603      	mov	r3, r0
 800ad5a:	e7f7      	b.n	800ad4c <__any_on+0x26>
 800ad5c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad60:	2900      	cmp	r1, #0
 800ad62:	d0f5      	beq.n	800ad50 <__any_on+0x2a>
 800ad64:	2001      	movs	r0, #1
 800ad66:	e7f6      	b.n	800ad56 <__any_on+0x30>

0800ad68 <_calloc_r>:
 800ad68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad6a:	fba1 2402 	umull	r2, r4, r1, r2
 800ad6e:	b94c      	cbnz	r4, 800ad84 <_calloc_r+0x1c>
 800ad70:	4611      	mov	r1, r2
 800ad72:	9201      	str	r2, [sp, #4]
 800ad74:	f000 f87a 	bl	800ae6c <_malloc_r>
 800ad78:	9a01      	ldr	r2, [sp, #4]
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	b930      	cbnz	r0, 800ad8c <_calloc_r+0x24>
 800ad7e:	4628      	mov	r0, r5
 800ad80:	b003      	add	sp, #12
 800ad82:	bd30      	pop	{r4, r5, pc}
 800ad84:	220c      	movs	r2, #12
 800ad86:	6002      	str	r2, [r0, #0]
 800ad88:	2500      	movs	r5, #0
 800ad8a:	e7f8      	b.n	800ad7e <_calloc_r+0x16>
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	f7fc fcb1 	bl	80076f4 <memset>
 800ad92:	e7f4      	b.n	800ad7e <_calloc_r+0x16>

0800ad94 <_free_r>:
 800ad94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad96:	2900      	cmp	r1, #0
 800ad98:	d044      	beq.n	800ae24 <_free_r+0x90>
 800ad9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad9e:	9001      	str	r0, [sp, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f1a1 0404 	sub.w	r4, r1, #4
 800ada6:	bfb8      	it	lt
 800ada8:	18e4      	addlt	r4, r4, r3
 800adaa:	f000 fab5 	bl	800b318 <__malloc_lock>
 800adae:	4a1e      	ldr	r2, [pc, #120]	; (800ae28 <_free_r+0x94>)
 800adb0:	9801      	ldr	r0, [sp, #4]
 800adb2:	6813      	ldr	r3, [r2, #0]
 800adb4:	b933      	cbnz	r3, 800adc4 <_free_r+0x30>
 800adb6:	6063      	str	r3, [r4, #4]
 800adb8:	6014      	str	r4, [r2, #0]
 800adba:	b003      	add	sp, #12
 800adbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adc0:	f000 bab0 	b.w	800b324 <__malloc_unlock>
 800adc4:	42a3      	cmp	r3, r4
 800adc6:	d908      	bls.n	800adda <_free_r+0x46>
 800adc8:	6825      	ldr	r5, [r4, #0]
 800adca:	1961      	adds	r1, r4, r5
 800adcc:	428b      	cmp	r3, r1
 800adce:	bf01      	itttt	eq
 800add0:	6819      	ldreq	r1, [r3, #0]
 800add2:	685b      	ldreq	r3, [r3, #4]
 800add4:	1949      	addeq	r1, r1, r5
 800add6:	6021      	streq	r1, [r4, #0]
 800add8:	e7ed      	b.n	800adb6 <_free_r+0x22>
 800adda:	461a      	mov	r2, r3
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	b10b      	cbz	r3, 800ade4 <_free_r+0x50>
 800ade0:	42a3      	cmp	r3, r4
 800ade2:	d9fa      	bls.n	800adda <_free_r+0x46>
 800ade4:	6811      	ldr	r1, [r2, #0]
 800ade6:	1855      	adds	r5, r2, r1
 800ade8:	42a5      	cmp	r5, r4
 800adea:	d10b      	bne.n	800ae04 <_free_r+0x70>
 800adec:	6824      	ldr	r4, [r4, #0]
 800adee:	4421      	add	r1, r4
 800adf0:	1854      	adds	r4, r2, r1
 800adf2:	42a3      	cmp	r3, r4
 800adf4:	6011      	str	r1, [r2, #0]
 800adf6:	d1e0      	bne.n	800adba <_free_r+0x26>
 800adf8:	681c      	ldr	r4, [r3, #0]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	6053      	str	r3, [r2, #4]
 800adfe:	4421      	add	r1, r4
 800ae00:	6011      	str	r1, [r2, #0]
 800ae02:	e7da      	b.n	800adba <_free_r+0x26>
 800ae04:	d902      	bls.n	800ae0c <_free_r+0x78>
 800ae06:	230c      	movs	r3, #12
 800ae08:	6003      	str	r3, [r0, #0]
 800ae0a:	e7d6      	b.n	800adba <_free_r+0x26>
 800ae0c:	6825      	ldr	r5, [r4, #0]
 800ae0e:	1961      	adds	r1, r4, r5
 800ae10:	428b      	cmp	r3, r1
 800ae12:	bf04      	itt	eq
 800ae14:	6819      	ldreq	r1, [r3, #0]
 800ae16:	685b      	ldreq	r3, [r3, #4]
 800ae18:	6063      	str	r3, [r4, #4]
 800ae1a:	bf04      	itt	eq
 800ae1c:	1949      	addeq	r1, r1, r5
 800ae1e:	6021      	streq	r1, [r4, #0]
 800ae20:	6054      	str	r4, [r2, #4]
 800ae22:	e7ca      	b.n	800adba <_free_r+0x26>
 800ae24:	b003      	add	sp, #12
 800ae26:	bd30      	pop	{r4, r5, pc}
 800ae28:	200008dc 	.word	0x200008dc

0800ae2c <sbrk_aligned>:
 800ae2c:	b570      	push	{r4, r5, r6, lr}
 800ae2e:	4e0e      	ldr	r6, [pc, #56]	; (800ae68 <sbrk_aligned+0x3c>)
 800ae30:	460c      	mov	r4, r1
 800ae32:	6831      	ldr	r1, [r6, #0]
 800ae34:	4605      	mov	r5, r0
 800ae36:	b911      	cbnz	r1, 800ae3e <sbrk_aligned+0x12>
 800ae38:	f000 f9f2 	bl	800b220 <_sbrk_r>
 800ae3c:	6030      	str	r0, [r6, #0]
 800ae3e:	4621      	mov	r1, r4
 800ae40:	4628      	mov	r0, r5
 800ae42:	f000 f9ed 	bl	800b220 <_sbrk_r>
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	d00a      	beq.n	800ae60 <sbrk_aligned+0x34>
 800ae4a:	1cc4      	adds	r4, r0, #3
 800ae4c:	f024 0403 	bic.w	r4, r4, #3
 800ae50:	42a0      	cmp	r0, r4
 800ae52:	d007      	beq.n	800ae64 <sbrk_aligned+0x38>
 800ae54:	1a21      	subs	r1, r4, r0
 800ae56:	4628      	mov	r0, r5
 800ae58:	f000 f9e2 	bl	800b220 <_sbrk_r>
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	d101      	bne.n	800ae64 <sbrk_aligned+0x38>
 800ae60:	f04f 34ff 	mov.w	r4, #4294967295
 800ae64:	4620      	mov	r0, r4
 800ae66:	bd70      	pop	{r4, r5, r6, pc}
 800ae68:	200008e0 	.word	0x200008e0

0800ae6c <_malloc_r>:
 800ae6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae70:	1ccd      	adds	r5, r1, #3
 800ae72:	f025 0503 	bic.w	r5, r5, #3
 800ae76:	3508      	adds	r5, #8
 800ae78:	2d0c      	cmp	r5, #12
 800ae7a:	bf38      	it	cc
 800ae7c:	250c      	movcc	r5, #12
 800ae7e:	2d00      	cmp	r5, #0
 800ae80:	4607      	mov	r7, r0
 800ae82:	db01      	blt.n	800ae88 <_malloc_r+0x1c>
 800ae84:	42a9      	cmp	r1, r5
 800ae86:	d905      	bls.n	800ae94 <_malloc_r+0x28>
 800ae88:	230c      	movs	r3, #12
 800ae8a:	603b      	str	r3, [r7, #0]
 800ae8c:	2600      	movs	r6, #0
 800ae8e:	4630      	mov	r0, r6
 800ae90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae94:	4e2e      	ldr	r6, [pc, #184]	; (800af50 <_malloc_r+0xe4>)
 800ae96:	f000 fa3f 	bl	800b318 <__malloc_lock>
 800ae9a:	6833      	ldr	r3, [r6, #0]
 800ae9c:	461c      	mov	r4, r3
 800ae9e:	bb34      	cbnz	r4, 800aeee <_malloc_r+0x82>
 800aea0:	4629      	mov	r1, r5
 800aea2:	4638      	mov	r0, r7
 800aea4:	f7ff ffc2 	bl	800ae2c <sbrk_aligned>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	4604      	mov	r4, r0
 800aeac:	d14d      	bne.n	800af4a <_malloc_r+0xde>
 800aeae:	6834      	ldr	r4, [r6, #0]
 800aeb0:	4626      	mov	r6, r4
 800aeb2:	2e00      	cmp	r6, #0
 800aeb4:	d140      	bne.n	800af38 <_malloc_r+0xcc>
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4638      	mov	r0, r7
 800aebc:	eb04 0803 	add.w	r8, r4, r3
 800aec0:	f000 f9ae 	bl	800b220 <_sbrk_r>
 800aec4:	4580      	cmp	r8, r0
 800aec6:	d13a      	bne.n	800af3e <_malloc_r+0xd2>
 800aec8:	6821      	ldr	r1, [r4, #0]
 800aeca:	3503      	adds	r5, #3
 800aecc:	1a6d      	subs	r5, r5, r1
 800aece:	f025 0503 	bic.w	r5, r5, #3
 800aed2:	3508      	adds	r5, #8
 800aed4:	2d0c      	cmp	r5, #12
 800aed6:	bf38      	it	cc
 800aed8:	250c      	movcc	r5, #12
 800aeda:	4629      	mov	r1, r5
 800aedc:	4638      	mov	r0, r7
 800aede:	f7ff ffa5 	bl	800ae2c <sbrk_aligned>
 800aee2:	3001      	adds	r0, #1
 800aee4:	d02b      	beq.n	800af3e <_malloc_r+0xd2>
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	442b      	add	r3, r5
 800aeea:	6023      	str	r3, [r4, #0]
 800aeec:	e00e      	b.n	800af0c <_malloc_r+0xa0>
 800aeee:	6822      	ldr	r2, [r4, #0]
 800aef0:	1b52      	subs	r2, r2, r5
 800aef2:	d41e      	bmi.n	800af32 <_malloc_r+0xc6>
 800aef4:	2a0b      	cmp	r2, #11
 800aef6:	d916      	bls.n	800af26 <_malloc_r+0xba>
 800aef8:	1961      	adds	r1, r4, r5
 800aefa:	42a3      	cmp	r3, r4
 800aefc:	6025      	str	r5, [r4, #0]
 800aefe:	bf18      	it	ne
 800af00:	6059      	strne	r1, [r3, #4]
 800af02:	6863      	ldr	r3, [r4, #4]
 800af04:	bf08      	it	eq
 800af06:	6031      	streq	r1, [r6, #0]
 800af08:	5162      	str	r2, [r4, r5]
 800af0a:	604b      	str	r3, [r1, #4]
 800af0c:	4638      	mov	r0, r7
 800af0e:	f104 060b 	add.w	r6, r4, #11
 800af12:	f000 fa07 	bl	800b324 <__malloc_unlock>
 800af16:	f026 0607 	bic.w	r6, r6, #7
 800af1a:	1d23      	adds	r3, r4, #4
 800af1c:	1af2      	subs	r2, r6, r3
 800af1e:	d0b6      	beq.n	800ae8e <_malloc_r+0x22>
 800af20:	1b9b      	subs	r3, r3, r6
 800af22:	50a3      	str	r3, [r4, r2]
 800af24:	e7b3      	b.n	800ae8e <_malloc_r+0x22>
 800af26:	6862      	ldr	r2, [r4, #4]
 800af28:	42a3      	cmp	r3, r4
 800af2a:	bf0c      	ite	eq
 800af2c:	6032      	streq	r2, [r6, #0]
 800af2e:	605a      	strne	r2, [r3, #4]
 800af30:	e7ec      	b.n	800af0c <_malloc_r+0xa0>
 800af32:	4623      	mov	r3, r4
 800af34:	6864      	ldr	r4, [r4, #4]
 800af36:	e7b2      	b.n	800ae9e <_malloc_r+0x32>
 800af38:	4634      	mov	r4, r6
 800af3a:	6876      	ldr	r6, [r6, #4]
 800af3c:	e7b9      	b.n	800aeb2 <_malloc_r+0x46>
 800af3e:	230c      	movs	r3, #12
 800af40:	603b      	str	r3, [r7, #0]
 800af42:	4638      	mov	r0, r7
 800af44:	f000 f9ee 	bl	800b324 <__malloc_unlock>
 800af48:	e7a1      	b.n	800ae8e <_malloc_r+0x22>
 800af4a:	6025      	str	r5, [r4, #0]
 800af4c:	e7de      	b.n	800af0c <_malloc_r+0xa0>
 800af4e:	bf00      	nop
 800af50:	200008dc 	.word	0x200008dc

0800af54 <__ssputs_r>:
 800af54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af58:	688e      	ldr	r6, [r1, #8]
 800af5a:	429e      	cmp	r6, r3
 800af5c:	4682      	mov	sl, r0
 800af5e:	460c      	mov	r4, r1
 800af60:	4690      	mov	r8, r2
 800af62:	461f      	mov	r7, r3
 800af64:	d838      	bhi.n	800afd8 <__ssputs_r+0x84>
 800af66:	898a      	ldrh	r2, [r1, #12]
 800af68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af6c:	d032      	beq.n	800afd4 <__ssputs_r+0x80>
 800af6e:	6825      	ldr	r5, [r4, #0]
 800af70:	6909      	ldr	r1, [r1, #16]
 800af72:	eba5 0901 	sub.w	r9, r5, r1
 800af76:	6965      	ldr	r5, [r4, #20]
 800af78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af80:	3301      	adds	r3, #1
 800af82:	444b      	add	r3, r9
 800af84:	106d      	asrs	r5, r5, #1
 800af86:	429d      	cmp	r5, r3
 800af88:	bf38      	it	cc
 800af8a:	461d      	movcc	r5, r3
 800af8c:	0553      	lsls	r3, r2, #21
 800af8e:	d531      	bpl.n	800aff4 <__ssputs_r+0xa0>
 800af90:	4629      	mov	r1, r5
 800af92:	f7ff ff6b 	bl	800ae6c <_malloc_r>
 800af96:	4606      	mov	r6, r0
 800af98:	b950      	cbnz	r0, 800afb0 <__ssputs_r+0x5c>
 800af9a:	230c      	movs	r3, #12
 800af9c:	f8ca 3000 	str.w	r3, [sl]
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afa6:	81a3      	strh	r3, [r4, #12]
 800afa8:	f04f 30ff 	mov.w	r0, #4294967295
 800afac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb0:	6921      	ldr	r1, [r4, #16]
 800afb2:	464a      	mov	r2, r9
 800afb4:	f7ff fa0c 	bl	800a3d0 <memcpy>
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc2:	81a3      	strh	r3, [r4, #12]
 800afc4:	6126      	str	r6, [r4, #16]
 800afc6:	6165      	str	r5, [r4, #20]
 800afc8:	444e      	add	r6, r9
 800afca:	eba5 0509 	sub.w	r5, r5, r9
 800afce:	6026      	str	r6, [r4, #0]
 800afd0:	60a5      	str	r5, [r4, #8]
 800afd2:	463e      	mov	r6, r7
 800afd4:	42be      	cmp	r6, r7
 800afd6:	d900      	bls.n	800afda <__ssputs_r+0x86>
 800afd8:	463e      	mov	r6, r7
 800afda:	6820      	ldr	r0, [r4, #0]
 800afdc:	4632      	mov	r2, r6
 800afde:	4641      	mov	r1, r8
 800afe0:	f000 f980 	bl	800b2e4 <memmove>
 800afe4:	68a3      	ldr	r3, [r4, #8]
 800afe6:	1b9b      	subs	r3, r3, r6
 800afe8:	60a3      	str	r3, [r4, #8]
 800afea:	6823      	ldr	r3, [r4, #0]
 800afec:	4433      	add	r3, r6
 800afee:	6023      	str	r3, [r4, #0]
 800aff0:	2000      	movs	r0, #0
 800aff2:	e7db      	b.n	800afac <__ssputs_r+0x58>
 800aff4:	462a      	mov	r2, r5
 800aff6:	f000 f99b 	bl	800b330 <_realloc_r>
 800affa:	4606      	mov	r6, r0
 800affc:	2800      	cmp	r0, #0
 800affe:	d1e1      	bne.n	800afc4 <__ssputs_r+0x70>
 800b000:	6921      	ldr	r1, [r4, #16]
 800b002:	4650      	mov	r0, sl
 800b004:	f7ff fec6 	bl	800ad94 <_free_r>
 800b008:	e7c7      	b.n	800af9a <__ssputs_r+0x46>
	...

0800b00c <_svfiprintf_r>:
 800b00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b010:	4698      	mov	r8, r3
 800b012:	898b      	ldrh	r3, [r1, #12]
 800b014:	061b      	lsls	r3, r3, #24
 800b016:	b09d      	sub	sp, #116	; 0x74
 800b018:	4607      	mov	r7, r0
 800b01a:	460d      	mov	r5, r1
 800b01c:	4614      	mov	r4, r2
 800b01e:	d50e      	bpl.n	800b03e <_svfiprintf_r+0x32>
 800b020:	690b      	ldr	r3, [r1, #16]
 800b022:	b963      	cbnz	r3, 800b03e <_svfiprintf_r+0x32>
 800b024:	2140      	movs	r1, #64	; 0x40
 800b026:	f7ff ff21 	bl	800ae6c <_malloc_r>
 800b02a:	6028      	str	r0, [r5, #0]
 800b02c:	6128      	str	r0, [r5, #16]
 800b02e:	b920      	cbnz	r0, 800b03a <_svfiprintf_r+0x2e>
 800b030:	230c      	movs	r3, #12
 800b032:	603b      	str	r3, [r7, #0]
 800b034:	f04f 30ff 	mov.w	r0, #4294967295
 800b038:	e0d1      	b.n	800b1de <_svfiprintf_r+0x1d2>
 800b03a:	2340      	movs	r3, #64	; 0x40
 800b03c:	616b      	str	r3, [r5, #20]
 800b03e:	2300      	movs	r3, #0
 800b040:	9309      	str	r3, [sp, #36]	; 0x24
 800b042:	2320      	movs	r3, #32
 800b044:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b048:	f8cd 800c 	str.w	r8, [sp, #12]
 800b04c:	2330      	movs	r3, #48	; 0x30
 800b04e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b1f8 <_svfiprintf_r+0x1ec>
 800b052:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b056:	f04f 0901 	mov.w	r9, #1
 800b05a:	4623      	mov	r3, r4
 800b05c:	469a      	mov	sl, r3
 800b05e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b062:	b10a      	cbz	r2, 800b068 <_svfiprintf_r+0x5c>
 800b064:	2a25      	cmp	r2, #37	; 0x25
 800b066:	d1f9      	bne.n	800b05c <_svfiprintf_r+0x50>
 800b068:	ebba 0b04 	subs.w	fp, sl, r4
 800b06c:	d00b      	beq.n	800b086 <_svfiprintf_r+0x7a>
 800b06e:	465b      	mov	r3, fp
 800b070:	4622      	mov	r2, r4
 800b072:	4629      	mov	r1, r5
 800b074:	4638      	mov	r0, r7
 800b076:	f7ff ff6d 	bl	800af54 <__ssputs_r>
 800b07a:	3001      	adds	r0, #1
 800b07c:	f000 80aa 	beq.w	800b1d4 <_svfiprintf_r+0x1c8>
 800b080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b082:	445a      	add	r2, fp
 800b084:	9209      	str	r2, [sp, #36]	; 0x24
 800b086:	f89a 3000 	ldrb.w	r3, [sl]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f000 80a2 	beq.w	800b1d4 <_svfiprintf_r+0x1c8>
 800b090:	2300      	movs	r3, #0
 800b092:	f04f 32ff 	mov.w	r2, #4294967295
 800b096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b09a:	f10a 0a01 	add.w	sl, sl, #1
 800b09e:	9304      	str	r3, [sp, #16]
 800b0a0:	9307      	str	r3, [sp, #28]
 800b0a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0a6:	931a      	str	r3, [sp, #104]	; 0x68
 800b0a8:	4654      	mov	r4, sl
 800b0aa:	2205      	movs	r2, #5
 800b0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b0:	4851      	ldr	r0, [pc, #324]	; (800b1f8 <_svfiprintf_r+0x1ec>)
 800b0b2:	f7f5 f8cd 	bl	8000250 <memchr>
 800b0b6:	9a04      	ldr	r2, [sp, #16]
 800b0b8:	b9d8      	cbnz	r0, 800b0f2 <_svfiprintf_r+0xe6>
 800b0ba:	06d0      	lsls	r0, r2, #27
 800b0bc:	bf44      	itt	mi
 800b0be:	2320      	movmi	r3, #32
 800b0c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0c4:	0711      	lsls	r1, r2, #28
 800b0c6:	bf44      	itt	mi
 800b0c8:	232b      	movmi	r3, #43	; 0x2b
 800b0ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b0d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b0d4:	d015      	beq.n	800b102 <_svfiprintf_r+0xf6>
 800b0d6:	9a07      	ldr	r2, [sp, #28]
 800b0d8:	4654      	mov	r4, sl
 800b0da:	2000      	movs	r0, #0
 800b0dc:	f04f 0c0a 	mov.w	ip, #10
 800b0e0:	4621      	mov	r1, r4
 800b0e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0e6:	3b30      	subs	r3, #48	; 0x30
 800b0e8:	2b09      	cmp	r3, #9
 800b0ea:	d94e      	bls.n	800b18a <_svfiprintf_r+0x17e>
 800b0ec:	b1b0      	cbz	r0, 800b11c <_svfiprintf_r+0x110>
 800b0ee:	9207      	str	r2, [sp, #28]
 800b0f0:	e014      	b.n	800b11c <_svfiprintf_r+0x110>
 800b0f2:	eba0 0308 	sub.w	r3, r0, r8
 800b0f6:	fa09 f303 	lsl.w	r3, r9, r3
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	9304      	str	r3, [sp, #16]
 800b0fe:	46a2      	mov	sl, r4
 800b100:	e7d2      	b.n	800b0a8 <_svfiprintf_r+0x9c>
 800b102:	9b03      	ldr	r3, [sp, #12]
 800b104:	1d19      	adds	r1, r3, #4
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	9103      	str	r1, [sp, #12]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	bfbb      	ittet	lt
 800b10e:	425b      	neglt	r3, r3
 800b110:	f042 0202 	orrlt.w	r2, r2, #2
 800b114:	9307      	strge	r3, [sp, #28]
 800b116:	9307      	strlt	r3, [sp, #28]
 800b118:	bfb8      	it	lt
 800b11a:	9204      	strlt	r2, [sp, #16]
 800b11c:	7823      	ldrb	r3, [r4, #0]
 800b11e:	2b2e      	cmp	r3, #46	; 0x2e
 800b120:	d10c      	bne.n	800b13c <_svfiprintf_r+0x130>
 800b122:	7863      	ldrb	r3, [r4, #1]
 800b124:	2b2a      	cmp	r3, #42	; 0x2a
 800b126:	d135      	bne.n	800b194 <_svfiprintf_r+0x188>
 800b128:	9b03      	ldr	r3, [sp, #12]
 800b12a:	1d1a      	adds	r2, r3, #4
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	9203      	str	r2, [sp, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	bfb8      	it	lt
 800b134:	f04f 33ff 	movlt.w	r3, #4294967295
 800b138:	3402      	adds	r4, #2
 800b13a:	9305      	str	r3, [sp, #20]
 800b13c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b208 <_svfiprintf_r+0x1fc>
 800b140:	7821      	ldrb	r1, [r4, #0]
 800b142:	2203      	movs	r2, #3
 800b144:	4650      	mov	r0, sl
 800b146:	f7f5 f883 	bl	8000250 <memchr>
 800b14a:	b140      	cbz	r0, 800b15e <_svfiprintf_r+0x152>
 800b14c:	2340      	movs	r3, #64	; 0x40
 800b14e:	eba0 000a 	sub.w	r0, r0, sl
 800b152:	fa03 f000 	lsl.w	r0, r3, r0
 800b156:	9b04      	ldr	r3, [sp, #16]
 800b158:	4303      	orrs	r3, r0
 800b15a:	3401      	adds	r4, #1
 800b15c:	9304      	str	r3, [sp, #16]
 800b15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b162:	4826      	ldr	r0, [pc, #152]	; (800b1fc <_svfiprintf_r+0x1f0>)
 800b164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b168:	2206      	movs	r2, #6
 800b16a:	f7f5 f871 	bl	8000250 <memchr>
 800b16e:	2800      	cmp	r0, #0
 800b170:	d038      	beq.n	800b1e4 <_svfiprintf_r+0x1d8>
 800b172:	4b23      	ldr	r3, [pc, #140]	; (800b200 <_svfiprintf_r+0x1f4>)
 800b174:	bb1b      	cbnz	r3, 800b1be <_svfiprintf_r+0x1b2>
 800b176:	9b03      	ldr	r3, [sp, #12]
 800b178:	3307      	adds	r3, #7
 800b17a:	f023 0307 	bic.w	r3, r3, #7
 800b17e:	3308      	adds	r3, #8
 800b180:	9303      	str	r3, [sp, #12]
 800b182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b184:	4433      	add	r3, r6
 800b186:	9309      	str	r3, [sp, #36]	; 0x24
 800b188:	e767      	b.n	800b05a <_svfiprintf_r+0x4e>
 800b18a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b18e:	460c      	mov	r4, r1
 800b190:	2001      	movs	r0, #1
 800b192:	e7a5      	b.n	800b0e0 <_svfiprintf_r+0xd4>
 800b194:	2300      	movs	r3, #0
 800b196:	3401      	adds	r4, #1
 800b198:	9305      	str	r3, [sp, #20]
 800b19a:	4619      	mov	r1, r3
 800b19c:	f04f 0c0a 	mov.w	ip, #10
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1a6:	3a30      	subs	r2, #48	; 0x30
 800b1a8:	2a09      	cmp	r2, #9
 800b1aa:	d903      	bls.n	800b1b4 <_svfiprintf_r+0x1a8>
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d0c5      	beq.n	800b13c <_svfiprintf_r+0x130>
 800b1b0:	9105      	str	r1, [sp, #20]
 800b1b2:	e7c3      	b.n	800b13c <_svfiprintf_r+0x130>
 800b1b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e7f0      	b.n	800b1a0 <_svfiprintf_r+0x194>
 800b1be:	ab03      	add	r3, sp, #12
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	462a      	mov	r2, r5
 800b1c4:	4b0f      	ldr	r3, [pc, #60]	; (800b204 <_svfiprintf_r+0x1f8>)
 800b1c6:	a904      	add	r1, sp, #16
 800b1c8:	4638      	mov	r0, r7
 800b1ca:	f7fc fb2d 	bl	8007828 <_printf_float>
 800b1ce:	1c42      	adds	r2, r0, #1
 800b1d0:	4606      	mov	r6, r0
 800b1d2:	d1d6      	bne.n	800b182 <_svfiprintf_r+0x176>
 800b1d4:	89ab      	ldrh	r3, [r5, #12]
 800b1d6:	065b      	lsls	r3, r3, #25
 800b1d8:	f53f af2c 	bmi.w	800b034 <_svfiprintf_r+0x28>
 800b1dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1de:	b01d      	add	sp, #116	; 0x74
 800b1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e4:	ab03      	add	r3, sp, #12
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	462a      	mov	r2, r5
 800b1ea:	4b06      	ldr	r3, [pc, #24]	; (800b204 <_svfiprintf_r+0x1f8>)
 800b1ec:	a904      	add	r1, sp, #16
 800b1ee:	4638      	mov	r0, r7
 800b1f0:	f7fc fda6 	bl	8007d40 <_printf_i>
 800b1f4:	e7eb      	b.n	800b1ce <_svfiprintf_r+0x1c2>
 800b1f6:	bf00      	nop
 800b1f8:	0800c294 	.word	0x0800c294
 800b1fc:	0800c29e 	.word	0x0800c29e
 800b200:	08007829 	.word	0x08007829
 800b204:	0800af55 	.word	0x0800af55
 800b208:	0800c29a 	.word	0x0800c29a
 800b20c:	00000000 	.word	0x00000000

0800b210 <nan>:
 800b210:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b218 <nan+0x8>
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	00000000 	.word	0x00000000
 800b21c:	7ff80000 	.word	0x7ff80000

0800b220 <_sbrk_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d06      	ldr	r5, [pc, #24]	; (800b23c <_sbrk_r+0x1c>)
 800b224:	2300      	movs	r3, #0
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	602b      	str	r3, [r5, #0]
 800b22c:	f7f6 fe7c 	bl	8001f28 <_sbrk>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_sbrk_r+0x1a>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_sbrk_r+0x1a>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	200008e4 	.word	0x200008e4

0800b240 <strncmp>:
 800b240:	b510      	push	{r4, lr}
 800b242:	b17a      	cbz	r2, 800b264 <strncmp+0x24>
 800b244:	4603      	mov	r3, r0
 800b246:	3901      	subs	r1, #1
 800b248:	1884      	adds	r4, r0, r2
 800b24a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b24e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b252:	4290      	cmp	r0, r2
 800b254:	d101      	bne.n	800b25a <strncmp+0x1a>
 800b256:	42a3      	cmp	r3, r4
 800b258:	d101      	bne.n	800b25e <strncmp+0x1e>
 800b25a:	1a80      	subs	r0, r0, r2
 800b25c:	bd10      	pop	{r4, pc}
 800b25e:	2800      	cmp	r0, #0
 800b260:	d1f3      	bne.n	800b24a <strncmp+0xa>
 800b262:	e7fa      	b.n	800b25a <strncmp+0x1a>
 800b264:	4610      	mov	r0, r2
 800b266:	e7f9      	b.n	800b25c <strncmp+0x1c>

0800b268 <__ascii_wctomb>:
 800b268:	b149      	cbz	r1, 800b27e <__ascii_wctomb+0x16>
 800b26a:	2aff      	cmp	r2, #255	; 0xff
 800b26c:	bf85      	ittet	hi
 800b26e:	238a      	movhi	r3, #138	; 0x8a
 800b270:	6003      	strhi	r3, [r0, #0]
 800b272:	700a      	strbls	r2, [r1, #0]
 800b274:	f04f 30ff 	movhi.w	r0, #4294967295
 800b278:	bf98      	it	ls
 800b27a:	2001      	movls	r0, #1
 800b27c:	4770      	bx	lr
 800b27e:	4608      	mov	r0, r1
 800b280:	4770      	bx	lr
	...

0800b284 <__assert_func>:
 800b284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b286:	4614      	mov	r4, r2
 800b288:	461a      	mov	r2, r3
 800b28a:	4b09      	ldr	r3, [pc, #36]	; (800b2b0 <__assert_func+0x2c>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4605      	mov	r5, r0
 800b290:	68d8      	ldr	r0, [r3, #12]
 800b292:	b14c      	cbz	r4, 800b2a8 <__assert_func+0x24>
 800b294:	4b07      	ldr	r3, [pc, #28]	; (800b2b4 <__assert_func+0x30>)
 800b296:	9100      	str	r1, [sp, #0]
 800b298:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b29c:	4906      	ldr	r1, [pc, #24]	; (800b2b8 <__assert_func+0x34>)
 800b29e:	462b      	mov	r3, r5
 800b2a0:	f000 f80e 	bl	800b2c0 <fiprintf>
 800b2a4:	f000 fa8c 	bl	800b7c0 <abort>
 800b2a8:	4b04      	ldr	r3, [pc, #16]	; (800b2bc <__assert_func+0x38>)
 800b2aa:	461c      	mov	r4, r3
 800b2ac:	e7f3      	b.n	800b296 <__assert_func+0x12>
 800b2ae:	bf00      	nop
 800b2b0:	20000024 	.word	0x20000024
 800b2b4:	0800c2a5 	.word	0x0800c2a5
 800b2b8:	0800c2b2 	.word	0x0800c2b2
 800b2bc:	0800c2e0 	.word	0x0800c2e0

0800b2c0 <fiprintf>:
 800b2c0:	b40e      	push	{r1, r2, r3}
 800b2c2:	b503      	push	{r0, r1, lr}
 800b2c4:	4601      	mov	r1, r0
 800b2c6:	ab03      	add	r3, sp, #12
 800b2c8:	4805      	ldr	r0, [pc, #20]	; (800b2e0 <fiprintf+0x20>)
 800b2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ce:	6800      	ldr	r0, [r0, #0]
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	f000 f885 	bl	800b3e0 <_vfiprintf_r>
 800b2d6:	b002      	add	sp, #8
 800b2d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2dc:	b003      	add	sp, #12
 800b2de:	4770      	bx	lr
 800b2e0:	20000024 	.word	0x20000024

0800b2e4 <memmove>:
 800b2e4:	4288      	cmp	r0, r1
 800b2e6:	b510      	push	{r4, lr}
 800b2e8:	eb01 0402 	add.w	r4, r1, r2
 800b2ec:	d902      	bls.n	800b2f4 <memmove+0x10>
 800b2ee:	4284      	cmp	r4, r0
 800b2f0:	4623      	mov	r3, r4
 800b2f2:	d807      	bhi.n	800b304 <memmove+0x20>
 800b2f4:	1e43      	subs	r3, r0, #1
 800b2f6:	42a1      	cmp	r1, r4
 800b2f8:	d008      	beq.n	800b30c <memmove+0x28>
 800b2fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b302:	e7f8      	b.n	800b2f6 <memmove+0x12>
 800b304:	4402      	add	r2, r0
 800b306:	4601      	mov	r1, r0
 800b308:	428a      	cmp	r2, r1
 800b30a:	d100      	bne.n	800b30e <memmove+0x2a>
 800b30c:	bd10      	pop	{r4, pc}
 800b30e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b316:	e7f7      	b.n	800b308 <memmove+0x24>

0800b318 <__malloc_lock>:
 800b318:	4801      	ldr	r0, [pc, #4]	; (800b320 <__malloc_lock+0x8>)
 800b31a:	f000 bc11 	b.w	800bb40 <__retarget_lock_acquire_recursive>
 800b31e:	bf00      	nop
 800b320:	200008e8 	.word	0x200008e8

0800b324 <__malloc_unlock>:
 800b324:	4801      	ldr	r0, [pc, #4]	; (800b32c <__malloc_unlock+0x8>)
 800b326:	f000 bc0c 	b.w	800bb42 <__retarget_lock_release_recursive>
 800b32a:	bf00      	nop
 800b32c:	200008e8 	.word	0x200008e8

0800b330 <_realloc_r>:
 800b330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b334:	4680      	mov	r8, r0
 800b336:	4614      	mov	r4, r2
 800b338:	460e      	mov	r6, r1
 800b33a:	b921      	cbnz	r1, 800b346 <_realloc_r+0x16>
 800b33c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b340:	4611      	mov	r1, r2
 800b342:	f7ff bd93 	b.w	800ae6c <_malloc_r>
 800b346:	b92a      	cbnz	r2, 800b354 <_realloc_r+0x24>
 800b348:	f7ff fd24 	bl	800ad94 <_free_r>
 800b34c:	4625      	mov	r5, r4
 800b34e:	4628      	mov	r0, r5
 800b350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b354:	f000 fc5c 	bl	800bc10 <_malloc_usable_size_r>
 800b358:	4284      	cmp	r4, r0
 800b35a:	4607      	mov	r7, r0
 800b35c:	d802      	bhi.n	800b364 <_realloc_r+0x34>
 800b35e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b362:	d812      	bhi.n	800b38a <_realloc_r+0x5a>
 800b364:	4621      	mov	r1, r4
 800b366:	4640      	mov	r0, r8
 800b368:	f7ff fd80 	bl	800ae6c <_malloc_r>
 800b36c:	4605      	mov	r5, r0
 800b36e:	2800      	cmp	r0, #0
 800b370:	d0ed      	beq.n	800b34e <_realloc_r+0x1e>
 800b372:	42bc      	cmp	r4, r7
 800b374:	4622      	mov	r2, r4
 800b376:	4631      	mov	r1, r6
 800b378:	bf28      	it	cs
 800b37a:	463a      	movcs	r2, r7
 800b37c:	f7ff f828 	bl	800a3d0 <memcpy>
 800b380:	4631      	mov	r1, r6
 800b382:	4640      	mov	r0, r8
 800b384:	f7ff fd06 	bl	800ad94 <_free_r>
 800b388:	e7e1      	b.n	800b34e <_realloc_r+0x1e>
 800b38a:	4635      	mov	r5, r6
 800b38c:	e7df      	b.n	800b34e <_realloc_r+0x1e>

0800b38e <__sfputc_r>:
 800b38e:	6893      	ldr	r3, [r2, #8]
 800b390:	3b01      	subs	r3, #1
 800b392:	2b00      	cmp	r3, #0
 800b394:	b410      	push	{r4}
 800b396:	6093      	str	r3, [r2, #8]
 800b398:	da08      	bge.n	800b3ac <__sfputc_r+0x1e>
 800b39a:	6994      	ldr	r4, [r2, #24]
 800b39c:	42a3      	cmp	r3, r4
 800b39e:	db01      	blt.n	800b3a4 <__sfputc_r+0x16>
 800b3a0:	290a      	cmp	r1, #10
 800b3a2:	d103      	bne.n	800b3ac <__sfputc_r+0x1e>
 800b3a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3a8:	f000 b94a 	b.w	800b640 <__swbuf_r>
 800b3ac:	6813      	ldr	r3, [r2, #0]
 800b3ae:	1c58      	adds	r0, r3, #1
 800b3b0:	6010      	str	r0, [r2, #0]
 800b3b2:	7019      	strb	r1, [r3, #0]
 800b3b4:	4608      	mov	r0, r1
 800b3b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <__sfputs_r>:
 800b3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3be:	4606      	mov	r6, r0
 800b3c0:	460f      	mov	r7, r1
 800b3c2:	4614      	mov	r4, r2
 800b3c4:	18d5      	adds	r5, r2, r3
 800b3c6:	42ac      	cmp	r4, r5
 800b3c8:	d101      	bne.n	800b3ce <__sfputs_r+0x12>
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	e007      	b.n	800b3de <__sfputs_r+0x22>
 800b3ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d2:	463a      	mov	r2, r7
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	f7ff ffda 	bl	800b38e <__sfputc_r>
 800b3da:	1c43      	adds	r3, r0, #1
 800b3dc:	d1f3      	bne.n	800b3c6 <__sfputs_r+0xa>
 800b3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3e0 <_vfiprintf_r>:
 800b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e4:	460d      	mov	r5, r1
 800b3e6:	b09d      	sub	sp, #116	; 0x74
 800b3e8:	4614      	mov	r4, r2
 800b3ea:	4698      	mov	r8, r3
 800b3ec:	4606      	mov	r6, r0
 800b3ee:	b118      	cbz	r0, 800b3f8 <_vfiprintf_r+0x18>
 800b3f0:	6983      	ldr	r3, [r0, #24]
 800b3f2:	b90b      	cbnz	r3, 800b3f8 <_vfiprintf_r+0x18>
 800b3f4:	f000 fb06 	bl	800ba04 <__sinit>
 800b3f8:	4b89      	ldr	r3, [pc, #548]	; (800b620 <_vfiprintf_r+0x240>)
 800b3fa:	429d      	cmp	r5, r3
 800b3fc:	d11b      	bne.n	800b436 <_vfiprintf_r+0x56>
 800b3fe:	6875      	ldr	r5, [r6, #4]
 800b400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b402:	07d9      	lsls	r1, r3, #31
 800b404:	d405      	bmi.n	800b412 <_vfiprintf_r+0x32>
 800b406:	89ab      	ldrh	r3, [r5, #12]
 800b408:	059a      	lsls	r2, r3, #22
 800b40a:	d402      	bmi.n	800b412 <_vfiprintf_r+0x32>
 800b40c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b40e:	f000 fb97 	bl	800bb40 <__retarget_lock_acquire_recursive>
 800b412:	89ab      	ldrh	r3, [r5, #12]
 800b414:	071b      	lsls	r3, r3, #28
 800b416:	d501      	bpl.n	800b41c <_vfiprintf_r+0x3c>
 800b418:	692b      	ldr	r3, [r5, #16]
 800b41a:	b9eb      	cbnz	r3, 800b458 <_vfiprintf_r+0x78>
 800b41c:	4629      	mov	r1, r5
 800b41e:	4630      	mov	r0, r6
 800b420:	f000 f960 	bl	800b6e4 <__swsetup_r>
 800b424:	b1c0      	cbz	r0, 800b458 <_vfiprintf_r+0x78>
 800b426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b428:	07dc      	lsls	r4, r3, #31
 800b42a:	d50e      	bpl.n	800b44a <_vfiprintf_r+0x6a>
 800b42c:	f04f 30ff 	mov.w	r0, #4294967295
 800b430:	b01d      	add	sp, #116	; 0x74
 800b432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b436:	4b7b      	ldr	r3, [pc, #492]	; (800b624 <_vfiprintf_r+0x244>)
 800b438:	429d      	cmp	r5, r3
 800b43a:	d101      	bne.n	800b440 <_vfiprintf_r+0x60>
 800b43c:	68b5      	ldr	r5, [r6, #8]
 800b43e:	e7df      	b.n	800b400 <_vfiprintf_r+0x20>
 800b440:	4b79      	ldr	r3, [pc, #484]	; (800b628 <_vfiprintf_r+0x248>)
 800b442:	429d      	cmp	r5, r3
 800b444:	bf08      	it	eq
 800b446:	68f5      	ldreq	r5, [r6, #12]
 800b448:	e7da      	b.n	800b400 <_vfiprintf_r+0x20>
 800b44a:	89ab      	ldrh	r3, [r5, #12]
 800b44c:	0598      	lsls	r0, r3, #22
 800b44e:	d4ed      	bmi.n	800b42c <_vfiprintf_r+0x4c>
 800b450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b452:	f000 fb76 	bl	800bb42 <__retarget_lock_release_recursive>
 800b456:	e7e9      	b.n	800b42c <_vfiprintf_r+0x4c>
 800b458:	2300      	movs	r3, #0
 800b45a:	9309      	str	r3, [sp, #36]	; 0x24
 800b45c:	2320      	movs	r3, #32
 800b45e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b462:	f8cd 800c 	str.w	r8, [sp, #12]
 800b466:	2330      	movs	r3, #48	; 0x30
 800b468:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b62c <_vfiprintf_r+0x24c>
 800b46c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b470:	f04f 0901 	mov.w	r9, #1
 800b474:	4623      	mov	r3, r4
 800b476:	469a      	mov	sl, r3
 800b478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b47c:	b10a      	cbz	r2, 800b482 <_vfiprintf_r+0xa2>
 800b47e:	2a25      	cmp	r2, #37	; 0x25
 800b480:	d1f9      	bne.n	800b476 <_vfiprintf_r+0x96>
 800b482:	ebba 0b04 	subs.w	fp, sl, r4
 800b486:	d00b      	beq.n	800b4a0 <_vfiprintf_r+0xc0>
 800b488:	465b      	mov	r3, fp
 800b48a:	4622      	mov	r2, r4
 800b48c:	4629      	mov	r1, r5
 800b48e:	4630      	mov	r0, r6
 800b490:	f7ff ff94 	bl	800b3bc <__sfputs_r>
 800b494:	3001      	adds	r0, #1
 800b496:	f000 80aa 	beq.w	800b5ee <_vfiprintf_r+0x20e>
 800b49a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b49c:	445a      	add	r2, fp
 800b49e:	9209      	str	r2, [sp, #36]	; 0x24
 800b4a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 80a2 	beq.w	800b5ee <_vfiprintf_r+0x20e>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4b4:	f10a 0a01 	add.w	sl, sl, #1
 800b4b8:	9304      	str	r3, [sp, #16]
 800b4ba:	9307      	str	r3, [sp, #28]
 800b4bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4c0:	931a      	str	r3, [sp, #104]	; 0x68
 800b4c2:	4654      	mov	r4, sl
 800b4c4:	2205      	movs	r2, #5
 800b4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ca:	4858      	ldr	r0, [pc, #352]	; (800b62c <_vfiprintf_r+0x24c>)
 800b4cc:	f7f4 fec0 	bl	8000250 <memchr>
 800b4d0:	9a04      	ldr	r2, [sp, #16]
 800b4d2:	b9d8      	cbnz	r0, 800b50c <_vfiprintf_r+0x12c>
 800b4d4:	06d1      	lsls	r1, r2, #27
 800b4d6:	bf44      	itt	mi
 800b4d8:	2320      	movmi	r3, #32
 800b4da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4de:	0713      	lsls	r3, r2, #28
 800b4e0:	bf44      	itt	mi
 800b4e2:	232b      	movmi	r3, #43	; 0x2b
 800b4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ec:	2b2a      	cmp	r3, #42	; 0x2a
 800b4ee:	d015      	beq.n	800b51c <_vfiprintf_r+0x13c>
 800b4f0:	9a07      	ldr	r2, [sp, #28]
 800b4f2:	4654      	mov	r4, sl
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	f04f 0c0a 	mov.w	ip, #10
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b500:	3b30      	subs	r3, #48	; 0x30
 800b502:	2b09      	cmp	r3, #9
 800b504:	d94e      	bls.n	800b5a4 <_vfiprintf_r+0x1c4>
 800b506:	b1b0      	cbz	r0, 800b536 <_vfiprintf_r+0x156>
 800b508:	9207      	str	r2, [sp, #28]
 800b50a:	e014      	b.n	800b536 <_vfiprintf_r+0x156>
 800b50c:	eba0 0308 	sub.w	r3, r0, r8
 800b510:	fa09 f303 	lsl.w	r3, r9, r3
 800b514:	4313      	orrs	r3, r2
 800b516:	9304      	str	r3, [sp, #16]
 800b518:	46a2      	mov	sl, r4
 800b51a:	e7d2      	b.n	800b4c2 <_vfiprintf_r+0xe2>
 800b51c:	9b03      	ldr	r3, [sp, #12]
 800b51e:	1d19      	adds	r1, r3, #4
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	9103      	str	r1, [sp, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	bfbb      	ittet	lt
 800b528:	425b      	neglt	r3, r3
 800b52a:	f042 0202 	orrlt.w	r2, r2, #2
 800b52e:	9307      	strge	r3, [sp, #28]
 800b530:	9307      	strlt	r3, [sp, #28]
 800b532:	bfb8      	it	lt
 800b534:	9204      	strlt	r2, [sp, #16]
 800b536:	7823      	ldrb	r3, [r4, #0]
 800b538:	2b2e      	cmp	r3, #46	; 0x2e
 800b53a:	d10c      	bne.n	800b556 <_vfiprintf_r+0x176>
 800b53c:	7863      	ldrb	r3, [r4, #1]
 800b53e:	2b2a      	cmp	r3, #42	; 0x2a
 800b540:	d135      	bne.n	800b5ae <_vfiprintf_r+0x1ce>
 800b542:	9b03      	ldr	r3, [sp, #12]
 800b544:	1d1a      	adds	r2, r3, #4
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	9203      	str	r2, [sp, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	bfb8      	it	lt
 800b54e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b552:	3402      	adds	r4, #2
 800b554:	9305      	str	r3, [sp, #20]
 800b556:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b63c <_vfiprintf_r+0x25c>
 800b55a:	7821      	ldrb	r1, [r4, #0]
 800b55c:	2203      	movs	r2, #3
 800b55e:	4650      	mov	r0, sl
 800b560:	f7f4 fe76 	bl	8000250 <memchr>
 800b564:	b140      	cbz	r0, 800b578 <_vfiprintf_r+0x198>
 800b566:	2340      	movs	r3, #64	; 0x40
 800b568:	eba0 000a 	sub.w	r0, r0, sl
 800b56c:	fa03 f000 	lsl.w	r0, r3, r0
 800b570:	9b04      	ldr	r3, [sp, #16]
 800b572:	4303      	orrs	r3, r0
 800b574:	3401      	adds	r4, #1
 800b576:	9304      	str	r3, [sp, #16]
 800b578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b57c:	482c      	ldr	r0, [pc, #176]	; (800b630 <_vfiprintf_r+0x250>)
 800b57e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b582:	2206      	movs	r2, #6
 800b584:	f7f4 fe64 	bl	8000250 <memchr>
 800b588:	2800      	cmp	r0, #0
 800b58a:	d03f      	beq.n	800b60c <_vfiprintf_r+0x22c>
 800b58c:	4b29      	ldr	r3, [pc, #164]	; (800b634 <_vfiprintf_r+0x254>)
 800b58e:	bb1b      	cbnz	r3, 800b5d8 <_vfiprintf_r+0x1f8>
 800b590:	9b03      	ldr	r3, [sp, #12]
 800b592:	3307      	adds	r3, #7
 800b594:	f023 0307 	bic.w	r3, r3, #7
 800b598:	3308      	adds	r3, #8
 800b59a:	9303      	str	r3, [sp, #12]
 800b59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b59e:	443b      	add	r3, r7
 800b5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a2:	e767      	b.n	800b474 <_vfiprintf_r+0x94>
 800b5a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	2001      	movs	r0, #1
 800b5ac:	e7a5      	b.n	800b4fa <_vfiprintf_r+0x11a>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	3401      	adds	r4, #1
 800b5b2:	9305      	str	r3, [sp, #20]
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	f04f 0c0a 	mov.w	ip, #10
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5c0:	3a30      	subs	r2, #48	; 0x30
 800b5c2:	2a09      	cmp	r2, #9
 800b5c4:	d903      	bls.n	800b5ce <_vfiprintf_r+0x1ee>
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d0c5      	beq.n	800b556 <_vfiprintf_r+0x176>
 800b5ca:	9105      	str	r1, [sp, #20]
 800b5cc:	e7c3      	b.n	800b556 <_vfiprintf_r+0x176>
 800b5ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e7f0      	b.n	800b5ba <_vfiprintf_r+0x1da>
 800b5d8:	ab03      	add	r3, sp, #12
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	462a      	mov	r2, r5
 800b5de:	4b16      	ldr	r3, [pc, #88]	; (800b638 <_vfiprintf_r+0x258>)
 800b5e0:	a904      	add	r1, sp, #16
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f7fc f920 	bl	8007828 <_printf_float>
 800b5e8:	4607      	mov	r7, r0
 800b5ea:	1c78      	adds	r0, r7, #1
 800b5ec:	d1d6      	bne.n	800b59c <_vfiprintf_r+0x1bc>
 800b5ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5f0:	07d9      	lsls	r1, r3, #31
 800b5f2:	d405      	bmi.n	800b600 <_vfiprintf_r+0x220>
 800b5f4:	89ab      	ldrh	r3, [r5, #12]
 800b5f6:	059a      	lsls	r2, r3, #22
 800b5f8:	d402      	bmi.n	800b600 <_vfiprintf_r+0x220>
 800b5fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5fc:	f000 faa1 	bl	800bb42 <__retarget_lock_release_recursive>
 800b600:	89ab      	ldrh	r3, [r5, #12]
 800b602:	065b      	lsls	r3, r3, #25
 800b604:	f53f af12 	bmi.w	800b42c <_vfiprintf_r+0x4c>
 800b608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b60a:	e711      	b.n	800b430 <_vfiprintf_r+0x50>
 800b60c:	ab03      	add	r3, sp, #12
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	462a      	mov	r2, r5
 800b612:	4b09      	ldr	r3, [pc, #36]	; (800b638 <_vfiprintf_r+0x258>)
 800b614:	a904      	add	r1, sp, #16
 800b616:	4630      	mov	r0, r6
 800b618:	f7fc fb92 	bl	8007d40 <_printf_i>
 800b61c:	e7e4      	b.n	800b5e8 <_vfiprintf_r+0x208>
 800b61e:	bf00      	nop
 800b620:	0800c304 	.word	0x0800c304
 800b624:	0800c324 	.word	0x0800c324
 800b628:	0800c2e4 	.word	0x0800c2e4
 800b62c:	0800c294 	.word	0x0800c294
 800b630:	0800c29e 	.word	0x0800c29e
 800b634:	08007829 	.word	0x08007829
 800b638:	0800b3bd 	.word	0x0800b3bd
 800b63c:	0800c29a 	.word	0x0800c29a

0800b640 <__swbuf_r>:
 800b640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b642:	460e      	mov	r6, r1
 800b644:	4614      	mov	r4, r2
 800b646:	4605      	mov	r5, r0
 800b648:	b118      	cbz	r0, 800b652 <__swbuf_r+0x12>
 800b64a:	6983      	ldr	r3, [r0, #24]
 800b64c:	b90b      	cbnz	r3, 800b652 <__swbuf_r+0x12>
 800b64e:	f000 f9d9 	bl	800ba04 <__sinit>
 800b652:	4b21      	ldr	r3, [pc, #132]	; (800b6d8 <__swbuf_r+0x98>)
 800b654:	429c      	cmp	r4, r3
 800b656:	d12b      	bne.n	800b6b0 <__swbuf_r+0x70>
 800b658:	686c      	ldr	r4, [r5, #4]
 800b65a:	69a3      	ldr	r3, [r4, #24]
 800b65c:	60a3      	str	r3, [r4, #8]
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	071a      	lsls	r2, r3, #28
 800b662:	d52f      	bpl.n	800b6c4 <__swbuf_r+0x84>
 800b664:	6923      	ldr	r3, [r4, #16]
 800b666:	b36b      	cbz	r3, 800b6c4 <__swbuf_r+0x84>
 800b668:	6923      	ldr	r3, [r4, #16]
 800b66a:	6820      	ldr	r0, [r4, #0]
 800b66c:	1ac0      	subs	r0, r0, r3
 800b66e:	6963      	ldr	r3, [r4, #20]
 800b670:	b2f6      	uxtb	r6, r6
 800b672:	4283      	cmp	r3, r0
 800b674:	4637      	mov	r7, r6
 800b676:	dc04      	bgt.n	800b682 <__swbuf_r+0x42>
 800b678:	4621      	mov	r1, r4
 800b67a:	4628      	mov	r0, r5
 800b67c:	f000 f92e 	bl	800b8dc <_fflush_r>
 800b680:	bb30      	cbnz	r0, 800b6d0 <__swbuf_r+0x90>
 800b682:	68a3      	ldr	r3, [r4, #8]
 800b684:	3b01      	subs	r3, #1
 800b686:	60a3      	str	r3, [r4, #8]
 800b688:	6823      	ldr	r3, [r4, #0]
 800b68a:	1c5a      	adds	r2, r3, #1
 800b68c:	6022      	str	r2, [r4, #0]
 800b68e:	701e      	strb	r6, [r3, #0]
 800b690:	6963      	ldr	r3, [r4, #20]
 800b692:	3001      	adds	r0, #1
 800b694:	4283      	cmp	r3, r0
 800b696:	d004      	beq.n	800b6a2 <__swbuf_r+0x62>
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	07db      	lsls	r3, r3, #31
 800b69c:	d506      	bpl.n	800b6ac <__swbuf_r+0x6c>
 800b69e:	2e0a      	cmp	r6, #10
 800b6a0:	d104      	bne.n	800b6ac <__swbuf_r+0x6c>
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	f000 f919 	bl	800b8dc <_fflush_r>
 800b6aa:	b988      	cbnz	r0, 800b6d0 <__swbuf_r+0x90>
 800b6ac:	4638      	mov	r0, r7
 800b6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6b0:	4b0a      	ldr	r3, [pc, #40]	; (800b6dc <__swbuf_r+0x9c>)
 800b6b2:	429c      	cmp	r4, r3
 800b6b4:	d101      	bne.n	800b6ba <__swbuf_r+0x7a>
 800b6b6:	68ac      	ldr	r4, [r5, #8]
 800b6b8:	e7cf      	b.n	800b65a <__swbuf_r+0x1a>
 800b6ba:	4b09      	ldr	r3, [pc, #36]	; (800b6e0 <__swbuf_r+0xa0>)
 800b6bc:	429c      	cmp	r4, r3
 800b6be:	bf08      	it	eq
 800b6c0:	68ec      	ldreq	r4, [r5, #12]
 800b6c2:	e7ca      	b.n	800b65a <__swbuf_r+0x1a>
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	f000 f80c 	bl	800b6e4 <__swsetup_r>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d0cb      	beq.n	800b668 <__swbuf_r+0x28>
 800b6d0:	f04f 37ff 	mov.w	r7, #4294967295
 800b6d4:	e7ea      	b.n	800b6ac <__swbuf_r+0x6c>
 800b6d6:	bf00      	nop
 800b6d8:	0800c304 	.word	0x0800c304
 800b6dc:	0800c324 	.word	0x0800c324
 800b6e0:	0800c2e4 	.word	0x0800c2e4

0800b6e4 <__swsetup_r>:
 800b6e4:	4b32      	ldr	r3, [pc, #200]	; (800b7b0 <__swsetup_r+0xcc>)
 800b6e6:	b570      	push	{r4, r5, r6, lr}
 800b6e8:	681d      	ldr	r5, [r3, #0]
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	460c      	mov	r4, r1
 800b6ee:	b125      	cbz	r5, 800b6fa <__swsetup_r+0x16>
 800b6f0:	69ab      	ldr	r3, [r5, #24]
 800b6f2:	b913      	cbnz	r3, 800b6fa <__swsetup_r+0x16>
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	f000 f985 	bl	800ba04 <__sinit>
 800b6fa:	4b2e      	ldr	r3, [pc, #184]	; (800b7b4 <__swsetup_r+0xd0>)
 800b6fc:	429c      	cmp	r4, r3
 800b6fe:	d10f      	bne.n	800b720 <__swsetup_r+0x3c>
 800b700:	686c      	ldr	r4, [r5, #4]
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b708:	0719      	lsls	r1, r3, #28
 800b70a:	d42c      	bmi.n	800b766 <__swsetup_r+0x82>
 800b70c:	06dd      	lsls	r5, r3, #27
 800b70e:	d411      	bmi.n	800b734 <__swsetup_r+0x50>
 800b710:	2309      	movs	r3, #9
 800b712:	6033      	str	r3, [r6, #0]
 800b714:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b718:	81a3      	strh	r3, [r4, #12]
 800b71a:	f04f 30ff 	mov.w	r0, #4294967295
 800b71e:	e03e      	b.n	800b79e <__swsetup_r+0xba>
 800b720:	4b25      	ldr	r3, [pc, #148]	; (800b7b8 <__swsetup_r+0xd4>)
 800b722:	429c      	cmp	r4, r3
 800b724:	d101      	bne.n	800b72a <__swsetup_r+0x46>
 800b726:	68ac      	ldr	r4, [r5, #8]
 800b728:	e7eb      	b.n	800b702 <__swsetup_r+0x1e>
 800b72a:	4b24      	ldr	r3, [pc, #144]	; (800b7bc <__swsetup_r+0xd8>)
 800b72c:	429c      	cmp	r4, r3
 800b72e:	bf08      	it	eq
 800b730:	68ec      	ldreq	r4, [r5, #12]
 800b732:	e7e6      	b.n	800b702 <__swsetup_r+0x1e>
 800b734:	0758      	lsls	r0, r3, #29
 800b736:	d512      	bpl.n	800b75e <__swsetup_r+0x7a>
 800b738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b73a:	b141      	cbz	r1, 800b74e <__swsetup_r+0x6a>
 800b73c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b740:	4299      	cmp	r1, r3
 800b742:	d002      	beq.n	800b74a <__swsetup_r+0x66>
 800b744:	4630      	mov	r0, r6
 800b746:	f7ff fb25 	bl	800ad94 <_free_r>
 800b74a:	2300      	movs	r3, #0
 800b74c:	6363      	str	r3, [r4, #52]	; 0x34
 800b74e:	89a3      	ldrh	r3, [r4, #12]
 800b750:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b754:	81a3      	strh	r3, [r4, #12]
 800b756:	2300      	movs	r3, #0
 800b758:	6063      	str	r3, [r4, #4]
 800b75a:	6923      	ldr	r3, [r4, #16]
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	f043 0308 	orr.w	r3, r3, #8
 800b764:	81a3      	strh	r3, [r4, #12]
 800b766:	6923      	ldr	r3, [r4, #16]
 800b768:	b94b      	cbnz	r3, 800b77e <__swsetup_r+0x9a>
 800b76a:	89a3      	ldrh	r3, [r4, #12]
 800b76c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b774:	d003      	beq.n	800b77e <__swsetup_r+0x9a>
 800b776:	4621      	mov	r1, r4
 800b778:	4630      	mov	r0, r6
 800b77a:	f000 fa09 	bl	800bb90 <__smakebuf_r>
 800b77e:	89a0      	ldrh	r0, [r4, #12]
 800b780:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b784:	f010 0301 	ands.w	r3, r0, #1
 800b788:	d00a      	beq.n	800b7a0 <__swsetup_r+0xbc>
 800b78a:	2300      	movs	r3, #0
 800b78c:	60a3      	str	r3, [r4, #8]
 800b78e:	6963      	ldr	r3, [r4, #20]
 800b790:	425b      	negs	r3, r3
 800b792:	61a3      	str	r3, [r4, #24]
 800b794:	6923      	ldr	r3, [r4, #16]
 800b796:	b943      	cbnz	r3, 800b7aa <__swsetup_r+0xc6>
 800b798:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b79c:	d1ba      	bne.n	800b714 <__swsetup_r+0x30>
 800b79e:	bd70      	pop	{r4, r5, r6, pc}
 800b7a0:	0781      	lsls	r1, r0, #30
 800b7a2:	bf58      	it	pl
 800b7a4:	6963      	ldrpl	r3, [r4, #20]
 800b7a6:	60a3      	str	r3, [r4, #8]
 800b7a8:	e7f4      	b.n	800b794 <__swsetup_r+0xb0>
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	e7f7      	b.n	800b79e <__swsetup_r+0xba>
 800b7ae:	bf00      	nop
 800b7b0:	20000024 	.word	0x20000024
 800b7b4:	0800c304 	.word	0x0800c304
 800b7b8:	0800c324 	.word	0x0800c324
 800b7bc:	0800c2e4 	.word	0x0800c2e4

0800b7c0 <abort>:
 800b7c0:	b508      	push	{r3, lr}
 800b7c2:	2006      	movs	r0, #6
 800b7c4:	f000 fa54 	bl	800bc70 <raise>
 800b7c8:	2001      	movs	r0, #1
 800b7ca:	f7f6 fb35 	bl	8001e38 <_exit>
	...

0800b7d0 <__sflush_r>:
 800b7d0:	898a      	ldrh	r2, [r1, #12]
 800b7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	0710      	lsls	r0, r2, #28
 800b7da:	460c      	mov	r4, r1
 800b7dc:	d458      	bmi.n	800b890 <__sflush_r+0xc0>
 800b7de:	684b      	ldr	r3, [r1, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	dc05      	bgt.n	800b7f0 <__sflush_r+0x20>
 800b7e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	dc02      	bgt.n	800b7f0 <__sflush_r+0x20>
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7f2:	2e00      	cmp	r6, #0
 800b7f4:	d0f9      	beq.n	800b7ea <__sflush_r+0x1a>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7fc:	682f      	ldr	r7, [r5, #0]
 800b7fe:	602b      	str	r3, [r5, #0]
 800b800:	d032      	beq.n	800b868 <__sflush_r+0x98>
 800b802:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b804:	89a3      	ldrh	r3, [r4, #12]
 800b806:	075a      	lsls	r2, r3, #29
 800b808:	d505      	bpl.n	800b816 <__sflush_r+0x46>
 800b80a:	6863      	ldr	r3, [r4, #4]
 800b80c:	1ac0      	subs	r0, r0, r3
 800b80e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b810:	b10b      	cbz	r3, 800b816 <__sflush_r+0x46>
 800b812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b814:	1ac0      	subs	r0, r0, r3
 800b816:	2300      	movs	r3, #0
 800b818:	4602      	mov	r2, r0
 800b81a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b81c:	6a21      	ldr	r1, [r4, #32]
 800b81e:	4628      	mov	r0, r5
 800b820:	47b0      	blx	r6
 800b822:	1c43      	adds	r3, r0, #1
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	d106      	bne.n	800b836 <__sflush_r+0x66>
 800b828:	6829      	ldr	r1, [r5, #0]
 800b82a:	291d      	cmp	r1, #29
 800b82c:	d82c      	bhi.n	800b888 <__sflush_r+0xb8>
 800b82e:	4a2a      	ldr	r2, [pc, #168]	; (800b8d8 <__sflush_r+0x108>)
 800b830:	40ca      	lsrs	r2, r1
 800b832:	07d6      	lsls	r6, r2, #31
 800b834:	d528      	bpl.n	800b888 <__sflush_r+0xb8>
 800b836:	2200      	movs	r2, #0
 800b838:	6062      	str	r2, [r4, #4]
 800b83a:	04d9      	lsls	r1, r3, #19
 800b83c:	6922      	ldr	r2, [r4, #16]
 800b83e:	6022      	str	r2, [r4, #0]
 800b840:	d504      	bpl.n	800b84c <__sflush_r+0x7c>
 800b842:	1c42      	adds	r2, r0, #1
 800b844:	d101      	bne.n	800b84a <__sflush_r+0x7a>
 800b846:	682b      	ldr	r3, [r5, #0]
 800b848:	b903      	cbnz	r3, 800b84c <__sflush_r+0x7c>
 800b84a:	6560      	str	r0, [r4, #84]	; 0x54
 800b84c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b84e:	602f      	str	r7, [r5, #0]
 800b850:	2900      	cmp	r1, #0
 800b852:	d0ca      	beq.n	800b7ea <__sflush_r+0x1a>
 800b854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b858:	4299      	cmp	r1, r3
 800b85a:	d002      	beq.n	800b862 <__sflush_r+0x92>
 800b85c:	4628      	mov	r0, r5
 800b85e:	f7ff fa99 	bl	800ad94 <_free_r>
 800b862:	2000      	movs	r0, #0
 800b864:	6360      	str	r0, [r4, #52]	; 0x34
 800b866:	e7c1      	b.n	800b7ec <__sflush_r+0x1c>
 800b868:	6a21      	ldr	r1, [r4, #32]
 800b86a:	2301      	movs	r3, #1
 800b86c:	4628      	mov	r0, r5
 800b86e:	47b0      	blx	r6
 800b870:	1c41      	adds	r1, r0, #1
 800b872:	d1c7      	bne.n	800b804 <__sflush_r+0x34>
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d0c4      	beq.n	800b804 <__sflush_r+0x34>
 800b87a:	2b1d      	cmp	r3, #29
 800b87c:	d001      	beq.n	800b882 <__sflush_r+0xb2>
 800b87e:	2b16      	cmp	r3, #22
 800b880:	d101      	bne.n	800b886 <__sflush_r+0xb6>
 800b882:	602f      	str	r7, [r5, #0]
 800b884:	e7b1      	b.n	800b7ea <__sflush_r+0x1a>
 800b886:	89a3      	ldrh	r3, [r4, #12]
 800b888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b88c:	81a3      	strh	r3, [r4, #12]
 800b88e:	e7ad      	b.n	800b7ec <__sflush_r+0x1c>
 800b890:	690f      	ldr	r7, [r1, #16]
 800b892:	2f00      	cmp	r7, #0
 800b894:	d0a9      	beq.n	800b7ea <__sflush_r+0x1a>
 800b896:	0793      	lsls	r3, r2, #30
 800b898:	680e      	ldr	r6, [r1, #0]
 800b89a:	bf08      	it	eq
 800b89c:	694b      	ldreq	r3, [r1, #20]
 800b89e:	600f      	str	r7, [r1, #0]
 800b8a0:	bf18      	it	ne
 800b8a2:	2300      	movne	r3, #0
 800b8a4:	eba6 0807 	sub.w	r8, r6, r7
 800b8a8:	608b      	str	r3, [r1, #8]
 800b8aa:	f1b8 0f00 	cmp.w	r8, #0
 800b8ae:	dd9c      	ble.n	800b7ea <__sflush_r+0x1a>
 800b8b0:	6a21      	ldr	r1, [r4, #32]
 800b8b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8b4:	4643      	mov	r3, r8
 800b8b6:	463a      	mov	r2, r7
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	47b0      	blx	r6
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	dc06      	bgt.n	800b8ce <__sflush_r+0xfe>
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8cc:	e78e      	b.n	800b7ec <__sflush_r+0x1c>
 800b8ce:	4407      	add	r7, r0
 800b8d0:	eba8 0800 	sub.w	r8, r8, r0
 800b8d4:	e7e9      	b.n	800b8aa <__sflush_r+0xda>
 800b8d6:	bf00      	nop
 800b8d8:	20400001 	.word	0x20400001

0800b8dc <_fflush_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	690b      	ldr	r3, [r1, #16]
 800b8e0:	4605      	mov	r5, r0
 800b8e2:	460c      	mov	r4, r1
 800b8e4:	b913      	cbnz	r3, 800b8ec <_fflush_r+0x10>
 800b8e6:	2500      	movs	r5, #0
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	bd38      	pop	{r3, r4, r5, pc}
 800b8ec:	b118      	cbz	r0, 800b8f6 <_fflush_r+0x1a>
 800b8ee:	6983      	ldr	r3, [r0, #24]
 800b8f0:	b90b      	cbnz	r3, 800b8f6 <_fflush_r+0x1a>
 800b8f2:	f000 f887 	bl	800ba04 <__sinit>
 800b8f6:	4b14      	ldr	r3, [pc, #80]	; (800b948 <_fflush_r+0x6c>)
 800b8f8:	429c      	cmp	r4, r3
 800b8fa:	d11b      	bne.n	800b934 <_fflush_r+0x58>
 800b8fc:	686c      	ldr	r4, [r5, #4]
 800b8fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d0ef      	beq.n	800b8e6 <_fflush_r+0xa>
 800b906:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b908:	07d0      	lsls	r0, r2, #31
 800b90a:	d404      	bmi.n	800b916 <_fflush_r+0x3a>
 800b90c:	0599      	lsls	r1, r3, #22
 800b90e:	d402      	bmi.n	800b916 <_fflush_r+0x3a>
 800b910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b912:	f000 f915 	bl	800bb40 <__retarget_lock_acquire_recursive>
 800b916:	4628      	mov	r0, r5
 800b918:	4621      	mov	r1, r4
 800b91a:	f7ff ff59 	bl	800b7d0 <__sflush_r>
 800b91e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b920:	07da      	lsls	r2, r3, #31
 800b922:	4605      	mov	r5, r0
 800b924:	d4e0      	bmi.n	800b8e8 <_fflush_r+0xc>
 800b926:	89a3      	ldrh	r3, [r4, #12]
 800b928:	059b      	lsls	r3, r3, #22
 800b92a:	d4dd      	bmi.n	800b8e8 <_fflush_r+0xc>
 800b92c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b92e:	f000 f908 	bl	800bb42 <__retarget_lock_release_recursive>
 800b932:	e7d9      	b.n	800b8e8 <_fflush_r+0xc>
 800b934:	4b05      	ldr	r3, [pc, #20]	; (800b94c <_fflush_r+0x70>)
 800b936:	429c      	cmp	r4, r3
 800b938:	d101      	bne.n	800b93e <_fflush_r+0x62>
 800b93a:	68ac      	ldr	r4, [r5, #8]
 800b93c:	e7df      	b.n	800b8fe <_fflush_r+0x22>
 800b93e:	4b04      	ldr	r3, [pc, #16]	; (800b950 <_fflush_r+0x74>)
 800b940:	429c      	cmp	r4, r3
 800b942:	bf08      	it	eq
 800b944:	68ec      	ldreq	r4, [r5, #12]
 800b946:	e7da      	b.n	800b8fe <_fflush_r+0x22>
 800b948:	0800c304 	.word	0x0800c304
 800b94c:	0800c324 	.word	0x0800c324
 800b950:	0800c2e4 	.word	0x0800c2e4

0800b954 <std>:
 800b954:	2300      	movs	r3, #0
 800b956:	b510      	push	{r4, lr}
 800b958:	4604      	mov	r4, r0
 800b95a:	e9c0 3300 	strd	r3, r3, [r0]
 800b95e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b962:	6083      	str	r3, [r0, #8]
 800b964:	8181      	strh	r1, [r0, #12]
 800b966:	6643      	str	r3, [r0, #100]	; 0x64
 800b968:	81c2      	strh	r2, [r0, #14]
 800b96a:	6183      	str	r3, [r0, #24]
 800b96c:	4619      	mov	r1, r3
 800b96e:	2208      	movs	r2, #8
 800b970:	305c      	adds	r0, #92	; 0x5c
 800b972:	f7fb febf 	bl	80076f4 <memset>
 800b976:	4b05      	ldr	r3, [pc, #20]	; (800b98c <std+0x38>)
 800b978:	6263      	str	r3, [r4, #36]	; 0x24
 800b97a:	4b05      	ldr	r3, [pc, #20]	; (800b990 <std+0x3c>)
 800b97c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b97e:	4b05      	ldr	r3, [pc, #20]	; (800b994 <std+0x40>)
 800b980:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b982:	4b05      	ldr	r3, [pc, #20]	; (800b998 <std+0x44>)
 800b984:	6224      	str	r4, [r4, #32]
 800b986:	6323      	str	r3, [r4, #48]	; 0x30
 800b988:	bd10      	pop	{r4, pc}
 800b98a:	bf00      	nop
 800b98c:	0800bca9 	.word	0x0800bca9
 800b990:	0800bccb 	.word	0x0800bccb
 800b994:	0800bd03 	.word	0x0800bd03
 800b998:	0800bd27 	.word	0x0800bd27

0800b99c <_cleanup_r>:
 800b99c:	4901      	ldr	r1, [pc, #4]	; (800b9a4 <_cleanup_r+0x8>)
 800b99e:	f000 b8af 	b.w	800bb00 <_fwalk_reent>
 800b9a2:	bf00      	nop
 800b9a4:	0800b8dd 	.word	0x0800b8dd

0800b9a8 <__sfmoreglue>:
 800b9a8:	b570      	push	{r4, r5, r6, lr}
 800b9aa:	2268      	movs	r2, #104	; 0x68
 800b9ac:	1e4d      	subs	r5, r1, #1
 800b9ae:	4355      	muls	r5, r2
 800b9b0:	460e      	mov	r6, r1
 800b9b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b9b6:	f7ff fa59 	bl	800ae6c <_malloc_r>
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	b140      	cbz	r0, 800b9d0 <__sfmoreglue+0x28>
 800b9be:	2100      	movs	r1, #0
 800b9c0:	e9c0 1600 	strd	r1, r6, [r0]
 800b9c4:	300c      	adds	r0, #12
 800b9c6:	60a0      	str	r0, [r4, #8]
 800b9c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b9cc:	f7fb fe92 	bl	80076f4 <memset>
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	bd70      	pop	{r4, r5, r6, pc}

0800b9d4 <__sfp_lock_acquire>:
 800b9d4:	4801      	ldr	r0, [pc, #4]	; (800b9dc <__sfp_lock_acquire+0x8>)
 800b9d6:	f000 b8b3 	b.w	800bb40 <__retarget_lock_acquire_recursive>
 800b9da:	bf00      	nop
 800b9dc:	200008e9 	.word	0x200008e9

0800b9e0 <__sfp_lock_release>:
 800b9e0:	4801      	ldr	r0, [pc, #4]	; (800b9e8 <__sfp_lock_release+0x8>)
 800b9e2:	f000 b8ae 	b.w	800bb42 <__retarget_lock_release_recursive>
 800b9e6:	bf00      	nop
 800b9e8:	200008e9 	.word	0x200008e9

0800b9ec <__sinit_lock_acquire>:
 800b9ec:	4801      	ldr	r0, [pc, #4]	; (800b9f4 <__sinit_lock_acquire+0x8>)
 800b9ee:	f000 b8a7 	b.w	800bb40 <__retarget_lock_acquire_recursive>
 800b9f2:	bf00      	nop
 800b9f4:	200008ea 	.word	0x200008ea

0800b9f8 <__sinit_lock_release>:
 800b9f8:	4801      	ldr	r0, [pc, #4]	; (800ba00 <__sinit_lock_release+0x8>)
 800b9fa:	f000 b8a2 	b.w	800bb42 <__retarget_lock_release_recursive>
 800b9fe:	bf00      	nop
 800ba00:	200008ea 	.word	0x200008ea

0800ba04 <__sinit>:
 800ba04:	b510      	push	{r4, lr}
 800ba06:	4604      	mov	r4, r0
 800ba08:	f7ff fff0 	bl	800b9ec <__sinit_lock_acquire>
 800ba0c:	69a3      	ldr	r3, [r4, #24]
 800ba0e:	b11b      	cbz	r3, 800ba18 <__sinit+0x14>
 800ba10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba14:	f7ff bff0 	b.w	800b9f8 <__sinit_lock_release>
 800ba18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba1c:	6523      	str	r3, [r4, #80]	; 0x50
 800ba1e:	4b13      	ldr	r3, [pc, #76]	; (800ba6c <__sinit+0x68>)
 800ba20:	4a13      	ldr	r2, [pc, #76]	; (800ba70 <__sinit+0x6c>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba26:	42a3      	cmp	r3, r4
 800ba28:	bf04      	itt	eq
 800ba2a:	2301      	moveq	r3, #1
 800ba2c:	61a3      	streq	r3, [r4, #24]
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f000 f820 	bl	800ba74 <__sfp>
 800ba34:	6060      	str	r0, [r4, #4]
 800ba36:	4620      	mov	r0, r4
 800ba38:	f000 f81c 	bl	800ba74 <__sfp>
 800ba3c:	60a0      	str	r0, [r4, #8]
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f000 f818 	bl	800ba74 <__sfp>
 800ba44:	2200      	movs	r2, #0
 800ba46:	60e0      	str	r0, [r4, #12]
 800ba48:	2104      	movs	r1, #4
 800ba4a:	6860      	ldr	r0, [r4, #4]
 800ba4c:	f7ff ff82 	bl	800b954 <std>
 800ba50:	68a0      	ldr	r0, [r4, #8]
 800ba52:	2201      	movs	r2, #1
 800ba54:	2109      	movs	r1, #9
 800ba56:	f7ff ff7d 	bl	800b954 <std>
 800ba5a:	68e0      	ldr	r0, [r4, #12]
 800ba5c:	2202      	movs	r2, #2
 800ba5e:	2112      	movs	r1, #18
 800ba60:	f7ff ff78 	bl	800b954 <std>
 800ba64:	2301      	movs	r3, #1
 800ba66:	61a3      	str	r3, [r4, #24]
 800ba68:	e7d2      	b.n	800ba10 <__sinit+0xc>
 800ba6a:	bf00      	nop
 800ba6c:	0800be9c 	.word	0x0800be9c
 800ba70:	0800b99d 	.word	0x0800b99d

0800ba74 <__sfp>:
 800ba74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba76:	4607      	mov	r7, r0
 800ba78:	f7ff ffac 	bl	800b9d4 <__sfp_lock_acquire>
 800ba7c:	4b1e      	ldr	r3, [pc, #120]	; (800baf8 <__sfp+0x84>)
 800ba7e:	681e      	ldr	r6, [r3, #0]
 800ba80:	69b3      	ldr	r3, [r6, #24]
 800ba82:	b913      	cbnz	r3, 800ba8a <__sfp+0x16>
 800ba84:	4630      	mov	r0, r6
 800ba86:	f7ff ffbd 	bl	800ba04 <__sinit>
 800ba8a:	3648      	adds	r6, #72	; 0x48
 800ba8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba90:	3b01      	subs	r3, #1
 800ba92:	d503      	bpl.n	800ba9c <__sfp+0x28>
 800ba94:	6833      	ldr	r3, [r6, #0]
 800ba96:	b30b      	cbz	r3, 800badc <__sfp+0x68>
 800ba98:	6836      	ldr	r6, [r6, #0]
 800ba9a:	e7f7      	b.n	800ba8c <__sfp+0x18>
 800ba9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800baa0:	b9d5      	cbnz	r5, 800bad8 <__sfp+0x64>
 800baa2:	4b16      	ldr	r3, [pc, #88]	; (800bafc <__sfp+0x88>)
 800baa4:	60e3      	str	r3, [r4, #12]
 800baa6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800baaa:	6665      	str	r5, [r4, #100]	; 0x64
 800baac:	f000 f847 	bl	800bb3e <__retarget_lock_init_recursive>
 800bab0:	f7ff ff96 	bl	800b9e0 <__sfp_lock_release>
 800bab4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bab8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800babc:	6025      	str	r5, [r4, #0]
 800babe:	61a5      	str	r5, [r4, #24]
 800bac0:	2208      	movs	r2, #8
 800bac2:	4629      	mov	r1, r5
 800bac4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bac8:	f7fb fe14 	bl	80076f4 <memset>
 800bacc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bad0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bad4:	4620      	mov	r0, r4
 800bad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bad8:	3468      	adds	r4, #104	; 0x68
 800bada:	e7d9      	b.n	800ba90 <__sfp+0x1c>
 800badc:	2104      	movs	r1, #4
 800bade:	4638      	mov	r0, r7
 800bae0:	f7ff ff62 	bl	800b9a8 <__sfmoreglue>
 800bae4:	4604      	mov	r4, r0
 800bae6:	6030      	str	r0, [r6, #0]
 800bae8:	2800      	cmp	r0, #0
 800baea:	d1d5      	bne.n	800ba98 <__sfp+0x24>
 800baec:	f7ff ff78 	bl	800b9e0 <__sfp_lock_release>
 800baf0:	230c      	movs	r3, #12
 800baf2:	603b      	str	r3, [r7, #0]
 800baf4:	e7ee      	b.n	800bad4 <__sfp+0x60>
 800baf6:	bf00      	nop
 800baf8:	0800be9c 	.word	0x0800be9c
 800bafc:	ffff0001 	.word	0xffff0001

0800bb00 <_fwalk_reent>:
 800bb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb04:	4606      	mov	r6, r0
 800bb06:	4688      	mov	r8, r1
 800bb08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb0c:	2700      	movs	r7, #0
 800bb0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb12:	f1b9 0901 	subs.w	r9, r9, #1
 800bb16:	d505      	bpl.n	800bb24 <_fwalk_reent+0x24>
 800bb18:	6824      	ldr	r4, [r4, #0]
 800bb1a:	2c00      	cmp	r4, #0
 800bb1c:	d1f7      	bne.n	800bb0e <_fwalk_reent+0xe>
 800bb1e:	4638      	mov	r0, r7
 800bb20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb24:	89ab      	ldrh	r3, [r5, #12]
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d907      	bls.n	800bb3a <_fwalk_reent+0x3a>
 800bb2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	d003      	beq.n	800bb3a <_fwalk_reent+0x3a>
 800bb32:	4629      	mov	r1, r5
 800bb34:	4630      	mov	r0, r6
 800bb36:	47c0      	blx	r8
 800bb38:	4307      	orrs	r7, r0
 800bb3a:	3568      	adds	r5, #104	; 0x68
 800bb3c:	e7e9      	b.n	800bb12 <_fwalk_reent+0x12>

0800bb3e <__retarget_lock_init_recursive>:
 800bb3e:	4770      	bx	lr

0800bb40 <__retarget_lock_acquire_recursive>:
 800bb40:	4770      	bx	lr

0800bb42 <__retarget_lock_release_recursive>:
 800bb42:	4770      	bx	lr

0800bb44 <__swhatbuf_r>:
 800bb44:	b570      	push	{r4, r5, r6, lr}
 800bb46:	460e      	mov	r6, r1
 800bb48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb4c:	2900      	cmp	r1, #0
 800bb4e:	b096      	sub	sp, #88	; 0x58
 800bb50:	4614      	mov	r4, r2
 800bb52:	461d      	mov	r5, r3
 800bb54:	da08      	bge.n	800bb68 <__swhatbuf_r+0x24>
 800bb56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	602a      	str	r2, [r5, #0]
 800bb5e:	061a      	lsls	r2, r3, #24
 800bb60:	d410      	bmi.n	800bb84 <__swhatbuf_r+0x40>
 800bb62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb66:	e00e      	b.n	800bb86 <__swhatbuf_r+0x42>
 800bb68:	466a      	mov	r2, sp
 800bb6a:	f000 f903 	bl	800bd74 <_fstat_r>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	dbf1      	blt.n	800bb56 <__swhatbuf_r+0x12>
 800bb72:	9a01      	ldr	r2, [sp, #4]
 800bb74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb7c:	425a      	negs	r2, r3
 800bb7e:	415a      	adcs	r2, r3
 800bb80:	602a      	str	r2, [r5, #0]
 800bb82:	e7ee      	b.n	800bb62 <__swhatbuf_r+0x1e>
 800bb84:	2340      	movs	r3, #64	; 0x40
 800bb86:	2000      	movs	r0, #0
 800bb88:	6023      	str	r3, [r4, #0]
 800bb8a:	b016      	add	sp, #88	; 0x58
 800bb8c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb90 <__smakebuf_r>:
 800bb90:	898b      	ldrh	r3, [r1, #12]
 800bb92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb94:	079d      	lsls	r5, r3, #30
 800bb96:	4606      	mov	r6, r0
 800bb98:	460c      	mov	r4, r1
 800bb9a:	d507      	bpl.n	800bbac <__smakebuf_r+0x1c>
 800bb9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bba0:	6023      	str	r3, [r4, #0]
 800bba2:	6123      	str	r3, [r4, #16]
 800bba4:	2301      	movs	r3, #1
 800bba6:	6163      	str	r3, [r4, #20]
 800bba8:	b002      	add	sp, #8
 800bbaa:	bd70      	pop	{r4, r5, r6, pc}
 800bbac:	ab01      	add	r3, sp, #4
 800bbae:	466a      	mov	r2, sp
 800bbb0:	f7ff ffc8 	bl	800bb44 <__swhatbuf_r>
 800bbb4:	9900      	ldr	r1, [sp, #0]
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f7ff f957 	bl	800ae6c <_malloc_r>
 800bbbe:	b948      	cbnz	r0, 800bbd4 <__smakebuf_r+0x44>
 800bbc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbc4:	059a      	lsls	r2, r3, #22
 800bbc6:	d4ef      	bmi.n	800bba8 <__smakebuf_r+0x18>
 800bbc8:	f023 0303 	bic.w	r3, r3, #3
 800bbcc:	f043 0302 	orr.w	r3, r3, #2
 800bbd0:	81a3      	strh	r3, [r4, #12]
 800bbd2:	e7e3      	b.n	800bb9c <__smakebuf_r+0xc>
 800bbd4:	4b0d      	ldr	r3, [pc, #52]	; (800bc0c <__smakebuf_r+0x7c>)
 800bbd6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bbd8:	89a3      	ldrh	r3, [r4, #12]
 800bbda:	6020      	str	r0, [r4, #0]
 800bbdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbe0:	81a3      	strh	r3, [r4, #12]
 800bbe2:	9b00      	ldr	r3, [sp, #0]
 800bbe4:	6163      	str	r3, [r4, #20]
 800bbe6:	9b01      	ldr	r3, [sp, #4]
 800bbe8:	6120      	str	r0, [r4, #16]
 800bbea:	b15b      	cbz	r3, 800bc04 <__smakebuf_r+0x74>
 800bbec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	f000 f8d1 	bl	800bd98 <_isatty_r>
 800bbf6:	b128      	cbz	r0, 800bc04 <__smakebuf_r+0x74>
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	f023 0303 	bic.w	r3, r3, #3
 800bbfe:	f043 0301 	orr.w	r3, r3, #1
 800bc02:	81a3      	strh	r3, [r4, #12]
 800bc04:	89a0      	ldrh	r0, [r4, #12]
 800bc06:	4305      	orrs	r5, r0
 800bc08:	81a5      	strh	r5, [r4, #12]
 800bc0a:	e7cd      	b.n	800bba8 <__smakebuf_r+0x18>
 800bc0c:	0800b99d 	.word	0x0800b99d

0800bc10 <_malloc_usable_size_r>:
 800bc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc14:	1f18      	subs	r0, r3, #4
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	bfbc      	itt	lt
 800bc1a:	580b      	ldrlt	r3, [r1, r0]
 800bc1c:	18c0      	addlt	r0, r0, r3
 800bc1e:	4770      	bx	lr

0800bc20 <_raise_r>:
 800bc20:	291f      	cmp	r1, #31
 800bc22:	b538      	push	{r3, r4, r5, lr}
 800bc24:	4604      	mov	r4, r0
 800bc26:	460d      	mov	r5, r1
 800bc28:	d904      	bls.n	800bc34 <_raise_r+0x14>
 800bc2a:	2316      	movs	r3, #22
 800bc2c:	6003      	str	r3, [r0, #0]
 800bc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc32:	bd38      	pop	{r3, r4, r5, pc}
 800bc34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc36:	b112      	cbz	r2, 800bc3e <_raise_r+0x1e>
 800bc38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc3c:	b94b      	cbnz	r3, 800bc52 <_raise_r+0x32>
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f000 f830 	bl	800bca4 <_getpid_r>
 800bc44:	462a      	mov	r2, r5
 800bc46:	4601      	mov	r1, r0
 800bc48:	4620      	mov	r0, r4
 800bc4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc4e:	f000 b817 	b.w	800bc80 <_kill_r>
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d00a      	beq.n	800bc6c <_raise_r+0x4c>
 800bc56:	1c59      	adds	r1, r3, #1
 800bc58:	d103      	bne.n	800bc62 <_raise_r+0x42>
 800bc5a:	2316      	movs	r3, #22
 800bc5c:	6003      	str	r3, [r0, #0]
 800bc5e:	2001      	movs	r0, #1
 800bc60:	e7e7      	b.n	800bc32 <_raise_r+0x12>
 800bc62:	2400      	movs	r4, #0
 800bc64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc68:	4628      	mov	r0, r5
 800bc6a:	4798      	blx	r3
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	e7e0      	b.n	800bc32 <_raise_r+0x12>

0800bc70 <raise>:
 800bc70:	4b02      	ldr	r3, [pc, #8]	; (800bc7c <raise+0xc>)
 800bc72:	4601      	mov	r1, r0
 800bc74:	6818      	ldr	r0, [r3, #0]
 800bc76:	f7ff bfd3 	b.w	800bc20 <_raise_r>
 800bc7a:	bf00      	nop
 800bc7c:	20000024 	.word	0x20000024

0800bc80 <_kill_r>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	4d07      	ldr	r5, [pc, #28]	; (800bca0 <_kill_r+0x20>)
 800bc84:	2300      	movs	r3, #0
 800bc86:	4604      	mov	r4, r0
 800bc88:	4608      	mov	r0, r1
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	602b      	str	r3, [r5, #0]
 800bc8e:	f7f6 f8c3 	bl	8001e18 <_kill>
 800bc92:	1c43      	adds	r3, r0, #1
 800bc94:	d102      	bne.n	800bc9c <_kill_r+0x1c>
 800bc96:	682b      	ldr	r3, [r5, #0]
 800bc98:	b103      	cbz	r3, 800bc9c <_kill_r+0x1c>
 800bc9a:	6023      	str	r3, [r4, #0]
 800bc9c:	bd38      	pop	{r3, r4, r5, pc}
 800bc9e:	bf00      	nop
 800bca0:	200008e4 	.word	0x200008e4

0800bca4 <_getpid_r>:
 800bca4:	f7f6 b8b0 	b.w	8001e08 <_getpid>

0800bca8 <__sread>:
 800bca8:	b510      	push	{r4, lr}
 800bcaa:	460c      	mov	r4, r1
 800bcac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb0:	f000 f894 	bl	800bddc <_read_r>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	bfab      	itete	ge
 800bcb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcba:	89a3      	ldrhlt	r3, [r4, #12]
 800bcbc:	181b      	addge	r3, r3, r0
 800bcbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcc2:	bfac      	ite	ge
 800bcc4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcc6:	81a3      	strhlt	r3, [r4, #12]
 800bcc8:	bd10      	pop	{r4, pc}

0800bcca <__swrite>:
 800bcca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcce:	461f      	mov	r7, r3
 800bcd0:	898b      	ldrh	r3, [r1, #12]
 800bcd2:	05db      	lsls	r3, r3, #23
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	4616      	mov	r6, r2
 800bcda:	d505      	bpl.n	800bce8 <__swrite+0x1e>
 800bcdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bce0:	2302      	movs	r3, #2
 800bce2:	2200      	movs	r2, #0
 800bce4:	f000 f868 	bl	800bdb8 <_lseek_r>
 800bce8:	89a3      	ldrh	r3, [r4, #12]
 800bcea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcf2:	81a3      	strh	r3, [r4, #12]
 800bcf4:	4632      	mov	r2, r6
 800bcf6:	463b      	mov	r3, r7
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfe:	f000 b817 	b.w	800bd30 <_write_r>

0800bd02 <__sseek>:
 800bd02:	b510      	push	{r4, lr}
 800bd04:	460c      	mov	r4, r1
 800bd06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd0a:	f000 f855 	bl	800bdb8 <_lseek_r>
 800bd0e:	1c43      	adds	r3, r0, #1
 800bd10:	89a3      	ldrh	r3, [r4, #12]
 800bd12:	bf15      	itete	ne
 800bd14:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd1e:	81a3      	strheq	r3, [r4, #12]
 800bd20:	bf18      	it	ne
 800bd22:	81a3      	strhne	r3, [r4, #12]
 800bd24:	bd10      	pop	{r4, pc}

0800bd26 <__sclose>:
 800bd26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd2a:	f000 b813 	b.w	800bd54 <_close_r>
	...

0800bd30 <_write_r>:
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	4d07      	ldr	r5, [pc, #28]	; (800bd50 <_write_r+0x20>)
 800bd34:	4604      	mov	r4, r0
 800bd36:	4608      	mov	r0, r1
 800bd38:	4611      	mov	r1, r2
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	602a      	str	r2, [r5, #0]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	f7f6 f8a1 	bl	8001e86 <_write>
 800bd44:	1c43      	adds	r3, r0, #1
 800bd46:	d102      	bne.n	800bd4e <_write_r+0x1e>
 800bd48:	682b      	ldr	r3, [r5, #0]
 800bd4a:	b103      	cbz	r3, 800bd4e <_write_r+0x1e>
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
 800bd50:	200008e4 	.word	0x200008e4

0800bd54 <_close_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4d06      	ldr	r5, [pc, #24]	; (800bd70 <_close_r+0x1c>)
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	4608      	mov	r0, r1
 800bd5e:	602b      	str	r3, [r5, #0]
 800bd60:	f7f6 f8ad 	bl	8001ebe <_close>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_close_r+0x1a>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_close_r+0x1a>
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	200008e4 	.word	0x200008e4

0800bd74 <_fstat_r>:
 800bd74:	b538      	push	{r3, r4, r5, lr}
 800bd76:	4d07      	ldr	r5, [pc, #28]	; (800bd94 <_fstat_r+0x20>)
 800bd78:	2300      	movs	r3, #0
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	4608      	mov	r0, r1
 800bd7e:	4611      	mov	r1, r2
 800bd80:	602b      	str	r3, [r5, #0]
 800bd82:	f7f6 f8a8 	bl	8001ed6 <_fstat>
 800bd86:	1c43      	adds	r3, r0, #1
 800bd88:	d102      	bne.n	800bd90 <_fstat_r+0x1c>
 800bd8a:	682b      	ldr	r3, [r5, #0]
 800bd8c:	b103      	cbz	r3, 800bd90 <_fstat_r+0x1c>
 800bd8e:	6023      	str	r3, [r4, #0]
 800bd90:	bd38      	pop	{r3, r4, r5, pc}
 800bd92:	bf00      	nop
 800bd94:	200008e4 	.word	0x200008e4

0800bd98 <_isatty_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	4d06      	ldr	r5, [pc, #24]	; (800bdb4 <_isatty_r+0x1c>)
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	4604      	mov	r4, r0
 800bda0:	4608      	mov	r0, r1
 800bda2:	602b      	str	r3, [r5, #0]
 800bda4:	f7f6 f8a7 	bl	8001ef6 <_isatty>
 800bda8:	1c43      	adds	r3, r0, #1
 800bdaa:	d102      	bne.n	800bdb2 <_isatty_r+0x1a>
 800bdac:	682b      	ldr	r3, [r5, #0]
 800bdae:	b103      	cbz	r3, 800bdb2 <_isatty_r+0x1a>
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	bd38      	pop	{r3, r4, r5, pc}
 800bdb4:	200008e4 	.word	0x200008e4

0800bdb8 <_lseek_r>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	4d07      	ldr	r5, [pc, #28]	; (800bdd8 <_lseek_r+0x20>)
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	4608      	mov	r0, r1
 800bdc0:	4611      	mov	r1, r2
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	602a      	str	r2, [r5, #0]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	f7f6 f8a0 	bl	8001f0c <_lseek>
 800bdcc:	1c43      	adds	r3, r0, #1
 800bdce:	d102      	bne.n	800bdd6 <_lseek_r+0x1e>
 800bdd0:	682b      	ldr	r3, [r5, #0]
 800bdd2:	b103      	cbz	r3, 800bdd6 <_lseek_r+0x1e>
 800bdd4:	6023      	str	r3, [r4, #0]
 800bdd6:	bd38      	pop	{r3, r4, r5, pc}
 800bdd8:	200008e4 	.word	0x200008e4

0800bddc <_read_r>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	4d07      	ldr	r5, [pc, #28]	; (800bdfc <_read_r+0x20>)
 800bde0:	4604      	mov	r4, r0
 800bde2:	4608      	mov	r0, r1
 800bde4:	4611      	mov	r1, r2
 800bde6:	2200      	movs	r2, #0
 800bde8:	602a      	str	r2, [r5, #0]
 800bdea:	461a      	mov	r2, r3
 800bdec:	f7f6 f82e 	bl	8001e4c <_read>
 800bdf0:	1c43      	adds	r3, r0, #1
 800bdf2:	d102      	bne.n	800bdfa <_read_r+0x1e>
 800bdf4:	682b      	ldr	r3, [r5, #0]
 800bdf6:	b103      	cbz	r3, 800bdfa <_read_r+0x1e>
 800bdf8:	6023      	str	r3, [r4, #0]
 800bdfa:	bd38      	pop	{r3, r4, r5, pc}
 800bdfc:	200008e4 	.word	0x200008e4

0800be00 <_init>:
 800be00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be02:	bf00      	nop
 800be04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be06:	bc08      	pop	{r3}
 800be08:	469e      	mov	lr, r3
 800be0a:	4770      	bx	lr

0800be0c <_fini>:
 800be0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0e:	bf00      	nop
 800be10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be12:	bc08      	pop	{r3}
 800be14:	469e      	mov	lr, r3
 800be16:	4770      	bx	lr
>>>>>>> Stashed changes
