
Balloon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b648  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800b848  0800b848  0001b848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd5c  0800bd5c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd5c  0800bd5c  0001bd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd64  0800bd64  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd64  0800bd64  0001bd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd68  0800bd68  0001bd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800bd6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  200001f8  0800bf64  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800bf64  000206fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017058  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003594  00000000  00000000  0003727e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0003a818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0003bb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002adbe  00000000  00000000  0003ccb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a00a  00000000  00000000  00067a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001052fd  00000000  00000000  00081a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00186d75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b8  00000000  00000000  00186dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b830 	.word	0x0800b830

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800b830 	.word	0x0800b830

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ee:	4b3e      	ldr	r3, [pc, #248]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 80009f0:	4a3e      	ldr	r2, [pc, #248]	; (8000aec <MX_ADC1_Init+0x110>)
 80009f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009f4:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a00:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a06:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0c:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000a1c:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a1e:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a2c:	2205      	movs	r2, #5
 8000a2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a30:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a38:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3e:	482a      	ldr	r0, [pc, #168]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a40:	f001 fd56 	bl	80024f0 <HAL_ADC_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000a4a:	f001 f895 	bl	8001b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_ADC1_Init+0x114>)
 8000a50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a60:	f001 fd8a 	bl	8002578 <HAL_ADC_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a6a:	f001 f885 	bl	8001b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a7c:	f001 fd7c 	bl	8002578 <HAL_ADC_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000a86:	f001 f877 	bl	8001b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a98:	f001 fd6e 	bl	8002578 <HAL_ADC_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000aa2:	f001 f869 	bl	8001b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aae:	463b      	mov	r3, r7
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000ab4:	f001 fd60 	bl	8002578 <HAL_ADC_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000abe:	f001 f85b 	bl	8001b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ac2:	230d      	movs	r3, #13
 8000ac4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aca:	463b      	mov	r3, r7
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000ad0:	f001 fd52 	bl	8002578 <HAL_ADC_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000ada:	f001 f84d 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000214 	.word	0x20000214
 8000aec:	40012000 	.word	0x40012000
 8000af0:	10000012 	.word	0x10000012

08000af4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a39      	ldr	r2, [pc, #228]	; (8000bf8 <HAL_ADC_MspInit+0x104>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d16b      	bne.n	8000bee <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b16:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a38      	ldr	r2, [pc, #224]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a32      	ldr	r2, [pc, #200]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a2c      	ldr	r2, [pc, #176]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000b5e:	2309      	movs	r3, #9
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b62:	2303      	movs	r3, #3
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4823      	ldr	r0, [pc, #140]	; (8000c00 <HAL_ADC_MspInit+0x10c>)
 8000b72:	f002 fbdf 	bl	8003334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000b76:	2309      	movs	r3, #9
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	481e      	ldr	r0, [pc, #120]	; (8000c04 <HAL_ADC_MspInit+0x110>)
 8000b8a:	f002 fbd3 	bl	8003334 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000b90:	4a1e      	ldr	r2, [pc, #120]	; (8000c0c <HAL_ADC_MspInit+0x118>)
 8000b92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bc4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bd4:	f002 f832 	bl	8002c3c <HAL_DMA_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8000bde:	f000 ffcb 	bl	8001b78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000be6:	639a      	str	r2, [r3, #56]	; 0x38
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40012000 	.word	0x40012000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	2000025c 	.word	0x2000025c
 8000c0c:	40026410 	.word	0x40026410

08000c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2038      	movs	r0, #56	; 0x38
 8000c34:	f001 ffcb 	bl	8002bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c38:	2038      	movs	r0, #56	; 0x38
 8000c3a:	f001 ffe4 	bl	8002c06 <HAL_NVIC_EnableIRQ>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c56:	4804      	ldr	r0, [pc, #16]	; (8000c68 <SELECT+0x1c>)
 8000c58:	f002 fd18 	bl	800368c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f001 fc23 	bl	80024a8 <HAL_Delay>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <DESELECT+0x1c>)
 8000c78:	f002 fd08 	bl	800368c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f001 fc13 	bl	80024a8 <HAL_Delay>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40020c00 	.word	0x40020c00

08000c8c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c96:	bf00      	nop
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <SPI_TxByte+0x30>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d1f8      	bne.n	8000c98 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000ca6:	1df9      	adds	r1, r7, #7
 8000ca8:	2364      	movs	r3, #100	; 0x64
 8000caa:	2201      	movs	r2, #1
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <SPI_TxByte+0x30>)
 8000cae:	f003 fede 	bl	8004a6e <HAL_SPI_Transmit>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000031c 	.word	0x2000031c

08000cc0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ccc:	bf00      	nop
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <SPI_TxBuffer+0x30>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d1f8      	bne.n	8000cce <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000cdc:	887a      	ldrh	r2, [r7, #2]
 8000cde:	2364      	movs	r3, #100	; 0x64
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <SPI_TxBuffer+0x30>)
 8000ce4:	f003 fec3 	bl	8004a6e <HAL_SPI_Transmit>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000031c 	.word	0x2000031c

08000cf4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000cfa:	23ff      	movs	r3, #255	; 0xff
 8000cfc:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000cfe:	bf00      	nop
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <SPI_RxByte+0x34>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d1f8      	bne.n	8000d00 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000d0e:	1dba      	adds	r2, r7, #6
 8000d10:	1df9      	adds	r1, r7, #7
 8000d12:	2364      	movs	r3, #100	; 0x64
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2301      	movs	r3, #1
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <SPI_RxByte+0x34>)
 8000d1a:	f004 f816 	bl	8004d4a <HAL_SPI_TransmitReceive>

	return data;
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2000031c 	.word	0x2000031c

08000d2c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000d34:	f7ff ffde 	bl	8000cf4 <SPI_RxByte>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	701a      	strb	r2, [r3, #0]
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <SD_ReadyWait+0x30>)
 8000d50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d54:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000d56:	f7ff ffcd 	bl	8000cf4 <SPI_RxByte>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2bff      	cmp	r3, #255	; 0xff
 8000d62:	d003      	beq.n	8000d6c <SD_ReadyWait+0x24>
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SD_ReadyWait+0x30>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f4      	bne.n	8000d56 <SD_ReadyWait+0xe>

	return res;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200003e8 	.word	0x200003e8

08000d7c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000d82:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d86:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000d88:	f7ff ff70 	bl	8000c6c <DESELECT>
	for(int i = 0; i < 10; i++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	e005      	b.n	8000d9e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000d92:	20ff      	movs	r0, #255	; 0xff
 8000d94:	f7ff ff7a 	bl	8000c8c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	2b09      	cmp	r3, #9
 8000da2:	ddf6      	ble.n	8000d92 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000da4:	f7ff ff52 	bl	8000c4c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000da8:	2340      	movs	r3, #64	; 0x40
 8000daa:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000dbc:	2395      	movs	r3, #149	; 0x95
 8000dbe:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2106      	movs	r1, #6
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff7b 	bl	8000cc0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000dca:	e002      	b.n	8000dd2 <SD_PowerOn+0x56>
	{
		cnt--;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000dd2:	f7ff ff8f 	bl	8000cf4 <SPI_RxByte>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d002      	beq.n	8000de2 <SD_PowerOn+0x66>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f4      	bne.n	8000dcc <SD_PowerOn+0x50>
	}

	DESELECT();
 8000de2:	f7ff ff43 	bl	8000c6c <DESELECT>
	SPI_TxByte(0XFF);
 8000de6:	20ff      	movs	r0, #255	; 0xff
 8000de8:	f7ff ff50 	bl	8000c8c <SPI_TxByte>

	PowerFlag = 1;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <SD_PowerOn+0x80>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200002bd 	.word	0x200002bd

08000e00 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <SD_PowerOff+0x14>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	200002bd 	.word	0x200002bd

08000e18 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <SD_CheckPower+0x14>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	200002bd 	.word	0x200002bd

08000e30 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <SD_RxDataBlock+0x58>)
 8000e3c:	22c8      	movs	r2, #200	; 0xc8
 8000e3e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000e40:	f7ff ff58 	bl	8000cf4 <SPI_RxByte>
 8000e44:	4603      	mov	r3, r0
 8000e46:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	2bff      	cmp	r3, #255	; 0xff
 8000e4c:	d103      	bne.n	8000e56 <SD_RxDataBlock+0x26>
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <SD_RxDataBlock+0x58>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f4      	bne.n	8000e40 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	2bfe      	cmp	r3, #254	; 0xfe
 8000e5a:	d001      	beq.n	8000e60 <SD_RxDataBlock+0x30>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e00f      	b.n	8000e80 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff60 	bl	8000d2c <SPI_RxBytePtr>
	} while(len--);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	1e5a      	subs	r2, r3, #1
 8000e70:	603a      	str	r2, [r7, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f4      	bne.n	8000e60 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000e76:	f7ff ff3d 	bl	8000cf4 <SPI_RxByte>
	SPI_RxByte();
 8000e7a:	f7ff ff3b 	bl	8000cf4 <SPI_RxByte>

	return TRUE;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200003e6 	.word	0x200003e6

08000e8c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000e9c:	f7ff ff54 	bl	8000d48 <SD_ReadyWait>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2bff      	cmp	r3, #255	; 0xff
 8000ea4:	d001      	beq.n	8000eaa <SD_TxDataBlock+0x1e>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e02f      	b.n	8000f0a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff feed 	bl	8000c8c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	2bfd      	cmp	r3, #253	; 0xfd
 8000eb6:	d020      	beq.n	8000efa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff feff 	bl	8000cc0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000ec2:	f7ff ff17 	bl	8000cf4 <SPI_RxByte>
		SPI_RxByte();
 8000ec6:	f7ff ff15 	bl	8000cf4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000eca:	e00b      	b.n	8000ee4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000ecc:	f7ff ff12 	bl	8000cf4 <SPI_RxByte>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	2b05      	cmp	r3, #5
 8000edc:	d006      	beq.n	8000eec <SD_TxDataBlock+0x60>
			i++;
 8000ede:	7bbb      	ldrb	r3, [r7, #14]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	2b40      	cmp	r3, #64	; 0x40
 8000ee8:	d9f0      	bls.n	8000ecc <SD_TxDataBlock+0x40>
 8000eea:	e000      	b.n	8000eee <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000eec:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000eee:	bf00      	nop
 8000ef0:	f7ff ff00 	bl	8000cf4 <SPI_RxByte>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0fa      	beq.n	8000ef0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	f003 031f 	and.w	r3, r3, #31
 8000f00:	2b05      	cmp	r3, #5
 8000f02:	d101      	bne.n	8000f08 <SD_TxDataBlock+0x7c>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <SD_TxDataBlock+0x7e>

	return FALSE;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	6039      	str	r1, [r7, #0]
 8000f1c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000f1e:	f7ff ff13 	bl	8000d48 <SD_ReadyWait>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2bff      	cmp	r3, #255	; 0xff
 8000f26:	d001      	beq.n	8000f2c <SD_SendCmd+0x1a>
 8000f28:	23ff      	movs	r3, #255	; 0xff
 8000f2a:	e042      	b.n	8000fb2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff feac 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	0e1b      	lsrs	r3, r3, #24
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fea6 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	0c1b      	lsrs	r3, r3, #16
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fea0 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fe9a 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fe95 	bl	8000c8c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b40      	cmp	r3, #64	; 0x40
 8000f66:	d102      	bne.n	8000f6e <SD_SendCmd+0x5c>
 8000f68:	2395      	movs	r3, #149	; 0x95
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	e007      	b.n	8000f7e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b48      	cmp	r3, #72	; 0x48
 8000f72:	d102      	bne.n	8000f7a <SD_SendCmd+0x68>
 8000f74:	2387      	movs	r3, #135	; 0x87
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e001      	b.n	8000f7e <SD_SendCmd+0x6c>
	else crc = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fe83 	bl	8000c8c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b4c      	cmp	r3, #76	; 0x4c
 8000f8a:	d101      	bne.n	8000f90 <SD_SendCmd+0x7e>
 8000f8c:	f7ff feb2 	bl	8000cf4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000f90:	230a      	movs	r3, #10
 8000f92:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000f94:	f7ff feae 	bl	8000cf4 <SPI_RxByte>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000f9c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	da05      	bge.n	8000fb0 <SD_SendCmd+0x9e>
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	73bb      	strb	r3, [r7, #14]
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f1      	bne.n	8000f94 <SD_SendCmd+0x82>

	return res;
 8000fb0:	7b7b      	ldrb	r3, [r7, #13]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SD_disk_initialize+0x14>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e0d1      	b.n	8001174 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000fd0:	4b6a      	ldr	r3, [pc, #424]	; (800117c <SD_disk_initialize+0x1c0>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <SD_disk_initialize+0x2a>
 8000fde:	4b67      	ldr	r3, [pc, #412]	; (800117c <SD_disk_initialize+0x1c0>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	e0c6      	b.n	8001174 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000fe6:	f7ff fec9 	bl	8000d7c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000fea:	f7ff fe2f 	bl	8000c4c <SELECT>

	/* check disk type */
	type = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2040      	movs	r0, #64	; 0x40
 8000ff6:	f7ff ff8c 	bl	8000f12 <SD_SendCmd>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	f040 80a1 	bne.w	8001144 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001002:	4b5f      	ldr	r3, [pc, #380]	; (8001180 <SD_disk_initialize+0x1c4>)
 8001004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001008:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800100a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800100e:	2048      	movs	r0, #72	; 0x48
 8001010:	f7ff ff7f 	bl	8000f12 <SD_SendCmd>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d155      	bne.n	80010c6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e00c      	b.n	800103a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001020:	7bfc      	ldrb	r4, [r7, #15]
 8001022:	f7ff fe67 	bl	8000cf4 <SPI_RxByte>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	f104 0310 	add.w	r3, r4, #16
 800102e:	443b      	add	r3, r7
 8001030:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	3301      	adds	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b03      	cmp	r3, #3
 800103e:	d9ef      	bls.n	8001020 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001040:	7abb      	ldrb	r3, [r7, #10]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d17e      	bne.n	8001144 <SD_disk_initialize+0x188>
 8001046:	7afb      	ldrb	r3, [r7, #11]
 8001048:	2baa      	cmp	r3, #170	; 0xaa
 800104a:	d17b      	bne.n	8001144 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800104c:	2100      	movs	r1, #0
 800104e:	2077      	movs	r0, #119	; 0x77
 8001050:	f7ff ff5f 	bl	8000f12 <SD_SendCmd>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d807      	bhi.n	800106a <SD_disk_initialize+0xae>
 800105a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800105e:	2069      	movs	r0, #105	; 0x69
 8001060:	f7ff ff57 	bl	8000f12 <SD_SendCmd>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800106a:	4b45      	ldr	r3, [pc, #276]	; (8001180 <SD_disk_initialize+0x1c4>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1ec      	bne.n	800104c <SD_disk_initialize+0x90>
 8001072:	e000      	b.n	8001076 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001074:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001076:	4b42      	ldr	r3, [pc, #264]	; (8001180 <SD_disk_initialize+0x1c4>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d062      	beq.n	8001144 <SD_disk_initialize+0x188>
 800107e:	2100      	movs	r1, #0
 8001080:	207a      	movs	r0, #122	; 0x7a
 8001082:	f7ff ff46 	bl	8000f12 <SD_SendCmd>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d15b      	bne.n	8001144 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e00c      	b.n	80010ac <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001092:	7bfc      	ldrb	r4, [r7, #15]
 8001094:	f7ff fe2e 	bl	8000cf4 <SPI_RxByte>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	f104 0310 	add.w	r3, r4, #16
 80010a0:	443b      	add	r3, r7
 80010a2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	3301      	adds	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d9ef      	bls.n	8001092 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80010b2:	7a3b      	ldrb	r3, [r7, #8]
 80010b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SD_disk_initialize+0x104>
 80010bc:	230c      	movs	r3, #12
 80010be:	e000      	b.n	80010c2 <SD_disk_initialize+0x106>
 80010c0:	2304      	movs	r3, #4
 80010c2:	73bb      	strb	r3, [r7, #14]
 80010c4:	e03e      	b.n	8001144 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80010c6:	2100      	movs	r1, #0
 80010c8:	2077      	movs	r0, #119	; 0x77
 80010ca:	f7ff ff22 	bl	8000f12 <SD_SendCmd>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d808      	bhi.n	80010e6 <SD_disk_initialize+0x12a>
 80010d4:	2100      	movs	r1, #0
 80010d6:	2069      	movs	r0, #105	; 0x69
 80010d8:	f7ff ff1b 	bl	8000f12 <SD_SendCmd>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d801      	bhi.n	80010e6 <SD_disk_initialize+0x12a>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e000      	b.n	80010e8 <SD_disk_initialize+0x12c>
 80010e6:	2301      	movs	r3, #1
 80010e8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80010ea:	7bbb      	ldrb	r3, [r7, #14]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d10e      	bne.n	800110e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80010f0:	2100      	movs	r1, #0
 80010f2:	2077      	movs	r0, #119	; 0x77
 80010f4:	f7ff ff0d 	bl	8000f12 <SD_SendCmd>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d80e      	bhi.n	800111c <SD_disk_initialize+0x160>
 80010fe:	2100      	movs	r1, #0
 8001100:	2069      	movs	r0, #105	; 0x69
 8001102:	f7ff ff06 	bl	8000f12 <SD_SendCmd>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d107      	bne.n	800111c <SD_disk_initialize+0x160>
 800110c:	e00c      	b.n	8001128 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800110e:	2100      	movs	r1, #0
 8001110:	2041      	movs	r0, #65	; 0x41
 8001112:	f7ff fefe 	bl	8000f12 <SD_SendCmd>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <SD_disk_initialize+0x1c4>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e2      	bne.n	80010ea <SD_disk_initialize+0x12e>
 8001124:	e000      	b.n	8001128 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001126:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <SD_disk_initialize+0x1c4>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d007      	beq.n	8001140 <SD_disk_initialize+0x184>
 8001130:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001134:	2050      	movs	r0, #80	; 0x50
 8001136:	f7ff feec 	bl	8000f12 <SD_SendCmd>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SD_disk_initialize+0x188>
 8001140:	2300      	movs	r3, #0
 8001142:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001144:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <SD_disk_initialize+0x1c8>)
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800114a:	f7ff fd8f 	bl	8000c6c <DESELECT>
	SPI_RxByte();
 800114e:	f7ff fdd1 	bl	8000cf4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001152:	7bbb      	ldrb	r3, [r7, #14]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d008      	beq.n	800116a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <SD_disk_initialize+0x1c0>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SD_disk_initialize+0x1c0>)
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e001      	b.n	800116e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800116a:	f7ff fe49 	bl	8000e00 <SD_PowerOff>
	}

	return Stat;
 800116e:	4b03      	ldr	r3, [pc, #12]	; (800117c <SD_disk_initialize+0x1c0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bd90      	pop	{r4, r7, pc}
 800117c:	20000000 	.word	0x20000000
 8001180:	200003e6 	.word	0x200003e6
 8001184:	200002bc 	.word	0x200002bc

08001188 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SD_disk_status+0x14>
 8001198:	2301      	movs	r3, #1
 800119a:	e002      	b.n	80011a2 <SD_disk_status+0x1a>
	return Stat;
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <SD_disk_status+0x28>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000000 	.word	0x20000000

080011b4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d102      	bne.n	80011d0 <SD_disk_read+0x1c>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <SD_disk_read+0x20>
 80011d0:	2304      	movs	r3, #4
 80011d2:	e051      	b.n	8001278 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <SD_disk_read+0xcc>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SD_disk_read+0x32>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e048      	b.n	8001278 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80011e6:	4b27      	ldr	r3, [pc, #156]	; (8001284 <SD_disk_read+0xd0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <SD_disk_read+0x44>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	025b      	lsls	r3, r3, #9
 80011f6:	607b      	str	r3, [r7, #4]

	SELECT();
 80011f8:	f7ff fd28 	bl	8000c4c <SELECT>

	if (count == 1)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d111      	bne.n	8001226 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	2051      	movs	r0, #81	; 0x51
 8001206:	f7ff fe84 	bl	8000f12 <SD_SendCmd>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d129      	bne.n	8001264 <SD_disk_read+0xb0>
 8001210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001214:	68b8      	ldr	r0, [r7, #8]
 8001216:	f7ff fe0b 	bl	8000e30 <SD_RxDataBlock>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d021      	beq.n	8001264 <SD_disk_read+0xb0>
 8001220:	2300      	movs	r3, #0
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	e01e      	b.n	8001264 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	2052      	movs	r0, #82	; 0x52
 800122a:	f7ff fe72 	bl	8000f12 <SD_SendCmd>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d117      	bne.n	8001264 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001234:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001238:	68b8      	ldr	r0, [r7, #8]
 800123a:	f7ff fdf9 	bl	8000e30 <SD_RxDataBlock>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00a      	beq.n	800125a <SD_disk_read+0xa6>
				buff += 512;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800124a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	3b01      	subs	r3, #1
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1ed      	bne.n	8001234 <SD_disk_read+0x80>
 8001258:	e000      	b.n	800125c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800125a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800125c:	2100      	movs	r1, #0
 800125e:	204c      	movs	r0, #76	; 0x4c
 8001260:	f7ff fe57 	bl	8000f12 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001264:	f7ff fd02 	bl	8000c6c <DESELECT>
	SPI_RxByte();
 8001268:	f7ff fd44 	bl	8000cf4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	bf14      	ite	ne
 8001272:	2301      	movne	r3, #1
 8001274:	2300      	moveq	r3, #0
 8001276:	b2db      	uxtb	r3, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000000 	.word	0x20000000
 8001284:	200002bc 	.word	0x200002bc

08001288 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <SD_disk_write+0x1c>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <SD_disk_write+0x20>
 80012a4:	2304      	movs	r3, #4
 80012a6:	e06b      	b.n	8001380 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012a8:	4b37      	ldr	r3, [pc, #220]	; (8001388 <SD_disk_write+0x100>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SD_disk_write+0x32>
 80012b6:	2303      	movs	r3, #3
 80012b8:	e062      	b.n	8001380 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80012ba:	4b33      	ldr	r3, [pc, #204]	; (8001388 <SD_disk_write+0x100>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SD_disk_write+0x44>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e059      	b.n	8001380 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <SD_disk_write+0x104>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <SD_disk_write+0x56>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	025b      	lsls	r3, r3, #9
 80012dc:	607b      	str	r3, [r7, #4]

	SELECT();
 80012de:	f7ff fcb5 	bl	8000c4c <SELECT>

	if (count == 1)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d110      	bne.n	800130a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	2058      	movs	r0, #88	; 0x58
 80012ec:	f7ff fe11 	bl	8000f12 <SD_SendCmd>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d13a      	bne.n	800136c <SD_disk_write+0xe4>
 80012f6:	21fe      	movs	r1, #254	; 0xfe
 80012f8:	68b8      	ldr	r0, [r7, #8]
 80012fa:	f7ff fdc7 	bl	8000e8c <SD_TxDataBlock>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d033      	beq.n	800136c <SD_disk_write+0xe4>
			count = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	e030      	b.n	800136c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <SD_disk_write+0x104>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001316:	2100      	movs	r1, #0
 8001318:	2077      	movs	r0, #119	; 0x77
 800131a:	f7ff fdfa 	bl	8000f12 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	2057      	movs	r0, #87	; 0x57
 8001322:	f7ff fdf6 	bl	8000f12 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	2059      	movs	r0, #89	; 0x59
 800132a:	f7ff fdf2 	bl	8000f12 <SD_SendCmd>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d11b      	bne.n	800136c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001334:	21fc      	movs	r1, #252	; 0xfc
 8001336:	68b8      	ldr	r0, [r7, #8]
 8001338:	f7ff fda8 	bl	8000e8c <SD_TxDataBlock>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00a      	beq.n	8001358 <SD_disk_write+0xd0>
				buff += 512;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001348:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1ee      	bne.n	8001334 <SD_disk_write+0xac>
 8001356:	e000      	b.n	800135a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001358:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800135a:	21fd      	movs	r1, #253	; 0xfd
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff fd95 	bl	8000e8c <SD_TxDataBlock>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <SD_disk_write+0xe4>
			{
				count = 1;
 8001368:	2301      	movs	r3, #1
 800136a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800136c:	f7ff fc7e 	bl	8000c6c <DESELECT>
	SPI_RxByte();
 8001370:	f7ff fcc0 	bl	8000cf4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf14      	ite	ne
 800137a:	2301      	movne	r3, #1
 800137c:	2300      	moveq	r3, #0
 800137e:	b2db      	uxtb	r3, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000000 	.word	0x20000000
 800138c:	200002bc 	.word	0x200002bc

08001390 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b08b      	sub	sp, #44	; 0x2c
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	603a      	str	r2, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	460b      	mov	r3, r1
 800139e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SD_disk_ioctl+0x1e>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e115      	b.n	80015da <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	d124      	bne.n	8001404 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d012      	beq.n	80013e8 <SD_disk_ioctl+0x58>
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	dc1a      	bgt.n	80013fc <SD_disk_ioctl+0x6c>
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <SD_disk_ioctl+0x40>
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d006      	beq.n	80013dc <SD_disk_ioctl+0x4c>
 80013ce:	e015      	b.n	80013fc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80013d0:	f7ff fd16 	bl	8000e00 <SD_PowerOff>
			res = RES_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013da:	e0fc      	b.n	80015d6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80013dc:	f7ff fcce 	bl	8000d7c <SD_PowerOn>
			res = RES_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013e6:	e0f6      	b.n	80015d6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	1c5c      	adds	r4, r3, #1
 80013ec:	f7ff fd14 	bl	8000e18 <SD_CheckPower>
 80013f0:	4603      	mov	r3, r0
 80013f2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013fa:	e0ec      	b.n	80015d6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80013fc:	2304      	movs	r3, #4
 80013fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001402:	e0e8      	b.n	80015d6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001404:	4b77      	ldr	r3, [pc, #476]	; (80015e4 <SD_disk_ioctl+0x254>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SD_disk_ioctl+0x86>
 8001412:	2303      	movs	r3, #3
 8001414:	e0e1      	b.n	80015da <SD_disk_ioctl+0x24a>

		SELECT();
 8001416:	f7ff fc19 	bl	8000c4c <SELECT>

		switch (ctrl)
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	2b0d      	cmp	r3, #13
 800141e:	f200 80cb 	bhi.w	80015b8 <SD_disk_ioctl+0x228>
 8001422:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <SD_disk_ioctl+0x98>)
 8001424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001428:	08001523 	.word	0x08001523
 800142c:	08001461 	.word	0x08001461
 8001430:	08001513 	.word	0x08001513
 8001434:	080015b9 	.word	0x080015b9
 8001438:	080015b9 	.word	0x080015b9
 800143c:	080015b9 	.word	0x080015b9
 8001440:	080015b9 	.word	0x080015b9
 8001444:	080015b9 	.word	0x080015b9
 8001448:	080015b9 	.word	0x080015b9
 800144c:	080015b9 	.word	0x080015b9
 8001450:	080015b9 	.word	0x080015b9
 8001454:	08001535 	.word	0x08001535
 8001458:	08001559 	.word	0x08001559
 800145c:	0800157d 	.word	0x0800157d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001460:	2100      	movs	r1, #0
 8001462:	2049      	movs	r0, #73	; 0x49
 8001464:	f7ff fd55 	bl	8000f12 <SD_SendCmd>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	f040 80a8 	bne.w	80015c0 <SD_disk_ioctl+0x230>
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	2110      	movs	r1, #16
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fcda 	bl	8000e30 <SD_RxDataBlock>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 809e 	beq.w	80015c0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	099b      	lsrs	r3, r3, #6
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d10e      	bne.n	80014ac <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800148e:	7d7b      	ldrb	r3, [r7, #21]
 8001490:	b29a      	uxth	r2, r3
 8001492:	7d3b      	ldrb	r3, [r7, #20]
 8001494:	b29b      	uxth	r3, r3
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	4413      	add	r3, r2
 800149c:	b29b      	uxth	r3, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80014a2:	8bfb      	ldrh	r3, [r7, #30]
 80014a4:	029a      	lsls	r2, r3, #10
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	e02e      	b.n	800150a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80014ac:	7c7b      	ldrb	r3, [r7, #17]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	7dbb      	ldrb	r3, [r7, #22]
 80014b6:	09db      	lsrs	r3, r3, #7
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	7d7b      	ldrb	r3, [r7, #21]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f003 0306 	and.w	r3, r3, #6
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	3302      	adds	r3, #2
 80014d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80014d4:	7d3b      	ldrb	r3, [r7, #20]
 80014d6:	099b      	lsrs	r3, r3, #6
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	b29a      	uxth	r2, r3
 80014dc:	7cfb      	ldrb	r3, [r7, #19]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	7cbb      	ldrb	r3, [r7, #18]
 80014ea:	029b      	lsls	r3, r3, #10
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	4413      	add	r3, r2
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80014fc:	8bfa      	ldrh	r2, [r7, #30]
 80014fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001502:	3b09      	subs	r3, #9
 8001504:	409a      	lsls	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001510:	e056      	b.n	80015c0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001518:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001520:	e055      	b.n	80015ce <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001522:	f7ff fc11 	bl	8000d48 <SD_ReadyWait>
 8001526:	4603      	mov	r3, r0
 8001528:	2bff      	cmp	r3, #255	; 0xff
 800152a:	d14b      	bne.n	80015c4 <SD_disk_ioctl+0x234>
 800152c:	2300      	movs	r3, #0
 800152e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001532:	e047      	b.n	80015c4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001534:	2100      	movs	r1, #0
 8001536:	2049      	movs	r0, #73	; 0x49
 8001538:	f7ff fceb 	bl	8000f12 <SD_SendCmd>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d142      	bne.n	80015c8 <SD_disk_ioctl+0x238>
 8001542:	2110      	movs	r1, #16
 8001544:	6a38      	ldr	r0, [r7, #32]
 8001546:	f7ff fc73 	bl	8000e30 <SD_RxDataBlock>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d03b      	beq.n	80015c8 <SD_disk_ioctl+0x238>
 8001550:	2300      	movs	r3, #0
 8001552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001556:	e037      	b.n	80015c8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001558:	2100      	movs	r1, #0
 800155a:	204a      	movs	r0, #74	; 0x4a
 800155c:	f7ff fcd9 	bl	8000f12 <SD_SendCmd>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d132      	bne.n	80015cc <SD_disk_ioctl+0x23c>
 8001566:	2110      	movs	r1, #16
 8001568:	6a38      	ldr	r0, [r7, #32]
 800156a:	f7ff fc61 	bl	8000e30 <SD_RxDataBlock>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d02b      	beq.n	80015cc <SD_disk_ioctl+0x23c>
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800157a:	e027      	b.n	80015cc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800157c:	2100      	movs	r1, #0
 800157e:	207a      	movs	r0, #122	; 0x7a
 8001580:	f7ff fcc7 	bl	8000f12 <SD_SendCmd>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d116      	bne.n	80015b8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800158a:	2300      	movs	r3, #0
 800158c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001590:	e00b      	b.n	80015aa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001592:	6a3c      	ldr	r4, [r7, #32]
 8001594:	1c63      	adds	r3, r4, #1
 8001596:	623b      	str	r3, [r7, #32]
 8001598:	f7ff fbac 	bl	8000cf4 <SPI_RxByte>
 800159c:	4603      	mov	r3, r0
 800159e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80015a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015a4:	3301      	adds	r3, #1
 80015a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d9ef      	bls.n	8001592 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80015b8:	2304      	movs	r3, #4
 80015ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015be:	e006      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015c0:	bf00      	nop
 80015c2:	e004      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015c4:	bf00      	nop
 80015c6:	e002      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015c8:	bf00      	nop
 80015ca:	e000      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015cc:	bf00      	nop
		}

		DESELECT();
 80015ce:	f7ff fb4d 	bl	8000c6c <DESELECT>
		SPI_RxByte();
 80015d2:	f7ff fb8f 	bl	8000cf4 <SPI_RxByte>
	}

	return res;
 80015d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015da:	4618      	mov	r0, r3
 80015dc:	372c      	adds	r7, #44	; 0x2c
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd90      	pop	{r4, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000000 	.word	0x20000000

080015e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	; 0x30
 80015ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fe:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a67      	ldr	r2, [pc, #412]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b65      	ldr	r3, [pc, #404]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a61      	ldr	r2, [pc, #388]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800162e:	4b5c      	ldr	r3, [pc, #368]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a5b      	ldr	r2, [pc, #364]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 8001634:	f043 0320 	orr.w	r3, r3, #32
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0320 	and.w	r3, r3, #32
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001646:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a55      	ldr	r2, [pc, #340]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b50      	ldr	r3, [pc, #320]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a4f      	ldr	r2, [pc, #316]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b4d      	ldr	r3, [pc, #308]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	4b4a      	ldr	r3, [pc, #296]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a49      	ldr	r2, [pc, #292]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168e:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a43      	ldr	r2, [pc, #268]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 8001694:	f043 0308 	orr.w	r3, r3, #8
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <MX_GPIO_Init+0x1b8>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2110      	movs	r1, #16
 80016aa:	483e      	ldr	r0, [pc, #248]	; (80017a4 <MX_GPIO_Init+0x1bc>)
 80016ac:	f001 ffee 	bl	800368c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2110      	movs	r1, #16
 80016b4:	483c      	ldr	r0, [pc, #240]	; (80017a8 <MX_GPIO_Init+0x1c0>)
 80016b6:	f001 ffe9 	bl	800368c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2104      	movs	r1, #4
 80016be:	483b      	ldr	r0, [pc, #236]	; (80017ac <MX_GPIO_Init+0x1c4>)
 80016c0:	f001 ffe4 	bl	800368c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|LD3_Pin|GPIO_PIN_6
 80016c4:	2200      	movs	r2, #0
 80016c6:	f244 01c3 	movw	r1, #16579	; 0x40c3
 80016ca:	4839      	ldr	r0, [pc, #228]	; (80017b0 <MX_GPIO_Init+0x1c8>)
 80016cc:	f001 ffde 	bl	800368c <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d6:	4837      	ldr	r0, [pc, #220]	; (80017b4 <MX_GPIO_Init+0x1cc>)
 80016d8:	f001 ffd8 	bl	800368c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80016dc:	2310      	movs	r3, #16
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	4619      	mov	r1, r3
 80016f2:	482c      	ldr	r0, [pc, #176]	; (80017a4 <MX_GPIO_Init+0x1bc>)
 80016f4:	f001 fe1e 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	4827      	ldr	r0, [pc, #156]	; (80017ac <MX_GPIO_Init+0x1c4>)
 8001710:	f001 fe10 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001714:	2310      	movs	r3, #16
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	481f      	ldr	r0, [pc, #124]	; (80017a8 <MX_GPIO_Init+0x1c0>)
 800172c:	f001 fe02 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001730:	2304      	movs	r3, #4
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4619      	mov	r1, r3
 8001746:	4819      	ldr	r0, [pc, #100]	; (80017ac <MX_GPIO_Init+0x1c4>)
 8001748:	f001 fdf4 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB1 PBPin PB6
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_1|LD3_Pin|GPIO_PIN_6
 800174c:	f244 03c3 	movw	r3, #16579	; 0x40c3
 8001750:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001752:	2301      	movs	r3, #1
 8001754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	4812      	ldr	r0, [pc, #72]	; (80017b0 <MX_GPIO_Init+0x1c8>)
 8001766:	f001 fde5 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800176a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	480c      	ldr	r0, [pc, #48]	; (80017b4 <MX_GPIO_Init+0x1cc>)
 8001784:	f001 fdd6 	bl	8003334 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	2028      	movs	r0, #40	; 0x28
 800178e:	f001 fa1e 	bl	8002bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001792:	2028      	movs	r0, #40	; 0x28
 8001794:	f001 fa37 	bl	8002c06 <HAL_NVIC_EnableIRQ>

}
 8001798:	bf00      	nop
 800179a:	3730      	adds	r7, #48	; 0x30
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40021400 	.word	0x40021400
 80017ac:	40020800 	.word	0x40020800
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40020c00 	.word	0x40020c00

080017b8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */
float volts = 0;
int butPressed = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017c8:	d102      	bne.n	80017d0 <HAL_GPIO_EXTI_Callback+0x18>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		send_UART("{to:'Log',from:'Mst',reci:'headerValsCsv',dir:'g',rc:''}\r");
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		*/

		butPressed = 1;
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <HAL_GPIO_EXTI_Callback+0x24>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
	}
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	200002c0 	.word	0x200002c0

080017e0 <Build_MSG>:
float T_PT100; //Temperature provided by PT100
float dT;//Temperature gradient provided by STM
int time; // to save the time -


void Build_MSG(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af0a      	add	r7, sp, #40	; 0x28
	//builds the Message that will be sent from the STM(Master) to the Arduino(Slave)
	sprintf(MSG, "{t:%d;dT:%.2f;T:%.2f;B1:%.1f;B2:%.1f;B3:%.1f}",time,dT, T_PT100, B1, B2, B3);
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <Build_MSG+0x60>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a16      	ldr	r2, [pc, #88]	; (8001844 <Build_MSG+0x64>)
 80017ec:	edd2 7a00 	vldr	s15, [r2]
 80017f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <Build_MSG+0x68>)
 80017f6:	edd2 6a00 	vldr	s13, [r2]
 80017fa:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <Build_MSG+0x6c>)
 8001800:	edd2 5a00 	vldr	s11, [r2]
 8001804:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001808:	4a11      	ldr	r2, [pc, #68]	; (8001850 <Build_MSG+0x70>)
 800180a:	edd2 4a00 	vldr	s9, [r2]
 800180e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8001812:	4a10      	ldr	r2, [pc, #64]	; (8001854 <Build_MSG+0x74>)
 8001814:	edd2 3a00 	vldr	s7, [r2]
 8001818:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800181c:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001820:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001824:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001828:	ed8d 6b02 	vstr	d6, [sp, #8]
 800182c:	ed8d 7b00 	vstr	d7, [sp]
 8001830:	461a      	mov	r2, r3
 8001832:	4909      	ldr	r1, [pc, #36]	; (8001858 <Build_MSG+0x78>)
 8001834:	4809      	ldr	r0, [pc, #36]	; (800185c <Build_MSG+0x7c>)
 8001836:	f006 fae1 	bl	8007dfc <siprintf>
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000318 	.word	0x20000318
 8001844:	20000314 	.word	0x20000314
 8001848:	20000310 	.word	0x20000310
 800184c:	20000304 	.word	0x20000304
 8001850:	20000308 	.word	0x20000308
 8001854:	2000030c 	.word	0x2000030c
 8001858:	0800b848 	.word	0x0800b848
 800185c:	200002d0 	.word	0x200002d0

08001860 <convert_adc_to_physicalvalue>:


void convert_adc_to_physicalvalue(){
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0

	time += 2; //add 2s to time since 2s passed from the last measure
 8001866:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <convert_adc_to_physicalvalue+0x168>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3302      	adds	r3, #2
 800186c:	4a56      	ldr	r2, [pc, #344]	; (80019c8 <convert_adc_to_physicalvalue+0x168>)
 800186e:	6013      	str	r3, [r2, #0]

	float aux0, aux1, aux2, aux3, aux4;

	//Pass ADC result from bits to tension
	aux0 = ADC_results[0]*3.3/4096; //ADC result in Volts
 8001870:	4b56      	ldr	r3, [pc, #344]	; (80019cc <convert_adc_to_physicalvalue+0x16c>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800187c:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80019a8 <convert_adc_to_physicalvalue+0x148>
 8001880:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001884:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 80019b0 <convert_adc_to_physicalvalue+0x150>
 8001888:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800188c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001890:	edc7 7a05 	vstr	s15, [r7, #20]
	aux1 = ADC_results[1]*3.3/4096;
 8001894:	4b4d      	ldr	r3, [pc, #308]	; (80019cc <convert_adc_to_physicalvalue+0x16c>)
 8001896:	885b      	ldrh	r3, [r3, #2]
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018a0:	ed9f 6b41 	vldr	d6, [pc, #260]	; 80019a8 <convert_adc_to_physicalvalue+0x148>
 80018a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018a8:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80019b0 <convert_adc_to_physicalvalue+0x150>
 80018ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018b4:	edc7 7a04 	vstr	s15, [r7, #16]
	aux2 = ADC_results[2]*3.3/4096;
 80018b8:	4b44      	ldr	r3, [pc, #272]	; (80019cc <convert_adc_to_physicalvalue+0x16c>)
 80018ba:	889b      	ldrh	r3, [r3, #4]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018c4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80019a8 <convert_adc_to_physicalvalue+0x148>
 80018c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018cc:	ed9f 5b38 	vldr	d5, [pc, #224]	; 80019b0 <convert_adc_to_physicalvalue+0x150>
 80018d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018d8:	edc7 7a03 	vstr	s15, [r7, #12]
	aux3 = ADC_results[3]*3.3/4096;
 80018dc:	4b3b      	ldr	r3, [pc, #236]	; (80019cc <convert_adc_to_physicalvalue+0x16c>)
 80018de:	88db      	ldrh	r3, [r3, #6]
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018e8:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 80019a8 <convert_adc_to_physicalvalue+0x148>
 80018ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018f0:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 80019b0 <convert_adc_to_physicalvalue+0x150>
 80018f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018fc:	edc7 7a02 	vstr	s15, [r7, #8]
	aux4 = ADC_results[4]*3.3/4096;
 8001900:	4b32      	ldr	r3, [pc, #200]	; (80019cc <convert_adc_to_physicalvalue+0x16c>)
 8001902:	891b      	ldrh	r3, [r3, #8]
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800190c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 80019a8 <convert_adc_to_physicalvalue+0x148>
 8001910:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001914:	ed9f 5b26 	vldr	d5, [pc, #152]	; 80019b0 <convert_adc_to_physicalvalue+0x150>
 8001918:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800191c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001920:	edc7 7a01 	vstr	s15, [r7, #4]
	//Correction factor for V_LC: 3
	//Correction factor for V_AA: 2
	//Correction factor for V_9V: 3

	//Convert ADC result to temperature and voltages
	dT = 34.469*aux0 - 67.653; //STM temperature variation
 8001924:	edd7 7a05 	vldr	s15, [r7, #20]
 8001928:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800192c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80019b8 <convert_adc_to_physicalvalue+0x158>
 8001930:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001934:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80019c0 <convert_adc_to_physicalvalue+0x160>
 8001938:	ee37 7b46 	vsub.f64	d7, d7, d6
 800193c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <convert_adc_to_physicalvalue+0x170>)
 8001942:	edc3 7a00 	vstr	s15, [r3]
	T_PT100 = 34.469*aux1 - 67.653; //PT100 temperature
 8001946:	edd7 7a04 	vldr	s15, [r7, #16]
 800194a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800194e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80019b8 <convert_adc_to_physicalvalue+0x158>
 8001952:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001956:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80019c0 <convert_adc_to_physicalvalue+0x160>
 800195a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800195e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <convert_adc_to_physicalvalue+0x174>)
 8001964:	edc3 7a00 	vstr	s15, [r3]
	B1 = aux2 * 3 ; //V_LC
 8001968:	edd7 7a03 	vldr	s15, [r7, #12]
 800196c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001974:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <convert_adc_to_physicalvalue+0x178>)
 8001976:	edc3 7a00 	vstr	s15, [r3]
	B2 = aux3 * 2; //V_AA
 800197a:	edd7 7a02 	vldr	s15, [r7, #8]
 800197e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <convert_adc_to_physicalvalue+0x17c>)
 8001984:	edc3 7a00 	vstr	s15, [r3]
	B3 = aux4 * 3; //V_9V
 8001988:	edd7 7a01 	vldr	s15, [r7, #4]
 800198c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <convert_adc_to_physicalvalue+0x180>)
 8001996:	edc3 7a00 	vstr	s15, [r3]

}
 800199a:	bf00      	nop
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	66666666 	.word	0x66666666
 80019ac:	400a6666 	.word	0x400a6666
 80019b0:	00000000 	.word	0x00000000
 80019b4:	40b00000 	.word	0x40b00000
 80019b8:	3126e979 	.word	0x3126e979
 80019bc:	40413c08 	.word	0x40413c08
 80019c0:	c083126f 	.word	0xc083126f
 80019c4:	4050e9ca 	.word	0x4050e9ca
 80019c8:	20000318 	.word	0x20000318
 80019cc:	200002c4 	.word	0x200002c4
 80019d0:	20000314 	.word	0x20000314
 80019d4:	20000310 	.word	0x20000310
 80019d8:	20000304 	.word	0x20000304
 80019dc:	20000308 	.word	0x20000308
 80019e0:	2000030c 	.word	0x2000030c

080019e4 <Send_MSG>:


void Send_MSG(){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
	//Send Message from STM(Master) to Arduino(Slave) using SPI4

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET); // CS Low => initiate communication between Master and Slave
 80019ea:	2200      	movs	r2, #0
 80019ec:	2110      	movs	r1, #16
 80019ee:	4813      	ldr	r0, [pc, #76]	; (8001a3c <Send_MSG+0x58>)
 80019f0:	f001 fe4c 	bl	800368c <HAL_GPIO_WritePin>
	int i = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]

	for(i=0;i<strlen(MSG);i++){
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	e00d      	b.n	8001a1a <Send_MSG+0x36>
		char dataSend = MSG[i];
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <Send_MSG+0x5c>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	70fb      	strb	r3, [r7, #3]
		HAL_SPI_Transmit(&hspi4, (uint8_t*)&dataSend, 1,100); //send byte by byte
 8001a08:	1cf9      	adds	r1, r7, #3
 8001a0a:	2364      	movs	r3, #100	; 0x64
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	480d      	ldr	r0, [pc, #52]	; (8001a44 <Send_MSG+0x60>)
 8001a10:	f003 f82d 	bl	8004a6e <HAL_SPI_Transmit>
	for(i=0;i<strlen(MSG);i++){
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3301      	adds	r3, #1
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4809      	ldr	r0, [pc, #36]	; (8001a40 <Send_MSG+0x5c>)
 8001a1c:	f7fe fc10 	bl	8000240 <strlen>
 8001a20:	4602      	mov	r2, r0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d8ea      	bhi.n	80019fe <Send_MSG+0x1a>
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); // CS High => End communication
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2110      	movs	r1, #16
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <Send_MSG+0x58>)
 8001a2e:	f001 fe2d 	bl	800368c <HAL_GPIO_WritePin>

}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	200002d0 	.word	0x200002d0
 8001a44:	20000380 	.word	0x20000380

08001a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); //CS of SPI4 High => No communication between STM and Arduino
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2110      	movs	r1, #16
 8001a50:	4813      	ldr	r0, [pc, #76]	; (8001aa0 <main+0x58>)
 8001a52:	f001 fe1b 	bl	800368c <HAL_GPIO_WritePin>
  time = 0; //start time counting
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <main+0x5c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5c:	f000 fcc7 	bl	80023ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a60:	f000 f822 	bl	8001aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a64:	f7ff fdc0 	bl	80015e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a68:	f7ff f8d2 	bl	8000c10 <MX_DMA_Init>
  MX_FATFS_Init();
 8001a6c:	f005 fa82 	bl	8006f74 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8001a70:	f000 fbaa 	bl	80021c8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001a74:	f7fe ffb2 	bl	80009dc <MX_ADC1_Init>
  MX_TIM1_Init();
 8001a78:	f000 fafa 	bl	8002070 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001a7c:	f000 f882 	bl	8001b84 <MX_SPI1_Init>
  MX_SPI4_Init();
 8001a80:	f000 f8be 	bl	8001c00 <MX_SPI4_Init>
  /* USER CODE BEGIN WHILE */

	while (1)
	{

		if(ReturnFlagTimer()){
 8001a84:	f000 fb6e 	bl	8002164 <ReturnFlagTimer>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0fa      	beq.n	8001a84 <main+0x3c>
			//2s Passed

			convert_adc_to_physicalvalue(); // Convert adc values to Temperature and Voltages
 8001a8e:	f7ff fee7 	bl	8001860 <convert_adc_to_physicalvalue>
			//print_adc();
			Build_MSG(); //build Message before sending
 8001a92:	f7ff fea5 	bl	80017e0 <Build_MSG>
			Send_MSG(); //Send Message to Slave(Arduino)
 8001a96:	f7ff ffa5 	bl	80019e4 <Send_MSG>
			ClearFlagTimer(); //set flag = false
 8001a9a:	f000 fb6f 	bl	800217c <ClearFlagTimer>
		if(ReturnFlagTimer()){
 8001a9e:	e7f1      	b.n	8001a84 <main+0x3c>
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	20000318 	.word	0x20000318

08001aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b094      	sub	sp, #80	; 0x50
 8001aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	2234      	movs	r2, #52	; 0x34
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f005 fb4a 	bl	8007150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <SystemClock_Config+0xc8>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <SystemClock_Config+0xc8>)
 8001ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <SystemClock_Config+0xc8>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ae4:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <SystemClock_Config+0xcc>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001aec:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <SystemClock_Config+0xcc>)
 8001aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <SystemClock_Config+0xcc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b04:	2301      	movs	r3, #1
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b08:	2310      	movs	r3, #16
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b10:	2300      	movs	r3, #0
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b14:	2308      	movs	r3, #8
 8001b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001b18:	2360      	movs	r3, #96	; 0x60
 8001b1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001b1c:	2306      	movs	r3, #6
 8001b1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b20:	2307      	movs	r3, #7
 8001b22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b24:	2302      	movs	r3, #2
 8001b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f001 fdf9 	bl	8003724 <HAL_RCC_OscConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b38:	f000 f81e 	bl	8001b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b3c:	230f      	movs	r3, #15
 8001b3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b40:	2302      	movs	r3, #2
 8001b42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f002 f892 	bl	8003c80 <HAL_RCC_ClockConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001b62:	f000 f809 	bl	8001b78 <Error_Handler>
  }
}
 8001b66:	bf00      	nop
 8001b68:	3750      	adds	r7, #80	; 0x50
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40007000 	.word	0x40007000

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
}
 8001b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <Error_Handler+0x8>
	...

08001b84 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <MX_SPI1_Init+0x74>)
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	; (8001bfc <MX_SPI1_Init+0x78>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <MX_SPI1_Init+0x74>)
 8001b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <MX_SPI1_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <MX_SPI1_Init+0x74>)
 8001b9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ba2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <MX_SPI1_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <MX_SPI1_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_SPI1_Init+0x74>)
 8001bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <MX_SPI1_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_SPI1_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_SPI1_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <MX_SPI1_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_SPI1_Init+0x74>)
 8001bd2:	2207      	movs	r2, #7
 8001bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <MX_SPI1_Init+0x74>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_SPI1_Init+0x74>)
 8001bde:	2208      	movs	r2, #8
 8001be0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_SPI1_Init+0x74>)
 8001be4:	f002 fe98 	bl	8004918 <HAL_SPI_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bee:	f7ff ffc3 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000031c 	.word	0x2000031c
 8001bfc:	40013000 	.word	0x40013000

08001c00 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <MX_SPI4_Init+0x74>)
 8001c06:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <MX_SPI4_Init+0x78>)
 8001c08:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <MX_SPI4_Init+0x74>)
 8001c0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c10:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <MX_SPI4_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <MX_SPI4_Init+0x74>)
 8001c1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c1e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <MX_SPI4_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <MX_SPI4_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_SPI4_Init+0x74>)
 8001c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c32:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <MX_SPI4_Init+0x74>)
 8001c36:	2208      	movs	r2, #8
 8001c38:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_SPI4_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_SPI4_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <MX_SPI4_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_SPI4_Init+0x74>)
 8001c4e:	2207      	movs	r2, #7
 8001c50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <MX_SPI4_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_SPI4_Init+0x74>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_SPI4_Init+0x74>)
 8001c60:	f002 fe5a 	bl	8004918 <HAL_SPI_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001c6a:	f7ff ff85 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000380 	.word	0x20000380
 8001c78:	40013400 	.word	0x40013400

08001c7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08c      	sub	sp, #48	; 0x30
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2e      	ldr	r2, [pc, #184]	; (8001d54 <HAL_SPI_MspInit+0xd8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d128      	bne.n	8001cf0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <HAL_SPI_MspInit+0xdc>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a2d      	ldr	r2, [pc, #180]	; (8001d58 <HAL_SPI_MspInit+0xdc>)
 8001ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <HAL_SPI_MspInit+0xdc>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <HAL_SPI_MspInit+0xdc>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a27      	ldr	r2, [pc, #156]	; (8001d58 <HAL_SPI_MspInit+0xdc>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_SPI_MspInit+0xdc>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cce:	23e0      	movs	r3, #224	; 0xe0
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cde:	2305      	movs	r3, #5
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 031c 	add.w	r3, r7, #28
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	481c      	ldr	r0, [pc, #112]	; (8001d5c <HAL_SPI_MspInit+0xe0>)
 8001cea:	f001 fb23 	bl	8003334 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001cee:	e02c      	b.n	8001d4a <HAL_SPI_MspInit+0xce>
  else if(spiHandle->Instance==SPI4)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1a      	ldr	r2, [pc, #104]	; (8001d60 <HAL_SPI_MspInit+0xe4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d127      	bne.n	8001d4a <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_SPI_MspInit+0xdc>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <HAL_SPI_MspInit+0xdc>)
 8001d00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d04:	6453      	str	r3, [r2, #68]	; 0x44
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_SPI_MspInit+0xdc>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_SPI_MspInit+0xdc>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_SPI_MspInit+0xdc>)
 8001d18:	f043 0310 	orr.w	r3, r3, #16
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_SPI_MspInit+0xdc>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d2a:	2364      	movs	r3, #100	; 0x64
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001d3a:	2305      	movs	r3, #5
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	4619      	mov	r1, r3
 8001d44:	4807      	ldr	r0, [pc, #28]	; (8001d64 <HAL_SPI_MspInit+0xe8>)
 8001d46:	f001 faf5 	bl	8003334 <HAL_GPIO_Init>
}
 8001d4a:	bf00      	nop
 8001d4c:	3730      	adds	r7, #48	; 0x30
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40013000 	.word	0x40013000
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40013400 	.word	0x40013400
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_MspInit+0x44>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_MspInit+0x44>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_MspInit+0x44>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_MspInit+0x44>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	4a08      	ldr	r2, [pc, #32]	; (8001dac <HAL_MspInit+0x44>)
 8001d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d90:	6453      	str	r3, [r2, #68]	; 0x44
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_MspInit+0x44>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800

08001db0 <SDTimer_Handler>:

volatile uint8_t FatFSCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <SDTimer_Handler+0x40>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <SDTimer_Handler+0x1c>
		Timer1--;
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <SDTimer_Handler+0x40>)
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <SDTimer_Handler+0x40>)
 8001dca:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <SDTimer_Handler+0x44>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <SDTimer_Handler+0x34>
		Timer2--;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <SDTimer_Handler+0x44>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SDTimer_Handler+0x44>)
 8001de2:	801a      	strh	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	200003e6 	.word	0x200003e6
 8001df4:	200003e8 	.word	0x200003e8

08001df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <NMI_Handler+0x4>

08001dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e02:	e7fe      	b.n	8001e02 <HardFault_Handler+0x4>

08001e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <MemManage_Handler+0x4>

08001e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <BusFault_Handler+0x4>

08001e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <UsageFault_Handler+0x4>

08001e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFSCnt++;
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <SysTick_Handler+0x30>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <SysTick_Handler+0x30>)
 8001e50:	701a      	strb	r2, [r3, #0]
	if(FatFSCnt >= 10)
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <SysTick_Handler+0x30>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b09      	cmp	r3, #9
 8001e5a:	d904      	bls.n	8001e66 <SysTick_Handler+0x26>
	{
		FatFSCnt = 0;
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <SysTick_Handler+0x30>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001e62:	f7ff ffa5 	bl	8001db0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e66:	f000 faff 	bl	8002468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200003e4 	.word	0x200003e4

08001e74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e7a:	f003 fb58 	bl	800552e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200003f0 	.word	0x200003f0

08001e88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <USART3_IRQHandler+0x10>)
 8001e8e:	f003 fff1 	bl	8005e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000064c 	.word	0x2000064c

08001e9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001ea0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ea4:	f001 fc26 	bl	80036f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <DMA2_Stream0_IRQHandler+0x10>)
 8001eb2:	f001 f803 	bl	8002ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	2000025c 	.word	0x2000025c

08001ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return 1;
 8001ec4:	2301      	movs	r3, #1
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_kill>:

int _kill(int pid, int sig)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eda:	f005 f90f 	bl	80070fc <__errno>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2216      	movs	r2, #22
 8001ee2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_exit>:

void _exit (int status)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ffe7 	bl	8001ed0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f02:	e7fe      	b.n	8001f02 <_exit+0x12>

08001f04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	e00a      	b.n	8001f2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f16:	f3af 8000 	nop.w
 8001f1a:	4601      	mov	r1, r0
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	60ba      	str	r2, [r7, #8]
 8001f22:	b2ca      	uxtb	r2, r1
 8001f24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	dbf0      	blt.n	8001f16 <_read+0x12>
  }

  return len;
 8001f34:	687b      	ldr	r3, [r7, #4]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e009      	b.n	8001f64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	60ba      	str	r2, [r7, #8]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	dbf1      	blt.n	8001f50 <_write+0x12>
  }
  return len;
 8001f6c:	687b      	ldr	r3, [r7, #4]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_close>:

int _close(int file)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <_isatty>:

int _isatty(int file)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe8:	4a14      	ldr	r2, [pc, #80]	; (800203c <_sbrk+0x5c>)
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <_sbrk+0x60>)
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <_sbrk+0x64>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <_sbrk+0x64>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <_sbrk+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	429a      	cmp	r2, r3
 800200e:	d207      	bcs.n	8002020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002010:	f005 f874 	bl	80070fc <__errno>
 8002014:	4603      	mov	r3, r0
 8002016:	220c      	movs	r2, #12
 8002018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
 800201e:	e009      	b.n	8002034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <_sbrk+0x64>)
 8002030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002032:	68fb      	ldr	r3, [r7, #12]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20080000 	.word	0x20080000
 8002040:	00000400 	.word	0x00000400
 8002044:	200003ec 	.word	0x200003ec
 8002048:	20000700 	.word	0x20000700

0800204c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <SystemInit+0x20>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002056:	4a05      	ldr	r2, [pc, #20]	; (800206c <SystemInit+0x20>)
 8002058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800205c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <MX_TIM1_Init+0xa0>)
 8002090:	4a20      	ldr	r2, [pc, #128]	; (8002114 <MX_TIM1_Init+0xa4>)
 8002092:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600-1;
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <MX_TIM1_Init+0xa0>)
 8002096:	f240 623f 	movw	r2, #1599	; 0x63f
 800209a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209c:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <MX_TIM1_Init+0xa0>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <MX_TIM1_Init+0xa0>)
 80020a4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80020a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <MX_TIM1_Init+0xa0>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <MX_TIM1_Init+0xa0>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b6:	4b16      	ldr	r3, [pc, #88]	; (8002110 <MX_TIM1_Init+0xa0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020bc:	4814      	ldr	r0, [pc, #80]	; (8002110 <MX_TIM1_Init+0xa0>)
 80020be:	f003 f9df 	bl	8005480 <HAL_TIM_Base_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80020c8:	f7ff fd56 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020d2:	f107 0310 	add.w	r3, r7, #16
 80020d6:	4619      	mov	r1, r3
 80020d8:	480d      	ldr	r0, [pc, #52]	; (8002110 <MX_TIM1_Init+0xa0>)
 80020da:	f003 fb47 	bl	800576c <HAL_TIM_ConfigClockSource>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80020e4:	f7ff fd48 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020e8:	2320      	movs	r3, #32
 80020ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	4619      	mov	r1, r3
 80020f8:	4805      	ldr	r0, [pc, #20]	; (8002110 <MX_TIM1_Init+0xa0>)
 80020fa:	f003 fd63 	bl	8005bc4 <HAL_TIMEx_MasterConfigSynchronization>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002104:	f7ff fd38 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	200003f0 	.word	0x200003f0
 8002114:	40010000 	.word	0x40010000

08002118 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0d      	ldr	r2, [pc, #52]	; (800215c <HAL_TIM_Base_MspInit+0x44>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d113      	bne.n	8002152 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <HAL_TIM_Base_MspInit+0x48>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <HAL_TIM_Base_MspInit+0x48>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_TIM_Base_MspInit+0x48>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	2019      	movs	r0, #25
 8002148:	f000 fd41 	bl	8002bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800214c:	2019      	movs	r0, #25
 800214e:	f000 fd5a 	bl	8002c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40010000 	.word	0x40010000
 8002160:	40023800 	.word	0x40023800

08002164 <ReturnFlagTimer>:

/* USER CODE BEGIN 1 */

volatile bool flag2s = false;

bool ReturnFlagTimer(){
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

	return flag2s;
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <ReturnFlagTimer+0x14>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	2000043c 	.word	0x2000043c

0800217c <ClearFlagTimer>:

void ClearFlagTimer(){
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
	flag2s = false;
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <ClearFlagTimer+0x14>)
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	2000043c 	.word	0x2000043c

08002194 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	//This function will be executed when the Timer reaches 2s

	if(htim == &htim1){
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a07      	ldr	r2, [pc, #28]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d106      	bne.n	80021b2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80021a4:	2101      	movs	r1, #1
 80021a6:	4806      	ldr	r0, [pc, #24]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80021a8:	f001 fa89 	bl	80036be <HAL_GPIO_TogglePin>
		flag2s = true;
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
	}
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200003f0 	.word	0x200003f0
 80021c0:	40020400 	.word	0x40020400
 80021c4:	2000043c 	.word	0x2000043c

080021c8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <MX_USART3_UART_Init+0x74>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <MX_USART3_UART_Init+0x78>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <MX_USART3_UART_Init+0x7c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <MX_USART3_UART_Init+0x80>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <MX_USART3_UART_Init+0x84>)
 80021e6:	220d      	movs	r2, #13
 80021e8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <MX_USART3_UART_Init+0x88>)
 80021ec:	4a19      	ldr	r2, [pc, #100]	; (8002254 <MX_USART3_UART_Init+0x8c>)
 80021ee:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021f0:	4b17      	ldr	r3, [pc, #92]	; (8002250 <MX_USART3_UART_Init+0x88>)
 80021f2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <MX_USART3_UART_Init+0x88>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <MX_USART3_UART_Init+0x88>)
 8002200:	2200      	movs	r2, #0
 8002202:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <MX_USART3_UART_Init+0x88>)
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <MX_USART3_UART_Init+0x88>)
 800220c:	220c      	movs	r2, #12
 800220e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <MX_USART3_UART_Init+0x88>)
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <MX_USART3_UART_Init+0x88>)
 8002218:	2200      	movs	r2, #0
 800221a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <MX_USART3_UART_Init+0x88>)
 800221e:	2200      	movs	r2, #0
 8002220:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <MX_USART3_UART_Init+0x88>)
 8002224:	2200      	movs	r2, #0
 8002226:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002228:	4809      	ldr	r0, [pc, #36]	; (8002250 <MX_USART3_UART_Init+0x88>)
 800222a:	f003 fd77 	bl	8005d1c <HAL_UART_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8002234:	f7ff fca0 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000648 	.word	0x20000648
 8002240:	20000649 	.word	0x20000649
 8002244:	20000440 	.word	0x20000440
 8002248:	20000644 	.word	0x20000644
 800224c:	20000444 	.word	0x20000444
 8002250:	2000064c 	.word	0x2000064c
 8002254:	40004800 	.word	0x40004800

08002258 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b0ae      	sub	sp, #184	; 0xb8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2290      	movs	r2, #144	; 0x90
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f004 ff69 	bl	8007150 <memset>
  if(uartHandle->Instance==USART3)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a26      	ldr	r2, [pc, #152]	; (800231c <HAL_UART_MspInit+0xc4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d144      	bne.n	8002312 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800228c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800228e:	2300      	movs	r3, #0
 8002290:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	4618      	mov	r0, r3
 8002298:	f001 ff16 	bl	80040c8 <HAL_RCCEx_PeriphCLKConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022a2:	f7ff fc69 	bl	8001b78 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_UART_MspInit+0xc8>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <HAL_UART_MspInit+0xc8>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b0:	6413      	str	r3, [r2, #64]	; 0x40
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_UART_MspInit+0xc8>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <HAL_UART_MspInit+0xc8>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a17      	ldr	r2, [pc, #92]	; (8002320 <HAL_UART_MspInit+0xc8>)
 80022c4:	f043 0308 	orr.w	r3, r3, #8
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_UART_MspInit+0xc8>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ea:	2303      	movs	r3, #3
 80022ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022f0:	2307      	movs	r3, #7
 80022f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022fa:	4619      	mov	r1, r3
 80022fc:	4809      	ldr	r0, [pc, #36]	; (8002324 <HAL_UART_MspInit+0xcc>)
 80022fe:	f001 f819 	bl	8003334 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2100      	movs	r1, #0
 8002306:	2027      	movs	r0, #39	; 0x27
 8002308:	f000 fc61 	bl	8002bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800230c:	2027      	movs	r0, #39	; 0x27
 800230e:	f000 fc7a 	bl	8002c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002312:	bf00      	nop
 8002314:	37b8      	adds	r7, #184	; 0xb8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40004800 	.word	0x40004800
 8002320:	40023800 	.word	0x40023800
 8002324:	40020c00 	.word	0x40020c00

08002328 <HAL_UART_TxCpltCallback>:
		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8002330:	4b16      	ldr	r3, [pc, #88]	; (800238c <HAL_UART_TxCpltCallback+0x64>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	f083 0301 	eor.w	r3, r3, #1
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d122      	bne.n	8002384 <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <HAL_UART_TxCpltCallback+0x68>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a14      	ldr	r2, [pc, #80]	; (8002394 <HAL_UART_TxCpltCallback+0x6c>)
 8002344:	5cd3      	ldrb	r3, [r2, r3]
 8002346:	2b0d      	cmp	r3, #13
 8002348:	d10d      	bne.n	8002366 <HAL_UART_TxCpltCallback+0x3e>
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_UART_TxCpltCallback+0x68>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3b01      	subs	r3, #1
 8002350:	4a10      	ldr	r2, [pc, #64]	; (8002394 <HAL_UART_TxCpltCallback+0x6c>)
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	2b0a      	cmp	r3, #10
 8002356:	d006      	beq.n	8002366 <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8002358:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <HAL_UART_TxCpltCallback+0x68>)
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_UART_TxCpltCallback+0x64>)
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
 8002364:	e00f      	b.n	8002386 <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_UART_TxCpltCallback+0x68>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3301      	adds	r3, #1
 800236c:	4a08      	ldr	r2, [pc, #32]	; (8002390 <HAL_UART_TxCpltCallback+0x68>)
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <HAL_UART_TxCpltCallback+0x68>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a07      	ldr	r2, [pc, #28]	; (8002394 <HAL_UART_TxCpltCallback+0x6c>)
 8002376:	4413      	add	r3, r2
 8002378:	2201      	movs	r2, #1
 800237a:	4619      	mov	r1, r3
 800237c:	4806      	ldr	r0, [pc, #24]	; (8002398 <HAL_UART_TxCpltCallback+0x70>)
 800237e:	f003 fd1b 	bl	8005db8 <HAL_UART_Transmit_IT>
 8002382:	e000      	b.n	8002386 <HAL_UART_TxCpltCallback+0x5e>
		return;
 8002384:	bf00      	nop
}
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000649 	.word	0x20000649
 8002390:	20000644 	.word	0x20000644
 8002394:	20000444 	.word	0x20000444
 8002398:	2000064c 	.word	0x2000064c

0800239c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800239c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023a0:	480d      	ldr	r0, [pc, #52]	; (80023d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023a2:	490e      	ldr	r1, [pc, #56]	; (80023dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023a4:	4a0e      	ldr	r2, [pc, #56]	; (80023e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a8:	e002      	b.n	80023b0 <LoopCopyDataInit>

080023aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ae:	3304      	adds	r3, #4

080023b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b4:	d3f9      	bcc.n	80023aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b6:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023b8:	4c0b      	ldr	r4, [pc, #44]	; (80023e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023bc:	e001      	b.n	80023c2 <LoopFillZerobss>

080023be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c0:	3204      	adds	r2, #4

080023c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c4:	d3fb      	bcc.n	80023be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023c6:	f7ff fe41 	bl	800204c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ca:	f004 fe9d 	bl	8007108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ce:	f7ff fb3b 	bl	8001a48 <main>
  bx  lr    
 80023d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023d4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80023d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023dc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80023e0:	0800bd6c 	.word	0x0800bd6c
  ldr r2, =_sbss
 80023e4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80023e8:	200006fc 	.word	0x200006fc

080023ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023ec:	e7fe      	b.n	80023ec <ADC_IRQHandler>

080023ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f2:	2003      	movs	r0, #3
 80023f4:	f000 fbe0 	bl	8002bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023f8:	2000      	movs	r0, #0
 80023fa:	f000 f805 	bl	8002408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023fe:	f7ff fcb3 	bl	8001d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_InitTick+0x54>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_InitTick+0x58>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4619      	mov	r1, r3
 800241a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002422:	fbb2 f3f3 	udiv	r3, r2, r3
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fbfb 	bl	8002c22 <HAL_SYSTICK_Config>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e00e      	b.n	8002454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b0f      	cmp	r3, #15
 800243a:	d80a      	bhi.n	8002452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800243c:	2200      	movs	r2, #0
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f000 fbc3 	bl	8002bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002448:	4a06      	ldr	r2, [pc, #24]	; (8002464 <HAL_InitTick+0x5c>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e000      	b.n	8002454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000004 	.word	0x20000004
 8002460:	2000000c 	.word	0x2000000c
 8002464:	20000008 	.word	0x20000008

08002468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_IncTick+0x20>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_IncTick+0x24>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4413      	add	r3, r2
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <HAL_IncTick+0x24>)
 800247a:	6013      	str	r3, [r2, #0]
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	2000000c 	.word	0x2000000c
 800248c:	200006d4 	.word	0x200006d4

08002490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return uwTick;
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <HAL_GetTick+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	200006d4 	.word	0x200006d4

080024a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff ffee 	bl	8002490 <HAL_GetTick>
 80024b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d005      	beq.n	80024ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_Delay+0x44>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ce:	bf00      	nop
 80024d0:	f7ff ffde 	bl	8002490 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d8f7      	bhi.n	80024d0 <HAL_Delay+0x28>
  {
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	2000000c 	.word	0x2000000c

080024f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e031      	b.n	800256a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d109      	bne.n	8002522 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe faf0 	bl	8000af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	d116      	bne.n	800255c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_ADC_Init+0x84>)
 8002534:	4013      	ands	r3, r2
 8002536:	f043 0202 	orr.w	r2, r3, #2
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f970 	bl	8002824 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	f043 0201 	orr.w	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
 800255a:	e001      	b.n	8002560 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	ffffeefd 	.word	0xffffeefd

08002578 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x1c>
 8002590:	2302      	movs	r3, #2
 8002592:	e136      	b.n	8002802 <HAL_ADC_ConfigChannel+0x28a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b09      	cmp	r3, #9
 80025a2:	d93a      	bls.n	800261a <HAL_ADC_ConfigChannel+0xa2>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025ac:	d035      	beq.n	800261a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68d9      	ldr	r1, [r3, #12]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	3b1e      	subs	r3, #30
 80025c4:	2207      	movs	r2, #7
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	400a      	ands	r2, r1
 80025d2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a8d      	ldr	r2, [pc, #564]	; (8002810 <HAL_ADC_ConfigChannel+0x298>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d10a      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68d9      	ldr	r1, [r3, #12]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	061a      	lsls	r2, r3, #24
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025f2:	e035      	b.n	8002660 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68d9      	ldr	r1, [r3, #12]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	4618      	mov	r0, r3
 8002606:	4603      	mov	r3, r0
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4403      	add	r3, r0
 800260c:	3b1e      	subs	r3, #30
 800260e:	409a      	lsls	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002618:	e022      	b.n	8002660 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6919      	ldr	r1, [r3, #16]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	2207      	movs	r2, #7
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43da      	mvns	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	400a      	ands	r2, r1
 800263c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6919      	ldr	r1, [r3, #16]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	4618      	mov	r0, r3
 8002650:	4603      	mov	r3, r0
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4403      	add	r3, r0
 8002656:	409a      	lsls	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b06      	cmp	r3, #6
 8002666:	d824      	bhi.n	80026b2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	3b05      	subs	r3, #5
 800267a:	221f      	movs	r2, #31
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43da      	mvns	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	400a      	ands	r2, r1
 8002688:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	4618      	mov	r0, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	3b05      	subs	r3, #5
 80026a4:	fa00 f203 	lsl.w	r2, r0, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	635a      	str	r2, [r3, #52]	; 0x34
 80026b0:	e04c      	b.n	800274c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b0c      	cmp	r3, #12
 80026b8:	d824      	bhi.n	8002704 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	3b23      	subs	r3, #35	; 0x23
 80026cc:	221f      	movs	r2, #31
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	400a      	ands	r2, r1
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	3b23      	subs	r3, #35	; 0x23
 80026f6:	fa00 f203 	lsl.w	r2, r0, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
 8002702:	e023      	b.n	800274c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	3b41      	subs	r3, #65	; 0x41
 8002716:	221f      	movs	r2, #31
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43da      	mvns	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	400a      	ands	r2, r1
 8002724:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	4618      	mov	r0, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	3b41      	subs	r3, #65	; 0x41
 8002740:	fa00 f203 	lsl.w	r2, r0, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a30      	ldr	r2, [pc, #192]	; (8002814 <HAL_ADC_ConfigChannel+0x29c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10a      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1f4>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800275e:	d105      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002760:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <HAL_ADC_ConfigChannel+0x2a0>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4a2c      	ldr	r2, [pc, #176]	; (8002818 <HAL_ADC_ConfigChannel+0x2a0>)
 8002766:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800276a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a28      	ldr	r2, [pc, #160]	; (8002814 <HAL_ADC_ConfigChannel+0x29c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10f      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x21e>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b12      	cmp	r3, #18
 800277c:	d10b      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800277e:	4b26      	ldr	r3, [pc, #152]	; (8002818 <HAL_ADC_ConfigChannel+0x2a0>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4a25      	ldr	r2, [pc, #148]	; (8002818 <HAL_ADC_ConfigChannel+0x2a0>)
 8002784:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002788:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800278a:	4b23      	ldr	r3, [pc, #140]	; (8002818 <HAL_ADC_ConfigChannel+0x2a0>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4a22      	ldr	r2, [pc, #136]	; (8002818 <HAL_ADC_ConfigChannel+0x2a0>)
 8002790:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002794:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1e      	ldr	r2, [pc, #120]	; (8002814 <HAL_ADC_ConfigChannel+0x29c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d12b      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x280>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1a      	ldr	r2, [pc, #104]	; (8002810 <HAL_ADC_ConfigChannel+0x298>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d003      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x23a>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b11      	cmp	r3, #17
 80027b0:	d122      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80027b2:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_ADC_ConfigChannel+0x2a0>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4a18      	ldr	r2, [pc, #96]	; (8002818 <HAL_ADC_ConfigChannel+0x2a0>)
 80027b8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80027bc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80027be:	4b16      	ldr	r3, [pc, #88]	; (8002818 <HAL_ADC_ConfigChannel+0x2a0>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4a15      	ldr	r2, [pc, #84]	; (8002818 <HAL_ADC_ConfigChannel+0x2a0>)
 80027c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027c8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a10      	ldr	r2, [pc, #64]	; (8002810 <HAL_ADC_ConfigChannel+0x298>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d111      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80027d4:	4b11      	ldr	r3, [pc, #68]	; (800281c <HAL_ADC_ConfigChannel+0x2a4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a11      	ldr	r2, [pc, #68]	; (8002820 <HAL_ADC_ConfigChannel+0x2a8>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0c9a      	lsrs	r2, r3, #18
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027ea:	e002      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f9      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	10000012 	.word	0x10000012
 8002814:	40012000 	.word	0x40012000
 8002818:	40012300 	.word	0x40012300
 800281c:	20000004 	.word	0x20000004
 8002820:	431bde83 	.word	0x431bde83

08002824 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800282c:	4b78      	ldr	r3, [pc, #480]	; (8002a10 <ADC_Init+0x1ec>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a77      	ldr	r2, [pc, #476]	; (8002a10 <ADC_Init+0x1ec>)
 8002832:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002836:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002838:	4b75      	ldr	r3, [pc, #468]	; (8002a10 <ADC_Init+0x1ec>)
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4973      	ldr	r1, [pc, #460]	; (8002a10 <ADC_Init+0x1ec>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002854:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	021a      	lsls	r2, r3, #8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800289a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6899      	ldr	r1, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	4a58      	ldr	r2, [pc, #352]	; (8002a14 <ADC_Init+0x1f0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d022      	beq.n	80028fe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6899      	ldr	r1, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6899      	ldr	r1, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	e00f      	b.n	800291e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800290c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800291c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0202 	bic.w	r2, r2, #2
 800292c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6899      	ldr	r1, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	005a      	lsls	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01b      	beq.n	8002984 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800295a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800296a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6859      	ldr	r1, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	3b01      	subs	r3, #1
 8002978:	035a      	lsls	r2, r3, #13
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	e007      	b.n	8002994 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002992:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	051a      	lsls	r2, r3, #20
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6899      	ldr	r1, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029d6:	025a      	lsls	r2, r3, #9
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6899      	ldr	r1, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	029a      	lsls	r2, r3, #10
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40012300 	.word	0x40012300
 8002a14:	0f000001 	.word	0x0f000001

08002a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <__NVIC_SetPriorityGrouping+0x40>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a34:	4013      	ands	r3, r2
 8002a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <__NVIC_SetPriorityGrouping+0x44>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a46:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <__NVIC_SetPriorityGrouping+0x40>)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	60d3      	str	r3, [r2, #12]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00
 8002a5c:	05fa0000 	.word	0x05fa0000

08002a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a64:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <__NVIC_GetPriorityGrouping+0x18>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	0a1b      	lsrs	r3, r3, #8
 8002a6a:	f003 0307 	and.w	r3, r3, #7
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	db0b      	blt.n	8002aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	f003 021f 	and.w	r2, r3, #31
 8002a94:	4907      	ldr	r1, [pc, #28]	; (8002ab4 <__NVIC_EnableIRQ+0x38>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	e000e100 	.word	0xe000e100

08002ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	db0a      	blt.n	8002ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	490c      	ldr	r1, [pc, #48]	; (8002b04 <__NVIC_SetPriority+0x4c>)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	0112      	lsls	r2, r2, #4
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	440b      	add	r3, r1
 8002adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae0:	e00a      	b.n	8002af8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4908      	ldr	r1, [pc, #32]	; (8002b08 <__NVIC_SetPriority+0x50>)
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	3b04      	subs	r3, #4
 8002af0:	0112      	lsls	r2, r2, #4
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	440b      	add	r3, r1
 8002af6:	761a      	strb	r2, [r3, #24]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000e100 	.word	0xe000e100
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f1c3 0307 	rsb	r3, r3, #7
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	bf28      	it	cs
 8002b2a:	2304      	movcs	r3, #4
 8002b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d902      	bls.n	8002b3c <NVIC_EncodePriority+0x30>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3b03      	subs	r3, #3
 8002b3a:	e000      	b.n	8002b3e <NVIC_EncodePriority+0x32>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	401a      	ands	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43d9      	mvns	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	4313      	orrs	r3, r2
         );
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b84:	d301      	bcc.n	8002b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00f      	b.n	8002baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <SysTick_Config+0x40>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b92:	210f      	movs	r1, #15
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f7ff ff8e 	bl	8002ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <SysTick_Config+0x40>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba2:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <SysTick_Config+0x40>)
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	e000e010 	.word	0xe000e010

08002bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ff29 	bl	8002a18 <__NVIC_SetPriorityGrouping>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b086      	sub	sp, #24
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be0:	f7ff ff3e 	bl	8002a60 <__NVIC_GetPriorityGrouping>
 8002be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	6978      	ldr	r0, [r7, #20]
 8002bec:	f7ff ff8e 	bl	8002b0c <NVIC_EncodePriority>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff5d 	bl	8002ab8 <__NVIC_SetPriority>
}
 8002bfe:	bf00      	nop
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff31 	bl	8002a7c <__NVIC_EnableIRQ>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff ffa2 	bl	8002b74 <SysTick_Config>
 8002c30:	4603      	mov	r3, r0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c48:	f7ff fc22 	bl	8002490 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e099      	b.n	8002d8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c78:	e00f      	b.n	8002c9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c7a:	f7ff fc09 	bl	8002490 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b05      	cmp	r3, #5
 8002c86:	d908      	bls.n	8002c9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2203      	movs	r2, #3
 8002c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e078      	b.n	8002d8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e8      	bne.n	8002c7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <HAL_DMA_Init+0x158>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d107      	bne.n	8002d04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f023 0307 	bic.w	r3, r3, #7
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d117      	bne.n	8002d5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fa7b 	bl	800323c <DMA_CheckFifoParam>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2240      	movs	r2, #64	; 0x40
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e016      	b.n	8002d8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa32 	bl	80031d0 <DMA_CalcBaseAndBitshift>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	223f      	movs	r2, #63	; 0x3f
 8002d76:	409a      	lsls	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	e010803f 	.word	0xe010803f

08002d98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002da6:	f7ff fb73 	bl	8002490 <HAL_GetTick>
 8002daa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d008      	beq.n	8002dca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2280      	movs	r2, #128	; 0x80
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e052      	b.n	8002e70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0216 	bic.w	r2, r2, #22
 8002dd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002de8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_DMA_Abort+0x62>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0208 	bic.w	r2, r2, #8
 8002e08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e1a:	e013      	b.n	8002e44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e1c:	f7ff fb38 	bl	8002490 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b05      	cmp	r3, #5
 8002e28:	d90c      	bls.n	8002e44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2203      	movs	r2, #3
 8002e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e015      	b.n	8002e70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e4      	bne.n	8002e1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	223f      	movs	r2, #63	; 0x3f
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d004      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2280      	movs	r2, #128	; 0x80
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e00c      	b.n	8002eb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2205      	movs	r2, #5
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002ec8:	4b8e      	ldr	r3, [pc, #568]	; (8003104 <HAL_DMA_IRQHandler+0x248>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a8e      	ldr	r2, [pc, #568]	; (8003108 <HAL_DMA_IRQHandler+0x24c>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	0a9b      	lsrs	r3, r3, #10
 8002ed4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01a      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0204 	bic.w	r2, r2, #4
 8002f0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	2208      	movs	r2, #8
 8002f16:	409a      	lsls	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f043 0201 	orr.w	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	f043 0202 	orr.w	r2, r3, #2
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	2204      	movs	r2, #4
 8002f64:	409a      	lsls	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d012      	beq.n	8002f94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f80:	2204      	movs	r2, #4
 8002f82:	409a      	lsls	r2, r3
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	f043 0204 	orr.w	r2, r3, #4
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	2210      	movs	r2, #16
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d043      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d03c      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb6:	2210      	movs	r2, #16
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d018      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d108      	bne.n	8002fec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d024      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
 8002fea:	e01f      	b.n	800302c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01b      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	4798      	blx	r3
 8002ffc:	e016      	b.n	800302c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d107      	bne.n	800301c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0208 	bic.w	r2, r2, #8
 800301a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	2220      	movs	r2, #32
 8003032:	409a      	lsls	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 808f 	beq.w	800315c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 8087 	beq.w	800315c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003052:	2220      	movs	r2, #32
 8003054:	409a      	lsls	r2, r3
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b05      	cmp	r3, #5
 8003064:	d136      	bne.n	80030d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0216 	bic.w	r2, r2, #22
 8003074:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003084:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d103      	bne.n	8003096 <HAL_DMA_IRQHandler+0x1da>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0208 	bic.w	r2, r2, #8
 80030a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	223f      	movs	r2, #63	; 0x3f
 80030ac:	409a      	lsls	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d07e      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
        }
        return;
 80030d2:	e079      	b.n	80031c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01d      	beq.n	800311e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10d      	bne.n	800310c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d031      	beq.n	800315c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	4798      	blx	r3
 8003100:	e02c      	b.n	800315c <HAL_DMA_IRQHandler+0x2a0>
 8003102:	bf00      	nop
 8003104:	20000004 	.word	0x20000004
 8003108:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d023      	beq.n	800315c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	4798      	blx	r3
 800311c:	e01e      	b.n	800315c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10f      	bne.n	800314c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0210 	bic.w	r2, r2, #16
 800313a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	2b00      	cmp	r3, #0
 8003162:	d032      	beq.n	80031ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d022      	beq.n	80031b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2205      	movs	r2, #5
 8003174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3301      	adds	r3, #1
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	429a      	cmp	r2, r3
 8003192:	d307      	bcc.n	80031a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f2      	bne.n	8003188 <HAL_DMA_IRQHandler+0x2cc>
 80031a2:	e000      	b.n	80031a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	4798      	blx	r3
 80031c6:	e000      	b.n	80031ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80031c8:	bf00      	nop
    }
  }
}
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	3b10      	subs	r3, #16
 80031e0:	4a13      	ldr	r2, [pc, #76]	; (8003230 <DMA_CalcBaseAndBitshift+0x60>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031ea:	4a12      	ldr	r2, [pc, #72]	; (8003234 <DMA_CalcBaseAndBitshift+0x64>)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d908      	bls.n	8003210 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <DMA_CalcBaseAndBitshift+0x68>)
 8003206:	4013      	ands	r3, r2
 8003208:	1d1a      	adds	r2, r3, #4
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	659a      	str	r2, [r3, #88]	; 0x58
 800320e:	e006      	b.n	800321e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <DMA_CalcBaseAndBitshift+0x68>)
 8003218:	4013      	ands	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	aaaaaaab 	.word	0xaaaaaaab
 8003234:	0800b8b0 	.word	0x0800b8b0
 8003238:	fffffc00 	.word	0xfffffc00

0800323c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d11f      	bne.n	8003296 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d856      	bhi.n	800330a <DMA_CheckFifoParam+0xce>
 800325c:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <DMA_CheckFifoParam+0x28>)
 800325e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003262:	bf00      	nop
 8003264:	08003275 	.word	0x08003275
 8003268:	08003287 	.word	0x08003287
 800326c:	08003275 	.word	0x08003275
 8003270:	0800330b 	.word	0x0800330b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d046      	beq.n	800330e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003284:	e043      	b.n	800330e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800328e:	d140      	bne.n	8003312 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003294:	e03d      	b.n	8003312 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800329e:	d121      	bne.n	80032e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d837      	bhi.n	8003316 <DMA_CheckFifoParam+0xda>
 80032a6:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <DMA_CheckFifoParam+0x70>)
 80032a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ac:	080032bd 	.word	0x080032bd
 80032b0:	080032c3 	.word	0x080032c3
 80032b4:	080032bd 	.word	0x080032bd
 80032b8:	080032d5 	.word	0x080032d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
      break;
 80032c0:	e030      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d025      	beq.n	800331a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d2:	e022      	b.n	800331a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032dc:	d11f      	bne.n	800331e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032e2:	e01c      	b.n	800331e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d903      	bls.n	80032f2 <DMA_CheckFifoParam+0xb6>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d003      	beq.n	80032f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032f0:	e018      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
      break;
 80032f6:	e015      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00e      	beq.n	8003322 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      break;
 8003308:	e00b      	b.n	8003322 <DMA_CheckFifoParam+0xe6>
      break;
 800330a:	bf00      	nop
 800330c:	e00a      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      break;
 800330e:	bf00      	nop
 8003310:	e008      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      break;
 8003312:	bf00      	nop
 8003314:	e006      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      break;
 8003316:	bf00      	nop
 8003318:	e004      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      break;
 800331a:	bf00      	nop
 800331c:	e002      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      break;   
 800331e:	bf00      	nop
 8003320:	e000      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      break;
 8003322:	bf00      	nop
    }
  } 
  
  return status; 
 8003324:	7bfb      	ldrb	r3, [r7, #15]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop

08003334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003334:	b480      	push	{r7}
 8003336:	b089      	sub	sp, #36	; 0x24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	e175      	b.n	8003640 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003354:	2201      	movs	r2, #1
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	429a      	cmp	r2, r3
 800336e:	f040 8164 	bne.w	800363a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d005      	beq.n	800338a <HAL_GPIO_Init+0x56>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d130      	bne.n	80033ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	2203      	movs	r2, #3
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033c0:	2201      	movs	r2, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 0201 	and.w	r2, r3, #1
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d017      	beq.n	8003428 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	2203      	movs	r2, #3
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d123      	bne.n	800347c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	08da      	lsrs	r2, r3, #3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3208      	adds	r2, #8
 800343c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	220f      	movs	r2, #15
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	08da      	lsrs	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3208      	adds	r2, #8
 8003476:	69b9      	ldr	r1, [r7, #24]
 8003478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	2203      	movs	r2, #3
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0203 	and.w	r2, r3, #3
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80be 	beq.w	800363a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034be:	4b66      	ldr	r3, [pc, #408]	; (8003658 <HAL_GPIO_Init+0x324>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	4a65      	ldr	r2, [pc, #404]	; (8003658 <HAL_GPIO_Init+0x324>)
 80034c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ca:	4b63      	ldr	r3, [pc, #396]	; (8003658 <HAL_GPIO_Init+0x324>)
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034d6:	4a61      	ldr	r2, [pc, #388]	; (800365c <HAL_GPIO_Init+0x328>)
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	089b      	lsrs	r3, r3, #2
 80034dc:	3302      	adds	r3, #2
 80034de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	220f      	movs	r2, #15
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a58      	ldr	r2, [pc, #352]	; (8003660 <HAL_GPIO_Init+0x32c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d037      	beq.n	8003572 <HAL_GPIO_Init+0x23e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a57      	ldr	r2, [pc, #348]	; (8003664 <HAL_GPIO_Init+0x330>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d031      	beq.n	800356e <HAL_GPIO_Init+0x23a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a56      	ldr	r2, [pc, #344]	; (8003668 <HAL_GPIO_Init+0x334>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d02b      	beq.n	800356a <HAL_GPIO_Init+0x236>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a55      	ldr	r2, [pc, #340]	; (800366c <HAL_GPIO_Init+0x338>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d025      	beq.n	8003566 <HAL_GPIO_Init+0x232>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a54      	ldr	r2, [pc, #336]	; (8003670 <HAL_GPIO_Init+0x33c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d01f      	beq.n	8003562 <HAL_GPIO_Init+0x22e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a53      	ldr	r2, [pc, #332]	; (8003674 <HAL_GPIO_Init+0x340>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d019      	beq.n	800355e <HAL_GPIO_Init+0x22a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a52      	ldr	r2, [pc, #328]	; (8003678 <HAL_GPIO_Init+0x344>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <HAL_GPIO_Init+0x226>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a51      	ldr	r2, [pc, #324]	; (800367c <HAL_GPIO_Init+0x348>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00d      	beq.n	8003556 <HAL_GPIO_Init+0x222>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a50      	ldr	r2, [pc, #320]	; (8003680 <HAL_GPIO_Init+0x34c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d007      	beq.n	8003552 <HAL_GPIO_Init+0x21e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a4f      	ldr	r2, [pc, #316]	; (8003684 <HAL_GPIO_Init+0x350>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d101      	bne.n	800354e <HAL_GPIO_Init+0x21a>
 800354a:	2309      	movs	r3, #9
 800354c:	e012      	b.n	8003574 <HAL_GPIO_Init+0x240>
 800354e:	230a      	movs	r3, #10
 8003550:	e010      	b.n	8003574 <HAL_GPIO_Init+0x240>
 8003552:	2308      	movs	r3, #8
 8003554:	e00e      	b.n	8003574 <HAL_GPIO_Init+0x240>
 8003556:	2307      	movs	r3, #7
 8003558:	e00c      	b.n	8003574 <HAL_GPIO_Init+0x240>
 800355a:	2306      	movs	r3, #6
 800355c:	e00a      	b.n	8003574 <HAL_GPIO_Init+0x240>
 800355e:	2305      	movs	r3, #5
 8003560:	e008      	b.n	8003574 <HAL_GPIO_Init+0x240>
 8003562:	2304      	movs	r3, #4
 8003564:	e006      	b.n	8003574 <HAL_GPIO_Init+0x240>
 8003566:	2303      	movs	r3, #3
 8003568:	e004      	b.n	8003574 <HAL_GPIO_Init+0x240>
 800356a:	2302      	movs	r3, #2
 800356c:	e002      	b.n	8003574 <HAL_GPIO_Init+0x240>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_GPIO_Init+0x240>
 8003572:	2300      	movs	r3, #0
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	f002 0203 	and.w	r2, r2, #3
 800357a:	0092      	lsls	r2, r2, #2
 800357c:	4093      	lsls	r3, r2
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003584:	4935      	ldr	r1, [pc, #212]	; (800365c <HAL_GPIO_Init+0x328>)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	089b      	lsrs	r3, r3, #2
 800358a:	3302      	adds	r3, #2
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003592:	4b3d      	ldr	r3, [pc, #244]	; (8003688 <HAL_GPIO_Init+0x354>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	43db      	mvns	r3, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4013      	ands	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035b6:	4a34      	ldr	r2, [pc, #208]	; (8003688 <HAL_GPIO_Init+0x354>)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035bc:	4b32      	ldr	r3, [pc, #200]	; (8003688 <HAL_GPIO_Init+0x354>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035e0:	4a29      	ldr	r2, [pc, #164]	; (8003688 <HAL_GPIO_Init+0x354>)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035e6:	4b28      	ldr	r3, [pc, #160]	; (8003688 <HAL_GPIO_Init+0x354>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800360a:	4a1f      	ldr	r2, [pc, #124]	; (8003688 <HAL_GPIO_Init+0x354>)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003610:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_GPIO_Init+0x354>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003634:	4a14      	ldr	r2, [pc, #80]	; (8003688 <HAL_GPIO_Init+0x354>)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	3301      	adds	r3, #1
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b0f      	cmp	r3, #15
 8003644:	f67f ae86 	bls.w	8003354 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	3724      	adds	r7, #36	; 0x24
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800
 800365c:	40013800 	.word	0x40013800
 8003660:	40020000 	.word	0x40020000
 8003664:	40020400 	.word	0x40020400
 8003668:	40020800 	.word	0x40020800
 800366c:	40020c00 	.word	0x40020c00
 8003670:	40021000 	.word	0x40021000
 8003674:	40021400 	.word	0x40021400
 8003678:	40021800 	.word	0x40021800
 800367c:	40021c00 	.word	0x40021c00
 8003680:	40022000 	.word	0x40022000
 8003684:	40022400 	.word	0x40022400
 8003688:	40013c00 	.word	0x40013c00

0800368c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]
 8003698:	4613      	mov	r3, r2
 800369a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800369c:	787b      	ldrb	r3, [r7, #1]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036a2:	887a      	ldrh	r2, [r7, #2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036a8:	e003      	b.n	80036b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036aa:	887b      	ldrh	r3, [r7, #2]
 80036ac:	041a      	lsls	r2, r3, #16
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	619a      	str	r2, [r3, #24]
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036be:	b480      	push	{r7}
 80036c0:	b085      	sub	sp, #20
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	460b      	mov	r3, r1
 80036c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036d0:	887a      	ldrh	r2, [r7, #2]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4013      	ands	r3, r2
 80036d6:	041a      	lsls	r2, r3, #16
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	43d9      	mvns	r1, r3
 80036dc:	887b      	ldrh	r3, [r7, #2]
 80036de:	400b      	ands	r3, r1
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	619a      	str	r2, [r3, #24]
}
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	4013      	ands	r3, r2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d006      	beq.n	8003718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800370a:	4a05      	ldr	r2, [pc, #20]	; (8003720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe f850 	bl	80017b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40013c00 	.word	0x40013c00

08003724 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800372c:	2300      	movs	r3, #0
 800372e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e29b      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8087 	beq.w	8003856 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003748:	4b96      	ldr	r3, [pc, #600]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 030c 	and.w	r3, r3, #12
 8003750:	2b04      	cmp	r3, #4
 8003752:	d00c      	beq.n	800376e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003754:	4b93      	ldr	r3, [pc, #588]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b08      	cmp	r3, #8
 800375e:	d112      	bne.n	8003786 <HAL_RCC_OscConfig+0x62>
 8003760:	4b90      	ldr	r3, [pc, #576]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376c:	d10b      	bne.n	8003786 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376e:	4b8d      	ldr	r3, [pc, #564]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d06c      	beq.n	8003854 <HAL_RCC_OscConfig+0x130>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d168      	bne.n	8003854 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e275      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378e:	d106      	bne.n	800379e <HAL_RCC_OscConfig+0x7a>
 8003790:	4b84      	ldr	r3, [pc, #528]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a83      	ldr	r2, [pc, #524]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	e02e      	b.n	80037fc <HAL_RCC_OscConfig+0xd8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x9c>
 80037a6:	4b7f      	ldr	r3, [pc, #508]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a7e      	ldr	r2, [pc, #504]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	4b7c      	ldr	r3, [pc, #496]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a7b      	ldr	r2, [pc, #492]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e01d      	b.n	80037fc <HAL_RCC_OscConfig+0xd8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0xc0>
 80037ca:	4b76      	ldr	r3, [pc, #472]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a75      	ldr	r2, [pc, #468]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	4b73      	ldr	r3, [pc, #460]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a72      	ldr	r2, [pc, #456]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e00b      	b.n	80037fc <HAL_RCC_OscConfig+0xd8>
 80037e4:	4b6f      	ldr	r3, [pc, #444]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a6e      	ldr	r2, [pc, #440]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b6c      	ldr	r3, [pc, #432]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a6b      	ldr	r2, [pc, #428]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fe fe44 	bl	8002490 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800380c:	f7fe fe40 	bl	8002490 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e229      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	4b61      	ldr	r3, [pc, #388]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0xe8>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fe fe30 	bl	8002490 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003834:	f7fe fe2c 	bl	8002490 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	; 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e215      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003846:	4b57      	ldr	r3, [pc, #348]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x110>
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d069      	beq.n	8003936 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003862:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386e:	4b4d      	ldr	r3, [pc, #308]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	2b08      	cmp	r3, #8
 8003878:	d11c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x190>
 800387a:	4b4a      	ldr	r3, [pc, #296]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d116      	bne.n	80038b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003886:	4b47      	ldr	r3, [pc, #284]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_RCC_OscConfig+0x17a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d001      	beq.n	800389e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e1e9      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389e:	4b41      	ldr	r3, [pc, #260]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	493d      	ldr	r1, [pc, #244]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b2:	e040      	b.n	8003936 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d023      	beq.n	8003904 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a38      	ldr	r2, [pc, #224]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fe fde2 	bl	8002490 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d0:	f7fe fdde 	bl	8002490 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e1c7      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e2:	4b30      	ldr	r3, [pc, #192]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ee:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4929      	ldr	r1, [pc, #164]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	600b      	str	r3, [r1, #0]
 8003902:	e018      	b.n	8003936 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003904:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a26      	ldr	r2, [pc, #152]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fe fdbe 	bl	8002490 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003918:	f7fe fdba 	bl	8002490 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e1a3      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392a:	4b1e      	ldr	r3, [pc, #120]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d038      	beq.n	80039b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d019      	beq.n	800397e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800394a:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 800394c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394e:	4a15      	ldr	r2, [pc, #84]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003956:	f7fe fd9b 	bl	8002490 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395e:	f7fe fd97 	bl	8002490 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e180      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x23a>
 800397c:	e01a      	b.n	80039b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003982:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398a:	f7fe fd81 	bl	8002490 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003992:	f7fe fd7d 	bl	8002490 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d903      	bls.n	80039a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e166      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
 80039a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a8:	4b92      	ldr	r3, [pc, #584]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 80039aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ee      	bne.n	8003992 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80a4 	beq.w	8003b0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c2:	4b8c      	ldr	r3, [pc, #560]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10d      	bne.n	80039ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ce:	4b89      	ldr	r3, [pc, #548]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	4a88      	ldr	r2, [pc, #544]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 80039d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d8:	6413      	str	r3, [r2, #64]	; 0x40
 80039da:	4b86      	ldr	r3, [pc, #536]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e6:	2301      	movs	r3, #1
 80039e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ea:	4b83      	ldr	r3, [pc, #524]	; (8003bf8 <HAL_RCC_OscConfig+0x4d4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d118      	bne.n	8003a28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039f6:	4b80      	ldr	r3, [pc, #512]	; (8003bf8 <HAL_RCC_OscConfig+0x4d4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a7f      	ldr	r2, [pc, #508]	; (8003bf8 <HAL_RCC_OscConfig+0x4d4>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a02:	f7fe fd45 	bl	8002490 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0a:	f7fe fd41 	bl	8002490 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b64      	cmp	r3, #100	; 0x64
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e12a      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a1c:	4b76      	ldr	r3, [pc, #472]	; (8003bf8 <HAL_RCC_OscConfig+0x4d4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f0      	beq.n	8003a0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d106      	bne.n	8003a3e <HAL_RCC_OscConfig+0x31a>
 8003a30:	4b70      	ldr	r3, [pc, #448]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a34:	4a6f      	ldr	r2, [pc, #444]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3c:	e02d      	b.n	8003a9a <HAL_RCC_OscConfig+0x376>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x33c>
 8003a46:	4b6b      	ldr	r3, [pc, #428]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4a6a      	ldr	r2, [pc, #424]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70
 8003a52:	4b68      	ldr	r3, [pc, #416]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a67      	ldr	r2, [pc, #412]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5e:	e01c      	b.n	8003a9a <HAL_RCC_OscConfig+0x376>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b05      	cmp	r3, #5
 8003a66:	d10c      	bne.n	8003a82 <HAL_RCC_OscConfig+0x35e>
 8003a68:	4b62      	ldr	r3, [pc, #392]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	4a61      	ldr	r2, [pc, #388]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a6e:	f043 0304 	orr.w	r3, r3, #4
 8003a72:	6713      	str	r3, [r2, #112]	; 0x70
 8003a74:	4b5f      	ldr	r3, [pc, #380]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a78:	4a5e      	ldr	r2, [pc, #376]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a80:	e00b      	b.n	8003a9a <HAL_RCC_OscConfig+0x376>
 8003a82:	4b5c      	ldr	r3, [pc, #368]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	4a5b      	ldr	r2, [pc, #364]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8e:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	4a58      	ldr	r2, [pc, #352]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d015      	beq.n	8003ace <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa2:	f7fe fcf5 	bl	8002490 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa8:	e00a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aaa:	f7fe fcf1 	bl	8002490 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e0d8      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac0:	4b4c      	ldr	r3, [pc, #304]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0ee      	beq.n	8003aaa <HAL_RCC_OscConfig+0x386>
 8003acc:	e014      	b.n	8003af8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ace:	f7fe fcdf 	bl	8002490 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad4:	e00a      	b.n	8003aec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f7fe fcdb 	bl	8002490 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e0c2      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aec:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1ee      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d105      	bne.n	8003b0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afe:	4b3d      	ldr	r3, [pc, #244]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	4a3c      	ldr	r2, [pc, #240]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80ae 	beq.w	8003c70 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b14:	4b37      	ldr	r3, [pc, #220]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d06d      	beq.n	8003bfc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d14b      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b28:	4b32      	ldr	r3, [pc, #200]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a31      	ldr	r2, [pc, #196]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fe fcac 	bl	8002490 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3c:	f7fe fca8 	bl	8002490 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e091      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4e:	4b29      	ldr	r3, [pc, #164]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69da      	ldr	r2, [r3, #28]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	019b      	lsls	r3, r3, #6
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	3b01      	subs	r3, #1
 8003b74:	041b      	lsls	r3, r3, #16
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	061b      	lsls	r3, r3, #24
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	071b      	lsls	r3, r3, #28
 8003b86:	491b      	ldr	r1, [pc, #108]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b8c:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a18      	ldr	r2, [pc, #96]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fe fc7a 	bl	8002490 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fe fc76 	bl	8002490 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e05f      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb2:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x47c>
 8003bbe:	e057      	b.n	8003c70 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a0b      	ldr	r2, [pc, #44]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bcc:	f7fe fc60 	bl	8002490 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fe fc5c 	bl	8002490 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e045      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be6:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <HAL_RCC_OscConfig+0x4d0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4b0>
 8003bf2:	e03d      	b.n	8003c70 <HAL_RCC_OscConfig+0x54c>
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003bfc:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <HAL_RCC_OscConfig+0x558>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d030      	beq.n	8003c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d129      	bne.n	8003c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d122      	bne.n	8003c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d119      	bne.n	8003c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	085b      	lsrs	r3, r3, #1
 8003c44:	3b01      	subs	r3, #1
 8003c46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d10f      	bne.n	8003c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800

08003c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0d0      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c98:	4b6a      	ldr	r3, [pc, #424]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d910      	bls.n	8003cc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b67      	ldr	r3, [pc, #412]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 020f 	bic.w	r2, r3, #15
 8003cae:	4965      	ldr	r1, [pc, #404]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb6:	4b63      	ldr	r3, [pc, #396]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0b8      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d020      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ce0:	4b59      	ldr	r3, [pc, #356]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4a58      	ldr	r2, [pc, #352]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf8:	4b53      	ldr	r3, [pc, #332]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4a52      	ldr	r2, [pc, #328]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d04:	4b50      	ldr	r3, [pc, #320]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	494d      	ldr	r1, [pc, #308]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d040      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d107      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2a:	4b47      	ldr	r3, [pc, #284]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d115      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e07f      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d107      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d42:	4b41      	ldr	r3, [pc, #260]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e073      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d52:	4b3d      	ldr	r3, [pc, #244]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e06b      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d62:	4b39      	ldr	r3, [pc, #228]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f023 0203 	bic.w	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4936      	ldr	r1, [pc, #216]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d74:	f7fe fb8c 	bl	8002490 <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7c:	f7fe fb88 	bl	8002490 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e053      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	4b2d      	ldr	r3, [pc, #180]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 020c 	and.w	r2, r3, #12
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d1eb      	bne.n	8003d7c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da4:	4b27      	ldr	r3, [pc, #156]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d210      	bcs.n	8003dd4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 020f 	bic.w	r2, r3, #15
 8003dba:	4922      	ldr	r1, [pc, #136]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc2:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e032      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	4916      	ldr	r1, [pc, #88]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dfe:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	490e      	ldr	r1, [pc, #56]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e12:	f000 f821 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 8003e16:	4602      	mov	r2, r0
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	490a      	ldr	r1, [pc, #40]	; (8003e4c <HAL_RCC_ClockConfig+0x1cc>)
 8003e24:	5ccb      	ldrb	r3, [r1, r3]
 8003e26:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2a:	4a09      	ldr	r2, [pc, #36]	; (8003e50 <HAL_RCC_ClockConfig+0x1d0>)
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e2e:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <HAL_RCC_ClockConfig+0x1d4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe fae8 	bl	8002408 <HAL_InitTick>

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40023c00 	.word	0x40023c00
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	0800b898 	.word	0x0800b898
 8003e50:	20000004 	.word	0x20000004
 8003e54:	20000008 	.word	0x20000008

08003e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e5c:	b094      	sub	sp, #80	; 0x50
 8003e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	647b      	str	r3, [r7, #68]	; 0x44
 8003e64:	2300      	movs	r3, #0
 8003e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e68:	2300      	movs	r3, #0
 8003e6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e70:	4b79      	ldr	r3, [pc, #484]	; (8004058 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 030c 	and.w	r3, r3, #12
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d00d      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x40>
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	f200 80e1 	bhi.w	8004044 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0x34>
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d003      	beq.n	8003e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e8a:	e0db      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e8c:	4b73      	ldr	r3, [pc, #460]	; (800405c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e90:	e0db      	b.n	800404a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e92:	4b72      	ldr	r3, [pc, #456]	; (800405c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e96:	e0d8      	b.n	800404a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e98:	4b6f      	ldr	r3, [pc, #444]	; (8004058 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ea2:	4b6d      	ldr	r3, [pc, #436]	; (8004058 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d063      	beq.n	8003f76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eae:	4b6a      	ldr	r3, [pc, #424]	; (8004058 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	099b      	lsrs	r3, r3, #6
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003eca:	4622      	mov	r2, r4
 8003ecc:	462b      	mov	r3, r5
 8003ece:	f04f 0000 	mov.w	r0, #0
 8003ed2:	f04f 0100 	mov.w	r1, #0
 8003ed6:	0159      	lsls	r1, r3, #5
 8003ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003edc:	0150      	lsls	r0, r2, #5
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	1a51      	subs	r1, r2, r1
 8003ee6:	6139      	str	r1, [r7, #16]
 8003ee8:	4629      	mov	r1, r5
 8003eea:	eb63 0301 	sbc.w	r3, r3, r1
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003efc:	4659      	mov	r1, fp
 8003efe:	018b      	lsls	r3, r1, #6
 8003f00:	4651      	mov	r1, sl
 8003f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f06:	4651      	mov	r1, sl
 8003f08:	018a      	lsls	r2, r1, #6
 8003f0a:	4651      	mov	r1, sl
 8003f0c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f10:	4659      	mov	r1, fp
 8003f12:	eb63 0901 	sbc.w	r9, r3, r1
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f2a:	4690      	mov	r8, r2
 8003f2c:	4699      	mov	r9, r3
 8003f2e:	4623      	mov	r3, r4
 8003f30:	eb18 0303 	adds.w	r3, r8, r3
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	462b      	mov	r3, r5
 8003f38:	eb49 0303 	adc.w	r3, r9, r3
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	028b      	lsls	r3, r1, #10
 8003f4e:	4621      	mov	r1, r4
 8003f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f54:	4621      	mov	r1, r4
 8003f56:	028a      	lsls	r2, r1, #10
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f5e:	2200      	movs	r2, #0
 8003f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f68:	f7fc fb7e 	bl	8000668 <__aeabi_uldivmod>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4613      	mov	r3, r2
 8003f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f74:	e058      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f76:	4b38      	ldr	r3, [pc, #224]	; (8004058 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	099b      	lsrs	r3, r3, #6
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	4611      	mov	r1, r2
 8003f82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f86:	623b      	str	r3, [r7, #32]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f90:	4642      	mov	r2, r8
 8003f92:	464b      	mov	r3, r9
 8003f94:	f04f 0000 	mov.w	r0, #0
 8003f98:	f04f 0100 	mov.w	r1, #0
 8003f9c:	0159      	lsls	r1, r3, #5
 8003f9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa2:	0150      	lsls	r0, r2, #5
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4641      	mov	r1, r8
 8003faa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fae:	4649      	mov	r1, r9
 8003fb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fc8:	ebb2 040a 	subs.w	r4, r2, sl
 8003fcc:	eb63 050b 	sbc.w	r5, r3, fp
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	00eb      	lsls	r3, r5, #3
 8003fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fde:	00e2      	lsls	r2, r4, #3
 8003fe0:	4614      	mov	r4, r2
 8003fe2:	461d      	mov	r5, r3
 8003fe4:	4643      	mov	r3, r8
 8003fe6:	18e3      	adds	r3, r4, r3
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	464b      	mov	r3, r9
 8003fec:	eb45 0303 	adc.w	r3, r5, r3
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ffe:	4629      	mov	r1, r5
 8004000:	028b      	lsls	r3, r1, #10
 8004002:	4621      	mov	r1, r4
 8004004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004008:	4621      	mov	r1, r4
 800400a:	028a      	lsls	r2, r1, #10
 800400c:	4610      	mov	r0, r2
 800400e:	4619      	mov	r1, r3
 8004010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004012:	2200      	movs	r2, #0
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	61fa      	str	r2, [r7, #28]
 8004018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800401c:	f7fc fb24 	bl	8000668 <__aeabi_uldivmod>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4613      	mov	r3, r2
 8004026:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_GetSysClockFreq+0x200>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	3301      	adds	r3, #1
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004038:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800403a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800403c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004040:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004042:	e002      	b.n	800404a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_RCC_GetSysClockFreq+0x204>)
 8004046:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800404a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800404c:	4618      	mov	r0, r3
 800404e:	3750      	adds	r7, #80	; 0x50
 8004050:	46bd      	mov	sp, r7
 8004052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800
 800405c:	00f42400 	.word	0x00f42400

08004060 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <HAL_RCC_GetHCLKFreq+0x14>)
 8004066:	681b      	ldr	r3, [r3, #0]
}
 8004068:	4618      	mov	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000004 	.word	0x20000004

08004078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800407c:	f7ff fff0 	bl	8004060 <HAL_RCC_GetHCLKFreq>
 8004080:	4602      	mov	r2, r0
 8004082:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	0a9b      	lsrs	r3, r3, #10
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	4903      	ldr	r1, [pc, #12]	; (800409c <HAL_RCC_GetPCLK1Freq+0x24>)
 800408e:	5ccb      	ldrb	r3, [r1, r3]
 8004090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004094:	4618      	mov	r0, r3
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40023800 	.word	0x40023800
 800409c:	0800b8a8 	.word	0x0800b8a8

080040a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040a4:	f7ff ffdc 	bl	8004060 <HAL_RCC_GetHCLKFreq>
 80040a8:	4602      	mov	r2, r0
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	0b5b      	lsrs	r3, r3, #13
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	4903      	ldr	r1, [pc, #12]	; (80040c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040b6:	5ccb      	ldrb	r3, [r1, r3]
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040bc:	4618      	mov	r0, r3
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40023800 	.word	0x40023800
 80040c4:	0800b8a8 	.word	0x0800b8a8

080040c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d012      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040f0:	4b69      	ldr	r3, [pc, #420]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a68      	ldr	r2, [pc, #416]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040fa:	6093      	str	r3, [r2, #8]
 80040fc:	4b66      	ldr	r3, [pc, #408]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004104:	4964      	ldr	r1, [pc, #400]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004112:	2301      	movs	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d017      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004122:	4b5d      	ldr	r3, [pc, #372]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004130:	4959      	ldr	r1, [pc, #356]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004140:	d101      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004142:	2301      	movs	r3, #1
 8004144:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800414e:	2301      	movs	r3, #1
 8004150:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d017      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800415e:	4b4e      	ldr	r3, [pc, #312]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004164:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	494a      	ldr	r1, [pc, #296]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800417c:	d101      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800417e:	2301      	movs	r3, #1
 8004180:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800418a:	2301      	movs	r3, #1
 800418c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800419a:	2301      	movs	r3, #1
 800419c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 808b 	beq.w	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041ac:	4b3a      	ldr	r3, [pc, #232]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	4a39      	ldr	r2, [pc, #228]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b6:	6413      	str	r3, [r2, #64]	; 0x40
 80041b8:	4b37      	ldr	r3, [pc, #220]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041c4:	4b35      	ldr	r3, [pc, #212]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a34      	ldr	r2, [pc, #208]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d0:	f7fe f95e 	bl	8002490 <HAL_GetTick>
 80041d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d8:	f7fe f95a 	bl	8002490 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	; 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e38f      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041ea:	4b2c      	ldr	r3, [pc, #176]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041f6:	4b28      	ldr	r3, [pc, #160]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d035      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	429a      	cmp	r2, r3
 8004212:	d02e      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004214:	4b20      	ldr	r3, [pc, #128]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800421e:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4a1d      	ldr	r2, [pc, #116]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004228:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800422a:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a1a      	ldr	r2, [pc, #104]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004234:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004236:	4a18      	ldr	r2, [pc, #96]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800423c:	4b16      	ldr	r3, [pc, #88]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d114      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fe f922 	bl	8002490 <HAL_GetTick>
 800424c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424e:	e00a      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004250:	f7fe f91e 	bl	8002490 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	; 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e351      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004266:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0ee      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800427e:	d111      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800428e:	400b      	ands	r3, r1
 8004290:	4901      	ldr	r1, [pc, #4]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
 8004296:	e00b      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004298:	40023800 	.word	0x40023800
 800429c:	40007000 	.word	0x40007000
 80042a0:	0ffffcff 	.word	0x0ffffcff
 80042a4:	4bac      	ldr	r3, [pc, #688]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4aab      	ldr	r2, [pc, #684]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042ae:	6093      	str	r3, [r2, #8]
 80042b0:	4ba9      	ldr	r3, [pc, #676]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042bc:	49a6      	ldr	r1, [pc, #664]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d010      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042ce:	4ba2      	ldr	r3, [pc, #648]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d4:	4aa0      	ldr	r2, [pc, #640]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042de:	4b9e      	ldr	r3, [pc, #632]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	499b      	ldr	r1, [pc, #620]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042fc:	4b96      	ldr	r3, [pc, #600]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800430a:	4993      	ldr	r1, [pc, #588]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800431e:	4b8e      	ldr	r3, [pc, #568]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800432c:	498a      	ldr	r1, [pc, #552]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004340:	4b85      	ldr	r3, [pc, #532]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434e:	4982      	ldr	r1, [pc, #520]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004362:	4b7d      	ldr	r3, [pc, #500]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	4979      	ldr	r1, [pc, #484]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004384:	4b74      	ldr	r3, [pc, #464]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f023 0203 	bic.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	4971      	ldr	r1, [pc, #452]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043a6:	4b6c      	ldr	r3, [pc, #432]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ac:	f023 020c 	bic.w	r2, r3, #12
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b4:	4968      	ldr	r1, [pc, #416]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043c8:	4b63      	ldr	r3, [pc, #396]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d6:	4960      	ldr	r1, [pc, #384]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043ea:	4b5b      	ldr	r3, [pc, #364]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f8:	4957      	ldr	r1, [pc, #348]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800440c:	4b52      	ldr	r3, [pc, #328]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	494f      	ldr	r1, [pc, #316]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800442e:	4b4a      	ldr	r3, [pc, #296]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004434:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	4946      	ldr	r1, [pc, #280]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004450:	4b41      	ldr	r3, [pc, #260]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445e:	493e      	ldr	r1, [pc, #248]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004472:	4b39      	ldr	r3, [pc, #228]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004478:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004480:	4935      	ldr	r1, [pc, #212]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004494:	4b30      	ldr	r3, [pc, #192]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a2:	492d      	ldr	r1, [pc, #180]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d011      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044b6:	4b28      	ldr	r3, [pc, #160]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c4:	4924      	ldr	r1, [pc, #144]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044d4:	d101      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044f6:	4b18      	ldr	r3, [pc, #96]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004504:	4914      	ldr	r1, [pc, #80]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00b      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004528:	490b      	ldr	r1, [pc, #44]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00f      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454c:	4902      	ldr	r1, [pc, #8]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004554:	e002      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004556:	bf00      	nop
 8004558:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00b      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004568:	4b8a      	ldr	r3, [pc, #552]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800456a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800456e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004578:	4986      	ldr	r1, [pc, #536]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00b      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800458c:	4b81      	ldr	r3, [pc, #516]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004592:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800459c:	497d      	ldr	r1, [pc, #500]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d006      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80d6 	beq.w	8004764 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045b8:	4b76      	ldr	r3, [pc, #472]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a75      	ldr	r2, [pc, #468]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c4:	f7fd ff64 	bl	8002490 <HAL_GetTick>
 80045c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045cc:	f7fd ff60 	bl	8002490 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	; 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e195      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045de:	4b6d      	ldr	r3, [pc, #436]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d021      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d11d      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045fe:	4b65      	ldr	r3, [pc, #404]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800460c:	4b61      	ldr	r3, [pc, #388]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800460e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004612:	0e1b      	lsrs	r3, r3, #24
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	019a      	lsls	r2, r3, #6
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	041b      	lsls	r3, r3, #16
 8004624:	431a      	orrs	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	061b      	lsls	r3, r3, #24
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	071b      	lsls	r3, r3, #28
 8004632:	4958      	ldr	r1, [pc, #352]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004658:	2b00      	cmp	r3, #0
 800465a:	d02e      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004664:	d129      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004666:	4b4b      	ldr	r3, [pc, #300]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004674:	4b47      	ldr	r3, [pc, #284]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467a:	0f1b      	lsrs	r3, r3, #28
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	019a      	lsls	r2, r3, #6
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	041b      	lsls	r3, r3, #16
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	061b      	lsls	r3, r3, #24
 8004694:	431a      	orrs	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	071b      	lsls	r3, r3, #28
 800469a:	493e      	ldr	r1, [pc, #248]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046a2:	4b3c      	ldr	r3, [pc, #240]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a8:	f023 021f 	bic.w	r2, r3, #31
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	3b01      	subs	r3, #1
 80046b2:	4938      	ldr	r1, [pc, #224]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d01d      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046c6:	4b33      	ldr	r3, [pc, #204]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046cc:	0e1b      	lsrs	r3, r3, #24
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046d4:	4b2f      	ldr	r3, [pc, #188]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046da:	0f1b      	lsrs	r3, r3, #28
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	019a      	lsls	r2, r3, #6
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	431a      	orrs	r2, r3
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	061b      	lsls	r3, r3, #24
 80046f4:	431a      	orrs	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	071b      	lsls	r3, r3, #28
 80046fa:	4926      	ldr	r1, [pc, #152]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d011      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	019a      	lsls	r2, r3, #6
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	061b      	lsls	r3, r3, #24
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	071b      	lsls	r3, r3, #28
 800472a:	491a      	ldr	r1, [pc, #104]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004732:	4b18      	ldr	r3, [pc, #96]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a17      	ldr	r2, [pc, #92]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004738:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800473c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473e:	f7fd fea7 	bl	8002490 <HAL_GetTick>
 8004742:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004744:	e008      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004746:	f7fd fea3 	bl	8002490 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b64      	cmp	r3, #100	; 0x64
 8004752:	d901      	bls.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e0d8      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004758:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b01      	cmp	r3, #1
 8004768:	f040 80ce 	bne.w	8004908 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800476c:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a08      	ldr	r2, [pc, #32]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004778:	f7fd fe8a 	bl	8002490 <HAL_GetTick>
 800477c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800477e:	e00b      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004780:	f7fd fe86 	bl	8002490 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	; 0x64
 800478c:	d904      	bls.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e0bb      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004798:	4b5e      	ldr	r3, [pc, #376]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a4:	d0ec      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d02e      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d12a      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047ce:	4b51      	ldr	r3, [pc, #324]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d4:	0c1b      	lsrs	r3, r3, #16
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047dc:	4b4d      	ldr	r3, [pc, #308]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	0f1b      	lsrs	r3, r3, #28
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	019a      	lsls	r2, r3, #6
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	041b      	lsls	r3, r3, #16
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	061b      	lsls	r3, r3, #24
 80047fc:	431a      	orrs	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	071b      	lsls	r3, r3, #28
 8004802:	4944      	ldr	r1, [pc, #272]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800480a:	4b42      	ldr	r3, [pc, #264]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800480c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004810:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	021b      	lsls	r3, r3, #8
 800481c:	493d      	ldr	r1, [pc, #244]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d022      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004838:	d11d      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800483a:	4b36      	ldr	r3, [pc, #216]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	0e1b      	lsrs	r3, r3, #24
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004848:	4b32      	ldr	r3, [pc, #200]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	0f1b      	lsrs	r3, r3, #28
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	019a      	lsls	r2, r3, #6
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	041b      	lsls	r3, r3, #16
 8004862:	431a      	orrs	r2, r3
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	061b      	lsls	r3, r3, #24
 8004868:	431a      	orrs	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	071b      	lsls	r3, r3, #28
 800486e:	4929      	ldr	r1, [pc, #164]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d028      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004882:	4b24      	ldr	r3, [pc, #144]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004888:	0e1b      	lsrs	r3, r3, #24
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004890:	4b20      	ldr	r3, [pc, #128]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	0c1b      	lsrs	r3, r3, #16
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	019a      	lsls	r2, r3, #6
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	041b      	lsls	r3, r3, #16
 80048a8:	431a      	orrs	r2, r3
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	061b      	lsls	r3, r3, #24
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	071b      	lsls	r3, r3, #28
 80048b6:	4917      	ldr	r1, [pc, #92]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048be:	4b15      	ldr	r3, [pc, #84]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	4911      	ldr	r1, [pc, #68]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048d4:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a0e      	ldr	r2, [pc, #56]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e0:	f7fd fdd6 	bl	8002490 <HAL_GetTick>
 80048e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048e8:	f7fd fdd2 	bl	8002490 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b64      	cmp	r3, #100	; 0x64
 80048f4:	d901      	bls.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e007      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048fa:	4b06      	ldr	r3, [pc, #24]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004906:	d1ef      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800

08004918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e09d      	b.n	8004a66 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	2b00      	cmp	r3, #0
 8004930:	d108      	bne.n	8004944 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800493a:	d009      	beq.n	8004950 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	61da      	str	r2, [r3, #28]
 8004942:	e005      	b.n	8004950 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd f986 	bl	8001c7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004986:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004990:	d902      	bls.n	8004998 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e002      	b.n	800499e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800499c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049a6:	d007      	beq.n	80049b8 <HAL_SPI_Init+0xa0>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049b0:	d002      	beq.n	80049b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	ea42 0103 	orr.w	r1, r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	0c1b      	lsrs	r3, r3, #16
 8004a14:	f003 0204 	and.w	r2, r3, #4
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a34:	ea42 0103 	orr.w	r1, r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b088      	sub	sp, #32
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_SPI_Transmit+0x22>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e158      	b.n	8004d42 <HAL_SPI_Transmit+0x2d4>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a98:	f7fd fcfa 	bl	8002490 <HAL_GetTick>
 8004a9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d002      	beq.n	8004ab4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ab2:	e13d      	b.n	8004d30 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_SPI_Transmit+0x52>
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ac4:	e134      	b.n	8004d30 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2203      	movs	r2, #3
 8004aca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	88fa      	ldrh	r2, [r7, #6]
 8004ade:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	88fa      	ldrh	r2, [r7, #6]
 8004ae4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b10:	d10f      	bne.n	8004b32 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3c:	2b40      	cmp	r3, #64	; 0x40
 8004b3e:	d007      	beq.n	8004b50 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b58:	d94b      	bls.n	8004bf2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <HAL_SPI_Transmit+0xfa>
 8004b62:	8afb      	ldrh	r3, [r7, #22]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d13e      	bne.n	8004be6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	881a      	ldrh	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	1c9a      	adds	r2, r3, #2
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b8c:	e02b      	b.n	8004be6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d112      	bne.n	8004bc2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	881a      	ldrh	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	1c9a      	adds	r2, r3, #2
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bc0:	e011      	b.n	8004be6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bc2:	f7fd fc65 	bl	8002490 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d803      	bhi.n	8004bda <HAL_SPI_Transmit+0x16c>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d102      	bne.n	8004be0 <HAL_SPI_Transmit+0x172>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d102      	bne.n	8004be6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004be4:	e0a4      	b.n	8004d30 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1ce      	bne.n	8004b8e <HAL_SPI_Transmit+0x120>
 8004bf0:	e07c      	b.n	8004cec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_SPI_Transmit+0x192>
 8004bfa:	8afb      	ldrh	r3, [r7, #22]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d170      	bne.n	8004ce2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d912      	bls.n	8004c30 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	881a      	ldrh	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	1c9a      	adds	r2, r3, #2
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b02      	subs	r3, #2
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c2e:	e058      	b.n	8004ce2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	7812      	ldrb	r2, [r2, #0]
 8004c3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004c56:	e044      	b.n	8004ce2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d12b      	bne.n	8004cbe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d912      	bls.n	8004c96 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	881a      	ldrh	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	1c9a      	adds	r2, r3, #2
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b02      	subs	r3, #2
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c94:	e025      	b.n	8004ce2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	7812      	ldrb	r2, [r2, #0]
 8004ca2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cbc:	e011      	b.n	8004ce2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cbe:	f7fd fbe7 	bl	8002490 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d803      	bhi.n	8004cd6 <HAL_SPI_Transmit+0x268>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d102      	bne.n	8004cdc <HAL_SPI_Transmit+0x26e>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d102      	bne.n	8004ce2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ce0:	e026      	b.n	8004d30 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1b5      	bne.n	8004c58 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	6839      	ldr	r1, [r7, #0]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 fb5b 	bl	80053ac <SPI_EndRxTxTransaction>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e000      	b.n	8004d30 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004d2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d40:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3720      	adds	r7, #32
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b08a      	sub	sp, #40	; 0x28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
 8004d56:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x26>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e1fb      	b.n	8005168 <HAL_SPI_TransmitReceive+0x41e>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d78:	f7fd fb8a 	bl	8002490 <HAL_GetTick>
 8004d7c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d84:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004d8c:	887b      	ldrh	r3, [r7, #2]
 8004d8e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004d90:	887b      	ldrh	r3, [r7, #2]
 8004d92:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d94:	7efb      	ldrb	r3, [r7, #27]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d00e      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0x6e>
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004da0:	d106      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d102      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x66>
 8004daa:	7efb      	ldrb	r3, [r7, #27]
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d003      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004db0:	2302      	movs	r3, #2
 8004db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004db6:	e1cd      	b.n	8005154 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_SPI_TransmitReceive+0x80>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_SPI_TransmitReceive+0x80>
 8004dc4:	887b      	ldrh	r3, [r7, #2]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d103      	bne.n	8004dd2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004dd0:	e1c0      	b.n	8005154 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d003      	beq.n	8004de6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2205      	movs	r2, #5
 8004de2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	887a      	ldrh	r2, [r7, #2]
 8004df6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	887a      	ldrh	r2, [r7, #2]
 8004dfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	887a      	ldrh	r2, [r7, #2]
 8004e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	887a      	ldrh	r2, [r7, #2]
 8004e12:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e28:	d802      	bhi.n	8004e30 <HAL_SPI_TransmitReceive+0xe6>
 8004e2a:	8a3b      	ldrh	r3, [r7, #16]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d908      	bls.n	8004e42 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e3e:	605a      	str	r2, [r3, #4]
 8004e40:	e007      	b.n	8004e52 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e50:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	d007      	beq.n	8004e70 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e78:	d97c      	bls.n	8004f74 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_SPI_TransmitReceive+0x13e>
 8004e82:	8a7b      	ldrh	r3, [r7, #18]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d169      	bne.n	8004f5c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	881a      	ldrh	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	1c9a      	adds	r2, r3, #2
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eac:	e056      	b.n	8004f5c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d11b      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x1aa>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d016      	beq.n	8004ef4 <HAL_SPI_TransmitReceive+0x1aa>
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d113      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	881a      	ldrh	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	1c9a      	adds	r2, r3, #2
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d11c      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x1f2>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	b292      	uxth	r2, r2
 8004f1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	1c9a      	adds	r2, r3, #2
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f3c:	f7fd faa8 	bl	8002490 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d807      	bhi.n	8004f5c <HAL_SPI_TransmitReceive+0x212>
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	d003      	beq.n	8004f5c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f5a:	e0fb      	b.n	8005154 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1a3      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x164>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d19d      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x164>
 8004f72:	e0df      	b.n	8005134 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_SPI_TransmitReceive+0x23a>
 8004f7c:	8a7b      	ldrh	r3, [r7, #18]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	f040 80cb 	bne.w	800511a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d912      	bls.n	8004fb4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	881a      	ldrh	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	1c9a      	adds	r2, r3, #2
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b02      	subs	r3, #2
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fb2:	e0b2      	b.n	800511a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	7812      	ldrb	r2, [r2, #0]
 8004fc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fda:	e09e      	b.n	800511a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d134      	bne.n	8005054 <HAL_SPI_TransmitReceive+0x30a>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d02f      	beq.n	8005054 <HAL_SPI_TransmitReceive+0x30a>
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d12c      	bne.n	8005054 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b01      	cmp	r3, #1
 8005002:	d912      	bls.n	800502a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	881a      	ldrh	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	1c9a      	adds	r2, r3, #2
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b02      	subs	r3, #2
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005028:	e012      	b.n	8005050 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	330c      	adds	r3, #12
 8005034:	7812      	ldrb	r2, [r2, #0]
 8005036:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b01      	cmp	r3, #1
 8005060:	d148      	bne.n	80050f4 <HAL_SPI_TransmitReceive+0x3aa>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d042      	beq.n	80050f4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b01      	cmp	r3, #1
 8005078:	d923      	bls.n	80050c2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	b292      	uxth	r2, r2
 8005086:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	1c9a      	adds	r2, r3, #2
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b02      	subs	r3, #2
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d81f      	bhi.n	80050f0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050be:	605a      	str	r2, [r3, #4]
 80050c0:	e016      	b.n	80050f0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f103 020c 	add.w	r2, r3, #12
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	7812      	ldrb	r2, [r2, #0]
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050f0:	2301      	movs	r3, #1
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050f4:	f7fd f9cc 	bl	8002490 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005100:	429a      	cmp	r2, r3
 8005102:	d803      	bhi.n	800510c <HAL_SPI_TransmitReceive+0x3c2>
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510a:	d102      	bne.n	8005112 <HAL_SPI_TransmitReceive+0x3c8>
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	2b00      	cmp	r3, #0
 8005110:	d103      	bne.n	800511a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005118:	e01c      	b.n	8005154 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	f47f af5b 	bne.w	8004fdc <HAL_SPI_TransmitReceive+0x292>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	f47f af54 	bne.w	8004fdc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f937 	bl	80053ac <SPI_EndRxTxTransaction>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d006      	beq.n	8005152 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2220      	movs	r2, #32
 800514e:	661a      	str	r2, [r3, #96]	; 0x60
 8005150:	e000      	b.n	8005154 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005152:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005164:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005168:	4618      	mov	r0, r3
 800516a:	3728      	adds	r7, #40	; 0x28
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	4613      	mov	r3, r2
 800517e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005180:	f7fd f986 	bl	8002490 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	4413      	add	r3, r2
 800518e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005190:	f7fd f97e 	bl	8002490 <HAL_GetTick>
 8005194:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005196:	4b39      	ldr	r3, [pc, #228]	; (800527c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	015b      	lsls	r3, r3, #5
 800519c:	0d1b      	lsrs	r3, r3, #20
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	fb02 f303 	mul.w	r3, r2, r3
 80051a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051a6:	e054      	b.n	8005252 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ae:	d050      	beq.n	8005252 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051b0:	f7fd f96e 	bl	8002490 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d902      	bls.n	80051c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d13d      	bne.n	8005242 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051de:	d111      	bne.n	8005204 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e8:	d004      	beq.n	80051f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f2:	d107      	bne.n	8005204 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005202:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520c:	d10f      	bne.n	800522e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800522c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e017      	b.n	8005272 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	3b01      	subs	r3, #1
 8005250:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4013      	ands	r3, r2
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	429a      	cmp	r2, r3
 8005260:	bf0c      	ite	eq
 8005262:	2301      	moveq	r3, #1
 8005264:	2300      	movne	r3, #0
 8005266:	b2db      	uxtb	r3, r3
 8005268:	461a      	mov	r2, r3
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	429a      	cmp	r2, r3
 800526e:	d19b      	bne.n	80051a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000004 	.word	0x20000004

08005280 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08a      	sub	sp, #40	; 0x28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005292:	f7fd f8fd 	bl	8002490 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	4413      	add	r3, r2
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80052a2:	f7fd f8f5 	bl	8002490 <HAL_GetTick>
 80052a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80052b0:	4b3d      	ldr	r3, [pc, #244]	; (80053a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4613      	mov	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	00da      	lsls	r2, r3, #3
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	0d1b      	lsrs	r3, r3, #20
 80052c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c2:	fb02 f303 	mul.w	r3, r2, r3
 80052c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80052c8:	e060      	b.n	800538c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80052d0:	d107      	bne.n	80052e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d104      	bne.n	80052e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e8:	d050      	beq.n	800538c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052ea:	f7fd f8d1 	bl	8002490 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d902      	bls.n	8005300 <SPI_WaitFifoStateUntilTimeout+0x80>
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d13d      	bne.n	800537c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800530e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005318:	d111      	bne.n	800533e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005322:	d004      	beq.n	800532e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800532c:	d107      	bne.n	800533e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800533c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005346:	d10f      	bne.n	8005368 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005366:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e010      	b.n	800539e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	3b01      	subs	r3, #1
 800538a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	4013      	ands	r3, r2
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	429a      	cmp	r2, r3
 800539a:	d196      	bne.n	80052ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3728      	adds	r7, #40	; 0x28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20000004 	.word	0x20000004

080053ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af02      	add	r7, sp, #8
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2200      	movs	r2, #0
 80053c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f7ff ff5b 	bl	8005280 <SPI_WaitFifoStateUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d007      	beq.n	80053e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d4:	f043 0220 	orr.w	r2, r3, #32
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e046      	b.n	800546e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053e0:	4b25      	ldr	r3, [pc, #148]	; (8005478 <SPI_EndRxTxTransaction+0xcc>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a25      	ldr	r2, [pc, #148]	; (800547c <SPI_EndRxTxTransaction+0xd0>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	0d5b      	lsrs	r3, r3, #21
 80053ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053f0:	fb02 f303 	mul.w	r3, r2, r3
 80053f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053fe:	d112      	bne.n	8005426 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	2180      	movs	r1, #128	; 0x80
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff feb0 	bl	8005170 <SPI_WaitFlagStateUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d016      	beq.n	8005444 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541a:	f043 0220 	orr.w	r2, r3, #32
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e023      	b.n	800546e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	3b01      	subs	r3, #1
 8005430:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543c:	2b80      	cmp	r3, #128	; 0x80
 800543e:	d0f2      	beq.n	8005426 <SPI_EndRxTxTransaction+0x7a>
 8005440:	e000      	b.n	8005444 <SPI_EndRxTxTransaction+0x98>
        break;
 8005442:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2200      	movs	r2, #0
 800544c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f7ff ff15 	bl	8005280 <SPI_WaitFifoStateUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005460:	f043 0220 	orr.w	r2, r3, #32
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e000      	b.n	800546e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000004 	.word	0x20000004
 800547c:	165e9f81 	.word	0x165e9f81

08005480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e049      	b.n	8005526 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fc fe36 	bl	8002118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4619      	mov	r1, r3
 80054be:	4610      	mov	r0, r2
 80054c0:	f000 fa46 	bl	8005950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b02      	cmp	r3, #2
 8005542:	d122      	bne.n	800558a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b02      	cmp	r3, #2
 8005550:	d11b      	bne.n	800558a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f06f 0202 	mvn.w	r2, #2
 800555a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f9cf 	bl	8005914 <HAL_TIM_IC_CaptureCallback>
 8005576:	e005      	b.n	8005584 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f9c1 	bl	8005900 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f9d2 	bl	8005928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b04      	cmp	r3, #4
 8005596:	d122      	bne.n	80055de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d11b      	bne.n	80055de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f06f 0204 	mvn.w	r2, #4
 80055ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f9a5 	bl	8005914 <HAL_TIM_IC_CaptureCallback>
 80055ca:	e005      	b.n	80055d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f997 	bl	8005900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f9a8 	bl	8005928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d122      	bne.n	8005632 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d11b      	bne.n	8005632 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f06f 0208 	mvn.w	r2, #8
 8005602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2204      	movs	r2, #4
 8005608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f97b 	bl	8005914 <HAL_TIM_IC_CaptureCallback>
 800561e:	e005      	b.n	800562c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f96d 	bl	8005900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f97e 	bl	8005928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b10      	cmp	r3, #16
 800563e:	d122      	bne.n	8005686 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b10      	cmp	r3, #16
 800564c:	d11b      	bne.n	8005686 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f06f 0210 	mvn.w	r2, #16
 8005656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2208      	movs	r2, #8
 800565c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f951 	bl	8005914 <HAL_TIM_IC_CaptureCallback>
 8005672:	e005      	b.n	8005680 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f943 	bl	8005900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f954 	bl	8005928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b01      	cmp	r3, #1
 8005692:	d10e      	bne.n	80056b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d107      	bne.n	80056b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f06f 0201 	mvn.w	r2, #1
 80056aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7fc fd71 	bl	8002194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056bc:	2b80      	cmp	r3, #128	; 0x80
 80056be:	d10e      	bne.n	80056de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ca:	2b80      	cmp	r3, #128	; 0x80
 80056cc:	d107      	bne.n	80056de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fb0b 	bl	8005cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ec:	d10e      	bne.n	800570c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f8:	2b80      	cmp	r3, #128	; 0x80
 80056fa:	d107      	bne.n	800570c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fafe 	bl	8005d08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005716:	2b40      	cmp	r3, #64	; 0x40
 8005718:	d10e      	bne.n	8005738 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005724:	2b40      	cmp	r3, #64	; 0x40
 8005726:	d107      	bne.n	8005738 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f902 	bl	800593c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0320 	and.w	r3, r3, #32
 8005742:	2b20      	cmp	r3, #32
 8005744:	d10e      	bne.n	8005764 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b20      	cmp	r3, #32
 8005752:	d107      	bne.n	8005764 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0220 	mvn.w	r2, #32
 800575c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fabe 	bl	8005ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005764:	bf00      	nop
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_TIM_ConfigClockSource+0x1c>
 8005784:	2302      	movs	r3, #2
 8005786:	e0b4      	b.n	80058f2 <HAL_TIM_ConfigClockSource+0x186>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	4b56      	ldr	r3, [pc, #344]	; (80058fc <HAL_TIM_ConfigClockSource+0x190>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c0:	d03e      	beq.n	8005840 <HAL_TIM_ConfigClockSource+0xd4>
 80057c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c6:	f200 8087 	bhi.w	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ce:	f000 8086 	beq.w	80058de <HAL_TIM_ConfigClockSource+0x172>
 80057d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d6:	d87f      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057d8:	2b70      	cmp	r3, #112	; 0x70
 80057da:	d01a      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0xa6>
 80057dc:	2b70      	cmp	r3, #112	; 0x70
 80057de:	d87b      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057e0:	2b60      	cmp	r3, #96	; 0x60
 80057e2:	d050      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x11a>
 80057e4:	2b60      	cmp	r3, #96	; 0x60
 80057e6:	d877      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057e8:	2b50      	cmp	r3, #80	; 0x50
 80057ea:	d03c      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0xfa>
 80057ec:	2b50      	cmp	r3, #80	; 0x50
 80057ee:	d873      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057f0:	2b40      	cmp	r3, #64	; 0x40
 80057f2:	d058      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x13a>
 80057f4:	2b40      	cmp	r3, #64	; 0x40
 80057f6:	d86f      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057f8:	2b30      	cmp	r3, #48	; 0x30
 80057fa:	d064      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 80057fc:	2b30      	cmp	r3, #48	; 0x30
 80057fe:	d86b      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005800:	2b20      	cmp	r3, #32
 8005802:	d060      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005804:	2b20      	cmp	r3, #32
 8005806:	d867      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005808:	2b00      	cmp	r3, #0
 800580a:	d05c      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 800580c:	2b10      	cmp	r3, #16
 800580e:	d05a      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005810:	e062      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6899      	ldr	r1, [r3, #8]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f000 f9af 	bl	8005b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	609a      	str	r2, [r3, #8]
      break;
 800583e:	e04f      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	6899      	ldr	r1, [r3, #8]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f000 f998 	bl	8005b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005862:	609a      	str	r2, [r3, #8]
      break;
 8005864:	e03c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6859      	ldr	r1, [r3, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	461a      	mov	r2, r3
 8005874:	f000 f90c 	bl	8005a90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2150      	movs	r1, #80	; 0x50
 800587e:	4618      	mov	r0, r3
 8005880:	f000 f965 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 8005884:	e02c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	6859      	ldr	r1, [r3, #4]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	461a      	mov	r2, r3
 8005894:	f000 f92b 	bl	8005aee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2160      	movs	r1, #96	; 0x60
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 f955 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 80058a4:	e01c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	6859      	ldr	r1, [r3, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	461a      	mov	r2, r3
 80058b4:	f000 f8ec 	bl	8005a90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2140      	movs	r1, #64	; 0x40
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 f945 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 80058c4:	e00c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4619      	mov	r1, r3
 80058d0:	4610      	mov	r0, r2
 80058d2:	f000 f93c 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 80058d6:	e003      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
      break;
 80058dc:	e000      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	fffeff88 	.word	0xfffeff88

08005900 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a40      	ldr	r2, [pc, #256]	; (8005a64 <TIM_Base_SetConfig+0x114>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d013      	beq.n	8005990 <TIM_Base_SetConfig+0x40>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596e:	d00f      	beq.n	8005990 <TIM_Base_SetConfig+0x40>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a3d      	ldr	r2, [pc, #244]	; (8005a68 <TIM_Base_SetConfig+0x118>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00b      	beq.n	8005990 <TIM_Base_SetConfig+0x40>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a3c      	ldr	r2, [pc, #240]	; (8005a6c <TIM_Base_SetConfig+0x11c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d007      	beq.n	8005990 <TIM_Base_SetConfig+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a3b      	ldr	r2, [pc, #236]	; (8005a70 <TIM_Base_SetConfig+0x120>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a3a      	ldr	r2, [pc, #232]	; (8005a74 <TIM_Base_SetConfig+0x124>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d108      	bne.n	80059a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a2f      	ldr	r2, [pc, #188]	; (8005a64 <TIM_Base_SetConfig+0x114>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d02b      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b0:	d027      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a2c      	ldr	r2, [pc, #176]	; (8005a68 <TIM_Base_SetConfig+0x118>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d023      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a2b      	ldr	r2, [pc, #172]	; (8005a6c <TIM_Base_SetConfig+0x11c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d01f      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a2a      	ldr	r2, [pc, #168]	; (8005a70 <TIM_Base_SetConfig+0x120>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d01b      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a29      	ldr	r2, [pc, #164]	; (8005a74 <TIM_Base_SetConfig+0x124>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d017      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a28      	ldr	r2, [pc, #160]	; (8005a78 <TIM_Base_SetConfig+0x128>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d013      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a27      	ldr	r2, [pc, #156]	; (8005a7c <TIM_Base_SetConfig+0x12c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00f      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a26      	ldr	r2, [pc, #152]	; (8005a80 <TIM_Base_SetConfig+0x130>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00b      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a25      	ldr	r2, [pc, #148]	; (8005a84 <TIM_Base_SetConfig+0x134>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d007      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a24      	ldr	r2, [pc, #144]	; (8005a88 <TIM_Base_SetConfig+0x138>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d003      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a23      	ldr	r2, [pc, #140]	; (8005a8c <TIM_Base_SetConfig+0x13c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d108      	bne.n	8005a14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <TIM_Base_SetConfig+0x114>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_Base_SetConfig+0xf8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a0c      	ldr	r2, [pc, #48]	; (8005a74 <TIM_Base_SetConfig+0x124>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d103      	bne.n	8005a50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	615a      	str	r2, [r3, #20]
}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40010000 	.word	0x40010000
 8005a68:	40000400 	.word	0x40000400
 8005a6c:	40000800 	.word	0x40000800
 8005a70:	40000c00 	.word	0x40000c00
 8005a74:	40010400 	.word	0x40010400
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40014400 	.word	0x40014400
 8005a80:	40014800 	.word	0x40014800
 8005a84:	40001800 	.word	0x40001800
 8005a88:	40001c00 	.word	0x40001c00
 8005a8c:	40002000 	.word	0x40002000

08005a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f023 0201 	bic.w	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f023 030a 	bic.w	r3, r3, #10
 8005acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	621a      	str	r2, [r3, #32]
}
 8005ae2:	bf00      	nop
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b087      	sub	sp, #28
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f023 0210 	bic.w	r2, r3, #16
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	031b      	lsls	r3, r3, #12
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	011b      	lsls	r3, r3, #4
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f043 0307 	orr.w	r3, r3, #7
 8005b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	609a      	str	r2, [r3, #8]
}
 8005b78:	bf00      	nop
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	021a      	lsls	r2, r3, #8
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	609a      	str	r2, [r3, #8]
}
 8005bb8:	bf00      	nop
 8005bba:	371c      	adds	r7, #28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e06d      	b.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a30      	ldr	r2, [pc, #192]	; (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d004      	beq.n	8005c10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a2f      	ldr	r2, [pc, #188]	; (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d108      	bne.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a20      	ldr	r2, [pc, #128]	; (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d022      	beq.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4e:	d01d      	beq.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a1d      	ldr	r2, [pc, #116]	; (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d018      	beq.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1c      	ldr	r2, [pc, #112]	; (8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d013      	beq.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a1a      	ldr	r2, [pc, #104]	; (8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00e      	beq.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a15      	ldr	r2, [pc, #84]	; (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d009      	beq.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a16      	ldr	r2, [pc, #88]	; (8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d004      	beq.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a15      	ldr	r2, [pc, #84]	; (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d10c      	bne.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	40010000 	.word	0x40010000
 8005cc8:	40010400 	.word	0x40010400
 8005ccc:	40000400 	.word	0x40000400
 8005cd0:	40000800 	.word	0x40000800
 8005cd4:	40000c00 	.word	0x40000c00
 8005cd8:	40014000 	.word	0x40014000
 8005cdc:	40001800 	.word	0x40001800

08005ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e040      	b.n	8005db0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fc fa8a 	bl	8002258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2224      	movs	r2, #36	; 0x24
 8005d48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0201 	bic.w	r2, r2, #1
 8005d58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fb92 	bl	8006484 <UART_SetConfig>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e022      	b.n	8005db0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fdea 	bl	800694c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fe71 	bl	8006a90 <UART_CheckIdleState>
 8005dae:	4603      	mov	r3, r0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b08b      	sub	sp, #44	; 0x2c
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d147      	bne.n	8005e5e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <HAL_UART_Transmit_IT+0x22>
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e040      	b.n	8005e60 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	88fa      	ldrh	r2, [r7, #6]
 8005de8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	88fa      	ldrh	r2, [r7, #6]
 8005df0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2221      	movs	r2, #33	; 0x21
 8005e06:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e10:	d107      	bne.n	8005e22 <HAL_UART_Transmit_IT+0x6a>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d103      	bne.n	8005e22 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4a13      	ldr	r2, [pc, #76]	; (8005e6c <HAL_UART_Transmit_IT+0xb4>)
 8005e1e:	66da      	str	r2, [r3, #108]	; 0x6c
 8005e20:	e002      	b.n	8005e28 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4a12      	ldr	r2, [pc, #72]	; (8005e70 <HAL_UART_Transmit_IT+0xb8>)
 8005e26:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	613b      	str	r3, [r7, #16]
   return(result);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	623b      	str	r3, [r7, #32]
 8005e48:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	69f9      	ldr	r1, [r7, #28]
 8005e4c:	6a3a      	ldr	r2, [r7, #32]
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e6      	bne.n	8005e28 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e000      	b.n	8005e60 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005e5e:	2302      	movs	r3, #2
  }
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	372c      	adds	r7, #44	; 0x2c
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	08006e61 	.word	0x08006e61
 8005e70:	08006dab 	.word	0x08006dab

08005e74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b0ba      	sub	sp, #232	; 0xe8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ea8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d115      	bne.n	8005edc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00f      	beq.n	8005edc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d009      	beq.n	8005edc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 82ac 	beq.w	800642a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	4798      	blx	r3
      }
      return;
 8005eda:	e2a6      	b.n	800642a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005edc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8117 	beq.w	8006114 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ef2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ef6:	4b85      	ldr	r3, [pc, #532]	; (800610c <HAL_UART_IRQHandler+0x298>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 810a 	beq.w	8006114 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d011      	beq.n	8005f30 <HAL_UART_IRQHandler+0xbc>
 8005f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00b      	beq.n	8005f30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f26:	f043 0201 	orr.w	r2, r3, #1
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d011      	beq.n	8005f60 <HAL_UART_IRQHandler+0xec>
 8005f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f56:	f043 0204 	orr.w	r2, r3, #4
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d011      	beq.n	8005f90 <HAL_UART_IRQHandler+0x11c>
 8005f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00b      	beq.n	8005f90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2204      	movs	r2, #4
 8005f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f86:	f043 0202 	orr.w	r2, r3, #2
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d017      	beq.n	8005fcc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d105      	bne.n	8005fb4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2208      	movs	r2, #8
 8005fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fc2:	f043 0208 	orr.w	r2, r3, #8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d012      	beq.n	8005ffe <HAL_UART_IRQHandler+0x18a>
 8005fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00c      	beq.n	8005ffe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ff4:	f043 0220 	orr.w	r2, r3, #32
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8212 	beq.w	800642e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800600a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00d      	beq.n	8006032 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d007      	beq.n	8006032 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006038:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006046:	2b40      	cmp	r3, #64	; 0x40
 8006048:	d005      	beq.n	8006056 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800604a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800604e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006052:	2b00      	cmp	r3, #0
 8006054:	d04f      	beq.n	80060f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fe2d 	bl	8006cb6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	d141      	bne.n	80060ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3308      	adds	r3, #8
 8006070:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006080:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3308      	adds	r3, #8
 8006092:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006096:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800609a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1d9      	bne.n	800606a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d013      	beq.n	80060e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c2:	4a13      	ldr	r2, [pc, #76]	; (8006110 <HAL_UART_IRQHandler+0x29c>)
 80060c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fc fed4 	bl	8002e78 <HAL_DMA_Abort_IT>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d017      	beq.n	8006106 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80060e0:	4610      	mov	r0, r2
 80060e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e4:	e00f      	b.n	8006106 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f9ac 	bl	8006444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ec:	e00b      	b.n	8006106 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f9a8 	bl	8006444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f4:	e007      	b.n	8006106 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f9a4 	bl	8006444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006104:	e193      	b.n	800642e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006106:	bf00      	nop
    return;
 8006108:	e191      	b.n	800642e <HAL_UART_IRQHandler+0x5ba>
 800610a:	bf00      	nop
 800610c:	04000120 	.word	0x04000120
 8006110:	08006d7f 	.word	0x08006d7f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006118:	2b01      	cmp	r3, #1
 800611a:	f040 814c 	bne.w	80063b6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800611e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8145 	beq.w	80063b6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006130:	f003 0310 	and.w	r3, r3, #16
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 813e 	beq.w	80063b6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2210      	movs	r2, #16
 8006140:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614c:	2b40      	cmp	r3, #64	; 0x40
 800614e:	f040 80b6 	bne.w	80062be <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800615e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 8165 	beq.w	8006432 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800616e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006172:	429a      	cmp	r2, r3
 8006174:	f080 815d 	bcs.w	8006432 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800617e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800618c:	f000 8086 	beq.w	800629c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1da      	bne.n	8006190 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3308      	adds	r3, #8
 80061e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3308      	adds	r3, #8
 80061fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006202:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006206:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e1      	bne.n	80061da <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3308      	adds	r3, #8
 800621c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800622c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3308      	adds	r3, #8
 8006236:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800623a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800623c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006240:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e3      	bne.n	8006216 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800626a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800626c:	f023 0310 	bic.w	r3, r3, #16
 8006270:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800627e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006280:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006284:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800628c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e4      	bne.n	800625c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006296:	4618      	mov	r0, r3
 8006298:	f7fc fd7e 	bl	8002d98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f8ce 	bl	8006458 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062bc:	e0b9      	b.n	8006432 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 80ab 	beq.w	8006436 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80062e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 80a6 	beq.w	8006436 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800630c:	647b      	str	r3, [r7, #68]	; 0x44
 800630e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800631a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e4      	bne.n	80062ea <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3308      	adds	r3, #8
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	623b      	str	r3, [r7, #32]
   return(result);
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	f023 0301 	bic.w	r3, r3, #1
 8006336:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3308      	adds	r3, #8
 8006340:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006344:	633a      	str	r2, [r7, #48]	; 0x30
 8006346:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800634a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e3      	bne.n	8006320 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	60fb      	str	r3, [r7, #12]
   return(result);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f023 0310 	bic.w	r3, r3, #16
 8006380:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800638e:	61fb      	str	r3, [r7, #28]
 8006390:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	69b9      	ldr	r1, [r7, #24]
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	617b      	str	r3, [r7, #20]
   return(result);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e4      	bne.n	800636c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2202      	movs	r2, #2
 80063a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f852 	bl	8006458 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063b4:	e03f      	b.n	8006436 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00e      	beq.n	80063e0 <HAL_UART_IRQHandler+0x56c>
 80063c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d008      	beq.n	80063e0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f849 	bl	8006470 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063de:	e02d      	b.n	800643c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00e      	beq.n	800640a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01c      	beq.n	800643a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	4798      	blx	r3
    }
    return;
 8006408:	e017      	b.n	800643a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d012      	beq.n	800643c <HAL_UART_IRQHandler+0x5c8>
 8006416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800641a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00c      	beq.n	800643c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fd7c 	bl	8006f20 <UART_EndTransmit_IT>
    return;
 8006428:	e008      	b.n	800643c <HAL_UART_IRQHandler+0x5c8>
      return;
 800642a:	bf00      	nop
 800642c:	e006      	b.n	800643c <HAL_UART_IRQHandler+0x5c8>
    return;
 800642e:	bf00      	nop
 8006430:	e004      	b.n	800643c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006432:	bf00      	nop
 8006434:	e002      	b.n	800643c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006436:	bf00      	nop
 8006438:	e000      	b.n	800643c <HAL_UART_IRQHandler+0x5c8>
    return;
 800643a:	bf00      	nop
  }

}
 800643c:	37e8      	adds	r7, #232	; 0xe8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop

08006444 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	431a      	orrs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	4ba6      	ldr	r3, [pc, #664]	; (8006748 <UART_SetConfig+0x2c4>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6812      	ldr	r2, [r2, #0]
 80064b6:	6979      	ldr	r1, [r7, #20]
 80064b8:	430b      	orrs	r3, r1
 80064ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a94      	ldr	r2, [pc, #592]	; (800674c <UART_SetConfig+0x2c8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d120      	bne.n	8006542 <UART_SetConfig+0xbe>
 8006500:	4b93      	ldr	r3, [pc, #588]	; (8006750 <UART_SetConfig+0x2cc>)
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	2b03      	cmp	r3, #3
 800650c:	d816      	bhi.n	800653c <UART_SetConfig+0xb8>
 800650e:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <UART_SetConfig+0x90>)
 8006510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006514:	08006525 	.word	0x08006525
 8006518:	08006531 	.word	0x08006531
 800651c:	0800652b 	.word	0x0800652b
 8006520:	08006537 	.word	0x08006537
 8006524:	2301      	movs	r3, #1
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e150      	b.n	80067cc <UART_SetConfig+0x348>
 800652a:	2302      	movs	r3, #2
 800652c:	77fb      	strb	r3, [r7, #31]
 800652e:	e14d      	b.n	80067cc <UART_SetConfig+0x348>
 8006530:	2304      	movs	r3, #4
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e14a      	b.n	80067cc <UART_SetConfig+0x348>
 8006536:	2308      	movs	r3, #8
 8006538:	77fb      	strb	r3, [r7, #31]
 800653a:	e147      	b.n	80067cc <UART_SetConfig+0x348>
 800653c:	2310      	movs	r3, #16
 800653e:	77fb      	strb	r3, [r7, #31]
 8006540:	e144      	b.n	80067cc <UART_SetConfig+0x348>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a83      	ldr	r2, [pc, #524]	; (8006754 <UART_SetConfig+0x2d0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d132      	bne.n	80065b2 <UART_SetConfig+0x12e>
 800654c:	4b80      	ldr	r3, [pc, #512]	; (8006750 <UART_SetConfig+0x2cc>)
 800654e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006552:	f003 030c 	and.w	r3, r3, #12
 8006556:	2b0c      	cmp	r3, #12
 8006558:	d828      	bhi.n	80065ac <UART_SetConfig+0x128>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <UART_SetConfig+0xdc>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006595 	.word	0x08006595
 8006564:	080065ad 	.word	0x080065ad
 8006568:	080065ad 	.word	0x080065ad
 800656c:	080065ad 	.word	0x080065ad
 8006570:	080065a1 	.word	0x080065a1
 8006574:	080065ad 	.word	0x080065ad
 8006578:	080065ad 	.word	0x080065ad
 800657c:	080065ad 	.word	0x080065ad
 8006580:	0800659b 	.word	0x0800659b
 8006584:	080065ad 	.word	0x080065ad
 8006588:	080065ad 	.word	0x080065ad
 800658c:	080065ad 	.word	0x080065ad
 8006590:	080065a7 	.word	0x080065a7
 8006594:	2300      	movs	r3, #0
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e118      	b.n	80067cc <UART_SetConfig+0x348>
 800659a:	2302      	movs	r3, #2
 800659c:	77fb      	strb	r3, [r7, #31]
 800659e:	e115      	b.n	80067cc <UART_SetConfig+0x348>
 80065a0:	2304      	movs	r3, #4
 80065a2:	77fb      	strb	r3, [r7, #31]
 80065a4:	e112      	b.n	80067cc <UART_SetConfig+0x348>
 80065a6:	2308      	movs	r3, #8
 80065a8:	77fb      	strb	r3, [r7, #31]
 80065aa:	e10f      	b.n	80067cc <UART_SetConfig+0x348>
 80065ac:	2310      	movs	r3, #16
 80065ae:	77fb      	strb	r3, [r7, #31]
 80065b0:	e10c      	b.n	80067cc <UART_SetConfig+0x348>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a68      	ldr	r2, [pc, #416]	; (8006758 <UART_SetConfig+0x2d4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d120      	bne.n	80065fe <UART_SetConfig+0x17a>
 80065bc:	4b64      	ldr	r3, [pc, #400]	; (8006750 <UART_SetConfig+0x2cc>)
 80065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065c6:	2b30      	cmp	r3, #48	; 0x30
 80065c8:	d013      	beq.n	80065f2 <UART_SetConfig+0x16e>
 80065ca:	2b30      	cmp	r3, #48	; 0x30
 80065cc:	d814      	bhi.n	80065f8 <UART_SetConfig+0x174>
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	d009      	beq.n	80065e6 <UART_SetConfig+0x162>
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d810      	bhi.n	80065f8 <UART_SetConfig+0x174>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <UART_SetConfig+0x15c>
 80065da:	2b10      	cmp	r3, #16
 80065dc:	d006      	beq.n	80065ec <UART_SetConfig+0x168>
 80065de:	e00b      	b.n	80065f8 <UART_SetConfig+0x174>
 80065e0:	2300      	movs	r3, #0
 80065e2:	77fb      	strb	r3, [r7, #31]
 80065e4:	e0f2      	b.n	80067cc <UART_SetConfig+0x348>
 80065e6:	2302      	movs	r3, #2
 80065e8:	77fb      	strb	r3, [r7, #31]
 80065ea:	e0ef      	b.n	80067cc <UART_SetConfig+0x348>
 80065ec:	2304      	movs	r3, #4
 80065ee:	77fb      	strb	r3, [r7, #31]
 80065f0:	e0ec      	b.n	80067cc <UART_SetConfig+0x348>
 80065f2:	2308      	movs	r3, #8
 80065f4:	77fb      	strb	r3, [r7, #31]
 80065f6:	e0e9      	b.n	80067cc <UART_SetConfig+0x348>
 80065f8:	2310      	movs	r3, #16
 80065fa:	77fb      	strb	r3, [r7, #31]
 80065fc:	e0e6      	b.n	80067cc <UART_SetConfig+0x348>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a56      	ldr	r2, [pc, #344]	; (800675c <UART_SetConfig+0x2d8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d120      	bne.n	800664a <UART_SetConfig+0x1c6>
 8006608:	4b51      	ldr	r3, [pc, #324]	; (8006750 <UART_SetConfig+0x2cc>)
 800660a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006612:	2bc0      	cmp	r3, #192	; 0xc0
 8006614:	d013      	beq.n	800663e <UART_SetConfig+0x1ba>
 8006616:	2bc0      	cmp	r3, #192	; 0xc0
 8006618:	d814      	bhi.n	8006644 <UART_SetConfig+0x1c0>
 800661a:	2b80      	cmp	r3, #128	; 0x80
 800661c:	d009      	beq.n	8006632 <UART_SetConfig+0x1ae>
 800661e:	2b80      	cmp	r3, #128	; 0x80
 8006620:	d810      	bhi.n	8006644 <UART_SetConfig+0x1c0>
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <UART_SetConfig+0x1a8>
 8006626:	2b40      	cmp	r3, #64	; 0x40
 8006628:	d006      	beq.n	8006638 <UART_SetConfig+0x1b4>
 800662a:	e00b      	b.n	8006644 <UART_SetConfig+0x1c0>
 800662c:	2300      	movs	r3, #0
 800662e:	77fb      	strb	r3, [r7, #31]
 8006630:	e0cc      	b.n	80067cc <UART_SetConfig+0x348>
 8006632:	2302      	movs	r3, #2
 8006634:	77fb      	strb	r3, [r7, #31]
 8006636:	e0c9      	b.n	80067cc <UART_SetConfig+0x348>
 8006638:	2304      	movs	r3, #4
 800663a:	77fb      	strb	r3, [r7, #31]
 800663c:	e0c6      	b.n	80067cc <UART_SetConfig+0x348>
 800663e:	2308      	movs	r3, #8
 8006640:	77fb      	strb	r3, [r7, #31]
 8006642:	e0c3      	b.n	80067cc <UART_SetConfig+0x348>
 8006644:	2310      	movs	r3, #16
 8006646:	77fb      	strb	r3, [r7, #31]
 8006648:	e0c0      	b.n	80067cc <UART_SetConfig+0x348>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a44      	ldr	r2, [pc, #272]	; (8006760 <UART_SetConfig+0x2dc>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d125      	bne.n	80066a0 <UART_SetConfig+0x21c>
 8006654:	4b3e      	ldr	r3, [pc, #248]	; (8006750 <UART_SetConfig+0x2cc>)
 8006656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800665e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006662:	d017      	beq.n	8006694 <UART_SetConfig+0x210>
 8006664:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006668:	d817      	bhi.n	800669a <UART_SetConfig+0x216>
 800666a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800666e:	d00b      	beq.n	8006688 <UART_SetConfig+0x204>
 8006670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006674:	d811      	bhi.n	800669a <UART_SetConfig+0x216>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <UART_SetConfig+0x1fe>
 800667a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800667e:	d006      	beq.n	800668e <UART_SetConfig+0x20a>
 8006680:	e00b      	b.n	800669a <UART_SetConfig+0x216>
 8006682:	2300      	movs	r3, #0
 8006684:	77fb      	strb	r3, [r7, #31]
 8006686:	e0a1      	b.n	80067cc <UART_SetConfig+0x348>
 8006688:	2302      	movs	r3, #2
 800668a:	77fb      	strb	r3, [r7, #31]
 800668c:	e09e      	b.n	80067cc <UART_SetConfig+0x348>
 800668e:	2304      	movs	r3, #4
 8006690:	77fb      	strb	r3, [r7, #31]
 8006692:	e09b      	b.n	80067cc <UART_SetConfig+0x348>
 8006694:	2308      	movs	r3, #8
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e098      	b.n	80067cc <UART_SetConfig+0x348>
 800669a:	2310      	movs	r3, #16
 800669c:	77fb      	strb	r3, [r7, #31]
 800669e:	e095      	b.n	80067cc <UART_SetConfig+0x348>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a2f      	ldr	r2, [pc, #188]	; (8006764 <UART_SetConfig+0x2e0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d125      	bne.n	80066f6 <UART_SetConfig+0x272>
 80066aa:	4b29      	ldr	r3, [pc, #164]	; (8006750 <UART_SetConfig+0x2cc>)
 80066ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066b8:	d017      	beq.n	80066ea <UART_SetConfig+0x266>
 80066ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066be:	d817      	bhi.n	80066f0 <UART_SetConfig+0x26c>
 80066c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066c4:	d00b      	beq.n	80066de <UART_SetConfig+0x25a>
 80066c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ca:	d811      	bhi.n	80066f0 <UART_SetConfig+0x26c>
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <UART_SetConfig+0x254>
 80066d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d4:	d006      	beq.n	80066e4 <UART_SetConfig+0x260>
 80066d6:	e00b      	b.n	80066f0 <UART_SetConfig+0x26c>
 80066d8:	2301      	movs	r3, #1
 80066da:	77fb      	strb	r3, [r7, #31]
 80066dc:	e076      	b.n	80067cc <UART_SetConfig+0x348>
 80066de:	2302      	movs	r3, #2
 80066e0:	77fb      	strb	r3, [r7, #31]
 80066e2:	e073      	b.n	80067cc <UART_SetConfig+0x348>
 80066e4:	2304      	movs	r3, #4
 80066e6:	77fb      	strb	r3, [r7, #31]
 80066e8:	e070      	b.n	80067cc <UART_SetConfig+0x348>
 80066ea:	2308      	movs	r3, #8
 80066ec:	77fb      	strb	r3, [r7, #31]
 80066ee:	e06d      	b.n	80067cc <UART_SetConfig+0x348>
 80066f0:	2310      	movs	r3, #16
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	e06a      	b.n	80067cc <UART_SetConfig+0x348>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a1b      	ldr	r2, [pc, #108]	; (8006768 <UART_SetConfig+0x2e4>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d138      	bne.n	8006772 <UART_SetConfig+0x2ee>
 8006700:	4b13      	ldr	r3, [pc, #76]	; (8006750 <UART_SetConfig+0x2cc>)
 8006702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006706:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800670a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800670e:	d017      	beq.n	8006740 <UART_SetConfig+0x2bc>
 8006710:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006714:	d82a      	bhi.n	800676c <UART_SetConfig+0x2e8>
 8006716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800671a:	d00b      	beq.n	8006734 <UART_SetConfig+0x2b0>
 800671c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006720:	d824      	bhi.n	800676c <UART_SetConfig+0x2e8>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <UART_SetConfig+0x2aa>
 8006726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672a:	d006      	beq.n	800673a <UART_SetConfig+0x2b6>
 800672c:	e01e      	b.n	800676c <UART_SetConfig+0x2e8>
 800672e:	2300      	movs	r3, #0
 8006730:	77fb      	strb	r3, [r7, #31]
 8006732:	e04b      	b.n	80067cc <UART_SetConfig+0x348>
 8006734:	2302      	movs	r3, #2
 8006736:	77fb      	strb	r3, [r7, #31]
 8006738:	e048      	b.n	80067cc <UART_SetConfig+0x348>
 800673a:	2304      	movs	r3, #4
 800673c:	77fb      	strb	r3, [r7, #31]
 800673e:	e045      	b.n	80067cc <UART_SetConfig+0x348>
 8006740:	2308      	movs	r3, #8
 8006742:	77fb      	strb	r3, [r7, #31]
 8006744:	e042      	b.n	80067cc <UART_SetConfig+0x348>
 8006746:	bf00      	nop
 8006748:	efff69f3 	.word	0xefff69f3
 800674c:	40011000 	.word	0x40011000
 8006750:	40023800 	.word	0x40023800
 8006754:	40004400 	.word	0x40004400
 8006758:	40004800 	.word	0x40004800
 800675c:	40004c00 	.word	0x40004c00
 8006760:	40005000 	.word	0x40005000
 8006764:	40011400 	.word	0x40011400
 8006768:	40007800 	.word	0x40007800
 800676c:	2310      	movs	r3, #16
 800676e:	77fb      	strb	r3, [r7, #31]
 8006770:	e02c      	b.n	80067cc <UART_SetConfig+0x348>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a72      	ldr	r2, [pc, #456]	; (8006940 <UART_SetConfig+0x4bc>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d125      	bne.n	80067c8 <UART_SetConfig+0x344>
 800677c:	4b71      	ldr	r3, [pc, #452]	; (8006944 <UART_SetConfig+0x4c0>)
 800677e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006782:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006786:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800678a:	d017      	beq.n	80067bc <UART_SetConfig+0x338>
 800678c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006790:	d817      	bhi.n	80067c2 <UART_SetConfig+0x33e>
 8006792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006796:	d00b      	beq.n	80067b0 <UART_SetConfig+0x32c>
 8006798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800679c:	d811      	bhi.n	80067c2 <UART_SetConfig+0x33e>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <UART_SetConfig+0x326>
 80067a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067a6:	d006      	beq.n	80067b6 <UART_SetConfig+0x332>
 80067a8:	e00b      	b.n	80067c2 <UART_SetConfig+0x33e>
 80067aa:	2300      	movs	r3, #0
 80067ac:	77fb      	strb	r3, [r7, #31]
 80067ae:	e00d      	b.n	80067cc <UART_SetConfig+0x348>
 80067b0:	2302      	movs	r3, #2
 80067b2:	77fb      	strb	r3, [r7, #31]
 80067b4:	e00a      	b.n	80067cc <UART_SetConfig+0x348>
 80067b6:	2304      	movs	r3, #4
 80067b8:	77fb      	strb	r3, [r7, #31]
 80067ba:	e007      	b.n	80067cc <UART_SetConfig+0x348>
 80067bc:	2308      	movs	r3, #8
 80067be:	77fb      	strb	r3, [r7, #31]
 80067c0:	e004      	b.n	80067cc <UART_SetConfig+0x348>
 80067c2:	2310      	movs	r3, #16
 80067c4:	77fb      	strb	r3, [r7, #31]
 80067c6:	e001      	b.n	80067cc <UART_SetConfig+0x348>
 80067c8:	2310      	movs	r3, #16
 80067ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d4:	d15b      	bne.n	800688e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80067d6:	7ffb      	ldrb	r3, [r7, #31]
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d828      	bhi.n	800682e <UART_SetConfig+0x3aa>
 80067dc:	a201      	add	r2, pc, #4	; (adr r2, 80067e4 <UART_SetConfig+0x360>)
 80067de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e2:	bf00      	nop
 80067e4:	08006809 	.word	0x08006809
 80067e8:	08006811 	.word	0x08006811
 80067ec:	08006819 	.word	0x08006819
 80067f0:	0800682f 	.word	0x0800682f
 80067f4:	0800681f 	.word	0x0800681f
 80067f8:	0800682f 	.word	0x0800682f
 80067fc:	0800682f 	.word	0x0800682f
 8006800:	0800682f 	.word	0x0800682f
 8006804:	08006827 	.word	0x08006827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006808:	f7fd fc36 	bl	8004078 <HAL_RCC_GetPCLK1Freq>
 800680c:	61b8      	str	r0, [r7, #24]
        break;
 800680e:	e013      	b.n	8006838 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006810:	f7fd fc46 	bl	80040a0 <HAL_RCC_GetPCLK2Freq>
 8006814:	61b8      	str	r0, [r7, #24]
        break;
 8006816:	e00f      	b.n	8006838 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006818:	4b4b      	ldr	r3, [pc, #300]	; (8006948 <UART_SetConfig+0x4c4>)
 800681a:	61bb      	str	r3, [r7, #24]
        break;
 800681c:	e00c      	b.n	8006838 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800681e:	f7fd fb1b 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 8006822:	61b8      	str	r0, [r7, #24]
        break;
 8006824:	e008      	b.n	8006838 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800682a:	61bb      	str	r3, [r7, #24]
        break;
 800682c:	e004      	b.n	8006838 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	77bb      	strb	r3, [r7, #30]
        break;
 8006836:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d074      	beq.n	8006928 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	005a      	lsls	r2, r3, #1
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	085b      	lsrs	r3, r3, #1
 8006848:	441a      	add	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006852:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b0f      	cmp	r3, #15
 8006858:	d916      	bls.n	8006888 <UART_SetConfig+0x404>
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006860:	d212      	bcs.n	8006888 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	b29b      	uxth	r3, r3
 8006866:	f023 030f 	bic.w	r3, r3, #15
 800686a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	085b      	lsrs	r3, r3, #1
 8006870:	b29b      	uxth	r3, r3
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	b29a      	uxth	r2, r3
 8006878:	89fb      	ldrh	r3, [r7, #14]
 800687a:	4313      	orrs	r3, r2
 800687c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	89fa      	ldrh	r2, [r7, #14]
 8006884:	60da      	str	r2, [r3, #12]
 8006886:	e04f      	b.n	8006928 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	77bb      	strb	r3, [r7, #30]
 800688c:	e04c      	b.n	8006928 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800688e:	7ffb      	ldrb	r3, [r7, #31]
 8006890:	2b08      	cmp	r3, #8
 8006892:	d828      	bhi.n	80068e6 <UART_SetConfig+0x462>
 8006894:	a201      	add	r2, pc, #4	; (adr r2, 800689c <UART_SetConfig+0x418>)
 8006896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689a:	bf00      	nop
 800689c:	080068c1 	.word	0x080068c1
 80068a0:	080068c9 	.word	0x080068c9
 80068a4:	080068d1 	.word	0x080068d1
 80068a8:	080068e7 	.word	0x080068e7
 80068ac:	080068d7 	.word	0x080068d7
 80068b0:	080068e7 	.word	0x080068e7
 80068b4:	080068e7 	.word	0x080068e7
 80068b8:	080068e7 	.word	0x080068e7
 80068bc:	080068df 	.word	0x080068df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c0:	f7fd fbda 	bl	8004078 <HAL_RCC_GetPCLK1Freq>
 80068c4:	61b8      	str	r0, [r7, #24]
        break;
 80068c6:	e013      	b.n	80068f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068c8:	f7fd fbea 	bl	80040a0 <HAL_RCC_GetPCLK2Freq>
 80068cc:	61b8      	str	r0, [r7, #24]
        break;
 80068ce:	e00f      	b.n	80068f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d0:	4b1d      	ldr	r3, [pc, #116]	; (8006948 <UART_SetConfig+0x4c4>)
 80068d2:	61bb      	str	r3, [r7, #24]
        break;
 80068d4:	e00c      	b.n	80068f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068d6:	f7fd fabf 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 80068da:	61b8      	str	r0, [r7, #24]
        break;
 80068dc:	e008      	b.n	80068f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068e2:	61bb      	str	r3, [r7, #24]
        break;
 80068e4:	e004      	b.n	80068f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	77bb      	strb	r3, [r7, #30]
        break;
 80068ee:	bf00      	nop
    }

    if (pclk != 0U)
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d018      	beq.n	8006928 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	085a      	lsrs	r2, r3, #1
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	441a      	add	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	fbb2 f3f3 	udiv	r3, r2, r3
 8006908:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	2b0f      	cmp	r3, #15
 800690e:	d909      	bls.n	8006924 <UART_SetConfig+0x4a0>
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006916:	d205      	bcs.n	8006924 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	b29a      	uxth	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60da      	str	r2, [r3, #12]
 8006922:	e001      	b.n	8006928 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006934:	7fbb      	ldrb	r3, [r7, #30]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3720      	adds	r7, #32
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40007c00 	.word	0x40007c00
 8006944:	40023800 	.word	0x40023800
 8006948:	00f42400 	.word	0x00f42400

0800694c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00a      	beq.n	8006976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	f003 0310 	and.w	r3, r3, #16
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01a      	beq.n	8006a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a4a:	d10a      	bne.n	8006a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	605a      	str	r2, [r3, #4]
  }
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006aa0:	f7fb fcf6 	bl	8002490 <HAL_GetTick>
 8006aa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d10e      	bne.n	8006ad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f831 	bl	8006b2a <UART_WaitOnFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e027      	b.n	8006b22 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d10e      	bne.n	8006afe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f81b 	bl	8006b2a <UART_WaitOnFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e011      	b.n	8006b22 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2220      	movs	r2, #32
 8006b02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b09c      	sub	sp, #112	; 0x70
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	603b      	str	r3, [r7, #0]
 8006b36:	4613      	mov	r3, r2
 8006b38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b3a:	e0a7      	b.n	8006c8c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b42:	f000 80a3 	beq.w	8006c8c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b46:	f7fb fca3 	bl	8002490 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d302      	bcc.n	8006b5c <UART_WaitOnFlagUntilTimeout+0x32>
 8006b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d13f      	bne.n	8006bdc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b70:	667b      	str	r3, [r7, #100]	; 0x64
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e6      	bne.n	8006b5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3308      	adds	r3, #8
 8006b94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba0:	f023 0301 	bic.w	r3, r3, #1
 8006ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3308      	adds	r3, #8
 8006bac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bae:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e5      	bne.n	8006b8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e068      	b.n	8006cae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0304 	and.w	r3, r3, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d050      	beq.n	8006c8c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bf8:	d148      	bne.n	8006c8c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c02:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c22:	637b      	str	r3, [r7, #52]	; 0x34
 8006c24:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e6      	bne.n	8006c04 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	613b      	str	r3, [r7, #16]
   return(result);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3308      	adds	r3, #8
 8006c54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c56:	623a      	str	r2, [r7, #32]
 8006c58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	69f9      	ldr	r1, [r7, #28]
 8006c5c:	6a3a      	ldr	r2, [r7, #32]
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e5      	bne.n	8006c36 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2220      	movs	r2, #32
 8006c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e010      	b.n	8006cae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	69da      	ldr	r2, [r3, #28]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	4013      	ands	r3, r2
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	bf0c      	ite	eq
 8006c9c:	2301      	moveq	r3, #1
 8006c9e:	2300      	movne	r3, #0
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	79fb      	ldrb	r3, [r7, #7]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	f43f af48 	beq.w	8006b3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3770      	adds	r7, #112	; 0x70
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b095      	sub	sp, #84	; 0x54
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cdc:	643b      	str	r3, [r7, #64]	; 0x40
 8006cde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ce2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ce4:	e841 2300 	strex	r3, r2, [r1]
 8006ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e6      	bne.n	8006cbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	e853 3f00 	ldrex	r3, [r3]
 8006cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	f023 0301 	bic.w	r3, r3, #1
 8006d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e5      	bne.n	8006cf0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d118      	bne.n	8006d5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f023 0310 	bic.w	r3, r3, #16
 8006d40:	647b      	str	r3, [r7, #68]	; 0x44
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d4a:	61bb      	str	r3, [r7, #24]
 8006d4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	6979      	ldr	r1, [r7, #20]
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	613b      	str	r3, [r7, #16]
   return(result);
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e6      	bne.n	8006d2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2220      	movs	r2, #32
 8006d62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006d72:	bf00      	nop
 8006d74:	3754      	adds	r7, #84	; 0x54
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff fb51 	bl	8006444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b08f      	sub	sp, #60	; 0x3c
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006db6:	2b21      	cmp	r3, #33	; 0x21
 8006db8:	d14c      	bne.n	8006e54 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d132      	bne.n	8006e2c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	e853 3f00 	ldrex	r3, [r3]
 8006dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006de6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e6      	bne.n	8006dc6 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	61bb      	str	r3, [r7, #24]
 8006e18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	6979      	ldr	r1, [r7, #20]
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	613b      	str	r3, [r7, #16]
   return(result);
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e6      	bne.n	8006df8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006e2a:	e013      	b.n	8006e54 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e30:	781a      	ldrb	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006e54:	bf00      	nop
 8006e56:	373c      	adds	r7, #60	; 0x3c
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b091      	sub	sp, #68	; 0x44
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e6c:	2b21      	cmp	r3, #33	; 0x21
 8006e6e:	d151      	bne.n	8006f14 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d132      	bne.n	8006ee2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	623b      	str	r3, [r7, #32]
   return(result);
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e90:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e9c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e6      	bne.n	8006e7c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ecc:	61fb      	str	r3, [r7, #28]
 8006ece:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	69b9      	ldr	r1, [r7, #24]
 8006ed2:	69fa      	ldr	r2, [r7, #28]
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	617b      	str	r3, [r7, #20]
   return(result);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e6      	bne.n	8006eae <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006ee0:	e018      	b.n	8006f14 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	461a      	mov	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ef6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efc:	1c9a      	adds	r2, r3, #2
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006f14:	bf00      	nop
 8006f16:	3744      	adds	r7, #68	; 0x44
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f3c:	61fb      	str	r3, [r7, #28]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	61bb      	str	r3, [r7, #24]
 8006f48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6979      	ldr	r1, [r7, #20]
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	613b      	str	r3, [r7, #16]
   return(result);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e6      	bne.n	8006f28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fb f9de 	bl	8002328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f6c:	bf00      	nop
 8006f6e:	3720      	adds	r7, #32
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006f78:	4904      	ldr	r1, [pc, #16]	; (8006f8c <MX_FATFS_Init+0x18>)
 8006f7a:	4805      	ldr	r0, [pc, #20]	; (8006f90 <MX_FATFS_Init+0x1c>)
 8006f7c:	f000 f8ae 	bl	80070dc <FATFS_LinkDriver>
 8006f80:	4603      	mov	r3, r0
 8006f82:	461a      	mov	r2, r3
 8006f84:	4b03      	ldr	r3, [pc, #12]	; (8006f94 <MX_FATFS_Init+0x20>)
 8006f86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006f88:	bf00      	nop
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	200006dc 	.word	0x200006dc
 8006f90:	20000010 	.word	0x20000010
 8006f94:	200006d8 	.word	0x200006d8

08006f98 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fa f809 	bl	8000fbc <SD_disk_initialize>
 8006faa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8006fbe:	79fb      	ldrb	r3, [r7, #7]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fa f8e1 	bl	8001188 <SD_disk_status>
 8006fc6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	607a      	str	r2, [r7, #4]
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006fe0:	7bf8      	ldrb	r0, [r7, #15]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	f7fa f8e4 	bl	80011b4 <SD_disk_read>
 8006fec:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
 8007002:	4603      	mov	r3, r0
 8007004:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007006:	7bf8      	ldrb	r0, [r7, #15]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	68b9      	ldr	r1, [r7, #8]
 800700e:	f7fa f93b 	bl	8001288 <SD_disk_write>
 8007012:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	4603      	mov	r3, r0
 8007024:	603a      	str	r2, [r7, #0]
 8007026:	71fb      	strb	r3, [r7, #7]
 8007028:	460b      	mov	r3, r1
 800702a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800702c:	79b9      	ldrb	r1, [r7, #6]
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f7fa f9ac 	bl	8001390 <SD_disk_ioctl>
 8007038:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007052:	2301      	movs	r3, #1
 8007054:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800705a:	4b1f      	ldr	r3, [pc, #124]	; (80070d8 <FATFS_LinkDriverEx+0x94>)
 800705c:	7a5b      	ldrb	r3, [r3, #9]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d131      	bne.n	80070c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007064:	4b1c      	ldr	r3, [pc, #112]	; (80070d8 <FATFS_LinkDriverEx+0x94>)
 8007066:	7a5b      	ldrb	r3, [r3, #9]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <FATFS_LinkDriverEx+0x94>)
 800706e:	2100      	movs	r1, #0
 8007070:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007072:	4b19      	ldr	r3, [pc, #100]	; (80070d8 <FATFS_LinkDriverEx+0x94>)
 8007074:	7a5b      	ldrb	r3, [r3, #9]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	4a17      	ldr	r2, [pc, #92]	; (80070d8 <FATFS_LinkDriverEx+0x94>)
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007082:	4b15      	ldr	r3, [pc, #84]	; (80070d8 <FATFS_LinkDriverEx+0x94>)
 8007084:	7a5b      	ldrb	r3, [r3, #9]
 8007086:	b2db      	uxtb	r3, r3
 8007088:	461a      	mov	r2, r3
 800708a:	4b13      	ldr	r3, [pc, #76]	; (80070d8 <FATFS_LinkDriverEx+0x94>)
 800708c:	4413      	add	r3, r2
 800708e:	79fa      	ldrb	r2, [r7, #7]
 8007090:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007092:	4b11      	ldr	r3, [pc, #68]	; (80070d8 <FATFS_LinkDriverEx+0x94>)
 8007094:	7a5b      	ldrb	r3, [r3, #9]
 8007096:	b2db      	uxtb	r3, r3
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	b2d1      	uxtb	r1, r2
 800709c:	4a0e      	ldr	r2, [pc, #56]	; (80070d8 <FATFS_LinkDriverEx+0x94>)
 800709e:	7251      	strb	r1, [r2, #9]
 80070a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80070a2:	7dbb      	ldrb	r3, [r7, #22]
 80070a4:	3330      	adds	r3, #48	; 0x30
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	3301      	adds	r3, #1
 80070b0:	223a      	movs	r2, #58	; 0x3a
 80070b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	3302      	adds	r3, #2
 80070b8:	222f      	movs	r2, #47	; 0x2f
 80070ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	3303      	adds	r3, #3
 80070c0:	2200      	movs	r2, #0
 80070c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	200006e0 	.word	0x200006e0

080070dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80070e6:	2200      	movs	r2, #0
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7ff ffaa 	bl	8007044 <FATFS_LinkDriverEx>
 80070f0:	4603      	mov	r3, r0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <__errno>:
 80070fc:	4b01      	ldr	r3, [pc, #4]	; (8007104 <__errno+0x8>)
 80070fe:	6818      	ldr	r0, [r3, #0]
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000024 	.word	0x20000024

08007108 <__libc_init_array>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	4d0d      	ldr	r5, [pc, #52]	; (8007140 <__libc_init_array+0x38>)
 800710c:	4c0d      	ldr	r4, [pc, #52]	; (8007144 <__libc_init_array+0x3c>)
 800710e:	1b64      	subs	r4, r4, r5
 8007110:	10a4      	asrs	r4, r4, #2
 8007112:	2600      	movs	r6, #0
 8007114:	42a6      	cmp	r6, r4
 8007116:	d109      	bne.n	800712c <__libc_init_array+0x24>
 8007118:	4d0b      	ldr	r5, [pc, #44]	; (8007148 <__libc_init_array+0x40>)
 800711a:	4c0c      	ldr	r4, [pc, #48]	; (800714c <__libc_init_array+0x44>)
 800711c:	f004 fb88 	bl	800b830 <_init>
 8007120:	1b64      	subs	r4, r4, r5
 8007122:	10a4      	asrs	r4, r4, #2
 8007124:	2600      	movs	r6, #0
 8007126:	42a6      	cmp	r6, r4
 8007128:	d105      	bne.n	8007136 <__libc_init_array+0x2e>
 800712a:	bd70      	pop	{r4, r5, r6, pc}
 800712c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007130:	4798      	blx	r3
 8007132:	3601      	adds	r6, #1
 8007134:	e7ee      	b.n	8007114 <__libc_init_array+0xc>
 8007136:	f855 3b04 	ldr.w	r3, [r5], #4
 800713a:	4798      	blx	r3
 800713c:	3601      	adds	r6, #1
 800713e:	e7f2      	b.n	8007126 <__libc_init_array+0x1e>
 8007140:	0800bd64 	.word	0x0800bd64
 8007144:	0800bd64 	.word	0x0800bd64
 8007148:	0800bd64 	.word	0x0800bd64
 800714c:	0800bd68 	.word	0x0800bd68

08007150 <memset>:
 8007150:	4402      	add	r2, r0
 8007152:	4603      	mov	r3, r0
 8007154:	4293      	cmp	r3, r2
 8007156:	d100      	bne.n	800715a <memset+0xa>
 8007158:	4770      	bx	lr
 800715a:	f803 1b01 	strb.w	r1, [r3], #1
 800715e:	e7f9      	b.n	8007154 <memset+0x4>

08007160 <__cvt>:
 8007160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007162:	ed2d 8b02 	vpush	{d8}
 8007166:	eeb0 8b40 	vmov.f64	d8, d0
 800716a:	b085      	sub	sp, #20
 800716c:	4617      	mov	r7, r2
 800716e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007170:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007172:	ee18 2a90 	vmov	r2, s17
 8007176:	f025 0520 	bic.w	r5, r5, #32
 800717a:	2a00      	cmp	r2, #0
 800717c:	bfb6      	itet	lt
 800717e:	222d      	movlt	r2, #45	; 0x2d
 8007180:	2200      	movge	r2, #0
 8007182:	eeb1 8b40 	vneglt.f64	d8, d0
 8007186:	2d46      	cmp	r5, #70	; 0x46
 8007188:	460c      	mov	r4, r1
 800718a:	701a      	strb	r2, [r3, #0]
 800718c:	d004      	beq.n	8007198 <__cvt+0x38>
 800718e:	2d45      	cmp	r5, #69	; 0x45
 8007190:	d100      	bne.n	8007194 <__cvt+0x34>
 8007192:	3401      	adds	r4, #1
 8007194:	2102      	movs	r1, #2
 8007196:	e000      	b.n	800719a <__cvt+0x3a>
 8007198:	2103      	movs	r1, #3
 800719a:	ab03      	add	r3, sp, #12
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	ab02      	add	r3, sp, #8
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	4622      	mov	r2, r4
 80071a4:	4633      	mov	r3, r6
 80071a6:	eeb0 0b48 	vmov.f64	d0, d8
 80071aa:	f001 fd2d 	bl	8008c08 <_dtoa_r>
 80071ae:	2d47      	cmp	r5, #71	; 0x47
 80071b0:	d101      	bne.n	80071b6 <__cvt+0x56>
 80071b2:	07fb      	lsls	r3, r7, #31
 80071b4:	d51a      	bpl.n	80071ec <__cvt+0x8c>
 80071b6:	2d46      	cmp	r5, #70	; 0x46
 80071b8:	eb00 0204 	add.w	r2, r0, r4
 80071bc:	d10c      	bne.n	80071d8 <__cvt+0x78>
 80071be:	7803      	ldrb	r3, [r0, #0]
 80071c0:	2b30      	cmp	r3, #48	; 0x30
 80071c2:	d107      	bne.n	80071d4 <__cvt+0x74>
 80071c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80071c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071cc:	bf1c      	itt	ne
 80071ce:	f1c4 0401 	rsbne	r4, r4, #1
 80071d2:	6034      	strne	r4, [r6, #0]
 80071d4:	6833      	ldr	r3, [r6, #0]
 80071d6:	441a      	add	r2, r3
 80071d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80071dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e0:	bf08      	it	eq
 80071e2:	9203      	streq	r2, [sp, #12]
 80071e4:	2130      	movs	r1, #48	; 0x30
 80071e6:	9b03      	ldr	r3, [sp, #12]
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d307      	bcc.n	80071fc <__cvt+0x9c>
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071f0:	1a1b      	subs	r3, r3, r0
 80071f2:	6013      	str	r3, [r2, #0]
 80071f4:	b005      	add	sp, #20
 80071f6:	ecbd 8b02 	vpop	{d8}
 80071fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071fc:	1c5c      	adds	r4, r3, #1
 80071fe:	9403      	str	r4, [sp, #12]
 8007200:	7019      	strb	r1, [r3, #0]
 8007202:	e7f0      	b.n	80071e6 <__cvt+0x86>

08007204 <__exponent>:
 8007204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007206:	4603      	mov	r3, r0
 8007208:	2900      	cmp	r1, #0
 800720a:	bfb8      	it	lt
 800720c:	4249      	neglt	r1, r1
 800720e:	f803 2b02 	strb.w	r2, [r3], #2
 8007212:	bfb4      	ite	lt
 8007214:	222d      	movlt	r2, #45	; 0x2d
 8007216:	222b      	movge	r2, #43	; 0x2b
 8007218:	2909      	cmp	r1, #9
 800721a:	7042      	strb	r2, [r0, #1]
 800721c:	dd2a      	ble.n	8007274 <__exponent+0x70>
 800721e:	f10d 0407 	add.w	r4, sp, #7
 8007222:	46a4      	mov	ip, r4
 8007224:	270a      	movs	r7, #10
 8007226:	46a6      	mov	lr, r4
 8007228:	460a      	mov	r2, r1
 800722a:	fb91 f6f7 	sdiv	r6, r1, r7
 800722e:	fb07 1516 	mls	r5, r7, r6, r1
 8007232:	3530      	adds	r5, #48	; 0x30
 8007234:	2a63      	cmp	r2, #99	; 0x63
 8007236:	f104 34ff 	add.w	r4, r4, #4294967295
 800723a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800723e:	4631      	mov	r1, r6
 8007240:	dcf1      	bgt.n	8007226 <__exponent+0x22>
 8007242:	3130      	adds	r1, #48	; 0x30
 8007244:	f1ae 0502 	sub.w	r5, lr, #2
 8007248:	f804 1c01 	strb.w	r1, [r4, #-1]
 800724c:	1c44      	adds	r4, r0, #1
 800724e:	4629      	mov	r1, r5
 8007250:	4561      	cmp	r1, ip
 8007252:	d30a      	bcc.n	800726a <__exponent+0x66>
 8007254:	f10d 0209 	add.w	r2, sp, #9
 8007258:	eba2 020e 	sub.w	r2, r2, lr
 800725c:	4565      	cmp	r5, ip
 800725e:	bf88      	it	hi
 8007260:	2200      	movhi	r2, #0
 8007262:	4413      	add	r3, r2
 8007264:	1a18      	subs	r0, r3, r0
 8007266:	b003      	add	sp, #12
 8007268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800726a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800726e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007272:	e7ed      	b.n	8007250 <__exponent+0x4c>
 8007274:	2330      	movs	r3, #48	; 0x30
 8007276:	3130      	adds	r1, #48	; 0x30
 8007278:	7083      	strb	r3, [r0, #2]
 800727a:	70c1      	strb	r1, [r0, #3]
 800727c:	1d03      	adds	r3, r0, #4
 800727e:	e7f1      	b.n	8007264 <__exponent+0x60>

08007280 <_printf_float>:
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	b08b      	sub	sp, #44	; 0x2c
 8007286:	460c      	mov	r4, r1
 8007288:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800728c:	4616      	mov	r6, r2
 800728e:	461f      	mov	r7, r3
 8007290:	4605      	mov	r5, r0
 8007292:	f002 fd97 	bl	8009dc4 <_localeconv_r>
 8007296:	f8d0 b000 	ldr.w	fp, [r0]
 800729a:	4658      	mov	r0, fp
 800729c:	f7f8 ffd0 	bl	8000240 <strlen>
 80072a0:	2300      	movs	r3, #0
 80072a2:	9308      	str	r3, [sp, #32]
 80072a4:	f8d8 3000 	ldr.w	r3, [r8]
 80072a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80072ac:	6822      	ldr	r2, [r4, #0]
 80072ae:	3307      	adds	r3, #7
 80072b0:	f023 0307 	bic.w	r3, r3, #7
 80072b4:	f103 0108 	add.w	r1, r3, #8
 80072b8:	f8c8 1000 	str.w	r1, [r8]
 80072bc:	4682      	mov	sl, r0
 80072be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80072c6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007528 <_printf_float+0x2a8>
 80072ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80072ce:	eeb0 6bc0 	vabs.f64	d6, d0
 80072d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80072d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072da:	dd24      	ble.n	8007326 <_printf_float+0xa6>
 80072dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80072e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e4:	d502      	bpl.n	80072ec <_printf_float+0x6c>
 80072e6:	232d      	movs	r3, #45	; 0x2d
 80072e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ec:	4b90      	ldr	r3, [pc, #576]	; (8007530 <_printf_float+0x2b0>)
 80072ee:	4891      	ldr	r0, [pc, #580]	; (8007534 <_printf_float+0x2b4>)
 80072f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80072f4:	bf94      	ite	ls
 80072f6:	4698      	movls	r8, r3
 80072f8:	4680      	movhi	r8, r0
 80072fa:	2303      	movs	r3, #3
 80072fc:	6123      	str	r3, [r4, #16]
 80072fe:	f022 0204 	bic.w	r2, r2, #4
 8007302:	2300      	movs	r3, #0
 8007304:	6022      	str	r2, [r4, #0]
 8007306:	9304      	str	r3, [sp, #16]
 8007308:	9700      	str	r7, [sp, #0]
 800730a:	4633      	mov	r3, r6
 800730c:	aa09      	add	r2, sp, #36	; 0x24
 800730e:	4621      	mov	r1, r4
 8007310:	4628      	mov	r0, r5
 8007312:	f000 f9d3 	bl	80076bc <_printf_common>
 8007316:	3001      	adds	r0, #1
 8007318:	f040 808a 	bne.w	8007430 <_printf_float+0x1b0>
 800731c:	f04f 30ff 	mov.w	r0, #4294967295
 8007320:	b00b      	add	sp, #44	; 0x2c
 8007322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007326:	eeb4 0b40 	vcmp.f64	d0, d0
 800732a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732e:	d709      	bvc.n	8007344 <_printf_float+0xc4>
 8007330:	ee10 3a90 	vmov	r3, s1
 8007334:	2b00      	cmp	r3, #0
 8007336:	bfbc      	itt	lt
 8007338:	232d      	movlt	r3, #45	; 0x2d
 800733a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800733e:	487e      	ldr	r0, [pc, #504]	; (8007538 <_printf_float+0x2b8>)
 8007340:	4b7e      	ldr	r3, [pc, #504]	; (800753c <_printf_float+0x2bc>)
 8007342:	e7d5      	b.n	80072f0 <_printf_float+0x70>
 8007344:	6863      	ldr	r3, [r4, #4]
 8007346:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800734a:	9104      	str	r1, [sp, #16]
 800734c:	1c59      	adds	r1, r3, #1
 800734e:	d13c      	bne.n	80073ca <_printf_float+0x14a>
 8007350:	2306      	movs	r3, #6
 8007352:	6063      	str	r3, [r4, #4]
 8007354:	2300      	movs	r3, #0
 8007356:	9303      	str	r3, [sp, #12]
 8007358:	ab08      	add	r3, sp, #32
 800735a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800735e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007362:	ab07      	add	r3, sp, #28
 8007364:	6861      	ldr	r1, [r4, #4]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	6022      	str	r2, [r4, #0]
 800736a:	f10d 031b 	add.w	r3, sp, #27
 800736e:	4628      	mov	r0, r5
 8007370:	f7ff fef6 	bl	8007160 <__cvt>
 8007374:	9b04      	ldr	r3, [sp, #16]
 8007376:	9907      	ldr	r1, [sp, #28]
 8007378:	2b47      	cmp	r3, #71	; 0x47
 800737a:	4680      	mov	r8, r0
 800737c:	d108      	bne.n	8007390 <_printf_float+0x110>
 800737e:	1cc8      	adds	r0, r1, #3
 8007380:	db02      	blt.n	8007388 <_printf_float+0x108>
 8007382:	6863      	ldr	r3, [r4, #4]
 8007384:	4299      	cmp	r1, r3
 8007386:	dd41      	ble.n	800740c <_printf_float+0x18c>
 8007388:	f1a9 0902 	sub.w	r9, r9, #2
 800738c:	fa5f f989 	uxtb.w	r9, r9
 8007390:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007394:	d820      	bhi.n	80073d8 <_printf_float+0x158>
 8007396:	3901      	subs	r1, #1
 8007398:	464a      	mov	r2, r9
 800739a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800739e:	9107      	str	r1, [sp, #28]
 80073a0:	f7ff ff30 	bl	8007204 <__exponent>
 80073a4:	9a08      	ldr	r2, [sp, #32]
 80073a6:	9004      	str	r0, [sp, #16]
 80073a8:	1813      	adds	r3, r2, r0
 80073aa:	2a01      	cmp	r2, #1
 80073ac:	6123      	str	r3, [r4, #16]
 80073ae:	dc02      	bgt.n	80073b6 <_printf_float+0x136>
 80073b0:	6822      	ldr	r2, [r4, #0]
 80073b2:	07d2      	lsls	r2, r2, #31
 80073b4:	d501      	bpl.n	80073ba <_printf_float+0x13a>
 80073b6:	3301      	adds	r3, #1
 80073b8:	6123      	str	r3, [r4, #16]
 80073ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0a2      	beq.n	8007308 <_printf_float+0x88>
 80073c2:	232d      	movs	r3, #45	; 0x2d
 80073c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c8:	e79e      	b.n	8007308 <_printf_float+0x88>
 80073ca:	9904      	ldr	r1, [sp, #16]
 80073cc:	2947      	cmp	r1, #71	; 0x47
 80073ce:	d1c1      	bne.n	8007354 <_printf_float+0xd4>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1bf      	bne.n	8007354 <_printf_float+0xd4>
 80073d4:	2301      	movs	r3, #1
 80073d6:	e7bc      	b.n	8007352 <_printf_float+0xd2>
 80073d8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80073dc:	d118      	bne.n	8007410 <_printf_float+0x190>
 80073de:	2900      	cmp	r1, #0
 80073e0:	6863      	ldr	r3, [r4, #4]
 80073e2:	dd0b      	ble.n	80073fc <_printf_float+0x17c>
 80073e4:	6121      	str	r1, [r4, #16]
 80073e6:	b913      	cbnz	r3, 80073ee <_printf_float+0x16e>
 80073e8:	6822      	ldr	r2, [r4, #0]
 80073ea:	07d0      	lsls	r0, r2, #31
 80073ec:	d502      	bpl.n	80073f4 <_printf_float+0x174>
 80073ee:	3301      	adds	r3, #1
 80073f0:	440b      	add	r3, r1
 80073f2:	6123      	str	r3, [r4, #16]
 80073f4:	2300      	movs	r3, #0
 80073f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80073f8:	9304      	str	r3, [sp, #16]
 80073fa:	e7de      	b.n	80073ba <_printf_float+0x13a>
 80073fc:	b913      	cbnz	r3, 8007404 <_printf_float+0x184>
 80073fe:	6822      	ldr	r2, [r4, #0]
 8007400:	07d2      	lsls	r2, r2, #31
 8007402:	d501      	bpl.n	8007408 <_printf_float+0x188>
 8007404:	3302      	adds	r3, #2
 8007406:	e7f4      	b.n	80073f2 <_printf_float+0x172>
 8007408:	2301      	movs	r3, #1
 800740a:	e7f2      	b.n	80073f2 <_printf_float+0x172>
 800740c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007410:	9b08      	ldr	r3, [sp, #32]
 8007412:	4299      	cmp	r1, r3
 8007414:	db05      	blt.n	8007422 <_printf_float+0x1a2>
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	6121      	str	r1, [r4, #16]
 800741a:	07d8      	lsls	r0, r3, #31
 800741c:	d5ea      	bpl.n	80073f4 <_printf_float+0x174>
 800741e:	1c4b      	adds	r3, r1, #1
 8007420:	e7e7      	b.n	80073f2 <_printf_float+0x172>
 8007422:	2900      	cmp	r1, #0
 8007424:	bfd4      	ite	le
 8007426:	f1c1 0202 	rsble	r2, r1, #2
 800742a:	2201      	movgt	r2, #1
 800742c:	4413      	add	r3, r2
 800742e:	e7e0      	b.n	80073f2 <_printf_float+0x172>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	055a      	lsls	r2, r3, #21
 8007434:	d407      	bmi.n	8007446 <_printf_float+0x1c6>
 8007436:	6923      	ldr	r3, [r4, #16]
 8007438:	4642      	mov	r2, r8
 800743a:	4631      	mov	r1, r6
 800743c:	4628      	mov	r0, r5
 800743e:	47b8      	blx	r7
 8007440:	3001      	adds	r0, #1
 8007442:	d12a      	bne.n	800749a <_printf_float+0x21a>
 8007444:	e76a      	b.n	800731c <_printf_float+0x9c>
 8007446:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800744a:	f240 80e2 	bls.w	8007612 <_printf_float+0x392>
 800744e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007452:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800745a:	d133      	bne.n	80074c4 <_printf_float+0x244>
 800745c:	4a38      	ldr	r2, [pc, #224]	; (8007540 <_printf_float+0x2c0>)
 800745e:	2301      	movs	r3, #1
 8007460:	4631      	mov	r1, r6
 8007462:	4628      	mov	r0, r5
 8007464:	47b8      	blx	r7
 8007466:	3001      	adds	r0, #1
 8007468:	f43f af58 	beq.w	800731c <_printf_float+0x9c>
 800746c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007470:	429a      	cmp	r2, r3
 8007472:	db02      	blt.n	800747a <_printf_float+0x1fa>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	07d8      	lsls	r0, r3, #31
 8007478:	d50f      	bpl.n	800749a <_printf_float+0x21a>
 800747a:	4653      	mov	r3, sl
 800747c:	465a      	mov	r2, fp
 800747e:	4631      	mov	r1, r6
 8007480:	4628      	mov	r0, r5
 8007482:	47b8      	blx	r7
 8007484:	3001      	adds	r0, #1
 8007486:	f43f af49 	beq.w	800731c <_printf_float+0x9c>
 800748a:	f04f 0800 	mov.w	r8, #0
 800748e:	f104 091a 	add.w	r9, r4, #26
 8007492:	9b08      	ldr	r3, [sp, #32]
 8007494:	3b01      	subs	r3, #1
 8007496:	4543      	cmp	r3, r8
 8007498:	dc09      	bgt.n	80074ae <_printf_float+0x22e>
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	079b      	lsls	r3, r3, #30
 800749e:	f100 8108 	bmi.w	80076b2 <_printf_float+0x432>
 80074a2:	68e0      	ldr	r0, [r4, #12]
 80074a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a6:	4298      	cmp	r0, r3
 80074a8:	bfb8      	it	lt
 80074aa:	4618      	movlt	r0, r3
 80074ac:	e738      	b.n	8007320 <_printf_float+0xa0>
 80074ae:	2301      	movs	r3, #1
 80074b0:	464a      	mov	r2, r9
 80074b2:	4631      	mov	r1, r6
 80074b4:	4628      	mov	r0, r5
 80074b6:	47b8      	blx	r7
 80074b8:	3001      	adds	r0, #1
 80074ba:	f43f af2f 	beq.w	800731c <_printf_float+0x9c>
 80074be:	f108 0801 	add.w	r8, r8, #1
 80074c2:	e7e6      	b.n	8007492 <_printf_float+0x212>
 80074c4:	9b07      	ldr	r3, [sp, #28]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	dc3c      	bgt.n	8007544 <_printf_float+0x2c4>
 80074ca:	4a1d      	ldr	r2, [pc, #116]	; (8007540 <_printf_float+0x2c0>)
 80074cc:	2301      	movs	r3, #1
 80074ce:	4631      	mov	r1, r6
 80074d0:	4628      	mov	r0, r5
 80074d2:	47b8      	blx	r7
 80074d4:	3001      	adds	r0, #1
 80074d6:	f43f af21 	beq.w	800731c <_printf_float+0x9c>
 80074da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80074de:	4313      	orrs	r3, r2
 80074e0:	d102      	bne.n	80074e8 <_printf_float+0x268>
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	07d9      	lsls	r1, r3, #31
 80074e6:	d5d8      	bpl.n	800749a <_printf_float+0x21a>
 80074e8:	4653      	mov	r3, sl
 80074ea:	465a      	mov	r2, fp
 80074ec:	4631      	mov	r1, r6
 80074ee:	4628      	mov	r0, r5
 80074f0:	47b8      	blx	r7
 80074f2:	3001      	adds	r0, #1
 80074f4:	f43f af12 	beq.w	800731c <_printf_float+0x9c>
 80074f8:	f04f 0900 	mov.w	r9, #0
 80074fc:	f104 0a1a 	add.w	sl, r4, #26
 8007500:	9b07      	ldr	r3, [sp, #28]
 8007502:	425b      	negs	r3, r3
 8007504:	454b      	cmp	r3, r9
 8007506:	dc01      	bgt.n	800750c <_printf_float+0x28c>
 8007508:	9b08      	ldr	r3, [sp, #32]
 800750a:	e795      	b.n	8007438 <_printf_float+0x1b8>
 800750c:	2301      	movs	r3, #1
 800750e:	4652      	mov	r2, sl
 8007510:	4631      	mov	r1, r6
 8007512:	4628      	mov	r0, r5
 8007514:	47b8      	blx	r7
 8007516:	3001      	adds	r0, #1
 8007518:	f43f af00 	beq.w	800731c <_printf_float+0x9c>
 800751c:	f109 0901 	add.w	r9, r9, #1
 8007520:	e7ee      	b.n	8007500 <_printf_float+0x280>
 8007522:	bf00      	nop
 8007524:	f3af 8000 	nop.w
 8007528:	ffffffff 	.word	0xffffffff
 800752c:	7fefffff 	.word	0x7fefffff
 8007530:	0800b8bc 	.word	0x0800b8bc
 8007534:	0800b8c0 	.word	0x0800b8c0
 8007538:	0800b8c8 	.word	0x0800b8c8
 800753c:	0800b8c4 	.word	0x0800b8c4
 8007540:	0800b8cc 	.word	0x0800b8cc
 8007544:	9a08      	ldr	r2, [sp, #32]
 8007546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007548:	429a      	cmp	r2, r3
 800754a:	bfa8      	it	ge
 800754c:	461a      	movge	r2, r3
 800754e:	2a00      	cmp	r2, #0
 8007550:	4691      	mov	r9, r2
 8007552:	dc38      	bgt.n	80075c6 <_printf_float+0x346>
 8007554:	2300      	movs	r3, #0
 8007556:	9305      	str	r3, [sp, #20]
 8007558:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800755c:	f104 021a 	add.w	r2, r4, #26
 8007560:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007562:	9905      	ldr	r1, [sp, #20]
 8007564:	9304      	str	r3, [sp, #16]
 8007566:	eba3 0309 	sub.w	r3, r3, r9
 800756a:	428b      	cmp	r3, r1
 800756c:	dc33      	bgt.n	80075d6 <_printf_float+0x356>
 800756e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007572:	429a      	cmp	r2, r3
 8007574:	db3c      	blt.n	80075f0 <_printf_float+0x370>
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	07da      	lsls	r2, r3, #31
 800757a:	d439      	bmi.n	80075f0 <_printf_float+0x370>
 800757c:	9b08      	ldr	r3, [sp, #32]
 800757e:	9a04      	ldr	r2, [sp, #16]
 8007580:	9907      	ldr	r1, [sp, #28]
 8007582:	1a9a      	subs	r2, r3, r2
 8007584:	eba3 0901 	sub.w	r9, r3, r1
 8007588:	4591      	cmp	r9, r2
 800758a:	bfa8      	it	ge
 800758c:	4691      	movge	r9, r2
 800758e:	f1b9 0f00 	cmp.w	r9, #0
 8007592:	dc35      	bgt.n	8007600 <_printf_float+0x380>
 8007594:	f04f 0800 	mov.w	r8, #0
 8007598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800759c:	f104 0a1a 	add.w	sl, r4, #26
 80075a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80075a4:	1a9b      	subs	r3, r3, r2
 80075a6:	eba3 0309 	sub.w	r3, r3, r9
 80075aa:	4543      	cmp	r3, r8
 80075ac:	f77f af75 	ble.w	800749a <_printf_float+0x21a>
 80075b0:	2301      	movs	r3, #1
 80075b2:	4652      	mov	r2, sl
 80075b4:	4631      	mov	r1, r6
 80075b6:	4628      	mov	r0, r5
 80075b8:	47b8      	blx	r7
 80075ba:	3001      	adds	r0, #1
 80075bc:	f43f aeae 	beq.w	800731c <_printf_float+0x9c>
 80075c0:	f108 0801 	add.w	r8, r8, #1
 80075c4:	e7ec      	b.n	80075a0 <_printf_float+0x320>
 80075c6:	4613      	mov	r3, r2
 80075c8:	4631      	mov	r1, r6
 80075ca:	4642      	mov	r2, r8
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b8      	blx	r7
 80075d0:	3001      	adds	r0, #1
 80075d2:	d1bf      	bne.n	8007554 <_printf_float+0x2d4>
 80075d4:	e6a2      	b.n	800731c <_printf_float+0x9c>
 80075d6:	2301      	movs	r3, #1
 80075d8:	4631      	mov	r1, r6
 80075da:	4628      	mov	r0, r5
 80075dc:	9204      	str	r2, [sp, #16]
 80075de:	47b8      	blx	r7
 80075e0:	3001      	adds	r0, #1
 80075e2:	f43f ae9b 	beq.w	800731c <_printf_float+0x9c>
 80075e6:	9b05      	ldr	r3, [sp, #20]
 80075e8:	9a04      	ldr	r2, [sp, #16]
 80075ea:	3301      	adds	r3, #1
 80075ec:	9305      	str	r3, [sp, #20]
 80075ee:	e7b7      	b.n	8007560 <_printf_float+0x2e0>
 80075f0:	4653      	mov	r3, sl
 80075f2:	465a      	mov	r2, fp
 80075f4:	4631      	mov	r1, r6
 80075f6:	4628      	mov	r0, r5
 80075f8:	47b8      	blx	r7
 80075fa:	3001      	adds	r0, #1
 80075fc:	d1be      	bne.n	800757c <_printf_float+0x2fc>
 80075fe:	e68d      	b.n	800731c <_printf_float+0x9c>
 8007600:	9a04      	ldr	r2, [sp, #16]
 8007602:	464b      	mov	r3, r9
 8007604:	4442      	add	r2, r8
 8007606:	4631      	mov	r1, r6
 8007608:	4628      	mov	r0, r5
 800760a:	47b8      	blx	r7
 800760c:	3001      	adds	r0, #1
 800760e:	d1c1      	bne.n	8007594 <_printf_float+0x314>
 8007610:	e684      	b.n	800731c <_printf_float+0x9c>
 8007612:	9a08      	ldr	r2, [sp, #32]
 8007614:	2a01      	cmp	r2, #1
 8007616:	dc01      	bgt.n	800761c <_printf_float+0x39c>
 8007618:	07db      	lsls	r3, r3, #31
 800761a:	d537      	bpl.n	800768c <_printf_float+0x40c>
 800761c:	2301      	movs	r3, #1
 800761e:	4642      	mov	r2, r8
 8007620:	4631      	mov	r1, r6
 8007622:	4628      	mov	r0, r5
 8007624:	47b8      	blx	r7
 8007626:	3001      	adds	r0, #1
 8007628:	f43f ae78 	beq.w	800731c <_printf_float+0x9c>
 800762c:	4653      	mov	r3, sl
 800762e:	465a      	mov	r2, fp
 8007630:	4631      	mov	r1, r6
 8007632:	4628      	mov	r0, r5
 8007634:	47b8      	blx	r7
 8007636:	3001      	adds	r0, #1
 8007638:	f43f ae70 	beq.w	800731c <_printf_float+0x9c>
 800763c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007640:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007648:	d01b      	beq.n	8007682 <_printf_float+0x402>
 800764a:	9b08      	ldr	r3, [sp, #32]
 800764c:	f108 0201 	add.w	r2, r8, #1
 8007650:	3b01      	subs	r3, #1
 8007652:	4631      	mov	r1, r6
 8007654:	4628      	mov	r0, r5
 8007656:	47b8      	blx	r7
 8007658:	3001      	adds	r0, #1
 800765a:	d10e      	bne.n	800767a <_printf_float+0x3fa>
 800765c:	e65e      	b.n	800731c <_printf_float+0x9c>
 800765e:	2301      	movs	r3, #1
 8007660:	464a      	mov	r2, r9
 8007662:	4631      	mov	r1, r6
 8007664:	4628      	mov	r0, r5
 8007666:	47b8      	blx	r7
 8007668:	3001      	adds	r0, #1
 800766a:	f43f ae57 	beq.w	800731c <_printf_float+0x9c>
 800766e:	f108 0801 	add.w	r8, r8, #1
 8007672:	9b08      	ldr	r3, [sp, #32]
 8007674:	3b01      	subs	r3, #1
 8007676:	4543      	cmp	r3, r8
 8007678:	dcf1      	bgt.n	800765e <_printf_float+0x3de>
 800767a:	9b04      	ldr	r3, [sp, #16]
 800767c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007680:	e6db      	b.n	800743a <_printf_float+0x1ba>
 8007682:	f04f 0800 	mov.w	r8, #0
 8007686:	f104 091a 	add.w	r9, r4, #26
 800768a:	e7f2      	b.n	8007672 <_printf_float+0x3f2>
 800768c:	2301      	movs	r3, #1
 800768e:	4642      	mov	r2, r8
 8007690:	e7df      	b.n	8007652 <_printf_float+0x3d2>
 8007692:	2301      	movs	r3, #1
 8007694:	464a      	mov	r2, r9
 8007696:	4631      	mov	r1, r6
 8007698:	4628      	mov	r0, r5
 800769a:	47b8      	blx	r7
 800769c:	3001      	adds	r0, #1
 800769e:	f43f ae3d 	beq.w	800731c <_printf_float+0x9c>
 80076a2:	f108 0801 	add.w	r8, r8, #1
 80076a6:	68e3      	ldr	r3, [r4, #12]
 80076a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076aa:	1a5b      	subs	r3, r3, r1
 80076ac:	4543      	cmp	r3, r8
 80076ae:	dcf0      	bgt.n	8007692 <_printf_float+0x412>
 80076b0:	e6f7      	b.n	80074a2 <_printf_float+0x222>
 80076b2:	f04f 0800 	mov.w	r8, #0
 80076b6:	f104 0919 	add.w	r9, r4, #25
 80076ba:	e7f4      	b.n	80076a6 <_printf_float+0x426>

080076bc <_printf_common>:
 80076bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c0:	4616      	mov	r6, r2
 80076c2:	4699      	mov	r9, r3
 80076c4:	688a      	ldr	r2, [r1, #8]
 80076c6:	690b      	ldr	r3, [r1, #16]
 80076c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076cc:	4293      	cmp	r3, r2
 80076ce:	bfb8      	it	lt
 80076d0:	4613      	movlt	r3, r2
 80076d2:	6033      	str	r3, [r6, #0]
 80076d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076d8:	4607      	mov	r7, r0
 80076da:	460c      	mov	r4, r1
 80076dc:	b10a      	cbz	r2, 80076e2 <_printf_common+0x26>
 80076de:	3301      	adds	r3, #1
 80076e0:	6033      	str	r3, [r6, #0]
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	0699      	lsls	r1, r3, #26
 80076e6:	bf42      	ittt	mi
 80076e8:	6833      	ldrmi	r3, [r6, #0]
 80076ea:	3302      	addmi	r3, #2
 80076ec:	6033      	strmi	r3, [r6, #0]
 80076ee:	6825      	ldr	r5, [r4, #0]
 80076f0:	f015 0506 	ands.w	r5, r5, #6
 80076f4:	d106      	bne.n	8007704 <_printf_common+0x48>
 80076f6:	f104 0a19 	add.w	sl, r4, #25
 80076fa:	68e3      	ldr	r3, [r4, #12]
 80076fc:	6832      	ldr	r2, [r6, #0]
 80076fe:	1a9b      	subs	r3, r3, r2
 8007700:	42ab      	cmp	r3, r5
 8007702:	dc26      	bgt.n	8007752 <_printf_common+0x96>
 8007704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007708:	1e13      	subs	r3, r2, #0
 800770a:	6822      	ldr	r2, [r4, #0]
 800770c:	bf18      	it	ne
 800770e:	2301      	movne	r3, #1
 8007710:	0692      	lsls	r2, r2, #26
 8007712:	d42b      	bmi.n	800776c <_printf_common+0xb0>
 8007714:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007718:	4649      	mov	r1, r9
 800771a:	4638      	mov	r0, r7
 800771c:	47c0      	blx	r8
 800771e:	3001      	adds	r0, #1
 8007720:	d01e      	beq.n	8007760 <_printf_common+0xa4>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	68e5      	ldr	r5, [r4, #12]
 8007726:	6832      	ldr	r2, [r6, #0]
 8007728:	f003 0306 	and.w	r3, r3, #6
 800772c:	2b04      	cmp	r3, #4
 800772e:	bf08      	it	eq
 8007730:	1aad      	subeq	r5, r5, r2
 8007732:	68a3      	ldr	r3, [r4, #8]
 8007734:	6922      	ldr	r2, [r4, #16]
 8007736:	bf0c      	ite	eq
 8007738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800773c:	2500      	movne	r5, #0
 800773e:	4293      	cmp	r3, r2
 8007740:	bfc4      	itt	gt
 8007742:	1a9b      	subgt	r3, r3, r2
 8007744:	18ed      	addgt	r5, r5, r3
 8007746:	2600      	movs	r6, #0
 8007748:	341a      	adds	r4, #26
 800774a:	42b5      	cmp	r5, r6
 800774c:	d11a      	bne.n	8007784 <_printf_common+0xc8>
 800774e:	2000      	movs	r0, #0
 8007750:	e008      	b.n	8007764 <_printf_common+0xa8>
 8007752:	2301      	movs	r3, #1
 8007754:	4652      	mov	r2, sl
 8007756:	4649      	mov	r1, r9
 8007758:	4638      	mov	r0, r7
 800775a:	47c0      	blx	r8
 800775c:	3001      	adds	r0, #1
 800775e:	d103      	bne.n	8007768 <_printf_common+0xac>
 8007760:	f04f 30ff 	mov.w	r0, #4294967295
 8007764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007768:	3501      	adds	r5, #1
 800776a:	e7c6      	b.n	80076fa <_printf_common+0x3e>
 800776c:	18e1      	adds	r1, r4, r3
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	2030      	movs	r0, #48	; 0x30
 8007772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007776:	4422      	add	r2, r4
 8007778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800777c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007780:	3302      	adds	r3, #2
 8007782:	e7c7      	b.n	8007714 <_printf_common+0x58>
 8007784:	2301      	movs	r3, #1
 8007786:	4622      	mov	r2, r4
 8007788:	4649      	mov	r1, r9
 800778a:	4638      	mov	r0, r7
 800778c:	47c0      	blx	r8
 800778e:	3001      	adds	r0, #1
 8007790:	d0e6      	beq.n	8007760 <_printf_common+0xa4>
 8007792:	3601      	adds	r6, #1
 8007794:	e7d9      	b.n	800774a <_printf_common+0x8e>
	...

08007798 <_printf_i>:
 8007798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800779c:	7e0f      	ldrb	r7, [r1, #24]
 800779e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077a0:	2f78      	cmp	r7, #120	; 0x78
 80077a2:	4691      	mov	r9, r2
 80077a4:	4680      	mov	r8, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	469a      	mov	sl, r3
 80077aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077ae:	d807      	bhi.n	80077c0 <_printf_i+0x28>
 80077b0:	2f62      	cmp	r7, #98	; 0x62
 80077b2:	d80a      	bhi.n	80077ca <_printf_i+0x32>
 80077b4:	2f00      	cmp	r7, #0
 80077b6:	f000 80d8 	beq.w	800796a <_printf_i+0x1d2>
 80077ba:	2f58      	cmp	r7, #88	; 0x58
 80077bc:	f000 80a3 	beq.w	8007906 <_printf_i+0x16e>
 80077c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077c8:	e03a      	b.n	8007840 <_printf_i+0xa8>
 80077ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077ce:	2b15      	cmp	r3, #21
 80077d0:	d8f6      	bhi.n	80077c0 <_printf_i+0x28>
 80077d2:	a101      	add	r1, pc, #4	; (adr r1, 80077d8 <_printf_i+0x40>)
 80077d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077d8:	08007831 	.word	0x08007831
 80077dc:	08007845 	.word	0x08007845
 80077e0:	080077c1 	.word	0x080077c1
 80077e4:	080077c1 	.word	0x080077c1
 80077e8:	080077c1 	.word	0x080077c1
 80077ec:	080077c1 	.word	0x080077c1
 80077f0:	08007845 	.word	0x08007845
 80077f4:	080077c1 	.word	0x080077c1
 80077f8:	080077c1 	.word	0x080077c1
 80077fc:	080077c1 	.word	0x080077c1
 8007800:	080077c1 	.word	0x080077c1
 8007804:	08007951 	.word	0x08007951
 8007808:	08007875 	.word	0x08007875
 800780c:	08007933 	.word	0x08007933
 8007810:	080077c1 	.word	0x080077c1
 8007814:	080077c1 	.word	0x080077c1
 8007818:	08007973 	.word	0x08007973
 800781c:	080077c1 	.word	0x080077c1
 8007820:	08007875 	.word	0x08007875
 8007824:	080077c1 	.word	0x080077c1
 8007828:	080077c1 	.word	0x080077c1
 800782c:	0800793b 	.word	0x0800793b
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	1d1a      	adds	r2, r3, #4
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	602a      	str	r2, [r5, #0]
 8007838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800783c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007840:	2301      	movs	r3, #1
 8007842:	e0a3      	b.n	800798c <_printf_i+0x1f4>
 8007844:	6820      	ldr	r0, [r4, #0]
 8007846:	6829      	ldr	r1, [r5, #0]
 8007848:	0606      	lsls	r6, r0, #24
 800784a:	f101 0304 	add.w	r3, r1, #4
 800784e:	d50a      	bpl.n	8007866 <_printf_i+0xce>
 8007850:	680e      	ldr	r6, [r1, #0]
 8007852:	602b      	str	r3, [r5, #0]
 8007854:	2e00      	cmp	r6, #0
 8007856:	da03      	bge.n	8007860 <_printf_i+0xc8>
 8007858:	232d      	movs	r3, #45	; 0x2d
 800785a:	4276      	negs	r6, r6
 800785c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007860:	485e      	ldr	r0, [pc, #376]	; (80079dc <_printf_i+0x244>)
 8007862:	230a      	movs	r3, #10
 8007864:	e019      	b.n	800789a <_printf_i+0x102>
 8007866:	680e      	ldr	r6, [r1, #0]
 8007868:	602b      	str	r3, [r5, #0]
 800786a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800786e:	bf18      	it	ne
 8007870:	b236      	sxthne	r6, r6
 8007872:	e7ef      	b.n	8007854 <_printf_i+0xbc>
 8007874:	682b      	ldr	r3, [r5, #0]
 8007876:	6820      	ldr	r0, [r4, #0]
 8007878:	1d19      	adds	r1, r3, #4
 800787a:	6029      	str	r1, [r5, #0]
 800787c:	0601      	lsls	r1, r0, #24
 800787e:	d501      	bpl.n	8007884 <_printf_i+0xec>
 8007880:	681e      	ldr	r6, [r3, #0]
 8007882:	e002      	b.n	800788a <_printf_i+0xf2>
 8007884:	0646      	lsls	r6, r0, #25
 8007886:	d5fb      	bpl.n	8007880 <_printf_i+0xe8>
 8007888:	881e      	ldrh	r6, [r3, #0]
 800788a:	4854      	ldr	r0, [pc, #336]	; (80079dc <_printf_i+0x244>)
 800788c:	2f6f      	cmp	r7, #111	; 0x6f
 800788e:	bf0c      	ite	eq
 8007890:	2308      	moveq	r3, #8
 8007892:	230a      	movne	r3, #10
 8007894:	2100      	movs	r1, #0
 8007896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800789a:	6865      	ldr	r5, [r4, #4]
 800789c:	60a5      	str	r5, [r4, #8]
 800789e:	2d00      	cmp	r5, #0
 80078a0:	bfa2      	ittt	ge
 80078a2:	6821      	ldrge	r1, [r4, #0]
 80078a4:	f021 0104 	bicge.w	r1, r1, #4
 80078a8:	6021      	strge	r1, [r4, #0]
 80078aa:	b90e      	cbnz	r6, 80078b0 <_printf_i+0x118>
 80078ac:	2d00      	cmp	r5, #0
 80078ae:	d04d      	beq.n	800794c <_printf_i+0x1b4>
 80078b0:	4615      	mov	r5, r2
 80078b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80078b6:	fb03 6711 	mls	r7, r3, r1, r6
 80078ba:	5dc7      	ldrb	r7, [r0, r7]
 80078bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078c0:	4637      	mov	r7, r6
 80078c2:	42bb      	cmp	r3, r7
 80078c4:	460e      	mov	r6, r1
 80078c6:	d9f4      	bls.n	80078b2 <_printf_i+0x11a>
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d10b      	bne.n	80078e4 <_printf_i+0x14c>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	07de      	lsls	r6, r3, #31
 80078d0:	d508      	bpl.n	80078e4 <_printf_i+0x14c>
 80078d2:	6923      	ldr	r3, [r4, #16]
 80078d4:	6861      	ldr	r1, [r4, #4]
 80078d6:	4299      	cmp	r1, r3
 80078d8:	bfde      	ittt	le
 80078da:	2330      	movle	r3, #48	; 0x30
 80078dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078e4:	1b52      	subs	r2, r2, r5
 80078e6:	6122      	str	r2, [r4, #16]
 80078e8:	f8cd a000 	str.w	sl, [sp]
 80078ec:	464b      	mov	r3, r9
 80078ee:	aa03      	add	r2, sp, #12
 80078f0:	4621      	mov	r1, r4
 80078f2:	4640      	mov	r0, r8
 80078f4:	f7ff fee2 	bl	80076bc <_printf_common>
 80078f8:	3001      	adds	r0, #1
 80078fa:	d14c      	bne.n	8007996 <_printf_i+0x1fe>
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	b004      	add	sp, #16
 8007902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007906:	4835      	ldr	r0, [pc, #212]	; (80079dc <_printf_i+0x244>)
 8007908:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800790c:	6829      	ldr	r1, [r5, #0]
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	f851 6b04 	ldr.w	r6, [r1], #4
 8007914:	6029      	str	r1, [r5, #0]
 8007916:	061d      	lsls	r5, r3, #24
 8007918:	d514      	bpl.n	8007944 <_printf_i+0x1ac>
 800791a:	07df      	lsls	r7, r3, #31
 800791c:	bf44      	itt	mi
 800791e:	f043 0320 	orrmi.w	r3, r3, #32
 8007922:	6023      	strmi	r3, [r4, #0]
 8007924:	b91e      	cbnz	r6, 800792e <_printf_i+0x196>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	f023 0320 	bic.w	r3, r3, #32
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	2310      	movs	r3, #16
 8007930:	e7b0      	b.n	8007894 <_printf_i+0xfc>
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	f043 0320 	orr.w	r3, r3, #32
 8007938:	6023      	str	r3, [r4, #0]
 800793a:	2378      	movs	r3, #120	; 0x78
 800793c:	4828      	ldr	r0, [pc, #160]	; (80079e0 <_printf_i+0x248>)
 800793e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007942:	e7e3      	b.n	800790c <_printf_i+0x174>
 8007944:	0659      	lsls	r1, r3, #25
 8007946:	bf48      	it	mi
 8007948:	b2b6      	uxthmi	r6, r6
 800794a:	e7e6      	b.n	800791a <_printf_i+0x182>
 800794c:	4615      	mov	r5, r2
 800794e:	e7bb      	b.n	80078c8 <_printf_i+0x130>
 8007950:	682b      	ldr	r3, [r5, #0]
 8007952:	6826      	ldr	r6, [r4, #0]
 8007954:	6961      	ldr	r1, [r4, #20]
 8007956:	1d18      	adds	r0, r3, #4
 8007958:	6028      	str	r0, [r5, #0]
 800795a:	0635      	lsls	r5, r6, #24
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	d501      	bpl.n	8007964 <_printf_i+0x1cc>
 8007960:	6019      	str	r1, [r3, #0]
 8007962:	e002      	b.n	800796a <_printf_i+0x1d2>
 8007964:	0670      	lsls	r0, r6, #25
 8007966:	d5fb      	bpl.n	8007960 <_printf_i+0x1c8>
 8007968:	8019      	strh	r1, [r3, #0]
 800796a:	2300      	movs	r3, #0
 800796c:	6123      	str	r3, [r4, #16]
 800796e:	4615      	mov	r5, r2
 8007970:	e7ba      	b.n	80078e8 <_printf_i+0x150>
 8007972:	682b      	ldr	r3, [r5, #0]
 8007974:	1d1a      	adds	r2, r3, #4
 8007976:	602a      	str	r2, [r5, #0]
 8007978:	681d      	ldr	r5, [r3, #0]
 800797a:	6862      	ldr	r2, [r4, #4]
 800797c:	2100      	movs	r1, #0
 800797e:	4628      	mov	r0, r5
 8007980:	f7f8 fc66 	bl	8000250 <memchr>
 8007984:	b108      	cbz	r0, 800798a <_printf_i+0x1f2>
 8007986:	1b40      	subs	r0, r0, r5
 8007988:	6060      	str	r0, [r4, #4]
 800798a:	6863      	ldr	r3, [r4, #4]
 800798c:	6123      	str	r3, [r4, #16]
 800798e:	2300      	movs	r3, #0
 8007990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007994:	e7a8      	b.n	80078e8 <_printf_i+0x150>
 8007996:	6923      	ldr	r3, [r4, #16]
 8007998:	462a      	mov	r2, r5
 800799a:	4649      	mov	r1, r9
 800799c:	4640      	mov	r0, r8
 800799e:	47d0      	blx	sl
 80079a0:	3001      	adds	r0, #1
 80079a2:	d0ab      	beq.n	80078fc <_printf_i+0x164>
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	079b      	lsls	r3, r3, #30
 80079a8:	d413      	bmi.n	80079d2 <_printf_i+0x23a>
 80079aa:	68e0      	ldr	r0, [r4, #12]
 80079ac:	9b03      	ldr	r3, [sp, #12]
 80079ae:	4298      	cmp	r0, r3
 80079b0:	bfb8      	it	lt
 80079b2:	4618      	movlt	r0, r3
 80079b4:	e7a4      	b.n	8007900 <_printf_i+0x168>
 80079b6:	2301      	movs	r3, #1
 80079b8:	4632      	mov	r2, r6
 80079ba:	4649      	mov	r1, r9
 80079bc:	4640      	mov	r0, r8
 80079be:	47d0      	blx	sl
 80079c0:	3001      	adds	r0, #1
 80079c2:	d09b      	beq.n	80078fc <_printf_i+0x164>
 80079c4:	3501      	adds	r5, #1
 80079c6:	68e3      	ldr	r3, [r4, #12]
 80079c8:	9903      	ldr	r1, [sp, #12]
 80079ca:	1a5b      	subs	r3, r3, r1
 80079cc:	42ab      	cmp	r3, r5
 80079ce:	dcf2      	bgt.n	80079b6 <_printf_i+0x21e>
 80079d0:	e7eb      	b.n	80079aa <_printf_i+0x212>
 80079d2:	2500      	movs	r5, #0
 80079d4:	f104 0619 	add.w	r6, r4, #25
 80079d8:	e7f5      	b.n	80079c6 <_printf_i+0x22e>
 80079da:	bf00      	nop
 80079dc:	0800b8ce 	.word	0x0800b8ce
 80079e0:	0800b8df 	.word	0x0800b8df

080079e4 <_scanf_float>:
 80079e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e8:	b087      	sub	sp, #28
 80079ea:	4617      	mov	r7, r2
 80079ec:	9303      	str	r3, [sp, #12]
 80079ee:	688b      	ldr	r3, [r1, #8]
 80079f0:	1e5a      	subs	r2, r3, #1
 80079f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80079f6:	bf83      	ittte	hi
 80079f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80079fc:	195b      	addhi	r3, r3, r5
 80079fe:	9302      	strhi	r3, [sp, #8]
 8007a00:	2300      	movls	r3, #0
 8007a02:	bf86      	itte	hi
 8007a04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007a08:	608b      	strhi	r3, [r1, #8]
 8007a0a:	9302      	strls	r3, [sp, #8]
 8007a0c:	680b      	ldr	r3, [r1, #0]
 8007a0e:	468b      	mov	fp, r1
 8007a10:	2500      	movs	r5, #0
 8007a12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007a16:	f84b 3b1c 	str.w	r3, [fp], #28
 8007a1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007a1e:	4680      	mov	r8, r0
 8007a20:	460c      	mov	r4, r1
 8007a22:	465e      	mov	r6, fp
 8007a24:	46aa      	mov	sl, r5
 8007a26:	46a9      	mov	r9, r5
 8007a28:	9501      	str	r5, [sp, #4]
 8007a2a:	68a2      	ldr	r2, [r4, #8]
 8007a2c:	b152      	cbz	r2, 8007a44 <_scanf_float+0x60>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b4e      	cmp	r3, #78	; 0x4e
 8007a34:	d864      	bhi.n	8007b00 <_scanf_float+0x11c>
 8007a36:	2b40      	cmp	r3, #64	; 0x40
 8007a38:	d83c      	bhi.n	8007ab4 <_scanf_float+0xd0>
 8007a3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007a3e:	b2c8      	uxtb	r0, r1
 8007a40:	280e      	cmp	r0, #14
 8007a42:	d93a      	bls.n	8007aba <_scanf_float+0xd6>
 8007a44:	f1b9 0f00 	cmp.w	r9, #0
 8007a48:	d003      	beq.n	8007a52 <_scanf_float+0x6e>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a56:	f1ba 0f01 	cmp.w	sl, #1
 8007a5a:	f200 8113 	bhi.w	8007c84 <_scanf_float+0x2a0>
 8007a5e:	455e      	cmp	r6, fp
 8007a60:	f200 8105 	bhi.w	8007c6e <_scanf_float+0x28a>
 8007a64:	2501      	movs	r5, #1
 8007a66:	4628      	mov	r0, r5
 8007a68:	b007      	add	sp, #28
 8007a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007a72:	2a0d      	cmp	r2, #13
 8007a74:	d8e6      	bhi.n	8007a44 <_scanf_float+0x60>
 8007a76:	a101      	add	r1, pc, #4	; (adr r1, 8007a7c <_scanf_float+0x98>)
 8007a78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007a7c:	08007bbb 	.word	0x08007bbb
 8007a80:	08007a45 	.word	0x08007a45
 8007a84:	08007a45 	.word	0x08007a45
 8007a88:	08007a45 	.word	0x08007a45
 8007a8c:	08007c1b 	.word	0x08007c1b
 8007a90:	08007bf3 	.word	0x08007bf3
 8007a94:	08007a45 	.word	0x08007a45
 8007a98:	08007a45 	.word	0x08007a45
 8007a9c:	08007bc9 	.word	0x08007bc9
 8007aa0:	08007a45 	.word	0x08007a45
 8007aa4:	08007a45 	.word	0x08007a45
 8007aa8:	08007a45 	.word	0x08007a45
 8007aac:	08007a45 	.word	0x08007a45
 8007ab0:	08007b81 	.word	0x08007b81
 8007ab4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007ab8:	e7db      	b.n	8007a72 <_scanf_float+0x8e>
 8007aba:	290e      	cmp	r1, #14
 8007abc:	d8c2      	bhi.n	8007a44 <_scanf_float+0x60>
 8007abe:	a001      	add	r0, pc, #4	; (adr r0, 8007ac4 <_scanf_float+0xe0>)
 8007ac0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007ac4:	08007b73 	.word	0x08007b73
 8007ac8:	08007a45 	.word	0x08007a45
 8007acc:	08007b73 	.word	0x08007b73
 8007ad0:	08007c07 	.word	0x08007c07
 8007ad4:	08007a45 	.word	0x08007a45
 8007ad8:	08007b21 	.word	0x08007b21
 8007adc:	08007b5d 	.word	0x08007b5d
 8007ae0:	08007b5d 	.word	0x08007b5d
 8007ae4:	08007b5d 	.word	0x08007b5d
 8007ae8:	08007b5d 	.word	0x08007b5d
 8007aec:	08007b5d 	.word	0x08007b5d
 8007af0:	08007b5d 	.word	0x08007b5d
 8007af4:	08007b5d 	.word	0x08007b5d
 8007af8:	08007b5d 	.word	0x08007b5d
 8007afc:	08007b5d 	.word	0x08007b5d
 8007b00:	2b6e      	cmp	r3, #110	; 0x6e
 8007b02:	d809      	bhi.n	8007b18 <_scanf_float+0x134>
 8007b04:	2b60      	cmp	r3, #96	; 0x60
 8007b06:	d8b2      	bhi.n	8007a6e <_scanf_float+0x8a>
 8007b08:	2b54      	cmp	r3, #84	; 0x54
 8007b0a:	d077      	beq.n	8007bfc <_scanf_float+0x218>
 8007b0c:	2b59      	cmp	r3, #89	; 0x59
 8007b0e:	d199      	bne.n	8007a44 <_scanf_float+0x60>
 8007b10:	2d07      	cmp	r5, #7
 8007b12:	d197      	bne.n	8007a44 <_scanf_float+0x60>
 8007b14:	2508      	movs	r5, #8
 8007b16:	e029      	b.n	8007b6c <_scanf_float+0x188>
 8007b18:	2b74      	cmp	r3, #116	; 0x74
 8007b1a:	d06f      	beq.n	8007bfc <_scanf_float+0x218>
 8007b1c:	2b79      	cmp	r3, #121	; 0x79
 8007b1e:	e7f6      	b.n	8007b0e <_scanf_float+0x12a>
 8007b20:	6821      	ldr	r1, [r4, #0]
 8007b22:	05c8      	lsls	r0, r1, #23
 8007b24:	d51a      	bpl.n	8007b5c <_scanf_float+0x178>
 8007b26:	9b02      	ldr	r3, [sp, #8]
 8007b28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007b2c:	6021      	str	r1, [r4, #0]
 8007b2e:	f109 0901 	add.w	r9, r9, #1
 8007b32:	b11b      	cbz	r3, 8007b3c <_scanf_float+0x158>
 8007b34:	3b01      	subs	r3, #1
 8007b36:	3201      	adds	r2, #1
 8007b38:	9302      	str	r3, [sp, #8]
 8007b3a:	60a2      	str	r2, [r4, #8]
 8007b3c:	68a3      	ldr	r3, [r4, #8]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	60a3      	str	r3, [r4, #8]
 8007b42:	6923      	ldr	r3, [r4, #16]
 8007b44:	3301      	adds	r3, #1
 8007b46:	6123      	str	r3, [r4, #16]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	607b      	str	r3, [r7, #4]
 8007b50:	f340 8084 	ble.w	8007c5c <_scanf_float+0x278>
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	3301      	adds	r3, #1
 8007b58:	603b      	str	r3, [r7, #0]
 8007b5a:	e766      	b.n	8007a2a <_scanf_float+0x46>
 8007b5c:	eb1a 0f05 	cmn.w	sl, r5
 8007b60:	f47f af70 	bne.w	8007a44 <_scanf_float+0x60>
 8007b64:	6822      	ldr	r2, [r4, #0]
 8007b66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007b6a:	6022      	str	r2, [r4, #0]
 8007b6c:	f806 3b01 	strb.w	r3, [r6], #1
 8007b70:	e7e4      	b.n	8007b3c <_scanf_float+0x158>
 8007b72:	6822      	ldr	r2, [r4, #0]
 8007b74:	0610      	lsls	r0, r2, #24
 8007b76:	f57f af65 	bpl.w	8007a44 <_scanf_float+0x60>
 8007b7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b7e:	e7f4      	b.n	8007b6a <_scanf_float+0x186>
 8007b80:	f1ba 0f00 	cmp.w	sl, #0
 8007b84:	d10e      	bne.n	8007ba4 <_scanf_float+0x1c0>
 8007b86:	f1b9 0f00 	cmp.w	r9, #0
 8007b8a:	d10e      	bne.n	8007baa <_scanf_float+0x1c6>
 8007b8c:	6822      	ldr	r2, [r4, #0]
 8007b8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007b92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007b96:	d108      	bne.n	8007baa <_scanf_float+0x1c6>
 8007b98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b9c:	6022      	str	r2, [r4, #0]
 8007b9e:	f04f 0a01 	mov.w	sl, #1
 8007ba2:	e7e3      	b.n	8007b6c <_scanf_float+0x188>
 8007ba4:	f1ba 0f02 	cmp.w	sl, #2
 8007ba8:	d055      	beq.n	8007c56 <_scanf_float+0x272>
 8007baa:	2d01      	cmp	r5, #1
 8007bac:	d002      	beq.n	8007bb4 <_scanf_float+0x1d0>
 8007bae:	2d04      	cmp	r5, #4
 8007bb0:	f47f af48 	bne.w	8007a44 <_scanf_float+0x60>
 8007bb4:	3501      	adds	r5, #1
 8007bb6:	b2ed      	uxtb	r5, r5
 8007bb8:	e7d8      	b.n	8007b6c <_scanf_float+0x188>
 8007bba:	f1ba 0f01 	cmp.w	sl, #1
 8007bbe:	f47f af41 	bne.w	8007a44 <_scanf_float+0x60>
 8007bc2:	f04f 0a02 	mov.w	sl, #2
 8007bc6:	e7d1      	b.n	8007b6c <_scanf_float+0x188>
 8007bc8:	b97d      	cbnz	r5, 8007bea <_scanf_float+0x206>
 8007bca:	f1b9 0f00 	cmp.w	r9, #0
 8007bce:	f47f af3c 	bne.w	8007a4a <_scanf_float+0x66>
 8007bd2:	6822      	ldr	r2, [r4, #0]
 8007bd4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007bd8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007bdc:	f47f af39 	bne.w	8007a52 <_scanf_float+0x6e>
 8007be0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007be4:	6022      	str	r2, [r4, #0]
 8007be6:	2501      	movs	r5, #1
 8007be8:	e7c0      	b.n	8007b6c <_scanf_float+0x188>
 8007bea:	2d03      	cmp	r5, #3
 8007bec:	d0e2      	beq.n	8007bb4 <_scanf_float+0x1d0>
 8007bee:	2d05      	cmp	r5, #5
 8007bf0:	e7de      	b.n	8007bb0 <_scanf_float+0x1cc>
 8007bf2:	2d02      	cmp	r5, #2
 8007bf4:	f47f af26 	bne.w	8007a44 <_scanf_float+0x60>
 8007bf8:	2503      	movs	r5, #3
 8007bfa:	e7b7      	b.n	8007b6c <_scanf_float+0x188>
 8007bfc:	2d06      	cmp	r5, #6
 8007bfe:	f47f af21 	bne.w	8007a44 <_scanf_float+0x60>
 8007c02:	2507      	movs	r5, #7
 8007c04:	e7b2      	b.n	8007b6c <_scanf_float+0x188>
 8007c06:	6822      	ldr	r2, [r4, #0]
 8007c08:	0591      	lsls	r1, r2, #22
 8007c0a:	f57f af1b 	bpl.w	8007a44 <_scanf_float+0x60>
 8007c0e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007c12:	6022      	str	r2, [r4, #0]
 8007c14:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c18:	e7a8      	b.n	8007b6c <_scanf_float+0x188>
 8007c1a:	6822      	ldr	r2, [r4, #0]
 8007c1c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007c20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007c24:	d006      	beq.n	8007c34 <_scanf_float+0x250>
 8007c26:	0550      	lsls	r0, r2, #21
 8007c28:	f57f af0c 	bpl.w	8007a44 <_scanf_float+0x60>
 8007c2c:	f1b9 0f00 	cmp.w	r9, #0
 8007c30:	f43f af0f 	beq.w	8007a52 <_scanf_float+0x6e>
 8007c34:	0591      	lsls	r1, r2, #22
 8007c36:	bf58      	it	pl
 8007c38:	9901      	ldrpl	r1, [sp, #4]
 8007c3a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c3e:	bf58      	it	pl
 8007c40:	eba9 0101 	subpl.w	r1, r9, r1
 8007c44:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007c48:	bf58      	it	pl
 8007c4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007c4e:	6022      	str	r2, [r4, #0]
 8007c50:	f04f 0900 	mov.w	r9, #0
 8007c54:	e78a      	b.n	8007b6c <_scanf_float+0x188>
 8007c56:	f04f 0a03 	mov.w	sl, #3
 8007c5a:	e787      	b.n	8007b6c <_scanf_float+0x188>
 8007c5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007c60:	4639      	mov	r1, r7
 8007c62:	4640      	mov	r0, r8
 8007c64:	4798      	blx	r3
 8007c66:	2800      	cmp	r0, #0
 8007c68:	f43f aedf 	beq.w	8007a2a <_scanf_float+0x46>
 8007c6c:	e6ea      	b.n	8007a44 <_scanf_float+0x60>
 8007c6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c76:	463a      	mov	r2, r7
 8007c78:	4640      	mov	r0, r8
 8007c7a:	4798      	blx	r3
 8007c7c:	6923      	ldr	r3, [r4, #16]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	6123      	str	r3, [r4, #16]
 8007c82:	e6ec      	b.n	8007a5e <_scanf_float+0x7a>
 8007c84:	1e6b      	subs	r3, r5, #1
 8007c86:	2b06      	cmp	r3, #6
 8007c88:	d825      	bhi.n	8007cd6 <_scanf_float+0x2f2>
 8007c8a:	2d02      	cmp	r5, #2
 8007c8c:	d836      	bhi.n	8007cfc <_scanf_float+0x318>
 8007c8e:	455e      	cmp	r6, fp
 8007c90:	f67f aee8 	bls.w	8007a64 <_scanf_float+0x80>
 8007c94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c9c:	463a      	mov	r2, r7
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	4798      	blx	r3
 8007ca2:	6923      	ldr	r3, [r4, #16]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	6123      	str	r3, [r4, #16]
 8007ca8:	e7f1      	b.n	8007c8e <_scanf_float+0x2aa>
 8007caa:	9802      	ldr	r0, [sp, #8]
 8007cac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cb0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007cb4:	9002      	str	r0, [sp, #8]
 8007cb6:	463a      	mov	r2, r7
 8007cb8:	4640      	mov	r0, r8
 8007cba:	4798      	blx	r3
 8007cbc:	6923      	ldr	r3, [r4, #16]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	6123      	str	r3, [r4, #16]
 8007cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cc6:	fa5f fa8a 	uxtb.w	sl, sl
 8007cca:	f1ba 0f02 	cmp.w	sl, #2
 8007cce:	d1ec      	bne.n	8007caa <_scanf_float+0x2c6>
 8007cd0:	3d03      	subs	r5, #3
 8007cd2:	b2ed      	uxtb	r5, r5
 8007cd4:	1b76      	subs	r6, r6, r5
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	05da      	lsls	r2, r3, #23
 8007cda:	d52f      	bpl.n	8007d3c <_scanf_float+0x358>
 8007cdc:	055b      	lsls	r3, r3, #21
 8007cde:	d510      	bpl.n	8007d02 <_scanf_float+0x31e>
 8007ce0:	455e      	cmp	r6, fp
 8007ce2:	f67f aebf 	bls.w	8007a64 <_scanf_float+0x80>
 8007ce6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007cee:	463a      	mov	r2, r7
 8007cf0:	4640      	mov	r0, r8
 8007cf2:	4798      	blx	r3
 8007cf4:	6923      	ldr	r3, [r4, #16]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	6123      	str	r3, [r4, #16]
 8007cfa:	e7f1      	b.n	8007ce0 <_scanf_float+0x2fc>
 8007cfc:	46aa      	mov	sl, r5
 8007cfe:	9602      	str	r6, [sp, #8]
 8007d00:	e7df      	b.n	8007cc2 <_scanf_float+0x2de>
 8007d02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007d06:	6923      	ldr	r3, [r4, #16]
 8007d08:	2965      	cmp	r1, #101	; 0x65
 8007d0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d0e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007d12:	6123      	str	r3, [r4, #16]
 8007d14:	d00c      	beq.n	8007d30 <_scanf_float+0x34c>
 8007d16:	2945      	cmp	r1, #69	; 0x45
 8007d18:	d00a      	beq.n	8007d30 <_scanf_float+0x34c>
 8007d1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d1e:	463a      	mov	r2, r7
 8007d20:	4640      	mov	r0, r8
 8007d22:	4798      	blx	r3
 8007d24:	6923      	ldr	r3, [r4, #16]
 8007d26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	1eb5      	subs	r5, r6, #2
 8007d2e:	6123      	str	r3, [r4, #16]
 8007d30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d34:	463a      	mov	r2, r7
 8007d36:	4640      	mov	r0, r8
 8007d38:	4798      	blx	r3
 8007d3a:	462e      	mov	r6, r5
 8007d3c:	6825      	ldr	r5, [r4, #0]
 8007d3e:	f015 0510 	ands.w	r5, r5, #16
 8007d42:	d14e      	bne.n	8007de2 <_scanf_float+0x3fe>
 8007d44:	7035      	strb	r5, [r6, #0]
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d50:	d119      	bne.n	8007d86 <_scanf_float+0x3a2>
 8007d52:	9b01      	ldr	r3, [sp, #4]
 8007d54:	454b      	cmp	r3, r9
 8007d56:	eba3 0209 	sub.w	r2, r3, r9
 8007d5a:	d121      	bne.n	8007da0 <_scanf_float+0x3bc>
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	4659      	mov	r1, fp
 8007d60:	4640      	mov	r0, r8
 8007d62:	f000 fe3b 	bl	80089dc <_strtod_r>
 8007d66:	6822      	ldr	r2, [r4, #0]
 8007d68:	9b03      	ldr	r3, [sp, #12]
 8007d6a:	f012 0f02 	tst.w	r2, #2
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	d021      	beq.n	8007db6 <_scanf_float+0x3d2>
 8007d72:	9903      	ldr	r1, [sp, #12]
 8007d74:	1d1a      	adds	r2, r3, #4
 8007d76:	600a      	str	r2, [r1, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	ed83 0b00 	vstr	d0, [r3]
 8007d7e:	68e3      	ldr	r3, [r4, #12]
 8007d80:	3301      	adds	r3, #1
 8007d82:	60e3      	str	r3, [r4, #12]
 8007d84:	e66f      	b.n	8007a66 <_scanf_float+0x82>
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d0e7      	beq.n	8007d5c <_scanf_float+0x378>
 8007d8c:	9905      	ldr	r1, [sp, #20]
 8007d8e:	230a      	movs	r3, #10
 8007d90:	462a      	mov	r2, r5
 8007d92:	3101      	adds	r1, #1
 8007d94:	4640      	mov	r0, r8
 8007d96:	f000 fea9 	bl	8008aec <_strtol_r>
 8007d9a:	9b04      	ldr	r3, [sp, #16]
 8007d9c:	9e05      	ldr	r6, [sp, #20]
 8007d9e:	1ac2      	subs	r2, r0, r3
 8007da0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007da4:	429e      	cmp	r6, r3
 8007da6:	bf28      	it	cs
 8007da8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007dac:	490e      	ldr	r1, [pc, #56]	; (8007de8 <_scanf_float+0x404>)
 8007dae:	4630      	mov	r0, r6
 8007db0:	f000 f824 	bl	8007dfc <siprintf>
 8007db4:	e7d2      	b.n	8007d5c <_scanf_float+0x378>
 8007db6:	9903      	ldr	r1, [sp, #12]
 8007db8:	f012 0f04 	tst.w	r2, #4
 8007dbc:	f103 0204 	add.w	r2, r3, #4
 8007dc0:	600a      	str	r2, [r1, #0]
 8007dc2:	d1d9      	bne.n	8007d78 <_scanf_float+0x394>
 8007dc4:	eeb4 0b40 	vcmp.f64	d0, d0
 8007dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dcc:	681e      	ldr	r6, [r3, #0]
 8007dce:	d705      	bvc.n	8007ddc <_scanf_float+0x3f8>
 8007dd0:	4806      	ldr	r0, [pc, #24]	; (8007dec <_scanf_float+0x408>)
 8007dd2:	f000 f80d 	bl	8007df0 <nanf>
 8007dd6:	ed86 0a00 	vstr	s0, [r6]
 8007dda:	e7d0      	b.n	8007d7e <_scanf_float+0x39a>
 8007ddc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007de0:	e7f9      	b.n	8007dd6 <_scanf_float+0x3f2>
 8007de2:	2500      	movs	r5, #0
 8007de4:	e63f      	b.n	8007a66 <_scanf_float+0x82>
 8007de6:	bf00      	nop
 8007de8:	0800b8f0 	.word	0x0800b8f0
 8007dec:	0800bcf8 	.word	0x0800bcf8

08007df0 <nanf>:
 8007df0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007df8 <nanf+0x8>
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	7fc00000 	.word	0x7fc00000

08007dfc <siprintf>:
 8007dfc:	b40e      	push	{r1, r2, r3}
 8007dfe:	b500      	push	{lr}
 8007e00:	b09c      	sub	sp, #112	; 0x70
 8007e02:	ab1d      	add	r3, sp, #116	; 0x74
 8007e04:	9002      	str	r0, [sp, #8]
 8007e06:	9006      	str	r0, [sp, #24]
 8007e08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e0c:	4809      	ldr	r0, [pc, #36]	; (8007e34 <siprintf+0x38>)
 8007e0e:	9107      	str	r1, [sp, #28]
 8007e10:	9104      	str	r1, [sp, #16]
 8007e12:	4909      	ldr	r1, [pc, #36]	; (8007e38 <siprintf+0x3c>)
 8007e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e18:	9105      	str	r1, [sp, #20]
 8007e1a:	6800      	ldr	r0, [r0, #0]
 8007e1c:	9301      	str	r3, [sp, #4]
 8007e1e:	a902      	add	r1, sp, #8
 8007e20:	f002 fe0c 	bl	800aa3c <_svfiprintf_r>
 8007e24:	9b02      	ldr	r3, [sp, #8]
 8007e26:	2200      	movs	r2, #0
 8007e28:	701a      	strb	r2, [r3, #0]
 8007e2a:	b01c      	add	sp, #112	; 0x70
 8007e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e30:	b003      	add	sp, #12
 8007e32:	4770      	bx	lr
 8007e34:	20000024 	.word	0x20000024
 8007e38:	ffff0208 	.word	0xffff0208

08007e3c <sulp>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	4604      	mov	r4, r0
 8007e40:	460d      	mov	r5, r1
 8007e42:	4616      	mov	r6, r2
 8007e44:	ec45 4b10 	vmov	d0, r4, r5
 8007e48:	f002 fb5a 	bl	800a500 <__ulp>
 8007e4c:	b17e      	cbz	r6, 8007e6e <sulp+0x32>
 8007e4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007e52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	dd09      	ble.n	8007e6e <sulp+0x32>
 8007e5a:	051b      	lsls	r3, r3, #20
 8007e5c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007e60:	2000      	movs	r0, #0
 8007e62:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8007e66:	ec41 0b17 	vmov	d7, r0, r1
 8007e6a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}

08007e70 <_strtod_l>:
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	ed2d 8b0e 	vpush	{d8-d14}
 8007e78:	b097      	sub	sp, #92	; 0x5c
 8007e7a:	461f      	mov	r7, r3
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9312      	str	r3, [sp, #72]	; 0x48
 8007e80:	4ba1      	ldr	r3, [pc, #644]	; (8008108 <_strtod_l+0x298>)
 8007e82:	920d      	str	r2, [sp, #52]	; 0x34
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	9307      	str	r3, [sp, #28]
 8007e88:	4604      	mov	r4, r0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	468b      	mov	fp, r1
 8007e8e:	f7f8 f9d7 	bl	8000240 <strlen>
 8007e92:	f04f 0800 	mov.w	r8, #0
 8007e96:	4605      	mov	r5, r0
 8007e98:	f04f 0900 	mov.w	r9, #0
 8007e9c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8007ea0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007ea2:	7813      	ldrb	r3, [r2, #0]
 8007ea4:	2b2b      	cmp	r3, #43	; 0x2b
 8007ea6:	d04d      	beq.n	8007f44 <_strtod_l+0xd4>
 8007ea8:	d83a      	bhi.n	8007f20 <_strtod_l+0xb0>
 8007eaa:	2b0d      	cmp	r3, #13
 8007eac:	d833      	bhi.n	8007f16 <_strtod_l+0xa6>
 8007eae:	2b08      	cmp	r3, #8
 8007eb0:	d833      	bhi.n	8007f1a <_strtod_l+0xaa>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d03d      	beq.n	8007f32 <_strtod_l+0xc2>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	9308      	str	r3, [sp, #32]
 8007eba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007ebc:	7833      	ldrb	r3, [r6, #0]
 8007ebe:	2b30      	cmp	r3, #48	; 0x30
 8007ec0:	f040 80b0 	bne.w	8008024 <_strtod_l+0x1b4>
 8007ec4:	7873      	ldrb	r3, [r6, #1]
 8007ec6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007eca:	2b58      	cmp	r3, #88	; 0x58
 8007ecc:	d167      	bne.n	8007f9e <_strtod_l+0x12e>
 8007ece:	9b08      	ldr	r3, [sp, #32]
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	ab12      	add	r3, sp, #72	; 0x48
 8007ed4:	9702      	str	r7, [sp, #8]
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	4a8c      	ldr	r2, [pc, #560]	; (800810c <_strtod_l+0x29c>)
 8007eda:	ab13      	add	r3, sp, #76	; 0x4c
 8007edc:	a911      	add	r1, sp, #68	; 0x44
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f001 fc68 	bl	80097b4 <__gethex>
 8007ee4:	f010 0507 	ands.w	r5, r0, #7
 8007ee8:	4607      	mov	r7, r0
 8007eea:	d005      	beq.n	8007ef8 <_strtod_l+0x88>
 8007eec:	2d06      	cmp	r5, #6
 8007eee:	d12b      	bne.n	8007f48 <_strtod_l+0xd8>
 8007ef0:	3601      	adds	r6, #1
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	9611      	str	r6, [sp, #68]	; 0x44
 8007ef6:	9308      	str	r3, [sp, #32]
 8007ef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f040 854e 	bne.w	800899c <_strtod_l+0xb2c>
 8007f00:	9b08      	ldr	r3, [sp, #32]
 8007f02:	b1e3      	cbz	r3, 8007f3e <_strtod_l+0xce>
 8007f04:	ec49 8b17 	vmov	d7, r8, r9
 8007f08:	eeb1 0b47 	vneg.f64	d0, d7
 8007f0c:	b017      	add	sp, #92	; 0x5c
 8007f0e:	ecbd 8b0e 	vpop	{d8-d14}
 8007f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f16:	2b20      	cmp	r3, #32
 8007f18:	d1cd      	bne.n	8007eb6 <_strtod_l+0x46>
 8007f1a:	3201      	adds	r2, #1
 8007f1c:	9211      	str	r2, [sp, #68]	; 0x44
 8007f1e:	e7bf      	b.n	8007ea0 <_strtod_l+0x30>
 8007f20:	2b2d      	cmp	r3, #45	; 0x2d
 8007f22:	d1c8      	bne.n	8007eb6 <_strtod_l+0x46>
 8007f24:	2301      	movs	r3, #1
 8007f26:	9308      	str	r3, [sp, #32]
 8007f28:	1c53      	adds	r3, r2, #1
 8007f2a:	9311      	str	r3, [sp, #68]	; 0x44
 8007f2c:	7853      	ldrb	r3, [r2, #1]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1c3      	bne.n	8007eba <_strtod_l+0x4a>
 8007f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f34:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f040 852d 	bne.w	8008998 <_strtod_l+0xb28>
 8007f3e:	ec49 8b10 	vmov	d0, r8, r9
 8007f42:	e7e3      	b.n	8007f0c <_strtod_l+0x9c>
 8007f44:	2300      	movs	r3, #0
 8007f46:	e7ee      	b.n	8007f26 <_strtod_l+0xb6>
 8007f48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f4a:	b13a      	cbz	r2, 8007f5c <_strtod_l+0xec>
 8007f4c:	2135      	movs	r1, #53	; 0x35
 8007f4e:	a814      	add	r0, sp, #80	; 0x50
 8007f50:	f002 fbde 	bl	800a710 <__copybits>
 8007f54:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007f56:	4620      	mov	r0, r4
 8007f58:	f001 ffa0 	bl	8009e9c <_Bfree>
 8007f5c:	3d01      	subs	r5, #1
 8007f5e:	2d04      	cmp	r5, #4
 8007f60:	d806      	bhi.n	8007f70 <_strtod_l+0x100>
 8007f62:	e8df f005 	tbb	[pc, r5]
 8007f66:	030a      	.short	0x030a
 8007f68:	1714      	.short	0x1714
 8007f6a:	0a          	.byte	0x0a
 8007f6b:	00          	.byte	0x00
 8007f6c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8007f70:	073f      	lsls	r7, r7, #28
 8007f72:	d5c1      	bpl.n	8007ef8 <_strtod_l+0x88>
 8007f74:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007f78:	e7be      	b.n	8007ef8 <_strtod_l+0x88>
 8007f7a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8007f7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f84:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007f8c:	e7f0      	b.n	8007f70 <_strtod_l+0x100>
 8007f8e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8008110 <_strtod_l+0x2a0>
 8007f92:	e7ed      	b.n	8007f70 <_strtod_l+0x100>
 8007f94:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007f98:	f04f 38ff 	mov.w	r8, #4294967295
 8007f9c:	e7e8      	b.n	8007f70 <_strtod_l+0x100>
 8007f9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	9211      	str	r2, [sp, #68]	; 0x44
 8007fa4:	785b      	ldrb	r3, [r3, #1]
 8007fa6:	2b30      	cmp	r3, #48	; 0x30
 8007fa8:	d0f9      	beq.n	8007f9e <_strtod_l+0x12e>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0a4      	beq.n	8007ef8 <_strtod_l+0x88>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	f04f 0a00 	mov.w	sl, #0
 8007fb4:	9304      	str	r3, [sp, #16]
 8007fb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8007fba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007fbe:	f8cd a018 	str.w	sl, [sp, #24]
 8007fc2:	220a      	movs	r2, #10
 8007fc4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007fc6:	7807      	ldrb	r7, [r0, #0]
 8007fc8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007fcc:	b2d9      	uxtb	r1, r3
 8007fce:	2909      	cmp	r1, #9
 8007fd0:	d92a      	bls.n	8008028 <_strtod_l+0x1b8>
 8007fd2:	9907      	ldr	r1, [sp, #28]
 8007fd4:	462a      	mov	r2, r5
 8007fd6:	f002 fe4b 	bl	800ac70 <strncmp>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d033      	beq.n	8008046 <_strtod_l+0x1d6>
 8007fde:	2000      	movs	r0, #0
 8007fe0:	9b06      	ldr	r3, [sp, #24]
 8007fe2:	463a      	mov	r2, r7
 8007fe4:	4601      	mov	r1, r0
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	2a65      	cmp	r2, #101	; 0x65
 8007fea:	d001      	beq.n	8007ff0 <_strtod_l+0x180>
 8007fec:	2a45      	cmp	r2, #69	; 0x45
 8007fee:	d117      	bne.n	8008020 <_strtod_l+0x1b0>
 8007ff0:	b91b      	cbnz	r3, 8007ffa <_strtod_l+0x18a>
 8007ff2:	9b04      	ldr	r3, [sp, #16]
 8007ff4:	4303      	orrs	r3, r0
 8007ff6:	d09c      	beq.n	8007f32 <_strtod_l+0xc2>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8007ffe:	f10b 0201 	add.w	r2, fp, #1
 8008002:	9211      	str	r2, [sp, #68]	; 0x44
 8008004:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008008:	2a2b      	cmp	r2, #43	; 0x2b
 800800a:	d071      	beq.n	80080f0 <_strtod_l+0x280>
 800800c:	2a2d      	cmp	r2, #45	; 0x2d
 800800e:	d077      	beq.n	8008100 <_strtod_l+0x290>
 8008010:	f04f 0e00 	mov.w	lr, #0
 8008014:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008018:	2d09      	cmp	r5, #9
 800801a:	d97f      	bls.n	800811c <_strtod_l+0x2ac>
 800801c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008020:	2500      	movs	r5, #0
 8008022:	e09b      	b.n	800815c <_strtod_l+0x2ec>
 8008024:	2300      	movs	r3, #0
 8008026:	e7c3      	b.n	8007fb0 <_strtod_l+0x140>
 8008028:	9906      	ldr	r1, [sp, #24]
 800802a:	2908      	cmp	r1, #8
 800802c:	bfdd      	ittte	le
 800802e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008030:	fb02 3301 	mlale	r3, r2, r1, r3
 8008034:	9309      	strle	r3, [sp, #36]	; 0x24
 8008036:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800803a:	9b06      	ldr	r3, [sp, #24]
 800803c:	3001      	adds	r0, #1
 800803e:	3301      	adds	r3, #1
 8008040:	9306      	str	r3, [sp, #24]
 8008042:	9011      	str	r0, [sp, #68]	; 0x44
 8008044:	e7be      	b.n	8007fc4 <_strtod_l+0x154>
 8008046:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008048:	195a      	adds	r2, r3, r5
 800804a:	9211      	str	r2, [sp, #68]	; 0x44
 800804c:	5d5a      	ldrb	r2, [r3, r5]
 800804e:	9b06      	ldr	r3, [sp, #24]
 8008050:	b3a3      	cbz	r3, 80080bc <_strtod_l+0x24c>
 8008052:	4607      	mov	r7, r0
 8008054:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008058:	2909      	cmp	r1, #9
 800805a:	d912      	bls.n	8008082 <_strtod_l+0x212>
 800805c:	2101      	movs	r1, #1
 800805e:	e7c3      	b.n	8007fe8 <_strtod_l+0x178>
 8008060:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008062:	1c5a      	adds	r2, r3, #1
 8008064:	9211      	str	r2, [sp, #68]	; 0x44
 8008066:	785a      	ldrb	r2, [r3, #1]
 8008068:	3001      	adds	r0, #1
 800806a:	2a30      	cmp	r2, #48	; 0x30
 800806c:	d0f8      	beq.n	8008060 <_strtod_l+0x1f0>
 800806e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008072:	2b08      	cmp	r3, #8
 8008074:	f200 8497 	bhi.w	80089a6 <_strtod_l+0xb36>
 8008078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800807a:	930a      	str	r3, [sp, #40]	; 0x28
 800807c:	4607      	mov	r7, r0
 800807e:	2000      	movs	r0, #0
 8008080:	4603      	mov	r3, r0
 8008082:	3a30      	subs	r2, #48	; 0x30
 8008084:	f100 0101 	add.w	r1, r0, #1
 8008088:	d012      	beq.n	80080b0 <_strtod_l+0x240>
 800808a:	440f      	add	r7, r1
 800808c:	eb00 0c03 	add.w	ip, r0, r3
 8008090:	4619      	mov	r1, r3
 8008092:	250a      	movs	r5, #10
 8008094:	4561      	cmp	r1, ip
 8008096:	d113      	bne.n	80080c0 <_strtod_l+0x250>
 8008098:	1819      	adds	r1, r3, r0
 800809a:	2908      	cmp	r1, #8
 800809c:	f103 0301 	add.w	r3, r3, #1
 80080a0:	4403      	add	r3, r0
 80080a2:	dc1c      	bgt.n	80080de <_strtod_l+0x26e>
 80080a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080a6:	210a      	movs	r1, #10
 80080a8:	fb01 2200 	mla	r2, r1, r0, r2
 80080ac:	9209      	str	r2, [sp, #36]	; 0x24
 80080ae:	2100      	movs	r1, #0
 80080b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80080b2:	1c50      	adds	r0, r2, #1
 80080b4:	9011      	str	r0, [sp, #68]	; 0x44
 80080b6:	7852      	ldrb	r2, [r2, #1]
 80080b8:	4608      	mov	r0, r1
 80080ba:	e7cb      	b.n	8008054 <_strtod_l+0x1e4>
 80080bc:	9806      	ldr	r0, [sp, #24]
 80080be:	e7d4      	b.n	800806a <_strtod_l+0x1fa>
 80080c0:	2908      	cmp	r1, #8
 80080c2:	dc04      	bgt.n	80080ce <_strtod_l+0x25e>
 80080c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80080c6:	436e      	muls	r6, r5
 80080c8:	9609      	str	r6, [sp, #36]	; 0x24
 80080ca:	3101      	adds	r1, #1
 80080cc:	e7e2      	b.n	8008094 <_strtod_l+0x224>
 80080ce:	f101 0e01 	add.w	lr, r1, #1
 80080d2:	f1be 0f10 	cmp.w	lr, #16
 80080d6:	bfd8      	it	le
 80080d8:	fb05 fa0a 	mulle.w	sl, r5, sl
 80080dc:	e7f5      	b.n	80080ca <_strtod_l+0x25a>
 80080de:	2b10      	cmp	r3, #16
 80080e0:	bfdc      	itt	le
 80080e2:	210a      	movle	r1, #10
 80080e4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80080e8:	e7e1      	b.n	80080ae <_strtod_l+0x23e>
 80080ea:	2700      	movs	r7, #0
 80080ec:	2101      	movs	r1, #1
 80080ee:	e780      	b.n	8007ff2 <_strtod_l+0x182>
 80080f0:	f04f 0e00 	mov.w	lr, #0
 80080f4:	f10b 0202 	add.w	r2, fp, #2
 80080f8:	9211      	str	r2, [sp, #68]	; 0x44
 80080fa:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80080fe:	e789      	b.n	8008014 <_strtod_l+0x1a4>
 8008100:	f04f 0e01 	mov.w	lr, #1
 8008104:	e7f6      	b.n	80080f4 <_strtod_l+0x284>
 8008106:	bf00      	nop
 8008108:	0800bb40 	.word	0x0800bb40
 800810c:	0800b8f8 	.word	0x0800b8f8
 8008110:	7ff00000 	.word	0x7ff00000
 8008114:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008116:	1c55      	adds	r5, r2, #1
 8008118:	9511      	str	r5, [sp, #68]	; 0x44
 800811a:	7852      	ldrb	r2, [r2, #1]
 800811c:	2a30      	cmp	r2, #48	; 0x30
 800811e:	d0f9      	beq.n	8008114 <_strtod_l+0x2a4>
 8008120:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008124:	2d08      	cmp	r5, #8
 8008126:	f63f af7b 	bhi.w	8008020 <_strtod_l+0x1b0>
 800812a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800812e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008130:	9207      	str	r2, [sp, #28]
 8008132:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008134:	1c55      	adds	r5, r2, #1
 8008136:	9511      	str	r5, [sp, #68]	; 0x44
 8008138:	7852      	ldrb	r2, [r2, #1]
 800813a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800813e:	2e09      	cmp	r6, #9
 8008140:	d937      	bls.n	80081b2 <_strtod_l+0x342>
 8008142:	9e07      	ldr	r6, [sp, #28]
 8008144:	1bad      	subs	r5, r5, r6
 8008146:	2d08      	cmp	r5, #8
 8008148:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800814c:	dc02      	bgt.n	8008154 <_strtod_l+0x2e4>
 800814e:	4565      	cmp	r5, ip
 8008150:	bfa8      	it	ge
 8008152:	4665      	movge	r5, ip
 8008154:	f1be 0f00 	cmp.w	lr, #0
 8008158:	d000      	beq.n	800815c <_strtod_l+0x2ec>
 800815a:	426d      	negs	r5, r5
 800815c:	2b00      	cmp	r3, #0
 800815e:	d14d      	bne.n	80081fc <_strtod_l+0x38c>
 8008160:	9b04      	ldr	r3, [sp, #16]
 8008162:	4303      	orrs	r3, r0
 8008164:	f47f aec8 	bne.w	8007ef8 <_strtod_l+0x88>
 8008168:	2900      	cmp	r1, #0
 800816a:	f47f aee2 	bne.w	8007f32 <_strtod_l+0xc2>
 800816e:	2a69      	cmp	r2, #105	; 0x69
 8008170:	d027      	beq.n	80081c2 <_strtod_l+0x352>
 8008172:	dc24      	bgt.n	80081be <_strtod_l+0x34e>
 8008174:	2a49      	cmp	r2, #73	; 0x49
 8008176:	d024      	beq.n	80081c2 <_strtod_l+0x352>
 8008178:	2a4e      	cmp	r2, #78	; 0x4e
 800817a:	f47f aeda 	bne.w	8007f32 <_strtod_l+0xc2>
 800817e:	4996      	ldr	r1, [pc, #600]	; (80083d8 <_strtod_l+0x568>)
 8008180:	a811      	add	r0, sp, #68	; 0x44
 8008182:	f001 fd6f 	bl	8009c64 <__match>
 8008186:	2800      	cmp	r0, #0
 8008188:	f43f aed3 	beq.w	8007f32 <_strtod_l+0xc2>
 800818c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	2b28      	cmp	r3, #40	; 0x28
 8008192:	d12d      	bne.n	80081f0 <_strtod_l+0x380>
 8008194:	4991      	ldr	r1, [pc, #580]	; (80083dc <_strtod_l+0x56c>)
 8008196:	aa14      	add	r2, sp, #80	; 0x50
 8008198:	a811      	add	r0, sp, #68	; 0x44
 800819a:	f001 fd77 	bl	8009c8c <__hexnan>
 800819e:	2805      	cmp	r0, #5
 80081a0:	d126      	bne.n	80081f0 <_strtod_l+0x380>
 80081a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081a4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80081a8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80081ac:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80081b0:	e6a2      	b.n	8007ef8 <_strtod_l+0x88>
 80081b2:	250a      	movs	r5, #10
 80081b4:	fb05 250c 	mla	r5, r5, ip, r2
 80081b8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80081bc:	e7b9      	b.n	8008132 <_strtod_l+0x2c2>
 80081be:	2a6e      	cmp	r2, #110	; 0x6e
 80081c0:	e7db      	b.n	800817a <_strtod_l+0x30a>
 80081c2:	4987      	ldr	r1, [pc, #540]	; (80083e0 <_strtod_l+0x570>)
 80081c4:	a811      	add	r0, sp, #68	; 0x44
 80081c6:	f001 fd4d 	bl	8009c64 <__match>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	f43f aeb1 	beq.w	8007f32 <_strtod_l+0xc2>
 80081d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081d2:	4984      	ldr	r1, [pc, #528]	; (80083e4 <_strtod_l+0x574>)
 80081d4:	3b01      	subs	r3, #1
 80081d6:	a811      	add	r0, sp, #68	; 0x44
 80081d8:	9311      	str	r3, [sp, #68]	; 0x44
 80081da:	f001 fd43 	bl	8009c64 <__match>
 80081de:	b910      	cbnz	r0, 80081e6 <_strtod_l+0x376>
 80081e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081e2:	3301      	adds	r3, #1
 80081e4:	9311      	str	r3, [sp, #68]	; 0x44
 80081e6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80083f8 <_strtod_l+0x588>
 80081ea:	f04f 0800 	mov.w	r8, #0
 80081ee:	e683      	b.n	8007ef8 <_strtod_l+0x88>
 80081f0:	487d      	ldr	r0, [pc, #500]	; (80083e8 <_strtod_l+0x578>)
 80081f2:	f002 fd25 	bl	800ac40 <nan>
 80081f6:	ec59 8b10 	vmov	r8, r9, d0
 80081fa:	e67d      	b.n	8007ef8 <_strtod_l+0x88>
 80081fc:	1bea      	subs	r2, r5, r7
 80081fe:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8008202:	9207      	str	r2, [sp, #28]
 8008204:	9a06      	ldr	r2, [sp, #24]
 8008206:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800820a:	2a00      	cmp	r2, #0
 800820c:	bf08      	it	eq
 800820e:	461a      	moveq	r2, r3
 8008210:	2b10      	cmp	r3, #16
 8008212:	9206      	str	r2, [sp, #24]
 8008214:	461a      	mov	r2, r3
 8008216:	bfa8      	it	ge
 8008218:	2210      	movge	r2, #16
 800821a:	2b09      	cmp	r3, #9
 800821c:	ec59 8b17 	vmov	r8, r9, d7
 8008220:	dd0c      	ble.n	800823c <_strtod_l+0x3cc>
 8008222:	4972      	ldr	r1, [pc, #456]	; (80083ec <_strtod_l+0x57c>)
 8008224:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008228:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800822c:	ee06 aa90 	vmov	s13, sl
 8008230:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008234:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008238:	ec59 8b16 	vmov	r8, r9, d6
 800823c:	2b0f      	cmp	r3, #15
 800823e:	dc36      	bgt.n	80082ae <_strtod_l+0x43e>
 8008240:	9907      	ldr	r1, [sp, #28]
 8008242:	2900      	cmp	r1, #0
 8008244:	f43f ae58 	beq.w	8007ef8 <_strtod_l+0x88>
 8008248:	dd23      	ble.n	8008292 <_strtod_l+0x422>
 800824a:	2916      	cmp	r1, #22
 800824c:	dc0b      	bgt.n	8008266 <_strtod_l+0x3f6>
 800824e:	4b67      	ldr	r3, [pc, #412]	; (80083ec <_strtod_l+0x57c>)
 8008250:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008254:	ed93 7b00 	vldr	d7, [r3]
 8008258:	ec49 8b16 	vmov	d6, r8, r9
 800825c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008260:	ec59 8b17 	vmov	r8, r9, d7
 8008264:	e648      	b.n	8007ef8 <_strtod_l+0x88>
 8008266:	9807      	ldr	r0, [sp, #28]
 8008268:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800826c:	4281      	cmp	r1, r0
 800826e:	db1e      	blt.n	80082ae <_strtod_l+0x43e>
 8008270:	4a5e      	ldr	r2, [pc, #376]	; (80083ec <_strtod_l+0x57c>)
 8008272:	f1c3 030f 	rsb	r3, r3, #15
 8008276:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800827a:	ed91 7b00 	vldr	d7, [r1]
 800827e:	ec49 8b16 	vmov	d6, r8, r9
 8008282:	1ac3      	subs	r3, r0, r3
 8008284:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008288:	ee27 7b06 	vmul.f64	d7, d7, d6
 800828c:	ed92 6b00 	vldr	d6, [r2]
 8008290:	e7e4      	b.n	800825c <_strtod_l+0x3ec>
 8008292:	9907      	ldr	r1, [sp, #28]
 8008294:	3116      	adds	r1, #22
 8008296:	db0a      	blt.n	80082ae <_strtod_l+0x43e>
 8008298:	4b54      	ldr	r3, [pc, #336]	; (80083ec <_strtod_l+0x57c>)
 800829a:	1b7d      	subs	r5, r7, r5
 800829c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80082a0:	ed95 7b00 	vldr	d7, [r5]
 80082a4:	ec49 8b16 	vmov	d6, r8, r9
 80082a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80082ac:	e7d8      	b.n	8008260 <_strtod_l+0x3f0>
 80082ae:	9907      	ldr	r1, [sp, #28]
 80082b0:	1a9a      	subs	r2, r3, r2
 80082b2:	440a      	add	r2, r1
 80082b4:	2a00      	cmp	r2, #0
 80082b6:	dd6f      	ble.n	8008398 <_strtod_l+0x528>
 80082b8:	f012 000f 	ands.w	r0, r2, #15
 80082bc:	d00a      	beq.n	80082d4 <_strtod_l+0x464>
 80082be:	494b      	ldr	r1, [pc, #300]	; (80083ec <_strtod_l+0x57c>)
 80082c0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80082c4:	ed91 7b00 	vldr	d7, [r1]
 80082c8:	ec49 8b16 	vmov	d6, r8, r9
 80082cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80082d0:	ec59 8b17 	vmov	r8, r9, d7
 80082d4:	f032 020f 	bics.w	r2, r2, #15
 80082d8:	d04f      	beq.n	800837a <_strtod_l+0x50a>
 80082da:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80082de:	dd22      	ble.n	8008326 <_strtod_l+0x4b6>
 80082e0:	2500      	movs	r5, #0
 80082e2:	462e      	mov	r6, r5
 80082e4:	9506      	str	r5, [sp, #24]
 80082e6:	462f      	mov	r7, r5
 80082e8:	2322      	movs	r3, #34	; 0x22
 80082ea:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80083f8 <_strtod_l+0x588>
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	f04f 0800 	mov.w	r8, #0
 80082f4:	9b06      	ldr	r3, [sp, #24]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f43f adfe 	beq.w	8007ef8 <_strtod_l+0x88>
 80082fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80082fe:	4620      	mov	r0, r4
 8008300:	f001 fdcc 	bl	8009e9c <_Bfree>
 8008304:	4639      	mov	r1, r7
 8008306:	4620      	mov	r0, r4
 8008308:	f001 fdc8 	bl	8009e9c <_Bfree>
 800830c:	4631      	mov	r1, r6
 800830e:	4620      	mov	r0, r4
 8008310:	f001 fdc4 	bl	8009e9c <_Bfree>
 8008314:	9906      	ldr	r1, [sp, #24]
 8008316:	4620      	mov	r0, r4
 8008318:	f001 fdc0 	bl	8009e9c <_Bfree>
 800831c:	4629      	mov	r1, r5
 800831e:	4620      	mov	r0, r4
 8008320:	f001 fdbc 	bl	8009e9c <_Bfree>
 8008324:	e5e8      	b.n	8007ef8 <_strtod_l+0x88>
 8008326:	2000      	movs	r0, #0
 8008328:	ec49 8b17 	vmov	d7, r8, r9
 800832c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80083f0 <_strtod_l+0x580>
 8008330:	1112      	asrs	r2, r2, #4
 8008332:	4601      	mov	r1, r0
 8008334:	2a01      	cmp	r2, #1
 8008336:	dc23      	bgt.n	8008380 <_strtod_l+0x510>
 8008338:	b108      	cbz	r0, 800833e <_strtod_l+0x4ce>
 800833a:	ec59 8b17 	vmov	r8, r9, d7
 800833e:	4a2c      	ldr	r2, [pc, #176]	; (80083f0 <_strtod_l+0x580>)
 8008340:	482c      	ldr	r0, [pc, #176]	; (80083f4 <_strtod_l+0x584>)
 8008342:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008346:	ed92 7b00 	vldr	d7, [r2]
 800834a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800834e:	ec49 8b16 	vmov	d6, r8, r9
 8008352:	4a29      	ldr	r2, [pc, #164]	; (80083f8 <_strtod_l+0x588>)
 8008354:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008358:	ee17 1a90 	vmov	r1, s15
 800835c:	400a      	ands	r2, r1
 800835e:	4282      	cmp	r2, r0
 8008360:	ec59 8b17 	vmov	r8, r9, d7
 8008364:	d8bc      	bhi.n	80082e0 <_strtod_l+0x470>
 8008366:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800836a:	4282      	cmp	r2, r0
 800836c:	bf86      	itte	hi
 800836e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80083fc <_strtod_l+0x58c>
 8008372:	f04f 38ff 	movhi.w	r8, #4294967295
 8008376:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800837a:	2200      	movs	r2, #0
 800837c:	9204      	str	r2, [sp, #16]
 800837e:	e078      	b.n	8008472 <_strtod_l+0x602>
 8008380:	07d6      	lsls	r6, r2, #31
 8008382:	d504      	bpl.n	800838e <_strtod_l+0x51e>
 8008384:	ed9c 6b00 	vldr	d6, [ip]
 8008388:	2001      	movs	r0, #1
 800838a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800838e:	3101      	adds	r1, #1
 8008390:	1052      	asrs	r2, r2, #1
 8008392:	f10c 0c08 	add.w	ip, ip, #8
 8008396:	e7cd      	b.n	8008334 <_strtod_l+0x4c4>
 8008398:	d0ef      	beq.n	800837a <_strtod_l+0x50a>
 800839a:	4252      	negs	r2, r2
 800839c:	f012 000f 	ands.w	r0, r2, #15
 80083a0:	d00a      	beq.n	80083b8 <_strtod_l+0x548>
 80083a2:	4912      	ldr	r1, [pc, #72]	; (80083ec <_strtod_l+0x57c>)
 80083a4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80083a8:	ed91 7b00 	vldr	d7, [r1]
 80083ac:	ec49 8b16 	vmov	d6, r8, r9
 80083b0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80083b4:	ec59 8b17 	vmov	r8, r9, d7
 80083b8:	1112      	asrs	r2, r2, #4
 80083ba:	d0de      	beq.n	800837a <_strtod_l+0x50a>
 80083bc:	2a1f      	cmp	r2, #31
 80083be:	dd1f      	ble.n	8008400 <_strtod_l+0x590>
 80083c0:	2500      	movs	r5, #0
 80083c2:	462e      	mov	r6, r5
 80083c4:	9506      	str	r5, [sp, #24]
 80083c6:	462f      	mov	r7, r5
 80083c8:	2322      	movs	r3, #34	; 0x22
 80083ca:	f04f 0800 	mov.w	r8, #0
 80083ce:	f04f 0900 	mov.w	r9, #0
 80083d2:	6023      	str	r3, [r4, #0]
 80083d4:	e78e      	b.n	80082f4 <_strtod_l+0x484>
 80083d6:	bf00      	nop
 80083d8:	0800b8c9 	.word	0x0800b8c9
 80083dc:	0800b90c 	.word	0x0800b90c
 80083e0:	0800b8c1 	.word	0x0800b8c1
 80083e4:	0800ba4c 	.word	0x0800ba4c
 80083e8:	0800bcf8 	.word	0x0800bcf8
 80083ec:	0800bbd8 	.word	0x0800bbd8
 80083f0:	0800bbb0 	.word	0x0800bbb0
 80083f4:	7ca00000 	.word	0x7ca00000
 80083f8:	7ff00000 	.word	0x7ff00000
 80083fc:	7fefffff 	.word	0x7fefffff
 8008400:	f012 0110 	ands.w	r1, r2, #16
 8008404:	bf18      	it	ne
 8008406:	216a      	movne	r1, #106	; 0x6a
 8008408:	9104      	str	r1, [sp, #16]
 800840a:	ec49 8b17 	vmov	d7, r8, r9
 800840e:	49be      	ldr	r1, [pc, #760]	; (8008708 <_strtod_l+0x898>)
 8008410:	2000      	movs	r0, #0
 8008412:	07d6      	lsls	r6, r2, #31
 8008414:	d504      	bpl.n	8008420 <_strtod_l+0x5b0>
 8008416:	ed91 6b00 	vldr	d6, [r1]
 800841a:	2001      	movs	r0, #1
 800841c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008420:	1052      	asrs	r2, r2, #1
 8008422:	f101 0108 	add.w	r1, r1, #8
 8008426:	d1f4      	bne.n	8008412 <_strtod_l+0x5a2>
 8008428:	b108      	cbz	r0, 800842e <_strtod_l+0x5be>
 800842a:	ec59 8b17 	vmov	r8, r9, d7
 800842e:	9a04      	ldr	r2, [sp, #16]
 8008430:	b1c2      	cbz	r2, 8008464 <_strtod_l+0x5f4>
 8008432:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8008436:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800843a:	2a00      	cmp	r2, #0
 800843c:	4648      	mov	r0, r9
 800843e:	dd11      	ble.n	8008464 <_strtod_l+0x5f4>
 8008440:	2a1f      	cmp	r2, #31
 8008442:	f340 812e 	ble.w	80086a2 <_strtod_l+0x832>
 8008446:	2a34      	cmp	r2, #52	; 0x34
 8008448:	bfde      	ittt	le
 800844a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800844e:	f04f 32ff 	movle.w	r2, #4294967295
 8008452:	fa02 f101 	lslle.w	r1, r2, r1
 8008456:	f04f 0800 	mov.w	r8, #0
 800845a:	bfcc      	ite	gt
 800845c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008460:	ea01 0900 	andle.w	r9, r1, r0
 8008464:	ec49 8b17 	vmov	d7, r8, r9
 8008468:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800846c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008470:	d0a6      	beq.n	80083c0 <_strtod_l+0x550>
 8008472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008474:	9200      	str	r2, [sp, #0]
 8008476:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008478:	9a06      	ldr	r2, [sp, #24]
 800847a:	4620      	mov	r0, r4
 800847c:	f001 fd76 	bl	8009f6c <__s2b>
 8008480:	9006      	str	r0, [sp, #24]
 8008482:	2800      	cmp	r0, #0
 8008484:	f43f af2c 	beq.w	80082e0 <_strtod_l+0x470>
 8008488:	9b07      	ldr	r3, [sp, #28]
 800848a:	1b7d      	subs	r5, r7, r5
 800848c:	2b00      	cmp	r3, #0
 800848e:	bfb4      	ite	lt
 8008490:	462b      	movlt	r3, r5
 8008492:	2300      	movge	r3, #0
 8008494:	9309      	str	r3, [sp, #36]	; 0x24
 8008496:	9b07      	ldr	r3, [sp, #28]
 8008498:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80086e8 <_strtod_l+0x878>
 800849c:	ed9f ab94 	vldr	d10, [pc, #592]	; 80086f0 <_strtod_l+0x880>
 80084a0:	ed9f bb95 	vldr	d11, [pc, #596]	; 80086f8 <_strtod_l+0x888>
 80084a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80084a8:	2500      	movs	r5, #0
 80084aa:	930c      	str	r3, [sp, #48]	; 0x30
 80084ac:	462e      	mov	r6, r5
 80084ae:	9b06      	ldr	r3, [sp, #24]
 80084b0:	4620      	mov	r0, r4
 80084b2:	6859      	ldr	r1, [r3, #4]
 80084b4:	f001 fcb2 	bl	8009e1c <_Balloc>
 80084b8:	4607      	mov	r7, r0
 80084ba:	2800      	cmp	r0, #0
 80084bc:	f43f af14 	beq.w	80082e8 <_strtod_l+0x478>
 80084c0:	9b06      	ldr	r3, [sp, #24]
 80084c2:	691a      	ldr	r2, [r3, #16]
 80084c4:	3202      	adds	r2, #2
 80084c6:	f103 010c 	add.w	r1, r3, #12
 80084ca:	0092      	lsls	r2, r2, #2
 80084cc:	300c      	adds	r0, #12
 80084ce:	f001 fc97 	bl	8009e00 <memcpy>
 80084d2:	ec49 8b10 	vmov	d0, r8, r9
 80084d6:	aa14      	add	r2, sp, #80	; 0x50
 80084d8:	a913      	add	r1, sp, #76	; 0x4c
 80084da:	4620      	mov	r0, r4
 80084dc:	f002 f88c 	bl	800a5f8 <__d2b>
 80084e0:	ec49 8b18 	vmov	d8, r8, r9
 80084e4:	9012      	str	r0, [sp, #72]	; 0x48
 80084e6:	2800      	cmp	r0, #0
 80084e8:	f43f aefe 	beq.w	80082e8 <_strtod_l+0x478>
 80084ec:	2101      	movs	r1, #1
 80084ee:	4620      	mov	r0, r4
 80084f0:	f001 fdd6 	bl	800a0a0 <__i2b>
 80084f4:	4606      	mov	r6, r0
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f43f aef6 	beq.w	80082e8 <_strtod_l+0x478>
 80084fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084fe:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008500:	2b00      	cmp	r3, #0
 8008502:	bfab      	itete	ge
 8008504:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8008506:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008508:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800850c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008510:	bfac      	ite	ge
 8008512:	eb03 0b02 	addge.w	fp, r3, r2
 8008516:	eba2 0a03 	sublt.w	sl, r2, r3
 800851a:	9a04      	ldr	r2, [sp, #16]
 800851c:	1a9b      	subs	r3, r3, r2
 800851e:	440b      	add	r3, r1
 8008520:	4a7a      	ldr	r2, [pc, #488]	; (800870c <_strtod_l+0x89c>)
 8008522:	3b01      	subs	r3, #1
 8008524:	4293      	cmp	r3, r2
 8008526:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800852a:	f280 80cd 	bge.w	80086c8 <_strtod_l+0x858>
 800852e:	1ad2      	subs	r2, r2, r3
 8008530:	2a1f      	cmp	r2, #31
 8008532:	eba1 0102 	sub.w	r1, r1, r2
 8008536:	f04f 0001 	mov.w	r0, #1
 800853a:	f300 80b9 	bgt.w	80086b0 <_strtod_l+0x840>
 800853e:	fa00 f302 	lsl.w	r3, r0, r2
 8008542:	930b      	str	r3, [sp, #44]	; 0x2c
 8008544:	2300      	movs	r3, #0
 8008546:	930a      	str	r3, [sp, #40]	; 0x28
 8008548:	eb0b 0301 	add.w	r3, fp, r1
 800854c:	9a04      	ldr	r2, [sp, #16]
 800854e:	459b      	cmp	fp, r3
 8008550:	448a      	add	sl, r1
 8008552:	4492      	add	sl, r2
 8008554:	465a      	mov	r2, fp
 8008556:	bfa8      	it	ge
 8008558:	461a      	movge	r2, r3
 800855a:	4552      	cmp	r2, sl
 800855c:	bfa8      	it	ge
 800855e:	4652      	movge	r2, sl
 8008560:	2a00      	cmp	r2, #0
 8008562:	bfc2      	ittt	gt
 8008564:	1a9b      	subgt	r3, r3, r2
 8008566:	ebaa 0a02 	subgt.w	sl, sl, r2
 800856a:	ebab 0b02 	subgt.w	fp, fp, r2
 800856e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008570:	2a00      	cmp	r2, #0
 8008572:	dd18      	ble.n	80085a6 <_strtod_l+0x736>
 8008574:	4631      	mov	r1, r6
 8008576:	4620      	mov	r0, r4
 8008578:	930f      	str	r3, [sp, #60]	; 0x3c
 800857a:	f001 fe51 	bl	800a220 <__pow5mult>
 800857e:	4606      	mov	r6, r0
 8008580:	2800      	cmp	r0, #0
 8008582:	f43f aeb1 	beq.w	80082e8 <_strtod_l+0x478>
 8008586:	4601      	mov	r1, r0
 8008588:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800858a:	4620      	mov	r0, r4
 800858c:	f001 fd9e 	bl	800a0cc <__multiply>
 8008590:	900e      	str	r0, [sp, #56]	; 0x38
 8008592:	2800      	cmp	r0, #0
 8008594:	f43f aea8 	beq.w	80082e8 <_strtod_l+0x478>
 8008598:	9912      	ldr	r1, [sp, #72]	; 0x48
 800859a:	4620      	mov	r0, r4
 800859c:	f001 fc7e 	bl	8009e9c <_Bfree>
 80085a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085a4:	9212      	str	r2, [sp, #72]	; 0x48
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f300 8093 	bgt.w	80086d2 <_strtod_l+0x862>
 80085ac:	9b07      	ldr	r3, [sp, #28]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	dd08      	ble.n	80085c4 <_strtod_l+0x754>
 80085b2:	4639      	mov	r1, r7
 80085b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085b6:	4620      	mov	r0, r4
 80085b8:	f001 fe32 	bl	800a220 <__pow5mult>
 80085bc:	4607      	mov	r7, r0
 80085be:	2800      	cmp	r0, #0
 80085c0:	f43f ae92 	beq.w	80082e8 <_strtod_l+0x478>
 80085c4:	f1ba 0f00 	cmp.w	sl, #0
 80085c8:	dd08      	ble.n	80085dc <_strtod_l+0x76c>
 80085ca:	4639      	mov	r1, r7
 80085cc:	4652      	mov	r2, sl
 80085ce:	4620      	mov	r0, r4
 80085d0:	f001 fe80 	bl	800a2d4 <__lshift>
 80085d4:	4607      	mov	r7, r0
 80085d6:	2800      	cmp	r0, #0
 80085d8:	f43f ae86 	beq.w	80082e8 <_strtod_l+0x478>
 80085dc:	f1bb 0f00 	cmp.w	fp, #0
 80085e0:	dd08      	ble.n	80085f4 <_strtod_l+0x784>
 80085e2:	4631      	mov	r1, r6
 80085e4:	465a      	mov	r2, fp
 80085e6:	4620      	mov	r0, r4
 80085e8:	f001 fe74 	bl	800a2d4 <__lshift>
 80085ec:	4606      	mov	r6, r0
 80085ee:	2800      	cmp	r0, #0
 80085f0:	f43f ae7a 	beq.w	80082e8 <_strtod_l+0x478>
 80085f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80085f6:	463a      	mov	r2, r7
 80085f8:	4620      	mov	r0, r4
 80085fa:	f001 fef7 	bl	800a3ec <__mdiff>
 80085fe:	4605      	mov	r5, r0
 8008600:	2800      	cmp	r0, #0
 8008602:	f43f ae71 	beq.w	80082e8 <_strtod_l+0x478>
 8008606:	2300      	movs	r3, #0
 8008608:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800860c:	60c3      	str	r3, [r0, #12]
 800860e:	4631      	mov	r1, r6
 8008610:	f001 fed0 	bl	800a3b4 <__mcmp>
 8008614:	2800      	cmp	r0, #0
 8008616:	da7d      	bge.n	8008714 <_strtod_l+0x8a4>
 8008618:	ea5a 0308 	orrs.w	r3, sl, r8
 800861c:	f040 80a3 	bne.w	8008766 <_strtod_l+0x8f6>
 8008620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008624:	2b00      	cmp	r3, #0
 8008626:	f040 809e 	bne.w	8008766 <_strtod_l+0x8f6>
 800862a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800862e:	0d1b      	lsrs	r3, r3, #20
 8008630:	051b      	lsls	r3, r3, #20
 8008632:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008636:	f240 8096 	bls.w	8008766 <_strtod_l+0x8f6>
 800863a:	696b      	ldr	r3, [r5, #20]
 800863c:	b91b      	cbnz	r3, 8008646 <_strtod_l+0x7d6>
 800863e:	692b      	ldr	r3, [r5, #16]
 8008640:	2b01      	cmp	r3, #1
 8008642:	f340 8090 	ble.w	8008766 <_strtod_l+0x8f6>
 8008646:	4629      	mov	r1, r5
 8008648:	2201      	movs	r2, #1
 800864a:	4620      	mov	r0, r4
 800864c:	f001 fe42 	bl	800a2d4 <__lshift>
 8008650:	4631      	mov	r1, r6
 8008652:	4605      	mov	r5, r0
 8008654:	f001 feae 	bl	800a3b4 <__mcmp>
 8008658:	2800      	cmp	r0, #0
 800865a:	f340 8084 	ble.w	8008766 <_strtod_l+0x8f6>
 800865e:	9904      	ldr	r1, [sp, #16]
 8008660:	4a2b      	ldr	r2, [pc, #172]	; (8008710 <_strtod_l+0x8a0>)
 8008662:	464b      	mov	r3, r9
 8008664:	2900      	cmp	r1, #0
 8008666:	f000 809d 	beq.w	80087a4 <_strtod_l+0x934>
 800866a:	ea02 0109 	and.w	r1, r2, r9
 800866e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008672:	f300 8097 	bgt.w	80087a4 <_strtod_l+0x934>
 8008676:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800867a:	f77f aea5 	ble.w	80083c8 <_strtod_l+0x558>
 800867e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008700 <_strtod_l+0x890>
 8008682:	ec49 8b16 	vmov	d6, r8, r9
 8008686:	ee26 7b07 	vmul.f64	d7, d6, d7
 800868a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800868e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008692:	4313      	orrs	r3, r2
 8008694:	bf08      	it	eq
 8008696:	2322      	moveq	r3, #34	; 0x22
 8008698:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800869c:	bf08      	it	eq
 800869e:	6023      	streq	r3, [r4, #0]
 80086a0:	e62c      	b.n	80082fc <_strtod_l+0x48c>
 80086a2:	f04f 31ff 	mov.w	r1, #4294967295
 80086a6:	fa01 f202 	lsl.w	r2, r1, r2
 80086aa:	ea02 0808 	and.w	r8, r2, r8
 80086ae:	e6d9      	b.n	8008464 <_strtod_l+0x5f4>
 80086b0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80086b4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80086b8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80086bc:	33e2      	adds	r3, #226	; 0xe2
 80086be:	fa00 f303 	lsl.w	r3, r0, r3
 80086c2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80086c6:	e73f      	b.n	8008548 <_strtod_l+0x6d8>
 80086c8:	2200      	movs	r2, #0
 80086ca:	2301      	movs	r3, #1
 80086cc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80086d0:	e73a      	b.n	8008548 <_strtod_l+0x6d8>
 80086d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80086d4:	461a      	mov	r2, r3
 80086d6:	4620      	mov	r0, r4
 80086d8:	f001 fdfc 	bl	800a2d4 <__lshift>
 80086dc:	9012      	str	r0, [sp, #72]	; 0x48
 80086de:	2800      	cmp	r0, #0
 80086e0:	f47f af64 	bne.w	80085ac <_strtod_l+0x73c>
 80086e4:	e600      	b.n	80082e8 <_strtod_l+0x478>
 80086e6:	bf00      	nop
 80086e8:	94a03595 	.word	0x94a03595
 80086ec:	3fcfffff 	.word	0x3fcfffff
 80086f0:	94a03595 	.word	0x94a03595
 80086f4:	3fdfffff 	.word	0x3fdfffff
 80086f8:	35afe535 	.word	0x35afe535
 80086fc:	3fe00000 	.word	0x3fe00000
 8008700:	00000000 	.word	0x00000000
 8008704:	39500000 	.word	0x39500000
 8008708:	0800b920 	.word	0x0800b920
 800870c:	fffffc02 	.word	0xfffffc02
 8008710:	7ff00000 	.word	0x7ff00000
 8008714:	46cb      	mov	fp, r9
 8008716:	d15f      	bne.n	80087d8 <_strtod_l+0x968>
 8008718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800871c:	f1ba 0f00 	cmp.w	sl, #0
 8008720:	d02a      	beq.n	8008778 <_strtod_l+0x908>
 8008722:	4aa7      	ldr	r2, [pc, #668]	; (80089c0 <_strtod_l+0xb50>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d12b      	bne.n	8008780 <_strtod_l+0x910>
 8008728:	9b04      	ldr	r3, [sp, #16]
 800872a:	4642      	mov	r2, r8
 800872c:	b1fb      	cbz	r3, 800876e <_strtod_l+0x8fe>
 800872e:	4ba5      	ldr	r3, [pc, #660]	; (80089c4 <_strtod_l+0xb54>)
 8008730:	ea09 0303 	and.w	r3, r9, r3
 8008734:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008738:	f04f 31ff 	mov.w	r1, #4294967295
 800873c:	d81a      	bhi.n	8008774 <_strtod_l+0x904>
 800873e:	0d1b      	lsrs	r3, r3, #20
 8008740:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008744:	fa01 f303 	lsl.w	r3, r1, r3
 8008748:	429a      	cmp	r2, r3
 800874a:	d119      	bne.n	8008780 <_strtod_l+0x910>
 800874c:	4b9e      	ldr	r3, [pc, #632]	; (80089c8 <_strtod_l+0xb58>)
 800874e:	459b      	cmp	fp, r3
 8008750:	d102      	bne.n	8008758 <_strtod_l+0x8e8>
 8008752:	3201      	adds	r2, #1
 8008754:	f43f adc8 	beq.w	80082e8 <_strtod_l+0x478>
 8008758:	4b9a      	ldr	r3, [pc, #616]	; (80089c4 <_strtod_l+0xb54>)
 800875a:	ea0b 0303 	and.w	r3, fp, r3
 800875e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008762:	f04f 0800 	mov.w	r8, #0
 8008766:	9b04      	ldr	r3, [sp, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d188      	bne.n	800867e <_strtod_l+0x80e>
 800876c:	e5c6      	b.n	80082fc <_strtod_l+0x48c>
 800876e:	f04f 33ff 	mov.w	r3, #4294967295
 8008772:	e7e9      	b.n	8008748 <_strtod_l+0x8d8>
 8008774:	460b      	mov	r3, r1
 8008776:	e7e7      	b.n	8008748 <_strtod_l+0x8d8>
 8008778:	ea53 0308 	orrs.w	r3, r3, r8
 800877c:	f43f af6f 	beq.w	800865e <_strtod_l+0x7ee>
 8008780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008782:	b1cb      	cbz	r3, 80087b8 <_strtod_l+0x948>
 8008784:	ea13 0f0b 	tst.w	r3, fp
 8008788:	d0ed      	beq.n	8008766 <_strtod_l+0x8f6>
 800878a:	9a04      	ldr	r2, [sp, #16]
 800878c:	4640      	mov	r0, r8
 800878e:	4649      	mov	r1, r9
 8008790:	f1ba 0f00 	cmp.w	sl, #0
 8008794:	d014      	beq.n	80087c0 <_strtod_l+0x950>
 8008796:	f7ff fb51 	bl	8007e3c <sulp>
 800879a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800879e:	ec59 8b17 	vmov	r8, r9, d7
 80087a2:	e7e0      	b.n	8008766 <_strtod_l+0x8f6>
 80087a4:	4013      	ands	r3, r2
 80087a6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80087aa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80087ae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80087b2:	f04f 38ff 	mov.w	r8, #4294967295
 80087b6:	e7d6      	b.n	8008766 <_strtod_l+0x8f6>
 80087b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ba:	ea13 0f08 	tst.w	r3, r8
 80087be:	e7e3      	b.n	8008788 <_strtod_l+0x918>
 80087c0:	f7ff fb3c 	bl	8007e3c <sulp>
 80087c4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80087c8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80087cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d0:	ec59 8b10 	vmov	r8, r9, d0
 80087d4:	d1c7      	bne.n	8008766 <_strtod_l+0x8f6>
 80087d6:	e5f7      	b.n	80083c8 <_strtod_l+0x558>
 80087d8:	4631      	mov	r1, r6
 80087da:	4628      	mov	r0, r5
 80087dc:	f001 ff68 	bl	800a6b0 <__ratio>
 80087e0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80087e4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80087e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ec:	d865      	bhi.n	80088ba <_strtod_l+0xa4a>
 80087ee:	f1ba 0f00 	cmp.w	sl, #0
 80087f2:	d042      	beq.n	800887a <_strtod_l+0xa0a>
 80087f4:	4b75      	ldr	r3, [pc, #468]	; (80089cc <_strtod_l+0xb5c>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80087fc:	4871      	ldr	r0, [pc, #452]	; (80089c4 <_strtod_l+0xb54>)
 80087fe:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80089d8 <_strtod_l+0xb68>
 8008802:	ea0b 0100 	and.w	r1, fp, r0
 8008806:	4561      	cmp	r1, ip
 8008808:	f040 808e 	bne.w	8008928 <_strtod_l+0xab8>
 800880c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008810:	ec49 8b10 	vmov	d0, r8, r9
 8008814:	ec43 2b1c 	vmov	d12, r2, r3
 8008818:	910a      	str	r1, [sp, #40]	; 0x28
 800881a:	f001 fe71 	bl	800a500 <__ulp>
 800881e:	ec49 8b1e 	vmov	d14, r8, r9
 8008822:	4868      	ldr	r0, [pc, #416]	; (80089c4 <_strtod_l+0xb54>)
 8008824:	eeac eb00 	vfma.f64	d14, d12, d0
 8008828:	ee1e 3a90 	vmov	r3, s29
 800882c:	4a68      	ldr	r2, [pc, #416]	; (80089d0 <_strtod_l+0xb60>)
 800882e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008830:	4018      	ands	r0, r3
 8008832:	4290      	cmp	r0, r2
 8008834:	ec59 8b1e 	vmov	r8, r9, d14
 8008838:	d94e      	bls.n	80088d8 <_strtod_l+0xa68>
 800883a:	ee18 3a90 	vmov	r3, s17
 800883e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008842:	4293      	cmp	r3, r2
 8008844:	d104      	bne.n	8008850 <_strtod_l+0x9e0>
 8008846:	ee18 3a10 	vmov	r3, s16
 800884a:	3301      	adds	r3, #1
 800884c:	f43f ad4c 	beq.w	80082e8 <_strtod_l+0x478>
 8008850:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80089c8 <_strtod_l+0xb58>
 8008854:	f04f 38ff 	mov.w	r8, #4294967295
 8008858:	9912      	ldr	r1, [sp, #72]	; 0x48
 800885a:	4620      	mov	r0, r4
 800885c:	f001 fb1e 	bl	8009e9c <_Bfree>
 8008860:	4639      	mov	r1, r7
 8008862:	4620      	mov	r0, r4
 8008864:	f001 fb1a 	bl	8009e9c <_Bfree>
 8008868:	4631      	mov	r1, r6
 800886a:	4620      	mov	r0, r4
 800886c:	f001 fb16 	bl	8009e9c <_Bfree>
 8008870:	4629      	mov	r1, r5
 8008872:	4620      	mov	r0, r4
 8008874:	f001 fb12 	bl	8009e9c <_Bfree>
 8008878:	e619      	b.n	80084ae <_strtod_l+0x63e>
 800887a:	f1b8 0f00 	cmp.w	r8, #0
 800887e:	d112      	bne.n	80088a6 <_strtod_l+0xa36>
 8008880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008884:	b9b3      	cbnz	r3, 80088b4 <_strtod_l+0xa44>
 8008886:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800888a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800888e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008892:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008896:	bf58      	it	pl
 8008898:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800889c:	eeb1 7b4d 	vneg.f64	d7, d13
 80088a0:	ec53 2b17 	vmov	r2, r3, d7
 80088a4:	e7aa      	b.n	80087fc <_strtod_l+0x98c>
 80088a6:	f1b8 0f01 	cmp.w	r8, #1
 80088aa:	d103      	bne.n	80088b4 <_strtod_l+0xa44>
 80088ac:	f1b9 0f00 	cmp.w	r9, #0
 80088b0:	f43f ad8a 	beq.w	80083c8 <_strtod_l+0x558>
 80088b4:	4b47      	ldr	r3, [pc, #284]	; (80089d4 <_strtod_l+0xb64>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	e79e      	b.n	80087f8 <_strtod_l+0x988>
 80088ba:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80088be:	ee20 db0d 	vmul.f64	d13, d0, d13
 80088c2:	f1ba 0f00 	cmp.w	sl, #0
 80088c6:	d104      	bne.n	80088d2 <_strtod_l+0xa62>
 80088c8:	eeb1 7b4d 	vneg.f64	d7, d13
 80088cc:	ec53 2b17 	vmov	r2, r3, d7
 80088d0:	e794      	b.n	80087fc <_strtod_l+0x98c>
 80088d2:	eeb0 7b4d 	vmov.f64	d7, d13
 80088d6:	e7f9      	b.n	80088cc <_strtod_l+0xa5c>
 80088d8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80088dc:	9b04      	ldr	r3, [sp, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1ba      	bne.n	8008858 <_strtod_l+0x9e8>
 80088e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088e6:	0d1b      	lsrs	r3, r3, #20
 80088e8:	051b      	lsls	r3, r3, #20
 80088ea:	4299      	cmp	r1, r3
 80088ec:	d1b4      	bne.n	8008858 <_strtod_l+0x9e8>
 80088ee:	ec51 0b1d 	vmov	r0, r1, d13
 80088f2:	f7f7 fed1 	bl	8000698 <__aeabi_d2lz>
 80088f6:	f7f7 fe89 	bl	800060c <__aeabi_l2d>
 80088fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088fe:	ec41 0b17 	vmov	d7, r0, r1
 8008902:	ea43 0308 	orr.w	r3, r3, r8
 8008906:	ea53 030a 	orrs.w	r3, r3, sl
 800890a:	ee3d db47 	vsub.f64	d13, d13, d7
 800890e:	d03c      	beq.n	800898a <_strtod_l+0xb1a>
 8008910:	eeb4 dbca 	vcmpe.f64	d13, d10
 8008914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008918:	f53f acf0 	bmi.w	80082fc <_strtod_l+0x48c>
 800891c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8008920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008924:	dd98      	ble.n	8008858 <_strtod_l+0x9e8>
 8008926:	e4e9      	b.n	80082fc <_strtod_l+0x48c>
 8008928:	9804      	ldr	r0, [sp, #16]
 800892a:	b1f0      	cbz	r0, 800896a <_strtod_l+0xafa>
 800892c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8008930:	d81b      	bhi.n	800896a <_strtod_l+0xafa>
 8008932:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80089b8 <_strtod_l+0xb48>
 8008936:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800893a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800893e:	d811      	bhi.n	8008964 <_strtod_l+0xaf4>
 8008940:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8008944:	ee1d 3a10 	vmov	r3, s26
 8008948:	2b01      	cmp	r3, #1
 800894a:	bf38      	it	cc
 800894c:	2301      	movcc	r3, #1
 800894e:	ee0d 3a10 	vmov	s26, r3
 8008952:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8008956:	f1ba 0f00 	cmp.w	sl, #0
 800895a:	d113      	bne.n	8008984 <_strtod_l+0xb14>
 800895c:	eeb1 7b4d 	vneg.f64	d7, d13
 8008960:	ec53 2b17 	vmov	r2, r3, d7
 8008964:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8008968:	1a43      	subs	r3, r0, r1
 800896a:	eeb0 0b48 	vmov.f64	d0, d8
 800896e:	ec43 2b1c 	vmov	d12, r2, r3
 8008972:	910a      	str	r1, [sp, #40]	; 0x28
 8008974:	f001 fdc4 	bl	800a500 <__ulp>
 8008978:	990a      	ldr	r1, [sp, #40]	; 0x28
 800897a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800897e:	ec59 8b18 	vmov	r8, r9, d8
 8008982:	e7ab      	b.n	80088dc <_strtod_l+0xa6c>
 8008984:	eeb0 7b4d 	vmov.f64	d7, d13
 8008988:	e7ea      	b.n	8008960 <_strtod_l+0xaf0>
 800898a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800898e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008992:	f57f af61 	bpl.w	8008858 <_strtod_l+0x9e8>
 8008996:	e4b1      	b.n	80082fc <_strtod_l+0x48c>
 8008998:	2300      	movs	r3, #0
 800899a:	9308      	str	r3, [sp, #32]
 800899c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800899e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089a0:	6013      	str	r3, [r2, #0]
 80089a2:	f7ff baad 	b.w	8007f00 <_strtod_l+0x90>
 80089a6:	2a65      	cmp	r2, #101	; 0x65
 80089a8:	f43f ab9f 	beq.w	80080ea <_strtod_l+0x27a>
 80089ac:	2a45      	cmp	r2, #69	; 0x45
 80089ae:	f43f ab9c 	beq.w	80080ea <_strtod_l+0x27a>
 80089b2:	2101      	movs	r1, #1
 80089b4:	f7ff bbd4 	b.w	8008160 <_strtod_l+0x2f0>
 80089b8:	ffc00000 	.word	0xffc00000
 80089bc:	41dfffff 	.word	0x41dfffff
 80089c0:	000fffff 	.word	0x000fffff
 80089c4:	7ff00000 	.word	0x7ff00000
 80089c8:	7fefffff 	.word	0x7fefffff
 80089cc:	3ff00000 	.word	0x3ff00000
 80089d0:	7c9fffff 	.word	0x7c9fffff
 80089d4:	bff00000 	.word	0xbff00000
 80089d8:	7fe00000 	.word	0x7fe00000

080089dc <_strtod_r>:
 80089dc:	4b01      	ldr	r3, [pc, #4]	; (80089e4 <_strtod_r+0x8>)
 80089de:	f7ff ba47 	b.w	8007e70 <_strtod_l>
 80089e2:	bf00      	nop
 80089e4:	2000008c 	.word	0x2000008c

080089e8 <_strtol_l.constprop.0>:
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ee:	d001      	beq.n	80089f4 <_strtol_l.constprop.0+0xc>
 80089f0:	2b24      	cmp	r3, #36	; 0x24
 80089f2:	d906      	bls.n	8008a02 <_strtol_l.constprop.0+0x1a>
 80089f4:	f7fe fb82 	bl	80070fc <__errno>
 80089f8:	2316      	movs	r3, #22
 80089fa:	6003      	str	r3, [r0, #0]
 80089fc:	2000      	movs	r0, #0
 80089fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008ae8 <_strtol_l.constprop.0+0x100>
 8008a06:	460d      	mov	r5, r1
 8008a08:	462e      	mov	r6, r5
 8008a0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a0e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008a12:	f017 0708 	ands.w	r7, r7, #8
 8008a16:	d1f7      	bne.n	8008a08 <_strtol_l.constprop.0+0x20>
 8008a18:	2c2d      	cmp	r4, #45	; 0x2d
 8008a1a:	d132      	bne.n	8008a82 <_strtol_l.constprop.0+0x9a>
 8008a1c:	782c      	ldrb	r4, [r5, #0]
 8008a1e:	2701      	movs	r7, #1
 8008a20:	1cb5      	adds	r5, r6, #2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d05b      	beq.n	8008ade <_strtol_l.constprop.0+0xf6>
 8008a26:	2b10      	cmp	r3, #16
 8008a28:	d109      	bne.n	8008a3e <_strtol_l.constprop.0+0x56>
 8008a2a:	2c30      	cmp	r4, #48	; 0x30
 8008a2c:	d107      	bne.n	8008a3e <_strtol_l.constprop.0+0x56>
 8008a2e:	782c      	ldrb	r4, [r5, #0]
 8008a30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008a34:	2c58      	cmp	r4, #88	; 0x58
 8008a36:	d14d      	bne.n	8008ad4 <_strtol_l.constprop.0+0xec>
 8008a38:	786c      	ldrb	r4, [r5, #1]
 8008a3a:	2310      	movs	r3, #16
 8008a3c:	3502      	adds	r5, #2
 8008a3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008a42:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a46:	f04f 0c00 	mov.w	ip, #0
 8008a4a:	fbb8 f9f3 	udiv	r9, r8, r3
 8008a4e:	4666      	mov	r6, ip
 8008a50:	fb03 8a19 	mls	sl, r3, r9, r8
 8008a54:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008a58:	f1be 0f09 	cmp.w	lr, #9
 8008a5c:	d816      	bhi.n	8008a8c <_strtol_l.constprop.0+0xa4>
 8008a5e:	4674      	mov	r4, lr
 8008a60:	42a3      	cmp	r3, r4
 8008a62:	dd24      	ble.n	8008aae <_strtol_l.constprop.0+0xc6>
 8008a64:	f1bc 0f00 	cmp.w	ip, #0
 8008a68:	db1e      	blt.n	8008aa8 <_strtol_l.constprop.0+0xc0>
 8008a6a:	45b1      	cmp	r9, r6
 8008a6c:	d31c      	bcc.n	8008aa8 <_strtol_l.constprop.0+0xc0>
 8008a6e:	d101      	bne.n	8008a74 <_strtol_l.constprop.0+0x8c>
 8008a70:	45a2      	cmp	sl, r4
 8008a72:	db19      	blt.n	8008aa8 <_strtol_l.constprop.0+0xc0>
 8008a74:	fb06 4603 	mla	r6, r6, r3, r4
 8008a78:	f04f 0c01 	mov.w	ip, #1
 8008a7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a80:	e7e8      	b.n	8008a54 <_strtol_l.constprop.0+0x6c>
 8008a82:	2c2b      	cmp	r4, #43	; 0x2b
 8008a84:	bf04      	itt	eq
 8008a86:	782c      	ldrbeq	r4, [r5, #0]
 8008a88:	1cb5      	addeq	r5, r6, #2
 8008a8a:	e7ca      	b.n	8008a22 <_strtol_l.constprop.0+0x3a>
 8008a8c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008a90:	f1be 0f19 	cmp.w	lr, #25
 8008a94:	d801      	bhi.n	8008a9a <_strtol_l.constprop.0+0xb2>
 8008a96:	3c37      	subs	r4, #55	; 0x37
 8008a98:	e7e2      	b.n	8008a60 <_strtol_l.constprop.0+0x78>
 8008a9a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008a9e:	f1be 0f19 	cmp.w	lr, #25
 8008aa2:	d804      	bhi.n	8008aae <_strtol_l.constprop.0+0xc6>
 8008aa4:	3c57      	subs	r4, #87	; 0x57
 8008aa6:	e7db      	b.n	8008a60 <_strtol_l.constprop.0+0x78>
 8008aa8:	f04f 3cff 	mov.w	ip, #4294967295
 8008aac:	e7e6      	b.n	8008a7c <_strtol_l.constprop.0+0x94>
 8008aae:	f1bc 0f00 	cmp.w	ip, #0
 8008ab2:	da05      	bge.n	8008ac0 <_strtol_l.constprop.0+0xd8>
 8008ab4:	2322      	movs	r3, #34	; 0x22
 8008ab6:	6003      	str	r3, [r0, #0]
 8008ab8:	4646      	mov	r6, r8
 8008aba:	b942      	cbnz	r2, 8008ace <_strtol_l.constprop.0+0xe6>
 8008abc:	4630      	mov	r0, r6
 8008abe:	e79e      	b.n	80089fe <_strtol_l.constprop.0+0x16>
 8008ac0:	b107      	cbz	r7, 8008ac4 <_strtol_l.constprop.0+0xdc>
 8008ac2:	4276      	negs	r6, r6
 8008ac4:	2a00      	cmp	r2, #0
 8008ac6:	d0f9      	beq.n	8008abc <_strtol_l.constprop.0+0xd4>
 8008ac8:	f1bc 0f00 	cmp.w	ip, #0
 8008acc:	d000      	beq.n	8008ad0 <_strtol_l.constprop.0+0xe8>
 8008ace:	1e69      	subs	r1, r5, #1
 8008ad0:	6011      	str	r1, [r2, #0]
 8008ad2:	e7f3      	b.n	8008abc <_strtol_l.constprop.0+0xd4>
 8008ad4:	2430      	movs	r4, #48	; 0x30
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1b1      	bne.n	8008a3e <_strtol_l.constprop.0+0x56>
 8008ada:	2308      	movs	r3, #8
 8008adc:	e7af      	b.n	8008a3e <_strtol_l.constprop.0+0x56>
 8008ade:	2c30      	cmp	r4, #48	; 0x30
 8008ae0:	d0a5      	beq.n	8008a2e <_strtol_l.constprop.0+0x46>
 8008ae2:	230a      	movs	r3, #10
 8008ae4:	e7ab      	b.n	8008a3e <_strtol_l.constprop.0+0x56>
 8008ae6:	bf00      	nop
 8008ae8:	0800b949 	.word	0x0800b949

08008aec <_strtol_r>:
 8008aec:	f7ff bf7c 	b.w	80089e8 <_strtol_l.constprop.0>

08008af0 <quorem>:
 8008af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af4:	6903      	ldr	r3, [r0, #16]
 8008af6:	690c      	ldr	r4, [r1, #16]
 8008af8:	42a3      	cmp	r3, r4
 8008afa:	4607      	mov	r7, r0
 8008afc:	f2c0 8081 	blt.w	8008c02 <quorem+0x112>
 8008b00:	3c01      	subs	r4, #1
 8008b02:	f101 0814 	add.w	r8, r1, #20
 8008b06:	f100 0514 	add.w	r5, r0, #20
 8008b0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b24:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b28:	d331      	bcc.n	8008b8e <quorem+0x9e>
 8008b2a:	f04f 0e00 	mov.w	lr, #0
 8008b2e:	4640      	mov	r0, r8
 8008b30:	46ac      	mov	ip, r5
 8008b32:	46f2      	mov	sl, lr
 8008b34:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b38:	b293      	uxth	r3, r2
 8008b3a:	fb06 e303 	mla	r3, r6, r3, lr
 8008b3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	ebaa 0303 	sub.w	r3, sl, r3
 8008b48:	f8dc a000 	ldr.w	sl, [ip]
 8008b4c:	0c12      	lsrs	r2, r2, #16
 8008b4e:	fa13 f38a 	uxtah	r3, r3, sl
 8008b52:	fb06 e202 	mla	r2, r6, r2, lr
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	9b00      	ldr	r3, [sp, #0]
 8008b5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b5e:	b292      	uxth	r2, r2
 8008b60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b68:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b6c:	4581      	cmp	r9, r0
 8008b6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b72:	f84c 3b04 	str.w	r3, [ip], #4
 8008b76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b7a:	d2db      	bcs.n	8008b34 <quorem+0x44>
 8008b7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b80:	b92b      	cbnz	r3, 8008b8e <quorem+0x9e>
 8008b82:	9b01      	ldr	r3, [sp, #4]
 8008b84:	3b04      	subs	r3, #4
 8008b86:	429d      	cmp	r5, r3
 8008b88:	461a      	mov	r2, r3
 8008b8a:	d32e      	bcc.n	8008bea <quorem+0xfa>
 8008b8c:	613c      	str	r4, [r7, #16]
 8008b8e:	4638      	mov	r0, r7
 8008b90:	f001 fc10 	bl	800a3b4 <__mcmp>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	db24      	blt.n	8008be2 <quorem+0xf2>
 8008b98:	3601      	adds	r6, #1
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	f04f 0c00 	mov.w	ip, #0
 8008ba0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ba4:	f8d0 e000 	ldr.w	lr, [r0]
 8008ba8:	b293      	uxth	r3, r2
 8008baa:	ebac 0303 	sub.w	r3, ip, r3
 8008bae:	0c12      	lsrs	r2, r2, #16
 8008bb0:	fa13 f38e 	uxtah	r3, r3, lr
 8008bb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008bb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bc2:	45c1      	cmp	r9, r8
 8008bc4:	f840 3b04 	str.w	r3, [r0], #4
 8008bc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bcc:	d2e8      	bcs.n	8008ba0 <quorem+0xb0>
 8008bce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bd6:	b922      	cbnz	r2, 8008be2 <quorem+0xf2>
 8008bd8:	3b04      	subs	r3, #4
 8008bda:	429d      	cmp	r5, r3
 8008bdc:	461a      	mov	r2, r3
 8008bde:	d30a      	bcc.n	8008bf6 <quorem+0x106>
 8008be0:	613c      	str	r4, [r7, #16]
 8008be2:	4630      	mov	r0, r6
 8008be4:	b003      	add	sp, #12
 8008be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bea:	6812      	ldr	r2, [r2, #0]
 8008bec:	3b04      	subs	r3, #4
 8008bee:	2a00      	cmp	r2, #0
 8008bf0:	d1cc      	bne.n	8008b8c <quorem+0x9c>
 8008bf2:	3c01      	subs	r4, #1
 8008bf4:	e7c7      	b.n	8008b86 <quorem+0x96>
 8008bf6:	6812      	ldr	r2, [r2, #0]
 8008bf8:	3b04      	subs	r3, #4
 8008bfa:	2a00      	cmp	r2, #0
 8008bfc:	d1f0      	bne.n	8008be0 <quorem+0xf0>
 8008bfe:	3c01      	subs	r4, #1
 8008c00:	e7eb      	b.n	8008bda <quorem+0xea>
 8008c02:	2000      	movs	r0, #0
 8008c04:	e7ee      	b.n	8008be4 <quorem+0xf4>
	...

08008c08 <_dtoa_r>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	ed2d 8b02 	vpush	{d8}
 8008c10:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c12:	b091      	sub	sp, #68	; 0x44
 8008c14:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008c18:	ec59 8b10 	vmov	r8, r9, d0
 8008c1c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008c1e:	9106      	str	r1, [sp, #24]
 8008c20:	4606      	mov	r6, r0
 8008c22:	9208      	str	r2, [sp, #32]
 8008c24:	930c      	str	r3, [sp, #48]	; 0x30
 8008c26:	b975      	cbnz	r5, 8008c46 <_dtoa_r+0x3e>
 8008c28:	2010      	movs	r0, #16
 8008c2a:	f001 f8cf 	bl	8009dcc <malloc>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	6270      	str	r0, [r6, #36]	; 0x24
 8008c32:	b920      	cbnz	r0, 8008c3e <_dtoa_r+0x36>
 8008c34:	4baa      	ldr	r3, [pc, #680]	; (8008ee0 <_dtoa_r+0x2d8>)
 8008c36:	21ea      	movs	r1, #234	; 0xea
 8008c38:	48aa      	ldr	r0, [pc, #680]	; (8008ee4 <_dtoa_r+0x2dc>)
 8008c3a:	f002 f83b 	bl	800acb4 <__assert_func>
 8008c3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c42:	6005      	str	r5, [r0, #0]
 8008c44:	60c5      	str	r5, [r0, #12]
 8008c46:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008c48:	6819      	ldr	r1, [r3, #0]
 8008c4a:	b151      	cbz	r1, 8008c62 <_dtoa_r+0x5a>
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	604a      	str	r2, [r1, #4]
 8008c50:	2301      	movs	r3, #1
 8008c52:	4093      	lsls	r3, r2
 8008c54:	608b      	str	r3, [r1, #8]
 8008c56:	4630      	mov	r0, r6
 8008c58:	f001 f920 	bl	8009e9c <_Bfree>
 8008c5c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008c5e:	2200      	movs	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]
 8008c62:	f1b9 0300 	subs.w	r3, r9, #0
 8008c66:	bfbb      	ittet	lt
 8008c68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c6c:	9303      	strlt	r3, [sp, #12]
 8008c6e:	2300      	movge	r3, #0
 8008c70:	2201      	movlt	r2, #1
 8008c72:	bfac      	ite	ge
 8008c74:	6023      	strge	r3, [r4, #0]
 8008c76:	6022      	strlt	r2, [r4, #0]
 8008c78:	4b9b      	ldr	r3, [pc, #620]	; (8008ee8 <_dtoa_r+0x2e0>)
 8008c7a:	9c03      	ldr	r4, [sp, #12]
 8008c7c:	43a3      	bics	r3, r4
 8008c7e:	d11c      	bne.n	8008cba <_dtoa_r+0xb2>
 8008c80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c82:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008c8c:	ea53 0308 	orrs.w	r3, r3, r8
 8008c90:	f000 84fd 	beq.w	800968e <_dtoa_r+0xa86>
 8008c94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c96:	b963      	cbnz	r3, 8008cb2 <_dtoa_r+0xaa>
 8008c98:	4b94      	ldr	r3, [pc, #592]	; (8008eec <_dtoa_r+0x2e4>)
 8008c9a:	e01f      	b.n	8008cdc <_dtoa_r+0xd4>
 8008c9c:	4b94      	ldr	r3, [pc, #592]	; (8008ef0 <_dtoa_r+0x2e8>)
 8008c9e:	9301      	str	r3, [sp, #4]
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008ca4:	6013      	str	r3, [r2, #0]
 8008ca6:	9801      	ldr	r0, [sp, #4]
 8008ca8:	b011      	add	sp, #68	; 0x44
 8008caa:	ecbd 8b02 	vpop	{d8}
 8008cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb2:	4b8e      	ldr	r3, [pc, #568]	; (8008eec <_dtoa_r+0x2e4>)
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	3303      	adds	r3, #3
 8008cb8:	e7f3      	b.n	8008ca2 <_dtoa_r+0x9a>
 8008cba:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008cbe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc6:	d10b      	bne.n	8008ce0 <_dtoa_r+0xd8>
 8008cc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cca:	2301      	movs	r3, #1
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 84d9 	beq.w	8009688 <_dtoa_r+0xa80>
 8008cd6:	4887      	ldr	r0, [pc, #540]	; (8008ef4 <_dtoa_r+0x2ec>)
 8008cd8:	6018      	str	r0, [r3, #0]
 8008cda:	1e43      	subs	r3, r0, #1
 8008cdc:	9301      	str	r3, [sp, #4]
 8008cde:	e7e2      	b.n	8008ca6 <_dtoa_r+0x9e>
 8008ce0:	a90f      	add	r1, sp, #60	; 0x3c
 8008ce2:	aa0e      	add	r2, sp, #56	; 0x38
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	eeb0 0b48 	vmov.f64	d0, d8
 8008cea:	f001 fc85 	bl	800a5f8 <__d2b>
 8008cee:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008cf2:	4605      	mov	r5, r0
 8008cf4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008cf6:	2900      	cmp	r1, #0
 8008cf8:	d046      	beq.n	8008d88 <_dtoa_r+0x180>
 8008cfa:	ee18 4a90 	vmov	r4, s17
 8008cfe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008d02:	ec53 2b18 	vmov	r2, r3, d8
 8008d06:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008d0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008d0e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008d12:	2400      	movs	r4, #0
 8008d14:	ec43 2b16 	vmov	d6, r2, r3
 8008d18:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008d1c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008ec8 <_dtoa_r+0x2c0>
 8008d20:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008d24:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008ed0 <_dtoa_r+0x2c8>
 8008d28:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008d2c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008ed8 <_dtoa_r+0x2d0>
 8008d30:	ee07 1a90 	vmov	s15, r1
 8008d34:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008d38:	eeb0 7b46 	vmov.f64	d7, d6
 8008d3c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008d40:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008d44:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d4c:	ee16 ba90 	vmov	fp, s13
 8008d50:	940a      	str	r4, [sp, #40]	; 0x28
 8008d52:	d508      	bpl.n	8008d66 <_dtoa_r+0x15e>
 8008d54:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008d58:	eeb4 6b47 	vcmp.f64	d6, d7
 8008d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d60:	bf18      	it	ne
 8008d62:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008d66:	f1bb 0f16 	cmp.w	fp, #22
 8008d6a:	d82f      	bhi.n	8008dcc <_dtoa_r+0x1c4>
 8008d6c:	4b62      	ldr	r3, [pc, #392]	; (8008ef8 <_dtoa_r+0x2f0>)
 8008d6e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d72:	ed93 7b00 	vldr	d7, [r3]
 8008d76:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d7e:	d501      	bpl.n	8008d84 <_dtoa_r+0x17c>
 8008d80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d84:	2300      	movs	r3, #0
 8008d86:	e022      	b.n	8008dce <_dtoa_r+0x1c6>
 8008d88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d8a:	4401      	add	r1, r0
 8008d8c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008d90:	2b20      	cmp	r3, #32
 8008d92:	bfc1      	itttt	gt
 8008d94:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d98:	fa04 f303 	lslgt.w	r3, r4, r3
 8008d9c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008da0:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008da4:	bfd6      	itet	le
 8008da6:	f1c3 0320 	rsble	r3, r3, #32
 8008daa:	ea43 0808 	orrgt.w	r8, r3, r8
 8008dae:	fa08 f803 	lslle.w	r8, r8, r3
 8008db2:	ee07 8a90 	vmov	s15, r8
 8008db6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008dba:	3901      	subs	r1, #1
 8008dbc:	ee17 4a90 	vmov	r4, s15
 8008dc0:	ec53 2b17 	vmov	r2, r3, d7
 8008dc4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008dc8:	2401      	movs	r4, #1
 8008dca:	e7a3      	b.n	8008d14 <_dtoa_r+0x10c>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dd0:	1a43      	subs	r3, r0, r1
 8008dd2:	1e5a      	subs	r2, r3, #1
 8008dd4:	bf45      	ittet	mi
 8008dd6:	f1c3 0301 	rsbmi	r3, r3, #1
 8008dda:	9304      	strmi	r3, [sp, #16]
 8008ddc:	2300      	movpl	r3, #0
 8008dde:	2300      	movmi	r3, #0
 8008de0:	9205      	str	r2, [sp, #20]
 8008de2:	bf54      	ite	pl
 8008de4:	9304      	strpl	r3, [sp, #16]
 8008de6:	9305      	strmi	r3, [sp, #20]
 8008de8:	f1bb 0f00 	cmp.w	fp, #0
 8008dec:	db18      	blt.n	8008e20 <_dtoa_r+0x218>
 8008dee:	9b05      	ldr	r3, [sp, #20]
 8008df0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008df4:	445b      	add	r3, fp
 8008df6:	9305      	str	r3, [sp, #20]
 8008df8:	2300      	movs	r3, #0
 8008dfa:	9a06      	ldr	r2, [sp, #24]
 8008dfc:	2a09      	cmp	r2, #9
 8008dfe:	d849      	bhi.n	8008e94 <_dtoa_r+0x28c>
 8008e00:	2a05      	cmp	r2, #5
 8008e02:	bfc4      	itt	gt
 8008e04:	3a04      	subgt	r2, #4
 8008e06:	9206      	strgt	r2, [sp, #24]
 8008e08:	9a06      	ldr	r2, [sp, #24]
 8008e0a:	f1a2 0202 	sub.w	r2, r2, #2
 8008e0e:	bfcc      	ite	gt
 8008e10:	2400      	movgt	r4, #0
 8008e12:	2401      	movle	r4, #1
 8008e14:	2a03      	cmp	r2, #3
 8008e16:	d848      	bhi.n	8008eaa <_dtoa_r+0x2a2>
 8008e18:	e8df f002 	tbb	[pc, r2]
 8008e1c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008e20:	9b04      	ldr	r3, [sp, #16]
 8008e22:	2200      	movs	r2, #0
 8008e24:	eba3 030b 	sub.w	r3, r3, fp
 8008e28:	9304      	str	r3, [sp, #16]
 8008e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e2c:	f1cb 0300 	rsb	r3, fp, #0
 8008e30:	e7e3      	b.n	8008dfa <_dtoa_r+0x1f2>
 8008e32:	2200      	movs	r2, #0
 8008e34:	9207      	str	r2, [sp, #28]
 8008e36:	9a08      	ldr	r2, [sp, #32]
 8008e38:	2a00      	cmp	r2, #0
 8008e3a:	dc39      	bgt.n	8008eb0 <_dtoa_r+0x2a8>
 8008e3c:	f04f 0a01 	mov.w	sl, #1
 8008e40:	46d1      	mov	r9, sl
 8008e42:	4652      	mov	r2, sl
 8008e44:	f8cd a020 	str.w	sl, [sp, #32]
 8008e48:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	6079      	str	r1, [r7, #4]
 8008e4e:	2004      	movs	r0, #4
 8008e50:	f100 0c14 	add.w	ip, r0, #20
 8008e54:	4594      	cmp	ip, r2
 8008e56:	6879      	ldr	r1, [r7, #4]
 8008e58:	d92f      	bls.n	8008eba <_dtoa_r+0x2b2>
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	930d      	str	r3, [sp, #52]	; 0x34
 8008e5e:	f000 ffdd 	bl	8009e1c <_Balloc>
 8008e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e64:	9001      	str	r0, [sp, #4]
 8008e66:	4602      	mov	r2, r0
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d149      	bne.n	8008f00 <_dtoa_r+0x2f8>
 8008e6c:	4b23      	ldr	r3, [pc, #140]	; (8008efc <_dtoa_r+0x2f4>)
 8008e6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e72:	e6e1      	b.n	8008c38 <_dtoa_r+0x30>
 8008e74:	2201      	movs	r2, #1
 8008e76:	e7dd      	b.n	8008e34 <_dtoa_r+0x22c>
 8008e78:	2200      	movs	r2, #0
 8008e7a:	9207      	str	r2, [sp, #28]
 8008e7c:	9a08      	ldr	r2, [sp, #32]
 8008e7e:	eb0b 0a02 	add.w	sl, fp, r2
 8008e82:	f10a 0901 	add.w	r9, sl, #1
 8008e86:	464a      	mov	r2, r9
 8008e88:	2a01      	cmp	r2, #1
 8008e8a:	bfb8      	it	lt
 8008e8c:	2201      	movlt	r2, #1
 8008e8e:	e7db      	b.n	8008e48 <_dtoa_r+0x240>
 8008e90:	2201      	movs	r2, #1
 8008e92:	e7f2      	b.n	8008e7a <_dtoa_r+0x272>
 8008e94:	2401      	movs	r4, #1
 8008e96:	2200      	movs	r2, #0
 8008e98:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008e9c:	f04f 3aff 	mov.w	sl, #4294967295
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	46d1      	mov	r9, sl
 8008ea4:	2212      	movs	r2, #18
 8008ea6:	9108      	str	r1, [sp, #32]
 8008ea8:	e7ce      	b.n	8008e48 <_dtoa_r+0x240>
 8008eaa:	2201      	movs	r2, #1
 8008eac:	9207      	str	r2, [sp, #28]
 8008eae:	e7f5      	b.n	8008e9c <_dtoa_r+0x294>
 8008eb0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008eb4:	46d1      	mov	r9, sl
 8008eb6:	4652      	mov	r2, sl
 8008eb8:	e7c6      	b.n	8008e48 <_dtoa_r+0x240>
 8008eba:	3101      	adds	r1, #1
 8008ebc:	6079      	str	r1, [r7, #4]
 8008ebe:	0040      	lsls	r0, r0, #1
 8008ec0:	e7c6      	b.n	8008e50 <_dtoa_r+0x248>
 8008ec2:	bf00      	nop
 8008ec4:	f3af 8000 	nop.w
 8008ec8:	636f4361 	.word	0x636f4361
 8008ecc:	3fd287a7 	.word	0x3fd287a7
 8008ed0:	8b60c8b3 	.word	0x8b60c8b3
 8008ed4:	3fc68a28 	.word	0x3fc68a28
 8008ed8:	509f79fb 	.word	0x509f79fb
 8008edc:	3fd34413 	.word	0x3fd34413
 8008ee0:	0800ba56 	.word	0x0800ba56
 8008ee4:	0800ba6d 	.word	0x0800ba6d
 8008ee8:	7ff00000 	.word	0x7ff00000
 8008eec:	0800ba52 	.word	0x0800ba52
 8008ef0:	0800ba49 	.word	0x0800ba49
 8008ef4:	0800b8cd 	.word	0x0800b8cd
 8008ef8:	0800bbd8 	.word	0x0800bbd8
 8008efc:	0800bac8 	.word	0x0800bac8
 8008f00:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008f02:	9901      	ldr	r1, [sp, #4]
 8008f04:	6011      	str	r1, [r2, #0]
 8008f06:	f1b9 0f0e 	cmp.w	r9, #14
 8008f0a:	d86c      	bhi.n	8008fe6 <_dtoa_r+0x3de>
 8008f0c:	2c00      	cmp	r4, #0
 8008f0e:	d06a      	beq.n	8008fe6 <_dtoa_r+0x3de>
 8008f10:	f1bb 0f00 	cmp.w	fp, #0
 8008f14:	f340 80a0 	ble.w	8009058 <_dtoa_r+0x450>
 8008f18:	49c1      	ldr	r1, [pc, #772]	; (8009220 <_dtoa_r+0x618>)
 8008f1a:	f00b 020f 	and.w	r2, fp, #15
 8008f1e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008f22:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008f26:	ed92 7b00 	vldr	d7, [r2]
 8008f2a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008f2e:	f000 8087 	beq.w	8009040 <_dtoa_r+0x438>
 8008f32:	4abc      	ldr	r2, [pc, #752]	; (8009224 <_dtoa_r+0x61c>)
 8008f34:	ed92 6b08 	vldr	d6, [r2, #32]
 8008f38:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008f3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008f40:	f001 010f 	and.w	r1, r1, #15
 8008f44:	2203      	movs	r2, #3
 8008f46:	48b7      	ldr	r0, [pc, #732]	; (8009224 <_dtoa_r+0x61c>)
 8008f48:	2900      	cmp	r1, #0
 8008f4a:	d17b      	bne.n	8009044 <_dtoa_r+0x43c>
 8008f4c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008f50:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008f54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f5a:	2900      	cmp	r1, #0
 8008f5c:	f000 80a2 	beq.w	80090a4 <_dtoa_r+0x49c>
 8008f60:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008f64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f70:	f140 8098 	bpl.w	80090a4 <_dtoa_r+0x49c>
 8008f74:	f1b9 0f00 	cmp.w	r9, #0
 8008f78:	f000 8094 	beq.w	80090a4 <_dtoa_r+0x49c>
 8008f7c:	f1ba 0f00 	cmp.w	sl, #0
 8008f80:	dd2f      	ble.n	8008fe2 <_dtoa_r+0x3da>
 8008f82:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008f86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f8a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f8e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008f92:	3201      	adds	r2, #1
 8008f94:	4650      	mov	r0, sl
 8008f96:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008f9a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008f9e:	ee07 2a90 	vmov	s15, r2
 8008fa2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008fa6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008faa:	ee15 4a90 	vmov	r4, s11
 8008fae:	ec52 1b15 	vmov	r1, r2, d5
 8008fb2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d177      	bne.n	80090aa <_dtoa_r+0x4a2>
 8008fba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008fbe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008fc2:	ec42 1b17 	vmov	d7, r1, r2
 8008fc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fce:	f300 8263 	bgt.w	8009498 <_dtoa_r+0x890>
 8008fd2:	eeb1 7b47 	vneg.f64	d7, d7
 8008fd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fde:	f100 8258 	bmi.w	8009492 <_dtoa_r+0x88a>
 8008fe2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fe8:	2a00      	cmp	r2, #0
 8008fea:	f2c0 811d 	blt.w	8009228 <_dtoa_r+0x620>
 8008fee:	f1bb 0f0e 	cmp.w	fp, #14
 8008ff2:	f300 8119 	bgt.w	8009228 <_dtoa_r+0x620>
 8008ff6:	4b8a      	ldr	r3, [pc, #552]	; (8009220 <_dtoa_r+0x618>)
 8008ff8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008ffc:	ed93 6b00 	vldr	d6, [r3]
 8009000:	9b08      	ldr	r3, [sp, #32]
 8009002:	2b00      	cmp	r3, #0
 8009004:	f280 80b7 	bge.w	8009176 <_dtoa_r+0x56e>
 8009008:	f1b9 0f00 	cmp.w	r9, #0
 800900c:	f300 80b3 	bgt.w	8009176 <_dtoa_r+0x56e>
 8009010:	f040 823f 	bne.w	8009492 <_dtoa_r+0x88a>
 8009014:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009018:	ee26 6b07 	vmul.f64	d6, d6, d7
 800901c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009020:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009028:	464c      	mov	r4, r9
 800902a:	464f      	mov	r7, r9
 800902c:	f280 8215 	bge.w	800945a <_dtoa_r+0x852>
 8009030:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009034:	2331      	movs	r3, #49	; 0x31
 8009036:	f808 3b01 	strb.w	r3, [r8], #1
 800903a:	f10b 0b01 	add.w	fp, fp, #1
 800903e:	e211      	b.n	8009464 <_dtoa_r+0x85c>
 8009040:	2202      	movs	r2, #2
 8009042:	e780      	b.n	8008f46 <_dtoa_r+0x33e>
 8009044:	07cc      	lsls	r4, r1, #31
 8009046:	d504      	bpl.n	8009052 <_dtoa_r+0x44a>
 8009048:	ed90 6b00 	vldr	d6, [r0]
 800904c:	3201      	adds	r2, #1
 800904e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009052:	1049      	asrs	r1, r1, #1
 8009054:	3008      	adds	r0, #8
 8009056:	e777      	b.n	8008f48 <_dtoa_r+0x340>
 8009058:	d022      	beq.n	80090a0 <_dtoa_r+0x498>
 800905a:	f1cb 0100 	rsb	r1, fp, #0
 800905e:	4a70      	ldr	r2, [pc, #448]	; (8009220 <_dtoa_r+0x618>)
 8009060:	f001 000f 	and.w	r0, r1, #15
 8009064:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009068:	ed92 7b00 	vldr	d7, [r2]
 800906c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009070:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009074:	486b      	ldr	r0, [pc, #428]	; (8009224 <_dtoa_r+0x61c>)
 8009076:	1109      	asrs	r1, r1, #4
 8009078:	2400      	movs	r4, #0
 800907a:	2202      	movs	r2, #2
 800907c:	b929      	cbnz	r1, 800908a <_dtoa_r+0x482>
 800907e:	2c00      	cmp	r4, #0
 8009080:	f43f af6a 	beq.w	8008f58 <_dtoa_r+0x350>
 8009084:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009088:	e766      	b.n	8008f58 <_dtoa_r+0x350>
 800908a:	07cf      	lsls	r7, r1, #31
 800908c:	d505      	bpl.n	800909a <_dtoa_r+0x492>
 800908e:	ed90 6b00 	vldr	d6, [r0]
 8009092:	3201      	adds	r2, #1
 8009094:	2401      	movs	r4, #1
 8009096:	ee27 7b06 	vmul.f64	d7, d7, d6
 800909a:	1049      	asrs	r1, r1, #1
 800909c:	3008      	adds	r0, #8
 800909e:	e7ed      	b.n	800907c <_dtoa_r+0x474>
 80090a0:	2202      	movs	r2, #2
 80090a2:	e759      	b.n	8008f58 <_dtoa_r+0x350>
 80090a4:	465f      	mov	r7, fp
 80090a6:	4648      	mov	r0, r9
 80090a8:	e775      	b.n	8008f96 <_dtoa_r+0x38e>
 80090aa:	ec42 1b17 	vmov	d7, r1, r2
 80090ae:	4a5c      	ldr	r2, [pc, #368]	; (8009220 <_dtoa_r+0x618>)
 80090b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80090b4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80090b8:	9a01      	ldr	r2, [sp, #4]
 80090ba:	1814      	adds	r4, r2, r0
 80090bc:	9a07      	ldr	r2, [sp, #28]
 80090be:	b352      	cbz	r2, 8009116 <_dtoa_r+0x50e>
 80090c0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80090c4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80090c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80090cc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80090d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80090d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80090d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80090dc:	ee14 2a90 	vmov	r2, s9
 80090e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80090e4:	3230      	adds	r2, #48	; 0x30
 80090e6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80090ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80090ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f2:	f808 2b01 	strb.w	r2, [r8], #1
 80090f6:	d439      	bmi.n	800916c <_dtoa_r+0x564>
 80090f8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80090fc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009104:	d472      	bmi.n	80091ec <_dtoa_r+0x5e4>
 8009106:	45a0      	cmp	r8, r4
 8009108:	f43f af6b 	beq.w	8008fe2 <_dtoa_r+0x3da>
 800910c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009110:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009114:	e7e0      	b.n	80090d8 <_dtoa_r+0x4d0>
 8009116:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800911a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800911e:	4621      	mov	r1, r4
 8009120:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009124:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009128:	ee14 2a90 	vmov	r2, s9
 800912c:	3230      	adds	r2, #48	; 0x30
 800912e:	f808 2b01 	strb.w	r2, [r8], #1
 8009132:	45a0      	cmp	r8, r4
 8009134:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009138:	ee36 6b45 	vsub.f64	d6, d6, d5
 800913c:	d118      	bne.n	8009170 <_dtoa_r+0x568>
 800913e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009142:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009146:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800914a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800914e:	dc4d      	bgt.n	80091ec <_dtoa_r+0x5e4>
 8009150:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009154:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800915c:	f57f af41 	bpl.w	8008fe2 <_dtoa_r+0x3da>
 8009160:	4688      	mov	r8, r1
 8009162:	3901      	subs	r1, #1
 8009164:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009168:	2b30      	cmp	r3, #48	; 0x30
 800916a:	d0f9      	beq.n	8009160 <_dtoa_r+0x558>
 800916c:	46bb      	mov	fp, r7
 800916e:	e02a      	b.n	80091c6 <_dtoa_r+0x5be>
 8009170:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009174:	e7d6      	b.n	8009124 <_dtoa_r+0x51c>
 8009176:	ed9d 7b02 	vldr	d7, [sp, #8]
 800917a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800917e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009182:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009186:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800918a:	ee15 3a10 	vmov	r3, s10
 800918e:	3330      	adds	r3, #48	; 0x30
 8009190:	f808 3b01 	strb.w	r3, [r8], #1
 8009194:	9b01      	ldr	r3, [sp, #4]
 8009196:	eba8 0303 	sub.w	r3, r8, r3
 800919a:	4599      	cmp	r9, r3
 800919c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80091a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80091a4:	d133      	bne.n	800920e <_dtoa_r+0x606>
 80091a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80091aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80091ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b2:	dc1a      	bgt.n	80091ea <_dtoa_r+0x5e2>
 80091b4:	eeb4 7b46 	vcmp.f64	d7, d6
 80091b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091bc:	d103      	bne.n	80091c6 <_dtoa_r+0x5be>
 80091be:	ee15 3a10 	vmov	r3, s10
 80091c2:	07d9      	lsls	r1, r3, #31
 80091c4:	d411      	bmi.n	80091ea <_dtoa_r+0x5e2>
 80091c6:	4629      	mov	r1, r5
 80091c8:	4630      	mov	r0, r6
 80091ca:	f000 fe67 	bl	8009e9c <_Bfree>
 80091ce:	2300      	movs	r3, #0
 80091d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091d2:	f888 3000 	strb.w	r3, [r8]
 80091d6:	f10b 0301 	add.w	r3, fp, #1
 80091da:	6013      	str	r3, [r2, #0]
 80091dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f43f ad61 	beq.w	8008ca6 <_dtoa_r+0x9e>
 80091e4:	f8c3 8000 	str.w	r8, [r3]
 80091e8:	e55d      	b.n	8008ca6 <_dtoa_r+0x9e>
 80091ea:	465f      	mov	r7, fp
 80091ec:	4643      	mov	r3, r8
 80091ee:	4698      	mov	r8, r3
 80091f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091f4:	2a39      	cmp	r2, #57	; 0x39
 80091f6:	d106      	bne.n	8009206 <_dtoa_r+0x5fe>
 80091f8:	9a01      	ldr	r2, [sp, #4]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d1f7      	bne.n	80091ee <_dtoa_r+0x5e6>
 80091fe:	9901      	ldr	r1, [sp, #4]
 8009200:	2230      	movs	r2, #48	; 0x30
 8009202:	3701      	adds	r7, #1
 8009204:	700a      	strb	r2, [r1, #0]
 8009206:	781a      	ldrb	r2, [r3, #0]
 8009208:	3201      	adds	r2, #1
 800920a:	701a      	strb	r2, [r3, #0]
 800920c:	e7ae      	b.n	800916c <_dtoa_r+0x564>
 800920e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009212:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800921a:	d1b2      	bne.n	8009182 <_dtoa_r+0x57a>
 800921c:	e7d3      	b.n	80091c6 <_dtoa_r+0x5be>
 800921e:	bf00      	nop
 8009220:	0800bbd8 	.word	0x0800bbd8
 8009224:	0800bbb0 	.word	0x0800bbb0
 8009228:	9907      	ldr	r1, [sp, #28]
 800922a:	2900      	cmp	r1, #0
 800922c:	f000 80d0 	beq.w	80093d0 <_dtoa_r+0x7c8>
 8009230:	9906      	ldr	r1, [sp, #24]
 8009232:	2901      	cmp	r1, #1
 8009234:	f300 80b4 	bgt.w	80093a0 <_dtoa_r+0x798>
 8009238:	990a      	ldr	r1, [sp, #40]	; 0x28
 800923a:	2900      	cmp	r1, #0
 800923c:	f000 80ac 	beq.w	8009398 <_dtoa_r+0x790>
 8009240:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009244:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009248:	461c      	mov	r4, r3
 800924a:	930a      	str	r3, [sp, #40]	; 0x28
 800924c:	9b04      	ldr	r3, [sp, #16]
 800924e:	4413      	add	r3, r2
 8009250:	9304      	str	r3, [sp, #16]
 8009252:	9b05      	ldr	r3, [sp, #20]
 8009254:	2101      	movs	r1, #1
 8009256:	4413      	add	r3, r2
 8009258:	4630      	mov	r0, r6
 800925a:	9305      	str	r3, [sp, #20]
 800925c:	f000 ff20 	bl	800a0a0 <__i2b>
 8009260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009262:	4607      	mov	r7, r0
 8009264:	f1b8 0f00 	cmp.w	r8, #0
 8009268:	dd0d      	ble.n	8009286 <_dtoa_r+0x67e>
 800926a:	9a05      	ldr	r2, [sp, #20]
 800926c:	2a00      	cmp	r2, #0
 800926e:	dd0a      	ble.n	8009286 <_dtoa_r+0x67e>
 8009270:	4542      	cmp	r2, r8
 8009272:	9904      	ldr	r1, [sp, #16]
 8009274:	bfa8      	it	ge
 8009276:	4642      	movge	r2, r8
 8009278:	1a89      	subs	r1, r1, r2
 800927a:	9104      	str	r1, [sp, #16]
 800927c:	9905      	ldr	r1, [sp, #20]
 800927e:	eba8 0802 	sub.w	r8, r8, r2
 8009282:	1a8a      	subs	r2, r1, r2
 8009284:	9205      	str	r2, [sp, #20]
 8009286:	b303      	cbz	r3, 80092ca <_dtoa_r+0x6c2>
 8009288:	9a07      	ldr	r2, [sp, #28]
 800928a:	2a00      	cmp	r2, #0
 800928c:	f000 80a5 	beq.w	80093da <_dtoa_r+0x7d2>
 8009290:	2c00      	cmp	r4, #0
 8009292:	dd13      	ble.n	80092bc <_dtoa_r+0x6b4>
 8009294:	4639      	mov	r1, r7
 8009296:	4622      	mov	r2, r4
 8009298:	4630      	mov	r0, r6
 800929a:	930d      	str	r3, [sp, #52]	; 0x34
 800929c:	f000 ffc0 	bl	800a220 <__pow5mult>
 80092a0:	462a      	mov	r2, r5
 80092a2:	4601      	mov	r1, r0
 80092a4:	4607      	mov	r7, r0
 80092a6:	4630      	mov	r0, r6
 80092a8:	f000 ff10 	bl	800a0cc <__multiply>
 80092ac:	4629      	mov	r1, r5
 80092ae:	900a      	str	r0, [sp, #40]	; 0x28
 80092b0:	4630      	mov	r0, r6
 80092b2:	f000 fdf3 	bl	8009e9c <_Bfree>
 80092b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092ba:	4615      	mov	r5, r2
 80092bc:	1b1a      	subs	r2, r3, r4
 80092be:	d004      	beq.n	80092ca <_dtoa_r+0x6c2>
 80092c0:	4629      	mov	r1, r5
 80092c2:	4630      	mov	r0, r6
 80092c4:	f000 ffac 	bl	800a220 <__pow5mult>
 80092c8:	4605      	mov	r5, r0
 80092ca:	2101      	movs	r1, #1
 80092cc:	4630      	mov	r0, r6
 80092ce:	f000 fee7 	bl	800a0a0 <__i2b>
 80092d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	4604      	mov	r4, r0
 80092d8:	f340 8081 	ble.w	80093de <_dtoa_r+0x7d6>
 80092dc:	461a      	mov	r2, r3
 80092de:	4601      	mov	r1, r0
 80092e0:	4630      	mov	r0, r6
 80092e2:	f000 ff9d 	bl	800a220 <__pow5mult>
 80092e6:	9b06      	ldr	r3, [sp, #24]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	4604      	mov	r4, r0
 80092ec:	dd7a      	ble.n	80093e4 <_dtoa_r+0x7dc>
 80092ee:	2300      	movs	r3, #0
 80092f0:	930a      	str	r3, [sp, #40]	; 0x28
 80092f2:	6922      	ldr	r2, [r4, #16]
 80092f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80092f8:	6910      	ldr	r0, [r2, #16]
 80092fa:	f000 fe81 	bl	800a000 <__hi0bits>
 80092fe:	f1c0 0020 	rsb	r0, r0, #32
 8009302:	9b05      	ldr	r3, [sp, #20]
 8009304:	4418      	add	r0, r3
 8009306:	f010 001f 	ands.w	r0, r0, #31
 800930a:	f000 808c 	beq.w	8009426 <_dtoa_r+0x81e>
 800930e:	f1c0 0220 	rsb	r2, r0, #32
 8009312:	2a04      	cmp	r2, #4
 8009314:	f340 8085 	ble.w	8009422 <_dtoa_r+0x81a>
 8009318:	f1c0 001c 	rsb	r0, r0, #28
 800931c:	9b04      	ldr	r3, [sp, #16]
 800931e:	4403      	add	r3, r0
 8009320:	9304      	str	r3, [sp, #16]
 8009322:	9b05      	ldr	r3, [sp, #20]
 8009324:	4403      	add	r3, r0
 8009326:	4480      	add	r8, r0
 8009328:	9305      	str	r3, [sp, #20]
 800932a:	9b04      	ldr	r3, [sp, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	dd05      	ble.n	800933c <_dtoa_r+0x734>
 8009330:	4629      	mov	r1, r5
 8009332:	461a      	mov	r2, r3
 8009334:	4630      	mov	r0, r6
 8009336:	f000 ffcd 	bl	800a2d4 <__lshift>
 800933a:	4605      	mov	r5, r0
 800933c:	9b05      	ldr	r3, [sp, #20]
 800933e:	2b00      	cmp	r3, #0
 8009340:	dd05      	ble.n	800934e <_dtoa_r+0x746>
 8009342:	4621      	mov	r1, r4
 8009344:	461a      	mov	r2, r3
 8009346:	4630      	mov	r0, r6
 8009348:	f000 ffc4 	bl	800a2d4 <__lshift>
 800934c:	4604      	mov	r4, r0
 800934e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009350:	2b00      	cmp	r3, #0
 8009352:	d06a      	beq.n	800942a <_dtoa_r+0x822>
 8009354:	4621      	mov	r1, r4
 8009356:	4628      	mov	r0, r5
 8009358:	f001 f82c 	bl	800a3b4 <__mcmp>
 800935c:	2800      	cmp	r0, #0
 800935e:	da64      	bge.n	800942a <_dtoa_r+0x822>
 8009360:	2300      	movs	r3, #0
 8009362:	4629      	mov	r1, r5
 8009364:	220a      	movs	r2, #10
 8009366:	4630      	mov	r0, r6
 8009368:	f000 fdba 	bl	8009ee0 <__multadd>
 800936c:	9b07      	ldr	r3, [sp, #28]
 800936e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009372:	4605      	mov	r5, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 8191 	beq.w	800969c <_dtoa_r+0xa94>
 800937a:	4639      	mov	r1, r7
 800937c:	2300      	movs	r3, #0
 800937e:	220a      	movs	r2, #10
 8009380:	4630      	mov	r0, r6
 8009382:	f000 fdad 	bl	8009ee0 <__multadd>
 8009386:	f1ba 0f00 	cmp.w	sl, #0
 800938a:	4607      	mov	r7, r0
 800938c:	f300 808d 	bgt.w	80094aa <_dtoa_r+0x8a2>
 8009390:	9b06      	ldr	r3, [sp, #24]
 8009392:	2b02      	cmp	r3, #2
 8009394:	dc50      	bgt.n	8009438 <_dtoa_r+0x830>
 8009396:	e088      	b.n	80094aa <_dtoa_r+0x8a2>
 8009398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800939a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800939e:	e751      	b.n	8009244 <_dtoa_r+0x63c>
 80093a0:	f109 34ff 	add.w	r4, r9, #4294967295
 80093a4:	42a3      	cmp	r3, r4
 80093a6:	bfbf      	itttt	lt
 80093a8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80093aa:	1ae3      	sublt	r3, r4, r3
 80093ac:	18d2      	addlt	r2, r2, r3
 80093ae:	9209      	strlt	r2, [sp, #36]	; 0x24
 80093b0:	bfb6      	itet	lt
 80093b2:	4623      	movlt	r3, r4
 80093b4:	1b1c      	subge	r4, r3, r4
 80093b6:	2400      	movlt	r4, #0
 80093b8:	f1b9 0f00 	cmp.w	r9, #0
 80093bc:	bfb5      	itete	lt
 80093be:	9a04      	ldrlt	r2, [sp, #16]
 80093c0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80093c4:	eba2 0809 	sublt.w	r8, r2, r9
 80093c8:	464a      	movge	r2, r9
 80093ca:	bfb8      	it	lt
 80093cc:	2200      	movlt	r2, #0
 80093ce:	e73c      	b.n	800924a <_dtoa_r+0x642>
 80093d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80093d4:	9f07      	ldr	r7, [sp, #28]
 80093d6:	461c      	mov	r4, r3
 80093d8:	e744      	b.n	8009264 <_dtoa_r+0x65c>
 80093da:	461a      	mov	r2, r3
 80093dc:	e770      	b.n	80092c0 <_dtoa_r+0x6b8>
 80093de:	9b06      	ldr	r3, [sp, #24]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	dc18      	bgt.n	8009416 <_dtoa_r+0x80e>
 80093e4:	9b02      	ldr	r3, [sp, #8]
 80093e6:	b9b3      	cbnz	r3, 8009416 <_dtoa_r+0x80e>
 80093e8:	9b03      	ldr	r3, [sp, #12]
 80093ea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80093ee:	b9a2      	cbnz	r2, 800941a <_dtoa_r+0x812>
 80093f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80093f4:	0d12      	lsrs	r2, r2, #20
 80093f6:	0512      	lsls	r2, r2, #20
 80093f8:	b18a      	cbz	r2, 800941e <_dtoa_r+0x816>
 80093fa:	9b04      	ldr	r3, [sp, #16]
 80093fc:	3301      	adds	r3, #1
 80093fe:	9304      	str	r3, [sp, #16]
 8009400:	9b05      	ldr	r3, [sp, #20]
 8009402:	3301      	adds	r3, #1
 8009404:	9305      	str	r3, [sp, #20]
 8009406:	2301      	movs	r3, #1
 8009408:	930a      	str	r3, [sp, #40]	; 0x28
 800940a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940c:	2b00      	cmp	r3, #0
 800940e:	f47f af70 	bne.w	80092f2 <_dtoa_r+0x6ea>
 8009412:	2001      	movs	r0, #1
 8009414:	e775      	b.n	8009302 <_dtoa_r+0x6fa>
 8009416:	2300      	movs	r3, #0
 8009418:	e7f6      	b.n	8009408 <_dtoa_r+0x800>
 800941a:	9b02      	ldr	r3, [sp, #8]
 800941c:	e7f4      	b.n	8009408 <_dtoa_r+0x800>
 800941e:	920a      	str	r2, [sp, #40]	; 0x28
 8009420:	e7f3      	b.n	800940a <_dtoa_r+0x802>
 8009422:	d082      	beq.n	800932a <_dtoa_r+0x722>
 8009424:	4610      	mov	r0, r2
 8009426:	301c      	adds	r0, #28
 8009428:	e778      	b.n	800931c <_dtoa_r+0x714>
 800942a:	f1b9 0f00 	cmp.w	r9, #0
 800942e:	dc37      	bgt.n	80094a0 <_dtoa_r+0x898>
 8009430:	9b06      	ldr	r3, [sp, #24]
 8009432:	2b02      	cmp	r3, #2
 8009434:	dd34      	ble.n	80094a0 <_dtoa_r+0x898>
 8009436:	46ca      	mov	sl, r9
 8009438:	f1ba 0f00 	cmp.w	sl, #0
 800943c:	d10d      	bne.n	800945a <_dtoa_r+0x852>
 800943e:	4621      	mov	r1, r4
 8009440:	4653      	mov	r3, sl
 8009442:	2205      	movs	r2, #5
 8009444:	4630      	mov	r0, r6
 8009446:	f000 fd4b 	bl	8009ee0 <__multadd>
 800944a:	4601      	mov	r1, r0
 800944c:	4604      	mov	r4, r0
 800944e:	4628      	mov	r0, r5
 8009450:	f000 ffb0 	bl	800a3b4 <__mcmp>
 8009454:	2800      	cmp	r0, #0
 8009456:	f73f adeb 	bgt.w	8009030 <_dtoa_r+0x428>
 800945a:	9b08      	ldr	r3, [sp, #32]
 800945c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009460:	ea6f 0b03 	mvn.w	fp, r3
 8009464:	f04f 0900 	mov.w	r9, #0
 8009468:	4621      	mov	r1, r4
 800946a:	4630      	mov	r0, r6
 800946c:	f000 fd16 	bl	8009e9c <_Bfree>
 8009470:	2f00      	cmp	r7, #0
 8009472:	f43f aea8 	beq.w	80091c6 <_dtoa_r+0x5be>
 8009476:	f1b9 0f00 	cmp.w	r9, #0
 800947a:	d005      	beq.n	8009488 <_dtoa_r+0x880>
 800947c:	45b9      	cmp	r9, r7
 800947e:	d003      	beq.n	8009488 <_dtoa_r+0x880>
 8009480:	4649      	mov	r1, r9
 8009482:	4630      	mov	r0, r6
 8009484:	f000 fd0a 	bl	8009e9c <_Bfree>
 8009488:	4639      	mov	r1, r7
 800948a:	4630      	mov	r0, r6
 800948c:	f000 fd06 	bl	8009e9c <_Bfree>
 8009490:	e699      	b.n	80091c6 <_dtoa_r+0x5be>
 8009492:	2400      	movs	r4, #0
 8009494:	4627      	mov	r7, r4
 8009496:	e7e0      	b.n	800945a <_dtoa_r+0x852>
 8009498:	46bb      	mov	fp, r7
 800949a:	4604      	mov	r4, r0
 800949c:	4607      	mov	r7, r0
 800949e:	e5c7      	b.n	8009030 <_dtoa_r+0x428>
 80094a0:	9b07      	ldr	r3, [sp, #28]
 80094a2:	46ca      	mov	sl, r9
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 8100 	beq.w	80096aa <_dtoa_r+0xaa2>
 80094aa:	f1b8 0f00 	cmp.w	r8, #0
 80094ae:	dd05      	ble.n	80094bc <_dtoa_r+0x8b4>
 80094b0:	4639      	mov	r1, r7
 80094b2:	4642      	mov	r2, r8
 80094b4:	4630      	mov	r0, r6
 80094b6:	f000 ff0d 	bl	800a2d4 <__lshift>
 80094ba:	4607      	mov	r7, r0
 80094bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d05d      	beq.n	800957e <_dtoa_r+0x976>
 80094c2:	6879      	ldr	r1, [r7, #4]
 80094c4:	4630      	mov	r0, r6
 80094c6:	f000 fca9 	bl	8009e1c <_Balloc>
 80094ca:	4680      	mov	r8, r0
 80094cc:	b928      	cbnz	r0, 80094da <_dtoa_r+0x8d2>
 80094ce:	4b82      	ldr	r3, [pc, #520]	; (80096d8 <_dtoa_r+0xad0>)
 80094d0:	4602      	mov	r2, r0
 80094d2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094d6:	f7ff bbaf 	b.w	8008c38 <_dtoa_r+0x30>
 80094da:	693a      	ldr	r2, [r7, #16]
 80094dc:	3202      	adds	r2, #2
 80094de:	0092      	lsls	r2, r2, #2
 80094e0:	f107 010c 	add.w	r1, r7, #12
 80094e4:	300c      	adds	r0, #12
 80094e6:	f000 fc8b 	bl	8009e00 <memcpy>
 80094ea:	2201      	movs	r2, #1
 80094ec:	4641      	mov	r1, r8
 80094ee:	4630      	mov	r0, r6
 80094f0:	f000 fef0 	bl	800a2d4 <__lshift>
 80094f4:	9b01      	ldr	r3, [sp, #4]
 80094f6:	3301      	adds	r3, #1
 80094f8:	9304      	str	r3, [sp, #16]
 80094fa:	9b01      	ldr	r3, [sp, #4]
 80094fc:	4453      	add	r3, sl
 80094fe:	9308      	str	r3, [sp, #32]
 8009500:	9b02      	ldr	r3, [sp, #8]
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	46b9      	mov	r9, r7
 8009508:	9307      	str	r3, [sp, #28]
 800950a:	4607      	mov	r7, r0
 800950c:	9b04      	ldr	r3, [sp, #16]
 800950e:	4621      	mov	r1, r4
 8009510:	3b01      	subs	r3, #1
 8009512:	4628      	mov	r0, r5
 8009514:	9302      	str	r3, [sp, #8]
 8009516:	f7ff faeb 	bl	8008af0 <quorem>
 800951a:	4603      	mov	r3, r0
 800951c:	3330      	adds	r3, #48	; 0x30
 800951e:	9005      	str	r0, [sp, #20]
 8009520:	4649      	mov	r1, r9
 8009522:	4628      	mov	r0, r5
 8009524:	9309      	str	r3, [sp, #36]	; 0x24
 8009526:	f000 ff45 	bl	800a3b4 <__mcmp>
 800952a:	463a      	mov	r2, r7
 800952c:	4682      	mov	sl, r0
 800952e:	4621      	mov	r1, r4
 8009530:	4630      	mov	r0, r6
 8009532:	f000 ff5b 	bl	800a3ec <__mdiff>
 8009536:	68c2      	ldr	r2, [r0, #12]
 8009538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800953a:	4680      	mov	r8, r0
 800953c:	bb0a      	cbnz	r2, 8009582 <_dtoa_r+0x97a>
 800953e:	4601      	mov	r1, r0
 8009540:	4628      	mov	r0, r5
 8009542:	f000 ff37 	bl	800a3b4 <__mcmp>
 8009546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009548:	4602      	mov	r2, r0
 800954a:	4641      	mov	r1, r8
 800954c:	4630      	mov	r0, r6
 800954e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009552:	f000 fca3 	bl	8009e9c <_Bfree>
 8009556:	9b06      	ldr	r3, [sp, #24]
 8009558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800955a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800955e:	ea43 0102 	orr.w	r1, r3, r2
 8009562:	9b07      	ldr	r3, [sp, #28]
 8009564:	430b      	orrs	r3, r1
 8009566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009568:	d10d      	bne.n	8009586 <_dtoa_r+0x97e>
 800956a:	2b39      	cmp	r3, #57	; 0x39
 800956c:	d029      	beq.n	80095c2 <_dtoa_r+0x9ba>
 800956e:	f1ba 0f00 	cmp.w	sl, #0
 8009572:	dd01      	ble.n	8009578 <_dtoa_r+0x970>
 8009574:	9b05      	ldr	r3, [sp, #20]
 8009576:	3331      	adds	r3, #49	; 0x31
 8009578:	9a02      	ldr	r2, [sp, #8]
 800957a:	7013      	strb	r3, [r2, #0]
 800957c:	e774      	b.n	8009468 <_dtoa_r+0x860>
 800957e:	4638      	mov	r0, r7
 8009580:	e7b8      	b.n	80094f4 <_dtoa_r+0x8ec>
 8009582:	2201      	movs	r2, #1
 8009584:	e7e1      	b.n	800954a <_dtoa_r+0x942>
 8009586:	f1ba 0f00 	cmp.w	sl, #0
 800958a:	db06      	blt.n	800959a <_dtoa_r+0x992>
 800958c:	9906      	ldr	r1, [sp, #24]
 800958e:	ea41 0a0a 	orr.w	sl, r1, sl
 8009592:	9907      	ldr	r1, [sp, #28]
 8009594:	ea5a 0101 	orrs.w	r1, sl, r1
 8009598:	d120      	bne.n	80095dc <_dtoa_r+0x9d4>
 800959a:	2a00      	cmp	r2, #0
 800959c:	ddec      	ble.n	8009578 <_dtoa_r+0x970>
 800959e:	4629      	mov	r1, r5
 80095a0:	2201      	movs	r2, #1
 80095a2:	4630      	mov	r0, r6
 80095a4:	9304      	str	r3, [sp, #16]
 80095a6:	f000 fe95 	bl	800a2d4 <__lshift>
 80095aa:	4621      	mov	r1, r4
 80095ac:	4605      	mov	r5, r0
 80095ae:	f000 ff01 	bl	800a3b4 <__mcmp>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	9b04      	ldr	r3, [sp, #16]
 80095b6:	dc02      	bgt.n	80095be <_dtoa_r+0x9b6>
 80095b8:	d1de      	bne.n	8009578 <_dtoa_r+0x970>
 80095ba:	07da      	lsls	r2, r3, #31
 80095bc:	d5dc      	bpl.n	8009578 <_dtoa_r+0x970>
 80095be:	2b39      	cmp	r3, #57	; 0x39
 80095c0:	d1d8      	bne.n	8009574 <_dtoa_r+0x96c>
 80095c2:	9a02      	ldr	r2, [sp, #8]
 80095c4:	2339      	movs	r3, #57	; 0x39
 80095c6:	7013      	strb	r3, [r2, #0]
 80095c8:	4643      	mov	r3, r8
 80095ca:	4698      	mov	r8, r3
 80095cc:	3b01      	subs	r3, #1
 80095ce:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80095d2:	2a39      	cmp	r2, #57	; 0x39
 80095d4:	d051      	beq.n	800967a <_dtoa_r+0xa72>
 80095d6:	3201      	adds	r2, #1
 80095d8:	701a      	strb	r2, [r3, #0]
 80095da:	e745      	b.n	8009468 <_dtoa_r+0x860>
 80095dc:	2a00      	cmp	r2, #0
 80095de:	dd03      	ble.n	80095e8 <_dtoa_r+0x9e0>
 80095e0:	2b39      	cmp	r3, #57	; 0x39
 80095e2:	d0ee      	beq.n	80095c2 <_dtoa_r+0x9ba>
 80095e4:	3301      	adds	r3, #1
 80095e6:	e7c7      	b.n	8009578 <_dtoa_r+0x970>
 80095e8:	9a04      	ldr	r2, [sp, #16]
 80095ea:	9908      	ldr	r1, [sp, #32]
 80095ec:	f802 3c01 	strb.w	r3, [r2, #-1]
 80095f0:	428a      	cmp	r2, r1
 80095f2:	d02b      	beq.n	800964c <_dtoa_r+0xa44>
 80095f4:	4629      	mov	r1, r5
 80095f6:	2300      	movs	r3, #0
 80095f8:	220a      	movs	r2, #10
 80095fa:	4630      	mov	r0, r6
 80095fc:	f000 fc70 	bl	8009ee0 <__multadd>
 8009600:	45b9      	cmp	r9, r7
 8009602:	4605      	mov	r5, r0
 8009604:	f04f 0300 	mov.w	r3, #0
 8009608:	f04f 020a 	mov.w	r2, #10
 800960c:	4649      	mov	r1, r9
 800960e:	4630      	mov	r0, r6
 8009610:	d107      	bne.n	8009622 <_dtoa_r+0xa1a>
 8009612:	f000 fc65 	bl	8009ee0 <__multadd>
 8009616:	4681      	mov	r9, r0
 8009618:	4607      	mov	r7, r0
 800961a:	9b04      	ldr	r3, [sp, #16]
 800961c:	3301      	adds	r3, #1
 800961e:	9304      	str	r3, [sp, #16]
 8009620:	e774      	b.n	800950c <_dtoa_r+0x904>
 8009622:	f000 fc5d 	bl	8009ee0 <__multadd>
 8009626:	4639      	mov	r1, r7
 8009628:	4681      	mov	r9, r0
 800962a:	2300      	movs	r3, #0
 800962c:	220a      	movs	r2, #10
 800962e:	4630      	mov	r0, r6
 8009630:	f000 fc56 	bl	8009ee0 <__multadd>
 8009634:	4607      	mov	r7, r0
 8009636:	e7f0      	b.n	800961a <_dtoa_r+0xa12>
 8009638:	f1ba 0f00 	cmp.w	sl, #0
 800963c:	9a01      	ldr	r2, [sp, #4]
 800963e:	bfcc      	ite	gt
 8009640:	46d0      	movgt	r8, sl
 8009642:	f04f 0801 	movle.w	r8, #1
 8009646:	4490      	add	r8, r2
 8009648:	f04f 0900 	mov.w	r9, #0
 800964c:	4629      	mov	r1, r5
 800964e:	2201      	movs	r2, #1
 8009650:	4630      	mov	r0, r6
 8009652:	9302      	str	r3, [sp, #8]
 8009654:	f000 fe3e 	bl	800a2d4 <__lshift>
 8009658:	4621      	mov	r1, r4
 800965a:	4605      	mov	r5, r0
 800965c:	f000 feaa 	bl	800a3b4 <__mcmp>
 8009660:	2800      	cmp	r0, #0
 8009662:	dcb1      	bgt.n	80095c8 <_dtoa_r+0x9c0>
 8009664:	d102      	bne.n	800966c <_dtoa_r+0xa64>
 8009666:	9b02      	ldr	r3, [sp, #8]
 8009668:	07db      	lsls	r3, r3, #31
 800966a:	d4ad      	bmi.n	80095c8 <_dtoa_r+0x9c0>
 800966c:	4643      	mov	r3, r8
 800966e:	4698      	mov	r8, r3
 8009670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009674:	2a30      	cmp	r2, #48	; 0x30
 8009676:	d0fa      	beq.n	800966e <_dtoa_r+0xa66>
 8009678:	e6f6      	b.n	8009468 <_dtoa_r+0x860>
 800967a:	9a01      	ldr	r2, [sp, #4]
 800967c:	429a      	cmp	r2, r3
 800967e:	d1a4      	bne.n	80095ca <_dtoa_r+0x9c2>
 8009680:	f10b 0b01 	add.w	fp, fp, #1
 8009684:	2331      	movs	r3, #49	; 0x31
 8009686:	e778      	b.n	800957a <_dtoa_r+0x972>
 8009688:	4b14      	ldr	r3, [pc, #80]	; (80096dc <_dtoa_r+0xad4>)
 800968a:	f7ff bb27 	b.w	8008cdc <_dtoa_r+0xd4>
 800968e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009690:	2b00      	cmp	r3, #0
 8009692:	f47f ab03 	bne.w	8008c9c <_dtoa_r+0x94>
 8009696:	4b12      	ldr	r3, [pc, #72]	; (80096e0 <_dtoa_r+0xad8>)
 8009698:	f7ff bb20 	b.w	8008cdc <_dtoa_r+0xd4>
 800969c:	f1ba 0f00 	cmp.w	sl, #0
 80096a0:	dc03      	bgt.n	80096aa <_dtoa_r+0xaa2>
 80096a2:	9b06      	ldr	r3, [sp, #24]
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	f73f aec7 	bgt.w	8009438 <_dtoa_r+0x830>
 80096aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80096ae:	4621      	mov	r1, r4
 80096b0:	4628      	mov	r0, r5
 80096b2:	f7ff fa1d 	bl	8008af0 <quorem>
 80096b6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80096ba:	f808 3b01 	strb.w	r3, [r8], #1
 80096be:	9a01      	ldr	r2, [sp, #4]
 80096c0:	eba8 0202 	sub.w	r2, r8, r2
 80096c4:	4592      	cmp	sl, r2
 80096c6:	ddb7      	ble.n	8009638 <_dtoa_r+0xa30>
 80096c8:	4629      	mov	r1, r5
 80096ca:	2300      	movs	r3, #0
 80096cc:	220a      	movs	r2, #10
 80096ce:	4630      	mov	r0, r6
 80096d0:	f000 fc06 	bl	8009ee0 <__multadd>
 80096d4:	4605      	mov	r5, r0
 80096d6:	e7ea      	b.n	80096ae <_dtoa_r+0xaa6>
 80096d8:	0800bac8 	.word	0x0800bac8
 80096dc:	0800b8cc 	.word	0x0800b8cc
 80096e0:	0800ba49 	.word	0x0800ba49

080096e4 <rshift>:
 80096e4:	6903      	ldr	r3, [r0, #16]
 80096e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80096ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80096f2:	f100 0414 	add.w	r4, r0, #20
 80096f6:	dd45      	ble.n	8009784 <rshift+0xa0>
 80096f8:	f011 011f 	ands.w	r1, r1, #31
 80096fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009700:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009704:	d10c      	bne.n	8009720 <rshift+0x3c>
 8009706:	f100 0710 	add.w	r7, r0, #16
 800970a:	4629      	mov	r1, r5
 800970c:	42b1      	cmp	r1, r6
 800970e:	d334      	bcc.n	800977a <rshift+0x96>
 8009710:	1a9b      	subs	r3, r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	1eea      	subs	r2, r5, #3
 8009716:	4296      	cmp	r6, r2
 8009718:	bf38      	it	cc
 800971a:	2300      	movcc	r3, #0
 800971c:	4423      	add	r3, r4
 800971e:	e015      	b.n	800974c <rshift+0x68>
 8009720:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009724:	f1c1 0820 	rsb	r8, r1, #32
 8009728:	40cf      	lsrs	r7, r1
 800972a:	f105 0e04 	add.w	lr, r5, #4
 800972e:	46a1      	mov	r9, r4
 8009730:	4576      	cmp	r6, lr
 8009732:	46f4      	mov	ip, lr
 8009734:	d815      	bhi.n	8009762 <rshift+0x7e>
 8009736:	1a9a      	subs	r2, r3, r2
 8009738:	0092      	lsls	r2, r2, #2
 800973a:	3a04      	subs	r2, #4
 800973c:	3501      	adds	r5, #1
 800973e:	42ae      	cmp	r6, r5
 8009740:	bf38      	it	cc
 8009742:	2200      	movcc	r2, #0
 8009744:	18a3      	adds	r3, r4, r2
 8009746:	50a7      	str	r7, [r4, r2]
 8009748:	b107      	cbz	r7, 800974c <rshift+0x68>
 800974a:	3304      	adds	r3, #4
 800974c:	1b1a      	subs	r2, r3, r4
 800974e:	42a3      	cmp	r3, r4
 8009750:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009754:	bf08      	it	eq
 8009756:	2300      	moveq	r3, #0
 8009758:	6102      	str	r2, [r0, #16]
 800975a:	bf08      	it	eq
 800975c:	6143      	streq	r3, [r0, #20]
 800975e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009762:	f8dc c000 	ldr.w	ip, [ip]
 8009766:	fa0c fc08 	lsl.w	ip, ip, r8
 800976a:	ea4c 0707 	orr.w	r7, ip, r7
 800976e:	f849 7b04 	str.w	r7, [r9], #4
 8009772:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009776:	40cf      	lsrs	r7, r1
 8009778:	e7da      	b.n	8009730 <rshift+0x4c>
 800977a:	f851 cb04 	ldr.w	ip, [r1], #4
 800977e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009782:	e7c3      	b.n	800970c <rshift+0x28>
 8009784:	4623      	mov	r3, r4
 8009786:	e7e1      	b.n	800974c <rshift+0x68>

08009788 <__hexdig_fun>:
 8009788:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800978c:	2b09      	cmp	r3, #9
 800978e:	d802      	bhi.n	8009796 <__hexdig_fun+0xe>
 8009790:	3820      	subs	r0, #32
 8009792:	b2c0      	uxtb	r0, r0
 8009794:	4770      	bx	lr
 8009796:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800979a:	2b05      	cmp	r3, #5
 800979c:	d801      	bhi.n	80097a2 <__hexdig_fun+0x1a>
 800979e:	3847      	subs	r0, #71	; 0x47
 80097a0:	e7f7      	b.n	8009792 <__hexdig_fun+0xa>
 80097a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80097a6:	2b05      	cmp	r3, #5
 80097a8:	d801      	bhi.n	80097ae <__hexdig_fun+0x26>
 80097aa:	3827      	subs	r0, #39	; 0x27
 80097ac:	e7f1      	b.n	8009792 <__hexdig_fun+0xa>
 80097ae:	2000      	movs	r0, #0
 80097b0:	4770      	bx	lr
	...

080097b4 <__gethex>:
 80097b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	ed2d 8b02 	vpush	{d8}
 80097bc:	b089      	sub	sp, #36	; 0x24
 80097be:	ee08 0a10 	vmov	s16, r0
 80097c2:	9304      	str	r3, [sp, #16]
 80097c4:	4bb4      	ldr	r3, [pc, #720]	; (8009a98 <__gethex+0x2e4>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	9301      	str	r3, [sp, #4]
 80097ca:	4618      	mov	r0, r3
 80097cc:	468b      	mov	fp, r1
 80097ce:	4690      	mov	r8, r2
 80097d0:	f7f6 fd36 	bl	8000240 <strlen>
 80097d4:	9b01      	ldr	r3, [sp, #4]
 80097d6:	f8db 2000 	ldr.w	r2, [fp]
 80097da:	4403      	add	r3, r0
 80097dc:	4682      	mov	sl, r0
 80097de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80097e2:	9305      	str	r3, [sp, #20]
 80097e4:	1c93      	adds	r3, r2, #2
 80097e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80097ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80097ee:	32fe      	adds	r2, #254	; 0xfe
 80097f0:	18d1      	adds	r1, r2, r3
 80097f2:	461f      	mov	r7, r3
 80097f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80097f8:	9100      	str	r1, [sp, #0]
 80097fa:	2830      	cmp	r0, #48	; 0x30
 80097fc:	d0f8      	beq.n	80097f0 <__gethex+0x3c>
 80097fe:	f7ff ffc3 	bl	8009788 <__hexdig_fun>
 8009802:	4604      	mov	r4, r0
 8009804:	2800      	cmp	r0, #0
 8009806:	d13a      	bne.n	800987e <__gethex+0xca>
 8009808:	9901      	ldr	r1, [sp, #4]
 800980a:	4652      	mov	r2, sl
 800980c:	4638      	mov	r0, r7
 800980e:	f001 fa2f 	bl	800ac70 <strncmp>
 8009812:	4605      	mov	r5, r0
 8009814:	2800      	cmp	r0, #0
 8009816:	d168      	bne.n	80098ea <__gethex+0x136>
 8009818:	f817 000a 	ldrb.w	r0, [r7, sl]
 800981c:	eb07 060a 	add.w	r6, r7, sl
 8009820:	f7ff ffb2 	bl	8009788 <__hexdig_fun>
 8009824:	2800      	cmp	r0, #0
 8009826:	d062      	beq.n	80098ee <__gethex+0x13a>
 8009828:	4633      	mov	r3, r6
 800982a:	7818      	ldrb	r0, [r3, #0]
 800982c:	2830      	cmp	r0, #48	; 0x30
 800982e:	461f      	mov	r7, r3
 8009830:	f103 0301 	add.w	r3, r3, #1
 8009834:	d0f9      	beq.n	800982a <__gethex+0x76>
 8009836:	f7ff ffa7 	bl	8009788 <__hexdig_fun>
 800983a:	2301      	movs	r3, #1
 800983c:	fab0 f480 	clz	r4, r0
 8009840:	0964      	lsrs	r4, r4, #5
 8009842:	4635      	mov	r5, r6
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	463a      	mov	r2, r7
 8009848:	4616      	mov	r6, r2
 800984a:	3201      	adds	r2, #1
 800984c:	7830      	ldrb	r0, [r6, #0]
 800984e:	f7ff ff9b 	bl	8009788 <__hexdig_fun>
 8009852:	2800      	cmp	r0, #0
 8009854:	d1f8      	bne.n	8009848 <__gethex+0x94>
 8009856:	9901      	ldr	r1, [sp, #4]
 8009858:	4652      	mov	r2, sl
 800985a:	4630      	mov	r0, r6
 800985c:	f001 fa08 	bl	800ac70 <strncmp>
 8009860:	b980      	cbnz	r0, 8009884 <__gethex+0xd0>
 8009862:	b94d      	cbnz	r5, 8009878 <__gethex+0xc4>
 8009864:	eb06 050a 	add.w	r5, r6, sl
 8009868:	462a      	mov	r2, r5
 800986a:	4616      	mov	r6, r2
 800986c:	3201      	adds	r2, #1
 800986e:	7830      	ldrb	r0, [r6, #0]
 8009870:	f7ff ff8a 	bl	8009788 <__hexdig_fun>
 8009874:	2800      	cmp	r0, #0
 8009876:	d1f8      	bne.n	800986a <__gethex+0xb6>
 8009878:	1bad      	subs	r5, r5, r6
 800987a:	00ad      	lsls	r5, r5, #2
 800987c:	e004      	b.n	8009888 <__gethex+0xd4>
 800987e:	2400      	movs	r4, #0
 8009880:	4625      	mov	r5, r4
 8009882:	e7e0      	b.n	8009846 <__gethex+0x92>
 8009884:	2d00      	cmp	r5, #0
 8009886:	d1f7      	bne.n	8009878 <__gethex+0xc4>
 8009888:	7833      	ldrb	r3, [r6, #0]
 800988a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800988e:	2b50      	cmp	r3, #80	; 0x50
 8009890:	d13b      	bne.n	800990a <__gethex+0x156>
 8009892:	7873      	ldrb	r3, [r6, #1]
 8009894:	2b2b      	cmp	r3, #43	; 0x2b
 8009896:	d02c      	beq.n	80098f2 <__gethex+0x13e>
 8009898:	2b2d      	cmp	r3, #45	; 0x2d
 800989a:	d02e      	beq.n	80098fa <__gethex+0x146>
 800989c:	1c71      	adds	r1, r6, #1
 800989e:	f04f 0900 	mov.w	r9, #0
 80098a2:	7808      	ldrb	r0, [r1, #0]
 80098a4:	f7ff ff70 	bl	8009788 <__hexdig_fun>
 80098a8:	1e43      	subs	r3, r0, #1
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b18      	cmp	r3, #24
 80098ae:	d82c      	bhi.n	800990a <__gethex+0x156>
 80098b0:	f1a0 0210 	sub.w	r2, r0, #16
 80098b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80098b8:	f7ff ff66 	bl	8009788 <__hexdig_fun>
 80098bc:	1e43      	subs	r3, r0, #1
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b18      	cmp	r3, #24
 80098c2:	d91d      	bls.n	8009900 <__gethex+0x14c>
 80098c4:	f1b9 0f00 	cmp.w	r9, #0
 80098c8:	d000      	beq.n	80098cc <__gethex+0x118>
 80098ca:	4252      	negs	r2, r2
 80098cc:	4415      	add	r5, r2
 80098ce:	f8cb 1000 	str.w	r1, [fp]
 80098d2:	b1e4      	cbz	r4, 800990e <__gethex+0x15a>
 80098d4:	9b00      	ldr	r3, [sp, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	bf14      	ite	ne
 80098da:	2700      	movne	r7, #0
 80098dc:	2706      	moveq	r7, #6
 80098de:	4638      	mov	r0, r7
 80098e0:	b009      	add	sp, #36	; 0x24
 80098e2:	ecbd 8b02 	vpop	{d8}
 80098e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ea:	463e      	mov	r6, r7
 80098ec:	4625      	mov	r5, r4
 80098ee:	2401      	movs	r4, #1
 80098f0:	e7ca      	b.n	8009888 <__gethex+0xd4>
 80098f2:	f04f 0900 	mov.w	r9, #0
 80098f6:	1cb1      	adds	r1, r6, #2
 80098f8:	e7d3      	b.n	80098a2 <__gethex+0xee>
 80098fa:	f04f 0901 	mov.w	r9, #1
 80098fe:	e7fa      	b.n	80098f6 <__gethex+0x142>
 8009900:	230a      	movs	r3, #10
 8009902:	fb03 0202 	mla	r2, r3, r2, r0
 8009906:	3a10      	subs	r2, #16
 8009908:	e7d4      	b.n	80098b4 <__gethex+0x100>
 800990a:	4631      	mov	r1, r6
 800990c:	e7df      	b.n	80098ce <__gethex+0x11a>
 800990e:	1bf3      	subs	r3, r6, r7
 8009910:	3b01      	subs	r3, #1
 8009912:	4621      	mov	r1, r4
 8009914:	2b07      	cmp	r3, #7
 8009916:	dc0b      	bgt.n	8009930 <__gethex+0x17c>
 8009918:	ee18 0a10 	vmov	r0, s16
 800991c:	f000 fa7e 	bl	8009e1c <_Balloc>
 8009920:	4604      	mov	r4, r0
 8009922:	b940      	cbnz	r0, 8009936 <__gethex+0x182>
 8009924:	4b5d      	ldr	r3, [pc, #372]	; (8009a9c <__gethex+0x2e8>)
 8009926:	4602      	mov	r2, r0
 8009928:	21de      	movs	r1, #222	; 0xde
 800992a:	485d      	ldr	r0, [pc, #372]	; (8009aa0 <__gethex+0x2ec>)
 800992c:	f001 f9c2 	bl	800acb4 <__assert_func>
 8009930:	3101      	adds	r1, #1
 8009932:	105b      	asrs	r3, r3, #1
 8009934:	e7ee      	b.n	8009914 <__gethex+0x160>
 8009936:	f100 0914 	add.w	r9, r0, #20
 800993a:	f04f 0b00 	mov.w	fp, #0
 800993e:	f1ca 0301 	rsb	r3, sl, #1
 8009942:	f8cd 9008 	str.w	r9, [sp, #8]
 8009946:	f8cd b000 	str.w	fp, [sp]
 800994a:	9306      	str	r3, [sp, #24]
 800994c:	42b7      	cmp	r7, r6
 800994e:	d340      	bcc.n	80099d2 <__gethex+0x21e>
 8009950:	9802      	ldr	r0, [sp, #8]
 8009952:	9b00      	ldr	r3, [sp, #0]
 8009954:	f840 3b04 	str.w	r3, [r0], #4
 8009958:	eba0 0009 	sub.w	r0, r0, r9
 800995c:	1080      	asrs	r0, r0, #2
 800995e:	0146      	lsls	r6, r0, #5
 8009960:	6120      	str	r0, [r4, #16]
 8009962:	4618      	mov	r0, r3
 8009964:	f000 fb4c 	bl	800a000 <__hi0bits>
 8009968:	1a30      	subs	r0, r6, r0
 800996a:	f8d8 6000 	ldr.w	r6, [r8]
 800996e:	42b0      	cmp	r0, r6
 8009970:	dd63      	ble.n	8009a3a <__gethex+0x286>
 8009972:	1b87      	subs	r7, r0, r6
 8009974:	4639      	mov	r1, r7
 8009976:	4620      	mov	r0, r4
 8009978:	f000 feed 	bl	800a756 <__any_on>
 800997c:	4682      	mov	sl, r0
 800997e:	b1a8      	cbz	r0, 80099ac <__gethex+0x1f8>
 8009980:	1e7b      	subs	r3, r7, #1
 8009982:	1159      	asrs	r1, r3, #5
 8009984:	f003 021f 	and.w	r2, r3, #31
 8009988:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800998c:	f04f 0a01 	mov.w	sl, #1
 8009990:	fa0a f202 	lsl.w	r2, sl, r2
 8009994:	420a      	tst	r2, r1
 8009996:	d009      	beq.n	80099ac <__gethex+0x1f8>
 8009998:	4553      	cmp	r3, sl
 800999a:	dd05      	ble.n	80099a8 <__gethex+0x1f4>
 800999c:	1eb9      	subs	r1, r7, #2
 800999e:	4620      	mov	r0, r4
 80099a0:	f000 fed9 	bl	800a756 <__any_on>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d145      	bne.n	8009a34 <__gethex+0x280>
 80099a8:	f04f 0a02 	mov.w	sl, #2
 80099ac:	4639      	mov	r1, r7
 80099ae:	4620      	mov	r0, r4
 80099b0:	f7ff fe98 	bl	80096e4 <rshift>
 80099b4:	443d      	add	r5, r7
 80099b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099ba:	42ab      	cmp	r3, r5
 80099bc:	da4c      	bge.n	8009a58 <__gethex+0x2a4>
 80099be:	ee18 0a10 	vmov	r0, s16
 80099c2:	4621      	mov	r1, r4
 80099c4:	f000 fa6a 	bl	8009e9c <_Bfree>
 80099c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80099ca:	2300      	movs	r3, #0
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	27a3      	movs	r7, #163	; 0xa3
 80099d0:	e785      	b.n	80098de <__gethex+0x12a>
 80099d2:	1e73      	subs	r3, r6, #1
 80099d4:	9a05      	ldr	r2, [sp, #20]
 80099d6:	9303      	str	r3, [sp, #12]
 80099d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099dc:	4293      	cmp	r3, r2
 80099de:	d019      	beq.n	8009a14 <__gethex+0x260>
 80099e0:	f1bb 0f20 	cmp.w	fp, #32
 80099e4:	d107      	bne.n	80099f6 <__gethex+0x242>
 80099e6:	9b02      	ldr	r3, [sp, #8]
 80099e8:	9a00      	ldr	r2, [sp, #0]
 80099ea:	f843 2b04 	str.w	r2, [r3], #4
 80099ee:	9302      	str	r3, [sp, #8]
 80099f0:	2300      	movs	r3, #0
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	469b      	mov	fp, r3
 80099f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80099fa:	f7ff fec5 	bl	8009788 <__hexdig_fun>
 80099fe:	9b00      	ldr	r3, [sp, #0]
 8009a00:	f000 000f 	and.w	r0, r0, #15
 8009a04:	fa00 f00b 	lsl.w	r0, r0, fp
 8009a08:	4303      	orrs	r3, r0
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	f10b 0b04 	add.w	fp, fp, #4
 8009a10:	9b03      	ldr	r3, [sp, #12]
 8009a12:	e00d      	b.n	8009a30 <__gethex+0x27c>
 8009a14:	9b03      	ldr	r3, [sp, #12]
 8009a16:	9a06      	ldr	r2, [sp, #24]
 8009a18:	4413      	add	r3, r2
 8009a1a:	42bb      	cmp	r3, r7
 8009a1c:	d3e0      	bcc.n	80099e0 <__gethex+0x22c>
 8009a1e:	4618      	mov	r0, r3
 8009a20:	9901      	ldr	r1, [sp, #4]
 8009a22:	9307      	str	r3, [sp, #28]
 8009a24:	4652      	mov	r2, sl
 8009a26:	f001 f923 	bl	800ac70 <strncmp>
 8009a2a:	9b07      	ldr	r3, [sp, #28]
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d1d7      	bne.n	80099e0 <__gethex+0x22c>
 8009a30:	461e      	mov	r6, r3
 8009a32:	e78b      	b.n	800994c <__gethex+0x198>
 8009a34:	f04f 0a03 	mov.w	sl, #3
 8009a38:	e7b8      	b.n	80099ac <__gethex+0x1f8>
 8009a3a:	da0a      	bge.n	8009a52 <__gethex+0x29e>
 8009a3c:	1a37      	subs	r7, r6, r0
 8009a3e:	4621      	mov	r1, r4
 8009a40:	ee18 0a10 	vmov	r0, s16
 8009a44:	463a      	mov	r2, r7
 8009a46:	f000 fc45 	bl	800a2d4 <__lshift>
 8009a4a:	1bed      	subs	r5, r5, r7
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	f100 0914 	add.w	r9, r0, #20
 8009a52:	f04f 0a00 	mov.w	sl, #0
 8009a56:	e7ae      	b.n	80099b6 <__gethex+0x202>
 8009a58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009a5c:	42a8      	cmp	r0, r5
 8009a5e:	dd72      	ble.n	8009b46 <__gethex+0x392>
 8009a60:	1b45      	subs	r5, r0, r5
 8009a62:	42ae      	cmp	r6, r5
 8009a64:	dc36      	bgt.n	8009ad4 <__gethex+0x320>
 8009a66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d02a      	beq.n	8009ac4 <__gethex+0x310>
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d02c      	beq.n	8009acc <__gethex+0x318>
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d11c      	bne.n	8009ab0 <__gethex+0x2fc>
 8009a76:	42ae      	cmp	r6, r5
 8009a78:	d11a      	bne.n	8009ab0 <__gethex+0x2fc>
 8009a7a:	2e01      	cmp	r6, #1
 8009a7c:	d112      	bne.n	8009aa4 <__gethex+0x2f0>
 8009a7e:	9a04      	ldr	r2, [sp, #16]
 8009a80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	2301      	movs	r3, #1
 8009a88:	6123      	str	r3, [r4, #16]
 8009a8a:	f8c9 3000 	str.w	r3, [r9]
 8009a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a90:	2762      	movs	r7, #98	; 0x62
 8009a92:	601c      	str	r4, [r3, #0]
 8009a94:	e723      	b.n	80098de <__gethex+0x12a>
 8009a96:	bf00      	nop
 8009a98:	0800bb40 	.word	0x0800bb40
 8009a9c:	0800bac8 	.word	0x0800bac8
 8009aa0:	0800bad9 	.word	0x0800bad9
 8009aa4:	1e71      	subs	r1, r6, #1
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f000 fe55 	bl	800a756 <__any_on>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d1e6      	bne.n	8009a7e <__gethex+0x2ca>
 8009ab0:	ee18 0a10 	vmov	r0, s16
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	f000 f9f1 	bl	8009e9c <_Bfree>
 8009aba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009abc:	2300      	movs	r3, #0
 8009abe:	6013      	str	r3, [r2, #0]
 8009ac0:	2750      	movs	r7, #80	; 0x50
 8009ac2:	e70c      	b.n	80098de <__gethex+0x12a>
 8009ac4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1f2      	bne.n	8009ab0 <__gethex+0x2fc>
 8009aca:	e7d8      	b.n	8009a7e <__gethex+0x2ca>
 8009acc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1d5      	bne.n	8009a7e <__gethex+0x2ca>
 8009ad2:	e7ed      	b.n	8009ab0 <__gethex+0x2fc>
 8009ad4:	1e6f      	subs	r7, r5, #1
 8009ad6:	f1ba 0f00 	cmp.w	sl, #0
 8009ada:	d131      	bne.n	8009b40 <__gethex+0x38c>
 8009adc:	b127      	cbz	r7, 8009ae8 <__gethex+0x334>
 8009ade:	4639      	mov	r1, r7
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f000 fe38 	bl	800a756 <__any_on>
 8009ae6:	4682      	mov	sl, r0
 8009ae8:	117b      	asrs	r3, r7, #5
 8009aea:	2101      	movs	r1, #1
 8009aec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009af0:	f007 071f 	and.w	r7, r7, #31
 8009af4:	fa01 f707 	lsl.w	r7, r1, r7
 8009af8:	421f      	tst	r7, r3
 8009afa:	4629      	mov	r1, r5
 8009afc:	4620      	mov	r0, r4
 8009afe:	bf18      	it	ne
 8009b00:	f04a 0a02 	orrne.w	sl, sl, #2
 8009b04:	1b76      	subs	r6, r6, r5
 8009b06:	f7ff fded 	bl	80096e4 <rshift>
 8009b0a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009b0e:	2702      	movs	r7, #2
 8009b10:	f1ba 0f00 	cmp.w	sl, #0
 8009b14:	d048      	beq.n	8009ba8 <__gethex+0x3f4>
 8009b16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d015      	beq.n	8009b4a <__gethex+0x396>
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d017      	beq.n	8009b52 <__gethex+0x39e>
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d109      	bne.n	8009b3a <__gethex+0x386>
 8009b26:	f01a 0f02 	tst.w	sl, #2
 8009b2a:	d006      	beq.n	8009b3a <__gethex+0x386>
 8009b2c:	f8d9 0000 	ldr.w	r0, [r9]
 8009b30:	ea4a 0a00 	orr.w	sl, sl, r0
 8009b34:	f01a 0f01 	tst.w	sl, #1
 8009b38:	d10e      	bne.n	8009b58 <__gethex+0x3a4>
 8009b3a:	f047 0710 	orr.w	r7, r7, #16
 8009b3e:	e033      	b.n	8009ba8 <__gethex+0x3f4>
 8009b40:	f04f 0a01 	mov.w	sl, #1
 8009b44:	e7d0      	b.n	8009ae8 <__gethex+0x334>
 8009b46:	2701      	movs	r7, #1
 8009b48:	e7e2      	b.n	8009b10 <__gethex+0x35c>
 8009b4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b4c:	f1c3 0301 	rsb	r3, r3, #1
 8009b50:	9315      	str	r3, [sp, #84]	; 0x54
 8009b52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d0f0      	beq.n	8009b3a <__gethex+0x386>
 8009b58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b5c:	f104 0314 	add.w	r3, r4, #20
 8009b60:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b64:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b68:	f04f 0c00 	mov.w	ip, #0
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b72:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b76:	d01c      	beq.n	8009bb2 <__gethex+0x3fe>
 8009b78:	3201      	adds	r2, #1
 8009b7a:	6002      	str	r2, [r0, #0]
 8009b7c:	2f02      	cmp	r7, #2
 8009b7e:	f104 0314 	add.w	r3, r4, #20
 8009b82:	d13f      	bne.n	8009c04 <__gethex+0x450>
 8009b84:	f8d8 2000 	ldr.w	r2, [r8]
 8009b88:	3a01      	subs	r2, #1
 8009b8a:	42b2      	cmp	r2, r6
 8009b8c:	d10a      	bne.n	8009ba4 <__gethex+0x3f0>
 8009b8e:	1171      	asrs	r1, r6, #5
 8009b90:	2201      	movs	r2, #1
 8009b92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b96:	f006 061f 	and.w	r6, r6, #31
 8009b9a:	fa02 f606 	lsl.w	r6, r2, r6
 8009b9e:	421e      	tst	r6, r3
 8009ba0:	bf18      	it	ne
 8009ba2:	4617      	movne	r7, r2
 8009ba4:	f047 0720 	orr.w	r7, r7, #32
 8009ba8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009baa:	601c      	str	r4, [r3, #0]
 8009bac:	9b04      	ldr	r3, [sp, #16]
 8009bae:	601d      	str	r5, [r3, #0]
 8009bb0:	e695      	b.n	80098de <__gethex+0x12a>
 8009bb2:	4299      	cmp	r1, r3
 8009bb4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009bb8:	d8d8      	bhi.n	8009b6c <__gethex+0x3b8>
 8009bba:	68a3      	ldr	r3, [r4, #8]
 8009bbc:	459b      	cmp	fp, r3
 8009bbe:	db19      	blt.n	8009bf4 <__gethex+0x440>
 8009bc0:	6861      	ldr	r1, [r4, #4]
 8009bc2:	ee18 0a10 	vmov	r0, s16
 8009bc6:	3101      	adds	r1, #1
 8009bc8:	f000 f928 	bl	8009e1c <_Balloc>
 8009bcc:	4681      	mov	r9, r0
 8009bce:	b918      	cbnz	r0, 8009bd8 <__gethex+0x424>
 8009bd0:	4b1a      	ldr	r3, [pc, #104]	; (8009c3c <__gethex+0x488>)
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	2184      	movs	r1, #132	; 0x84
 8009bd6:	e6a8      	b.n	800992a <__gethex+0x176>
 8009bd8:	6922      	ldr	r2, [r4, #16]
 8009bda:	3202      	adds	r2, #2
 8009bdc:	f104 010c 	add.w	r1, r4, #12
 8009be0:	0092      	lsls	r2, r2, #2
 8009be2:	300c      	adds	r0, #12
 8009be4:	f000 f90c 	bl	8009e00 <memcpy>
 8009be8:	4621      	mov	r1, r4
 8009bea:	ee18 0a10 	vmov	r0, s16
 8009bee:	f000 f955 	bl	8009e9c <_Bfree>
 8009bf2:	464c      	mov	r4, r9
 8009bf4:	6923      	ldr	r3, [r4, #16]
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009bfc:	6122      	str	r2, [r4, #16]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	615a      	str	r2, [r3, #20]
 8009c02:	e7bb      	b.n	8009b7c <__gethex+0x3c8>
 8009c04:	6922      	ldr	r2, [r4, #16]
 8009c06:	455a      	cmp	r2, fp
 8009c08:	dd0b      	ble.n	8009c22 <__gethex+0x46e>
 8009c0a:	2101      	movs	r1, #1
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	f7ff fd69 	bl	80096e4 <rshift>
 8009c12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c16:	3501      	adds	r5, #1
 8009c18:	42ab      	cmp	r3, r5
 8009c1a:	f6ff aed0 	blt.w	80099be <__gethex+0x20a>
 8009c1e:	2701      	movs	r7, #1
 8009c20:	e7c0      	b.n	8009ba4 <__gethex+0x3f0>
 8009c22:	f016 061f 	ands.w	r6, r6, #31
 8009c26:	d0fa      	beq.n	8009c1e <__gethex+0x46a>
 8009c28:	4453      	add	r3, sl
 8009c2a:	f1c6 0620 	rsb	r6, r6, #32
 8009c2e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009c32:	f000 f9e5 	bl	800a000 <__hi0bits>
 8009c36:	42b0      	cmp	r0, r6
 8009c38:	dbe7      	blt.n	8009c0a <__gethex+0x456>
 8009c3a:	e7f0      	b.n	8009c1e <__gethex+0x46a>
 8009c3c:	0800bac8 	.word	0x0800bac8

08009c40 <L_shift>:
 8009c40:	f1c2 0208 	rsb	r2, r2, #8
 8009c44:	0092      	lsls	r2, r2, #2
 8009c46:	b570      	push	{r4, r5, r6, lr}
 8009c48:	f1c2 0620 	rsb	r6, r2, #32
 8009c4c:	6843      	ldr	r3, [r0, #4]
 8009c4e:	6804      	ldr	r4, [r0, #0]
 8009c50:	fa03 f506 	lsl.w	r5, r3, r6
 8009c54:	432c      	orrs	r4, r5
 8009c56:	40d3      	lsrs	r3, r2
 8009c58:	6004      	str	r4, [r0, #0]
 8009c5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c5e:	4288      	cmp	r0, r1
 8009c60:	d3f4      	bcc.n	8009c4c <L_shift+0xc>
 8009c62:	bd70      	pop	{r4, r5, r6, pc}

08009c64 <__match>:
 8009c64:	b530      	push	{r4, r5, lr}
 8009c66:	6803      	ldr	r3, [r0, #0]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c6e:	b914      	cbnz	r4, 8009c76 <__match+0x12>
 8009c70:	6003      	str	r3, [r0, #0]
 8009c72:	2001      	movs	r0, #1
 8009c74:	bd30      	pop	{r4, r5, pc}
 8009c76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009c7e:	2d19      	cmp	r5, #25
 8009c80:	bf98      	it	ls
 8009c82:	3220      	addls	r2, #32
 8009c84:	42a2      	cmp	r2, r4
 8009c86:	d0f0      	beq.n	8009c6a <__match+0x6>
 8009c88:	2000      	movs	r0, #0
 8009c8a:	e7f3      	b.n	8009c74 <__match+0x10>

08009c8c <__hexnan>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	680b      	ldr	r3, [r1, #0]
 8009c92:	115e      	asrs	r6, r3, #5
 8009c94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c98:	f013 031f 	ands.w	r3, r3, #31
 8009c9c:	b087      	sub	sp, #28
 8009c9e:	bf18      	it	ne
 8009ca0:	3604      	addne	r6, #4
 8009ca2:	2500      	movs	r5, #0
 8009ca4:	1f37      	subs	r7, r6, #4
 8009ca6:	4690      	mov	r8, r2
 8009ca8:	6802      	ldr	r2, [r0, #0]
 8009caa:	9301      	str	r3, [sp, #4]
 8009cac:	4682      	mov	sl, r0
 8009cae:	f846 5c04 	str.w	r5, [r6, #-4]
 8009cb2:	46b9      	mov	r9, r7
 8009cb4:	463c      	mov	r4, r7
 8009cb6:	9502      	str	r5, [sp, #8]
 8009cb8:	46ab      	mov	fp, r5
 8009cba:	7851      	ldrb	r1, [r2, #1]
 8009cbc:	1c53      	adds	r3, r2, #1
 8009cbe:	9303      	str	r3, [sp, #12]
 8009cc0:	b341      	cbz	r1, 8009d14 <__hexnan+0x88>
 8009cc2:	4608      	mov	r0, r1
 8009cc4:	9205      	str	r2, [sp, #20]
 8009cc6:	9104      	str	r1, [sp, #16]
 8009cc8:	f7ff fd5e 	bl	8009788 <__hexdig_fun>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d14f      	bne.n	8009d70 <__hexnan+0xe4>
 8009cd0:	9904      	ldr	r1, [sp, #16]
 8009cd2:	9a05      	ldr	r2, [sp, #20]
 8009cd4:	2920      	cmp	r1, #32
 8009cd6:	d818      	bhi.n	8009d0a <__hexnan+0x7e>
 8009cd8:	9b02      	ldr	r3, [sp, #8]
 8009cda:	459b      	cmp	fp, r3
 8009cdc:	dd13      	ble.n	8009d06 <__hexnan+0x7a>
 8009cde:	454c      	cmp	r4, r9
 8009ce0:	d206      	bcs.n	8009cf0 <__hexnan+0x64>
 8009ce2:	2d07      	cmp	r5, #7
 8009ce4:	dc04      	bgt.n	8009cf0 <__hexnan+0x64>
 8009ce6:	462a      	mov	r2, r5
 8009ce8:	4649      	mov	r1, r9
 8009cea:	4620      	mov	r0, r4
 8009cec:	f7ff ffa8 	bl	8009c40 <L_shift>
 8009cf0:	4544      	cmp	r4, r8
 8009cf2:	d950      	bls.n	8009d96 <__hexnan+0x10a>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f1a4 0904 	sub.w	r9, r4, #4
 8009cfa:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cfe:	f8cd b008 	str.w	fp, [sp, #8]
 8009d02:	464c      	mov	r4, r9
 8009d04:	461d      	mov	r5, r3
 8009d06:	9a03      	ldr	r2, [sp, #12]
 8009d08:	e7d7      	b.n	8009cba <__hexnan+0x2e>
 8009d0a:	2929      	cmp	r1, #41	; 0x29
 8009d0c:	d156      	bne.n	8009dbc <__hexnan+0x130>
 8009d0e:	3202      	adds	r2, #2
 8009d10:	f8ca 2000 	str.w	r2, [sl]
 8009d14:	f1bb 0f00 	cmp.w	fp, #0
 8009d18:	d050      	beq.n	8009dbc <__hexnan+0x130>
 8009d1a:	454c      	cmp	r4, r9
 8009d1c:	d206      	bcs.n	8009d2c <__hexnan+0xa0>
 8009d1e:	2d07      	cmp	r5, #7
 8009d20:	dc04      	bgt.n	8009d2c <__hexnan+0xa0>
 8009d22:	462a      	mov	r2, r5
 8009d24:	4649      	mov	r1, r9
 8009d26:	4620      	mov	r0, r4
 8009d28:	f7ff ff8a 	bl	8009c40 <L_shift>
 8009d2c:	4544      	cmp	r4, r8
 8009d2e:	d934      	bls.n	8009d9a <__hexnan+0x10e>
 8009d30:	f1a8 0204 	sub.w	r2, r8, #4
 8009d34:	4623      	mov	r3, r4
 8009d36:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d3a:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d3e:	429f      	cmp	r7, r3
 8009d40:	d2f9      	bcs.n	8009d36 <__hexnan+0xaa>
 8009d42:	1b3b      	subs	r3, r7, r4
 8009d44:	f023 0303 	bic.w	r3, r3, #3
 8009d48:	3304      	adds	r3, #4
 8009d4a:	3401      	adds	r4, #1
 8009d4c:	3e03      	subs	r6, #3
 8009d4e:	42b4      	cmp	r4, r6
 8009d50:	bf88      	it	hi
 8009d52:	2304      	movhi	r3, #4
 8009d54:	4443      	add	r3, r8
 8009d56:	2200      	movs	r2, #0
 8009d58:	f843 2b04 	str.w	r2, [r3], #4
 8009d5c:	429f      	cmp	r7, r3
 8009d5e:	d2fb      	bcs.n	8009d58 <__hexnan+0xcc>
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	b91b      	cbnz	r3, 8009d6c <__hexnan+0xe0>
 8009d64:	4547      	cmp	r7, r8
 8009d66:	d127      	bne.n	8009db8 <__hexnan+0x12c>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	603b      	str	r3, [r7, #0]
 8009d6c:	2005      	movs	r0, #5
 8009d6e:	e026      	b.n	8009dbe <__hexnan+0x132>
 8009d70:	3501      	adds	r5, #1
 8009d72:	2d08      	cmp	r5, #8
 8009d74:	f10b 0b01 	add.w	fp, fp, #1
 8009d78:	dd06      	ble.n	8009d88 <__hexnan+0xfc>
 8009d7a:	4544      	cmp	r4, r8
 8009d7c:	d9c3      	bls.n	8009d06 <__hexnan+0x7a>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d84:	2501      	movs	r5, #1
 8009d86:	3c04      	subs	r4, #4
 8009d88:	6822      	ldr	r2, [r4, #0]
 8009d8a:	f000 000f 	and.w	r0, r0, #15
 8009d8e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009d92:	6022      	str	r2, [r4, #0]
 8009d94:	e7b7      	b.n	8009d06 <__hexnan+0x7a>
 8009d96:	2508      	movs	r5, #8
 8009d98:	e7b5      	b.n	8009d06 <__hexnan+0x7a>
 8009d9a:	9b01      	ldr	r3, [sp, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d0df      	beq.n	8009d60 <__hexnan+0xd4>
 8009da0:	f04f 32ff 	mov.w	r2, #4294967295
 8009da4:	f1c3 0320 	rsb	r3, r3, #32
 8009da8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009db0:	401a      	ands	r2, r3
 8009db2:	f846 2c04 	str.w	r2, [r6, #-4]
 8009db6:	e7d3      	b.n	8009d60 <__hexnan+0xd4>
 8009db8:	3f04      	subs	r7, #4
 8009dba:	e7d1      	b.n	8009d60 <__hexnan+0xd4>
 8009dbc:	2004      	movs	r0, #4
 8009dbe:	b007      	add	sp, #28
 8009dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009dc4 <_localeconv_r>:
 8009dc4:	4800      	ldr	r0, [pc, #0]	; (8009dc8 <_localeconv_r+0x4>)
 8009dc6:	4770      	bx	lr
 8009dc8:	2000017c 	.word	0x2000017c

08009dcc <malloc>:
 8009dcc:	4b02      	ldr	r3, [pc, #8]	; (8009dd8 <malloc+0xc>)
 8009dce:	4601      	mov	r1, r0
 8009dd0:	6818      	ldr	r0, [r3, #0]
 8009dd2:	f000 bd63 	b.w	800a89c <_malloc_r>
 8009dd6:	bf00      	nop
 8009dd8:	20000024 	.word	0x20000024

08009ddc <__ascii_mbtowc>:
 8009ddc:	b082      	sub	sp, #8
 8009dde:	b901      	cbnz	r1, 8009de2 <__ascii_mbtowc+0x6>
 8009de0:	a901      	add	r1, sp, #4
 8009de2:	b142      	cbz	r2, 8009df6 <__ascii_mbtowc+0x1a>
 8009de4:	b14b      	cbz	r3, 8009dfa <__ascii_mbtowc+0x1e>
 8009de6:	7813      	ldrb	r3, [r2, #0]
 8009de8:	600b      	str	r3, [r1, #0]
 8009dea:	7812      	ldrb	r2, [r2, #0]
 8009dec:	1e10      	subs	r0, r2, #0
 8009dee:	bf18      	it	ne
 8009df0:	2001      	movne	r0, #1
 8009df2:	b002      	add	sp, #8
 8009df4:	4770      	bx	lr
 8009df6:	4610      	mov	r0, r2
 8009df8:	e7fb      	b.n	8009df2 <__ascii_mbtowc+0x16>
 8009dfa:	f06f 0001 	mvn.w	r0, #1
 8009dfe:	e7f8      	b.n	8009df2 <__ascii_mbtowc+0x16>

08009e00 <memcpy>:
 8009e00:	440a      	add	r2, r1
 8009e02:	4291      	cmp	r1, r2
 8009e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e08:	d100      	bne.n	8009e0c <memcpy+0xc>
 8009e0a:	4770      	bx	lr
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e16:	4291      	cmp	r1, r2
 8009e18:	d1f9      	bne.n	8009e0e <memcpy+0xe>
 8009e1a:	bd10      	pop	{r4, pc}

08009e1c <_Balloc>:
 8009e1c:	b570      	push	{r4, r5, r6, lr}
 8009e1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e20:	4604      	mov	r4, r0
 8009e22:	460d      	mov	r5, r1
 8009e24:	b976      	cbnz	r6, 8009e44 <_Balloc+0x28>
 8009e26:	2010      	movs	r0, #16
 8009e28:	f7ff ffd0 	bl	8009dcc <malloc>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	6260      	str	r0, [r4, #36]	; 0x24
 8009e30:	b920      	cbnz	r0, 8009e3c <_Balloc+0x20>
 8009e32:	4b18      	ldr	r3, [pc, #96]	; (8009e94 <_Balloc+0x78>)
 8009e34:	4818      	ldr	r0, [pc, #96]	; (8009e98 <_Balloc+0x7c>)
 8009e36:	2166      	movs	r1, #102	; 0x66
 8009e38:	f000 ff3c 	bl	800acb4 <__assert_func>
 8009e3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e40:	6006      	str	r6, [r0, #0]
 8009e42:	60c6      	str	r6, [r0, #12]
 8009e44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e46:	68f3      	ldr	r3, [r6, #12]
 8009e48:	b183      	cbz	r3, 8009e6c <_Balloc+0x50>
 8009e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e52:	b9b8      	cbnz	r0, 8009e84 <_Balloc+0x68>
 8009e54:	2101      	movs	r1, #1
 8009e56:	fa01 f605 	lsl.w	r6, r1, r5
 8009e5a:	1d72      	adds	r2, r6, #5
 8009e5c:	0092      	lsls	r2, r2, #2
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f000 fc9a 	bl	800a798 <_calloc_r>
 8009e64:	b160      	cbz	r0, 8009e80 <_Balloc+0x64>
 8009e66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e6a:	e00e      	b.n	8009e8a <_Balloc+0x6e>
 8009e6c:	2221      	movs	r2, #33	; 0x21
 8009e6e:	2104      	movs	r1, #4
 8009e70:	4620      	mov	r0, r4
 8009e72:	f000 fc91 	bl	800a798 <_calloc_r>
 8009e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e78:	60f0      	str	r0, [r6, #12]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1e4      	bne.n	8009e4a <_Balloc+0x2e>
 8009e80:	2000      	movs	r0, #0
 8009e82:	bd70      	pop	{r4, r5, r6, pc}
 8009e84:	6802      	ldr	r2, [r0, #0]
 8009e86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e90:	e7f7      	b.n	8009e82 <_Balloc+0x66>
 8009e92:	bf00      	nop
 8009e94:	0800ba56 	.word	0x0800ba56
 8009e98:	0800bb54 	.word	0x0800bb54

08009e9c <_Bfree>:
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	b976      	cbnz	r6, 8009ec4 <_Bfree+0x28>
 8009ea6:	2010      	movs	r0, #16
 8009ea8:	f7ff ff90 	bl	8009dcc <malloc>
 8009eac:	4602      	mov	r2, r0
 8009eae:	6268      	str	r0, [r5, #36]	; 0x24
 8009eb0:	b920      	cbnz	r0, 8009ebc <_Bfree+0x20>
 8009eb2:	4b09      	ldr	r3, [pc, #36]	; (8009ed8 <_Bfree+0x3c>)
 8009eb4:	4809      	ldr	r0, [pc, #36]	; (8009edc <_Bfree+0x40>)
 8009eb6:	218a      	movs	r1, #138	; 0x8a
 8009eb8:	f000 fefc 	bl	800acb4 <__assert_func>
 8009ebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ec0:	6006      	str	r6, [r0, #0]
 8009ec2:	60c6      	str	r6, [r0, #12]
 8009ec4:	b13c      	cbz	r4, 8009ed6 <_Bfree+0x3a>
 8009ec6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ec8:	6862      	ldr	r2, [r4, #4]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ed0:	6021      	str	r1, [r4, #0]
 8009ed2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}
 8009ed8:	0800ba56 	.word	0x0800ba56
 8009edc:	0800bb54 	.word	0x0800bb54

08009ee0 <__multadd>:
 8009ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee4:	690d      	ldr	r5, [r1, #16]
 8009ee6:	4607      	mov	r7, r0
 8009ee8:	460c      	mov	r4, r1
 8009eea:	461e      	mov	r6, r3
 8009eec:	f101 0c14 	add.w	ip, r1, #20
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	f8dc 3000 	ldr.w	r3, [ip]
 8009ef6:	b299      	uxth	r1, r3
 8009ef8:	fb02 6101 	mla	r1, r2, r1, r6
 8009efc:	0c1e      	lsrs	r6, r3, #16
 8009efe:	0c0b      	lsrs	r3, r1, #16
 8009f00:	fb02 3306 	mla	r3, r2, r6, r3
 8009f04:	b289      	uxth	r1, r1
 8009f06:	3001      	adds	r0, #1
 8009f08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f0c:	4285      	cmp	r5, r0
 8009f0e:	f84c 1b04 	str.w	r1, [ip], #4
 8009f12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f16:	dcec      	bgt.n	8009ef2 <__multadd+0x12>
 8009f18:	b30e      	cbz	r6, 8009f5e <__multadd+0x7e>
 8009f1a:	68a3      	ldr	r3, [r4, #8]
 8009f1c:	42ab      	cmp	r3, r5
 8009f1e:	dc19      	bgt.n	8009f54 <__multadd+0x74>
 8009f20:	6861      	ldr	r1, [r4, #4]
 8009f22:	4638      	mov	r0, r7
 8009f24:	3101      	adds	r1, #1
 8009f26:	f7ff ff79 	bl	8009e1c <_Balloc>
 8009f2a:	4680      	mov	r8, r0
 8009f2c:	b928      	cbnz	r0, 8009f3a <__multadd+0x5a>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	4b0c      	ldr	r3, [pc, #48]	; (8009f64 <__multadd+0x84>)
 8009f32:	480d      	ldr	r0, [pc, #52]	; (8009f68 <__multadd+0x88>)
 8009f34:	21b5      	movs	r1, #181	; 0xb5
 8009f36:	f000 febd 	bl	800acb4 <__assert_func>
 8009f3a:	6922      	ldr	r2, [r4, #16]
 8009f3c:	3202      	adds	r2, #2
 8009f3e:	f104 010c 	add.w	r1, r4, #12
 8009f42:	0092      	lsls	r2, r2, #2
 8009f44:	300c      	adds	r0, #12
 8009f46:	f7ff ff5b 	bl	8009e00 <memcpy>
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	f7ff ffa5 	bl	8009e9c <_Bfree>
 8009f52:	4644      	mov	r4, r8
 8009f54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f58:	3501      	adds	r5, #1
 8009f5a:	615e      	str	r6, [r3, #20]
 8009f5c:	6125      	str	r5, [r4, #16]
 8009f5e:	4620      	mov	r0, r4
 8009f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f64:	0800bac8 	.word	0x0800bac8
 8009f68:	0800bb54 	.word	0x0800bb54

08009f6c <__s2b>:
 8009f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f70:	460c      	mov	r4, r1
 8009f72:	4615      	mov	r5, r2
 8009f74:	461f      	mov	r7, r3
 8009f76:	2209      	movs	r2, #9
 8009f78:	3308      	adds	r3, #8
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f80:	2100      	movs	r1, #0
 8009f82:	2201      	movs	r2, #1
 8009f84:	429a      	cmp	r2, r3
 8009f86:	db09      	blt.n	8009f9c <__s2b+0x30>
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7ff ff47 	bl	8009e1c <_Balloc>
 8009f8e:	b940      	cbnz	r0, 8009fa2 <__s2b+0x36>
 8009f90:	4602      	mov	r2, r0
 8009f92:	4b19      	ldr	r3, [pc, #100]	; (8009ff8 <__s2b+0x8c>)
 8009f94:	4819      	ldr	r0, [pc, #100]	; (8009ffc <__s2b+0x90>)
 8009f96:	21ce      	movs	r1, #206	; 0xce
 8009f98:	f000 fe8c 	bl	800acb4 <__assert_func>
 8009f9c:	0052      	lsls	r2, r2, #1
 8009f9e:	3101      	adds	r1, #1
 8009fa0:	e7f0      	b.n	8009f84 <__s2b+0x18>
 8009fa2:	9b08      	ldr	r3, [sp, #32]
 8009fa4:	6143      	str	r3, [r0, #20]
 8009fa6:	2d09      	cmp	r5, #9
 8009fa8:	f04f 0301 	mov.w	r3, #1
 8009fac:	6103      	str	r3, [r0, #16]
 8009fae:	dd16      	ble.n	8009fde <__s2b+0x72>
 8009fb0:	f104 0909 	add.w	r9, r4, #9
 8009fb4:	46c8      	mov	r8, r9
 8009fb6:	442c      	add	r4, r5
 8009fb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009fbc:	4601      	mov	r1, r0
 8009fbe:	3b30      	subs	r3, #48	; 0x30
 8009fc0:	220a      	movs	r2, #10
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	f7ff ff8c 	bl	8009ee0 <__multadd>
 8009fc8:	45a0      	cmp	r8, r4
 8009fca:	d1f5      	bne.n	8009fb8 <__s2b+0x4c>
 8009fcc:	f1a5 0408 	sub.w	r4, r5, #8
 8009fd0:	444c      	add	r4, r9
 8009fd2:	1b2d      	subs	r5, r5, r4
 8009fd4:	1963      	adds	r3, r4, r5
 8009fd6:	42bb      	cmp	r3, r7
 8009fd8:	db04      	blt.n	8009fe4 <__s2b+0x78>
 8009fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fde:	340a      	adds	r4, #10
 8009fe0:	2509      	movs	r5, #9
 8009fe2:	e7f6      	b.n	8009fd2 <__s2b+0x66>
 8009fe4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009fe8:	4601      	mov	r1, r0
 8009fea:	3b30      	subs	r3, #48	; 0x30
 8009fec:	220a      	movs	r2, #10
 8009fee:	4630      	mov	r0, r6
 8009ff0:	f7ff ff76 	bl	8009ee0 <__multadd>
 8009ff4:	e7ee      	b.n	8009fd4 <__s2b+0x68>
 8009ff6:	bf00      	nop
 8009ff8:	0800bac8 	.word	0x0800bac8
 8009ffc:	0800bb54 	.word	0x0800bb54

0800a000 <__hi0bits>:
 800a000:	0c03      	lsrs	r3, r0, #16
 800a002:	041b      	lsls	r3, r3, #16
 800a004:	b9d3      	cbnz	r3, 800a03c <__hi0bits+0x3c>
 800a006:	0400      	lsls	r0, r0, #16
 800a008:	2310      	movs	r3, #16
 800a00a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a00e:	bf04      	itt	eq
 800a010:	0200      	lsleq	r0, r0, #8
 800a012:	3308      	addeq	r3, #8
 800a014:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a018:	bf04      	itt	eq
 800a01a:	0100      	lsleq	r0, r0, #4
 800a01c:	3304      	addeq	r3, #4
 800a01e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a022:	bf04      	itt	eq
 800a024:	0080      	lsleq	r0, r0, #2
 800a026:	3302      	addeq	r3, #2
 800a028:	2800      	cmp	r0, #0
 800a02a:	db05      	blt.n	800a038 <__hi0bits+0x38>
 800a02c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a030:	f103 0301 	add.w	r3, r3, #1
 800a034:	bf08      	it	eq
 800a036:	2320      	moveq	r3, #32
 800a038:	4618      	mov	r0, r3
 800a03a:	4770      	bx	lr
 800a03c:	2300      	movs	r3, #0
 800a03e:	e7e4      	b.n	800a00a <__hi0bits+0xa>

0800a040 <__lo0bits>:
 800a040:	6803      	ldr	r3, [r0, #0]
 800a042:	f013 0207 	ands.w	r2, r3, #7
 800a046:	4601      	mov	r1, r0
 800a048:	d00b      	beq.n	800a062 <__lo0bits+0x22>
 800a04a:	07da      	lsls	r2, r3, #31
 800a04c:	d423      	bmi.n	800a096 <__lo0bits+0x56>
 800a04e:	0798      	lsls	r0, r3, #30
 800a050:	bf49      	itett	mi
 800a052:	085b      	lsrmi	r3, r3, #1
 800a054:	089b      	lsrpl	r3, r3, #2
 800a056:	2001      	movmi	r0, #1
 800a058:	600b      	strmi	r3, [r1, #0]
 800a05a:	bf5c      	itt	pl
 800a05c:	600b      	strpl	r3, [r1, #0]
 800a05e:	2002      	movpl	r0, #2
 800a060:	4770      	bx	lr
 800a062:	b298      	uxth	r0, r3
 800a064:	b9a8      	cbnz	r0, 800a092 <__lo0bits+0x52>
 800a066:	0c1b      	lsrs	r3, r3, #16
 800a068:	2010      	movs	r0, #16
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	b90a      	cbnz	r2, 800a072 <__lo0bits+0x32>
 800a06e:	3008      	adds	r0, #8
 800a070:	0a1b      	lsrs	r3, r3, #8
 800a072:	071a      	lsls	r2, r3, #28
 800a074:	bf04      	itt	eq
 800a076:	091b      	lsreq	r3, r3, #4
 800a078:	3004      	addeq	r0, #4
 800a07a:	079a      	lsls	r2, r3, #30
 800a07c:	bf04      	itt	eq
 800a07e:	089b      	lsreq	r3, r3, #2
 800a080:	3002      	addeq	r0, #2
 800a082:	07da      	lsls	r2, r3, #31
 800a084:	d403      	bmi.n	800a08e <__lo0bits+0x4e>
 800a086:	085b      	lsrs	r3, r3, #1
 800a088:	f100 0001 	add.w	r0, r0, #1
 800a08c:	d005      	beq.n	800a09a <__lo0bits+0x5a>
 800a08e:	600b      	str	r3, [r1, #0]
 800a090:	4770      	bx	lr
 800a092:	4610      	mov	r0, r2
 800a094:	e7e9      	b.n	800a06a <__lo0bits+0x2a>
 800a096:	2000      	movs	r0, #0
 800a098:	4770      	bx	lr
 800a09a:	2020      	movs	r0, #32
 800a09c:	4770      	bx	lr
	...

0800a0a0 <__i2b>:
 800a0a0:	b510      	push	{r4, lr}
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	f7ff feb9 	bl	8009e1c <_Balloc>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	b928      	cbnz	r0, 800a0ba <__i2b+0x1a>
 800a0ae:	4b05      	ldr	r3, [pc, #20]	; (800a0c4 <__i2b+0x24>)
 800a0b0:	4805      	ldr	r0, [pc, #20]	; (800a0c8 <__i2b+0x28>)
 800a0b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a0b6:	f000 fdfd 	bl	800acb4 <__assert_func>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	6144      	str	r4, [r0, #20]
 800a0be:	6103      	str	r3, [r0, #16]
 800a0c0:	bd10      	pop	{r4, pc}
 800a0c2:	bf00      	nop
 800a0c4:	0800bac8 	.word	0x0800bac8
 800a0c8:	0800bb54 	.word	0x0800bb54

0800a0cc <__multiply>:
 800a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	4691      	mov	r9, r2
 800a0d2:	690a      	ldr	r2, [r1, #16]
 800a0d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	bfb8      	it	lt
 800a0dc:	460b      	movlt	r3, r1
 800a0de:	460c      	mov	r4, r1
 800a0e0:	bfbc      	itt	lt
 800a0e2:	464c      	movlt	r4, r9
 800a0e4:	4699      	movlt	r9, r3
 800a0e6:	6927      	ldr	r7, [r4, #16]
 800a0e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a0ec:	68a3      	ldr	r3, [r4, #8]
 800a0ee:	6861      	ldr	r1, [r4, #4]
 800a0f0:	eb07 060a 	add.w	r6, r7, sl
 800a0f4:	42b3      	cmp	r3, r6
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	bfb8      	it	lt
 800a0fa:	3101      	addlt	r1, #1
 800a0fc:	f7ff fe8e 	bl	8009e1c <_Balloc>
 800a100:	b930      	cbnz	r0, 800a110 <__multiply+0x44>
 800a102:	4602      	mov	r2, r0
 800a104:	4b44      	ldr	r3, [pc, #272]	; (800a218 <__multiply+0x14c>)
 800a106:	4845      	ldr	r0, [pc, #276]	; (800a21c <__multiply+0x150>)
 800a108:	f240 115d 	movw	r1, #349	; 0x15d
 800a10c:	f000 fdd2 	bl	800acb4 <__assert_func>
 800a110:	f100 0514 	add.w	r5, r0, #20
 800a114:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a118:	462b      	mov	r3, r5
 800a11a:	2200      	movs	r2, #0
 800a11c:	4543      	cmp	r3, r8
 800a11e:	d321      	bcc.n	800a164 <__multiply+0x98>
 800a120:	f104 0314 	add.w	r3, r4, #20
 800a124:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a128:	f109 0314 	add.w	r3, r9, #20
 800a12c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a130:	9202      	str	r2, [sp, #8]
 800a132:	1b3a      	subs	r2, r7, r4
 800a134:	3a15      	subs	r2, #21
 800a136:	f022 0203 	bic.w	r2, r2, #3
 800a13a:	3204      	adds	r2, #4
 800a13c:	f104 0115 	add.w	r1, r4, #21
 800a140:	428f      	cmp	r7, r1
 800a142:	bf38      	it	cc
 800a144:	2204      	movcc	r2, #4
 800a146:	9201      	str	r2, [sp, #4]
 800a148:	9a02      	ldr	r2, [sp, #8]
 800a14a:	9303      	str	r3, [sp, #12]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d80c      	bhi.n	800a16a <__multiply+0x9e>
 800a150:	2e00      	cmp	r6, #0
 800a152:	dd03      	ble.n	800a15c <__multiply+0x90>
 800a154:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d05a      	beq.n	800a212 <__multiply+0x146>
 800a15c:	6106      	str	r6, [r0, #16]
 800a15e:	b005      	add	sp, #20
 800a160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a164:	f843 2b04 	str.w	r2, [r3], #4
 800a168:	e7d8      	b.n	800a11c <__multiply+0x50>
 800a16a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a16e:	f1ba 0f00 	cmp.w	sl, #0
 800a172:	d024      	beq.n	800a1be <__multiply+0xf2>
 800a174:	f104 0e14 	add.w	lr, r4, #20
 800a178:	46a9      	mov	r9, r5
 800a17a:	f04f 0c00 	mov.w	ip, #0
 800a17e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a182:	f8d9 1000 	ldr.w	r1, [r9]
 800a186:	fa1f fb82 	uxth.w	fp, r2
 800a18a:	b289      	uxth	r1, r1
 800a18c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a190:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a194:	f8d9 2000 	ldr.w	r2, [r9]
 800a198:	4461      	add	r1, ip
 800a19a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a19e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1a6:	b289      	uxth	r1, r1
 800a1a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1ac:	4577      	cmp	r7, lr
 800a1ae:	f849 1b04 	str.w	r1, [r9], #4
 800a1b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1b6:	d8e2      	bhi.n	800a17e <__multiply+0xb2>
 800a1b8:	9a01      	ldr	r2, [sp, #4]
 800a1ba:	f845 c002 	str.w	ip, [r5, r2]
 800a1be:	9a03      	ldr	r2, [sp, #12]
 800a1c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	f1b9 0f00 	cmp.w	r9, #0
 800a1ca:	d020      	beq.n	800a20e <__multiply+0x142>
 800a1cc:	6829      	ldr	r1, [r5, #0]
 800a1ce:	f104 0c14 	add.w	ip, r4, #20
 800a1d2:	46ae      	mov	lr, r5
 800a1d4:	f04f 0a00 	mov.w	sl, #0
 800a1d8:	f8bc b000 	ldrh.w	fp, [ip]
 800a1dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1e0:	fb09 220b 	mla	r2, r9, fp, r2
 800a1e4:	4492      	add	sl, r2
 800a1e6:	b289      	uxth	r1, r1
 800a1e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a1ec:	f84e 1b04 	str.w	r1, [lr], #4
 800a1f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a1f4:	f8be 1000 	ldrh.w	r1, [lr]
 800a1f8:	0c12      	lsrs	r2, r2, #16
 800a1fa:	fb09 1102 	mla	r1, r9, r2, r1
 800a1fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a202:	4567      	cmp	r7, ip
 800a204:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a208:	d8e6      	bhi.n	800a1d8 <__multiply+0x10c>
 800a20a:	9a01      	ldr	r2, [sp, #4]
 800a20c:	50a9      	str	r1, [r5, r2]
 800a20e:	3504      	adds	r5, #4
 800a210:	e79a      	b.n	800a148 <__multiply+0x7c>
 800a212:	3e01      	subs	r6, #1
 800a214:	e79c      	b.n	800a150 <__multiply+0x84>
 800a216:	bf00      	nop
 800a218:	0800bac8 	.word	0x0800bac8
 800a21c:	0800bb54 	.word	0x0800bb54

0800a220 <__pow5mult>:
 800a220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a224:	4615      	mov	r5, r2
 800a226:	f012 0203 	ands.w	r2, r2, #3
 800a22a:	4606      	mov	r6, r0
 800a22c:	460f      	mov	r7, r1
 800a22e:	d007      	beq.n	800a240 <__pow5mult+0x20>
 800a230:	4c25      	ldr	r4, [pc, #148]	; (800a2c8 <__pow5mult+0xa8>)
 800a232:	3a01      	subs	r2, #1
 800a234:	2300      	movs	r3, #0
 800a236:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a23a:	f7ff fe51 	bl	8009ee0 <__multadd>
 800a23e:	4607      	mov	r7, r0
 800a240:	10ad      	asrs	r5, r5, #2
 800a242:	d03d      	beq.n	800a2c0 <__pow5mult+0xa0>
 800a244:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a246:	b97c      	cbnz	r4, 800a268 <__pow5mult+0x48>
 800a248:	2010      	movs	r0, #16
 800a24a:	f7ff fdbf 	bl	8009dcc <malloc>
 800a24e:	4602      	mov	r2, r0
 800a250:	6270      	str	r0, [r6, #36]	; 0x24
 800a252:	b928      	cbnz	r0, 800a260 <__pow5mult+0x40>
 800a254:	4b1d      	ldr	r3, [pc, #116]	; (800a2cc <__pow5mult+0xac>)
 800a256:	481e      	ldr	r0, [pc, #120]	; (800a2d0 <__pow5mult+0xb0>)
 800a258:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a25c:	f000 fd2a 	bl	800acb4 <__assert_func>
 800a260:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a264:	6004      	str	r4, [r0, #0]
 800a266:	60c4      	str	r4, [r0, #12]
 800a268:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a26c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a270:	b94c      	cbnz	r4, 800a286 <__pow5mult+0x66>
 800a272:	f240 2171 	movw	r1, #625	; 0x271
 800a276:	4630      	mov	r0, r6
 800a278:	f7ff ff12 	bl	800a0a0 <__i2b>
 800a27c:	2300      	movs	r3, #0
 800a27e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a282:	4604      	mov	r4, r0
 800a284:	6003      	str	r3, [r0, #0]
 800a286:	f04f 0900 	mov.w	r9, #0
 800a28a:	07eb      	lsls	r3, r5, #31
 800a28c:	d50a      	bpl.n	800a2a4 <__pow5mult+0x84>
 800a28e:	4639      	mov	r1, r7
 800a290:	4622      	mov	r2, r4
 800a292:	4630      	mov	r0, r6
 800a294:	f7ff ff1a 	bl	800a0cc <__multiply>
 800a298:	4639      	mov	r1, r7
 800a29a:	4680      	mov	r8, r0
 800a29c:	4630      	mov	r0, r6
 800a29e:	f7ff fdfd 	bl	8009e9c <_Bfree>
 800a2a2:	4647      	mov	r7, r8
 800a2a4:	106d      	asrs	r5, r5, #1
 800a2a6:	d00b      	beq.n	800a2c0 <__pow5mult+0xa0>
 800a2a8:	6820      	ldr	r0, [r4, #0]
 800a2aa:	b938      	cbnz	r0, 800a2bc <__pow5mult+0x9c>
 800a2ac:	4622      	mov	r2, r4
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f7ff ff0b 	bl	800a0cc <__multiply>
 800a2b6:	6020      	str	r0, [r4, #0]
 800a2b8:	f8c0 9000 	str.w	r9, [r0]
 800a2bc:	4604      	mov	r4, r0
 800a2be:	e7e4      	b.n	800a28a <__pow5mult+0x6a>
 800a2c0:	4638      	mov	r0, r7
 800a2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2c6:	bf00      	nop
 800a2c8:	0800bca0 	.word	0x0800bca0
 800a2cc:	0800ba56 	.word	0x0800ba56
 800a2d0:	0800bb54 	.word	0x0800bb54

0800a2d4 <__lshift>:
 800a2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d8:	460c      	mov	r4, r1
 800a2da:	6849      	ldr	r1, [r1, #4]
 800a2dc:	6923      	ldr	r3, [r4, #16]
 800a2de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2e2:	68a3      	ldr	r3, [r4, #8]
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	4691      	mov	r9, r2
 800a2e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2ec:	f108 0601 	add.w	r6, r8, #1
 800a2f0:	42b3      	cmp	r3, r6
 800a2f2:	db0b      	blt.n	800a30c <__lshift+0x38>
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	f7ff fd91 	bl	8009e1c <_Balloc>
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	b948      	cbnz	r0, 800a312 <__lshift+0x3e>
 800a2fe:	4602      	mov	r2, r0
 800a300:	4b2a      	ldr	r3, [pc, #168]	; (800a3ac <__lshift+0xd8>)
 800a302:	482b      	ldr	r0, [pc, #172]	; (800a3b0 <__lshift+0xdc>)
 800a304:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a308:	f000 fcd4 	bl	800acb4 <__assert_func>
 800a30c:	3101      	adds	r1, #1
 800a30e:	005b      	lsls	r3, r3, #1
 800a310:	e7ee      	b.n	800a2f0 <__lshift+0x1c>
 800a312:	2300      	movs	r3, #0
 800a314:	f100 0114 	add.w	r1, r0, #20
 800a318:	f100 0210 	add.w	r2, r0, #16
 800a31c:	4618      	mov	r0, r3
 800a31e:	4553      	cmp	r3, sl
 800a320:	db37      	blt.n	800a392 <__lshift+0xbe>
 800a322:	6920      	ldr	r0, [r4, #16]
 800a324:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a328:	f104 0314 	add.w	r3, r4, #20
 800a32c:	f019 091f 	ands.w	r9, r9, #31
 800a330:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a334:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a338:	d02f      	beq.n	800a39a <__lshift+0xc6>
 800a33a:	f1c9 0e20 	rsb	lr, r9, #32
 800a33e:	468a      	mov	sl, r1
 800a340:	f04f 0c00 	mov.w	ip, #0
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	fa02 f209 	lsl.w	r2, r2, r9
 800a34a:	ea42 020c 	orr.w	r2, r2, ip
 800a34e:	f84a 2b04 	str.w	r2, [sl], #4
 800a352:	f853 2b04 	ldr.w	r2, [r3], #4
 800a356:	4298      	cmp	r0, r3
 800a358:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a35c:	d8f2      	bhi.n	800a344 <__lshift+0x70>
 800a35e:	1b03      	subs	r3, r0, r4
 800a360:	3b15      	subs	r3, #21
 800a362:	f023 0303 	bic.w	r3, r3, #3
 800a366:	3304      	adds	r3, #4
 800a368:	f104 0215 	add.w	r2, r4, #21
 800a36c:	4290      	cmp	r0, r2
 800a36e:	bf38      	it	cc
 800a370:	2304      	movcc	r3, #4
 800a372:	f841 c003 	str.w	ip, [r1, r3]
 800a376:	f1bc 0f00 	cmp.w	ip, #0
 800a37a:	d001      	beq.n	800a380 <__lshift+0xac>
 800a37c:	f108 0602 	add.w	r6, r8, #2
 800a380:	3e01      	subs	r6, #1
 800a382:	4638      	mov	r0, r7
 800a384:	612e      	str	r6, [r5, #16]
 800a386:	4621      	mov	r1, r4
 800a388:	f7ff fd88 	bl	8009e9c <_Bfree>
 800a38c:	4628      	mov	r0, r5
 800a38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a392:	f842 0f04 	str.w	r0, [r2, #4]!
 800a396:	3301      	adds	r3, #1
 800a398:	e7c1      	b.n	800a31e <__lshift+0x4a>
 800a39a:	3904      	subs	r1, #4
 800a39c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3a4:	4298      	cmp	r0, r3
 800a3a6:	d8f9      	bhi.n	800a39c <__lshift+0xc8>
 800a3a8:	e7ea      	b.n	800a380 <__lshift+0xac>
 800a3aa:	bf00      	nop
 800a3ac:	0800bac8 	.word	0x0800bac8
 800a3b0:	0800bb54 	.word	0x0800bb54

0800a3b4 <__mcmp>:
 800a3b4:	b530      	push	{r4, r5, lr}
 800a3b6:	6902      	ldr	r2, [r0, #16]
 800a3b8:	690c      	ldr	r4, [r1, #16]
 800a3ba:	1b12      	subs	r2, r2, r4
 800a3bc:	d10e      	bne.n	800a3dc <__mcmp+0x28>
 800a3be:	f100 0314 	add.w	r3, r0, #20
 800a3c2:	3114      	adds	r1, #20
 800a3c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a3d4:	42a5      	cmp	r5, r4
 800a3d6:	d003      	beq.n	800a3e0 <__mcmp+0x2c>
 800a3d8:	d305      	bcc.n	800a3e6 <__mcmp+0x32>
 800a3da:	2201      	movs	r2, #1
 800a3dc:	4610      	mov	r0, r2
 800a3de:	bd30      	pop	{r4, r5, pc}
 800a3e0:	4283      	cmp	r3, r0
 800a3e2:	d3f3      	bcc.n	800a3cc <__mcmp+0x18>
 800a3e4:	e7fa      	b.n	800a3dc <__mcmp+0x28>
 800a3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ea:	e7f7      	b.n	800a3dc <__mcmp+0x28>

0800a3ec <__mdiff>:
 800a3ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	4690      	mov	r8, r2
 800a3fa:	f7ff ffdb 	bl	800a3b4 <__mcmp>
 800a3fe:	1e05      	subs	r5, r0, #0
 800a400:	d110      	bne.n	800a424 <__mdiff+0x38>
 800a402:	4629      	mov	r1, r5
 800a404:	4630      	mov	r0, r6
 800a406:	f7ff fd09 	bl	8009e1c <_Balloc>
 800a40a:	b930      	cbnz	r0, 800a41a <__mdiff+0x2e>
 800a40c:	4b3a      	ldr	r3, [pc, #232]	; (800a4f8 <__mdiff+0x10c>)
 800a40e:	4602      	mov	r2, r0
 800a410:	f240 2132 	movw	r1, #562	; 0x232
 800a414:	4839      	ldr	r0, [pc, #228]	; (800a4fc <__mdiff+0x110>)
 800a416:	f000 fc4d 	bl	800acb4 <__assert_func>
 800a41a:	2301      	movs	r3, #1
 800a41c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a424:	bfa4      	itt	ge
 800a426:	4643      	movge	r3, r8
 800a428:	46a0      	movge	r8, r4
 800a42a:	4630      	mov	r0, r6
 800a42c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a430:	bfa6      	itte	ge
 800a432:	461c      	movge	r4, r3
 800a434:	2500      	movge	r5, #0
 800a436:	2501      	movlt	r5, #1
 800a438:	f7ff fcf0 	bl	8009e1c <_Balloc>
 800a43c:	b920      	cbnz	r0, 800a448 <__mdiff+0x5c>
 800a43e:	4b2e      	ldr	r3, [pc, #184]	; (800a4f8 <__mdiff+0x10c>)
 800a440:	4602      	mov	r2, r0
 800a442:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a446:	e7e5      	b.n	800a414 <__mdiff+0x28>
 800a448:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a44c:	6926      	ldr	r6, [r4, #16]
 800a44e:	60c5      	str	r5, [r0, #12]
 800a450:	f104 0914 	add.w	r9, r4, #20
 800a454:	f108 0514 	add.w	r5, r8, #20
 800a458:	f100 0e14 	add.w	lr, r0, #20
 800a45c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a460:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a464:	f108 0210 	add.w	r2, r8, #16
 800a468:	46f2      	mov	sl, lr
 800a46a:	2100      	movs	r1, #0
 800a46c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a470:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a474:	fa1f f883 	uxth.w	r8, r3
 800a478:	fa11 f18b 	uxtah	r1, r1, fp
 800a47c:	0c1b      	lsrs	r3, r3, #16
 800a47e:	eba1 0808 	sub.w	r8, r1, r8
 800a482:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a486:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a48a:	fa1f f888 	uxth.w	r8, r8
 800a48e:	1419      	asrs	r1, r3, #16
 800a490:	454e      	cmp	r6, r9
 800a492:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a496:	f84a 3b04 	str.w	r3, [sl], #4
 800a49a:	d8e7      	bhi.n	800a46c <__mdiff+0x80>
 800a49c:	1b33      	subs	r3, r6, r4
 800a49e:	3b15      	subs	r3, #21
 800a4a0:	f023 0303 	bic.w	r3, r3, #3
 800a4a4:	3304      	adds	r3, #4
 800a4a6:	3415      	adds	r4, #21
 800a4a8:	42a6      	cmp	r6, r4
 800a4aa:	bf38      	it	cc
 800a4ac:	2304      	movcc	r3, #4
 800a4ae:	441d      	add	r5, r3
 800a4b0:	4473      	add	r3, lr
 800a4b2:	469e      	mov	lr, r3
 800a4b4:	462e      	mov	r6, r5
 800a4b6:	4566      	cmp	r6, ip
 800a4b8:	d30e      	bcc.n	800a4d8 <__mdiff+0xec>
 800a4ba:	f10c 0203 	add.w	r2, ip, #3
 800a4be:	1b52      	subs	r2, r2, r5
 800a4c0:	f022 0203 	bic.w	r2, r2, #3
 800a4c4:	3d03      	subs	r5, #3
 800a4c6:	45ac      	cmp	ip, r5
 800a4c8:	bf38      	it	cc
 800a4ca:	2200      	movcc	r2, #0
 800a4cc:	441a      	add	r2, r3
 800a4ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a4d2:	b17b      	cbz	r3, 800a4f4 <__mdiff+0x108>
 800a4d4:	6107      	str	r7, [r0, #16]
 800a4d6:	e7a3      	b.n	800a420 <__mdiff+0x34>
 800a4d8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a4dc:	fa11 f288 	uxtah	r2, r1, r8
 800a4e0:	1414      	asrs	r4, r2, #16
 800a4e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a4e6:	b292      	uxth	r2, r2
 800a4e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a4ec:	f84e 2b04 	str.w	r2, [lr], #4
 800a4f0:	1421      	asrs	r1, r4, #16
 800a4f2:	e7e0      	b.n	800a4b6 <__mdiff+0xca>
 800a4f4:	3f01      	subs	r7, #1
 800a4f6:	e7ea      	b.n	800a4ce <__mdiff+0xe2>
 800a4f8:	0800bac8 	.word	0x0800bac8
 800a4fc:	0800bb54 	.word	0x0800bb54

0800a500 <__ulp>:
 800a500:	b082      	sub	sp, #8
 800a502:	ed8d 0b00 	vstr	d0, [sp]
 800a506:	9b01      	ldr	r3, [sp, #4]
 800a508:	4912      	ldr	r1, [pc, #72]	; (800a554 <__ulp+0x54>)
 800a50a:	4019      	ands	r1, r3
 800a50c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a510:	2900      	cmp	r1, #0
 800a512:	dd05      	ble.n	800a520 <__ulp+0x20>
 800a514:	2200      	movs	r2, #0
 800a516:	460b      	mov	r3, r1
 800a518:	ec43 2b10 	vmov	d0, r2, r3
 800a51c:	b002      	add	sp, #8
 800a51e:	4770      	bx	lr
 800a520:	4249      	negs	r1, r1
 800a522:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a526:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a52a:	f04f 0200 	mov.w	r2, #0
 800a52e:	f04f 0300 	mov.w	r3, #0
 800a532:	da04      	bge.n	800a53e <__ulp+0x3e>
 800a534:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a538:	fa41 f300 	asr.w	r3, r1, r0
 800a53c:	e7ec      	b.n	800a518 <__ulp+0x18>
 800a53e:	f1a0 0114 	sub.w	r1, r0, #20
 800a542:	291e      	cmp	r1, #30
 800a544:	bfda      	itte	le
 800a546:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a54a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a54e:	2101      	movgt	r1, #1
 800a550:	460a      	mov	r2, r1
 800a552:	e7e1      	b.n	800a518 <__ulp+0x18>
 800a554:	7ff00000 	.word	0x7ff00000

0800a558 <__b2d>:
 800a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55a:	6905      	ldr	r5, [r0, #16]
 800a55c:	f100 0714 	add.w	r7, r0, #20
 800a560:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a564:	1f2e      	subs	r6, r5, #4
 800a566:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a56a:	4620      	mov	r0, r4
 800a56c:	f7ff fd48 	bl	800a000 <__hi0bits>
 800a570:	f1c0 0320 	rsb	r3, r0, #32
 800a574:	280a      	cmp	r0, #10
 800a576:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a5f4 <__b2d+0x9c>
 800a57a:	600b      	str	r3, [r1, #0]
 800a57c:	dc14      	bgt.n	800a5a8 <__b2d+0x50>
 800a57e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a582:	fa24 f10e 	lsr.w	r1, r4, lr
 800a586:	42b7      	cmp	r7, r6
 800a588:	ea41 030c 	orr.w	r3, r1, ip
 800a58c:	bf34      	ite	cc
 800a58e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a592:	2100      	movcs	r1, #0
 800a594:	3015      	adds	r0, #21
 800a596:	fa04 f000 	lsl.w	r0, r4, r0
 800a59a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a59e:	ea40 0201 	orr.w	r2, r0, r1
 800a5a2:	ec43 2b10 	vmov	d0, r2, r3
 800a5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a8:	42b7      	cmp	r7, r6
 800a5aa:	bf3a      	itte	cc
 800a5ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a5b0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a5b4:	2100      	movcs	r1, #0
 800a5b6:	380b      	subs	r0, #11
 800a5b8:	d017      	beq.n	800a5ea <__b2d+0x92>
 800a5ba:	f1c0 0c20 	rsb	ip, r0, #32
 800a5be:	fa04 f500 	lsl.w	r5, r4, r0
 800a5c2:	42be      	cmp	r6, r7
 800a5c4:	fa21 f40c 	lsr.w	r4, r1, ip
 800a5c8:	ea45 0504 	orr.w	r5, r5, r4
 800a5cc:	bf8c      	ite	hi
 800a5ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a5d2:	2400      	movls	r4, #0
 800a5d4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a5d8:	fa01 f000 	lsl.w	r0, r1, r0
 800a5dc:	fa24 f40c 	lsr.w	r4, r4, ip
 800a5e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a5e4:	ea40 0204 	orr.w	r2, r0, r4
 800a5e8:	e7db      	b.n	800a5a2 <__b2d+0x4a>
 800a5ea:	ea44 030c 	orr.w	r3, r4, ip
 800a5ee:	460a      	mov	r2, r1
 800a5f0:	e7d7      	b.n	800a5a2 <__b2d+0x4a>
 800a5f2:	bf00      	nop
 800a5f4:	3ff00000 	.word	0x3ff00000

0800a5f8 <__d2b>:
 800a5f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5fc:	4689      	mov	r9, r1
 800a5fe:	2101      	movs	r1, #1
 800a600:	ec57 6b10 	vmov	r6, r7, d0
 800a604:	4690      	mov	r8, r2
 800a606:	f7ff fc09 	bl	8009e1c <_Balloc>
 800a60a:	4604      	mov	r4, r0
 800a60c:	b930      	cbnz	r0, 800a61c <__d2b+0x24>
 800a60e:	4602      	mov	r2, r0
 800a610:	4b25      	ldr	r3, [pc, #148]	; (800a6a8 <__d2b+0xb0>)
 800a612:	4826      	ldr	r0, [pc, #152]	; (800a6ac <__d2b+0xb4>)
 800a614:	f240 310a 	movw	r1, #778	; 0x30a
 800a618:	f000 fb4c 	bl	800acb4 <__assert_func>
 800a61c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a620:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a624:	bb35      	cbnz	r5, 800a674 <__d2b+0x7c>
 800a626:	2e00      	cmp	r6, #0
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	d028      	beq.n	800a67e <__d2b+0x86>
 800a62c:	4668      	mov	r0, sp
 800a62e:	9600      	str	r6, [sp, #0]
 800a630:	f7ff fd06 	bl	800a040 <__lo0bits>
 800a634:	9900      	ldr	r1, [sp, #0]
 800a636:	b300      	cbz	r0, 800a67a <__d2b+0x82>
 800a638:	9a01      	ldr	r2, [sp, #4]
 800a63a:	f1c0 0320 	rsb	r3, r0, #32
 800a63e:	fa02 f303 	lsl.w	r3, r2, r3
 800a642:	430b      	orrs	r3, r1
 800a644:	40c2      	lsrs	r2, r0
 800a646:	6163      	str	r3, [r4, #20]
 800a648:	9201      	str	r2, [sp, #4]
 800a64a:	9b01      	ldr	r3, [sp, #4]
 800a64c:	61a3      	str	r3, [r4, #24]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	bf14      	ite	ne
 800a652:	2202      	movne	r2, #2
 800a654:	2201      	moveq	r2, #1
 800a656:	6122      	str	r2, [r4, #16]
 800a658:	b1d5      	cbz	r5, 800a690 <__d2b+0x98>
 800a65a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a65e:	4405      	add	r5, r0
 800a660:	f8c9 5000 	str.w	r5, [r9]
 800a664:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a668:	f8c8 0000 	str.w	r0, [r8]
 800a66c:	4620      	mov	r0, r4
 800a66e:	b003      	add	sp, #12
 800a670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a678:	e7d5      	b.n	800a626 <__d2b+0x2e>
 800a67a:	6161      	str	r1, [r4, #20]
 800a67c:	e7e5      	b.n	800a64a <__d2b+0x52>
 800a67e:	a801      	add	r0, sp, #4
 800a680:	f7ff fcde 	bl	800a040 <__lo0bits>
 800a684:	9b01      	ldr	r3, [sp, #4]
 800a686:	6163      	str	r3, [r4, #20]
 800a688:	2201      	movs	r2, #1
 800a68a:	6122      	str	r2, [r4, #16]
 800a68c:	3020      	adds	r0, #32
 800a68e:	e7e3      	b.n	800a658 <__d2b+0x60>
 800a690:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a694:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a698:	f8c9 0000 	str.w	r0, [r9]
 800a69c:	6918      	ldr	r0, [r3, #16]
 800a69e:	f7ff fcaf 	bl	800a000 <__hi0bits>
 800a6a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6a6:	e7df      	b.n	800a668 <__d2b+0x70>
 800a6a8:	0800bac8 	.word	0x0800bac8
 800a6ac:	0800bb54 	.word	0x0800bb54

0800a6b0 <__ratio>:
 800a6b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b4:	4688      	mov	r8, r1
 800a6b6:	4669      	mov	r1, sp
 800a6b8:	4681      	mov	r9, r0
 800a6ba:	f7ff ff4d 	bl	800a558 <__b2d>
 800a6be:	a901      	add	r1, sp, #4
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	ec55 4b10 	vmov	r4, r5, d0
 800a6c6:	ee10 aa10 	vmov	sl, s0
 800a6ca:	f7ff ff45 	bl	800a558 <__b2d>
 800a6ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6d2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a6d6:	1a59      	subs	r1, r3, r1
 800a6d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a6e2:	ec57 6b10 	vmov	r6, r7, d0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	bfd6      	itet	le
 800a6ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a6ee:	462a      	movgt	r2, r5
 800a6f0:	463a      	movle	r2, r7
 800a6f2:	46ab      	mov	fp, r5
 800a6f4:	bfd6      	itet	le
 800a6f6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a6fa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a6fe:	ee00 3a90 	vmovle	s1, r3
 800a702:	ec4b ab17 	vmov	d7, sl, fp
 800a706:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a70a:	b003      	add	sp, #12
 800a70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a710 <__copybits>:
 800a710:	3901      	subs	r1, #1
 800a712:	b570      	push	{r4, r5, r6, lr}
 800a714:	1149      	asrs	r1, r1, #5
 800a716:	6914      	ldr	r4, [r2, #16]
 800a718:	3101      	adds	r1, #1
 800a71a:	f102 0314 	add.w	r3, r2, #20
 800a71e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a722:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a726:	1f05      	subs	r5, r0, #4
 800a728:	42a3      	cmp	r3, r4
 800a72a:	d30c      	bcc.n	800a746 <__copybits+0x36>
 800a72c:	1aa3      	subs	r3, r4, r2
 800a72e:	3b11      	subs	r3, #17
 800a730:	f023 0303 	bic.w	r3, r3, #3
 800a734:	3211      	adds	r2, #17
 800a736:	42a2      	cmp	r2, r4
 800a738:	bf88      	it	hi
 800a73a:	2300      	movhi	r3, #0
 800a73c:	4418      	add	r0, r3
 800a73e:	2300      	movs	r3, #0
 800a740:	4288      	cmp	r0, r1
 800a742:	d305      	bcc.n	800a750 <__copybits+0x40>
 800a744:	bd70      	pop	{r4, r5, r6, pc}
 800a746:	f853 6b04 	ldr.w	r6, [r3], #4
 800a74a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a74e:	e7eb      	b.n	800a728 <__copybits+0x18>
 800a750:	f840 3b04 	str.w	r3, [r0], #4
 800a754:	e7f4      	b.n	800a740 <__copybits+0x30>

0800a756 <__any_on>:
 800a756:	f100 0214 	add.w	r2, r0, #20
 800a75a:	6900      	ldr	r0, [r0, #16]
 800a75c:	114b      	asrs	r3, r1, #5
 800a75e:	4298      	cmp	r0, r3
 800a760:	b510      	push	{r4, lr}
 800a762:	db11      	blt.n	800a788 <__any_on+0x32>
 800a764:	dd0a      	ble.n	800a77c <__any_on+0x26>
 800a766:	f011 011f 	ands.w	r1, r1, #31
 800a76a:	d007      	beq.n	800a77c <__any_on+0x26>
 800a76c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a770:	fa24 f001 	lsr.w	r0, r4, r1
 800a774:	fa00 f101 	lsl.w	r1, r0, r1
 800a778:	428c      	cmp	r4, r1
 800a77a:	d10b      	bne.n	800a794 <__any_on+0x3e>
 800a77c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a780:	4293      	cmp	r3, r2
 800a782:	d803      	bhi.n	800a78c <__any_on+0x36>
 800a784:	2000      	movs	r0, #0
 800a786:	bd10      	pop	{r4, pc}
 800a788:	4603      	mov	r3, r0
 800a78a:	e7f7      	b.n	800a77c <__any_on+0x26>
 800a78c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a790:	2900      	cmp	r1, #0
 800a792:	d0f5      	beq.n	800a780 <__any_on+0x2a>
 800a794:	2001      	movs	r0, #1
 800a796:	e7f6      	b.n	800a786 <__any_on+0x30>

0800a798 <_calloc_r>:
 800a798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a79a:	fba1 2402 	umull	r2, r4, r1, r2
 800a79e:	b94c      	cbnz	r4, 800a7b4 <_calloc_r+0x1c>
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	9201      	str	r2, [sp, #4]
 800a7a4:	f000 f87a 	bl	800a89c <_malloc_r>
 800a7a8:	9a01      	ldr	r2, [sp, #4]
 800a7aa:	4605      	mov	r5, r0
 800a7ac:	b930      	cbnz	r0, 800a7bc <_calloc_r+0x24>
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	b003      	add	sp, #12
 800a7b2:	bd30      	pop	{r4, r5, pc}
 800a7b4:	220c      	movs	r2, #12
 800a7b6:	6002      	str	r2, [r0, #0]
 800a7b8:	2500      	movs	r5, #0
 800a7ba:	e7f8      	b.n	800a7ae <_calloc_r+0x16>
 800a7bc:	4621      	mov	r1, r4
 800a7be:	f7fc fcc7 	bl	8007150 <memset>
 800a7c2:	e7f4      	b.n	800a7ae <_calloc_r+0x16>

0800a7c4 <_free_r>:
 800a7c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7c6:	2900      	cmp	r1, #0
 800a7c8:	d044      	beq.n	800a854 <_free_r+0x90>
 800a7ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ce:	9001      	str	r0, [sp, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f1a1 0404 	sub.w	r4, r1, #4
 800a7d6:	bfb8      	it	lt
 800a7d8:	18e4      	addlt	r4, r4, r3
 800a7da:	f000 fab5 	bl	800ad48 <__malloc_lock>
 800a7de:	4a1e      	ldr	r2, [pc, #120]	; (800a858 <_free_r+0x94>)
 800a7e0:	9801      	ldr	r0, [sp, #4]
 800a7e2:	6813      	ldr	r3, [r2, #0]
 800a7e4:	b933      	cbnz	r3, 800a7f4 <_free_r+0x30>
 800a7e6:	6063      	str	r3, [r4, #4]
 800a7e8:	6014      	str	r4, [r2, #0]
 800a7ea:	b003      	add	sp, #12
 800a7ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7f0:	f000 bab0 	b.w	800ad54 <__malloc_unlock>
 800a7f4:	42a3      	cmp	r3, r4
 800a7f6:	d908      	bls.n	800a80a <_free_r+0x46>
 800a7f8:	6825      	ldr	r5, [r4, #0]
 800a7fa:	1961      	adds	r1, r4, r5
 800a7fc:	428b      	cmp	r3, r1
 800a7fe:	bf01      	itttt	eq
 800a800:	6819      	ldreq	r1, [r3, #0]
 800a802:	685b      	ldreq	r3, [r3, #4]
 800a804:	1949      	addeq	r1, r1, r5
 800a806:	6021      	streq	r1, [r4, #0]
 800a808:	e7ed      	b.n	800a7e6 <_free_r+0x22>
 800a80a:	461a      	mov	r2, r3
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	b10b      	cbz	r3, 800a814 <_free_r+0x50>
 800a810:	42a3      	cmp	r3, r4
 800a812:	d9fa      	bls.n	800a80a <_free_r+0x46>
 800a814:	6811      	ldr	r1, [r2, #0]
 800a816:	1855      	adds	r5, r2, r1
 800a818:	42a5      	cmp	r5, r4
 800a81a:	d10b      	bne.n	800a834 <_free_r+0x70>
 800a81c:	6824      	ldr	r4, [r4, #0]
 800a81e:	4421      	add	r1, r4
 800a820:	1854      	adds	r4, r2, r1
 800a822:	42a3      	cmp	r3, r4
 800a824:	6011      	str	r1, [r2, #0]
 800a826:	d1e0      	bne.n	800a7ea <_free_r+0x26>
 800a828:	681c      	ldr	r4, [r3, #0]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	6053      	str	r3, [r2, #4]
 800a82e:	4421      	add	r1, r4
 800a830:	6011      	str	r1, [r2, #0]
 800a832:	e7da      	b.n	800a7ea <_free_r+0x26>
 800a834:	d902      	bls.n	800a83c <_free_r+0x78>
 800a836:	230c      	movs	r3, #12
 800a838:	6003      	str	r3, [r0, #0]
 800a83a:	e7d6      	b.n	800a7ea <_free_r+0x26>
 800a83c:	6825      	ldr	r5, [r4, #0]
 800a83e:	1961      	adds	r1, r4, r5
 800a840:	428b      	cmp	r3, r1
 800a842:	bf04      	itt	eq
 800a844:	6819      	ldreq	r1, [r3, #0]
 800a846:	685b      	ldreq	r3, [r3, #4]
 800a848:	6063      	str	r3, [r4, #4]
 800a84a:	bf04      	itt	eq
 800a84c:	1949      	addeq	r1, r1, r5
 800a84e:	6021      	streq	r1, [r4, #0]
 800a850:	6054      	str	r4, [r2, #4]
 800a852:	e7ca      	b.n	800a7ea <_free_r+0x26>
 800a854:	b003      	add	sp, #12
 800a856:	bd30      	pop	{r4, r5, pc}
 800a858:	200006ec 	.word	0x200006ec

0800a85c <sbrk_aligned>:
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	4e0e      	ldr	r6, [pc, #56]	; (800a898 <sbrk_aligned+0x3c>)
 800a860:	460c      	mov	r4, r1
 800a862:	6831      	ldr	r1, [r6, #0]
 800a864:	4605      	mov	r5, r0
 800a866:	b911      	cbnz	r1, 800a86e <sbrk_aligned+0x12>
 800a868:	f000 f9f2 	bl	800ac50 <_sbrk_r>
 800a86c:	6030      	str	r0, [r6, #0]
 800a86e:	4621      	mov	r1, r4
 800a870:	4628      	mov	r0, r5
 800a872:	f000 f9ed 	bl	800ac50 <_sbrk_r>
 800a876:	1c43      	adds	r3, r0, #1
 800a878:	d00a      	beq.n	800a890 <sbrk_aligned+0x34>
 800a87a:	1cc4      	adds	r4, r0, #3
 800a87c:	f024 0403 	bic.w	r4, r4, #3
 800a880:	42a0      	cmp	r0, r4
 800a882:	d007      	beq.n	800a894 <sbrk_aligned+0x38>
 800a884:	1a21      	subs	r1, r4, r0
 800a886:	4628      	mov	r0, r5
 800a888:	f000 f9e2 	bl	800ac50 <_sbrk_r>
 800a88c:	3001      	adds	r0, #1
 800a88e:	d101      	bne.n	800a894 <sbrk_aligned+0x38>
 800a890:	f04f 34ff 	mov.w	r4, #4294967295
 800a894:	4620      	mov	r0, r4
 800a896:	bd70      	pop	{r4, r5, r6, pc}
 800a898:	200006f0 	.word	0x200006f0

0800a89c <_malloc_r>:
 800a89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a0:	1ccd      	adds	r5, r1, #3
 800a8a2:	f025 0503 	bic.w	r5, r5, #3
 800a8a6:	3508      	adds	r5, #8
 800a8a8:	2d0c      	cmp	r5, #12
 800a8aa:	bf38      	it	cc
 800a8ac:	250c      	movcc	r5, #12
 800a8ae:	2d00      	cmp	r5, #0
 800a8b0:	4607      	mov	r7, r0
 800a8b2:	db01      	blt.n	800a8b8 <_malloc_r+0x1c>
 800a8b4:	42a9      	cmp	r1, r5
 800a8b6:	d905      	bls.n	800a8c4 <_malloc_r+0x28>
 800a8b8:	230c      	movs	r3, #12
 800a8ba:	603b      	str	r3, [r7, #0]
 800a8bc:	2600      	movs	r6, #0
 800a8be:	4630      	mov	r0, r6
 800a8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c4:	4e2e      	ldr	r6, [pc, #184]	; (800a980 <_malloc_r+0xe4>)
 800a8c6:	f000 fa3f 	bl	800ad48 <__malloc_lock>
 800a8ca:	6833      	ldr	r3, [r6, #0]
 800a8cc:	461c      	mov	r4, r3
 800a8ce:	bb34      	cbnz	r4, 800a91e <_malloc_r+0x82>
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	4638      	mov	r0, r7
 800a8d4:	f7ff ffc2 	bl	800a85c <sbrk_aligned>
 800a8d8:	1c43      	adds	r3, r0, #1
 800a8da:	4604      	mov	r4, r0
 800a8dc:	d14d      	bne.n	800a97a <_malloc_r+0xde>
 800a8de:	6834      	ldr	r4, [r6, #0]
 800a8e0:	4626      	mov	r6, r4
 800a8e2:	2e00      	cmp	r6, #0
 800a8e4:	d140      	bne.n	800a968 <_malloc_r+0xcc>
 800a8e6:	6823      	ldr	r3, [r4, #0]
 800a8e8:	4631      	mov	r1, r6
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	eb04 0803 	add.w	r8, r4, r3
 800a8f0:	f000 f9ae 	bl	800ac50 <_sbrk_r>
 800a8f4:	4580      	cmp	r8, r0
 800a8f6:	d13a      	bne.n	800a96e <_malloc_r+0xd2>
 800a8f8:	6821      	ldr	r1, [r4, #0]
 800a8fa:	3503      	adds	r5, #3
 800a8fc:	1a6d      	subs	r5, r5, r1
 800a8fe:	f025 0503 	bic.w	r5, r5, #3
 800a902:	3508      	adds	r5, #8
 800a904:	2d0c      	cmp	r5, #12
 800a906:	bf38      	it	cc
 800a908:	250c      	movcc	r5, #12
 800a90a:	4629      	mov	r1, r5
 800a90c:	4638      	mov	r0, r7
 800a90e:	f7ff ffa5 	bl	800a85c <sbrk_aligned>
 800a912:	3001      	adds	r0, #1
 800a914:	d02b      	beq.n	800a96e <_malloc_r+0xd2>
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	442b      	add	r3, r5
 800a91a:	6023      	str	r3, [r4, #0]
 800a91c:	e00e      	b.n	800a93c <_malloc_r+0xa0>
 800a91e:	6822      	ldr	r2, [r4, #0]
 800a920:	1b52      	subs	r2, r2, r5
 800a922:	d41e      	bmi.n	800a962 <_malloc_r+0xc6>
 800a924:	2a0b      	cmp	r2, #11
 800a926:	d916      	bls.n	800a956 <_malloc_r+0xba>
 800a928:	1961      	adds	r1, r4, r5
 800a92a:	42a3      	cmp	r3, r4
 800a92c:	6025      	str	r5, [r4, #0]
 800a92e:	bf18      	it	ne
 800a930:	6059      	strne	r1, [r3, #4]
 800a932:	6863      	ldr	r3, [r4, #4]
 800a934:	bf08      	it	eq
 800a936:	6031      	streq	r1, [r6, #0]
 800a938:	5162      	str	r2, [r4, r5]
 800a93a:	604b      	str	r3, [r1, #4]
 800a93c:	4638      	mov	r0, r7
 800a93e:	f104 060b 	add.w	r6, r4, #11
 800a942:	f000 fa07 	bl	800ad54 <__malloc_unlock>
 800a946:	f026 0607 	bic.w	r6, r6, #7
 800a94a:	1d23      	adds	r3, r4, #4
 800a94c:	1af2      	subs	r2, r6, r3
 800a94e:	d0b6      	beq.n	800a8be <_malloc_r+0x22>
 800a950:	1b9b      	subs	r3, r3, r6
 800a952:	50a3      	str	r3, [r4, r2]
 800a954:	e7b3      	b.n	800a8be <_malloc_r+0x22>
 800a956:	6862      	ldr	r2, [r4, #4]
 800a958:	42a3      	cmp	r3, r4
 800a95a:	bf0c      	ite	eq
 800a95c:	6032      	streq	r2, [r6, #0]
 800a95e:	605a      	strne	r2, [r3, #4]
 800a960:	e7ec      	b.n	800a93c <_malloc_r+0xa0>
 800a962:	4623      	mov	r3, r4
 800a964:	6864      	ldr	r4, [r4, #4]
 800a966:	e7b2      	b.n	800a8ce <_malloc_r+0x32>
 800a968:	4634      	mov	r4, r6
 800a96a:	6876      	ldr	r6, [r6, #4]
 800a96c:	e7b9      	b.n	800a8e2 <_malloc_r+0x46>
 800a96e:	230c      	movs	r3, #12
 800a970:	603b      	str	r3, [r7, #0]
 800a972:	4638      	mov	r0, r7
 800a974:	f000 f9ee 	bl	800ad54 <__malloc_unlock>
 800a978:	e7a1      	b.n	800a8be <_malloc_r+0x22>
 800a97a:	6025      	str	r5, [r4, #0]
 800a97c:	e7de      	b.n	800a93c <_malloc_r+0xa0>
 800a97e:	bf00      	nop
 800a980:	200006ec 	.word	0x200006ec

0800a984 <__ssputs_r>:
 800a984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a988:	688e      	ldr	r6, [r1, #8]
 800a98a:	429e      	cmp	r6, r3
 800a98c:	4682      	mov	sl, r0
 800a98e:	460c      	mov	r4, r1
 800a990:	4690      	mov	r8, r2
 800a992:	461f      	mov	r7, r3
 800a994:	d838      	bhi.n	800aa08 <__ssputs_r+0x84>
 800a996:	898a      	ldrh	r2, [r1, #12]
 800a998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a99c:	d032      	beq.n	800aa04 <__ssputs_r+0x80>
 800a99e:	6825      	ldr	r5, [r4, #0]
 800a9a0:	6909      	ldr	r1, [r1, #16]
 800a9a2:	eba5 0901 	sub.w	r9, r5, r1
 800a9a6:	6965      	ldr	r5, [r4, #20]
 800a9a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	444b      	add	r3, r9
 800a9b4:	106d      	asrs	r5, r5, #1
 800a9b6:	429d      	cmp	r5, r3
 800a9b8:	bf38      	it	cc
 800a9ba:	461d      	movcc	r5, r3
 800a9bc:	0553      	lsls	r3, r2, #21
 800a9be:	d531      	bpl.n	800aa24 <__ssputs_r+0xa0>
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	f7ff ff6b 	bl	800a89c <_malloc_r>
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	b950      	cbnz	r0, 800a9e0 <__ssputs_r+0x5c>
 800a9ca:	230c      	movs	r3, #12
 800a9cc:	f8ca 3000 	str.w	r3, [sl]
 800a9d0:	89a3      	ldrh	r3, [r4, #12]
 800a9d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9d6:	81a3      	strh	r3, [r4, #12]
 800a9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e0:	6921      	ldr	r1, [r4, #16]
 800a9e2:	464a      	mov	r2, r9
 800a9e4:	f7ff fa0c 	bl	8009e00 <memcpy>
 800a9e8:	89a3      	ldrh	r3, [r4, #12]
 800a9ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9f2:	81a3      	strh	r3, [r4, #12]
 800a9f4:	6126      	str	r6, [r4, #16]
 800a9f6:	6165      	str	r5, [r4, #20]
 800a9f8:	444e      	add	r6, r9
 800a9fa:	eba5 0509 	sub.w	r5, r5, r9
 800a9fe:	6026      	str	r6, [r4, #0]
 800aa00:	60a5      	str	r5, [r4, #8]
 800aa02:	463e      	mov	r6, r7
 800aa04:	42be      	cmp	r6, r7
 800aa06:	d900      	bls.n	800aa0a <__ssputs_r+0x86>
 800aa08:	463e      	mov	r6, r7
 800aa0a:	6820      	ldr	r0, [r4, #0]
 800aa0c:	4632      	mov	r2, r6
 800aa0e:	4641      	mov	r1, r8
 800aa10:	f000 f980 	bl	800ad14 <memmove>
 800aa14:	68a3      	ldr	r3, [r4, #8]
 800aa16:	1b9b      	subs	r3, r3, r6
 800aa18:	60a3      	str	r3, [r4, #8]
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	4433      	add	r3, r6
 800aa1e:	6023      	str	r3, [r4, #0]
 800aa20:	2000      	movs	r0, #0
 800aa22:	e7db      	b.n	800a9dc <__ssputs_r+0x58>
 800aa24:	462a      	mov	r2, r5
 800aa26:	f000 f99b 	bl	800ad60 <_realloc_r>
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d1e1      	bne.n	800a9f4 <__ssputs_r+0x70>
 800aa30:	6921      	ldr	r1, [r4, #16]
 800aa32:	4650      	mov	r0, sl
 800aa34:	f7ff fec6 	bl	800a7c4 <_free_r>
 800aa38:	e7c7      	b.n	800a9ca <__ssputs_r+0x46>
	...

0800aa3c <_svfiprintf_r>:
 800aa3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa40:	4698      	mov	r8, r3
 800aa42:	898b      	ldrh	r3, [r1, #12]
 800aa44:	061b      	lsls	r3, r3, #24
 800aa46:	b09d      	sub	sp, #116	; 0x74
 800aa48:	4607      	mov	r7, r0
 800aa4a:	460d      	mov	r5, r1
 800aa4c:	4614      	mov	r4, r2
 800aa4e:	d50e      	bpl.n	800aa6e <_svfiprintf_r+0x32>
 800aa50:	690b      	ldr	r3, [r1, #16]
 800aa52:	b963      	cbnz	r3, 800aa6e <_svfiprintf_r+0x32>
 800aa54:	2140      	movs	r1, #64	; 0x40
 800aa56:	f7ff ff21 	bl	800a89c <_malloc_r>
 800aa5a:	6028      	str	r0, [r5, #0]
 800aa5c:	6128      	str	r0, [r5, #16]
 800aa5e:	b920      	cbnz	r0, 800aa6a <_svfiprintf_r+0x2e>
 800aa60:	230c      	movs	r3, #12
 800aa62:	603b      	str	r3, [r7, #0]
 800aa64:	f04f 30ff 	mov.w	r0, #4294967295
 800aa68:	e0d1      	b.n	800ac0e <_svfiprintf_r+0x1d2>
 800aa6a:	2340      	movs	r3, #64	; 0x40
 800aa6c:	616b      	str	r3, [r5, #20]
 800aa6e:	2300      	movs	r3, #0
 800aa70:	9309      	str	r3, [sp, #36]	; 0x24
 800aa72:	2320      	movs	r3, #32
 800aa74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa78:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa7c:	2330      	movs	r3, #48	; 0x30
 800aa7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac28 <_svfiprintf_r+0x1ec>
 800aa82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa86:	f04f 0901 	mov.w	r9, #1
 800aa8a:	4623      	mov	r3, r4
 800aa8c:	469a      	mov	sl, r3
 800aa8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa92:	b10a      	cbz	r2, 800aa98 <_svfiprintf_r+0x5c>
 800aa94:	2a25      	cmp	r2, #37	; 0x25
 800aa96:	d1f9      	bne.n	800aa8c <_svfiprintf_r+0x50>
 800aa98:	ebba 0b04 	subs.w	fp, sl, r4
 800aa9c:	d00b      	beq.n	800aab6 <_svfiprintf_r+0x7a>
 800aa9e:	465b      	mov	r3, fp
 800aaa0:	4622      	mov	r2, r4
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	4638      	mov	r0, r7
 800aaa6:	f7ff ff6d 	bl	800a984 <__ssputs_r>
 800aaaa:	3001      	adds	r0, #1
 800aaac:	f000 80aa 	beq.w	800ac04 <_svfiprintf_r+0x1c8>
 800aab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aab2:	445a      	add	r2, fp
 800aab4:	9209      	str	r2, [sp, #36]	; 0x24
 800aab6:	f89a 3000 	ldrb.w	r3, [sl]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f000 80a2 	beq.w	800ac04 <_svfiprintf_r+0x1c8>
 800aac0:	2300      	movs	r3, #0
 800aac2:	f04f 32ff 	mov.w	r2, #4294967295
 800aac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaca:	f10a 0a01 	add.w	sl, sl, #1
 800aace:	9304      	str	r3, [sp, #16]
 800aad0:	9307      	str	r3, [sp, #28]
 800aad2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aad6:	931a      	str	r3, [sp, #104]	; 0x68
 800aad8:	4654      	mov	r4, sl
 800aada:	2205      	movs	r2, #5
 800aadc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae0:	4851      	ldr	r0, [pc, #324]	; (800ac28 <_svfiprintf_r+0x1ec>)
 800aae2:	f7f5 fbb5 	bl	8000250 <memchr>
 800aae6:	9a04      	ldr	r2, [sp, #16]
 800aae8:	b9d8      	cbnz	r0, 800ab22 <_svfiprintf_r+0xe6>
 800aaea:	06d0      	lsls	r0, r2, #27
 800aaec:	bf44      	itt	mi
 800aaee:	2320      	movmi	r3, #32
 800aaf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaf4:	0711      	lsls	r1, r2, #28
 800aaf6:	bf44      	itt	mi
 800aaf8:	232b      	movmi	r3, #43	; 0x2b
 800aafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aafe:	f89a 3000 	ldrb.w	r3, [sl]
 800ab02:	2b2a      	cmp	r3, #42	; 0x2a
 800ab04:	d015      	beq.n	800ab32 <_svfiprintf_r+0xf6>
 800ab06:	9a07      	ldr	r2, [sp, #28]
 800ab08:	4654      	mov	r4, sl
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	f04f 0c0a 	mov.w	ip, #10
 800ab10:	4621      	mov	r1, r4
 800ab12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab16:	3b30      	subs	r3, #48	; 0x30
 800ab18:	2b09      	cmp	r3, #9
 800ab1a:	d94e      	bls.n	800abba <_svfiprintf_r+0x17e>
 800ab1c:	b1b0      	cbz	r0, 800ab4c <_svfiprintf_r+0x110>
 800ab1e:	9207      	str	r2, [sp, #28]
 800ab20:	e014      	b.n	800ab4c <_svfiprintf_r+0x110>
 800ab22:	eba0 0308 	sub.w	r3, r0, r8
 800ab26:	fa09 f303 	lsl.w	r3, r9, r3
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	9304      	str	r3, [sp, #16]
 800ab2e:	46a2      	mov	sl, r4
 800ab30:	e7d2      	b.n	800aad8 <_svfiprintf_r+0x9c>
 800ab32:	9b03      	ldr	r3, [sp, #12]
 800ab34:	1d19      	adds	r1, r3, #4
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	9103      	str	r1, [sp, #12]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	bfbb      	ittet	lt
 800ab3e:	425b      	neglt	r3, r3
 800ab40:	f042 0202 	orrlt.w	r2, r2, #2
 800ab44:	9307      	strge	r3, [sp, #28]
 800ab46:	9307      	strlt	r3, [sp, #28]
 800ab48:	bfb8      	it	lt
 800ab4a:	9204      	strlt	r2, [sp, #16]
 800ab4c:	7823      	ldrb	r3, [r4, #0]
 800ab4e:	2b2e      	cmp	r3, #46	; 0x2e
 800ab50:	d10c      	bne.n	800ab6c <_svfiprintf_r+0x130>
 800ab52:	7863      	ldrb	r3, [r4, #1]
 800ab54:	2b2a      	cmp	r3, #42	; 0x2a
 800ab56:	d135      	bne.n	800abc4 <_svfiprintf_r+0x188>
 800ab58:	9b03      	ldr	r3, [sp, #12]
 800ab5a:	1d1a      	adds	r2, r3, #4
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	9203      	str	r2, [sp, #12]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	bfb8      	it	lt
 800ab64:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab68:	3402      	adds	r4, #2
 800ab6a:	9305      	str	r3, [sp, #20]
 800ab6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac38 <_svfiprintf_r+0x1fc>
 800ab70:	7821      	ldrb	r1, [r4, #0]
 800ab72:	2203      	movs	r2, #3
 800ab74:	4650      	mov	r0, sl
 800ab76:	f7f5 fb6b 	bl	8000250 <memchr>
 800ab7a:	b140      	cbz	r0, 800ab8e <_svfiprintf_r+0x152>
 800ab7c:	2340      	movs	r3, #64	; 0x40
 800ab7e:	eba0 000a 	sub.w	r0, r0, sl
 800ab82:	fa03 f000 	lsl.w	r0, r3, r0
 800ab86:	9b04      	ldr	r3, [sp, #16]
 800ab88:	4303      	orrs	r3, r0
 800ab8a:	3401      	adds	r4, #1
 800ab8c:	9304      	str	r3, [sp, #16]
 800ab8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab92:	4826      	ldr	r0, [pc, #152]	; (800ac2c <_svfiprintf_r+0x1f0>)
 800ab94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab98:	2206      	movs	r2, #6
 800ab9a:	f7f5 fb59 	bl	8000250 <memchr>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d038      	beq.n	800ac14 <_svfiprintf_r+0x1d8>
 800aba2:	4b23      	ldr	r3, [pc, #140]	; (800ac30 <_svfiprintf_r+0x1f4>)
 800aba4:	bb1b      	cbnz	r3, 800abee <_svfiprintf_r+0x1b2>
 800aba6:	9b03      	ldr	r3, [sp, #12]
 800aba8:	3307      	adds	r3, #7
 800abaa:	f023 0307 	bic.w	r3, r3, #7
 800abae:	3308      	adds	r3, #8
 800abb0:	9303      	str	r3, [sp, #12]
 800abb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb4:	4433      	add	r3, r6
 800abb6:	9309      	str	r3, [sp, #36]	; 0x24
 800abb8:	e767      	b.n	800aa8a <_svfiprintf_r+0x4e>
 800abba:	fb0c 3202 	mla	r2, ip, r2, r3
 800abbe:	460c      	mov	r4, r1
 800abc0:	2001      	movs	r0, #1
 800abc2:	e7a5      	b.n	800ab10 <_svfiprintf_r+0xd4>
 800abc4:	2300      	movs	r3, #0
 800abc6:	3401      	adds	r4, #1
 800abc8:	9305      	str	r3, [sp, #20]
 800abca:	4619      	mov	r1, r3
 800abcc:	f04f 0c0a 	mov.w	ip, #10
 800abd0:	4620      	mov	r0, r4
 800abd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abd6:	3a30      	subs	r2, #48	; 0x30
 800abd8:	2a09      	cmp	r2, #9
 800abda:	d903      	bls.n	800abe4 <_svfiprintf_r+0x1a8>
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d0c5      	beq.n	800ab6c <_svfiprintf_r+0x130>
 800abe0:	9105      	str	r1, [sp, #20]
 800abe2:	e7c3      	b.n	800ab6c <_svfiprintf_r+0x130>
 800abe4:	fb0c 2101 	mla	r1, ip, r1, r2
 800abe8:	4604      	mov	r4, r0
 800abea:	2301      	movs	r3, #1
 800abec:	e7f0      	b.n	800abd0 <_svfiprintf_r+0x194>
 800abee:	ab03      	add	r3, sp, #12
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	462a      	mov	r2, r5
 800abf4:	4b0f      	ldr	r3, [pc, #60]	; (800ac34 <_svfiprintf_r+0x1f8>)
 800abf6:	a904      	add	r1, sp, #16
 800abf8:	4638      	mov	r0, r7
 800abfa:	f7fc fb41 	bl	8007280 <_printf_float>
 800abfe:	1c42      	adds	r2, r0, #1
 800ac00:	4606      	mov	r6, r0
 800ac02:	d1d6      	bne.n	800abb2 <_svfiprintf_r+0x176>
 800ac04:	89ab      	ldrh	r3, [r5, #12]
 800ac06:	065b      	lsls	r3, r3, #25
 800ac08:	f53f af2c 	bmi.w	800aa64 <_svfiprintf_r+0x28>
 800ac0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac0e:	b01d      	add	sp, #116	; 0x74
 800ac10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac14:	ab03      	add	r3, sp, #12
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	462a      	mov	r2, r5
 800ac1a:	4b06      	ldr	r3, [pc, #24]	; (800ac34 <_svfiprintf_r+0x1f8>)
 800ac1c:	a904      	add	r1, sp, #16
 800ac1e:	4638      	mov	r0, r7
 800ac20:	f7fc fdba 	bl	8007798 <_printf_i>
 800ac24:	e7eb      	b.n	800abfe <_svfiprintf_r+0x1c2>
 800ac26:	bf00      	nop
 800ac28:	0800bcac 	.word	0x0800bcac
 800ac2c:	0800bcb6 	.word	0x0800bcb6
 800ac30:	08007281 	.word	0x08007281
 800ac34:	0800a985 	.word	0x0800a985
 800ac38:	0800bcb2 	.word	0x0800bcb2
 800ac3c:	00000000 	.word	0x00000000

0800ac40 <nan>:
 800ac40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ac48 <nan+0x8>
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	00000000 	.word	0x00000000
 800ac4c:	7ff80000 	.word	0x7ff80000

0800ac50 <_sbrk_r>:
 800ac50:	b538      	push	{r3, r4, r5, lr}
 800ac52:	4d06      	ldr	r5, [pc, #24]	; (800ac6c <_sbrk_r+0x1c>)
 800ac54:	2300      	movs	r3, #0
 800ac56:	4604      	mov	r4, r0
 800ac58:	4608      	mov	r0, r1
 800ac5a:	602b      	str	r3, [r5, #0]
 800ac5c:	f7f7 f9c0 	bl	8001fe0 <_sbrk>
 800ac60:	1c43      	adds	r3, r0, #1
 800ac62:	d102      	bne.n	800ac6a <_sbrk_r+0x1a>
 800ac64:	682b      	ldr	r3, [r5, #0]
 800ac66:	b103      	cbz	r3, 800ac6a <_sbrk_r+0x1a>
 800ac68:	6023      	str	r3, [r4, #0]
 800ac6a:	bd38      	pop	{r3, r4, r5, pc}
 800ac6c:	200006f4 	.word	0x200006f4

0800ac70 <strncmp>:
 800ac70:	b510      	push	{r4, lr}
 800ac72:	b17a      	cbz	r2, 800ac94 <strncmp+0x24>
 800ac74:	4603      	mov	r3, r0
 800ac76:	3901      	subs	r1, #1
 800ac78:	1884      	adds	r4, r0, r2
 800ac7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ac82:	4290      	cmp	r0, r2
 800ac84:	d101      	bne.n	800ac8a <strncmp+0x1a>
 800ac86:	42a3      	cmp	r3, r4
 800ac88:	d101      	bne.n	800ac8e <strncmp+0x1e>
 800ac8a:	1a80      	subs	r0, r0, r2
 800ac8c:	bd10      	pop	{r4, pc}
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d1f3      	bne.n	800ac7a <strncmp+0xa>
 800ac92:	e7fa      	b.n	800ac8a <strncmp+0x1a>
 800ac94:	4610      	mov	r0, r2
 800ac96:	e7f9      	b.n	800ac8c <strncmp+0x1c>

0800ac98 <__ascii_wctomb>:
 800ac98:	b149      	cbz	r1, 800acae <__ascii_wctomb+0x16>
 800ac9a:	2aff      	cmp	r2, #255	; 0xff
 800ac9c:	bf85      	ittet	hi
 800ac9e:	238a      	movhi	r3, #138	; 0x8a
 800aca0:	6003      	strhi	r3, [r0, #0]
 800aca2:	700a      	strbls	r2, [r1, #0]
 800aca4:	f04f 30ff 	movhi.w	r0, #4294967295
 800aca8:	bf98      	it	ls
 800acaa:	2001      	movls	r0, #1
 800acac:	4770      	bx	lr
 800acae:	4608      	mov	r0, r1
 800acb0:	4770      	bx	lr
	...

0800acb4 <__assert_func>:
 800acb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acb6:	4614      	mov	r4, r2
 800acb8:	461a      	mov	r2, r3
 800acba:	4b09      	ldr	r3, [pc, #36]	; (800ace0 <__assert_func+0x2c>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4605      	mov	r5, r0
 800acc0:	68d8      	ldr	r0, [r3, #12]
 800acc2:	b14c      	cbz	r4, 800acd8 <__assert_func+0x24>
 800acc4:	4b07      	ldr	r3, [pc, #28]	; (800ace4 <__assert_func+0x30>)
 800acc6:	9100      	str	r1, [sp, #0]
 800acc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800accc:	4906      	ldr	r1, [pc, #24]	; (800ace8 <__assert_func+0x34>)
 800acce:	462b      	mov	r3, r5
 800acd0:	f000 f80e 	bl	800acf0 <fiprintf>
 800acd4:	f000 fa8c 	bl	800b1f0 <abort>
 800acd8:	4b04      	ldr	r3, [pc, #16]	; (800acec <__assert_func+0x38>)
 800acda:	461c      	mov	r4, r3
 800acdc:	e7f3      	b.n	800acc6 <__assert_func+0x12>
 800acde:	bf00      	nop
 800ace0:	20000024 	.word	0x20000024
 800ace4:	0800bcbd 	.word	0x0800bcbd
 800ace8:	0800bcca 	.word	0x0800bcca
 800acec:	0800bcf8 	.word	0x0800bcf8

0800acf0 <fiprintf>:
 800acf0:	b40e      	push	{r1, r2, r3}
 800acf2:	b503      	push	{r0, r1, lr}
 800acf4:	4601      	mov	r1, r0
 800acf6:	ab03      	add	r3, sp, #12
 800acf8:	4805      	ldr	r0, [pc, #20]	; (800ad10 <fiprintf+0x20>)
 800acfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800acfe:	6800      	ldr	r0, [r0, #0]
 800ad00:	9301      	str	r3, [sp, #4]
 800ad02:	f000 f885 	bl	800ae10 <_vfiprintf_r>
 800ad06:	b002      	add	sp, #8
 800ad08:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad0c:	b003      	add	sp, #12
 800ad0e:	4770      	bx	lr
 800ad10:	20000024 	.word	0x20000024

0800ad14 <memmove>:
 800ad14:	4288      	cmp	r0, r1
 800ad16:	b510      	push	{r4, lr}
 800ad18:	eb01 0402 	add.w	r4, r1, r2
 800ad1c:	d902      	bls.n	800ad24 <memmove+0x10>
 800ad1e:	4284      	cmp	r4, r0
 800ad20:	4623      	mov	r3, r4
 800ad22:	d807      	bhi.n	800ad34 <memmove+0x20>
 800ad24:	1e43      	subs	r3, r0, #1
 800ad26:	42a1      	cmp	r1, r4
 800ad28:	d008      	beq.n	800ad3c <memmove+0x28>
 800ad2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad32:	e7f8      	b.n	800ad26 <memmove+0x12>
 800ad34:	4402      	add	r2, r0
 800ad36:	4601      	mov	r1, r0
 800ad38:	428a      	cmp	r2, r1
 800ad3a:	d100      	bne.n	800ad3e <memmove+0x2a>
 800ad3c:	bd10      	pop	{r4, pc}
 800ad3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad46:	e7f7      	b.n	800ad38 <memmove+0x24>

0800ad48 <__malloc_lock>:
 800ad48:	4801      	ldr	r0, [pc, #4]	; (800ad50 <__malloc_lock+0x8>)
 800ad4a:	f000 bc11 	b.w	800b570 <__retarget_lock_acquire_recursive>
 800ad4e:	bf00      	nop
 800ad50:	200006f8 	.word	0x200006f8

0800ad54 <__malloc_unlock>:
 800ad54:	4801      	ldr	r0, [pc, #4]	; (800ad5c <__malloc_unlock+0x8>)
 800ad56:	f000 bc0c 	b.w	800b572 <__retarget_lock_release_recursive>
 800ad5a:	bf00      	nop
 800ad5c:	200006f8 	.word	0x200006f8

0800ad60 <_realloc_r>:
 800ad60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad64:	4680      	mov	r8, r0
 800ad66:	4614      	mov	r4, r2
 800ad68:	460e      	mov	r6, r1
 800ad6a:	b921      	cbnz	r1, 800ad76 <_realloc_r+0x16>
 800ad6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad70:	4611      	mov	r1, r2
 800ad72:	f7ff bd93 	b.w	800a89c <_malloc_r>
 800ad76:	b92a      	cbnz	r2, 800ad84 <_realloc_r+0x24>
 800ad78:	f7ff fd24 	bl	800a7c4 <_free_r>
 800ad7c:	4625      	mov	r5, r4
 800ad7e:	4628      	mov	r0, r5
 800ad80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad84:	f000 fc5c 	bl	800b640 <_malloc_usable_size_r>
 800ad88:	4284      	cmp	r4, r0
 800ad8a:	4607      	mov	r7, r0
 800ad8c:	d802      	bhi.n	800ad94 <_realloc_r+0x34>
 800ad8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad92:	d812      	bhi.n	800adba <_realloc_r+0x5a>
 800ad94:	4621      	mov	r1, r4
 800ad96:	4640      	mov	r0, r8
 800ad98:	f7ff fd80 	bl	800a89c <_malloc_r>
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	d0ed      	beq.n	800ad7e <_realloc_r+0x1e>
 800ada2:	42bc      	cmp	r4, r7
 800ada4:	4622      	mov	r2, r4
 800ada6:	4631      	mov	r1, r6
 800ada8:	bf28      	it	cs
 800adaa:	463a      	movcs	r2, r7
 800adac:	f7ff f828 	bl	8009e00 <memcpy>
 800adb0:	4631      	mov	r1, r6
 800adb2:	4640      	mov	r0, r8
 800adb4:	f7ff fd06 	bl	800a7c4 <_free_r>
 800adb8:	e7e1      	b.n	800ad7e <_realloc_r+0x1e>
 800adba:	4635      	mov	r5, r6
 800adbc:	e7df      	b.n	800ad7e <_realloc_r+0x1e>

0800adbe <__sfputc_r>:
 800adbe:	6893      	ldr	r3, [r2, #8]
 800adc0:	3b01      	subs	r3, #1
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	b410      	push	{r4}
 800adc6:	6093      	str	r3, [r2, #8]
 800adc8:	da08      	bge.n	800addc <__sfputc_r+0x1e>
 800adca:	6994      	ldr	r4, [r2, #24]
 800adcc:	42a3      	cmp	r3, r4
 800adce:	db01      	blt.n	800add4 <__sfputc_r+0x16>
 800add0:	290a      	cmp	r1, #10
 800add2:	d103      	bne.n	800addc <__sfputc_r+0x1e>
 800add4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800add8:	f000 b94a 	b.w	800b070 <__swbuf_r>
 800addc:	6813      	ldr	r3, [r2, #0]
 800adde:	1c58      	adds	r0, r3, #1
 800ade0:	6010      	str	r0, [r2, #0]
 800ade2:	7019      	strb	r1, [r3, #0]
 800ade4:	4608      	mov	r0, r1
 800ade6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adea:	4770      	bx	lr

0800adec <__sfputs_r>:
 800adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adee:	4606      	mov	r6, r0
 800adf0:	460f      	mov	r7, r1
 800adf2:	4614      	mov	r4, r2
 800adf4:	18d5      	adds	r5, r2, r3
 800adf6:	42ac      	cmp	r4, r5
 800adf8:	d101      	bne.n	800adfe <__sfputs_r+0x12>
 800adfa:	2000      	movs	r0, #0
 800adfc:	e007      	b.n	800ae0e <__sfputs_r+0x22>
 800adfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae02:	463a      	mov	r2, r7
 800ae04:	4630      	mov	r0, r6
 800ae06:	f7ff ffda 	bl	800adbe <__sfputc_r>
 800ae0a:	1c43      	adds	r3, r0, #1
 800ae0c:	d1f3      	bne.n	800adf6 <__sfputs_r+0xa>
 800ae0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae10 <_vfiprintf_r>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	460d      	mov	r5, r1
 800ae16:	b09d      	sub	sp, #116	; 0x74
 800ae18:	4614      	mov	r4, r2
 800ae1a:	4698      	mov	r8, r3
 800ae1c:	4606      	mov	r6, r0
 800ae1e:	b118      	cbz	r0, 800ae28 <_vfiprintf_r+0x18>
 800ae20:	6983      	ldr	r3, [r0, #24]
 800ae22:	b90b      	cbnz	r3, 800ae28 <_vfiprintf_r+0x18>
 800ae24:	f000 fb06 	bl	800b434 <__sinit>
 800ae28:	4b89      	ldr	r3, [pc, #548]	; (800b050 <_vfiprintf_r+0x240>)
 800ae2a:	429d      	cmp	r5, r3
 800ae2c:	d11b      	bne.n	800ae66 <_vfiprintf_r+0x56>
 800ae2e:	6875      	ldr	r5, [r6, #4]
 800ae30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae32:	07d9      	lsls	r1, r3, #31
 800ae34:	d405      	bmi.n	800ae42 <_vfiprintf_r+0x32>
 800ae36:	89ab      	ldrh	r3, [r5, #12]
 800ae38:	059a      	lsls	r2, r3, #22
 800ae3a:	d402      	bmi.n	800ae42 <_vfiprintf_r+0x32>
 800ae3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae3e:	f000 fb97 	bl	800b570 <__retarget_lock_acquire_recursive>
 800ae42:	89ab      	ldrh	r3, [r5, #12]
 800ae44:	071b      	lsls	r3, r3, #28
 800ae46:	d501      	bpl.n	800ae4c <_vfiprintf_r+0x3c>
 800ae48:	692b      	ldr	r3, [r5, #16]
 800ae4a:	b9eb      	cbnz	r3, 800ae88 <_vfiprintf_r+0x78>
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	4630      	mov	r0, r6
 800ae50:	f000 f960 	bl	800b114 <__swsetup_r>
 800ae54:	b1c0      	cbz	r0, 800ae88 <_vfiprintf_r+0x78>
 800ae56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae58:	07dc      	lsls	r4, r3, #31
 800ae5a:	d50e      	bpl.n	800ae7a <_vfiprintf_r+0x6a>
 800ae5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae60:	b01d      	add	sp, #116	; 0x74
 800ae62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae66:	4b7b      	ldr	r3, [pc, #492]	; (800b054 <_vfiprintf_r+0x244>)
 800ae68:	429d      	cmp	r5, r3
 800ae6a:	d101      	bne.n	800ae70 <_vfiprintf_r+0x60>
 800ae6c:	68b5      	ldr	r5, [r6, #8]
 800ae6e:	e7df      	b.n	800ae30 <_vfiprintf_r+0x20>
 800ae70:	4b79      	ldr	r3, [pc, #484]	; (800b058 <_vfiprintf_r+0x248>)
 800ae72:	429d      	cmp	r5, r3
 800ae74:	bf08      	it	eq
 800ae76:	68f5      	ldreq	r5, [r6, #12]
 800ae78:	e7da      	b.n	800ae30 <_vfiprintf_r+0x20>
 800ae7a:	89ab      	ldrh	r3, [r5, #12]
 800ae7c:	0598      	lsls	r0, r3, #22
 800ae7e:	d4ed      	bmi.n	800ae5c <_vfiprintf_r+0x4c>
 800ae80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae82:	f000 fb76 	bl	800b572 <__retarget_lock_release_recursive>
 800ae86:	e7e9      	b.n	800ae5c <_vfiprintf_r+0x4c>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae8c:	2320      	movs	r3, #32
 800ae8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae96:	2330      	movs	r3, #48	; 0x30
 800ae98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b05c <_vfiprintf_r+0x24c>
 800ae9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aea0:	f04f 0901 	mov.w	r9, #1
 800aea4:	4623      	mov	r3, r4
 800aea6:	469a      	mov	sl, r3
 800aea8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeac:	b10a      	cbz	r2, 800aeb2 <_vfiprintf_r+0xa2>
 800aeae:	2a25      	cmp	r2, #37	; 0x25
 800aeb0:	d1f9      	bne.n	800aea6 <_vfiprintf_r+0x96>
 800aeb2:	ebba 0b04 	subs.w	fp, sl, r4
 800aeb6:	d00b      	beq.n	800aed0 <_vfiprintf_r+0xc0>
 800aeb8:	465b      	mov	r3, fp
 800aeba:	4622      	mov	r2, r4
 800aebc:	4629      	mov	r1, r5
 800aebe:	4630      	mov	r0, r6
 800aec0:	f7ff ff94 	bl	800adec <__sfputs_r>
 800aec4:	3001      	adds	r0, #1
 800aec6:	f000 80aa 	beq.w	800b01e <_vfiprintf_r+0x20e>
 800aeca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aecc:	445a      	add	r2, fp
 800aece:	9209      	str	r2, [sp, #36]	; 0x24
 800aed0:	f89a 3000 	ldrb.w	r3, [sl]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f000 80a2 	beq.w	800b01e <_vfiprintf_r+0x20e>
 800aeda:	2300      	movs	r3, #0
 800aedc:	f04f 32ff 	mov.w	r2, #4294967295
 800aee0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aee4:	f10a 0a01 	add.w	sl, sl, #1
 800aee8:	9304      	str	r3, [sp, #16]
 800aeea:	9307      	str	r3, [sp, #28]
 800aeec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aef0:	931a      	str	r3, [sp, #104]	; 0x68
 800aef2:	4654      	mov	r4, sl
 800aef4:	2205      	movs	r2, #5
 800aef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aefa:	4858      	ldr	r0, [pc, #352]	; (800b05c <_vfiprintf_r+0x24c>)
 800aefc:	f7f5 f9a8 	bl	8000250 <memchr>
 800af00:	9a04      	ldr	r2, [sp, #16]
 800af02:	b9d8      	cbnz	r0, 800af3c <_vfiprintf_r+0x12c>
 800af04:	06d1      	lsls	r1, r2, #27
 800af06:	bf44      	itt	mi
 800af08:	2320      	movmi	r3, #32
 800af0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af0e:	0713      	lsls	r3, r2, #28
 800af10:	bf44      	itt	mi
 800af12:	232b      	movmi	r3, #43	; 0x2b
 800af14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af18:	f89a 3000 	ldrb.w	r3, [sl]
 800af1c:	2b2a      	cmp	r3, #42	; 0x2a
 800af1e:	d015      	beq.n	800af4c <_vfiprintf_r+0x13c>
 800af20:	9a07      	ldr	r2, [sp, #28]
 800af22:	4654      	mov	r4, sl
 800af24:	2000      	movs	r0, #0
 800af26:	f04f 0c0a 	mov.w	ip, #10
 800af2a:	4621      	mov	r1, r4
 800af2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af30:	3b30      	subs	r3, #48	; 0x30
 800af32:	2b09      	cmp	r3, #9
 800af34:	d94e      	bls.n	800afd4 <_vfiprintf_r+0x1c4>
 800af36:	b1b0      	cbz	r0, 800af66 <_vfiprintf_r+0x156>
 800af38:	9207      	str	r2, [sp, #28]
 800af3a:	e014      	b.n	800af66 <_vfiprintf_r+0x156>
 800af3c:	eba0 0308 	sub.w	r3, r0, r8
 800af40:	fa09 f303 	lsl.w	r3, r9, r3
 800af44:	4313      	orrs	r3, r2
 800af46:	9304      	str	r3, [sp, #16]
 800af48:	46a2      	mov	sl, r4
 800af4a:	e7d2      	b.n	800aef2 <_vfiprintf_r+0xe2>
 800af4c:	9b03      	ldr	r3, [sp, #12]
 800af4e:	1d19      	adds	r1, r3, #4
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	9103      	str	r1, [sp, #12]
 800af54:	2b00      	cmp	r3, #0
 800af56:	bfbb      	ittet	lt
 800af58:	425b      	neglt	r3, r3
 800af5a:	f042 0202 	orrlt.w	r2, r2, #2
 800af5e:	9307      	strge	r3, [sp, #28]
 800af60:	9307      	strlt	r3, [sp, #28]
 800af62:	bfb8      	it	lt
 800af64:	9204      	strlt	r2, [sp, #16]
 800af66:	7823      	ldrb	r3, [r4, #0]
 800af68:	2b2e      	cmp	r3, #46	; 0x2e
 800af6a:	d10c      	bne.n	800af86 <_vfiprintf_r+0x176>
 800af6c:	7863      	ldrb	r3, [r4, #1]
 800af6e:	2b2a      	cmp	r3, #42	; 0x2a
 800af70:	d135      	bne.n	800afde <_vfiprintf_r+0x1ce>
 800af72:	9b03      	ldr	r3, [sp, #12]
 800af74:	1d1a      	adds	r2, r3, #4
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	9203      	str	r2, [sp, #12]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	bfb8      	it	lt
 800af7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800af82:	3402      	adds	r4, #2
 800af84:	9305      	str	r3, [sp, #20]
 800af86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b06c <_vfiprintf_r+0x25c>
 800af8a:	7821      	ldrb	r1, [r4, #0]
 800af8c:	2203      	movs	r2, #3
 800af8e:	4650      	mov	r0, sl
 800af90:	f7f5 f95e 	bl	8000250 <memchr>
 800af94:	b140      	cbz	r0, 800afa8 <_vfiprintf_r+0x198>
 800af96:	2340      	movs	r3, #64	; 0x40
 800af98:	eba0 000a 	sub.w	r0, r0, sl
 800af9c:	fa03 f000 	lsl.w	r0, r3, r0
 800afa0:	9b04      	ldr	r3, [sp, #16]
 800afa2:	4303      	orrs	r3, r0
 800afa4:	3401      	adds	r4, #1
 800afa6:	9304      	str	r3, [sp, #16]
 800afa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afac:	482c      	ldr	r0, [pc, #176]	; (800b060 <_vfiprintf_r+0x250>)
 800afae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afb2:	2206      	movs	r2, #6
 800afb4:	f7f5 f94c 	bl	8000250 <memchr>
 800afb8:	2800      	cmp	r0, #0
 800afba:	d03f      	beq.n	800b03c <_vfiprintf_r+0x22c>
 800afbc:	4b29      	ldr	r3, [pc, #164]	; (800b064 <_vfiprintf_r+0x254>)
 800afbe:	bb1b      	cbnz	r3, 800b008 <_vfiprintf_r+0x1f8>
 800afc0:	9b03      	ldr	r3, [sp, #12]
 800afc2:	3307      	adds	r3, #7
 800afc4:	f023 0307 	bic.w	r3, r3, #7
 800afc8:	3308      	adds	r3, #8
 800afca:	9303      	str	r3, [sp, #12]
 800afcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afce:	443b      	add	r3, r7
 800afd0:	9309      	str	r3, [sp, #36]	; 0x24
 800afd2:	e767      	b.n	800aea4 <_vfiprintf_r+0x94>
 800afd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800afd8:	460c      	mov	r4, r1
 800afda:	2001      	movs	r0, #1
 800afdc:	e7a5      	b.n	800af2a <_vfiprintf_r+0x11a>
 800afde:	2300      	movs	r3, #0
 800afe0:	3401      	adds	r4, #1
 800afe2:	9305      	str	r3, [sp, #20]
 800afe4:	4619      	mov	r1, r3
 800afe6:	f04f 0c0a 	mov.w	ip, #10
 800afea:	4620      	mov	r0, r4
 800afec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aff0:	3a30      	subs	r2, #48	; 0x30
 800aff2:	2a09      	cmp	r2, #9
 800aff4:	d903      	bls.n	800affe <_vfiprintf_r+0x1ee>
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d0c5      	beq.n	800af86 <_vfiprintf_r+0x176>
 800affa:	9105      	str	r1, [sp, #20]
 800affc:	e7c3      	b.n	800af86 <_vfiprintf_r+0x176>
 800affe:	fb0c 2101 	mla	r1, ip, r1, r2
 800b002:	4604      	mov	r4, r0
 800b004:	2301      	movs	r3, #1
 800b006:	e7f0      	b.n	800afea <_vfiprintf_r+0x1da>
 800b008:	ab03      	add	r3, sp, #12
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	462a      	mov	r2, r5
 800b00e:	4b16      	ldr	r3, [pc, #88]	; (800b068 <_vfiprintf_r+0x258>)
 800b010:	a904      	add	r1, sp, #16
 800b012:	4630      	mov	r0, r6
 800b014:	f7fc f934 	bl	8007280 <_printf_float>
 800b018:	4607      	mov	r7, r0
 800b01a:	1c78      	adds	r0, r7, #1
 800b01c:	d1d6      	bne.n	800afcc <_vfiprintf_r+0x1bc>
 800b01e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b020:	07d9      	lsls	r1, r3, #31
 800b022:	d405      	bmi.n	800b030 <_vfiprintf_r+0x220>
 800b024:	89ab      	ldrh	r3, [r5, #12]
 800b026:	059a      	lsls	r2, r3, #22
 800b028:	d402      	bmi.n	800b030 <_vfiprintf_r+0x220>
 800b02a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b02c:	f000 faa1 	bl	800b572 <__retarget_lock_release_recursive>
 800b030:	89ab      	ldrh	r3, [r5, #12]
 800b032:	065b      	lsls	r3, r3, #25
 800b034:	f53f af12 	bmi.w	800ae5c <_vfiprintf_r+0x4c>
 800b038:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b03a:	e711      	b.n	800ae60 <_vfiprintf_r+0x50>
 800b03c:	ab03      	add	r3, sp, #12
 800b03e:	9300      	str	r3, [sp, #0]
 800b040:	462a      	mov	r2, r5
 800b042:	4b09      	ldr	r3, [pc, #36]	; (800b068 <_vfiprintf_r+0x258>)
 800b044:	a904      	add	r1, sp, #16
 800b046:	4630      	mov	r0, r6
 800b048:	f7fc fba6 	bl	8007798 <_printf_i>
 800b04c:	e7e4      	b.n	800b018 <_vfiprintf_r+0x208>
 800b04e:	bf00      	nop
 800b050:	0800bd1c 	.word	0x0800bd1c
 800b054:	0800bd3c 	.word	0x0800bd3c
 800b058:	0800bcfc 	.word	0x0800bcfc
 800b05c:	0800bcac 	.word	0x0800bcac
 800b060:	0800bcb6 	.word	0x0800bcb6
 800b064:	08007281 	.word	0x08007281
 800b068:	0800aded 	.word	0x0800aded
 800b06c:	0800bcb2 	.word	0x0800bcb2

0800b070 <__swbuf_r>:
 800b070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b072:	460e      	mov	r6, r1
 800b074:	4614      	mov	r4, r2
 800b076:	4605      	mov	r5, r0
 800b078:	b118      	cbz	r0, 800b082 <__swbuf_r+0x12>
 800b07a:	6983      	ldr	r3, [r0, #24]
 800b07c:	b90b      	cbnz	r3, 800b082 <__swbuf_r+0x12>
 800b07e:	f000 f9d9 	bl	800b434 <__sinit>
 800b082:	4b21      	ldr	r3, [pc, #132]	; (800b108 <__swbuf_r+0x98>)
 800b084:	429c      	cmp	r4, r3
 800b086:	d12b      	bne.n	800b0e0 <__swbuf_r+0x70>
 800b088:	686c      	ldr	r4, [r5, #4]
 800b08a:	69a3      	ldr	r3, [r4, #24]
 800b08c:	60a3      	str	r3, [r4, #8]
 800b08e:	89a3      	ldrh	r3, [r4, #12]
 800b090:	071a      	lsls	r2, r3, #28
 800b092:	d52f      	bpl.n	800b0f4 <__swbuf_r+0x84>
 800b094:	6923      	ldr	r3, [r4, #16]
 800b096:	b36b      	cbz	r3, 800b0f4 <__swbuf_r+0x84>
 800b098:	6923      	ldr	r3, [r4, #16]
 800b09a:	6820      	ldr	r0, [r4, #0]
 800b09c:	1ac0      	subs	r0, r0, r3
 800b09e:	6963      	ldr	r3, [r4, #20]
 800b0a0:	b2f6      	uxtb	r6, r6
 800b0a2:	4283      	cmp	r3, r0
 800b0a4:	4637      	mov	r7, r6
 800b0a6:	dc04      	bgt.n	800b0b2 <__swbuf_r+0x42>
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f000 f92e 	bl	800b30c <_fflush_r>
 800b0b0:	bb30      	cbnz	r0, 800b100 <__swbuf_r+0x90>
 800b0b2:	68a3      	ldr	r3, [r4, #8]
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	60a3      	str	r3, [r4, #8]
 800b0b8:	6823      	ldr	r3, [r4, #0]
 800b0ba:	1c5a      	adds	r2, r3, #1
 800b0bc:	6022      	str	r2, [r4, #0]
 800b0be:	701e      	strb	r6, [r3, #0]
 800b0c0:	6963      	ldr	r3, [r4, #20]
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	4283      	cmp	r3, r0
 800b0c6:	d004      	beq.n	800b0d2 <__swbuf_r+0x62>
 800b0c8:	89a3      	ldrh	r3, [r4, #12]
 800b0ca:	07db      	lsls	r3, r3, #31
 800b0cc:	d506      	bpl.n	800b0dc <__swbuf_r+0x6c>
 800b0ce:	2e0a      	cmp	r6, #10
 800b0d0:	d104      	bne.n	800b0dc <__swbuf_r+0x6c>
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	f000 f919 	bl	800b30c <_fflush_r>
 800b0da:	b988      	cbnz	r0, 800b100 <__swbuf_r+0x90>
 800b0dc:	4638      	mov	r0, r7
 800b0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0e0:	4b0a      	ldr	r3, [pc, #40]	; (800b10c <__swbuf_r+0x9c>)
 800b0e2:	429c      	cmp	r4, r3
 800b0e4:	d101      	bne.n	800b0ea <__swbuf_r+0x7a>
 800b0e6:	68ac      	ldr	r4, [r5, #8]
 800b0e8:	e7cf      	b.n	800b08a <__swbuf_r+0x1a>
 800b0ea:	4b09      	ldr	r3, [pc, #36]	; (800b110 <__swbuf_r+0xa0>)
 800b0ec:	429c      	cmp	r4, r3
 800b0ee:	bf08      	it	eq
 800b0f0:	68ec      	ldreq	r4, [r5, #12]
 800b0f2:	e7ca      	b.n	800b08a <__swbuf_r+0x1a>
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	f000 f80c 	bl	800b114 <__swsetup_r>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	d0cb      	beq.n	800b098 <__swbuf_r+0x28>
 800b100:	f04f 37ff 	mov.w	r7, #4294967295
 800b104:	e7ea      	b.n	800b0dc <__swbuf_r+0x6c>
 800b106:	bf00      	nop
 800b108:	0800bd1c 	.word	0x0800bd1c
 800b10c:	0800bd3c 	.word	0x0800bd3c
 800b110:	0800bcfc 	.word	0x0800bcfc

0800b114 <__swsetup_r>:
 800b114:	4b32      	ldr	r3, [pc, #200]	; (800b1e0 <__swsetup_r+0xcc>)
 800b116:	b570      	push	{r4, r5, r6, lr}
 800b118:	681d      	ldr	r5, [r3, #0]
 800b11a:	4606      	mov	r6, r0
 800b11c:	460c      	mov	r4, r1
 800b11e:	b125      	cbz	r5, 800b12a <__swsetup_r+0x16>
 800b120:	69ab      	ldr	r3, [r5, #24]
 800b122:	b913      	cbnz	r3, 800b12a <__swsetup_r+0x16>
 800b124:	4628      	mov	r0, r5
 800b126:	f000 f985 	bl	800b434 <__sinit>
 800b12a:	4b2e      	ldr	r3, [pc, #184]	; (800b1e4 <__swsetup_r+0xd0>)
 800b12c:	429c      	cmp	r4, r3
 800b12e:	d10f      	bne.n	800b150 <__swsetup_r+0x3c>
 800b130:	686c      	ldr	r4, [r5, #4]
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b138:	0719      	lsls	r1, r3, #28
 800b13a:	d42c      	bmi.n	800b196 <__swsetup_r+0x82>
 800b13c:	06dd      	lsls	r5, r3, #27
 800b13e:	d411      	bmi.n	800b164 <__swsetup_r+0x50>
 800b140:	2309      	movs	r3, #9
 800b142:	6033      	str	r3, [r6, #0]
 800b144:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b148:	81a3      	strh	r3, [r4, #12]
 800b14a:	f04f 30ff 	mov.w	r0, #4294967295
 800b14e:	e03e      	b.n	800b1ce <__swsetup_r+0xba>
 800b150:	4b25      	ldr	r3, [pc, #148]	; (800b1e8 <__swsetup_r+0xd4>)
 800b152:	429c      	cmp	r4, r3
 800b154:	d101      	bne.n	800b15a <__swsetup_r+0x46>
 800b156:	68ac      	ldr	r4, [r5, #8]
 800b158:	e7eb      	b.n	800b132 <__swsetup_r+0x1e>
 800b15a:	4b24      	ldr	r3, [pc, #144]	; (800b1ec <__swsetup_r+0xd8>)
 800b15c:	429c      	cmp	r4, r3
 800b15e:	bf08      	it	eq
 800b160:	68ec      	ldreq	r4, [r5, #12]
 800b162:	e7e6      	b.n	800b132 <__swsetup_r+0x1e>
 800b164:	0758      	lsls	r0, r3, #29
 800b166:	d512      	bpl.n	800b18e <__swsetup_r+0x7a>
 800b168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b16a:	b141      	cbz	r1, 800b17e <__swsetup_r+0x6a>
 800b16c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b170:	4299      	cmp	r1, r3
 800b172:	d002      	beq.n	800b17a <__swsetup_r+0x66>
 800b174:	4630      	mov	r0, r6
 800b176:	f7ff fb25 	bl	800a7c4 <_free_r>
 800b17a:	2300      	movs	r3, #0
 800b17c:	6363      	str	r3, [r4, #52]	; 0x34
 800b17e:	89a3      	ldrh	r3, [r4, #12]
 800b180:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b184:	81a3      	strh	r3, [r4, #12]
 800b186:	2300      	movs	r3, #0
 800b188:	6063      	str	r3, [r4, #4]
 800b18a:	6923      	ldr	r3, [r4, #16]
 800b18c:	6023      	str	r3, [r4, #0]
 800b18e:	89a3      	ldrh	r3, [r4, #12]
 800b190:	f043 0308 	orr.w	r3, r3, #8
 800b194:	81a3      	strh	r3, [r4, #12]
 800b196:	6923      	ldr	r3, [r4, #16]
 800b198:	b94b      	cbnz	r3, 800b1ae <__swsetup_r+0x9a>
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1a4:	d003      	beq.n	800b1ae <__swsetup_r+0x9a>
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	f000 fa09 	bl	800b5c0 <__smakebuf_r>
 800b1ae:	89a0      	ldrh	r0, [r4, #12]
 800b1b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1b4:	f010 0301 	ands.w	r3, r0, #1
 800b1b8:	d00a      	beq.n	800b1d0 <__swsetup_r+0xbc>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60a3      	str	r3, [r4, #8]
 800b1be:	6963      	ldr	r3, [r4, #20]
 800b1c0:	425b      	negs	r3, r3
 800b1c2:	61a3      	str	r3, [r4, #24]
 800b1c4:	6923      	ldr	r3, [r4, #16]
 800b1c6:	b943      	cbnz	r3, 800b1da <__swsetup_r+0xc6>
 800b1c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b1cc:	d1ba      	bne.n	800b144 <__swsetup_r+0x30>
 800b1ce:	bd70      	pop	{r4, r5, r6, pc}
 800b1d0:	0781      	lsls	r1, r0, #30
 800b1d2:	bf58      	it	pl
 800b1d4:	6963      	ldrpl	r3, [r4, #20]
 800b1d6:	60a3      	str	r3, [r4, #8]
 800b1d8:	e7f4      	b.n	800b1c4 <__swsetup_r+0xb0>
 800b1da:	2000      	movs	r0, #0
 800b1dc:	e7f7      	b.n	800b1ce <__swsetup_r+0xba>
 800b1de:	bf00      	nop
 800b1e0:	20000024 	.word	0x20000024
 800b1e4:	0800bd1c 	.word	0x0800bd1c
 800b1e8:	0800bd3c 	.word	0x0800bd3c
 800b1ec:	0800bcfc 	.word	0x0800bcfc

0800b1f0 <abort>:
 800b1f0:	b508      	push	{r3, lr}
 800b1f2:	2006      	movs	r0, #6
 800b1f4:	f000 fa54 	bl	800b6a0 <raise>
 800b1f8:	2001      	movs	r0, #1
 800b1fa:	f7f6 fe79 	bl	8001ef0 <_exit>
	...

0800b200 <__sflush_r>:
 800b200:	898a      	ldrh	r2, [r1, #12]
 800b202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b206:	4605      	mov	r5, r0
 800b208:	0710      	lsls	r0, r2, #28
 800b20a:	460c      	mov	r4, r1
 800b20c:	d458      	bmi.n	800b2c0 <__sflush_r+0xc0>
 800b20e:	684b      	ldr	r3, [r1, #4]
 800b210:	2b00      	cmp	r3, #0
 800b212:	dc05      	bgt.n	800b220 <__sflush_r+0x20>
 800b214:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b216:	2b00      	cmp	r3, #0
 800b218:	dc02      	bgt.n	800b220 <__sflush_r+0x20>
 800b21a:	2000      	movs	r0, #0
 800b21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b222:	2e00      	cmp	r6, #0
 800b224:	d0f9      	beq.n	800b21a <__sflush_r+0x1a>
 800b226:	2300      	movs	r3, #0
 800b228:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b22c:	682f      	ldr	r7, [r5, #0]
 800b22e:	602b      	str	r3, [r5, #0]
 800b230:	d032      	beq.n	800b298 <__sflush_r+0x98>
 800b232:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b234:	89a3      	ldrh	r3, [r4, #12]
 800b236:	075a      	lsls	r2, r3, #29
 800b238:	d505      	bpl.n	800b246 <__sflush_r+0x46>
 800b23a:	6863      	ldr	r3, [r4, #4]
 800b23c:	1ac0      	subs	r0, r0, r3
 800b23e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b240:	b10b      	cbz	r3, 800b246 <__sflush_r+0x46>
 800b242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b244:	1ac0      	subs	r0, r0, r3
 800b246:	2300      	movs	r3, #0
 800b248:	4602      	mov	r2, r0
 800b24a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b24c:	6a21      	ldr	r1, [r4, #32]
 800b24e:	4628      	mov	r0, r5
 800b250:	47b0      	blx	r6
 800b252:	1c43      	adds	r3, r0, #1
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	d106      	bne.n	800b266 <__sflush_r+0x66>
 800b258:	6829      	ldr	r1, [r5, #0]
 800b25a:	291d      	cmp	r1, #29
 800b25c:	d82c      	bhi.n	800b2b8 <__sflush_r+0xb8>
 800b25e:	4a2a      	ldr	r2, [pc, #168]	; (800b308 <__sflush_r+0x108>)
 800b260:	40ca      	lsrs	r2, r1
 800b262:	07d6      	lsls	r6, r2, #31
 800b264:	d528      	bpl.n	800b2b8 <__sflush_r+0xb8>
 800b266:	2200      	movs	r2, #0
 800b268:	6062      	str	r2, [r4, #4]
 800b26a:	04d9      	lsls	r1, r3, #19
 800b26c:	6922      	ldr	r2, [r4, #16]
 800b26e:	6022      	str	r2, [r4, #0]
 800b270:	d504      	bpl.n	800b27c <__sflush_r+0x7c>
 800b272:	1c42      	adds	r2, r0, #1
 800b274:	d101      	bne.n	800b27a <__sflush_r+0x7a>
 800b276:	682b      	ldr	r3, [r5, #0]
 800b278:	b903      	cbnz	r3, 800b27c <__sflush_r+0x7c>
 800b27a:	6560      	str	r0, [r4, #84]	; 0x54
 800b27c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b27e:	602f      	str	r7, [r5, #0]
 800b280:	2900      	cmp	r1, #0
 800b282:	d0ca      	beq.n	800b21a <__sflush_r+0x1a>
 800b284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b288:	4299      	cmp	r1, r3
 800b28a:	d002      	beq.n	800b292 <__sflush_r+0x92>
 800b28c:	4628      	mov	r0, r5
 800b28e:	f7ff fa99 	bl	800a7c4 <_free_r>
 800b292:	2000      	movs	r0, #0
 800b294:	6360      	str	r0, [r4, #52]	; 0x34
 800b296:	e7c1      	b.n	800b21c <__sflush_r+0x1c>
 800b298:	6a21      	ldr	r1, [r4, #32]
 800b29a:	2301      	movs	r3, #1
 800b29c:	4628      	mov	r0, r5
 800b29e:	47b0      	blx	r6
 800b2a0:	1c41      	adds	r1, r0, #1
 800b2a2:	d1c7      	bne.n	800b234 <__sflush_r+0x34>
 800b2a4:	682b      	ldr	r3, [r5, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d0c4      	beq.n	800b234 <__sflush_r+0x34>
 800b2aa:	2b1d      	cmp	r3, #29
 800b2ac:	d001      	beq.n	800b2b2 <__sflush_r+0xb2>
 800b2ae:	2b16      	cmp	r3, #22
 800b2b0:	d101      	bne.n	800b2b6 <__sflush_r+0xb6>
 800b2b2:	602f      	str	r7, [r5, #0]
 800b2b4:	e7b1      	b.n	800b21a <__sflush_r+0x1a>
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2bc:	81a3      	strh	r3, [r4, #12]
 800b2be:	e7ad      	b.n	800b21c <__sflush_r+0x1c>
 800b2c0:	690f      	ldr	r7, [r1, #16]
 800b2c2:	2f00      	cmp	r7, #0
 800b2c4:	d0a9      	beq.n	800b21a <__sflush_r+0x1a>
 800b2c6:	0793      	lsls	r3, r2, #30
 800b2c8:	680e      	ldr	r6, [r1, #0]
 800b2ca:	bf08      	it	eq
 800b2cc:	694b      	ldreq	r3, [r1, #20]
 800b2ce:	600f      	str	r7, [r1, #0]
 800b2d0:	bf18      	it	ne
 800b2d2:	2300      	movne	r3, #0
 800b2d4:	eba6 0807 	sub.w	r8, r6, r7
 800b2d8:	608b      	str	r3, [r1, #8]
 800b2da:	f1b8 0f00 	cmp.w	r8, #0
 800b2de:	dd9c      	ble.n	800b21a <__sflush_r+0x1a>
 800b2e0:	6a21      	ldr	r1, [r4, #32]
 800b2e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2e4:	4643      	mov	r3, r8
 800b2e6:	463a      	mov	r2, r7
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	47b0      	blx	r6
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	dc06      	bgt.n	800b2fe <__sflush_r+0xfe>
 800b2f0:	89a3      	ldrh	r3, [r4, #12]
 800b2f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2f6:	81a3      	strh	r3, [r4, #12]
 800b2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fc:	e78e      	b.n	800b21c <__sflush_r+0x1c>
 800b2fe:	4407      	add	r7, r0
 800b300:	eba8 0800 	sub.w	r8, r8, r0
 800b304:	e7e9      	b.n	800b2da <__sflush_r+0xda>
 800b306:	bf00      	nop
 800b308:	20400001 	.word	0x20400001

0800b30c <_fflush_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	690b      	ldr	r3, [r1, #16]
 800b310:	4605      	mov	r5, r0
 800b312:	460c      	mov	r4, r1
 800b314:	b913      	cbnz	r3, 800b31c <_fflush_r+0x10>
 800b316:	2500      	movs	r5, #0
 800b318:	4628      	mov	r0, r5
 800b31a:	bd38      	pop	{r3, r4, r5, pc}
 800b31c:	b118      	cbz	r0, 800b326 <_fflush_r+0x1a>
 800b31e:	6983      	ldr	r3, [r0, #24]
 800b320:	b90b      	cbnz	r3, 800b326 <_fflush_r+0x1a>
 800b322:	f000 f887 	bl	800b434 <__sinit>
 800b326:	4b14      	ldr	r3, [pc, #80]	; (800b378 <_fflush_r+0x6c>)
 800b328:	429c      	cmp	r4, r3
 800b32a:	d11b      	bne.n	800b364 <_fflush_r+0x58>
 800b32c:	686c      	ldr	r4, [r5, #4]
 800b32e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d0ef      	beq.n	800b316 <_fflush_r+0xa>
 800b336:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b338:	07d0      	lsls	r0, r2, #31
 800b33a:	d404      	bmi.n	800b346 <_fflush_r+0x3a>
 800b33c:	0599      	lsls	r1, r3, #22
 800b33e:	d402      	bmi.n	800b346 <_fflush_r+0x3a>
 800b340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b342:	f000 f915 	bl	800b570 <__retarget_lock_acquire_recursive>
 800b346:	4628      	mov	r0, r5
 800b348:	4621      	mov	r1, r4
 800b34a:	f7ff ff59 	bl	800b200 <__sflush_r>
 800b34e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b350:	07da      	lsls	r2, r3, #31
 800b352:	4605      	mov	r5, r0
 800b354:	d4e0      	bmi.n	800b318 <_fflush_r+0xc>
 800b356:	89a3      	ldrh	r3, [r4, #12]
 800b358:	059b      	lsls	r3, r3, #22
 800b35a:	d4dd      	bmi.n	800b318 <_fflush_r+0xc>
 800b35c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b35e:	f000 f908 	bl	800b572 <__retarget_lock_release_recursive>
 800b362:	e7d9      	b.n	800b318 <_fflush_r+0xc>
 800b364:	4b05      	ldr	r3, [pc, #20]	; (800b37c <_fflush_r+0x70>)
 800b366:	429c      	cmp	r4, r3
 800b368:	d101      	bne.n	800b36e <_fflush_r+0x62>
 800b36a:	68ac      	ldr	r4, [r5, #8]
 800b36c:	e7df      	b.n	800b32e <_fflush_r+0x22>
 800b36e:	4b04      	ldr	r3, [pc, #16]	; (800b380 <_fflush_r+0x74>)
 800b370:	429c      	cmp	r4, r3
 800b372:	bf08      	it	eq
 800b374:	68ec      	ldreq	r4, [r5, #12]
 800b376:	e7da      	b.n	800b32e <_fflush_r+0x22>
 800b378:	0800bd1c 	.word	0x0800bd1c
 800b37c:	0800bd3c 	.word	0x0800bd3c
 800b380:	0800bcfc 	.word	0x0800bcfc

0800b384 <std>:
 800b384:	2300      	movs	r3, #0
 800b386:	b510      	push	{r4, lr}
 800b388:	4604      	mov	r4, r0
 800b38a:	e9c0 3300 	strd	r3, r3, [r0]
 800b38e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b392:	6083      	str	r3, [r0, #8]
 800b394:	8181      	strh	r1, [r0, #12]
 800b396:	6643      	str	r3, [r0, #100]	; 0x64
 800b398:	81c2      	strh	r2, [r0, #14]
 800b39a:	6183      	str	r3, [r0, #24]
 800b39c:	4619      	mov	r1, r3
 800b39e:	2208      	movs	r2, #8
 800b3a0:	305c      	adds	r0, #92	; 0x5c
 800b3a2:	f7fb fed5 	bl	8007150 <memset>
 800b3a6:	4b05      	ldr	r3, [pc, #20]	; (800b3bc <std+0x38>)
 800b3a8:	6263      	str	r3, [r4, #36]	; 0x24
 800b3aa:	4b05      	ldr	r3, [pc, #20]	; (800b3c0 <std+0x3c>)
 800b3ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3ae:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <std+0x40>)
 800b3b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3b2:	4b05      	ldr	r3, [pc, #20]	; (800b3c8 <std+0x44>)
 800b3b4:	6224      	str	r4, [r4, #32]
 800b3b6:	6323      	str	r3, [r4, #48]	; 0x30
 800b3b8:	bd10      	pop	{r4, pc}
 800b3ba:	bf00      	nop
 800b3bc:	0800b6d9 	.word	0x0800b6d9
 800b3c0:	0800b6fb 	.word	0x0800b6fb
 800b3c4:	0800b733 	.word	0x0800b733
 800b3c8:	0800b757 	.word	0x0800b757

0800b3cc <_cleanup_r>:
 800b3cc:	4901      	ldr	r1, [pc, #4]	; (800b3d4 <_cleanup_r+0x8>)
 800b3ce:	f000 b8af 	b.w	800b530 <_fwalk_reent>
 800b3d2:	bf00      	nop
 800b3d4:	0800b30d 	.word	0x0800b30d

0800b3d8 <__sfmoreglue>:
 800b3d8:	b570      	push	{r4, r5, r6, lr}
 800b3da:	2268      	movs	r2, #104	; 0x68
 800b3dc:	1e4d      	subs	r5, r1, #1
 800b3de:	4355      	muls	r5, r2
 800b3e0:	460e      	mov	r6, r1
 800b3e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b3e6:	f7ff fa59 	bl	800a89c <_malloc_r>
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	b140      	cbz	r0, 800b400 <__sfmoreglue+0x28>
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	e9c0 1600 	strd	r1, r6, [r0]
 800b3f4:	300c      	adds	r0, #12
 800b3f6:	60a0      	str	r0, [r4, #8]
 800b3f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b3fc:	f7fb fea8 	bl	8007150 <memset>
 800b400:	4620      	mov	r0, r4
 800b402:	bd70      	pop	{r4, r5, r6, pc}

0800b404 <__sfp_lock_acquire>:
 800b404:	4801      	ldr	r0, [pc, #4]	; (800b40c <__sfp_lock_acquire+0x8>)
 800b406:	f000 b8b3 	b.w	800b570 <__retarget_lock_acquire_recursive>
 800b40a:	bf00      	nop
 800b40c:	200006f9 	.word	0x200006f9

0800b410 <__sfp_lock_release>:
 800b410:	4801      	ldr	r0, [pc, #4]	; (800b418 <__sfp_lock_release+0x8>)
 800b412:	f000 b8ae 	b.w	800b572 <__retarget_lock_release_recursive>
 800b416:	bf00      	nop
 800b418:	200006f9 	.word	0x200006f9

0800b41c <__sinit_lock_acquire>:
 800b41c:	4801      	ldr	r0, [pc, #4]	; (800b424 <__sinit_lock_acquire+0x8>)
 800b41e:	f000 b8a7 	b.w	800b570 <__retarget_lock_acquire_recursive>
 800b422:	bf00      	nop
 800b424:	200006fa 	.word	0x200006fa

0800b428 <__sinit_lock_release>:
 800b428:	4801      	ldr	r0, [pc, #4]	; (800b430 <__sinit_lock_release+0x8>)
 800b42a:	f000 b8a2 	b.w	800b572 <__retarget_lock_release_recursive>
 800b42e:	bf00      	nop
 800b430:	200006fa 	.word	0x200006fa

0800b434 <__sinit>:
 800b434:	b510      	push	{r4, lr}
 800b436:	4604      	mov	r4, r0
 800b438:	f7ff fff0 	bl	800b41c <__sinit_lock_acquire>
 800b43c:	69a3      	ldr	r3, [r4, #24]
 800b43e:	b11b      	cbz	r3, 800b448 <__sinit+0x14>
 800b440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b444:	f7ff bff0 	b.w	800b428 <__sinit_lock_release>
 800b448:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b44c:	6523      	str	r3, [r4, #80]	; 0x50
 800b44e:	4b13      	ldr	r3, [pc, #76]	; (800b49c <__sinit+0x68>)
 800b450:	4a13      	ldr	r2, [pc, #76]	; (800b4a0 <__sinit+0x6c>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	62a2      	str	r2, [r4, #40]	; 0x28
 800b456:	42a3      	cmp	r3, r4
 800b458:	bf04      	itt	eq
 800b45a:	2301      	moveq	r3, #1
 800b45c:	61a3      	streq	r3, [r4, #24]
 800b45e:	4620      	mov	r0, r4
 800b460:	f000 f820 	bl	800b4a4 <__sfp>
 800b464:	6060      	str	r0, [r4, #4]
 800b466:	4620      	mov	r0, r4
 800b468:	f000 f81c 	bl	800b4a4 <__sfp>
 800b46c:	60a0      	str	r0, [r4, #8]
 800b46e:	4620      	mov	r0, r4
 800b470:	f000 f818 	bl	800b4a4 <__sfp>
 800b474:	2200      	movs	r2, #0
 800b476:	60e0      	str	r0, [r4, #12]
 800b478:	2104      	movs	r1, #4
 800b47a:	6860      	ldr	r0, [r4, #4]
 800b47c:	f7ff ff82 	bl	800b384 <std>
 800b480:	68a0      	ldr	r0, [r4, #8]
 800b482:	2201      	movs	r2, #1
 800b484:	2109      	movs	r1, #9
 800b486:	f7ff ff7d 	bl	800b384 <std>
 800b48a:	68e0      	ldr	r0, [r4, #12]
 800b48c:	2202      	movs	r2, #2
 800b48e:	2112      	movs	r1, #18
 800b490:	f7ff ff78 	bl	800b384 <std>
 800b494:	2301      	movs	r3, #1
 800b496:	61a3      	str	r3, [r4, #24]
 800b498:	e7d2      	b.n	800b440 <__sinit+0xc>
 800b49a:	bf00      	nop
 800b49c:	0800b8b8 	.word	0x0800b8b8
 800b4a0:	0800b3cd 	.word	0x0800b3cd

0800b4a4 <__sfp>:
 800b4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a6:	4607      	mov	r7, r0
 800b4a8:	f7ff ffac 	bl	800b404 <__sfp_lock_acquire>
 800b4ac:	4b1e      	ldr	r3, [pc, #120]	; (800b528 <__sfp+0x84>)
 800b4ae:	681e      	ldr	r6, [r3, #0]
 800b4b0:	69b3      	ldr	r3, [r6, #24]
 800b4b2:	b913      	cbnz	r3, 800b4ba <__sfp+0x16>
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	f7ff ffbd 	bl	800b434 <__sinit>
 800b4ba:	3648      	adds	r6, #72	; 0x48
 800b4bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	d503      	bpl.n	800b4cc <__sfp+0x28>
 800b4c4:	6833      	ldr	r3, [r6, #0]
 800b4c6:	b30b      	cbz	r3, 800b50c <__sfp+0x68>
 800b4c8:	6836      	ldr	r6, [r6, #0]
 800b4ca:	e7f7      	b.n	800b4bc <__sfp+0x18>
 800b4cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b4d0:	b9d5      	cbnz	r5, 800b508 <__sfp+0x64>
 800b4d2:	4b16      	ldr	r3, [pc, #88]	; (800b52c <__sfp+0x88>)
 800b4d4:	60e3      	str	r3, [r4, #12]
 800b4d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b4da:	6665      	str	r5, [r4, #100]	; 0x64
 800b4dc:	f000 f847 	bl	800b56e <__retarget_lock_init_recursive>
 800b4e0:	f7ff ff96 	bl	800b410 <__sfp_lock_release>
 800b4e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b4e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4ec:	6025      	str	r5, [r4, #0]
 800b4ee:	61a5      	str	r5, [r4, #24]
 800b4f0:	2208      	movs	r2, #8
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b4f8:	f7fb fe2a 	bl	8007150 <memset>
 800b4fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b500:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b504:	4620      	mov	r0, r4
 800b506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b508:	3468      	adds	r4, #104	; 0x68
 800b50a:	e7d9      	b.n	800b4c0 <__sfp+0x1c>
 800b50c:	2104      	movs	r1, #4
 800b50e:	4638      	mov	r0, r7
 800b510:	f7ff ff62 	bl	800b3d8 <__sfmoreglue>
 800b514:	4604      	mov	r4, r0
 800b516:	6030      	str	r0, [r6, #0]
 800b518:	2800      	cmp	r0, #0
 800b51a:	d1d5      	bne.n	800b4c8 <__sfp+0x24>
 800b51c:	f7ff ff78 	bl	800b410 <__sfp_lock_release>
 800b520:	230c      	movs	r3, #12
 800b522:	603b      	str	r3, [r7, #0]
 800b524:	e7ee      	b.n	800b504 <__sfp+0x60>
 800b526:	bf00      	nop
 800b528:	0800b8b8 	.word	0x0800b8b8
 800b52c:	ffff0001 	.word	0xffff0001

0800b530 <_fwalk_reent>:
 800b530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b534:	4606      	mov	r6, r0
 800b536:	4688      	mov	r8, r1
 800b538:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b53c:	2700      	movs	r7, #0
 800b53e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b542:	f1b9 0901 	subs.w	r9, r9, #1
 800b546:	d505      	bpl.n	800b554 <_fwalk_reent+0x24>
 800b548:	6824      	ldr	r4, [r4, #0]
 800b54a:	2c00      	cmp	r4, #0
 800b54c:	d1f7      	bne.n	800b53e <_fwalk_reent+0xe>
 800b54e:	4638      	mov	r0, r7
 800b550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b554:	89ab      	ldrh	r3, [r5, #12]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d907      	bls.n	800b56a <_fwalk_reent+0x3a>
 800b55a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b55e:	3301      	adds	r3, #1
 800b560:	d003      	beq.n	800b56a <_fwalk_reent+0x3a>
 800b562:	4629      	mov	r1, r5
 800b564:	4630      	mov	r0, r6
 800b566:	47c0      	blx	r8
 800b568:	4307      	orrs	r7, r0
 800b56a:	3568      	adds	r5, #104	; 0x68
 800b56c:	e7e9      	b.n	800b542 <_fwalk_reent+0x12>

0800b56e <__retarget_lock_init_recursive>:
 800b56e:	4770      	bx	lr

0800b570 <__retarget_lock_acquire_recursive>:
 800b570:	4770      	bx	lr

0800b572 <__retarget_lock_release_recursive>:
 800b572:	4770      	bx	lr

0800b574 <__swhatbuf_r>:
 800b574:	b570      	push	{r4, r5, r6, lr}
 800b576:	460e      	mov	r6, r1
 800b578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b57c:	2900      	cmp	r1, #0
 800b57e:	b096      	sub	sp, #88	; 0x58
 800b580:	4614      	mov	r4, r2
 800b582:	461d      	mov	r5, r3
 800b584:	da08      	bge.n	800b598 <__swhatbuf_r+0x24>
 800b586:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b58a:	2200      	movs	r2, #0
 800b58c:	602a      	str	r2, [r5, #0]
 800b58e:	061a      	lsls	r2, r3, #24
 800b590:	d410      	bmi.n	800b5b4 <__swhatbuf_r+0x40>
 800b592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b596:	e00e      	b.n	800b5b6 <__swhatbuf_r+0x42>
 800b598:	466a      	mov	r2, sp
 800b59a:	f000 f903 	bl	800b7a4 <_fstat_r>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	dbf1      	blt.n	800b586 <__swhatbuf_r+0x12>
 800b5a2:	9a01      	ldr	r2, [sp, #4]
 800b5a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b5a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b5ac:	425a      	negs	r2, r3
 800b5ae:	415a      	adcs	r2, r3
 800b5b0:	602a      	str	r2, [r5, #0]
 800b5b2:	e7ee      	b.n	800b592 <__swhatbuf_r+0x1e>
 800b5b4:	2340      	movs	r3, #64	; 0x40
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	6023      	str	r3, [r4, #0]
 800b5ba:	b016      	add	sp, #88	; 0x58
 800b5bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5c0 <__smakebuf_r>:
 800b5c0:	898b      	ldrh	r3, [r1, #12]
 800b5c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5c4:	079d      	lsls	r5, r3, #30
 800b5c6:	4606      	mov	r6, r0
 800b5c8:	460c      	mov	r4, r1
 800b5ca:	d507      	bpl.n	800b5dc <__smakebuf_r+0x1c>
 800b5cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5d0:	6023      	str	r3, [r4, #0]
 800b5d2:	6123      	str	r3, [r4, #16]
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	6163      	str	r3, [r4, #20]
 800b5d8:	b002      	add	sp, #8
 800b5da:	bd70      	pop	{r4, r5, r6, pc}
 800b5dc:	ab01      	add	r3, sp, #4
 800b5de:	466a      	mov	r2, sp
 800b5e0:	f7ff ffc8 	bl	800b574 <__swhatbuf_r>
 800b5e4:	9900      	ldr	r1, [sp, #0]
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	f7ff f957 	bl	800a89c <_malloc_r>
 800b5ee:	b948      	cbnz	r0, 800b604 <__smakebuf_r+0x44>
 800b5f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5f4:	059a      	lsls	r2, r3, #22
 800b5f6:	d4ef      	bmi.n	800b5d8 <__smakebuf_r+0x18>
 800b5f8:	f023 0303 	bic.w	r3, r3, #3
 800b5fc:	f043 0302 	orr.w	r3, r3, #2
 800b600:	81a3      	strh	r3, [r4, #12]
 800b602:	e7e3      	b.n	800b5cc <__smakebuf_r+0xc>
 800b604:	4b0d      	ldr	r3, [pc, #52]	; (800b63c <__smakebuf_r+0x7c>)
 800b606:	62b3      	str	r3, [r6, #40]	; 0x28
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	6020      	str	r0, [r4, #0]
 800b60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b610:	81a3      	strh	r3, [r4, #12]
 800b612:	9b00      	ldr	r3, [sp, #0]
 800b614:	6163      	str	r3, [r4, #20]
 800b616:	9b01      	ldr	r3, [sp, #4]
 800b618:	6120      	str	r0, [r4, #16]
 800b61a:	b15b      	cbz	r3, 800b634 <__smakebuf_r+0x74>
 800b61c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b620:	4630      	mov	r0, r6
 800b622:	f000 f8d1 	bl	800b7c8 <_isatty_r>
 800b626:	b128      	cbz	r0, 800b634 <__smakebuf_r+0x74>
 800b628:	89a3      	ldrh	r3, [r4, #12]
 800b62a:	f023 0303 	bic.w	r3, r3, #3
 800b62e:	f043 0301 	orr.w	r3, r3, #1
 800b632:	81a3      	strh	r3, [r4, #12]
 800b634:	89a0      	ldrh	r0, [r4, #12]
 800b636:	4305      	orrs	r5, r0
 800b638:	81a5      	strh	r5, [r4, #12]
 800b63a:	e7cd      	b.n	800b5d8 <__smakebuf_r+0x18>
 800b63c:	0800b3cd 	.word	0x0800b3cd

0800b640 <_malloc_usable_size_r>:
 800b640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b644:	1f18      	subs	r0, r3, #4
 800b646:	2b00      	cmp	r3, #0
 800b648:	bfbc      	itt	lt
 800b64a:	580b      	ldrlt	r3, [r1, r0]
 800b64c:	18c0      	addlt	r0, r0, r3
 800b64e:	4770      	bx	lr

0800b650 <_raise_r>:
 800b650:	291f      	cmp	r1, #31
 800b652:	b538      	push	{r3, r4, r5, lr}
 800b654:	4604      	mov	r4, r0
 800b656:	460d      	mov	r5, r1
 800b658:	d904      	bls.n	800b664 <_raise_r+0x14>
 800b65a:	2316      	movs	r3, #22
 800b65c:	6003      	str	r3, [r0, #0]
 800b65e:	f04f 30ff 	mov.w	r0, #4294967295
 800b662:	bd38      	pop	{r3, r4, r5, pc}
 800b664:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b666:	b112      	cbz	r2, 800b66e <_raise_r+0x1e>
 800b668:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b66c:	b94b      	cbnz	r3, 800b682 <_raise_r+0x32>
 800b66e:	4620      	mov	r0, r4
 800b670:	f000 f830 	bl	800b6d4 <_getpid_r>
 800b674:	462a      	mov	r2, r5
 800b676:	4601      	mov	r1, r0
 800b678:	4620      	mov	r0, r4
 800b67a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b67e:	f000 b817 	b.w	800b6b0 <_kill_r>
 800b682:	2b01      	cmp	r3, #1
 800b684:	d00a      	beq.n	800b69c <_raise_r+0x4c>
 800b686:	1c59      	adds	r1, r3, #1
 800b688:	d103      	bne.n	800b692 <_raise_r+0x42>
 800b68a:	2316      	movs	r3, #22
 800b68c:	6003      	str	r3, [r0, #0]
 800b68e:	2001      	movs	r0, #1
 800b690:	e7e7      	b.n	800b662 <_raise_r+0x12>
 800b692:	2400      	movs	r4, #0
 800b694:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b698:	4628      	mov	r0, r5
 800b69a:	4798      	blx	r3
 800b69c:	2000      	movs	r0, #0
 800b69e:	e7e0      	b.n	800b662 <_raise_r+0x12>

0800b6a0 <raise>:
 800b6a0:	4b02      	ldr	r3, [pc, #8]	; (800b6ac <raise+0xc>)
 800b6a2:	4601      	mov	r1, r0
 800b6a4:	6818      	ldr	r0, [r3, #0]
 800b6a6:	f7ff bfd3 	b.w	800b650 <_raise_r>
 800b6aa:	bf00      	nop
 800b6ac:	20000024 	.word	0x20000024

0800b6b0 <_kill_r>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	4d07      	ldr	r5, [pc, #28]	; (800b6d0 <_kill_r+0x20>)
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	4608      	mov	r0, r1
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	602b      	str	r3, [r5, #0]
 800b6be:	f7f6 fc07 	bl	8001ed0 <_kill>
 800b6c2:	1c43      	adds	r3, r0, #1
 800b6c4:	d102      	bne.n	800b6cc <_kill_r+0x1c>
 800b6c6:	682b      	ldr	r3, [r5, #0]
 800b6c8:	b103      	cbz	r3, 800b6cc <_kill_r+0x1c>
 800b6ca:	6023      	str	r3, [r4, #0]
 800b6cc:	bd38      	pop	{r3, r4, r5, pc}
 800b6ce:	bf00      	nop
 800b6d0:	200006f4 	.word	0x200006f4

0800b6d4 <_getpid_r>:
 800b6d4:	f7f6 bbf4 	b.w	8001ec0 <_getpid>

0800b6d8 <__sread>:
 800b6d8:	b510      	push	{r4, lr}
 800b6da:	460c      	mov	r4, r1
 800b6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e0:	f000 f894 	bl	800b80c <_read_r>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	bfab      	itete	ge
 800b6e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6ea:	89a3      	ldrhlt	r3, [r4, #12]
 800b6ec:	181b      	addge	r3, r3, r0
 800b6ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6f2:	bfac      	ite	ge
 800b6f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6f6:	81a3      	strhlt	r3, [r4, #12]
 800b6f8:	bd10      	pop	{r4, pc}

0800b6fa <__swrite>:
 800b6fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fe:	461f      	mov	r7, r3
 800b700:	898b      	ldrh	r3, [r1, #12]
 800b702:	05db      	lsls	r3, r3, #23
 800b704:	4605      	mov	r5, r0
 800b706:	460c      	mov	r4, r1
 800b708:	4616      	mov	r6, r2
 800b70a:	d505      	bpl.n	800b718 <__swrite+0x1e>
 800b70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b710:	2302      	movs	r3, #2
 800b712:	2200      	movs	r2, #0
 800b714:	f000 f868 	bl	800b7e8 <_lseek_r>
 800b718:	89a3      	ldrh	r3, [r4, #12]
 800b71a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b71e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b722:	81a3      	strh	r3, [r4, #12]
 800b724:	4632      	mov	r2, r6
 800b726:	463b      	mov	r3, r7
 800b728:	4628      	mov	r0, r5
 800b72a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b72e:	f000 b817 	b.w	800b760 <_write_r>

0800b732 <__sseek>:
 800b732:	b510      	push	{r4, lr}
 800b734:	460c      	mov	r4, r1
 800b736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b73a:	f000 f855 	bl	800b7e8 <_lseek_r>
 800b73e:	1c43      	adds	r3, r0, #1
 800b740:	89a3      	ldrh	r3, [r4, #12]
 800b742:	bf15      	itete	ne
 800b744:	6560      	strne	r0, [r4, #84]	; 0x54
 800b746:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b74a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b74e:	81a3      	strheq	r3, [r4, #12]
 800b750:	bf18      	it	ne
 800b752:	81a3      	strhne	r3, [r4, #12]
 800b754:	bd10      	pop	{r4, pc}

0800b756 <__sclose>:
 800b756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b75a:	f000 b813 	b.w	800b784 <_close_r>
	...

0800b760 <_write_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4d07      	ldr	r5, [pc, #28]	; (800b780 <_write_r+0x20>)
 800b764:	4604      	mov	r4, r0
 800b766:	4608      	mov	r0, r1
 800b768:	4611      	mov	r1, r2
 800b76a:	2200      	movs	r2, #0
 800b76c:	602a      	str	r2, [r5, #0]
 800b76e:	461a      	mov	r2, r3
 800b770:	f7f6 fbe5 	bl	8001f3e <_write>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	d102      	bne.n	800b77e <_write_r+0x1e>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	b103      	cbz	r3, 800b77e <_write_r+0x1e>
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	bd38      	pop	{r3, r4, r5, pc}
 800b780:	200006f4 	.word	0x200006f4

0800b784 <_close_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4d06      	ldr	r5, [pc, #24]	; (800b7a0 <_close_r+0x1c>)
 800b788:	2300      	movs	r3, #0
 800b78a:	4604      	mov	r4, r0
 800b78c:	4608      	mov	r0, r1
 800b78e:	602b      	str	r3, [r5, #0]
 800b790:	f7f6 fbf1 	bl	8001f76 <_close>
 800b794:	1c43      	adds	r3, r0, #1
 800b796:	d102      	bne.n	800b79e <_close_r+0x1a>
 800b798:	682b      	ldr	r3, [r5, #0]
 800b79a:	b103      	cbz	r3, 800b79e <_close_r+0x1a>
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	bd38      	pop	{r3, r4, r5, pc}
 800b7a0:	200006f4 	.word	0x200006f4

0800b7a4 <_fstat_r>:
 800b7a4:	b538      	push	{r3, r4, r5, lr}
 800b7a6:	4d07      	ldr	r5, [pc, #28]	; (800b7c4 <_fstat_r+0x20>)
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	4608      	mov	r0, r1
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	602b      	str	r3, [r5, #0]
 800b7b2:	f7f6 fbec 	bl	8001f8e <_fstat>
 800b7b6:	1c43      	adds	r3, r0, #1
 800b7b8:	d102      	bne.n	800b7c0 <_fstat_r+0x1c>
 800b7ba:	682b      	ldr	r3, [r5, #0]
 800b7bc:	b103      	cbz	r3, 800b7c0 <_fstat_r+0x1c>
 800b7be:	6023      	str	r3, [r4, #0]
 800b7c0:	bd38      	pop	{r3, r4, r5, pc}
 800b7c2:	bf00      	nop
 800b7c4:	200006f4 	.word	0x200006f4

0800b7c8 <_isatty_r>:
 800b7c8:	b538      	push	{r3, r4, r5, lr}
 800b7ca:	4d06      	ldr	r5, [pc, #24]	; (800b7e4 <_isatty_r+0x1c>)
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	4608      	mov	r0, r1
 800b7d2:	602b      	str	r3, [r5, #0]
 800b7d4:	f7f6 fbeb 	bl	8001fae <_isatty>
 800b7d8:	1c43      	adds	r3, r0, #1
 800b7da:	d102      	bne.n	800b7e2 <_isatty_r+0x1a>
 800b7dc:	682b      	ldr	r3, [r5, #0]
 800b7de:	b103      	cbz	r3, 800b7e2 <_isatty_r+0x1a>
 800b7e0:	6023      	str	r3, [r4, #0]
 800b7e2:	bd38      	pop	{r3, r4, r5, pc}
 800b7e4:	200006f4 	.word	0x200006f4

0800b7e8 <_lseek_r>:
 800b7e8:	b538      	push	{r3, r4, r5, lr}
 800b7ea:	4d07      	ldr	r5, [pc, #28]	; (800b808 <_lseek_r+0x20>)
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	4608      	mov	r0, r1
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	602a      	str	r2, [r5, #0]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	f7f6 fbe4 	bl	8001fc4 <_lseek>
 800b7fc:	1c43      	adds	r3, r0, #1
 800b7fe:	d102      	bne.n	800b806 <_lseek_r+0x1e>
 800b800:	682b      	ldr	r3, [r5, #0]
 800b802:	b103      	cbz	r3, 800b806 <_lseek_r+0x1e>
 800b804:	6023      	str	r3, [r4, #0]
 800b806:	bd38      	pop	{r3, r4, r5, pc}
 800b808:	200006f4 	.word	0x200006f4

0800b80c <_read_r>:
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	4d07      	ldr	r5, [pc, #28]	; (800b82c <_read_r+0x20>)
 800b810:	4604      	mov	r4, r0
 800b812:	4608      	mov	r0, r1
 800b814:	4611      	mov	r1, r2
 800b816:	2200      	movs	r2, #0
 800b818:	602a      	str	r2, [r5, #0]
 800b81a:	461a      	mov	r2, r3
 800b81c:	f7f6 fb72 	bl	8001f04 <_read>
 800b820:	1c43      	adds	r3, r0, #1
 800b822:	d102      	bne.n	800b82a <_read_r+0x1e>
 800b824:	682b      	ldr	r3, [r5, #0]
 800b826:	b103      	cbz	r3, 800b82a <_read_r+0x1e>
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	bd38      	pop	{r3, r4, r5, pc}
 800b82c:	200006f4 	.word	0x200006f4

0800b830 <_init>:
 800b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b832:	bf00      	nop
 800b834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b836:	bc08      	pop	{r3}
 800b838:	469e      	mov	lr, r3
 800b83a:	4770      	bx	lr

0800b83c <_fini>:
 800b83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83e:	bf00      	nop
 800b840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b842:	bc08      	pop	{r3}
 800b844:	469e      	mov	lr, r3
 800b846:	4770      	bx	lr
