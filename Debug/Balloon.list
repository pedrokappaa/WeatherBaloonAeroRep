
Balloon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4ec  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000948  0800f6f0  0800f6f0  000106f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010038  08010038  000121ec  2**0
                  CONTENTS
  4 .ARM          00000008  08010038  08010038  00011038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010040  08010040  000121ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010040  08010040  00011040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010044  08010044  00011044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08010048  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ca4  200001ec  08010234  000121ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e90  08010234  00012e90  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000121ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6d3  00000000  00000000  0001221a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000403c  00000000  00000000  0002c8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  00030930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001168  00000000  00000000  00031fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d06f  00000000  00000000  00033120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022323  00000000  00000000  0006018f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106cfe  00000000  00000000  000824b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001891b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fb4  00000000  00000000  001891f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  001901a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ec 	.word	0x200001ec
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f6d4 	.word	0x0800f6d4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f0 	.word	0x200001f0
 800023c:	0800f6d4 	.word	0x0800f6d4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a2 	b.w	80009c4 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	460c      	mov	r4, r1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d14e      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000714:	4694      	mov	ip, r2
 8000716:	458c      	cmp	ip, r1
 8000718:	4686      	mov	lr, r0
 800071a:	fab2 f282 	clz	r2, r2
 800071e:	d962      	bls.n	80007e6 <__udivmoddi4+0xde>
 8000720:	b14a      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	4091      	lsls	r1, r2
 8000728:	fa20 f303 	lsr.w	r3, r0, r3
 800072c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000730:	4319      	orrs	r1, r3
 8000732:	fa00 fe02 	lsl.w	lr, r0, r2
 8000736:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800073a:	fa1f f68c 	uxth.w	r6, ip
 800073e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000742:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000746:	fb07 1114 	mls	r1, r7, r4, r1
 800074a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074e:	fb04 f106 	mul.w	r1, r4, r6
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f104 30ff 	add.w	r0, r4, #4294967295
 800075e:	f080 8112 	bcs.w	8000986 <__udivmoddi4+0x27e>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 810f 	bls.w	8000986 <__udivmoddi4+0x27e>
 8000768:	3c02      	subs	r4, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a59      	subs	r1, r3, r1
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb1 f0f7 	udiv	r0, r1, r7
 8000776:	fb07 1110 	mls	r1, r7, r0, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb00 f606 	mul.w	r6, r0, r6
 8000782:	429e      	cmp	r6, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x94>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 31ff 	add.w	r1, r0, #4294967295
 800078e:	f080 80fc 	bcs.w	800098a <__udivmoddi4+0x282>
 8000792:	429e      	cmp	r6, r3
 8000794:	f240 80f9 	bls.w	800098a <__udivmoddi4+0x282>
 8000798:	4463      	add	r3, ip
 800079a:	3802      	subs	r0, #2
 800079c:	1b9b      	subs	r3, r3, r6
 800079e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007a2:	2100      	movs	r1, #0
 80007a4:	b11d      	cbz	r5, 80007ae <__udivmoddi4+0xa6>
 80007a6:	40d3      	lsrs	r3, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	e9c5 3200 	strd	r3, r2, [r5]
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d905      	bls.n	80007c2 <__udivmoddi4+0xba>
 80007b6:	b10d      	cbz	r5, 80007bc <__udivmoddi4+0xb4>
 80007b8:	e9c5 0100 	strd	r0, r1, [r5]
 80007bc:	2100      	movs	r1, #0
 80007be:	4608      	mov	r0, r1
 80007c0:	e7f5      	b.n	80007ae <__udivmoddi4+0xa6>
 80007c2:	fab3 f183 	clz	r1, r3
 80007c6:	2900      	cmp	r1, #0
 80007c8:	d146      	bne.n	8000858 <__udivmoddi4+0x150>
 80007ca:	42a3      	cmp	r3, r4
 80007cc:	d302      	bcc.n	80007d4 <__udivmoddi4+0xcc>
 80007ce:	4290      	cmp	r0, r2
 80007d0:	f0c0 80f0 	bcc.w	80009b4 <__udivmoddi4+0x2ac>
 80007d4:	1a86      	subs	r6, r0, r2
 80007d6:	eb64 0303 	sbc.w	r3, r4, r3
 80007da:	2001      	movs	r0, #1
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d0e6      	beq.n	80007ae <__udivmoddi4+0xa6>
 80007e0:	e9c5 6300 	strd	r6, r3, [r5]
 80007e4:	e7e3      	b.n	80007ae <__udivmoddi4+0xa6>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	f040 8090 	bne.w	800090c <__udivmoddi4+0x204>
 80007ec:	eba1 040c 	sub.w	r4, r1, ip
 80007f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007f4:	fa1f f78c 	uxth.w	r7, ip
 80007f8:	2101      	movs	r1, #1
 80007fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80007fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000802:	fb08 4416 	mls	r4, r8, r6, r4
 8000806:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800080a:	fb07 f006 	mul.w	r0, r7, r6
 800080e:	4298      	cmp	r0, r3
 8000810:	d908      	bls.n	8000824 <__udivmoddi4+0x11c>
 8000812:	eb1c 0303 	adds.w	r3, ip, r3
 8000816:	f106 34ff 	add.w	r4, r6, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x11a>
 800081c:	4298      	cmp	r0, r3
 800081e:	f200 80cd 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 8000822:	4626      	mov	r6, r4
 8000824:	1a1c      	subs	r4, r3, r0
 8000826:	fa1f f38e 	uxth.w	r3, lr
 800082a:	fbb4 f0f8 	udiv	r0, r4, r8
 800082e:	fb08 4410 	mls	r4, r8, r0, r4
 8000832:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000836:	fb00 f707 	mul.w	r7, r0, r7
 800083a:	429f      	cmp	r7, r3
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x148>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 34ff 	add.w	r4, r0, #4294967295
 8000846:	d202      	bcs.n	800084e <__udivmoddi4+0x146>
 8000848:	429f      	cmp	r7, r3
 800084a:	f200 80b0 	bhi.w	80009ae <__udivmoddi4+0x2a6>
 800084e:	4620      	mov	r0, r4
 8000850:	1bdb      	subs	r3, r3, r7
 8000852:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000856:	e7a5      	b.n	80007a4 <__udivmoddi4+0x9c>
 8000858:	f1c1 0620 	rsb	r6, r1, #32
 800085c:	408b      	lsls	r3, r1
 800085e:	fa22 f706 	lsr.w	r7, r2, r6
 8000862:	431f      	orrs	r7, r3
 8000864:	fa20 fc06 	lsr.w	ip, r0, r6
 8000868:	fa04 f301 	lsl.w	r3, r4, r1
 800086c:	ea43 030c 	orr.w	r3, r3, ip
 8000870:	40f4      	lsrs	r4, r6
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	0c38      	lsrs	r0, r7, #16
 8000878:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800087c:	fbb4 fef0 	udiv	lr, r4, r0
 8000880:	fa1f fc87 	uxth.w	ip, r7
 8000884:	fb00 441e 	mls	r4, r0, lr, r4
 8000888:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800088c:	fb0e f90c 	mul.w	r9, lr, ip
 8000890:	45a1      	cmp	r9, r4
 8000892:	fa02 f201 	lsl.w	r2, r2, r1
 8000896:	d90a      	bls.n	80008ae <__udivmoddi4+0x1a6>
 8000898:	193c      	adds	r4, r7, r4
 800089a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800089e:	f080 8084 	bcs.w	80009aa <__udivmoddi4+0x2a2>
 80008a2:	45a1      	cmp	r9, r4
 80008a4:	f240 8081 	bls.w	80009aa <__udivmoddi4+0x2a2>
 80008a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008ac:	443c      	add	r4, r7
 80008ae:	eba4 0409 	sub.w	r4, r4, r9
 80008b2:	fa1f f983 	uxth.w	r9, r3
 80008b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ba:	fb00 4413 	mls	r4, r0, r3, r4
 80008be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c6:	45a4      	cmp	ip, r4
 80008c8:	d907      	bls.n	80008da <__udivmoddi4+0x1d2>
 80008ca:	193c      	adds	r4, r7, r4
 80008cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80008d0:	d267      	bcs.n	80009a2 <__udivmoddi4+0x29a>
 80008d2:	45a4      	cmp	ip, r4
 80008d4:	d965      	bls.n	80009a2 <__udivmoddi4+0x29a>
 80008d6:	3b02      	subs	r3, #2
 80008d8:	443c      	add	r4, r7
 80008da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008de:	fba0 9302 	umull	r9, r3, r0, r2
 80008e2:	eba4 040c 	sub.w	r4, r4, ip
 80008e6:	429c      	cmp	r4, r3
 80008e8:	46ce      	mov	lr, r9
 80008ea:	469c      	mov	ip, r3
 80008ec:	d351      	bcc.n	8000992 <__udivmoddi4+0x28a>
 80008ee:	d04e      	beq.n	800098e <__udivmoddi4+0x286>
 80008f0:	b155      	cbz	r5, 8000908 <__udivmoddi4+0x200>
 80008f2:	ebb8 030e 	subs.w	r3, r8, lr
 80008f6:	eb64 040c 	sbc.w	r4, r4, ip
 80008fa:	fa04 f606 	lsl.w	r6, r4, r6
 80008fe:	40cb      	lsrs	r3, r1
 8000900:	431e      	orrs	r6, r3
 8000902:	40cc      	lsrs	r4, r1
 8000904:	e9c5 6400 	strd	r6, r4, [r5]
 8000908:	2100      	movs	r1, #0
 800090a:	e750      	b.n	80007ae <__udivmoddi4+0xa6>
 800090c:	f1c2 0320 	rsb	r3, r2, #32
 8000910:	fa20 f103 	lsr.w	r1, r0, r3
 8000914:	fa0c fc02 	lsl.w	ip, ip, r2
 8000918:	fa24 f303 	lsr.w	r3, r4, r3
 800091c:	4094      	lsls	r4, r2
 800091e:	430c      	orrs	r4, r1
 8000920:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000924:	fa00 fe02 	lsl.w	lr, r0, r2
 8000928:	fa1f f78c 	uxth.w	r7, ip
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3110 	mls	r1, r8, r0, r3
 8000934:	0c23      	lsrs	r3, r4, #16
 8000936:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800093a:	fb00 f107 	mul.w	r1, r0, r7
 800093e:	4299      	cmp	r1, r3
 8000940:	d908      	bls.n	8000954 <__udivmoddi4+0x24c>
 8000942:	eb1c 0303 	adds.w	r3, ip, r3
 8000946:	f100 36ff 	add.w	r6, r0, #4294967295
 800094a:	d22c      	bcs.n	80009a6 <__udivmoddi4+0x29e>
 800094c:	4299      	cmp	r1, r3
 800094e:	d92a      	bls.n	80009a6 <__udivmoddi4+0x29e>
 8000950:	3802      	subs	r0, #2
 8000952:	4463      	add	r3, ip
 8000954:	1a5b      	subs	r3, r3, r1
 8000956:	b2a4      	uxth	r4, r4
 8000958:	fbb3 f1f8 	udiv	r1, r3, r8
 800095c:	fb08 3311 	mls	r3, r8, r1, r3
 8000960:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000964:	fb01 f307 	mul.w	r3, r1, r7
 8000968:	42a3      	cmp	r3, r4
 800096a:	d908      	bls.n	800097e <__udivmoddi4+0x276>
 800096c:	eb1c 0404 	adds.w	r4, ip, r4
 8000970:	f101 36ff 	add.w	r6, r1, #4294967295
 8000974:	d213      	bcs.n	800099e <__udivmoddi4+0x296>
 8000976:	42a3      	cmp	r3, r4
 8000978:	d911      	bls.n	800099e <__udivmoddi4+0x296>
 800097a:	3902      	subs	r1, #2
 800097c:	4464      	add	r4, ip
 800097e:	1ae4      	subs	r4, r4, r3
 8000980:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000984:	e739      	b.n	80007fa <__udivmoddi4+0xf2>
 8000986:	4604      	mov	r4, r0
 8000988:	e6f0      	b.n	800076c <__udivmoddi4+0x64>
 800098a:	4608      	mov	r0, r1
 800098c:	e706      	b.n	800079c <__udivmoddi4+0x94>
 800098e:	45c8      	cmp	r8, r9
 8000990:	d2ae      	bcs.n	80008f0 <__udivmoddi4+0x1e8>
 8000992:	ebb9 0e02 	subs.w	lr, r9, r2
 8000996:	eb63 0c07 	sbc.w	ip, r3, r7
 800099a:	3801      	subs	r0, #1
 800099c:	e7a8      	b.n	80008f0 <__udivmoddi4+0x1e8>
 800099e:	4631      	mov	r1, r6
 80009a0:	e7ed      	b.n	800097e <__udivmoddi4+0x276>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e799      	b.n	80008da <__udivmoddi4+0x1d2>
 80009a6:	4630      	mov	r0, r6
 80009a8:	e7d4      	b.n	8000954 <__udivmoddi4+0x24c>
 80009aa:	46d6      	mov	lr, sl
 80009ac:	e77f      	b.n	80008ae <__udivmoddi4+0x1a6>
 80009ae:	4463      	add	r3, ip
 80009b0:	3802      	subs	r0, #2
 80009b2:	e74d      	b.n	8000850 <__udivmoddi4+0x148>
 80009b4:	4606      	mov	r6, r0
 80009b6:	4623      	mov	r3, r4
 80009b8:	4608      	mov	r0, r1
 80009ba:	e70f      	b.n	80007dc <__udivmoddi4+0xd4>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	e730      	b.n	8000824 <__udivmoddi4+0x11c>
 80009c2:	bf00      	nop

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ce:	463b      	mov	r3, r7
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009da:	4b2f      	ldr	r3, [pc, #188]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 80009dc:	4a2f      	ldr	r2, [pc, #188]	@ (8000a9c <MX_ADC1_Init+0xd4>)
 80009de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009f2:	4b29      	ldr	r3, [pc, #164]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009f8:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a00:	4b25      	ldr	r3, [pc, #148]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a06:	4b24      	ldr	r3, [pc, #144]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a08:	4a25      	ldr	r2, [pc, #148]	@ (8000aa0 <MX_ADC1_Init+0xd8>)
 8000a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000a12:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a14:	2203      	movs	r2, #3
 8000a16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a26:	481c      	ldr	r0, [pc, #112]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a28:	f001 fef6 	bl	8002818 <HAL_ADC_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a32:	f001 f95b 	bl	8001cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000a3e:	2306      	movs	r3, #6
 8000a40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	4619      	mov	r1, r3
 8000a46:	4814      	ldr	r0, [pc, #80]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a48:	f002 f9ac 	bl	8002da4 <HAL_ADC_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a52:	f001 f94b 	bl	8001cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a56:	2303      	movs	r3, #3
 8000a58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4619      	mov	r1, r3
 8000a62:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a64:	f002 f99e 	bl	8002da4 <HAL_ADC_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a6e:	f001 f93d 	bl	8001cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a72:	2306      	movs	r3, #6
 8000a74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a76:	2303      	movs	r3, #3
 8000a78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a80:	f002 f990 	bl	8002da4 <HAL_ADC_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000a8a:	f001 f92f 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000208 	.word	0x20000208
 8000a9c:	40012000 	.word	0x40012000
 8000aa0:	0f000001 	.word	0x0f000001

08000aa4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	@ 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a31      	ldr	r2, [pc, #196]	@ (8000b88 <HAL_ADC_MspInit+0xe4>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d15b      	bne.n	8000b7e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ac6:	4b31      	ldr	r3, [pc, #196]	@ (8000b8c <HAL_ADC_MspInit+0xe8>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	4a30      	ldr	r2, [pc, #192]	@ (8000b8c <HAL_ADC_MspInit+0xe8>)
 8000acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b8c <HAL_ADC_MspInit+0xe8>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b2b      	ldr	r3, [pc, #172]	@ (8000b8c <HAL_ADC_MspInit+0xe8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8000b8c <HAL_ADC_MspInit+0xe8>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b28      	ldr	r3, [pc, #160]	@ (8000b8c <HAL_ADC_MspInit+0xe8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_6;
 8000af6:	2349      	movs	r3, #73	@ 0x49
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afa:	2303      	movs	r3, #3
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4821      	ldr	r0, [pc, #132]	@ (8000b90 <HAL_ADC_MspInit+0xec>)
 8000b0a:	f003 f943 	bl	8003d94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b10:	4a21      	ldr	r2, [pc, #132]	@ (8000b98 <HAL_ADC_MspInit+0xf4>)
 8000b12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b20:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b26:	4b1b      	ldr	r3, [pc, #108]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b36:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b52:	4810      	ldr	r0, [pc, #64]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b54:	f002 fd14 	bl	8003580 <HAL_DMA_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000b5e:	f001 f8c5 	bl	8001cec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a0b      	ldr	r2, [pc, #44]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b66:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b68:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2101      	movs	r1, #1
 8000b72:	2012      	movs	r0, #18
 8000b74:	f002 fccd 	bl	8003512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b78:	2012      	movs	r0, #18
 8000b7a:	f002 fce6 	bl	800354a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	@ 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40012000 	.word	0x40012000
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000
 8000b94:	20000250 	.word	0x20000250
 8000b98:	40026410 	.word	0x40026410

08000b9c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
extern uint8_t convCompleted;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 8000ba4:	4804      	ldr	r0, [pc, #16]	@ (8000bb8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000ba6:	f002 f885 	bl	8002cb4 <HAL_ADC_Stop_DMA>
	convCompleted = 1;
 8000baa:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <HAL_ADC_ConvCpltCallback+0x20>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000208 	.word	0x20000208
 8000bbc:	2000232c 	.word	0x2000232c

08000bc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_DMA_Init+0x38>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf8 <MX_DMA_Init+0x38>)
 8000bcc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_DMA_Init+0x38>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2038      	movs	r0, #56	@ 0x38
 8000be4:	f002 fc95 	bl	8003512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000be8:	2038      	movs	r0, #56	@ 0x38
 8000bea:	f002 fcae 	bl	800354a <HAL_NVIC_EnableIRQ>

}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c06:	4804      	ldr	r0, [pc, #16]	@ (8000c18 <SELECT+0x1c>)
 8000c08:	f003 fa70 	bl	80040ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f001 fddf 	bl	80027d0 <HAL_Delay>
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40020c00 	.word	0x40020c00

08000c1c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c26:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <DESELECT+0x1c>)
 8000c28:	f003 fa60 	bl	80040ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f001 fdcf 	bl	80027d0 <HAL_Delay>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40020c00 	.word	0x40020c00

08000c3c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c46:	bf00      	nop
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <SPI_TxByte+0x30>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d1f8      	bne.n	8000c48 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000c56:	1df9      	adds	r1, r7, #7
 8000c58:	2364      	movs	r3, #100	@ 0x64
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4803      	ldr	r0, [pc, #12]	@ (8000c6c <SPI_TxByte+0x30>)
 8000c5e:	f004 fc36 	bl	80054ce <HAL_SPI_Transmit>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000254c 	.word	0x2000254c

08000c70 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c7c:	bf00      	nop
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <SPI_TxBuffer+0x30>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d1f8      	bne.n	8000c7e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c8c:	887a      	ldrh	r2, [r7, #2]
 8000c8e:	2364      	movs	r3, #100	@ 0x64
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	4803      	ldr	r0, [pc, #12]	@ (8000ca0 <SPI_TxBuffer+0x30>)
 8000c94:	f004 fc1b 	bl	80054ce <HAL_SPI_Transmit>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000254c 	.word	0x2000254c

08000ca4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000caa:	23ff      	movs	r3, #255	@ 0xff
 8000cac:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000cae:	bf00      	nop
 8000cb0:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <SPI_RxByte+0x34>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d1f8      	bne.n	8000cb0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000cbe:	1dba      	adds	r2, r7, #6
 8000cc0:	1df9      	adds	r1, r7, #7
 8000cc2:	2364      	movs	r3, #100	@ 0x64
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	4803      	ldr	r0, [pc, #12]	@ (8000cd8 <SPI_RxByte+0x34>)
 8000cca:	f004 fd6e 	bl	80057aa <HAL_SPI_TransmitReceive>

	return data;
 8000cce:	79bb      	ldrb	r3, [r7, #6]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000254c 	.word	0x2000254c

08000cdc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000ce4:	f7ff ffde 	bl	8000ca4 <SPI_RxByte>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	701a      	strb	r2, [r3, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <SD_ReadyWait+0x30>)
 8000d00:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000d04:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000d06:	f7ff ffcd 	bl	8000ca4 <SPI_RxByte>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2bff      	cmp	r3, #255	@ 0xff
 8000d12:	d003      	beq.n	8000d1c <SD_ReadyWait+0x24>
 8000d14:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <SD_ReadyWait+0x30>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f4      	bne.n	8000d06 <SD_ReadyWait+0xe>

	return res;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20002618 	.word	0x20002618

08000d2c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000d32:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000d36:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000d38:	f7ff ff70 	bl	8000c1c <DESELECT>
	for(int i = 0; i < 10; i++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	e005      	b.n	8000d4e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000d42:	20ff      	movs	r0, #255	@ 0xff
 8000d44:	f7ff ff7a 	bl	8000c3c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	2b09      	cmp	r3, #9
 8000d52:	ddf6      	ble.n	8000d42 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000d54:	f7ff ff52 	bl	8000bfc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000d58:	2340      	movs	r3, #64	@ 0x40
 8000d5a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000d6c:	2395      	movs	r3, #149	@ 0x95
 8000d6e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000d70:	463b      	mov	r3, r7
 8000d72:	2106      	movs	r1, #6
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff7b 	bl	8000c70 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d7a:	e002      	b.n	8000d82 <SD_PowerOn+0x56>
	{
		cnt--;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d82:	f7ff ff8f 	bl	8000ca4 <SPI_RxByte>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d002      	beq.n	8000d92 <SD_PowerOn+0x66>
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f4      	bne.n	8000d7c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d92:	f7ff ff43 	bl	8000c1c <DESELECT>
	SPI_TxByte(0XFF);
 8000d96:	20ff      	movs	r0, #255	@ 0xff
 8000d98:	f7ff ff50 	bl	8000c3c <SPI_TxByte>

	PowerFlag = 1;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	@ (8000dac <SD_PowerOn+0x80>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200002b1 	.word	0x200002b1

08000db0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000db4:	4b03      	ldr	r3, [pc, #12]	@ (8000dc4 <SD_PowerOff+0x14>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	200002b1 	.word	0x200002b1

08000dc8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <SD_CheckPower+0x14>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	200002b1 	.word	0x200002b1

08000de0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000dea:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <SD_RxDataBlock+0x58>)
 8000dec:	22c8      	movs	r2, #200	@ 0xc8
 8000dee:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000df0:	f7ff ff58 	bl	8000ca4 <SPI_RxByte>
 8000df4:	4603      	mov	r3, r0
 8000df6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	2bff      	cmp	r3, #255	@ 0xff
 8000dfc:	d103      	bne.n	8000e06 <SD_RxDataBlock+0x26>
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <SD_RxDataBlock+0x58>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f4      	bne.n	8000df0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	2bfe      	cmp	r3, #254	@ 0xfe
 8000e0a:	d001      	beq.n	8000e10 <SD_RxDataBlock+0x30>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e00f      	b.n	8000e30 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff60 	bl	8000cdc <SPI_RxBytePtr>
	} while(len--);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	1e5a      	subs	r2, r3, #1
 8000e20:	603a      	str	r2, [r7, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f4      	bne.n	8000e10 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000e26:	f7ff ff3d 	bl	8000ca4 <SPI_RxByte>
	SPI_RxByte();
 8000e2a:	f7ff ff3b 	bl	8000ca4 <SPI_RxByte>

	return TRUE;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20002616 	.word	0x20002616

08000e3c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000e4c:	f7ff ff54 	bl	8000cf8 <SD_ReadyWait>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2bff      	cmp	r3, #255	@ 0xff
 8000e54:	d001      	beq.n	8000e5a <SD_TxDataBlock+0x1e>
 8000e56:	2300      	movs	r3, #0
 8000e58:	e02f      	b.n	8000eba <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000e5a:	78fb      	ldrb	r3, [r7, #3]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff feed 	bl	8000c3c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e66:	d020      	beq.n	8000eaa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000e68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff feff 	bl	8000c70 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000e72:	f7ff ff17 	bl	8000ca4 <SPI_RxByte>
		SPI_RxByte();
 8000e76:	f7ff ff15 	bl	8000ca4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000e7a:	e00b      	b.n	8000e94 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000e7c:	f7ff ff12 	bl	8000ca4 <SPI_RxByte>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	f003 031f 	and.w	r3, r3, #31
 8000e8a:	2b05      	cmp	r3, #5
 8000e8c:	d006      	beq.n	8000e9c <SD_TxDataBlock+0x60>
			i++;
 8000e8e:	7bbb      	ldrb	r3, [r7, #14]
 8000e90:	3301      	adds	r3, #1
 8000e92:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	2b40      	cmp	r3, #64	@ 0x40
 8000e98:	d9f0      	bls.n	8000e7c <SD_TxDataBlock+0x40>
 8000e9a:	e000      	b.n	8000e9e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e9c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e9e:	bf00      	nop
 8000ea0:	f7ff ff00 	bl	8000ca4 <SPI_RxByte>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0fa      	beq.n	8000ea0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	f003 031f 	and.w	r3, r3, #31
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d101      	bne.n	8000eb8 <SD_TxDataBlock+0x7c>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e000      	b.n	8000eba <SD_TxDataBlock+0x7e>

	return FALSE;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	6039      	str	r1, [r7, #0]
 8000ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000ece:	f7ff ff13 	bl	8000cf8 <SD_ReadyWait>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2bff      	cmp	r3, #255	@ 0xff
 8000ed6:	d001      	beq.n	8000edc <SD_SendCmd+0x1a>
 8000ed8:	23ff      	movs	r3, #255	@ 0xff
 8000eda:	e042      	b.n	8000f62 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff feac 	bl	8000c3c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	0e1b      	lsrs	r3, r3, #24
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fea6 	bl	8000c3c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	0c1b      	lsrs	r3, r3, #16
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fea0 	bl	8000c3c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	0a1b      	lsrs	r3, r3, #8
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fe9a 	bl	8000c3c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fe95 	bl	8000c3c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b40      	cmp	r3, #64	@ 0x40
 8000f16:	d102      	bne.n	8000f1e <SD_SendCmd+0x5c>
 8000f18:	2395      	movs	r3, #149	@ 0x95
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e007      	b.n	8000f2e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b48      	cmp	r3, #72	@ 0x48
 8000f22:	d102      	bne.n	8000f2a <SD_SendCmd+0x68>
 8000f24:	2387      	movs	r3, #135	@ 0x87
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e001      	b.n	8000f2e <SD_SendCmd+0x6c>
	else crc = 1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fe83 	bl	8000c3c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b4c      	cmp	r3, #76	@ 0x4c
 8000f3a:	d101      	bne.n	8000f40 <SD_SendCmd+0x7e>
 8000f3c:	f7ff feb2 	bl	8000ca4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000f40:	230a      	movs	r3, #10
 8000f42:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000f44:	f7ff feae 	bl	8000ca4 <SPI_RxByte>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000f4c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	da05      	bge.n	8000f60 <SD_SendCmd+0x9e>
 8000f54:	7bbb      	ldrb	r3, [r7, #14]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	73bb      	strb	r3, [r7, #14]
 8000f5a:	7bbb      	ldrb	r3, [r7, #14]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f1      	bne.n	8000f44 <SD_SendCmd+0x82>

	return res;
 8000f60:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SD_disk_initialize+0x14>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e0d1      	b.n	8001124 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000f80:	4b6a      	ldr	r3, [pc, #424]	@ (800112c <SD_disk_initialize+0x1c0>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <SD_disk_initialize+0x2a>
 8000f8e:	4b67      	ldr	r3, [pc, #412]	@ (800112c <SD_disk_initialize+0x1c0>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	e0c6      	b.n	8001124 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000f96:	f7ff fec9 	bl	8000d2c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f9a:	f7ff fe2f 	bl	8000bfc <SELECT>

	/* check disk type */
	type = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2040      	movs	r0, #64	@ 0x40
 8000fa6:	f7ff ff8c 	bl	8000ec2 <SD_SendCmd>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	f040 80a1 	bne.w	80010f4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000fb2:	4b5f      	ldr	r3, [pc, #380]	@ (8001130 <SD_disk_initialize+0x1c4>)
 8000fb4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fb8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000fba:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000fbe:	2048      	movs	r0, #72	@ 0x48
 8000fc0:	f7ff ff7f 	bl	8000ec2 <SD_SendCmd>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d155      	bne.n	8001076 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	e00c      	b.n	8000fea <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000fd0:	7bfc      	ldrb	r4, [r7, #15]
 8000fd2:	f7ff fe67 	bl	8000ca4 <SPI_RxByte>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	f104 0310 	add.w	r3, r4, #16
 8000fde:	443b      	add	r3, r7
 8000fe0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d9ef      	bls.n	8000fd0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000ff0:	7abb      	ldrb	r3, [r7, #10]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d17e      	bne.n	80010f4 <SD_disk_initialize+0x188>
 8000ff6:	7afb      	ldrb	r3, [r7, #11]
 8000ff8:	2baa      	cmp	r3, #170	@ 0xaa
 8000ffa:	d17b      	bne.n	80010f4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2077      	movs	r0, #119	@ 0x77
 8001000:	f7ff ff5f 	bl	8000ec2 <SD_SendCmd>
 8001004:	4603      	mov	r3, r0
 8001006:	2b01      	cmp	r3, #1
 8001008:	d807      	bhi.n	800101a <SD_disk_initialize+0xae>
 800100a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800100e:	2069      	movs	r0, #105	@ 0x69
 8001010:	f7ff ff57 	bl	8000ec2 <SD_SendCmd>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d004      	beq.n	8001024 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800101a:	4b45      	ldr	r3, [pc, #276]	@ (8001130 <SD_disk_initialize+0x1c4>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1ec      	bne.n	8000ffc <SD_disk_initialize+0x90>
 8001022:	e000      	b.n	8001026 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001024:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001026:	4b42      	ldr	r3, [pc, #264]	@ (8001130 <SD_disk_initialize+0x1c4>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d062      	beq.n	80010f4 <SD_disk_initialize+0x188>
 800102e:	2100      	movs	r1, #0
 8001030:	207a      	movs	r0, #122	@ 0x7a
 8001032:	f7ff ff46 	bl	8000ec2 <SD_SendCmd>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d15b      	bne.n	80010f4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e00c      	b.n	800105c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001042:	7bfc      	ldrb	r4, [r7, #15]
 8001044:	f7ff fe2e 	bl	8000ca4 <SPI_RxByte>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	f104 0310 	add.w	r3, r4, #16
 8001050:	443b      	add	r3, r7
 8001052:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	3301      	adds	r3, #1
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b03      	cmp	r3, #3
 8001060:	d9ef      	bls.n	8001042 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001062:	7a3b      	ldrb	r3, [r7, #8]
 8001064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SD_disk_initialize+0x104>
 800106c:	230c      	movs	r3, #12
 800106e:	e000      	b.n	8001072 <SD_disk_initialize+0x106>
 8001070:	2304      	movs	r3, #4
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	e03e      	b.n	80010f4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001076:	2100      	movs	r1, #0
 8001078:	2077      	movs	r0, #119	@ 0x77
 800107a:	f7ff ff22 	bl	8000ec2 <SD_SendCmd>
 800107e:	4603      	mov	r3, r0
 8001080:	2b01      	cmp	r3, #1
 8001082:	d808      	bhi.n	8001096 <SD_disk_initialize+0x12a>
 8001084:	2100      	movs	r1, #0
 8001086:	2069      	movs	r0, #105	@ 0x69
 8001088:	f7ff ff1b 	bl	8000ec2 <SD_SendCmd>
 800108c:	4603      	mov	r3, r0
 800108e:	2b01      	cmp	r3, #1
 8001090:	d801      	bhi.n	8001096 <SD_disk_initialize+0x12a>
 8001092:	2302      	movs	r3, #2
 8001094:	e000      	b.n	8001098 <SD_disk_initialize+0x12c>
 8001096:	2301      	movs	r3, #1
 8001098:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d10e      	bne.n	80010be <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80010a0:	2100      	movs	r1, #0
 80010a2:	2077      	movs	r0, #119	@ 0x77
 80010a4:	f7ff ff0d 	bl	8000ec2 <SD_SendCmd>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d80e      	bhi.n	80010cc <SD_disk_initialize+0x160>
 80010ae:	2100      	movs	r1, #0
 80010b0:	2069      	movs	r0, #105	@ 0x69
 80010b2:	f7ff ff06 	bl	8000ec2 <SD_SendCmd>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d107      	bne.n	80010cc <SD_disk_initialize+0x160>
 80010bc:	e00c      	b.n	80010d8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80010be:	2100      	movs	r1, #0
 80010c0:	2041      	movs	r0, #65	@ 0x41
 80010c2:	f7ff fefe 	bl	8000ec2 <SD_SendCmd>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d004      	beq.n	80010d6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <SD_disk_initialize+0x1c4>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1e2      	bne.n	800109a <SD_disk_initialize+0x12e>
 80010d4:	e000      	b.n	80010d8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80010d6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <SD_disk_initialize+0x1c4>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d007      	beq.n	80010f0 <SD_disk_initialize+0x184>
 80010e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e4:	2050      	movs	r0, #80	@ 0x50
 80010e6:	f7ff feec 	bl	8000ec2 <SD_SendCmd>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SD_disk_initialize+0x188>
 80010f0:	2300      	movs	r3, #0
 80010f2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80010f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <SD_disk_initialize+0x1c8>)
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80010fa:	f7ff fd8f 	bl	8000c1c <DESELECT>
	SPI_RxByte();
 80010fe:	f7ff fdd1 	bl	8000ca4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001102:	7bbb      	ldrb	r3, [r7, #14]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <SD_disk_initialize+0x1c0>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f023 0301 	bic.w	r3, r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <SD_disk_initialize+0x1c0>)
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	e001      	b.n	800111e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800111a:	f7ff fe49 	bl	8000db0 <SD_PowerOff>
	}

	return Stat;
 800111e:	4b03      	ldr	r3, [pc, #12]	@ (800112c <SD_disk_initialize+0x1c0>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b2db      	uxtb	r3, r3
}
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	20002616 	.word	0x20002616
 8001134:	200002b0 	.word	0x200002b0

08001138 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SD_disk_status+0x14>
 8001148:	2301      	movs	r3, #1
 800114a:	e002      	b.n	8001152 <SD_disk_status+0x1a>
	return Stat;
 800114c:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <SD_disk_status+0x28>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000000 	.word	0x20000000

08001164 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <SD_disk_read+0x1c>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <SD_disk_read+0x20>
 8001180:	2304      	movs	r3, #4
 8001182:	e051      	b.n	8001228 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001184:	4b2a      	ldr	r3, [pc, #168]	@ (8001230 <SD_disk_read+0xcc>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SD_disk_read+0x32>
 8001192:	2303      	movs	r3, #3
 8001194:	e048      	b.n	8001228 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001196:	4b27      	ldr	r3, [pc, #156]	@ (8001234 <SD_disk_read+0xd0>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d102      	bne.n	80011a8 <SD_disk_read+0x44>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	025b      	lsls	r3, r3, #9
 80011a6:	607b      	str	r3, [r7, #4]

	SELECT();
 80011a8:	f7ff fd28 	bl	8000bfc <SELECT>

	if (count == 1)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d111      	bne.n	80011d6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	2051      	movs	r0, #81	@ 0x51
 80011b6:	f7ff fe84 	bl	8000ec2 <SD_SendCmd>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d129      	bne.n	8001214 <SD_disk_read+0xb0>
 80011c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c4:	68b8      	ldr	r0, [r7, #8]
 80011c6:	f7ff fe0b 	bl	8000de0 <SD_RxDataBlock>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d021      	beq.n	8001214 <SD_disk_read+0xb0>
 80011d0:	2300      	movs	r3, #0
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	e01e      	b.n	8001214 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	2052      	movs	r0, #82	@ 0x52
 80011da:	f7ff fe72 	bl	8000ec2 <SD_SendCmd>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d117      	bne.n	8001214 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80011e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f7ff fdf9 	bl	8000de0 <SD_RxDataBlock>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00a      	beq.n	800120a <SD_disk_read+0xa6>
				buff += 512;
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80011fa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	3b01      	subs	r3, #1
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1ed      	bne.n	80011e4 <SD_disk_read+0x80>
 8001208:	e000      	b.n	800120c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800120a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800120c:	2100      	movs	r1, #0
 800120e:	204c      	movs	r0, #76	@ 0x4c
 8001210:	f7ff fe57 	bl	8000ec2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001214:	f7ff fd02 	bl	8000c1c <DESELECT>
	SPI_RxByte();
 8001218:	f7ff fd44 	bl	8000ca4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf14      	ite	ne
 8001222:	2301      	movne	r3, #1
 8001224:	2300      	moveq	r3, #0
 8001226:	b2db      	uxtb	r3, r3
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	200002b0 	.word	0x200002b0

08001238 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <SD_disk_write+0x1c>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <SD_disk_write+0x20>
 8001254:	2304      	movs	r3, #4
 8001256:	e06b      	b.n	8001330 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001258:	4b37      	ldr	r3, [pc, #220]	@ (8001338 <SD_disk_write+0x100>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SD_disk_write+0x32>
 8001266:	2303      	movs	r3, #3
 8001268:	e062      	b.n	8001330 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800126a:	4b33      	ldr	r3, [pc, #204]	@ (8001338 <SD_disk_write+0x100>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SD_disk_write+0x44>
 8001278:	2302      	movs	r3, #2
 800127a:	e059      	b.n	8001330 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800127c:	4b2f      	ldr	r3, [pc, #188]	@ (800133c <SD_disk_write+0x104>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <SD_disk_write+0x56>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	025b      	lsls	r3, r3, #9
 800128c:	607b      	str	r3, [r7, #4]

	SELECT();
 800128e:	f7ff fcb5 	bl	8000bfc <SELECT>

	if (count == 1)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d110      	bne.n	80012ba <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	2058      	movs	r0, #88	@ 0x58
 800129c:	f7ff fe11 	bl	8000ec2 <SD_SendCmd>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d13a      	bne.n	800131c <SD_disk_write+0xe4>
 80012a6:	21fe      	movs	r1, #254	@ 0xfe
 80012a8:	68b8      	ldr	r0, [r7, #8]
 80012aa:	f7ff fdc7 	bl	8000e3c <SD_TxDataBlock>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d033      	beq.n	800131c <SD_disk_write+0xe4>
			count = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	e030      	b.n	800131c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <SD_disk_write+0x104>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80012c6:	2100      	movs	r1, #0
 80012c8:	2077      	movs	r0, #119	@ 0x77
 80012ca:	f7ff fdfa 	bl	8000ec2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80012ce:	6839      	ldr	r1, [r7, #0]
 80012d0:	2057      	movs	r0, #87	@ 0x57
 80012d2:	f7ff fdf6 	bl	8000ec2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	2059      	movs	r0, #89	@ 0x59
 80012da:	f7ff fdf2 	bl	8000ec2 <SD_SendCmd>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d11b      	bne.n	800131c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012e4:	21fc      	movs	r1, #252	@ 0xfc
 80012e6:	68b8      	ldr	r0, [r7, #8]
 80012e8:	f7ff fda8 	bl	8000e3c <SD_TxDataBlock>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00a      	beq.n	8001308 <SD_disk_write+0xd0>
				buff += 512;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80012f8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1ee      	bne.n	80012e4 <SD_disk_write+0xac>
 8001306:	e000      	b.n	800130a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001308:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800130a:	21fd      	movs	r1, #253	@ 0xfd
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fd95 	bl	8000e3c <SD_TxDataBlock>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <SD_disk_write+0xe4>
			{
				count = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800131c:	f7ff fc7e 	bl	8000c1c <DESELECT>
	SPI_RxByte();
 8001320:	f7ff fcc0 	bl	8000ca4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2db      	uxtb	r3, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000000 	.word	0x20000000
 800133c:	200002b0 	.word	0x200002b0

08001340 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b08b      	sub	sp, #44	@ 0x2c
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	603a      	str	r2, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	460b      	mov	r3, r1
 800134e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SD_disk_ioctl+0x1e>
 800135a:	2304      	movs	r3, #4
 800135c:	e113      	b.n	8001586 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	2b05      	cmp	r3, #5
 8001368:	d124      	bne.n	80013b4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d012      	beq.n	8001398 <SD_disk_ioctl+0x58>
 8001372:	2b02      	cmp	r3, #2
 8001374:	dc1a      	bgt.n	80013ac <SD_disk_ioctl+0x6c>
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <SD_disk_ioctl+0x40>
 800137a:	2b01      	cmp	r3, #1
 800137c:	d006      	beq.n	800138c <SD_disk_ioctl+0x4c>
 800137e:	e015      	b.n	80013ac <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001380:	f7ff fd16 	bl	8000db0 <SD_PowerOff>
			res = RES_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800138a:	e0fa      	b.n	8001582 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 800138c:	f7ff fcce 	bl	8000d2c <SD_PowerOn>
			res = RES_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001396:	e0f4      	b.n	8001582 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	1c5c      	adds	r4, r3, #1
 800139c:	f7ff fd14 	bl	8000dc8 <SD_CheckPower>
 80013a0:	4603      	mov	r3, r0
 80013a2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80013aa:	e0ea      	b.n	8001582 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80013ac:	2304      	movs	r3, #4
 80013ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80013b2:	e0e6      	b.n	8001582 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80013b4:	4b76      	ldr	r3, [pc, #472]	@ (8001590 <SD_disk_ioctl+0x250>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SD_disk_ioctl+0x86>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e0df      	b.n	8001586 <SD_disk_ioctl+0x246>

		SELECT();
 80013c6:	f7ff fc19 	bl	8000bfc <SELECT>

		switch (ctrl)
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	2b0d      	cmp	r3, #13
 80013ce:	f200 80c9 	bhi.w	8001564 <SD_disk_ioctl+0x224>
 80013d2:	a201      	add	r2, pc, #4	@ (adr r2, 80013d8 <SD_disk_ioctl+0x98>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080014cf 	.word	0x080014cf
 80013dc:	08001411 	.word	0x08001411
 80013e0:	080014bf 	.word	0x080014bf
 80013e4:	08001565 	.word	0x08001565
 80013e8:	08001565 	.word	0x08001565
 80013ec:	08001565 	.word	0x08001565
 80013f0:	08001565 	.word	0x08001565
 80013f4:	08001565 	.word	0x08001565
 80013f8:	08001565 	.word	0x08001565
 80013fc:	08001565 	.word	0x08001565
 8001400:	08001565 	.word	0x08001565
 8001404:	080014e1 	.word	0x080014e1
 8001408:	08001505 	.word	0x08001505
 800140c:	08001529 	.word	0x08001529
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001410:	2100      	movs	r1, #0
 8001412:	2049      	movs	r0, #73	@ 0x49
 8001414:	f7ff fd55 	bl	8000ec2 <SD_SendCmd>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	f040 80a6 	bne.w	800156c <SD_disk_ioctl+0x22c>
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2110      	movs	r1, #16
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fcda 	bl	8000de0 <SD_RxDataBlock>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 809c 	beq.w	800156c <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001434:	7b3b      	ldrb	r3, [r7, #12]
 8001436:	099b      	lsrs	r3, r3, #6
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b01      	cmp	r3, #1
 800143c:	d10d      	bne.n	800145a <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800143e:	7d7b      	ldrb	r3, [r7, #21]
 8001440:	461a      	mov	r2, r3
 8001442:	7d3b      	ldrb	r3, [r7, #20]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	b29b      	uxth	r3, r3
 8001448:	4413      	add	r3, r2
 800144a:	b29b      	uxth	r3, r3
 800144c:	3301      	adds	r3, #1
 800144e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001450:	8bfb      	ldrh	r3, [r7, #30]
 8001452:	029a      	lsls	r2, r3, #10
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e02d      	b.n	80014b6 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800145a:	7c7b      	ldrb	r3, [r7, #17]
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	b2da      	uxtb	r2, r3
 8001462:	7dbb      	ldrb	r3, [r7, #22]
 8001464:	09db      	lsrs	r3, r3, #7
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4413      	add	r3, r2
 800146a:	b2da      	uxtb	r2, r3
 800146c:	7d7b      	ldrb	r3, [r7, #21]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 0306 	and.w	r3, r3, #6
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4413      	add	r3, r2
 800147a:	b2db      	uxtb	r3, r3
 800147c:	3302      	adds	r3, #2
 800147e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001482:	7d3b      	ldrb	r3, [r7, #20]
 8001484:	099b      	lsrs	r3, r3, #6
 8001486:	b2db      	uxtb	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	7cfb      	ldrb	r3, [r7, #19]
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	b29b      	uxth	r3, r3
 8001490:	4413      	add	r3, r2
 8001492:	b29a      	uxth	r2, r3
 8001494:	7cbb      	ldrb	r3, [r7, #18]
 8001496:	029b      	lsls	r3, r3, #10
 8001498:	b29b      	uxth	r3, r3
 800149a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3301      	adds	r3, #1
 80014a6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80014a8:	8bfa      	ldrh	r2, [r7, #30]
 80014aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014ae:	3b09      	subs	r3, #9
 80014b0:	409a      	lsls	r2, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80014bc:	e056      	b.n	800156c <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014c4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014cc:	e055      	b.n	800157a <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80014ce:	f7ff fc13 	bl	8000cf8 <SD_ReadyWait>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2bff      	cmp	r3, #255	@ 0xff
 80014d6:	d14b      	bne.n	8001570 <SD_disk_ioctl+0x230>
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014de:	e047      	b.n	8001570 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014e0:	2100      	movs	r1, #0
 80014e2:	2049      	movs	r0, #73	@ 0x49
 80014e4:	f7ff fced 	bl	8000ec2 <SD_SendCmd>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d142      	bne.n	8001574 <SD_disk_ioctl+0x234>
 80014ee:	2110      	movs	r1, #16
 80014f0:	6a38      	ldr	r0, [r7, #32]
 80014f2:	f7ff fc75 	bl	8000de0 <SD_RxDataBlock>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d03b      	beq.n	8001574 <SD_disk_ioctl+0x234>
 80014fc:	2300      	movs	r3, #0
 80014fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001502:	e037      	b.n	8001574 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001504:	2100      	movs	r1, #0
 8001506:	204a      	movs	r0, #74	@ 0x4a
 8001508:	f7ff fcdb 	bl	8000ec2 <SD_SendCmd>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d132      	bne.n	8001578 <SD_disk_ioctl+0x238>
 8001512:	2110      	movs	r1, #16
 8001514:	6a38      	ldr	r0, [r7, #32]
 8001516:	f7ff fc63 	bl	8000de0 <SD_RxDataBlock>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d02b      	beq.n	8001578 <SD_disk_ioctl+0x238>
 8001520:	2300      	movs	r3, #0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001526:	e027      	b.n	8001578 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001528:	2100      	movs	r1, #0
 800152a:	207a      	movs	r0, #122	@ 0x7a
 800152c:	f7ff fcc9 	bl	8000ec2 <SD_SendCmd>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d116      	bne.n	8001564 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001536:	2300      	movs	r3, #0
 8001538:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800153c:	e00b      	b.n	8001556 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800153e:	6a3c      	ldr	r4, [r7, #32]
 8001540:	1c63      	adds	r3, r4, #1
 8001542:	623b      	str	r3, [r7, #32]
 8001544:	f7ff fbae 	bl	8000ca4 <SPI_RxByte>
 8001548:	4603      	mov	r3, r0
 800154a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800154c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001550:	3301      	adds	r3, #1
 8001552:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001556:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800155a:	2b03      	cmp	r3, #3
 800155c:	d9ef      	bls.n	800153e <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001564:	2304      	movs	r3, #4
 8001566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800156a:	e006      	b.n	800157a <SD_disk_ioctl+0x23a>
			break;
 800156c:	bf00      	nop
 800156e:	e004      	b.n	800157a <SD_disk_ioctl+0x23a>
			break;
 8001570:	bf00      	nop
 8001572:	e002      	b.n	800157a <SD_disk_ioctl+0x23a>
			break;
 8001574:	bf00      	nop
 8001576:	e000      	b.n	800157a <SD_disk_ioctl+0x23a>
			break;
 8001578:	bf00      	nop
		}

		DESELECT();
 800157a:	f7ff fb4f 	bl	8000c1c <DESELECT>
		SPI_RxByte();
 800157e:	f7ff fb91 	bl	8000ca4 <SPI_RxByte>
	}

	return res;
 8001582:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001586:	4618      	mov	r0, r3
 8001588:	372c      	adds	r7, #44	@ 0x2c
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	bf00      	nop
 8001590:	20000000 	.word	0x20000000

08001594 <SDCardInit>:
FATFS *pfs;
DWORD fre_clust;
uint32_t totalSpace, freeSpace;

bool SDCardInit()
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	// Mount SD Card
	if(f_mount(&fs, "", 0) != FR_OK)
 8001598:	2200      	movs	r2, #0
 800159a:	490c      	ldr	r1, [pc, #48]	@ (80015cc <SDCardInit+0x38>)
 800159c:	480c      	ldr	r0, [pc, #48]	@ (80015d0 <SDCardInit+0x3c>)
 800159e:	f008 ff4b 	bl	800a438 <f_mount>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SDCardInit+0x18>
		return false;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e00d      	b.n	80015c8 <SDCardInit+0x34>

	HAL_Delay(10);
 80015ac:	200a      	movs	r0, #10
 80015ae:	f001 f90f 	bl	80027d0 <HAL_Delay>

	// Open file to write
	if(f_open(&fil, "data.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 80015b2:	2213      	movs	r2, #19
 80015b4:	4907      	ldr	r1, [pc, #28]	@ (80015d4 <SDCardInit+0x40>)
 80015b6:	4808      	ldr	r0, [pc, #32]	@ (80015d8 <SDCardInit+0x44>)
 80015b8:	f008 ff84 	bl	800a4c4 <f_open>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SDCardInit+0x32>
		return false;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <SDCardInit+0x34>

	return true;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	0800f6f0 	.word	0x0800f6f0
 80015d0:	200002b4 	.word	0x200002b4
 80015d4:	0800f6f4 	.word	0x0800f6f4
 80015d8:	200012ec 	.word	0x200012ec

080015dc <SDCardWrite>:

bool SDCardWrite(const char* msg)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	f_puts(msg, &fil);
 80015e4:	4905      	ldr	r1, [pc, #20]	@ (80015fc <SDCardWrite+0x20>)
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f009 fc9c 	bl	800af24 <f_puts>
	f_sync(&fil);
 80015ec:	4803      	ldr	r0, [pc, #12]	@ (80015fc <SDCardWrite+0x20>)
 80015ee:	f009 fac5 	bl	800ab7c <f_sync>

	return true;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200012ec 	.word	0x200012ec

08001600 <SDCardHasLowSpace>:

bool SDCardHasLowSpace()
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	if(f_getfree("", &fre_clust, &pfs) != FR_OK)
 8001604:	4a14      	ldr	r2, [pc, #80]	@ (8001658 <SDCardHasLowSpace+0x58>)
 8001606:	4915      	ldr	r1, [pc, #84]	@ (800165c <SDCardHasLowSpace+0x5c>)
 8001608:	4815      	ldr	r0, [pc, #84]	@ (8001660 <SDCardHasLowSpace+0x60>)
 800160a:	f009 fb5f 	bl	800accc <f_getfree>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SDCardHasLowSpace+0x18>
		return true;
 8001614:	2301      	movs	r3, #1
 8001616:	e01c      	b.n	8001652 <SDCardHasLowSpace+0x52>

	freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <SDCardHasLowSpace+0x58>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	895b      	ldrh	r3, [r3, #10]
 800161e:	461a      	mov	r2, r3
 8001620:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <SDCardHasLowSpace+0x5c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001630:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001634:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001638:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800163c:	ee17 2a90 	vmov	r2, s15
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <SDCardHasLowSpace+0x64>)
 8001642:	601a      	str	r2, [r3, #0]
	// totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);

	if(freeSpace < 1) // < 1kb
 8001644:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <SDCardHasLowSpace+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <SDCardHasLowSpace+0x50>
		return true;
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <SDCardHasLowSpace+0x52>
	else
		return false;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000231c 	.word	0x2000231c
 800165c:	20002320 	.word	0x20002320
 8001660:	0800f6f0 	.word	0x0800f6f0
 8001664:	20002324 	.word	0x20002324

08001668 <SDCardEnd>:

bool SDCardEnd()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	// Close file
	if(f_close(&fil) != FR_OK)
 800166c:	480b      	ldr	r0, [pc, #44]	@ (800169c <SDCardEnd+0x34>)
 800166e:	f009 fb03 	bl	800ac78 <f_close>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SDCardEnd+0x14>
		return false;
 8001678:	2300      	movs	r3, #0
 800167a:	e00d      	b.n	8001698 <SDCardEnd+0x30>

	HAL_Delay(10);
 800167c:	200a      	movs	r0, #10
 800167e:	f001 f8a7 	bl	80027d0 <HAL_Delay>

	// Unmount SDCARD
	if(f_mount(NULL, "", 1) != FR_OK)
 8001682:	2201      	movs	r2, #1
 8001684:	4906      	ldr	r1, [pc, #24]	@ (80016a0 <SDCardEnd+0x38>)
 8001686:	2000      	movs	r0, #0
 8001688:	f008 fed6 	bl	800a438 <f_mount>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SDCardEnd+0x2e>
		return false;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <SDCardEnd+0x30>

	return true;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200012ec 	.word	0x200012ec
 80016a0:	0800f6f0 	.word	0x0800f6f0

080016a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08e      	sub	sp, #56	@ 0x38
 80016a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ba:	4b6e      	ldr	r3, [pc, #440]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a6d      	ldr	r2, [pc, #436]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016c0:	f043 0310 	orr.w	r3, r3, #16
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b6b      	ldr	r3, [pc, #428]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	623b      	str	r3, [r7, #32]
 80016d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	4b68      	ldr	r3, [pc, #416]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a67      	ldr	r2, [pc, #412]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b65      	ldr	r3, [pc, #404]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ea:	4b62      	ldr	r3, [pc, #392]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a61      	ldr	r2, [pc, #388]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016f0:	f043 0320 	orr.w	r3, r3, #32
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0320 	and.w	r3, r3, #32
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001702:	4b5c      	ldr	r3, [pc, #368]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a5b      	ldr	r2, [pc, #364]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b59      	ldr	r3, [pc, #356]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	4b56      	ldr	r3, [pc, #344]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a55      	ldr	r2, [pc, #340]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b53      	ldr	r3, [pc, #332]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4b50      	ldr	r3, [pc, #320]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a4f      	ldr	r2, [pc, #316]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b4d      	ldr	r3, [pc, #308]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800174a:	4b4a      	ldr	r3, [pc, #296]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a49      	ldr	r2, [pc, #292]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b47      	ldr	r3, [pc, #284]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001762:	4b44      	ldr	r3, [pc, #272]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a43      	ldr	r2, [pc, #268]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b41      	ldr	r3, [pc, #260]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2110      	movs	r1, #16
 800177e:	483e      	ldr	r0, [pc, #248]	@ (8001878 <MX_GPIO_Init+0x1d4>)
 8001780:	f002 fcb4 	bl	80040ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	2110      	movs	r1, #16
 8001788:	483c      	ldr	r0, [pc, #240]	@ (800187c <MX_GPIO_Init+0x1d8>)
 800178a:	f002 fcaf 	bl	80040ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	2104      	movs	r1, #4
 8001792:	483b      	ldr	r0, [pc, #236]	@ (8001880 <MX_GPIO_Init+0x1dc>)
 8001794:	f002 fcaa 	bl	80040ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|LD3_Pin|GPIO_PIN_6
 8001798:	2200      	movs	r2, #0
 800179a:	f244 01c3 	movw	r1, #16579	@ 0x40c3
 800179e:	4839      	ldr	r0, [pc, #228]	@ (8001884 <MX_GPIO_Init+0x1e0>)
 80017a0:	f002 fca4 	bl	80040ec <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017aa:	4837      	ldr	r0, [pc, #220]	@ (8001888 <MX_GPIO_Init+0x1e4>)
 80017ac:	f002 fc9e 	bl	80040ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80017b0:	2310      	movs	r3, #16
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c4:	4619      	mov	r1, r3
 80017c6:	482c      	ldr	r0, [pc, #176]	@ (8001878 <MX_GPIO_Init+0x1d4>)
 80017c8:	f002 fae4 	bl	8003d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e0:	4619      	mov	r1, r3
 80017e2:	4827      	ldr	r0, [pc, #156]	@ (8001880 <MX_GPIO_Init+0x1dc>)
 80017e4:	f002 fad6 	bl	8003d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017e8:	2310      	movs	r3, #16
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	481f      	ldr	r0, [pc, #124]	@ (800187c <MX_GPIO_Init+0x1d8>)
 8001800:	f002 fac8 	bl	8003d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001804:	2304      	movs	r3, #4
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001818:	4619      	mov	r1, r3
 800181a:	4819      	ldr	r0, [pc, #100]	@ (8001880 <MX_GPIO_Init+0x1dc>)
 800181c:	f002 faba 	bl	8003d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB1 PBPin PB6
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_1|LD3_Pin|GPIO_PIN_6
 8001820:	f244 03c3 	movw	r3, #16579	@ 0x40c3
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	4812      	ldr	r0, [pc, #72]	@ (8001884 <MX_GPIO_Init+0x1e0>)
 800183a:	f002 faab 	bl	8003d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800183e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	480c      	ldr	r0, [pc, #48]	@ (8001888 <MX_GPIO_Init+0x1e4>)
 8001858:	f002 fa9c 	bl	8003d94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	2028      	movs	r0, #40	@ 0x28
 8001862:	f001 fe56 	bl	8003512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001866:	2028      	movs	r0, #40	@ 0x28
 8001868:	f001 fe6f 	bl	800354a <HAL_NVIC_EnableIRQ>

}
 800186c:	bf00      	nop
 800186e:	3738      	adds	r7, #56	@ 0x38
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	40021000 	.word	0x40021000
 800187c:	40021400 	.word	0x40021400
 8001880:	40020800 	.word	0x40020800
 8001884:	40020400 	.word	0x40020400
 8001888:	40020c00 	.word	0x40020c00

0800188c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */
float volts = 0;
int butPressed = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800189c:	d102      	bne.n	80018a4 <HAL_GPIO_EXTI_Callback+0x18>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		send_UART("{to:'Log',from:'Mst',reci:'headerValsCsv',dir:'g',rc:''}\r");
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		*/

		butPressed = 1;
 800189e:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x24>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]
	}
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	20002328 	.word	0x20002328

080018b4 <isButPressed>:

int isButPressed()
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
	return butPressed;
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <isButPressed+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20002328 	.word	0x20002328

080018cc <butClear>:

void butClear()
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
	butPressed = 0;
 80018d0:	4b03      	ldr	r3, [pc, #12]	@ (80018e0 <butClear+0x14>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	20002328 	.word	0x20002328

080018e4 <Build_MSG>:
int time; // to save the time -

bool flagSDEnd = false; //diz se o SD card End ja foi realizado
bool switchFont = false;

void Build_MSG(){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af06      	add	r7, sp, #24
	//builds the Message that will be sent from the STM(Master) to the Arduino(Slave)
	sprintf(MSG, "%d;%.1f;%.1f;%.1f\n",time, V_LC, V_AA, V_9V);
 80018ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <Build_MSG+0x44>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a0f      	ldr	r2, [pc, #60]	@ (800192c <Build_MSG+0x48>)
 80018f0:	edd2 7a00 	vldr	s15, [r2]
 80018f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001930 <Build_MSG+0x4c>)
 80018fa:	edd2 6a00 	vldr	s13, [r2]
 80018fe:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001902:	4a0c      	ldr	r2, [pc, #48]	@ (8001934 <Build_MSG+0x50>)
 8001904:	edd2 5a00 	vldr	s11, [r2]
 8001908:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800190c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001910:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001914:	ed8d 7b00 	vstr	d7, [sp]
 8001918:	461a      	mov	r2, r3
 800191a:	4907      	ldr	r1, [pc, #28]	@ (8001938 <Build_MSG+0x54>)
 800191c:	4807      	ldr	r0, [pc, #28]	@ (800193c <Build_MSG+0x58>)
 800191e:	f00a fb4d 	bl	800bfbc <siprintf>
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20002544 	.word	0x20002544
 800192c:	20002538 	.word	0x20002538
 8001930:	2000253c 	.word	0x2000253c
 8001934:	20002540 	.word	0x20002540
 8001938:	0800f700 	.word	0x0800f700
 800193c:	20002338 	.word	0x20002338

08001940 <convert_adc_to_physicalvalue>:


void convert_adc_to_physicalvalue(){
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
	float aux2, aux3, aux4;

	//Pass ADC result from bits to tension
	//aux0 = ADC_results[0]*3.3/4096; //ADC result in Volts
	//aux1 = ADC_results[1]*3.3/4096;
	aux2 = ADC_results[0]*3.3/4096;
 8001946:	4b30      	ldr	r3, [pc, #192]	@ (8001a08 <convert_adc_to_physicalvalue+0xc8>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001952:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 80019f8 <convert_adc_to_physicalvalue+0xb8>
 8001956:	ee27 6b06 	vmul.f64	d6, d7, d6
 800195a:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001a00 <convert_adc_to_physicalvalue+0xc0>
 800195e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001962:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001966:	edc7 7a03 	vstr	s15, [r7, #12]
	aux3 = ADC_results[1]*3.3/4096;
 800196a:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <convert_adc_to_physicalvalue+0xc8>)
 800196c:	885b      	ldrh	r3, [r3, #2]
 800196e:	ee07 3a90 	vmov	s15, r3
 8001972:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001976:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 80019f8 <convert_adc_to_physicalvalue+0xb8>
 800197a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800197e:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8001a00 <convert_adc_to_physicalvalue+0xc0>
 8001982:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001986:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800198a:	edc7 7a02 	vstr	s15, [r7, #8]
	aux4 = ADC_results[2]*3.3/4096;
 800198e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <convert_adc_to_physicalvalue+0xc8>)
 8001990:	889b      	ldrh	r3, [r3, #4]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800199a:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 80019f8 <convert_adc_to_physicalvalue+0xb8>
 800199e:	ee27 6b06 	vmul.f64	d6, d7, d6
 80019a2:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8001a00 <convert_adc_to_physicalvalue+0xc0>
 80019a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019ae:	edc7 7a01 	vstr	s15, [r7, #4]
	//Correction factor for V_9V: 3

	//Convert ADC result to temperature and voltages
	//dT = 34.469*aux0 - 67.653; //STM temperature variation
	//T_PT100 = 34.469*aux1 - 67.653; //PT100 temperature
	V_LC = aux2 * 3;
 80019b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80019ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019be:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <convert_adc_to_physicalvalue+0xcc>)
 80019c0:	edc3 7a00 	vstr	s15, [r3]
	V_AA = aux3 * 2;
 80019c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019cc:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <convert_adc_to_physicalvalue+0xd0>)
 80019ce:	edc3 7a00 	vstr	s15, [r3]
	V_9V = aux4 * 3.3;
 80019d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019da:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 80019f8 <convert_adc_to_physicalvalue+0xb8>
 80019de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <convert_adc_to_physicalvalue+0xd4>)
 80019e8:	edc3 7a00 	vstr	s15, [r3]

}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	66666666 	.word	0x66666666
 80019fc:	400a6666 	.word	0x400a6666
 8001a00:	00000000 	.word	0x00000000
 8001a04:	40b00000 	.word	0x40b00000
 8001a08:	20002330 	.word	0x20002330
 8001a0c:	20002538 	.word	0x20002538
 8001a10:	2000253c 	.word	0x2000253c
 8001a14:	20002540 	.word	0x20002540

08001a18 <print_adc>:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); // CS High => End communication

}

void print_adc()
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	reset_UART();
 8001a1c:	f000 fd6c 	bl	80024f8 <reset_UART>
	send_UART(MSG);
 8001a20:	4802      	ldr	r0, [pc, #8]	@ (8001a2c <print_adc+0x14>)
 8001a22:	f000 fd81 	bl	8002528 <send_UART>
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20002338 	.word	0x20002338

08001a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a34:	f000 fe6f 	bl	8002716 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a38:	f000 f8f0 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a3c:	f7ff fe32 	bl	80016a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a40:	f7ff f8be 	bl	8000bc0 <MX_DMA_Init>
  MX_TIM1_Init();
 8001a44:	f000 fbfc 	bl	8002240 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001a48:	f000 f956 	bl	8001cf8 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001a4c:	f006 faae 	bl	8007fac <MX_FATFS_Init>
  MX_SPI4_Init();
 8001a50:	f000 f990 	bl	8001d74 <MX_SPI4_Init>
  MX_ADC1_Init();
 8001a54:	f7fe ffb8 	bl	80009c8 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001a58:	f000 fc9e 	bl	8002398 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a62:	485f      	ldr	r0, [pc, #380]	@ (8001be0 <main+0x1b0>)
 8001a64:	f002 fb42 	bl	80040ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Acionado para alimentarmos a STM
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	485c      	ldr	r0, [pc, #368]	@ (8001be0 <main+0x1b0>)
 8001a6e:	f002 fb3d 	bl	80040ec <HAL_GPIO_WritePin>

  while(!isButPressed()); //wait to press STM bottom to feed LoRa and Datalogger
 8001a72:	bf00      	nop
 8001a74:	f7ff ff1e 	bl	80018b4 <isButPressed>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0fa      	beq.n	8001a74 <main+0x44>
  butClear();
 8001a7e:	f7ff ff25 	bl	80018cc <butClear>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//O Led vermelho (led dos erros) desligado
 8001a82:	2200      	movs	r2, #0
 8001a84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a88:	4855      	ldr	r0, [pc, #340]	@ (8001be0 <main+0x1b0>)
 8001a8a:	f002 fb2f 	bl	80040ec <HAL_GPIO_WritePin>
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);//Feed Lora
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET); //Feed Datalogger
 8001a8e:	2201      	movs	r2, #1
 8001a90:	2110      	movs	r1, #16
 8001a92:	4854      	ldr	r0, [pc, #336]	@ (8001be4 <main+0x1b4>)
 8001a94:	f002 fb2a 	bl	80040ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //Alimentacao de BackUp off
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2140      	movs	r1, #64	@ 0x40
 8001a9c:	4850      	ldr	r0, [pc, #320]	@ (8001be0 <main+0x1b0>)
 8001a9e:	f002 fb25 	bl	80040ec <HAL_GPIO_WritePin>


  if(!SDCardInit()){
 8001aa2:	f7ff fd77 	bl	8001594 <SDCardInit>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f083 0301 	eor.w	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <main+0x8e>
	  //Error - Turn on Error Led
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ab8:	4849      	ldr	r0, [pc, #292]	@ (8001be0 <main+0x1b0>)
 8001aba:	f002 fb17 	bl	80040ec <HAL_GPIO_WritePin>
  }

  HAL_Delay(3000);
 8001abe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001ac2:	f000 fe85 	bl	80027d0 <HAL_Delay>

  SDCardWrite("time;V_LC;V_AA;V_9V\n");
 8001ac6:	4848      	ldr	r0, [pc, #288]	@ (8001be8 <main+0x1b8>)
 8001ac8:	f7ff fd88 	bl	80015dc <SDCardWrite>

//  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); //CS of SPI4 High => No communication between STM and Arduino
  time = 0; //start time counting
 8001acc:	4b47      	ldr	r3, [pc, #284]	@ (8001bec <main+0x1bc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]


	reset_UART();
 8001ad2:	f000 fd11 	bl	80024f8 <reset_UART>
	send_UART(PROMPT);
 8001ad6:	4846      	ldr	r0, [pc, #280]	@ (8001bf0 <main+0x1c0>)
 8001ad8:	f000 fd26 	bl	8002528 <send_UART>
	reset_UART();
 8001adc:	f000 fd0c 	bl	80024f8 <reset_UART>
	send_UART("time;V_LC;V_AA;V_9V");
 8001ae0:	4844      	ldr	r0, [pc, #272]	@ (8001bf4 <main+0x1c4>)
 8001ae2:	f000 fd21 	bl	8002528 <send_UART>

	HAL_Delay(1000);
 8001ae6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aea:	f000 fe71 	bl	80027d0 <HAL_Delay>
	SDCardWrite("Hello\n");

	if(SDCardEnd())
		send_UART("true");
*/
  HAL_TIM_Base_Start_IT(&htim1); //start timer
 8001aee:	4842      	ldr	r0, [pc, #264]	@ (8001bf8 <main+0x1c8>)
 8001af0:	f004 fa4e 	bl	8005f90 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

	while (1)
	{

		if(ReturnFlagTimer()){
 8001af4:	f000 fc1e 	bl	8002334 <ReturnFlagTimer>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d047      	beq.n	8001b8e <main+0x15e>
			//2s Passed
			time += 2; //add 2s to time since 2s passed from the last measure
 8001afe:	4b3b      	ldr	r3, [pc, #236]	@ (8001bec <main+0x1bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	3302      	adds	r3, #2
 8001b04:	4a39      	ldr	r2, [pc, #228]	@ (8001bec <main+0x1bc>)
 8001b06:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC_results, 3);
 8001b08:	2203      	movs	r2, #3
 8001b0a:	493c      	ldr	r1, [pc, #240]	@ (8001bfc <main+0x1cc>)
 8001b0c:	483c      	ldr	r0, [pc, #240]	@ (8001c00 <main+0x1d0>)
 8001b0e:	f000 ffd7 	bl	8002ac0 <HAL_ADC_Start_DMA>

			while(!convCompleted);
 8001b12:	bf00      	nop
 8001b14:	4b3b      	ldr	r3, [pc, #236]	@ (8001c04 <main+0x1d4>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0fb      	beq.n	8001b14 <main+0xe4>

			convCompleted = 0;
 8001b1c:	4b39      	ldr	r3, [pc, #228]	@ (8001c04 <main+0x1d4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]

			convert_adc_to_physicalvalue(); // Convert adc values to Temperature and Voltages
 8001b22:	f7ff ff0d 	bl	8001940 <convert_adc_to_physicalvalue>
			Build_MSG(); //build Message before sending
 8001b26:	f7ff fedd 	bl	80018e4 <Build_MSG>
			print_adc();
 8001b2a:	f7ff ff75 	bl	8001a18 <print_adc>

			if(!flagSDEnd){
 8001b2e:	4b36      	ldr	r3, [pc, #216]	@ (8001c08 <main+0x1d8>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	f083 0301 	eor.w	r3, r3, #1
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d026      	beq.n	8001b8a <main+0x15a>
				//Ainda nao foi realizado o End do cartao
				if(SDCardHasLowSpace()){
 8001b3c:	f7ff fd60 	bl	8001600 <SDCardHasLowSpace>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d012      	beq.n	8001b6c <main+0x13c>
					//Low space at the SD card => End SD card
					if(!SDCardEnd()){
 8001b46:	f7ff fd8f 	bl	8001668 <SDCardEnd>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f083 0301 	eor.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <main+0x134>
						//Nao conseguiu realizar o End com sucesso
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Acidionar led de erro
 8001b56:	2201      	movs	r2, #1
 8001b58:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b5c:	4820      	ldr	r0, [pc, #128]	@ (8001be0 <main+0x1b0>)
 8001b5e:	f002 fac5 	bl	80040ec <HAL_GPIO_WritePin>
 8001b62:	e012      	b.n	8001b8a <main+0x15a>
					}
					else{
						//Realizou-se o End do cartao
						flagSDEnd = true;
 8001b64:	4b28      	ldr	r3, [pc, #160]	@ (8001c08 <main+0x1d8>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	e00e      	b.n	8001b8a <main+0x15a>
					}
				}
				else{
					//O cartao tem espaco ainda
					if(!SDCardWrite(MSG)){
 8001b6c:	4827      	ldr	r0, [pc, #156]	@ (8001c0c <main+0x1dc>)
 8001b6e:	f7ff fd35 	bl	80015dc <SDCardWrite>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f083 0301 	eor.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <main+0x15a>
						//Nao conseguiu escrever
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Acidionar led de erro
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b84:	4816      	ldr	r0, [pc, #88]	@ (8001be0 <main+0x1b0>)
 8001b86:	f002 fab1 	bl	80040ec <HAL_GPIO_WritePin>
			}


//			Send_MSG(); //Send Message to Slave(Arduino)

			ClearFlagTimer(); //set flag = false
 8001b8a:	f000 fbdf 	bl	800234c <ClearFlagTimer>
		}


		//Ver se e necessario trocar a fonte de alimentacao do datalogger
		if(V_9V <= MINIMUM_VOLTAGE_DATALOGGER){
 8001b8e:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <main+0x1e0>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b98:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8001bd8 <main+0x1a8>
 8001b9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba4:	d816      	bhi.n	8001bd4 <main+0x1a4>
			//A alimentacao do datalogger deve ser trocada para a backup
			if (!switchFont){
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <main+0x1e4>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	f083 0301 	eor.w	r3, r3, #1
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d09f      	beq.n	8001af4 <main+0xc4>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Ativar a Alimentacao de backup
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2140      	movs	r1, #64	@ 0x40
 8001bb8:	4809      	ldr	r0, [pc, #36]	@ (8001be0 <main+0x1b0>)
 8001bba:	f002 fa97 	bl	80040ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET); //Desligar a alimentacao inicial do datalogger
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2110      	movs	r1, #16
 8001bc2:	4808      	ldr	r0, [pc, #32]	@ (8001be4 <main+0x1b4>)
 8001bc4:	f002 fa92 	bl	80040ec <HAL_GPIO_WritePin>
				SDCardWrite("Switched to Backup Battery\n");
 8001bc8:	4813      	ldr	r0, [pc, #76]	@ (8001c18 <main+0x1e8>)
 8001bca:	f7ff fd07 	bl	80015dc <SDCardWrite>
				switchFont = true;
 8001bce:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <main+0x1e4>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
		if(ReturnFlagTimer()){
 8001bd4:	e78e      	b.n	8001af4 <main+0xc4>
 8001bd6:	bf00      	nop
 8001bd8:	33333333 	.word	0x33333333
 8001bdc:	401d3333 	.word	0x401d3333
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40021400 	.word	0x40021400
 8001be8:	0800f714 	.word	0x0800f714
 8001bec:	20002544 	.word	0x20002544
 8001bf0:	0800f72c 	.word	0x0800f72c
 8001bf4:	0800f730 	.word	0x0800f730
 8001bf8:	20002620 	.word	0x20002620
 8001bfc:	20002330 	.word	0x20002330
 8001c00:	20000208 	.word	0x20000208
 8001c04:	2000232c 	.word	0x2000232c
 8001c08:	20002548 	.word	0x20002548
 8001c0c:	20002338 	.word	0x20002338
 8001c10:	20002540 	.word	0x20002540
 8001c14:	20002549 	.word	0x20002549
 8001c18:	0800f744 	.word	0x0800f744

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b094      	sub	sp, #80	@ 0x50
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	2234      	movs	r2, #52	@ 0x34
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f00a fa29 	bl	800c082 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c30:	f107 0308 	add.w	r3, r7, #8
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	4b28      	ldr	r3, [pc, #160]	@ (8001ce4 <SystemClock_Config+0xc8>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c44:	4a27      	ldr	r2, [pc, #156]	@ (8001ce4 <SystemClock_Config+0xc8>)
 8001c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ce4 <SystemClock_Config+0xc8>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c58:	4b23      	ldr	r3, [pc, #140]	@ (8001ce8 <SystemClock_Config+0xcc>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c60:	4a21      	ldr	r2, [pc, #132]	@ (8001ce8 <SystemClock_Config+0xcc>)
 8001c62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <SystemClock_Config+0xcc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c80:	2302      	movs	r3, #2
 8001c82:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c84:	2300      	movs	r3, #0
 8001c86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c88:	2308      	movs	r3, #8
 8001c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c8c:	2360      	movs	r3, #96	@ 0x60
 8001c8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001c90:	2306      	movs	r3, #6
 8001c92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c94:	2307      	movs	r3, #7
 8001c96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f002 fa6f 	bl	8004184 <HAL_RCC_OscConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cac:	f000 f81e 	bl	8001cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001cb8:	2380      	movs	r3, #128	@ 0x80
 8001cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cc4:	f107 0308 	add.w	r3, r7, #8
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f002 fd08 	bl	80046e0 <HAL_RCC_ClockConfig>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001cd6:	f000 f809 	bl	8001cec <Error_Handler>
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3750      	adds	r7, #80	@ 0x50
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40007000 	.word	0x40007000

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <Error_Handler+0x8>

08001cf8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <MX_SPI1_Init+0x74>)
 8001cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8001d70 <MX_SPI1_Init+0x78>)
 8001d00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <MX_SPI1_Init+0x74>)
 8001d04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d0a:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <MX_SPI1_Init+0x74>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d10:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <MX_SPI1_Init+0x74>)
 8001d12:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001d16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d18:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <MX_SPI1_Init+0x74>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d1e:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <MX_SPI1_Init+0x74>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d24:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <MX_SPI1_Init+0x74>)
 8001d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <MX_SPI1_Init+0x74>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <MX_SPI1_Init+0x74>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <MX_SPI1_Init+0x74>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <MX_SPI1_Init+0x74>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <MX_SPI1_Init+0x74>)
 8001d46:	2207      	movs	r2, #7
 8001d48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <MX_SPI1_Init+0x74>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <MX_SPI1_Init+0x74>)
 8001d52:	2208      	movs	r2, #8
 8001d54:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d56:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <MX_SPI1_Init+0x74>)
 8001d58:	f003 fb0e 	bl	8005378 <HAL_SPI_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d62:	f7ff ffc3 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2000254c 	.word	0x2000254c
 8001d70:	40013000 	.word	0x40013000

08001d74 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <MX_SPI4_Init+0x74>)
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001dec <MX_SPI4_Init+0x78>)
 8001d7c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <MX_SPI4_Init+0x74>)
 8001d80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d84:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001d86:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <MX_SPI4_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d8c:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <MX_SPI4_Init+0x74>)
 8001d8e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001d92:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <MX_SPI4_Init+0x74>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <MX_SPI4_Init+0x74>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <MX_SPI4_Init+0x74>)
 8001da2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001da6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <MX_SPI4_Init+0x74>)
 8001daa:	2208      	movs	r2, #8
 8001dac:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <MX_SPI4_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <MX_SPI4_Init+0x74>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <MX_SPI4_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <MX_SPI4_Init+0x74>)
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <MX_SPI4_Init+0x74>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <MX_SPI4_Init+0x74>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001dd2:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <MX_SPI4_Init+0x74>)
 8001dd4:	f003 fad0 	bl	8005378 <HAL_SPI_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001dde:	f7ff ff85 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200025b0 	.word	0x200025b0
 8001dec:	40013400 	.word	0x40013400

08001df0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08c      	sub	sp, #48	@ 0x30
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f00 <HAL_SPI_MspInit+0x110>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d145      	bne.n	8001e9e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e12:	4b3c      	ldr	r3, [pc, #240]	@ (8001f04 <HAL_SPI_MspInit+0x114>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	4a3b      	ldr	r2, [pc, #236]	@ (8001f04 <HAL_SPI_MspInit+0x114>)
 8001e18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1e:	4b39      	ldr	r3, [pc, #228]	@ (8001f04 <HAL_SPI_MspInit+0x114>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	4b36      	ldr	r3, [pc, #216]	@ (8001f04 <HAL_SPI_MspInit+0x114>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4a35      	ldr	r2, [pc, #212]	@ (8001f04 <HAL_SPI_MspInit+0x114>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e36:	4b33      	ldr	r3, [pc, #204]	@ (8001f04 <HAL_SPI_MspInit+0x114>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e42:	4b30      	ldr	r3, [pc, #192]	@ (8001f04 <HAL_SPI_MspInit+0x114>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a2f      	ldr	r2, [pc, #188]	@ (8001f04 <HAL_SPI_MspInit+0x114>)
 8001e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f04 <HAL_SPI_MspInit+0x114>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e5a:	23a0      	movs	r3, #160	@ 0xa0
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e6a:	2305      	movs	r3, #5
 8001e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4619      	mov	r1, r3
 8001e74:	4824      	ldr	r0, [pc, #144]	@ (8001f08 <HAL_SPI_MspInit+0x118>)
 8001e76:	f001 ff8d 	bl	8003d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e8c:	2305      	movs	r3, #5
 8001e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	4619      	mov	r1, r3
 8001e96:	481d      	ldr	r0, [pc, #116]	@ (8001f0c <HAL_SPI_MspInit+0x11c>)
 8001e98:	f001 ff7c 	bl	8003d94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001e9c:	e02c      	b.n	8001ef8 <HAL_SPI_MspInit+0x108>
  else if(spiHandle->Instance==SPI4)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f10 <HAL_SPI_MspInit+0x120>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d127      	bne.n	8001ef8 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001ea8:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <HAL_SPI_MspInit+0x114>)
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eac:	4a15      	ldr	r2, [pc, #84]	@ (8001f04 <HAL_SPI_MspInit+0x114>)
 8001eae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001eb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eb4:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <HAL_SPI_MspInit+0x114>)
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ec0:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <HAL_SPI_MspInit+0x114>)
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8001f04 <HAL_SPI_MspInit+0x114>)
 8001ec6:	f043 0310 	orr.w	r3, r3, #16
 8001eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f04 <HAL_SPI_MspInit+0x114>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001ed8:	2364      	movs	r3, #100	@ 0x64
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001ee8:	2305      	movs	r3, #5
 8001eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4808      	ldr	r0, [pc, #32]	@ (8001f14 <HAL_SPI_MspInit+0x124>)
 8001ef4:	f001 ff4e 	bl	8003d94 <HAL_GPIO_Init>
}
 8001ef8:	bf00      	nop
 8001efa:	3730      	adds	r7, #48	@ 0x30
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40013000 	.word	0x40013000
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40021800 	.word	0x40021800
 8001f10:	40013400 	.word	0x40013400
 8001f14:	40021000 	.word	0x40021000

08001f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f5c <HAL_MspInit+0x44>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	4a0e      	ldr	r2, [pc, #56]	@ (8001f5c <HAL_MspInit+0x44>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <HAL_MspInit+0x44>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <HAL_MspInit+0x44>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3a:	4a08      	ldr	r2, [pc, #32]	@ (8001f5c <HAL_MspInit+0x44>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f42:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_MspInit+0x44>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <SDTimer_Handler>:

volatile uint8_t FatFSCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001f64:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <SDTimer_Handler+0x40>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d006      	beq.n	8001f7c <SDTimer_Handler+0x1c>
		Timer1--;
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <SDTimer_Handler+0x40>)
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <SDTimer_Handler+0x40>)
 8001f7a:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001f7c:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <SDTimer_Handler+0x44>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d006      	beq.n	8001f94 <SDTimer_Handler+0x34>
		Timer2--;
 8001f86:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <SDTimer_Handler+0x44>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <SDTimer_Handler+0x44>)
 8001f92:	801a      	strh	r2, [r3, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20002616 	.word	0x20002616
 8001fa4:	20002618 	.word	0x20002618

08001fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <NMI_Handler+0x4>

08001fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <HardFault_Handler+0x4>

08001fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <MemManage_Handler+0x4>

08001fc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <BusFault_Handler+0x4>

08001fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <UsageFault_Handler+0x4>

08001fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFSCnt++;
 8002000:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <SysTick_Handler+0x30>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	3301      	adds	r3, #1
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b08      	ldr	r3, [pc, #32]	@ (800202c <SysTick_Handler+0x30>)
 800200c:	701a      	strb	r2, [r3, #0]
	if(FatFSCnt >= 10)
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <SysTick_Handler+0x30>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b09      	cmp	r3, #9
 8002016:	d904      	bls.n	8002022 <SysTick_Handler+0x26>
	{
		FatFSCnt = 0;
 8002018:	4b04      	ldr	r3, [pc, #16]	@ (800202c <SysTick_Handler+0x30>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800201e:	f7ff ff9f 	bl	8001f60 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002022:	f000 fbb5 	bl	8002790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20002614 	.word	0x20002614

08002030 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <ADC_IRQHandler+0x10>)
 8002036:	f000 fc33 	bl	80028a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000208 	.word	0x20000208

08002044 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800204a:	f004 f819 	bl	8006080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20002620 	.word	0x20002620

08002058 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <USART3_IRQHandler+0x10>)
 800205e:	f004 fcf7 	bl	8006a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20002a7c 	.word	0x20002a7c

0800206c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002070:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002074:	f002 f86e 	bl	8004154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}

0800207c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002080:	4802      	ldr	r0, [pc, #8]	@ (800208c <DMA2_Stream0_IRQHandler+0x10>)
 8002082:	f001 fc1d 	bl	80038c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000250 	.word	0x20000250

08002090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return 1;
 8002094:	2301      	movs	r3, #1
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_kill>:

int _kill(int pid, int sig)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020aa:	f00a f84f 	bl	800c14c <__errno>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2216      	movs	r2, #22
 80020b2:	601a      	str	r2, [r3, #0]
  return -1;
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_exit>:

void _exit (int status)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ffe7 	bl	80020a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020d2:	bf00      	nop
 80020d4:	e7fd      	b.n	80020d2 <_exit+0x12>

080020d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e00a      	b.n	80020fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020e8:	f3af 8000 	nop.w
 80020ec:	4601      	mov	r1, r0
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	60ba      	str	r2, [r7, #8]
 80020f4:	b2ca      	uxtb	r2, r1
 80020f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3301      	adds	r3, #1
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	dbf0      	blt.n	80020e8 <_read+0x12>
  }

  return len;
 8002106:	687b      	ldr	r3, [r7, #4]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e009      	b.n	8002136 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	60ba      	str	r2, [r7, #8]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3301      	adds	r3, #1
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	dbf1      	blt.n	8002122 <_write+0x12>
  }
  return len;
 800213e:	687b      	ldr	r3, [r7, #4]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_close>:

int _close(int file)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002150:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002170:	605a      	str	r2, [r3, #4]
  return 0;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_isatty>:

int _isatty(int file)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002188:	2301      	movs	r3, #1
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b8:	4a14      	ldr	r2, [pc, #80]	@ (800220c <_sbrk+0x5c>)
 80021ba:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <_sbrk+0x60>)
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021cc:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <_sbrk+0x64>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <_sbrk+0x68>)
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d207      	bcs.n	80021f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e0:	f009 ffb4 	bl	800c14c <__errno>
 80021e4:	4603      	mov	r3, r0
 80021e6:	220c      	movs	r2, #12
 80021e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	e009      	b.n	8002204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f6:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <_sbrk+0x64>)
 8002200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20080000 	.word	0x20080000
 8002210:	00000400 	.word	0x00000400
 8002214:	2000261c 	.word	0x2000261c
 8002218:	20002e90 	.word	0x20002e90

0800221c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <SystemInit+0x20>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <SystemInit+0x20>)
 8002228:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002246:	f107 0310 	add.w	r3, r7, #16
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002254:	1d3b      	adds	r3, r7, #4
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800225e:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <MX_TIM1_Init+0xa0>)
 8002260:	4a20      	ldr	r2, [pc, #128]	@ (80022e4 <MX_TIM1_Init+0xa4>)
 8002262:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600-1;
 8002264:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <MX_TIM1_Init+0xa0>)
 8002266:	f240 623f 	movw	r2, #1599	@ 0x63f
 800226a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226c:	4b1c      	ldr	r3, [pc, #112]	@ (80022e0 <MX_TIM1_Init+0xa0>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8002272:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <MX_TIM1_Init+0xa0>)
 8002274:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002278:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227a:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <MX_TIM1_Init+0xa0>)
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002280:	4b17      	ldr	r3, [pc, #92]	@ (80022e0 <MX_TIM1_Init+0xa0>)
 8002282:	2200      	movs	r2, #0
 8002284:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002286:	4b16      	ldr	r3, [pc, #88]	@ (80022e0 <MX_TIM1_Init+0xa0>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800228c:	4814      	ldr	r0, [pc, #80]	@ (80022e0 <MX_TIM1_Init+0xa0>)
 800228e:	f003 fe27 	bl	8005ee0 <HAL_TIM_Base_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002298:	f7ff fd28 	bl	8001cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800229c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022a2:	f107 0310 	add.w	r3, r7, #16
 80022a6:	4619      	mov	r1, r3
 80022a8:	480d      	ldr	r0, [pc, #52]	@ (80022e0 <MX_TIM1_Init+0xa0>)
 80022aa:	f004 f809 	bl	80062c0 <HAL_TIM_ConfigClockSource>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80022b4:	f7ff fd1a 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022b8:	2320      	movs	r3, #32
 80022ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	4619      	mov	r1, r3
 80022c8:	4805      	ldr	r0, [pc, #20]	@ (80022e0 <MX_TIM1_Init+0xa0>)
 80022ca:	f004 fa25 	bl	8006718 <HAL_TIMEx_MasterConfigSynchronization>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80022d4:	f7ff fd0a 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20002620 	.word	0x20002620
 80022e4:	40010000 	.word	0x40010000

080022e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <HAL_TIM_Base_MspInit+0x44>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d113      	bne.n	8002322 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <HAL_TIM_Base_MspInit+0x48>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002330 <HAL_TIM_Base_MspInit+0x48>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6453      	str	r3, [r2, #68]	@ 0x44
 8002306:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <HAL_TIM_Base_MspInit+0x48>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	2019      	movs	r0, #25
 8002318:	f001 f8fb 	bl	8003512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800231c:	2019      	movs	r0, #25
 800231e:	f001 f914 	bl	800354a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40010000 	.word	0x40010000
 8002330:	40023800 	.word	0x40023800

08002334 <ReturnFlagTimer>:

/* USER CODE BEGIN 1 */

volatile bool flag2s = false;

bool ReturnFlagTimer(){
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0

	return flag2s;
 8002338:	4b03      	ldr	r3, [pc, #12]	@ (8002348 <ReturnFlagTimer+0x14>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b2db      	uxtb	r3, r3
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	2000266c 	.word	0x2000266c

0800234c <ClearFlagTimer>:

void ClearFlagTimer(){
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
	flag2s = false;
 8002350:	4b03      	ldr	r3, [pc, #12]	@ (8002360 <ClearFlagTimer+0x14>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	2000266c 	.word	0x2000266c

08002364 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	//This function will be executed when the Timer reaches 2s

	if(htim == &htim1){
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a07      	ldr	r2, [pc, #28]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d106      	bne.n	8002382 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002374:	2101      	movs	r1, #1
 8002376:	4806      	ldr	r0, [pc, #24]	@ (8002390 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002378:	f001 fed1 	bl	800411e <HAL_GPIO_TogglePin>
		flag2s = true;
 800237c:	4b05      	ldr	r3, [pc, #20]	@ (8002394 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
	}
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20002620 	.word	0x20002620
 8002390:	40020400 	.word	0x40020400
 8002394:	2000266c 	.word	0x2000266c

08002398 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 800239c:	4b1b      	ldr	r3, [pc, #108]	@ (800240c <MX_USART3_UART_Init+0x74>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 80023a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <MX_USART3_UART_Init+0x78>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 80023a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <MX_USART3_UART_Init+0x7c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 80023ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <MX_USART3_UART_Init+0x80>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 80023b4:	4b19      	ldr	r3, [pc, #100]	@ (800241c <MX_USART3_UART_Init+0x84>)
 80023b6:	220d      	movs	r2, #13
 80023b8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023ba:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <MX_USART3_UART_Init+0x88>)
 80023bc:	4a19      	ldr	r2, [pc, #100]	@ (8002424 <MX_USART3_UART_Init+0x8c>)
 80023be:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023c0:	4b17      	ldr	r3, [pc, #92]	@ (8002420 <MX_USART3_UART_Init+0x88>)
 80023c2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023c6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023c8:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <MX_USART3_UART_Init+0x88>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023ce:	4b14      	ldr	r3, [pc, #80]	@ (8002420 <MX_USART3_UART_Init+0x88>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023d4:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <MX_USART3_UART_Init+0x88>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023da:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <MX_USART3_UART_Init+0x88>)
 80023dc:	220c      	movs	r2, #12
 80023de:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <MX_USART3_UART_Init+0x88>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <MX_USART3_UART_Init+0x88>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <MX_USART3_UART_Init+0x88>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <MX_USART3_UART_Init+0x88>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023f8:	4809      	ldr	r0, [pc, #36]	@ (8002420 <MX_USART3_UART_Init+0x88>)
 80023fa:	f004 fa39 	bl	8006870 <HAL_UART_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8002404:	f7ff fc72 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20002a78 	.word	0x20002a78
 8002410:	20002a79 	.word	0x20002a79
 8002414:	20002870 	.word	0x20002870
 8002418:	20002a74 	.word	0x20002a74
 800241c:	20002874 	.word	0x20002874
 8002420:	20002a7c 	.word	0x20002a7c
 8002424:	40004800 	.word	0x40004800

08002428 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b0ae      	sub	sp, #184	@ 0xb8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2290      	movs	r2, #144	@ 0x90
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f009 fe1a 	bl	800c082 <memset>
  if(uartHandle->Instance==USART3)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a26      	ldr	r2, [pc, #152]	@ (80024ec <HAL_UART_MspInit+0xc4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d144      	bne.n	80024e2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002458:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800245c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800245e:	2300      	movs	r3, #0
 8002460:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002462:	f107 0314 	add.w	r3, r7, #20
 8002466:	4618      	mov	r0, r3
 8002468:	f002 fb5e 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002472:	f7ff fc3b 	bl	8001cec <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002476:	4b1e      	ldr	r3, [pc, #120]	@ (80024f0 <HAL_UART_MspInit+0xc8>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	4a1d      	ldr	r2, [pc, #116]	@ (80024f0 <HAL_UART_MspInit+0xc8>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002480:	6413      	str	r3, [r2, #64]	@ 0x40
 8002482:	4b1b      	ldr	r3, [pc, #108]	@ (80024f0 <HAL_UART_MspInit+0xc8>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800248e:	4b18      	ldr	r3, [pc, #96]	@ (80024f0 <HAL_UART_MspInit+0xc8>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	4a17      	ldr	r2, [pc, #92]	@ (80024f0 <HAL_UART_MspInit+0xc8>)
 8002494:	f043 0308 	orr.w	r3, r3, #8
 8002498:	6313      	str	r3, [r2, #48]	@ 0x30
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <HAL_UART_MspInit+0xc8>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ba:	2303      	movs	r3, #3
 80024bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024c0:	2307      	movs	r3, #7
 80024c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024ca:	4619      	mov	r1, r3
 80024cc:	4809      	ldr	r0, [pc, #36]	@ (80024f4 <HAL_UART_MspInit+0xcc>)
 80024ce:	f001 fc61 	bl	8003d94 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2100      	movs	r1, #0
 80024d6:	2027      	movs	r0, #39	@ 0x27
 80024d8:	f001 f81b 	bl	8003512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024dc:	2027      	movs	r0, #39	@ 0x27
 80024de:	f001 f834 	bl	800354a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024e2:	bf00      	nop
 80024e4:	37b8      	adds	r7, #184	@ 0xb8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40004800 	.word	0x40004800
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020c00 	.word	0x40020c00

080024f8 <reset_UART>:
{
	return flagCPE;
}

void reset_UART()
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 80024fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002500:	2100      	movs	r1, #0
 8002502:	4806      	ldr	r0, [pc, #24]	@ (800251c <reset_UART+0x24>)
 8002504:	f009 fdbd 	bl	800c082 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8002508:	2201      	movs	r2, #1
 800250a:	4904      	ldr	r1, [pc, #16]	@ (800251c <reset_UART+0x24>)
 800250c:	4804      	ldr	r0, [pc, #16]	@ (8002520 <reset_UART+0x28>)
 800250e:	f004 fa5b 	bl	80069c8 <HAL_UART_Receive_IT>
	flagCPP = false;
 8002512:	4b04      	ldr	r3, [pc, #16]	@ (8002524 <reset_UART+0x2c>)
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20002670 	.word	0x20002670
 8002520:	20002a7c 	.word	0x20002a7c
 8002524:	20002a78 	.word	0x20002a78

08002528 <send_UART>:

void send_UART(const char* msg_to_send)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 8002530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	480d      	ldr	r0, [pc, #52]	@ (800256c <send_UART+0x44>)
 8002538:	f009 fdab 	bl	800c092 <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 800253c:	480b      	ldr	r0, [pc, #44]	@ (800256c <send_UART+0x44>)
 800253e:	f7fd fecf 	bl	80002e0 <strlen>
 8002542:	4603      	mov	r3, r0
 8002544:	461a      	mov	r2, r3
 8002546:	4b09      	ldr	r3, [pc, #36]	@ (800256c <send_UART+0x44>)
 8002548:	4413      	add	r3, r2
 800254a:	4909      	ldr	r1, [pc, #36]	@ (8002570 <send_UART+0x48>)
 800254c:	461a      	mov	r2, r3
 800254e:	460b      	mov	r3, r1
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8002554:	4b07      	ldr	r3, [pc, #28]	@ (8002574 <send_UART+0x4c>)
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 800255a:	2201      	movs	r2, #1
 800255c:	4903      	ldr	r1, [pc, #12]	@ (800256c <send_UART+0x44>)
 800255e:	4806      	ldr	r0, [pc, #24]	@ (8002578 <send_UART+0x50>)
 8002560:	f004 f9d4 	bl	800690c <HAL_UART_Transmit_IT>
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20002874 	.word	0x20002874
 8002570:	0800f760 	.word	0x0800f760
 8002574:	20002a79 	.word	0x20002a79
 8002578:	20002a7c 	.word	0x20002a7c

0800257c <HAL_UART_RxCpltCallback>:
{
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 8002584:	4b2e      	ldr	r3, [pc, #184]	@ (8002640 <HAL_UART_RxCpltCallback+0xc4>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d154      	bne.n	8002636 <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 800258c:	4b2d      	ldr	r3, [pc, #180]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a2d      	ldr	r2, [pc, #180]	@ (8002648 <HAL_UART_RxCpltCallback+0xcc>)
 8002592:	5cd3      	ldrb	r3, [r2, r3]
 8002594:	2b0d      	cmp	r3, #13
 8002596:	d00b      	beq.n	80025b0 <HAL_UART_RxCpltCallback+0x34>
 8002598:	4b2a      	ldr	r3, [pc, #168]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a2a      	ldr	r2, [pc, #168]	@ (8002648 <HAL_UART_RxCpltCallback+0xcc>)
 800259e:	5cd3      	ldrb	r3, [r2, r3]
 80025a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80025a2:	d005      	beq.n	80025b0 <HAL_UART_RxCpltCallback+0x34>
 80025a4:	4b27      	ldr	r3, [pc, #156]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a27      	ldr	r2, [pc, #156]	@ (8002648 <HAL_UART_RxCpltCallback+0xcc>)
 80025aa:	5cd3      	ldrb	r3, [r2, r3]
 80025ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80025ae:	d106      	bne.n	80025be <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 80025b0:	4b24      	ldr	r3, [pc, #144]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 80025b6:	4b22      	ldr	r3, [pc, #136]	@ (8002640 <HAL_UART_RxCpltCallback+0xc4>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	e03c      	b.n	8002638 <HAL_UART_RxCpltCallback+0xbc>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 80025be:	4b21      	ldr	r3, [pc, #132]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a21      	ldr	r2, [pc, #132]	@ (8002648 <HAL_UART_RxCpltCallback+0xcc>)
 80025c4:	5cd3      	ldrb	r3, [r2, r3]
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d10f      	bne.n	80025ea <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 80025ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 80025d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	e01c      	b.n	8002618 <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 80025de:	4b19      	ldr	r3, [pc, #100]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	3b02      	subs	r3, #2
 80025e4:	4a17      	ldr	r2, [pc, #92]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	e016      	b.n	8002618 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 80025ea:	4b16      	ldr	r3, [pc, #88]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a16      	ldr	r2, [pc, #88]	@ (8002648 <HAL_UART_RxCpltCallback+0xcc>)
 80025f0:	5cd3      	ldrb	r3, [r2, r3]
 80025f2:	2b1b      	cmp	r3, #27
 80025f4:	d104      	bne.n	8002600 <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 80025f6:	4b13      	ldr	r3, [pc, #76]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 80025f8:	f04f 32ff 	mov.w	r2, #4294967295
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e00b      	b.n	8002618 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8002600:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a10      	ldr	r2, [pc, #64]	@ (8002648 <HAL_UART_RxCpltCallback+0xcc>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	2b24      	cmp	r3, #36	@ 0x24
 800260a:	d105      	bne.n	8002618 <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 800260c:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 8002612:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <HAL_UART_RxCpltCallback+0xcc>)
 8002614:	2224      	movs	r2, #36	@ 0x24
 8002616:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 8002618:	4b0a      	ldr	r3, [pc, #40]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3301      	adds	r3, #1
 800261e:	4a09      	ldr	r2, [pc, #36]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <HAL_UART_RxCpltCallback+0xc8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a08      	ldr	r2, [pc, #32]	@ (8002648 <HAL_UART_RxCpltCallback+0xcc>)
 8002628:	4413      	add	r3, r2
 800262a:	2201      	movs	r2, #1
 800262c:	4619      	mov	r1, r3
 800262e:	4807      	ldr	r0, [pc, #28]	@ (800264c <HAL_UART_RxCpltCallback+0xd0>)
 8002630:	f004 f9ca 	bl	80069c8 <HAL_UART_Receive_IT>
 8002634:	e000      	b.n	8002638 <HAL_UART_RxCpltCallback+0xbc>
		return;
 8002636:	bf00      	nop
	}
}
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20002a78 	.word	0x20002a78
 8002644:	20002870 	.word	0x20002870
 8002648:	20002670 	.word	0x20002670
 800264c:	20002a7c 	.word	0x20002a7c

08002650 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8002658:	4b16      	ldr	r3, [pc, #88]	@ (80026b4 <HAL_UART_TxCpltCallback+0x64>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	f083 0301 	eor.w	r3, r3, #1
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d122      	bne.n	80026ac <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 8002666:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <HAL_UART_TxCpltCallback+0x68>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a14      	ldr	r2, [pc, #80]	@ (80026bc <HAL_UART_TxCpltCallback+0x6c>)
 800266c:	5cd3      	ldrb	r3, [r2, r3]
 800266e:	2b0d      	cmp	r3, #13
 8002670:	d10d      	bne.n	800268e <HAL_UART_TxCpltCallback+0x3e>
 8002672:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <HAL_UART_TxCpltCallback+0x68>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3b01      	subs	r3, #1
 8002678:	4a10      	ldr	r2, [pc, #64]	@ (80026bc <HAL_UART_TxCpltCallback+0x6c>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	2b0a      	cmp	r3, #10
 800267e:	d006      	beq.n	800268e <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8002680:	4b0d      	ldr	r3, [pc, #52]	@ (80026b8 <HAL_UART_TxCpltCallback+0x68>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 8002686:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_UART_TxCpltCallback+0x64>)
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	e00f      	b.n	80026ae <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 800268e:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <HAL_UART_TxCpltCallback+0x68>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	4a08      	ldr	r2, [pc, #32]	@ (80026b8 <HAL_UART_TxCpltCallback+0x68>)
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b07      	ldr	r3, [pc, #28]	@ (80026b8 <HAL_UART_TxCpltCallback+0x68>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a07      	ldr	r2, [pc, #28]	@ (80026bc <HAL_UART_TxCpltCallback+0x6c>)
 800269e:	4413      	add	r3, r2
 80026a0:	2201      	movs	r2, #1
 80026a2:	4619      	mov	r1, r3
 80026a4:	4806      	ldr	r0, [pc, #24]	@ (80026c0 <HAL_UART_TxCpltCallback+0x70>)
 80026a6:	f004 f931 	bl	800690c <HAL_UART_Transmit_IT>
 80026aa:	e000      	b.n	80026ae <HAL_UART_TxCpltCallback+0x5e>
		return;
 80026ac:	bf00      	nop
}
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20002a79 	.word	0x20002a79
 80026b8:	20002a74 	.word	0x20002a74
 80026bc:	20002874 	.word	0x20002874
 80026c0:	20002a7c 	.word	0x20002a7c

080026c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c8:	480d      	ldr	r0, [pc, #52]	@ (8002700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026ca:	490e      	ldr	r1, [pc, #56]	@ (8002704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a0b      	ldr	r2, [pc, #44]	@ (800270c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026e0:	4c0b      	ldr	r4, [pc, #44]	@ (8002710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026ee:	f7ff fd95 	bl	800221c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026f2:	f009 fd31 	bl	800c158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f6:	f7ff f99b 	bl	8001a30 <main>
  bx  lr    
 80026fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026fc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002704:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002708:	08010048 	.word	0x08010048
  ldr r2, =_sbss
 800270c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002710:	20002e90 	.word	0x20002e90

08002714 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002714:	e7fe      	b.n	8002714 <CAN1_RX0_IRQHandler>

08002716 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800271a:	2003      	movs	r0, #3
 800271c:	f000 feee 	bl	80034fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002720:	2000      	movs	r0, #0
 8002722:	f000 f805 	bl	8002730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002726:	f7ff fbf7 	bl	8001f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002738:	4b12      	ldr	r3, [pc, #72]	@ (8002784 <HAL_InitTick+0x54>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <HAL_InitTick+0x58>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002746:	fbb3 f3f1 	udiv	r3, r3, r1
 800274a:	fbb2 f3f3 	udiv	r3, r2, r3
 800274e:	4618      	mov	r0, r3
 8002750:	f000 ff09 	bl	8003566 <HAL_SYSTICK_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e00e      	b.n	800277c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b0f      	cmp	r3, #15
 8002762:	d80a      	bhi.n	800277a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002764:	2200      	movs	r2, #0
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	f04f 30ff 	mov.w	r0, #4294967295
 800276c:	f000 fed1 	bl	8003512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002770:	4a06      	ldr	r2, [pc, #24]	@ (800278c <HAL_InitTick+0x5c>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e000      	b.n	800277c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000004 	.word	0x20000004
 8002788:	2000000c 	.word	0x2000000c
 800278c:	20000008 	.word	0x20000008

08002790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <HAL_IncTick+0x20>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <HAL_IncTick+0x24>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	4a04      	ldr	r2, [pc, #16]	@ (80027b4 <HAL_IncTick+0x24>)
 80027a2:	6013      	str	r3, [r2, #0]
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	2000000c 	.word	0x2000000c
 80027b4:	20002b04 	.word	0x20002b04

080027b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return uwTick;
 80027bc:	4b03      	ldr	r3, [pc, #12]	@ (80027cc <HAL_GetTick+0x14>)
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20002b04 	.word	0x20002b04

080027d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d8:	f7ff ffee 	bl	80027b8 <HAL_GetTick>
 80027dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d005      	beq.n	80027f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002814 <HAL_Delay+0x44>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027f6:	bf00      	nop
 80027f8:	f7ff ffde 	bl	80027b8 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	429a      	cmp	r2, r3
 8002806:	d8f7      	bhi.n	80027f8 <HAL_Delay+0x28>
  {
  }
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2000000c 	.word	0x2000000c

08002818 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e031      	b.n	8002892 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fe f934 	bl	8000aa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	d116      	bne.n	8002884 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800285a:	4b10      	ldr	r3, [pc, #64]	@ (800289c <HAL_ADC_Init+0x84>)
 800285c:	4013      	ands	r3, r2
 800285e:	f043 0202 	orr.w	r2, r3, #2
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fbf2 	bl	8003050 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	641a      	str	r2, [r3, #64]	@ 0x40
 8002882:	e001      	b.n	8002888 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	ffffeefd 	.word	0xffffeefd

080028a0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d049      	beq.n	800296a <HAL_ADC_IRQHandler+0xca>
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d046      	beq.n	800296a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d12b      	bne.n	800295a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002906:	2b00      	cmp	r3, #0
 8002908:	d127      	bne.n	800295a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002914:	2b00      	cmp	r3, #0
 8002916:	d006      	beq.n	8002926 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002922:	2b00      	cmp	r3, #0
 8002924:	d119      	bne.n	800295a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0220 	bic.w	r2, r2, #32
 8002934:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d105      	bne.n	800295a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	f043 0201 	orr.w	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fe f91e 	bl	8000b9c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0212 	mvn.w	r2, #18
 8002968:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002978:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d057      	beq.n	8002a30 <HAL_ADC_IRQHandler+0x190>
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d054      	beq.n	8002a30 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d139      	bne.n	8002a20 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d006      	beq.n	80029c8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d12b      	bne.n	8002a20 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d124      	bne.n	8002a20 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d11d      	bne.n	8002a20 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d119      	bne.n	8002a20 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	f043 0201 	orr.w	r2, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fc91 	bl	8003348 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f06f 020c 	mvn.w	r2, #12
 8002a2e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a3e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d017      	beq.n	8002a76 <HAL_ADC_IRQHandler+0x1d6>
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d014      	beq.n	8002a76 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10d      	bne.n	8002a76 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f988 	bl	8002d7c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0201 	mvn.w	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a84:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_ADC_IRQHandler+0x218>
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d012      	beq.n	8002ab8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	f043 0202 	orr.w	r2, r3, #2
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f06f 0220 	mvn.w	r2, #32
 8002aa6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f971 	bl	8002d90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f06f 0220 	mvn.w	r2, #32
 8002ab6:	601a      	str	r2, [r3, #0]
  }
}
 8002ab8:	bf00      	nop
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_Start_DMA+0x1e>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e0d4      	b.n	8002c88 <HAL_ADC_Start_DMA+0x1c8>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d018      	beq.n	8002b26 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002b04:	4b62      	ldr	r3, [pc, #392]	@ (8002c90 <HAL_ADC_Start_DMA+0x1d0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a62      	ldr	r2, [pc, #392]	@ (8002c94 <HAL_ADC_Start_DMA+0x1d4>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0c9a      	lsrs	r2, r3, #18
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002b18:	e002      	b.n	8002b20 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f9      	bne.n	8002b1a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	f040 809c 	bne.w	8002c6e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b3a:	4b57      	ldr	r3, [pc, #348]	@ (8002c98 <HAL_ADC_Start_DMA+0x1d8>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b5c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b70:	d106      	bne.n	8002b80 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	f023 0206 	bic.w	r2, r3, #6
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b7e:	e002      	b.n	8002b86 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b92:	4a42      	ldr	r2, [pc, #264]	@ (8002c9c <HAL_ADC_Start_DMA+0x1dc>)
 8002b94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9a:	4a41      	ldr	r2, [pc, #260]	@ (8002ca0 <HAL_ADC_Start_DMA+0x1e0>)
 8002b9c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba2:	4a40      	ldr	r2, [pc, #256]	@ (8002ca4 <HAL_ADC_Start_DMA+0x1e4>)
 8002ba4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002bae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002bbe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	334c      	adds	r3, #76	@ 0x4c
 8002bda:	4619      	mov	r1, r3
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f000 fd7c 	bl	80036dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002be4:	4b30      	ldr	r3, [pc, #192]	@ (8002ca8 <HAL_ADC_Start_DMA+0x1e8>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10f      	bne.n	8002c10 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d143      	bne.n	8002c86 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c0c:	609a      	str	r2, [r3, #8]
 8002c0e:	e03a      	b.n	8002c86 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a25      	ldr	r2, [pc, #148]	@ (8002cac <HAL_ADC_Start_DMA+0x1ec>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d10e      	bne.n	8002c38 <HAL_ADC_Start_DMA+0x178>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d107      	bne.n	8002c38 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c36:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002c38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <HAL_ADC_Start_DMA+0x1e8>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d120      	bne.n	8002c86 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a19      	ldr	r2, [pc, #100]	@ (8002cb0 <HAL_ADC_Start_DMA+0x1f0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d11b      	bne.n	8002c86 <HAL_ADC_Start_DMA+0x1c6>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d114      	bne.n	8002c86 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	e00b      	b.n	8002c86 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	f043 0210 	orr.w	r2, r3, #16
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	f043 0201 	orr.w	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000004 	.word	0x20000004
 8002c94:	431bde83 	.word	0x431bde83
 8002c98:	fffff8fe 	.word	0xfffff8fe
 8002c9c:	08003245 	.word	0x08003245
 8002ca0:	080032ff 	.word	0x080032ff
 8002ca4:	0800331b 	.word	0x0800331b
 8002ca8:	40012300 	.word	0x40012300
 8002cac:	40012000 	.word	0x40012000
 8002cb0:	40012200 	.word	0x40012200

08002cb4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_ADC_Stop_DMA+0x1a>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e046      	b.n	8002d5c <HAL_ADC_Stop_DMA+0xa8>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0201 	bic.w	r2, r2, #1
 8002ce4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d12e      	bne.n	8002d52 <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d02:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d10f      	bne.n	8002d32 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fd40 	bl	800379c <HAL_DMA_Abort>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002d40:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d46:	4b07      	ldr	r3, [pc, #28]	@ (8002d64 <HAL_ADC_Stop_DMA+0xb0>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	f043 0201 	orr.w	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	ffffeefe 	.word	0xffffeefe

08002d68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x1c>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e136      	b.n	800302e <HAL_ADC_ConfigChannel+0x28a>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b09      	cmp	r3, #9
 8002dce:	d93a      	bls.n	8002e46 <HAL_ADC_ConfigChannel+0xa2>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dd8:	d035      	beq.n	8002e46 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68d9      	ldr	r1, [r3, #12]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	3b1e      	subs	r3, #30
 8002df0:	2207      	movs	r2, #7
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a8d      	ldr	r2, [pc, #564]	@ (800303c <HAL_ADC_ConfigChannel+0x298>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d10a      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68d9      	ldr	r1, [r3, #12]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	061a      	lsls	r2, r3, #24
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e1e:	e035      	b.n	8002e8c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68d9      	ldr	r1, [r3, #12]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	4618      	mov	r0, r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4403      	add	r3, r0
 8002e38:	3b1e      	subs	r3, #30
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e44:	e022      	b.n	8002e8c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6919      	ldr	r1, [r3, #16]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	2207      	movs	r2, #7
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43da      	mvns	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	400a      	ands	r2, r1
 8002e68:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6919      	ldr	r1, [r3, #16]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4403      	add	r3, r0
 8002e82:	409a      	lsls	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b06      	cmp	r3, #6
 8002e92:	d824      	bhi.n	8002ede <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3b05      	subs	r3, #5
 8002ea6:	221f      	movs	r2, #31
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43da      	mvns	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	3b05      	subs	r3, #5
 8002ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	635a      	str	r2, [r3, #52]	@ 0x34
 8002edc:	e04c      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d824      	bhi.n	8002f30 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3b23      	subs	r3, #35	@ 0x23
 8002ef8:	221f      	movs	r2, #31
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	400a      	ands	r2, r1
 8002f06:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	4618      	mov	r0, r3
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	3b23      	subs	r3, #35	@ 0x23
 8002f22:	fa00 f203 	lsl.w	r2, r0, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f2e:	e023      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	3b41      	subs	r3, #65	@ 0x41
 8002f42:	221f      	movs	r2, #31
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43da      	mvns	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	400a      	ands	r2, r1
 8002f50:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	4618      	mov	r0, r3
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	3b41      	subs	r3, #65	@ 0x41
 8002f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a30      	ldr	r2, [pc, #192]	@ (8003040 <HAL_ADC_ConfigChannel+0x29c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10a      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x1f4>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f8a:	d105      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003044 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a2c      	ldr	r2, [pc, #176]	@ (8003044 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f92:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f96:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a28      	ldr	r2, [pc, #160]	@ (8003040 <HAL_ADC_ConfigChannel+0x29c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d10f      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x21e>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b12      	cmp	r3, #18
 8002fa8:	d10b      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002faa:	4b26      	ldr	r3, [pc, #152]	@ (8003044 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4a25      	ldr	r2, [pc, #148]	@ (8003044 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fb0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002fb4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002fb6:	4b23      	ldr	r3, [pc, #140]	@ (8003044 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4a22      	ldr	r2, [pc, #136]	@ (8003044 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fbc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fc0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8003040 <HAL_ADC_ConfigChannel+0x29c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d12b      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x280>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800303c <HAL_ADC_ConfigChannel+0x298>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d003      	beq.n	8002fde <HAL_ADC_ConfigChannel+0x23a>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b11      	cmp	r3, #17
 8002fdc:	d122      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002fde:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4a18      	ldr	r2, [pc, #96]	@ (8003044 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fe4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002fe8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002fea:	4b16      	ldr	r3, [pc, #88]	@ (8003044 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4a15      	ldr	r2, [pc, #84]	@ (8003044 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ff0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ff4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a10      	ldr	r2, [pc, #64]	@ (800303c <HAL_ADC_ConfigChannel+0x298>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d111      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003000:	4b11      	ldr	r3, [pc, #68]	@ (8003048 <HAL_ADC_ConfigChannel+0x2a4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a11      	ldr	r2, [pc, #68]	@ (800304c <HAL_ADC_ConfigChannel+0x2a8>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0c9a      	lsrs	r2, r3, #18
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003016:	e002      	b.n	800301e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	3b01      	subs	r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f9      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	10000012 	.word	0x10000012
 8003040:	40012000 	.word	0x40012000
 8003044:	40012300 	.word	0x40012300
 8003048:	20000004 	.word	0x20000004
 800304c:	431bde83 	.word	0x431bde83

08003050 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003058:	4b78      	ldr	r3, [pc, #480]	@ (800323c <ADC_Init+0x1ec>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4a77      	ldr	r2, [pc, #476]	@ (800323c <ADC_Init+0x1ec>)
 800305e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003062:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003064:	4b75      	ldr	r3, [pc, #468]	@ (800323c <ADC_Init+0x1ec>)
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4973      	ldr	r1, [pc, #460]	@ (800323c <ADC_Init+0x1ec>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003080:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	021a      	lsls	r2, r3, #8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80030a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6899      	ldr	r1, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030de:	4a58      	ldr	r2, [pc, #352]	@ (8003240 <ADC_Init+0x1f0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d022      	beq.n	800312a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6899      	ldr	r1, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003114:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6899      	ldr	r1, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	e00f      	b.n	800314a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003148:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0202 	bic.w	r2, r2, #2
 8003158:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6899      	ldr	r1, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	005a      	lsls	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01b      	beq.n	80031b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003186:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003196:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6859      	ldr	r1, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	3b01      	subs	r3, #1
 80031a4:	035a      	lsls	r2, r3, #13
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	e007      	b.n	80031c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80031ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	3b01      	subs	r3, #1
 80031dc:	051a      	lsls	r2, r3, #20
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6899      	ldr	r1, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003202:	025a      	lsls	r2, r3, #9
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800321a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6899      	ldr	r1, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	029a      	lsls	r2, r3, #10
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40012300 	.word	0x40012300
 8003240:	0f000001 	.word	0x0f000001

08003244 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800325a:	2b00      	cmp	r3, #0
 800325c:	d13c      	bne.n	80032d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d12b      	bne.n	80032d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800327c:	2b00      	cmp	r3, #0
 800327e:	d127      	bne.n	80032d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003286:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800328a:	2b00      	cmp	r3, #0
 800328c:	d006      	beq.n	800329c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003298:	2b00      	cmp	r3, #0
 800329a:	d119      	bne.n	80032d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0220 	bic.w	r2, r2, #32
 80032aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f7fd fc63 	bl	8000b9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032d6:	e00e      	b.n	80032f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7ff fd53 	bl	8002d90 <HAL_ADC_ErrorCallback>
}
 80032ea:	e004      	b.n	80032f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	4798      	blx	r3
}
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff fd2b 	bl	8002d68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003326:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2240      	movs	r2, #64	@ 0x40
 800332c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	f043 0204 	orr.w	r2, r3, #4
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f7ff fd28 	bl	8002d90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800336c:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <__NVIC_SetPriorityGrouping+0x40>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003378:	4013      	ands	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003384:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003386:	4313      	orrs	r3, r2
 8003388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800338a:	4a04      	ldr	r2, [pc, #16]	@ (800339c <__NVIC_SetPriorityGrouping+0x40>)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	60d3      	str	r3, [r2, #12]
}
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000ed00 	.word	0xe000ed00
 80033a0:	05fa0000 	.word	0x05fa0000

080033a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a8:	4b04      	ldr	r3, [pc, #16]	@ (80033bc <__NVIC_GetPriorityGrouping+0x18>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	0a1b      	lsrs	r3, r3, #8
 80033ae:	f003 0307 	and.w	r3, r3, #7
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	db0b      	blt.n	80033ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	f003 021f 	and.w	r2, r3, #31
 80033d8:	4907      	ldr	r1, [pc, #28]	@ (80033f8 <__NVIC_EnableIRQ+0x38>)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	2001      	movs	r0, #1
 80033e2:	fa00 f202 	lsl.w	r2, r0, r2
 80033e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	e000e100 	.word	0xe000e100

080033fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	6039      	str	r1, [r7, #0]
 8003406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340c:	2b00      	cmp	r3, #0
 800340e:	db0a      	blt.n	8003426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	b2da      	uxtb	r2, r3
 8003414:	490c      	ldr	r1, [pc, #48]	@ (8003448 <__NVIC_SetPriority+0x4c>)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	0112      	lsls	r2, r2, #4
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	440b      	add	r3, r1
 8003420:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003424:	e00a      	b.n	800343c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4908      	ldr	r1, [pc, #32]	@ (800344c <__NVIC_SetPriority+0x50>)
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	3b04      	subs	r3, #4
 8003434:	0112      	lsls	r2, r2, #4
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	440b      	add	r3, r1
 800343a:	761a      	strb	r2, [r3, #24]
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000e100 	.word	0xe000e100
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003450:	b480      	push	{r7}
 8003452:	b089      	sub	sp, #36	@ 0x24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f1c3 0307 	rsb	r3, r3, #7
 800346a:	2b04      	cmp	r3, #4
 800346c:	bf28      	it	cs
 800346e:	2304      	movcs	r3, #4
 8003470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3304      	adds	r3, #4
 8003476:	2b06      	cmp	r3, #6
 8003478:	d902      	bls.n	8003480 <NVIC_EncodePriority+0x30>
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3b03      	subs	r3, #3
 800347e:	e000      	b.n	8003482 <NVIC_EncodePriority+0x32>
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003484:	f04f 32ff 	mov.w	r2, #4294967295
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43da      	mvns	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	401a      	ands	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003498:	f04f 31ff 	mov.w	r1, #4294967295
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	43d9      	mvns	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a8:	4313      	orrs	r3, r2
         );
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3724      	adds	r7, #36	@ 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034c8:	d301      	bcc.n	80034ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ca:	2301      	movs	r3, #1
 80034cc:	e00f      	b.n	80034ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ce:	4a0a      	ldr	r2, [pc, #40]	@ (80034f8 <SysTick_Config+0x40>)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034d6:	210f      	movs	r1, #15
 80034d8:	f04f 30ff 	mov.w	r0, #4294967295
 80034dc:	f7ff ff8e 	bl	80033fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034e0:	4b05      	ldr	r3, [pc, #20]	@ (80034f8 <SysTick_Config+0x40>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e6:	4b04      	ldr	r3, [pc, #16]	@ (80034f8 <SysTick_Config+0x40>)
 80034e8:	2207      	movs	r2, #7
 80034ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	e000e010 	.word	0xe000e010

080034fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff ff29 	bl	800335c <__NVIC_SetPriorityGrouping>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003512:	b580      	push	{r7, lr}
 8003514:	b086      	sub	sp, #24
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003524:	f7ff ff3e 	bl	80033a4 <__NVIC_GetPriorityGrouping>
 8003528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	6978      	ldr	r0, [r7, #20]
 8003530:	f7ff ff8e 	bl	8003450 <NVIC_EncodePriority>
 8003534:	4602      	mov	r2, r0
 8003536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff5d 	bl	80033fc <__NVIC_SetPriority>
}
 8003542:	bf00      	nop
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	4603      	mov	r3, r0
 8003552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff31 	bl	80033c0 <__NVIC_EnableIRQ>
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff ffa2 	bl	80034b8 <SysTick_Config>
 8003574:	4603      	mov	r3, r0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7ff f914 	bl	80027b8 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e099      	b.n	80036d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035bc:	e00f      	b.n	80035de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035be:	f7ff f8fb 	bl	80027b8 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b05      	cmp	r3, #5
 80035ca:	d908      	bls.n	80035de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2203      	movs	r2, #3
 80035d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e078      	b.n	80036d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e8      	bne.n	80035be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4b38      	ldr	r3, [pc, #224]	@ (80036d8 <HAL_DMA_Init+0x158>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800360a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	2b04      	cmp	r3, #4
 8003636:	d107      	bne.n	8003648 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003640:	4313      	orrs	r3, r2
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0307 	bic.w	r3, r3, #7
 800365e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	2b04      	cmp	r3, #4
 8003670:	d117      	bne.n	80036a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00e      	beq.n	80036a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fb09 	bl	8003c9c <DMA_CheckFifoParam>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2240      	movs	r2, #64	@ 0x40
 8003694:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800369e:	2301      	movs	r3, #1
 80036a0:	e016      	b.n	80036d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fac0 	bl	8003c30 <DMA_CalcBaseAndBitshift>
 80036b0:	4603      	mov	r3, r0
 80036b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b8:	223f      	movs	r2, #63	@ 0x3f
 80036ba:	409a      	lsls	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	e010803f 	.word	0xe010803f

080036dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_DMA_Start_IT+0x26>
 80036fe:	2302      	movs	r3, #2
 8003700:	e048      	b.n	8003794 <HAL_DMA_Start_IT+0xb8>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d137      	bne.n	8003786 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fa52 	bl	8003bd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003734:	223f      	movs	r2, #63	@ 0x3f
 8003736:	409a      	lsls	r2, r3
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0216 	orr.w	r2, r2, #22
 800374a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800375a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0208 	orr.w	r2, r2, #8
 8003772:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	e005      	b.n	8003792 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800378e:	2302      	movs	r3, #2
 8003790:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003792:	7dfb      	ldrb	r3, [r7, #23]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037aa:	f7ff f805 	bl	80027b8 <HAL_GetTick>
 80037ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d008      	beq.n	80037ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2280      	movs	r2, #128	@ 0x80
 80037c0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e052      	b.n	8003874 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0216 	bic.w	r2, r2, #22
 80037dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <HAL_DMA_Abort+0x62>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0208 	bic.w	r2, r2, #8
 800380c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800381e:	e013      	b.n	8003848 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003820:	f7fe ffca 	bl	80027b8 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b05      	cmp	r3, #5
 800382c:	d90c      	bls.n	8003848 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2203      	movs	r2, #3
 8003838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e015      	b.n	8003874 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e4      	bne.n	8003820 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385a:	223f      	movs	r2, #63	@ 0x3f
 800385c:	409a      	lsls	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d004      	beq.n	800389a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2280      	movs	r2, #128	@ 0x80
 8003894:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e00c      	b.n	80038b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2205      	movs	r2, #5
 800389e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80038cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003b08 <HAL_DMA_IRQHandler+0x248>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a8e      	ldr	r2, [pc, #568]	@ (8003b0c <HAL_DMA_IRQHandler+0x24c>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	0a9b      	lsrs	r3, r3, #10
 80038d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ea:	2208      	movs	r2, #8
 80038ec:	409a      	lsls	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d01a      	beq.n	800392c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d013      	beq.n	800392c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0204 	bic.w	r2, r2, #4
 8003912:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003918:	2208      	movs	r2, #8
 800391a:	409a      	lsls	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003924:	f043 0201 	orr.w	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003930:	2201      	movs	r2, #1
 8003932:	409a      	lsls	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d012      	beq.n	8003962 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00b      	beq.n	8003962 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394e:	2201      	movs	r2, #1
 8003950:	409a      	lsls	r2, r3
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395a:	f043 0202 	orr.w	r2, r3, #2
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003966:	2204      	movs	r2, #4
 8003968:	409a      	lsls	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d012      	beq.n	8003998 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00b      	beq.n	8003998 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003984:	2204      	movs	r2, #4
 8003986:	409a      	lsls	r2, r3
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003990:	f043 0204 	orr.w	r2, r3, #4
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399c:	2210      	movs	r2, #16
 800399e:	409a      	lsls	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d043      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d03c      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ba:	2210      	movs	r2, #16
 80039bc:	409a      	lsls	r2, r3
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d018      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d108      	bne.n	80039f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d024      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
 80039ee:	e01f      	b.n	8003a30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d01b      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
 8003a00:	e016      	b.n	8003a30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d107      	bne.n	8003a20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0208 	bic.w	r2, r2, #8
 8003a1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a34:	2220      	movs	r2, #32
 8003a36:	409a      	lsls	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 808f 	beq.w	8003b60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8087 	beq.w	8003b60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a56:	2220      	movs	r2, #32
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b05      	cmp	r3, #5
 8003a68:	d136      	bne.n	8003ad8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0216 	bic.w	r2, r2, #22
 8003a78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d103      	bne.n	8003a9a <HAL_DMA_IRQHandler+0x1da>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d007      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0208 	bic.w	r2, r2, #8
 8003aa8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aae:	223f      	movs	r2, #63	@ 0x3f
 8003ab0:	409a      	lsls	r2, r3
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d07e      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	4798      	blx	r3
        }
        return;
 8003ad6:	e079      	b.n	8003bcc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d01d      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10d      	bne.n	8003b10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d031      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
 8003b04:	e02c      	b.n	8003b60 <HAL_DMA_IRQHandler+0x2a0>
 8003b06:	bf00      	nop
 8003b08:	20000004 	.word	0x20000004
 8003b0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d023      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
 8003b20:	e01e      	b.n	8003b60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10f      	bne.n	8003b50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0210 	bic.w	r2, r2, #16
 8003b3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d032      	beq.n	8003bce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d022      	beq.n	8003bba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2205      	movs	r2, #5
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d307      	bcc.n	8003ba8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f2      	bne.n	8003b8c <HAL_DMA_IRQHandler+0x2cc>
 8003ba6:	e000      	b.n	8003baa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ba8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	4798      	blx	r3
 8003bca:	e000      	b.n	8003bce <HAL_DMA_IRQHandler+0x30e>
        return;
 8003bcc:	bf00      	nop
    }
  }
}
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003bf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b40      	cmp	r3, #64	@ 0x40
 8003c00:	d108      	bne.n	8003c14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c12:	e007      	b.n	8003c24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	60da      	str	r2, [r3, #12]
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	3b10      	subs	r3, #16
 8003c40:	4a13      	ldr	r2, [pc, #76]	@ (8003c90 <DMA_CalcBaseAndBitshift+0x60>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c4a:	4a12      	ldr	r2, [pc, #72]	@ (8003c94 <DMA_CalcBaseAndBitshift+0x64>)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d908      	bls.n	8003c70 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	4b0c      	ldr	r3, [pc, #48]	@ (8003c98 <DMA_CalcBaseAndBitshift+0x68>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	1d1a      	adds	r2, r3, #4
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c6e:	e006      	b.n	8003c7e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b08      	ldr	r3, [pc, #32]	@ (8003c98 <DMA_CalcBaseAndBitshift+0x68>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	aaaaaaab 	.word	0xaaaaaaab
 8003c94:	0800f7c4 	.word	0x0800f7c4
 8003c98:	fffffc00 	.word	0xfffffc00

08003c9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d11f      	bne.n	8003cf6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d856      	bhi.n	8003d6a <DMA_CheckFifoParam+0xce>
 8003cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc4 <DMA_CheckFifoParam+0x28>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003cd5 	.word	0x08003cd5
 8003cc8:	08003ce7 	.word	0x08003ce7
 8003ccc:	08003cd5 	.word	0x08003cd5
 8003cd0:	08003d6b 	.word	0x08003d6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d046      	beq.n	8003d6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce4:	e043      	b.n	8003d6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003cee:	d140      	bne.n	8003d72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf4:	e03d      	b.n	8003d72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cfe:	d121      	bne.n	8003d44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d837      	bhi.n	8003d76 <DMA_CheckFifoParam+0xda>
 8003d06:	a201      	add	r2, pc, #4	@ (adr r2, 8003d0c <DMA_CheckFifoParam+0x70>)
 8003d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0c:	08003d1d 	.word	0x08003d1d
 8003d10:	08003d23 	.word	0x08003d23
 8003d14:	08003d1d 	.word	0x08003d1d
 8003d18:	08003d35 	.word	0x08003d35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d20:	e030      	b.n	8003d84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d025      	beq.n	8003d7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d32:	e022      	b.n	8003d7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d3c:	d11f      	bne.n	8003d7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d42:	e01c      	b.n	8003d7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d903      	bls.n	8003d52 <DMA_CheckFifoParam+0xb6>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d003      	beq.n	8003d58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d50:	e018      	b.n	8003d84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
      break;
 8003d56:	e015      	b.n	8003d84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00e      	beq.n	8003d82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
      break;
 8003d68:	e00b      	b.n	8003d82 <DMA_CheckFifoParam+0xe6>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e00a      	b.n	8003d84 <DMA_CheckFifoParam+0xe8>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e008      	b.n	8003d84 <DMA_CheckFifoParam+0xe8>
      break;
 8003d72:	bf00      	nop
 8003d74:	e006      	b.n	8003d84 <DMA_CheckFifoParam+0xe8>
      break;
 8003d76:	bf00      	nop
 8003d78:	e004      	b.n	8003d84 <DMA_CheckFifoParam+0xe8>
      break;
 8003d7a:	bf00      	nop
 8003d7c:	e002      	b.n	8003d84 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d7e:	bf00      	nop
 8003d80:	e000      	b.n	8003d84 <DMA_CheckFifoParam+0xe8>
      break;
 8003d82:	bf00      	nop
    }
  } 
  
  return status; 
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop

08003d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b089      	sub	sp, #36	@ 0x24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003da6:	2300      	movs	r3, #0
 8003da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	e175      	b.n	80040a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003db4:	2201      	movs	r2, #1
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	f040 8164 	bne.w	800409a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d005      	beq.n	8003dea <HAL_GPIO_Init+0x56>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d130      	bne.n	8003e4c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	2203      	movs	r2, #3
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e20:	2201      	movs	r2, #1
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 0201 	and.w	r2, r3, #1
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d017      	beq.n	8003e88 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	2203      	movs	r2, #3
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d123      	bne.n	8003edc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	08da      	lsrs	r2, r3, #3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3208      	adds	r2, #8
 8003e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	220f      	movs	r2, #15
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	08da      	lsrs	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3208      	adds	r2, #8
 8003ed6:	69b9      	ldr	r1, [r7, #24]
 8003ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0203 	and.w	r2, r3, #3
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80be 	beq.w	800409a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f1e:	4b66      	ldr	r3, [pc, #408]	@ (80040b8 <HAL_GPIO_Init+0x324>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	4a65      	ldr	r2, [pc, #404]	@ (80040b8 <HAL_GPIO_Init+0x324>)
 8003f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f2a:	4b63      	ldr	r3, [pc, #396]	@ (80040b8 <HAL_GPIO_Init+0x324>)
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f36:	4a61      	ldr	r2, [pc, #388]	@ (80040bc <HAL_GPIO_Init+0x328>)
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	089b      	lsrs	r3, r3, #2
 8003f3c:	3302      	adds	r3, #2
 8003f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	220f      	movs	r2, #15
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a58      	ldr	r2, [pc, #352]	@ (80040c0 <HAL_GPIO_Init+0x32c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d037      	beq.n	8003fd2 <HAL_GPIO_Init+0x23e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a57      	ldr	r2, [pc, #348]	@ (80040c4 <HAL_GPIO_Init+0x330>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d031      	beq.n	8003fce <HAL_GPIO_Init+0x23a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a56      	ldr	r2, [pc, #344]	@ (80040c8 <HAL_GPIO_Init+0x334>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <HAL_GPIO_Init+0x236>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a55      	ldr	r2, [pc, #340]	@ (80040cc <HAL_GPIO_Init+0x338>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d025      	beq.n	8003fc6 <HAL_GPIO_Init+0x232>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a54      	ldr	r2, [pc, #336]	@ (80040d0 <HAL_GPIO_Init+0x33c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01f      	beq.n	8003fc2 <HAL_GPIO_Init+0x22e>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a53      	ldr	r2, [pc, #332]	@ (80040d4 <HAL_GPIO_Init+0x340>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d019      	beq.n	8003fbe <HAL_GPIO_Init+0x22a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a52      	ldr	r2, [pc, #328]	@ (80040d8 <HAL_GPIO_Init+0x344>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <HAL_GPIO_Init+0x226>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a51      	ldr	r2, [pc, #324]	@ (80040dc <HAL_GPIO_Init+0x348>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00d      	beq.n	8003fb6 <HAL_GPIO_Init+0x222>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a50      	ldr	r2, [pc, #320]	@ (80040e0 <HAL_GPIO_Init+0x34c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <HAL_GPIO_Init+0x21e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a4f      	ldr	r2, [pc, #316]	@ (80040e4 <HAL_GPIO_Init+0x350>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <HAL_GPIO_Init+0x21a>
 8003faa:	2309      	movs	r3, #9
 8003fac:	e012      	b.n	8003fd4 <HAL_GPIO_Init+0x240>
 8003fae:	230a      	movs	r3, #10
 8003fb0:	e010      	b.n	8003fd4 <HAL_GPIO_Init+0x240>
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	e00e      	b.n	8003fd4 <HAL_GPIO_Init+0x240>
 8003fb6:	2307      	movs	r3, #7
 8003fb8:	e00c      	b.n	8003fd4 <HAL_GPIO_Init+0x240>
 8003fba:	2306      	movs	r3, #6
 8003fbc:	e00a      	b.n	8003fd4 <HAL_GPIO_Init+0x240>
 8003fbe:	2305      	movs	r3, #5
 8003fc0:	e008      	b.n	8003fd4 <HAL_GPIO_Init+0x240>
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	e006      	b.n	8003fd4 <HAL_GPIO_Init+0x240>
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e004      	b.n	8003fd4 <HAL_GPIO_Init+0x240>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e002      	b.n	8003fd4 <HAL_GPIO_Init+0x240>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <HAL_GPIO_Init+0x240>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	f002 0203 	and.w	r2, r2, #3
 8003fda:	0092      	lsls	r2, r2, #2
 8003fdc:	4093      	lsls	r3, r2
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003fe4:	4935      	ldr	r1, [pc, #212]	@ (80040bc <HAL_GPIO_Init+0x328>)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	3302      	adds	r3, #2
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80040e8 <HAL_GPIO_Init+0x354>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004016:	4a34      	ldr	r2, [pc, #208]	@ (80040e8 <HAL_GPIO_Init+0x354>)
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800401c:	4b32      	ldr	r3, [pc, #200]	@ (80040e8 <HAL_GPIO_Init+0x354>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004040:	4a29      	ldr	r2, [pc, #164]	@ (80040e8 <HAL_GPIO_Init+0x354>)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004046:	4b28      	ldr	r3, [pc, #160]	@ (80040e8 <HAL_GPIO_Init+0x354>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	43db      	mvns	r3, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4013      	ands	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800406a:	4a1f      	ldr	r2, [pc, #124]	@ (80040e8 <HAL_GPIO_Init+0x354>)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004070:	4b1d      	ldr	r3, [pc, #116]	@ (80040e8 <HAL_GPIO_Init+0x354>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004094:	4a14      	ldr	r2, [pc, #80]	@ (80040e8 <HAL_GPIO_Init+0x354>)
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	3301      	adds	r3, #1
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b0f      	cmp	r3, #15
 80040a4:	f67f ae86 	bls.w	8003db4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80040a8:	bf00      	nop
 80040aa:	bf00      	nop
 80040ac:	3724      	adds	r7, #36	@ 0x24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40013800 	.word	0x40013800
 80040c0:	40020000 	.word	0x40020000
 80040c4:	40020400 	.word	0x40020400
 80040c8:	40020800 	.word	0x40020800
 80040cc:	40020c00 	.word	0x40020c00
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40021400 	.word	0x40021400
 80040d8:	40021800 	.word	0x40021800
 80040dc:	40021c00 	.word	0x40021c00
 80040e0:	40022000 	.word	0x40022000
 80040e4:	40022400 	.word	0x40022400
 80040e8:	40013c00 	.word	0x40013c00

080040ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	807b      	strh	r3, [r7, #2]
 80040f8:	4613      	mov	r3, r2
 80040fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040fc:	787b      	ldrb	r3, [r7, #1]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004102:	887a      	ldrh	r2, [r7, #2]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004108:	e003      	b.n	8004112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800410a:	887b      	ldrh	r3, [r7, #2]
 800410c:	041a      	lsls	r2, r3, #16
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	619a      	str	r2, [r3, #24]
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800411e:	b480      	push	{r7}
 8004120:	b085      	sub	sp, #20
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	460b      	mov	r3, r1
 8004128:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004130:	887a      	ldrh	r2, [r7, #2]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4013      	ands	r3, r2
 8004136:	041a      	lsls	r2, r3, #16
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	43d9      	mvns	r1, r3
 800413c:	887b      	ldrh	r3, [r7, #2]
 800413e:	400b      	ands	r3, r1
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	619a      	str	r2, [r3, #24]
}
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800415e:	4b08      	ldr	r3, [pc, #32]	@ (8004180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d006      	beq.n	8004178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800416a:	4a05      	ldr	r2, [pc, #20]	@ (8004180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	4618      	mov	r0, r3
 8004174:	f7fd fb8a 	bl	800188c <HAL_GPIO_EXTI_Callback>
  }
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40013c00 	.word	0x40013c00

08004184 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800418c:	2300      	movs	r3, #0
 800418e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e29b      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 8087 	beq.w	80042b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041a8:	4b96      	ldr	r3, [pc, #600]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d00c      	beq.n	80041ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041b4:	4b93      	ldr	r3, [pc, #588]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 030c 	and.w	r3, r3, #12
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d112      	bne.n	80041e6 <HAL_RCC_OscConfig+0x62>
 80041c0:	4b90      	ldr	r3, [pc, #576]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041cc:	d10b      	bne.n	80041e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d06c      	beq.n	80042b4 <HAL_RCC_OscConfig+0x130>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d168      	bne.n	80042b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e275      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ee:	d106      	bne.n	80041fe <HAL_RCC_OscConfig+0x7a>
 80041f0:	4b84      	ldr	r3, [pc, #528]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a83      	ldr	r2, [pc, #524]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80041f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	e02e      	b.n	800425c <HAL_RCC_OscConfig+0xd8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0x9c>
 8004206:	4b7f      	ldr	r3, [pc, #508]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a7e      	ldr	r2, [pc, #504]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 800420c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b7c      	ldr	r3, [pc, #496]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7b      	ldr	r2, [pc, #492]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 8004218:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e01d      	b.n	800425c <HAL_RCC_OscConfig+0xd8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0xc0>
 800422a:	4b76      	ldr	r3, [pc, #472]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a75      	ldr	r2, [pc, #468]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 8004230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b73      	ldr	r3, [pc, #460]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a72      	ldr	r2, [pc, #456]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e00b      	b.n	800425c <HAL_RCC_OscConfig+0xd8>
 8004244:	4b6f      	ldr	r3, [pc, #444]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a6e      	ldr	r2, [pc, #440]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 800424a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4b6c      	ldr	r3, [pc, #432]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a6b      	ldr	r2, [pc, #428]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 8004256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800425a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d013      	beq.n	800428c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fe faa8 	bl	80027b8 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800426c:	f7fe faa4 	bl	80027b8 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	@ 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e229      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	4b61      	ldr	r3, [pc, #388]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0xe8>
 800428a:	e014      	b.n	80042b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fe fa94 	bl	80027b8 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004294:	f7fe fa90 	bl	80027b8 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	@ 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e215      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	4b57      	ldr	r3, [pc, #348]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x110>
 80042b2:	e000      	b.n	80042b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d069      	beq.n	8004396 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042c2:	4b50      	ldr	r3, [pc, #320]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ce:	4b4d      	ldr	r3, [pc, #308]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d11c      	bne.n	8004314 <HAL_RCC_OscConfig+0x190>
 80042da:	4b4a      	ldr	r3, [pc, #296]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d116      	bne.n	8004314 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e6:	4b47      	ldr	r3, [pc, #284]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_RCC_OscConfig+0x17a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e1e9      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fe:	4b41      	ldr	r3, [pc, #260]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	493d      	ldr	r1, [pc, #244]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004312:	e040      	b.n	8004396 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d023      	beq.n	8004364 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800431c:	4b39      	ldr	r3, [pc, #228]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a38      	ldr	r2, [pc, #224]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fe fa46 	bl	80027b8 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004330:	f7fe fa42 	bl	80027b8 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e1c7      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004342:	4b30      	ldr	r3, [pc, #192]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434e:	4b2d      	ldr	r3, [pc, #180]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4929      	ldr	r1, [pc, #164]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
 8004362:	e018      	b.n	8004396 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004364:	4b27      	ldr	r3, [pc, #156]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a26      	ldr	r2, [pc, #152]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fe fa22 	bl	80027b8 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004378:	f7fe fa1e 	bl	80027b8 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e1a3      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	4b1e      	ldr	r3, [pc, #120]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d038      	beq.n	8004414 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d019      	beq.n	80043de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043aa:	4b16      	ldr	r3, [pc, #88]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80043ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ae:	4a15      	ldr	r2, [pc, #84]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fe f9ff 	bl	80027b8 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043be:	f7fe f9fb 	bl	80027b8 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e180      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80043d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x23a>
 80043dc:	e01a      	b.n	8004414 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043de:	4b09      	ldr	r3, [pc, #36]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80043e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043e2:	4a08      	ldr	r2, [pc, #32]	@ (8004404 <HAL_RCC_OscConfig+0x280>)
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ea:	f7fe f9e5 	bl	80027b8 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f0:	e00a      	b.n	8004408 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f2:	f7fe f9e1 	bl	80027b8 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d903      	bls.n	8004408 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e166      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
 8004404:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004408:	4b92      	ldr	r3, [pc, #584]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 800440a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1ee      	bne.n	80043f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80a4 	beq.w	800456a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004422:	4b8c      	ldr	r3, [pc, #560]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10d      	bne.n	800444a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800442e:	4b89      	ldr	r3, [pc, #548]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	4a88      	ldr	r2, [pc, #544]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004438:	6413      	str	r3, [r2, #64]	@ 0x40
 800443a:	4b86      	ldr	r3, [pc, #536]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004446:	2301      	movs	r3, #1
 8004448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800444a:	4b83      	ldr	r3, [pc, #524]	@ (8004658 <HAL_RCC_OscConfig+0x4d4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004452:	2b00      	cmp	r3, #0
 8004454:	d118      	bne.n	8004488 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004456:	4b80      	ldr	r3, [pc, #512]	@ (8004658 <HAL_RCC_OscConfig+0x4d4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a7f      	ldr	r2, [pc, #508]	@ (8004658 <HAL_RCC_OscConfig+0x4d4>)
 800445c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004462:	f7fe f9a9 	bl	80027b8 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446a:	f7fe f9a5 	bl	80027b8 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b64      	cmp	r3, #100	@ 0x64
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e12a      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800447c:	4b76      	ldr	r3, [pc, #472]	@ (8004658 <HAL_RCC_OscConfig+0x4d4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0f0      	beq.n	800446a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d106      	bne.n	800449e <HAL_RCC_OscConfig+0x31a>
 8004490:	4b70      	ldr	r3, [pc, #448]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004494:	4a6f      	ldr	r2, [pc, #444]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	6713      	str	r3, [r2, #112]	@ 0x70
 800449c:	e02d      	b.n	80044fa <HAL_RCC_OscConfig+0x376>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x33c>
 80044a6:	4b6b      	ldr	r3, [pc, #428]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80044b2:	4b68      	ldr	r3, [pc, #416]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b6:	4a67      	ldr	r2, [pc, #412]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044b8:	f023 0304 	bic.w	r3, r3, #4
 80044bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80044be:	e01c      	b.n	80044fa <HAL_RCC_OscConfig+0x376>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	d10c      	bne.n	80044e2 <HAL_RCC_OscConfig+0x35e>
 80044c8:	4b62      	ldr	r3, [pc, #392]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044cc:	4a61      	ldr	r2, [pc, #388]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044ce:	f043 0304 	orr.w	r3, r3, #4
 80044d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044d4:	4b5f      	ldr	r3, [pc, #380]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e0:	e00b      	b.n	80044fa <HAL_RCC_OscConfig+0x376>
 80044e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044e8:	f023 0301 	bic.w	r3, r3, #1
 80044ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ee:	4b59      	ldr	r3, [pc, #356]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f2:	4a58      	ldr	r2, [pc, #352]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044f4:	f023 0304 	bic.w	r3, r3, #4
 80044f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d015      	beq.n	800452e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004502:	f7fe f959 	bl	80027b8 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004508:	e00a      	b.n	8004520 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450a:	f7fe f955 	bl	80027b8 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004518:	4293      	cmp	r3, r2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e0d8      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004520:	4b4c      	ldr	r3, [pc, #304]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0ee      	beq.n	800450a <HAL_RCC_OscConfig+0x386>
 800452c:	e014      	b.n	8004558 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452e:	f7fe f943 	bl	80027b8 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004534:	e00a      	b.n	800454c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fe f93f 	bl	80027b8 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e0c2      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454c:	4b41      	ldr	r3, [pc, #260]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ee      	bne.n	8004536 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004558:	7dfb      	ldrb	r3, [r7, #23]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d105      	bne.n	800456a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455e:	4b3d      	ldr	r3, [pc, #244]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004562:	4a3c      	ldr	r2, [pc, #240]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004564:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004568:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 80ae 	beq.w	80046d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004574:	4b37      	ldr	r3, [pc, #220]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
 800457c:	2b08      	cmp	r3, #8
 800457e:	d06d      	beq.n	800465c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d14b      	bne.n	8004620 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004588:	4b32      	ldr	r3, [pc, #200]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a31      	ldr	r2, [pc, #196]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 800458e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fe f910 	bl	80027b8 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459c:	f7fe f90c 	bl	80027b8 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e091      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ae:	4b29      	ldr	r3, [pc, #164]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69da      	ldr	r2, [r3, #28]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c8:	019b      	lsls	r3, r3, #6
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d0:	085b      	lsrs	r3, r3, #1
 80045d2:	3b01      	subs	r3, #1
 80045d4:	041b      	lsls	r3, r3, #16
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	061b      	lsls	r3, r3, #24
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e4:	071b      	lsls	r3, r3, #28
 80045e6:	491b      	ldr	r1, [pc, #108]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ec:	4b19      	ldr	r3, [pc, #100]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a18      	ldr	r2, [pc, #96]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80045f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fe f8de 	bl	80027b8 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004600:	f7fe f8da 	bl	80027b8 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e05f      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004612:	4b10      	ldr	r3, [pc, #64]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x47c>
 800461e:	e057      	b.n	80046d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004620:	4b0c      	ldr	r3, [pc, #48]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a0b      	ldr	r2, [pc, #44]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004626:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800462a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fe f8c4 	bl	80027b8 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7fe f8c0 	bl	80027b8 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e045      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004646:	4b03      	ldr	r3, [pc, #12]	@ (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x4b0>
 8004652:	e03d      	b.n	80046d0 <HAL_RCC_OscConfig+0x54c>
 8004654:	40023800 	.word	0x40023800
 8004658:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800465c:	4b1f      	ldr	r3, [pc, #124]	@ (80046dc <HAL_RCC_OscConfig+0x558>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d030      	beq.n	80046cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d129      	bne.n	80046cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d122      	bne.n	80046cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800468c:	4013      	ands	r3, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004692:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004694:	4293      	cmp	r3, r2
 8004696:	d119      	bne.n	80046cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a2:	085b      	lsrs	r3, r3, #1
 80046a4:	3b01      	subs	r3, #1
 80046a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d10f      	bne.n	80046cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d107      	bne.n	80046cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800

080046e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0d0      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046f8:	4b6a      	ldr	r3, [pc, #424]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d910      	bls.n	8004728 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004706:	4b67      	ldr	r3, [pc, #412]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 020f 	bic.w	r2, r3, #15
 800470e:	4965      	ldr	r1, [pc, #404]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b63      	ldr	r3, [pc, #396]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0b8      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d020      	beq.n	8004776 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004740:	4b59      	ldr	r3, [pc, #356]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a58      	ldr	r2, [pc, #352]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004746:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800474a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004758:	4b53      	ldr	r3, [pc, #332]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4a52      	ldr	r2, [pc, #328]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800475e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004762:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	4b50      	ldr	r3, [pc, #320]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	494d      	ldr	r1, [pc, #308]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d040      	beq.n	8004804 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d107      	bne.n	800479a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b47      	ldr	r3, [pc, #284]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d115      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e07f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d107      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a2:	4b41      	ldr	r3, [pc, #260]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e073      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b2:	4b3d      	ldr	r3, [pc, #244]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e06b      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047c2:	4b39      	ldr	r3, [pc, #228]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f023 0203 	bic.w	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	4936      	ldr	r1, [pc, #216]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d4:	f7fd fff0 	bl	80027b8 <HAL_GetTick>
 80047d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047dc:	f7fd ffec 	bl	80027b8 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e053      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	4b2d      	ldr	r3, [pc, #180]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 020c 	and.w	r2, r3, #12
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	429a      	cmp	r2, r3
 8004802:	d1eb      	bne.n	80047dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004804:	4b27      	ldr	r3, [pc, #156]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d210      	bcs.n	8004834 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004812:	4b24      	ldr	r3, [pc, #144]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 020f 	bic.w	r2, r3, #15
 800481a:	4922      	ldr	r1, [pc, #136]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	4313      	orrs	r3, r2
 8004820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b20      	ldr	r3, [pc, #128]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e032      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004840:	4b19      	ldr	r3, [pc, #100]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4916      	ldr	r1, [pc, #88]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800485e:	4b12      	ldr	r3, [pc, #72]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	490e      	ldr	r1, [pc, #56]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004872:	f000 f821 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8004876:	4602      	mov	r2, r0
 8004878:	4b0b      	ldr	r3, [pc, #44]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	490a      	ldr	r1, [pc, #40]	@ (80048ac <HAL_RCC_ClockConfig+0x1cc>)
 8004884:	5ccb      	ldrb	r3, [r1, r3]
 8004886:	fa22 f303 	lsr.w	r3, r2, r3
 800488a:	4a09      	ldr	r2, [pc, #36]	@ (80048b0 <HAL_RCC_ClockConfig+0x1d0>)
 800488c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800488e:	4b09      	ldr	r3, [pc, #36]	@ (80048b4 <HAL_RCC_ClockConfig+0x1d4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fd ff4c 	bl	8002730 <HAL_InitTick>

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023c00 	.word	0x40023c00
 80048a8:	40023800 	.word	0x40023800
 80048ac:	0800f7ac 	.word	0x0800f7ac
 80048b0:	20000004 	.word	0x20000004
 80048b4:	20000008 	.word	0x20000008

080048b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048bc:	b094      	sub	sp, #80	@ 0x50
 80048be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80048c4:	2300      	movs	r3, #0
 80048c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048c8:	2300      	movs	r3, #0
 80048ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d0:	4b79      	ldr	r3, [pc, #484]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d00d      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x40>
 80048dc:	2b08      	cmp	r3, #8
 80048de:	f200 80e1 	bhi.w	8004aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x34>
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d003      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ea:	e0db      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048ec:	4b73      	ldr	r3, [pc, #460]	@ (8004abc <HAL_RCC_GetSysClockFreq+0x204>)
 80048ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048f0:	e0db      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048f2:	4b72      	ldr	r3, [pc, #456]	@ (8004abc <HAL_RCC_GetSysClockFreq+0x204>)
 80048f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048f6:	e0d8      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048f8:	4b6f      	ldr	r3, [pc, #444]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004900:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004902:	4b6d      	ldr	r3, [pc, #436]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d063      	beq.n	80049d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	2200      	movs	r2, #0
 8004916:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004918:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800491a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004920:	633b      	str	r3, [r7, #48]	@ 0x30
 8004922:	2300      	movs	r3, #0
 8004924:	637b      	str	r3, [r7, #52]	@ 0x34
 8004926:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800492a:	4622      	mov	r2, r4
 800492c:	462b      	mov	r3, r5
 800492e:	f04f 0000 	mov.w	r0, #0
 8004932:	f04f 0100 	mov.w	r1, #0
 8004936:	0159      	lsls	r1, r3, #5
 8004938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800493c:	0150      	lsls	r0, r2, #5
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4621      	mov	r1, r4
 8004944:	1a51      	subs	r1, r2, r1
 8004946:	6139      	str	r1, [r7, #16]
 8004948:	4629      	mov	r1, r5
 800494a:	eb63 0301 	sbc.w	r3, r3, r1
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800495c:	4659      	mov	r1, fp
 800495e:	018b      	lsls	r3, r1, #6
 8004960:	4651      	mov	r1, sl
 8004962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004966:	4651      	mov	r1, sl
 8004968:	018a      	lsls	r2, r1, #6
 800496a:	4651      	mov	r1, sl
 800496c:	ebb2 0801 	subs.w	r8, r2, r1
 8004970:	4659      	mov	r1, fp
 8004972:	eb63 0901 	sbc.w	r9, r3, r1
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800498a:	4690      	mov	r8, r2
 800498c:	4699      	mov	r9, r3
 800498e:	4623      	mov	r3, r4
 8004990:	eb18 0303 	adds.w	r3, r8, r3
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	462b      	mov	r3, r5
 8004998:	eb49 0303 	adc.w	r3, r9, r3
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049aa:	4629      	mov	r1, r5
 80049ac:	028b      	lsls	r3, r1, #10
 80049ae:	4621      	mov	r1, r4
 80049b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049b4:	4621      	mov	r1, r4
 80049b6:	028a      	lsls	r2, r1, #10
 80049b8:	4610      	mov	r0, r2
 80049ba:	4619      	mov	r1, r3
 80049bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049be:	2200      	movs	r2, #0
 80049c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049c8:	f7fb fe4e 	bl	8000668 <__aeabi_uldivmod>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4613      	mov	r3, r2
 80049d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049d4:	e058      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d6:	4b38      	ldr	r3, [pc, #224]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	2200      	movs	r2, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	4611      	mov	r1, r2
 80049e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049e6:	623b      	str	r3, [r7, #32]
 80049e8:	2300      	movs	r3, #0
 80049ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	f04f 0000 	mov.w	r0, #0
 80049f8:	f04f 0100 	mov.w	r1, #0
 80049fc:	0159      	lsls	r1, r3, #5
 80049fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a02:	0150      	lsls	r0, r2, #5
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4641      	mov	r1, r8
 8004a0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a0e:	4649      	mov	r1, r9
 8004a10:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a28:	ebb2 040a 	subs.w	r4, r2, sl
 8004a2c:	eb63 050b 	sbc.w	r5, r3, fp
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	00eb      	lsls	r3, r5, #3
 8004a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a3e:	00e2      	lsls	r2, r4, #3
 8004a40:	4614      	mov	r4, r2
 8004a42:	461d      	mov	r5, r3
 8004a44:	4643      	mov	r3, r8
 8004a46:	18e3      	adds	r3, r4, r3
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	eb45 0303 	adc.w	r3, r5, r3
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a5e:	4629      	mov	r1, r5
 8004a60:	028b      	lsls	r3, r1, #10
 8004a62:	4621      	mov	r1, r4
 8004a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a68:	4621      	mov	r1, r4
 8004a6a:	028a      	lsls	r2, r1, #10
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a72:	2200      	movs	r2, #0
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	61fa      	str	r2, [r7, #28]
 8004a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a7c:	f7fb fdf4 	bl	8000668 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4613      	mov	r3, r2
 8004a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a88:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	3301      	adds	r3, #1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aa2:	e002      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aa4:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <HAL_RCC_GetSysClockFreq+0x204>)
 8004aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3750      	adds	r7, #80	@ 0x50
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	00f42400 	.word	0x00f42400

08004ac0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac4:	4b03      	ldr	r3, [pc, #12]	@ (8004ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000004 	.word	0x20000004

08004ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004adc:	f7ff fff0 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	0a9b      	lsrs	r3, r3, #10
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	4903      	ldr	r1, [pc, #12]	@ (8004afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aee:	5ccb      	ldrb	r3, [r1, r3]
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40023800 	.word	0x40023800
 8004afc:	0800f7bc 	.word	0x0800f7bc

08004b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b04:	f7ff ffdc 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4b05      	ldr	r3, [pc, #20]	@ (8004b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	0b5b      	lsrs	r3, r3, #13
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	4903      	ldr	r1, [pc, #12]	@ (8004b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b16:	5ccb      	ldrb	r3, [r1, r3]
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40023800 	.word	0x40023800
 8004b24:	0800f7bc 	.word	0x0800f7bc

08004b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d012      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b50:	4b69      	ldr	r3, [pc, #420]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	4a68      	ldr	r2, [pc, #416]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b56:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004b5a:	6093      	str	r3, [r2, #8]
 8004b5c:	4b66      	ldr	r3, [pc, #408]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b64:	4964      	ldr	r1, [pc, #400]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d017      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b82:	4b5d      	ldr	r3, [pc, #372]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b88:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b90:	4959      	ldr	r1, [pc, #356]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d017      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bc4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bcc:	494a      	ldr	r1, [pc, #296]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bdc:	d101      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004bde:	2301      	movs	r3, #1
 8004be0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004bea:	2301      	movs	r3, #1
 8004bec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 808b 	beq.w	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c0c:	4b3a      	ldr	r3, [pc, #232]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c10:	4a39      	ldr	r2, [pc, #228]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c16:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c18:	4b37      	ldr	r3, [pc, #220]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c24:	4b35      	ldr	r3, [pc, #212]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a34      	ldr	r2, [pc, #208]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c30:	f7fd fdc2 	bl	80027b8 <HAL_GetTick>
 8004c34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c38:	f7fd fdbe 	bl	80027b8 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b64      	cmp	r3, #100	@ 0x64
 8004c44:	d901      	bls.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e38f      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c56:	4b28      	ldr	r3, [pc, #160]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d035      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d02e      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c74:	4b20      	ldr	r3, [pc, #128]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c82:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c88:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c94:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c96:	4a18      	ldr	r2, [pc, #96]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c9c:	4b16      	ldr	r3, [pc, #88]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d114      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fd fd86 	bl	80027b8 <HAL_GetTick>
 8004cac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cae:	e00a      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cb0:	f7fd fd82 	bl	80027b8 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e351      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0ee      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cde:	d111      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ce0:	4b05      	ldr	r3, [pc, #20]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004cec:	4b04      	ldr	r3, [pc, #16]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cee:	400b      	ands	r3, r1
 8004cf0:	4901      	ldr	r1, [pc, #4]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	40007000 	.word	0x40007000
 8004d00:	0ffffcff 	.word	0x0ffffcff
 8004d04:	4bac      	ldr	r3, [pc, #688]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4aab      	ldr	r2, [pc, #684]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d0e:	6093      	str	r3, [r2, #8]
 8004d10:	4ba9      	ldr	r3, [pc, #676]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d1c:	49a6      	ldr	r1, [pc, #664]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d010      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d2e:	4ba2      	ldr	r3, [pc, #648]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d34:	4aa0      	ldr	r2, [pc, #640]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004d3e:	4b9e      	ldr	r3, [pc, #632]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d40:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d48:	499b      	ldr	r1, [pc, #620]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d5c:	4b96      	ldr	r3, [pc, #600]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d62:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d6a:	4993      	ldr	r1, [pc, #588]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d7e:	4b8e      	ldr	r3, [pc, #568]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d8c:	498a      	ldr	r1, [pc, #552]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004da0:	4b85      	ldr	r3, [pc, #532]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dae:	4982      	ldr	r1, [pc, #520]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dc2:	4b7d      	ldr	r3, [pc, #500]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd0:	4979      	ldr	r1, [pc, #484]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004de4:	4b74      	ldr	r3, [pc, #464]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dea:	f023 0203 	bic.w	r2, r3, #3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df2:	4971      	ldr	r1, [pc, #452]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e06:	4b6c      	ldr	r3, [pc, #432]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0c:	f023 020c 	bic.w	r2, r3, #12
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e14:	4968      	ldr	r1, [pc, #416]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e28:	4b63      	ldr	r3, [pc, #396]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e36:	4960      	ldr	r1, [pc, #384]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e50:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e58:	4957      	ldr	r1, [pc, #348]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e6c:	4b52      	ldr	r3, [pc, #328]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e72:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7a:	494f      	ldr	r1, [pc, #316]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e94:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9c:	4946      	ldr	r1, [pc, #280]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004eb0:	4b41      	ldr	r3, [pc, #260]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ebe:	493e      	ldr	r1, [pc, #248]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004ed2:	4b39      	ldr	r3, [pc, #228]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ee0:	4935      	ldr	r1, [pc, #212]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ef4:	4b30      	ldr	r3, [pc, #192]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f02:	492d      	ldr	r1, [pc, #180]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d011      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f16:	4b28      	ldr	r3, [pc, #160]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f24:	4924      	ldr	r1, [pc, #144]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f34:	d101      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f36:	2301      	movs	r3, #1
 8004f38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f46:	2301      	movs	r3, #1
 8004f48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f56:	4b18      	ldr	r3, [pc, #96]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f64:	4914      	ldr	r1, [pc, #80]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00b      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f78:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f7e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f88:	490b      	ldr	r1, [pc, #44]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00f      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004f9c:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fac:	4902      	ldr	r1, [pc, #8]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004fb4:	e002      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004fb6:	bf00      	nop
 8004fb8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00b      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fc8:	4b8a      	ldr	r3, [pc, #552]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd8:	4986      	ldr	r1, [pc, #536]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00b      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004fec:	4b81      	ldr	r3, [pc, #516]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ff2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ffc:	497d      	ldr	r1, [pc, #500]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d006      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 80d6 	beq.w	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005018:	4b76      	ldr	r3, [pc, #472]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a75      	ldr	r2, [pc, #468]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800501e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005024:	f7fd fbc8 	bl	80027b8 <HAL_GetTick>
 8005028:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800502a:	e008      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800502c:	f7fd fbc4 	bl	80027b8 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b64      	cmp	r3, #100	@ 0x64
 8005038:	d901      	bls.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e195      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800503e:	4b6d      	ldr	r3, [pc, #436]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d021      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800505a:	2b00      	cmp	r3, #0
 800505c:	d11d      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800505e:	4b65      	ldr	r3, [pc, #404]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005064:	0c1b      	lsrs	r3, r3, #16
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800506c:	4b61      	ldr	r3, [pc, #388]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800506e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005072:	0e1b      	lsrs	r3, r3, #24
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	019a      	lsls	r2, r3, #6
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	041b      	lsls	r3, r3, #16
 8005084:	431a      	orrs	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	061b      	lsls	r3, r3, #24
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	071b      	lsls	r3, r3, #28
 8005092:	4958      	ldr	r1, [pc, #352]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d004      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050ae:	d00a      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d02e      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050c4:	d129      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050c6:	4b4b      	ldr	r3, [pc, #300]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050cc:	0c1b      	lsrs	r3, r3, #16
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050d4:	4b47      	ldr	r3, [pc, #284]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050da:	0f1b      	lsrs	r3, r3, #28
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	019a      	lsls	r2, r3, #6
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	041b      	lsls	r3, r3, #16
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	061b      	lsls	r3, r3, #24
 80050f4:	431a      	orrs	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	071b      	lsls	r3, r3, #28
 80050fa:	493e      	ldr	r1, [pc, #248]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005102:	4b3c      	ldr	r3, [pc, #240]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005108:	f023 021f 	bic.w	r2, r3, #31
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	3b01      	subs	r3, #1
 8005112:	4938      	ldr	r1, [pc, #224]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01d      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005126:	4b33      	ldr	r3, [pc, #204]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800512c:	0e1b      	lsrs	r3, r3, #24
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005134:	4b2f      	ldr	r3, [pc, #188]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005136:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800513a:	0f1b      	lsrs	r3, r3, #28
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	019a      	lsls	r2, r3, #6
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	041b      	lsls	r3, r3, #16
 800514e:	431a      	orrs	r2, r3
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	061b      	lsls	r3, r3, #24
 8005154:	431a      	orrs	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	071b      	lsls	r3, r3, #28
 800515a:	4926      	ldr	r1, [pc, #152]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d011      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	019a      	lsls	r2, r3, #6
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	041b      	lsls	r3, r3, #16
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	061b      	lsls	r3, r3, #24
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	071b      	lsls	r3, r3, #28
 800518a:	491a      	ldr	r1, [pc, #104]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005192:	4b18      	ldr	r3, [pc, #96]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a17      	ldr	r2, [pc, #92]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005198:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800519c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800519e:	f7fd fb0b 	bl	80027b8 <HAL_GetTick>
 80051a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051a4:	e008      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051a6:	f7fd fb07 	bl	80027b8 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b64      	cmp	r3, #100	@ 0x64
 80051b2:	d901      	bls.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e0d8      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051b8:	4b0e      	ldr	r3, [pc, #56]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f0      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	f040 80ce 	bne.w	8005368 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051cc:	4b09      	ldr	r3, [pc, #36]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a08      	ldr	r2, [pc, #32]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d8:	f7fd faee 	bl	80027b8 <HAL_GetTick>
 80051dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051de:	e00b      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051e0:	f7fd faea 	bl	80027b8 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b64      	cmp	r3, #100	@ 0x64
 80051ec:	d904      	bls.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e0bb      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80051f2:	bf00      	nop
 80051f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051f8:	4b5e      	ldr	r3, [pc, #376]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005204:	d0ec      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005216:	2b00      	cmp	r3, #0
 8005218:	d009      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005222:	2b00      	cmp	r3, #0
 8005224:	d02e      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522a:	2b00      	cmp	r3, #0
 800522c:	d12a      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800522e:	4b51      	ldr	r3, [pc, #324]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005234:	0c1b      	lsrs	r3, r3, #16
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800523c:	4b4d      	ldr	r3, [pc, #308]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005242:	0f1b      	lsrs	r3, r3, #28
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	019a      	lsls	r2, r3, #6
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	041b      	lsls	r3, r3, #16
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	061b      	lsls	r3, r3, #24
 800525c:	431a      	orrs	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	071b      	lsls	r3, r3, #28
 8005262:	4944      	ldr	r1, [pc, #272]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800526a:	4b42      	ldr	r3, [pc, #264]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800526c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005270:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005278:	3b01      	subs	r3, #1
 800527a:	021b      	lsls	r3, r3, #8
 800527c:	493d      	ldr	r1, [pc, #244]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d022      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005294:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005298:	d11d      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800529a:	4b36      	ldr	r3, [pc, #216]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a0:	0e1b      	lsrs	r3, r3, #24
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052a8:	4b32      	ldr	r3, [pc, #200]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ae:	0f1b      	lsrs	r3, r3, #28
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	019a      	lsls	r2, r3, #6
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	041b      	lsls	r3, r3, #16
 80052c2:	431a      	orrs	r2, r3
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	061b      	lsls	r3, r3, #24
 80052c8:	431a      	orrs	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	071b      	lsls	r3, r3, #28
 80052ce:	4929      	ldr	r1, [pc, #164]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d028      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052e2:	4b24      	ldr	r3, [pc, #144]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e8:	0e1b      	lsrs	r3, r3, #24
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052f0:	4b20      	ldr	r3, [pc, #128]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f6:	0c1b      	lsrs	r3, r3, #16
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	019a      	lsls	r2, r3, #6
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	041b      	lsls	r3, r3, #16
 8005308:	431a      	orrs	r2, r3
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	061b      	lsls	r3, r3, #24
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	071b      	lsls	r3, r3, #28
 8005316:	4917      	ldr	r1, [pc, #92]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800531e:	4b15      	ldr	r3, [pc, #84]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005324:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532c:	4911      	ldr	r1, [pc, #68]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005334:	4b0f      	ldr	r3, [pc, #60]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a0e      	ldr	r2, [pc, #56]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800533a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800533e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005340:	f7fd fa3a 	bl	80027b8 <HAL_GetTick>
 8005344:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005346:	e008      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005348:	f7fd fa36 	bl	80027b8 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b64      	cmp	r3, #100	@ 0x64
 8005354:	d901      	bls.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e007      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800535a:	4b06      	ldr	r3, [pc, #24]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005366:	d1ef      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40023800 	.word	0x40023800

08005378 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e09d      	b.n	80054c6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538e:	2b00      	cmp	r3, #0
 8005390:	d108      	bne.n	80053a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800539a:	d009      	beq.n	80053b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	61da      	str	r2, [r3, #28]
 80053a2:	e005      	b.n	80053b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fc fd10 	bl	8001df0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053f0:	d902      	bls.n	80053f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e002      	b.n	80053fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005406:	d007      	beq.n	8005418 <HAL_SPI_Init+0xa0>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005410:	d002      	beq.n	8005418 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545a:	ea42 0103 	orr.w	r1, r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005462:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	0c1b      	lsrs	r3, r3, #16
 8005474:	f003 0204 	and.w	r2, r3, #4
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005494:	ea42 0103 	orr.w	r1, r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b088      	sub	sp, #32
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	4613      	mov	r3, r2
 80054dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_SPI_Transmit+0x22>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e158      	b.n	80057a2 <HAL_SPI_Transmit+0x2d4>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054f8:	f7fd f95e 	bl	80027b8 <HAL_GetTick>
 80054fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054fe:	88fb      	ldrh	r3, [r7, #6]
 8005500:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	d002      	beq.n	8005514 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800550e:	2302      	movs	r3, #2
 8005510:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005512:	e13d      	b.n	8005790 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_SPI_Transmit+0x52>
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d102      	bne.n	8005526 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005524:	e134      	b.n	8005790 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2203      	movs	r2, #3
 800552a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	88fa      	ldrh	r2, [r7, #6]
 800553e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	88fa      	ldrh	r2, [r7, #6]
 8005544:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005570:	d10f      	bne.n	8005592 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005580:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005590:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800559c:	2b40      	cmp	r3, #64	@ 0x40
 800559e:	d007      	beq.n	80055b0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055b8:	d94b      	bls.n	8005652 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_SPI_Transmit+0xfa>
 80055c2:	8afb      	ldrh	r3, [r7, #22]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d13e      	bne.n	8005646 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055cc:	881a      	ldrh	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d8:	1c9a      	adds	r2, r3, #2
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055ec:	e02b      	b.n	8005646 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d112      	bne.n	8005622 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005600:	881a      	ldrh	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560c:	1c9a      	adds	r2, r3, #2
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005620:	e011      	b.n	8005646 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005622:	f7fd f8c9 	bl	80027b8 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d803      	bhi.n	800563a <HAL_SPI_Transmit+0x16c>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005638:	d102      	bne.n	8005640 <HAL_SPI_Transmit+0x172>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005644:	e0a4      	b.n	8005790 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1ce      	bne.n	80055ee <HAL_SPI_Transmit+0x120>
 8005650:	e07c      	b.n	800574c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <HAL_SPI_Transmit+0x192>
 800565a:	8afb      	ldrh	r3, [r7, #22]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d170      	bne.n	8005742 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b01      	cmp	r3, #1
 8005668:	d912      	bls.n	8005690 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566e:	881a      	ldrh	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567a:	1c9a      	adds	r2, r3, #2
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005684:	b29b      	uxth	r3, r3
 8005686:	3b02      	subs	r3, #2
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800568e:	e058      	b.n	8005742 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	7812      	ldrb	r2, [r2, #0]
 800569c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80056b6:	e044      	b.n	8005742 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d12b      	bne.n	800571e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d912      	bls.n	80056f6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d4:	881a      	ldrh	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e0:	1c9a      	adds	r2, r3, #2
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b02      	subs	r3, #2
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056f4:	e025      	b.n	8005742 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	330c      	adds	r3, #12
 8005700:	7812      	ldrb	r2, [r2, #0]
 8005702:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800571c:	e011      	b.n	8005742 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800571e:	f7fd f84b 	bl	80027b8 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d803      	bhi.n	8005736 <HAL_SPI_Transmit+0x268>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005734:	d102      	bne.n	800573c <HAL_SPI_Transmit+0x26e>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005740:	e026      	b.n	8005790 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1b5      	bne.n	80056b8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	6839      	ldr	r1, [r7, #0]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fb5b 	bl	8005e0c <SPI_EndRxTxTransaction>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10a      	bne.n	8005780 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800576a:	2300      	movs	r3, #0
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	77fb      	strb	r3, [r7, #31]
 800578c:	e000      	b.n	8005790 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800578e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80057a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3720      	adds	r7, #32
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b08a      	sub	sp, #40	@ 0x28
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
 80057b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057b8:	2301      	movs	r3, #1
 80057ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_SPI_TransmitReceive+0x26>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e1fb      	b.n	8005bc8 <HAL_SPI_TransmitReceive+0x41e>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057d8:	f7fc ffee 	bl	80027b8 <HAL_GetTick>
 80057dc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057e4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80057ec:	887b      	ldrh	r3, [r7, #2]
 80057ee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80057f0:	887b      	ldrh	r3, [r7, #2]
 80057f2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057f4:	7efb      	ldrb	r3, [r7, #27]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d00e      	beq.n	8005818 <HAL_SPI_TransmitReceive+0x6e>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005800:	d106      	bne.n	8005810 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <HAL_SPI_TransmitReceive+0x66>
 800580a:	7efb      	ldrb	r3, [r7, #27]
 800580c:	2b04      	cmp	r3, #4
 800580e:	d003      	beq.n	8005818 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005810:	2302      	movs	r3, #2
 8005812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005816:	e1cd      	b.n	8005bb4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d005      	beq.n	800582a <HAL_SPI_TransmitReceive+0x80>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <HAL_SPI_TransmitReceive+0x80>
 8005824:	887b      	ldrh	r3, [r7, #2]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005830:	e1c0      	b.n	8005bb4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b04      	cmp	r3, #4
 800583c:	d003      	beq.n	8005846 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2205      	movs	r2, #5
 8005842:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	887a      	ldrh	r2, [r7, #2]
 8005856:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	887a      	ldrh	r2, [r7, #2]
 800585e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	887a      	ldrh	r2, [r7, #2]
 800586c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	887a      	ldrh	r2, [r7, #2]
 8005872:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005888:	d802      	bhi.n	8005890 <HAL_SPI_TransmitReceive+0xe6>
 800588a:	8a3b      	ldrh	r3, [r7, #16]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d908      	bls.n	80058a2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	e007      	b.n	80058b2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058bc:	2b40      	cmp	r3, #64	@ 0x40
 80058be:	d007      	beq.n	80058d0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058d8:	d97c      	bls.n	80059d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_SPI_TransmitReceive+0x13e>
 80058e2:	8a7b      	ldrh	r3, [r7, #18]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d169      	bne.n	80059bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ec:	881a      	ldrh	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f8:	1c9a      	adds	r2, r3, #2
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800590c:	e056      	b.n	80059bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b02      	cmp	r3, #2
 800591a:	d11b      	bne.n	8005954 <HAL_SPI_TransmitReceive+0x1aa>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d016      	beq.n	8005954 <HAL_SPI_TransmitReceive+0x1aa>
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005928:	2b01      	cmp	r3, #1
 800592a:	d113      	bne.n	8005954 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005930:	881a      	ldrh	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593c:	1c9a      	adds	r2, r3, #2
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b01      	cmp	r3, #1
 8005960:	d11c      	bne.n	800599c <HAL_SPI_TransmitReceive+0x1f2>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d016      	beq.n	800599c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005978:	b292      	uxth	r2, r2
 800597a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005980:	1c9a      	adds	r2, r3, #2
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005998:	2301      	movs	r3, #1
 800599a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800599c:	f7fc ff0c 	bl	80027b8 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d807      	bhi.n	80059bc <HAL_SPI_TransmitReceive+0x212>
 80059ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b2:	d003      	beq.n	80059bc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80059ba:	e0fb      	b.n	8005bb4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1a3      	bne.n	800590e <HAL_SPI_TransmitReceive+0x164>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d19d      	bne.n	800590e <HAL_SPI_TransmitReceive+0x164>
 80059d2:	e0df      	b.n	8005b94 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_SPI_TransmitReceive+0x23a>
 80059dc:	8a7b      	ldrh	r3, [r7, #18]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	f040 80cb 	bne.w	8005b7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d912      	bls.n	8005a14 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f2:	881a      	ldrh	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fe:	1c9a      	adds	r2, r3, #2
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	3b02      	subs	r3, #2
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a12:	e0b2      	b.n	8005b7a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	330c      	adds	r3, #12
 8005a1e:	7812      	ldrb	r2, [r2, #0]
 8005a20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a3a:	e09e      	b.n	8005b7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d134      	bne.n	8005ab4 <HAL_SPI_TransmitReceive+0x30a>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d02f      	beq.n	8005ab4 <HAL_SPI_TransmitReceive+0x30a>
 8005a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d12c      	bne.n	8005ab4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d912      	bls.n	8005a8a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a68:	881a      	ldrh	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a74:	1c9a      	adds	r2, r3, #2
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b02      	subs	r3, #2
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a88:	e012      	b.n	8005ab0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	330c      	adds	r3, #12
 8005a94:	7812      	ldrb	r2, [r2, #0]
 8005a96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d148      	bne.n	8005b54 <HAL_SPI_TransmitReceive+0x3aa>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d042      	beq.n	8005b54 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d923      	bls.n	8005b22 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae4:	b292      	uxth	r2, r2
 8005ae6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aec:	1c9a      	adds	r2, r3, #2
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b02      	subs	r3, #2
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d81f      	bhi.n	8005b50 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b1e:	605a      	str	r2, [r3, #4]
 8005b20:	e016      	b.n	8005b50 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f103 020c 	add.w	r2, r3, #12
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2e:	7812      	ldrb	r2, [r2, #0]
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b50:	2301      	movs	r3, #1
 8005b52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b54:	f7fc fe30 	bl	80027b8 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d803      	bhi.n	8005b6c <HAL_SPI_TransmitReceive+0x3c2>
 8005b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6a:	d102      	bne.n	8005b72 <HAL_SPI_TransmitReceive+0x3c8>
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d103      	bne.n	8005b7a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8005b78:	e01c      	b.n	8005bb4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f47f af5b 	bne.w	8005a3c <HAL_SPI_TransmitReceive+0x292>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f47f af54 	bne.w	8005a3c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f937 	bl	8005e0c <SPI_EndRxTxTransaction>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d006      	beq.n	8005bb2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2220      	movs	r2, #32
 8005bae:	661a      	str	r2, [r3, #96]	@ 0x60
 8005bb0:	e000      	b.n	8005bb4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005bb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3728      	adds	r7, #40	@ 0x28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005be0:	f7fc fdea 	bl	80027b8 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be8:	1a9b      	subs	r3, r3, r2
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	4413      	add	r3, r2
 8005bee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bf0:	f7fc fde2 	bl	80027b8 <HAL_GetTick>
 8005bf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bf6:	4b39      	ldr	r3, [pc, #228]	@ (8005cdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	015b      	lsls	r3, r3, #5
 8005bfc:	0d1b      	lsrs	r3, r3, #20
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	fb02 f303 	mul.w	r3, r2, r3
 8005c04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c06:	e054      	b.n	8005cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d050      	beq.n	8005cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c10:	f7fc fdd2 	bl	80027b8 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d902      	bls.n	8005c26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d13d      	bne.n	8005ca2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c3e:	d111      	bne.n	8005c64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c48:	d004      	beq.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c52:	d107      	bne.n	8005c64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c6c:	d10f      	bne.n	8005c8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e017      	b.n	8005cd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	bf0c      	ite	eq
 8005cc2:	2301      	moveq	r3, #1
 8005cc4:	2300      	movne	r3, #0
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	461a      	mov	r2, r3
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d19b      	bne.n	8005c08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3720      	adds	r7, #32
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20000004 	.word	0x20000004

08005ce0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08a      	sub	sp, #40	@ 0x28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005cf2:	f7fc fd61 	bl	80027b8 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfa:	1a9b      	subs	r3, r3, r2
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	4413      	add	r3, r2
 8005d00:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005d02:	f7fc fd59 	bl	80027b8 <HAL_GetTick>
 8005d06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	330c      	adds	r3, #12
 8005d0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d10:	4b3d      	ldr	r3, [pc, #244]	@ (8005e08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	00da      	lsls	r2, r3, #3
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	0d1b      	lsrs	r3, r3, #20
 8005d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d28:	e060      	b.n	8005dec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d30:	d107      	bne.n	8005d42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d050      	beq.n	8005dec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d4a:	f7fc fd35 	bl	80027b8 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d902      	bls.n	8005d60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d13d      	bne.n	8005ddc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d78:	d111      	bne.n	8005d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d82:	d004      	beq.n	8005d8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d8c:	d107      	bne.n	8005d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005da6:	d10f      	bne.n	8005dc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005dc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e010      	b.n	8005dfe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4013      	ands	r3, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d196      	bne.n	8005d2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3728      	adds	r7, #40	@ 0x28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000004 	.word	0x20000004

08005e0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af02      	add	r7, sp, #8
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f7ff ff5b 	bl	8005ce0 <SPI_WaitFifoStateUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e34:	f043 0220 	orr.w	r2, r3, #32
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e046      	b.n	8005ece <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e40:	4b25      	ldr	r3, [pc, #148]	@ (8005ed8 <SPI_EndRxTxTransaction+0xcc>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a25      	ldr	r2, [pc, #148]	@ (8005edc <SPI_EndRxTxTransaction+0xd0>)
 8005e46:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4a:	0d5b      	lsrs	r3, r3, #21
 8005e4c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e50:	fb02 f303 	mul.w	r3, r2, r3
 8005e54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e5e:	d112      	bne.n	8005e86 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2200      	movs	r2, #0
 8005e68:	2180      	movs	r1, #128	@ 0x80
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f7ff feb0 	bl	8005bd0 <SPI_WaitFlagStateUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d016      	beq.n	8005ea4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e7a:	f043 0220 	orr.w	r2, r3, #32
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e023      	b.n	8005ece <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e9c:	2b80      	cmp	r3, #128	@ 0x80
 8005e9e:	d0f2      	beq.n	8005e86 <SPI_EndRxTxTransaction+0x7a>
 8005ea0:	e000      	b.n	8005ea4 <SPI_EndRxTxTransaction+0x98>
        break;
 8005ea2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7ff ff15 	bl	8005ce0 <SPI_WaitFifoStateUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d007      	beq.n	8005ecc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec0:	f043 0220 	orr.w	r2, r3, #32
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e000      	b.n	8005ece <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000004 	.word	0x20000004
 8005edc:	165e9f81 	.word	0x165e9f81

08005ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e049      	b.n	8005f86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fc f9ee 	bl	80022e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4610      	mov	r0, r2
 8005f20:	f000 fac0 	bl	80064a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d001      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e054      	b.n	8006052 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a26      	ldr	r2, [pc, #152]	@ (8006060 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d022      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd2:	d01d      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a22      	ldr	r2, [pc, #136]	@ (8006064 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d018      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a21      	ldr	r2, [pc, #132]	@ (8006068 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a1f      	ldr	r2, [pc, #124]	@ (800606c <HAL_TIM_Base_Start_IT+0xdc>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00e      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8006070 <HAL_TIM_Base_Start_IT+0xe0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d009      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1c      	ldr	r2, [pc, #112]	@ (8006074 <HAL_TIM_Base_Start_IT+0xe4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a1b      	ldr	r2, [pc, #108]	@ (8006078 <HAL_TIM_Base_Start_IT+0xe8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d115      	bne.n	800603c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	4b19      	ldr	r3, [pc, #100]	@ (800607c <HAL_TIM_Base_Start_IT+0xec>)
 8006018:	4013      	ands	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b06      	cmp	r3, #6
 8006020:	d015      	beq.n	800604e <HAL_TIM_Base_Start_IT+0xbe>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006028:	d011      	beq.n	800604e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f042 0201 	orr.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603a:	e008      	b.n	800604e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0201 	orr.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	e000      	b.n	8006050 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800604e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40010000 	.word	0x40010000
 8006064:	40000400 	.word	0x40000400
 8006068:	40000800 	.word	0x40000800
 800606c:	40000c00 	.word	0x40000c00
 8006070:	40010400 	.word	0x40010400
 8006074:	40014000 	.word	0x40014000
 8006078:	40001800 	.word	0x40001800
 800607c:	00010007 	.word	0x00010007

08006080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b02      	cmp	r3, #2
 8006094:	d122      	bne.n	80060dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d11b      	bne.n	80060dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f06f 0202 	mvn.w	r2, #2
 80060ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	f003 0303 	and.w	r3, r3, #3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f9d0 	bl	8006468 <HAL_TIM_IC_CaptureCallback>
 80060c8:	e005      	b.n	80060d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f9c2 	bl	8006454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f9d3 	bl	800647c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f003 0304 	and.w	r3, r3, #4
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d122      	bne.n	8006130 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	d11b      	bne.n	8006130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f06f 0204 	mvn.w	r2, #4
 8006100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2202      	movs	r2, #2
 8006106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f9a6 	bl	8006468 <HAL_TIM_IC_CaptureCallback>
 800611c:	e005      	b.n	800612a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f998 	bl	8006454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f9a9 	bl	800647c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f003 0308 	and.w	r3, r3, #8
 800613a:	2b08      	cmp	r3, #8
 800613c:	d122      	bne.n	8006184 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f003 0308 	and.w	r3, r3, #8
 8006148:	2b08      	cmp	r3, #8
 800614a:	d11b      	bne.n	8006184 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f06f 0208 	mvn.w	r2, #8
 8006154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2204      	movs	r2, #4
 800615a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f97c 	bl	8006468 <HAL_TIM_IC_CaptureCallback>
 8006170:	e005      	b.n	800617e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f96e 	bl	8006454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f97f 	bl	800647c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f003 0310 	and.w	r3, r3, #16
 800618e:	2b10      	cmp	r3, #16
 8006190:	d122      	bne.n	80061d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2b10      	cmp	r3, #16
 800619e:	d11b      	bne.n	80061d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f06f 0210 	mvn.w	r2, #16
 80061a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2208      	movs	r2, #8
 80061ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f952 	bl	8006468 <HAL_TIM_IC_CaptureCallback>
 80061c4:	e005      	b.n	80061d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f944 	bl	8006454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f955 	bl	800647c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d10e      	bne.n	8006204 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d107      	bne.n	8006204 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0201 	mvn.w	r2, #1
 80061fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7fc f8b0 	bl	8002364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800620e:	2b80      	cmp	r3, #128	@ 0x80
 8006210:	d10e      	bne.n	8006230 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800621c:	2b80      	cmp	r3, #128	@ 0x80
 800621e:	d107      	bne.n	8006230 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fb0c 	bl	8006848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800623a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800623e:	d10e      	bne.n	800625e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800624a:	2b80      	cmp	r3, #128	@ 0x80
 800624c:	d107      	bne.n	800625e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 faff 	bl	800685c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006268:	2b40      	cmp	r3, #64	@ 0x40
 800626a:	d10e      	bne.n	800628a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006276:	2b40      	cmp	r3, #64	@ 0x40
 8006278:	d107      	bne.n	800628a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f903 	bl	8006490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b20      	cmp	r3, #32
 8006296:	d10e      	bne.n	80062b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d107      	bne.n	80062b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f06f 0220 	mvn.w	r2, #32
 80062ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fabf 	bl	8006834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062b6:	bf00      	nop
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_TIM_ConfigClockSource+0x1c>
 80062d8:	2302      	movs	r3, #2
 80062da:	e0b4      	b.n	8006446 <HAL_TIM_ConfigClockSource+0x186>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	4b56      	ldr	r3, [pc, #344]	@ (8006450 <HAL_TIM_ConfigClockSource+0x190>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006314:	d03e      	beq.n	8006394 <HAL_TIM_ConfigClockSource+0xd4>
 8006316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800631a:	f200 8087 	bhi.w	800642c <HAL_TIM_ConfigClockSource+0x16c>
 800631e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006322:	f000 8086 	beq.w	8006432 <HAL_TIM_ConfigClockSource+0x172>
 8006326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800632a:	d87f      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 800632c:	2b70      	cmp	r3, #112	@ 0x70
 800632e:	d01a      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0xa6>
 8006330:	2b70      	cmp	r3, #112	@ 0x70
 8006332:	d87b      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 8006334:	2b60      	cmp	r3, #96	@ 0x60
 8006336:	d050      	beq.n	80063da <HAL_TIM_ConfigClockSource+0x11a>
 8006338:	2b60      	cmp	r3, #96	@ 0x60
 800633a:	d877      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 800633c:	2b50      	cmp	r3, #80	@ 0x50
 800633e:	d03c      	beq.n	80063ba <HAL_TIM_ConfigClockSource+0xfa>
 8006340:	2b50      	cmp	r3, #80	@ 0x50
 8006342:	d873      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 8006344:	2b40      	cmp	r3, #64	@ 0x40
 8006346:	d058      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0x13a>
 8006348:	2b40      	cmp	r3, #64	@ 0x40
 800634a:	d86f      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 800634c:	2b30      	cmp	r3, #48	@ 0x30
 800634e:	d064      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x15a>
 8006350:	2b30      	cmp	r3, #48	@ 0x30
 8006352:	d86b      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 8006354:	2b20      	cmp	r3, #32
 8006356:	d060      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x15a>
 8006358:	2b20      	cmp	r3, #32
 800635a:	d867      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
 800635c:	2b00      	cmp	r3, #0
 800635e:	d05c      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x15a>
 8006360:	2b10      	cmp	r3, #16
 8006362:	d05a      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x15a>
 8006364:	e062      	b.n	800642c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006376:	f000 f9af 	bl	80066d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	609a      	str	r2, [r3, #8]
      break;
 8006392:	e04f      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063a4:	f000 f998 	bl	80066d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063b6:	609a      	str	r2, [r3, #8]
      break;
 80063b8:	e03c      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c6:	461a      	mov	r2, r3
 80063c8:	f000 f90c 	bl	80065e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2150      	movs	r1, #80	@ 0x50
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 f965 	bl	80066a2 <TIM_ITRx_SetConfig>
      break;
 80063d8:	e02c      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063e6:	461a      	mov	r2, r3
 80063e8:	f000 f92b 	bl	8006642 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2160      	movs	r1, #96	@ 0x60
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 f955 	bl	80066a2 <TIM_ITRx_SetConfig>
      break;
 80063f8:	e01c      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006406:	461a      	mov	r2, r3
 8006408:	f000 f8ec 	bl	80065e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2140      	movs	r1, #64	@ 0x40
 8006412:	4618      	mov	r0, r3
 8006414:	f000 f945 	bl	80066a2 <TIM_ITRx_SetConfig>
      break;
 8006418:	e00c      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4619      	mov	r1, r3
 8006424:	4610      	mov	r0, r2
 8006426:	f000 f93c 	bl	80066a2 <TIM_ITRx_SetConfig>
      break;
 800642a:	e003      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	73fb      	strb	r3, [r7, #15]
      break;
 8006430:	e000      	b.n	8006434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	fffeff88 	.word	0xfffeff88

08006454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a40      	ldr	r2, [pc, #256]	@ (80065b8 <TIM_Base_SetConfig+0x114>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d013      	beq.n	80064e4 <TIM_Base_SetConfig+0x40>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c2:	d00f      	beq.n	80064e4 <TIM_Base_SetConfig+0x40>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a3d      	ldr	r2, [pc, #244]	@ (80065bc <TIM_Base_SetConfig+0x118>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00b      	beq.n	80064e4 <TIM_Base_SetConfig+0x40>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a3c      	ldr	r2, [pc, #240]	@ (80065c0 <TIM_Base_SetConfig+0x11c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d007      	beq.n	80064e4 <TIM_Base_SetConfig+0x40>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a3b      	ldr	r2, [pc, #236]	@ (80065c4 <TIM_Base_SetConfig+0x120>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d003      	beq.n	80064e4 <TIM_Base_SetConfig+0x40>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a3a      	ldr	r2, [pc, #232]	@ (80065c8 <TIM_Base_SetConfig+0x124>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d108      	bne.n	80064f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a2f      	ldr	r2, [pc, #188]	@ (80065b8 <TIM_Base_SetConfig+0x114>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d02b      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006504:	d027      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a2c      	ldr	r2, [pc, #176]	@ (80065bc <TIM_Base_SetConfig+0x118>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d023      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a2b      	ldr	r2, [pc, #172]	@ (80065c0 <TIM_Base_SetConfig+0x11c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d01f      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a2a      	ldr	r2, [pc, #168]	@ (80065c4 <TIM_Base_SetConfig+0x120>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01b      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a29      	ldr	r2, [pc, #164]	@ (80065c8 <TIM_Base_SetConfig+0x124>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d017      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a28      	ldr	r2, [pc, #160]	@ (80065cc <TIM_Base_SetConfig+0x128>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d013      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a27      	ldr	r2, [pc, #156]	@ (80065d0 <TIM_Base_SetConfig+0x12c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00f      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a26      	ldr	r2, [pc, #152]	@ (80065d4 <TIM_Base_SetConfig+0x130>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00b      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a25      	ldr	r2, [pc, #148]	@ (80065d8 <TIM_Base_SetConfig+0x134>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d007      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a24      	ldr	r2, [pc, #144]	@ (80065dc <TIM_Base_SetConfig+0x138>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d003      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a23      	ldr	r2, [pc, #140]	@ (80065e0 <TIM_Base_SetConfig+0x13c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d108      	bne.n	8006568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800655c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a0a      	ldr	r2, [pc, #40]	@ (80065b8 <TIM_Base_SetConfig+0x114>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d003      	beq.n	800659c <TIM_Base_SetConfig+0xf8>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a0c      	ldr	r2, [pc, #48]	@ (80065c8 <TIM_Base_SetConfig+0x124>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d103      	bne.n	80065a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	615a      	str	r2, [r3, #20]
}
 80065aa:	bf00      	nop
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40010000 	.word	0x40010000
 80065bc:	40000400 	.word	0x40000400
 80065c0:	40000800 	.word	0x40000800
 80065c4:	40000c00 	.word	0x40000c00
 80065c8:	40010400 	.word	0x40010400
 80065cc:	40014000 	.word	0x40014000
 80065d0:	40014400 	.word	0x40014400
 80065d4:	40014800 	.word	0x40014800
 80065d8:	40001800 	.word	0x40001800
 80065dc:	40001c00 	.word	0x40001c00
 80065e0:	40002000 	.word	0x40002000

080065e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f023 0201 	bic.w	r2, r3, #1
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800660e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f023 030a 	bic.w	r3, r3, #10
 8006620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	621a      	str	r2, [r3, #32]
}
 8006636:	bf00      	nop
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006642:	b480      	push	{r7}
 8006644:	b087      	sub	sp, #28
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f023 0210 	bic.w	r2, r3, #16
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800666c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	031b      	lsls	r3, r3, #12
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4313      	orrs	r3, r2
 8006676:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800667e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	011b      	lsls	r3, r3, #4
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	4313      	orrs	r3, r2
 8006688:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	621a      	str	r2, [r3, #32]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b085      	sub	sp, #20
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	f043 0307 	orr.w	r3, r3, #7
 80066c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	609a      	str	r2, [r3, #8]
}
 80066cc:	bf00      	nop
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	021a      	lsls	r2, r3, #8
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4313      	orrs	r3, r2
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	609a      	str	r2, [r3, #8]
}
 800670c:	bf00      	nop
 800670e:	371c      	adds	r7, #28
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800672c:	2302      	movs	r3, #2
 800672e:	e06d      	b.n	800680c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a30      	ldr	r2, [pc, #192]	@ (8006818 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a2f      	ldr	r2, [pc, #188]	@ (800681c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d108      	bne.n	8006776 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800676a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800677c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a20      	ldr	r2, [pc, #128]	@ (8006818 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d022      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067a2:	d01d      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006820 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d018      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006824 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d013      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006828 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00e      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a15      	ldr	r2, [pc, #84]	@ (800681c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d009      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a16      	ldr	r2, [pc, #88]	@ (800682c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d004      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a15      	ldr	r2, [pc, #84]	@ (8006830 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d10c      	bne.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	40010000 	.word	0x40010000
 800681c:	40010400 	.word	0x40010400
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40000c00 	.word	0x40000c00
 800682c:	40014000 	.word	0x40014000
 8006830:	40001800 	.word	0x40001800

08006834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e040      	b.n	8006904 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006886:	2b00      	cmp	r3, #0
 8006888:	d106      	bne.n	8006898 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fb fdc8 	bl	8002428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2224      	movs	r2, #36	@ 0x24
 800689c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0201 	bic.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fbd6 	bl	8007060 <UART_SetConfig>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e022      	b.n	8006904 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fe2e 	bl	8007528 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 feb5 	bl	800766c <UART_CheckIdleState>
 8006902:	4603      	mov	r3, r0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800690c:	b480      	push	{r7}
 800690e:	b08b      	sub	sp, #44	@ 0x2c
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	4613      	mov	r3, r2
 8006918:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800691e:	2b20      	cmp	r3, #32
 8006920:	d147      	bne.n	80069b2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_UART_Transmit_IT+0x22>
 8006928:	88fb      	ldrh	r3, [r7, #6]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e040      	b.n	80069b4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	88fa      	ldrh	r2, [r7, #6]
 800693c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	88fa      	ldrh	r2, [r7, #6]
 8006944:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2221      	movs	r2, #33	@ 0x21
 800695a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006964:	d107      	bne.n	8006976 <HAL_UART_Transmit_IT+0x6a>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d103      	bne.n	8006976 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4a13      	ldr	r2, [pc, #76]	@ (80069c0 <HAL_UART_Transmit_IT+0xb4>)
 8006972:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006974:	e002      	b.n	800697c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4a12      	ldr	r2, [pc, #72]	@ (80069c4 <HAL_UART_Transmit_IT+0xb8>)
 800697a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	613b      	str	r3, [r7, #16]
   return(result);
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006990:	627b      	str	r3, [r7, #36]	@ 0x24
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699a:	623b      	str	r3, [r7, #32]
 800699c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	69f9      	ldr	r1, [r7, #28]
 80069a0:	6a3a      	ldr	r2, [r7, #32]
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e6      	bne.n	800697c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	e000      	b.n	80069b4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80069b2:	2302      	movs	r3, #2
  }
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	372c      	adds	r7, #44	@ 0x2c
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	08007bcb 	.word	0x08007bcb
 80069c4:	08007b15 	.word	0x08007b15

080069c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	@ 0x28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	4613      	mov	r3, r2
 80069d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069dc:	2b20      	cmp	r3, #32
 80069de:	d132      	bne.n	8006a46 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <HAL_UART_Receive_IT+0x24>
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e02b      	b.n	8006a48 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d018      	beq.n	8006a36 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	613b      	str	r3, [r7, #16]
   return(result);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a22:	623b      	str	r3, [r7, #32]
 8006a24:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	69f9      	ldr	r1, [r7, #28]
 8006a28:	6a3a      	ldr	r2, [r7, #32]
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e6      	bne.n	8006a04 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a36:	88fb      	ldrh	r3, [r7, #6]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 ff29 	bl	8007894 <UART_Start_Receive_IT>
 8006a42:	4603      	mov	r3, r0
 8006a44:	e000      	b.n	8006a48 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006a46:	2302      	movs	r3, #2
  }
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3728      	adds	r7, #40	@ 0x28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b0ba      	sub	sp, #232	@ 0xe8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006a7a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006a7e:	4013      	ands	r3, r2
 8006a80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006a84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d115      	bne.n	8006ab8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00f      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a9c:	f003 0320 	and.w	r3, r3, #32
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d009      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 82ac 	beq.w	8007006 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
      }
      return;
 8006ab6:	e2a6      	b.n	8007006 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006ab8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 8117 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006ace:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006ad2:	4b85      	ldr	r3, [pc, #532]	@ (8006ce8 <HAL_UART_IRQHandler+0x298>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 810a 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d011      	beq.n	8006b0c <HAL_UART_IRQHandler+0xbc>
 8006ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2201      	movs	r2, #1
 8006afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b02:	f043 0201 	orr.w	r2, r3, #1
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d011      	beq.n	8006b3c <HAL_UART_IRQHandler+0xec>
 8006b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00b      	beq.n	8006b3c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b32:	f043 0204 	orr.w	r2, r3, #4
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d011      	beq.n	8006b6c <HAL_UART_IRQHandler+0x11c>
 8006b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00b      	beq.n	8006b6c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2204      	movs	r2, #4
 8006b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b62:	f043 0202 	orr.w	r2, r3, #2
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d017      	beq.n	8006ba8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b7c:	f003 0320 	and.w	r3, r3, #32
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d105      	bne.n	8006b90 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00b      	beq.n	8006ba8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2208      	movs	r2, #8
 8006b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b9e:	f043 0208 	orr.w	r2, r3, #8
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d012      	beq.n	8006bda <HAL_UART_IRQHandler+0x18a>
 8006bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00c      	beq.n	8006bda <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bd0:	f043 0220 	orr.w	r2, r3, #32
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 8212 	beq.w	800700a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00d      	beq.n	8006c0e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d007      	beq.n	8006c0e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c22:	2b40      	cmp	r3, #64	@ 0x40
 8006c24:	d005      	beq.n	8006c32 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d04f      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fef4 	bl	8007a20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c42:	2b40      	cmp	r3, #64	@ 0x40
 8006c44:	d141      	bne.n	8006cca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1d9      	bne.n	8006c46 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d013      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c9e:	4a13      	ldr	r2, [pc, #76]	@ (8006cec <HAL_UART_IRQHandler+0x29c>)
 8006ca0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fc fde8 	bl	800387c <HAL_DMA_Abort_IT>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d017      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc0:	e00f      	b.n	8006ce2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f9ac 	bl	8007020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc8:	e00b      	b.n	8006ce2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f9a8 	bl	8007020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd0:	e007      	b.n	8006ce2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f9a4 	bl	8007020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006ce0:	e193      	b.n	800700a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce2:	bf00      	nop
    return;
 8006ce4:	e191      	b.n	800700a <HAL_UART_IRQHandler+0x5ba>
 8006ce6:	bf00      	nop
 8006ce8:	04000120 	.word	0x04000120
 8006cec:	08007ae9 	.word	0x08007ae9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	f040 814c 	bne.w	8006f92 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cfe:	f003 0310 	and.w	r3, r3, #16
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 8145 	beq.w	8006f92 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d0c:	f003 0310 	and.w	r3, r3, #16
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 813e 	beq.w	8006f92 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2210      	movs	r2, #16
 8006d1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d28:	2b40      	cmp	r3, #64	@ 0x40
 8006d2a:	f040 80b6 	bne.w	8006e9a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f000 8165 	beq.w	800700e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	f080 815d 	bcs.w	800700e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d68:	f000 8086 	beq.w	8006e78 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	461a      	mov	r2, r3
 8006d92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d9a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006da2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1da      	bne.n	8006d6c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3308      	adds	r3, #8
 8006dbc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dc0:	e853 3f00 	ldrex	r3, [r3]
 8006dc4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006dc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dc8:	f023 0301 	bic.w	r3, r3, #1
 8006dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006dda:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006dde:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006de2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e1      	bne.n	8006db6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3308      	adds	r3, #8
 8006df8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3308      	adds	r3, #8
 8006e12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e3      	bne.n	8006df2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e48:	f023 0310 	bic.w	r3, r3, #16
 8006e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e4      	bne.n	8006e38 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fc fc92 	bl	800379c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f8ce 	bl	8007034 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e98:	e0b9      	b.n	800700e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 80ab 	beq.w	8007012 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 80a6 	beq.w	8007012 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006eee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e4      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3308      	adds	r3, #8
 8006f02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	623b      	str	r3, [r7, #32]
   return(result);
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	f023 0301 	bic.w	r3, r3, #1
 8006f12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3308      	adds	r3, #8
 8006f1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f20:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f28:	e841 2300 	strex	r3, r2, [r1]
 8006f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1e3      	bne.n	8006efc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f023 0310 	bic.w	r3, r3, #16
 8006f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f6a:	61fb      	str	r3, [r7, #28]
 8006f6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	69b9      	ldr	r1, [r7, #24]
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	617b      	str	r3, [r7, #20]
   return(result);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e4      	bne.n	8006f48 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2202      	movs	r2, #2
 8006f82:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f852 	bl	8007034 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f90:	e03f      	b.n	8007012 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00e      	beq.n	8006fbc <HAL_UART_IRQHandler+0x56c>
 8006f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d008      	beq.n	8006fbc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006fb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f849 	bl	800704c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fba:	e02d      	b.n	8007018 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00e      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d008      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01c      	beq.n	8007016 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
    }
    return;
 8006fe4:	e017      	b.n	8007016 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d012      	beq.n	8007018 <HAL_UART_IRQHandler+0x5c8>
 8006ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00c      	beq.n	8007018 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fe43 	bl	8007c8a <UART_EndTransmit_IT>
    return;
 8007004:	e008      	b.n	8007018 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007006:	bf00      	nop
 8007008:	e006      	b.n	8007018 <HAL_UART_IRQHandler+0x5c8>
    return;
 800700a:	bf00      	nop
 800700c:	e004      	b.n	8007018 <HAL_UART_IRQHandler+0x5c8>
      return;
 800700e:	bf00      	nop
 8007010:	e002      	b.n	8007018 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007012:	bf00      	nop
 8007014:	e000      	b.n	8007018 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007016:	bf00      	nop
  }

}
 8007018:	37e8      	adds	r7, #232	@ 0xe8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop

08007020 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	4ba6      	ldr	r3, [pc, #664]	@ (8007324 <UART_SetConfig+0x2c4>)
 800708c:	4013      	ands	r3, r2
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	6812      	ldr	r2, [r2, #0]
 8007092:	6979      	ldr	r1, [r7, #20]
 8007094:	430b      	orrs	r3, r1
 8007096:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a94      	ldr	r2, [pc, #592]	@ (8007328 <UART_SetConfig+0x2c8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d120      	bne.n	800711e <UART_SetConfig+0xbe>
 80070dc:	4b93      	ldr	r3, [pc, #588]	@ (800732c <UART_SetConfig+0x2cc>)
 80070de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d816      	bhi.n	8007118 <UART_SetConfig+0xb8>
 80070ea:	a201      	add	r2, pc, #4	@ (adr r2, 80070f0 <UART_SetConfig+0x90>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007101 	.word	0x08007101
 80070f4:	0800710d 	.word	0x0800710d
 80070f8:	08007107 	.word	0x08007107
 80070fc:	08007113 	.word	0x08007113
 8007100:	2301      	movs	r3, #1
 8007102:	77fb      	strb	r3, [r7, #31]
 8007104:	e150      	b.n	80073a8 <UART_SetConfig+0x348>
 8007106:	2302      	movs	r3, #2
 8007108:	77fb      	strb	r3, [r7, #31]
 800710a:	e14d      	b.n	80073a8 <UART_SetConfig+0x348>
 800710c:	2304      	movs	r3, #4
 800710e:	77fb      	strb	r3, [r7, #31]
 8007110:	e14a      	b.n	80073a8 <UART_SetConfig+0x348>
 8007112:	2308      	movs	r3, #8
 8007114:	77fb      	strb	r3, [r7, #31]
 8007116:	e147      	b.n	80073a8 <UART_SetConfig+0x348>
 8007118:	2310      	movs	r3, #16
 800711a:	77fb      	strb	r3, [r7, #31]
 800711c:	e144      	b.n	80073a8 <UART_SetConfig+0x348>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a83      	ldr	r2, [pc, #524]	@ (8007330 <UART_SetConfig+0x2d0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d132      	bne.n	800718e <UART_SetConfig+0x12e>
 8007128:	4b80      	ldr	r3, [pc, #512]	@ (800732c <UART_SetConfig+0x2cc>)
 800712a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800712e:	f003 030c 	and.w	r3, r3, #12
 8007132:	2b0c      	cmp	r3, #12
 8007134:	d828      	bhi.n	8007188 <UART_SetConfig+0x128>
 8007136:	a201      	add	r2, pc, #4	@ (adr r2, 800713c <UART_SetConfig+0xdc>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	08007171 	.word	0x08007171
 8007140:	08007189 	.word	0x08007189
 8007144:	08007189 	.word	0x08007189
 8007148:	08007189 	.word	0x08007189
 800714c:	0800717d 	.word	0x0800717d
 8007150:	08007189 	.word	0x08007189
 8007154:	08007189 	.word	0x08007189
 8007158:	08007189 	.word	0x08007189
 800715c:	08007177 	.word	0x08007177
 8007160:	08007189 	.word	0x08007189
 8007164:	08007189 	.word	0x08007189
 8007168:	08007189 	.word	0x08007189
 800716c:	08007183 	.word	0x08007183
 8007170:	2300      	movs	r3, #0
 8007172:	77fb      	strb	r3, [r7, #31]
 8007174:	e118      	b.n	80073a8 <UART_SetConfig+0x348>
 8007176:	2302      	movs	r3, #2
 8007178:	77fb      	strb	r3, [r7, #31]
 800717a:	e115      	b.n	80073a8 <UART_SetConfig+0x348>
 800717c:	2304      	movs	r3, #4
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	e112      	b.n	80073a8 <UART_SetConfig+0x348>
 8007182:	2308      	movs	r3, #8
 8007184:	77fb      	strb	r3, [r7, #31]
 8007186:	e10f      	b.n	80073a8 <UART_SetConfig+0x348>
 8007188:	2310      	movs	r3, #16
 800718a:	77fb      	strb	r3, [r7, #31]
 800718c:	e10c      	b.n	80073a8 <UART_SetConfig+0x348>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a68      	ldr	r2, [pc, #416]	@ (8007334 <UART_SetConfig+0x2d4>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d120      	bne.n	80071da <UART_SetConfig+0x17a>
 8007198:	4b64      	ldr	r3, [pc, #400]	@ (800732c <UART_SetConfig+0x2cc>)
 800719a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800719e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80071a2:	2b30      	cmp	r3, #48	@ 0x30
 80071a4:	d013      	beq.n	80071ce <UART_SetConfig+0x16e>
 80071a6:	2b30      	cmp	r3, #48	@ 0x30
 80071a8:	d814      	bhi.n	80071d4 <UART_SetConfig+0x174>
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	d009      	beq.n	80071c2 <UART_SetConfig+0x162>
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	d810      	bhi.n	80071d4 <UART_SetConfig+0x174>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <UART_SetConfig+0x15c>
 80071b6:	2b10      	cmp	r3, #16
 80071b8:	d006      	beq.n	80071c8 <UART_SetConfig+0x168>
 80071ba:	e00b      	b.n	80071d4 <UART_SetConfig+0x174>
 80071bc:	2300      	movs	r3, #0
 80071be:	77fb      	strb	r3, [r7, #31]
 80071c0:	e0f2      	b.n	80073a8 <UART_SetConfig+0x348>
 80071c2:	2302      	movs	r3, #2
 80071c4:	77fb      	strb	r3, [r7, #31]
 80071c6:	e0ef      	b.n	80073a8 <UART_SetConfig+0x348>
 80071c8:	2304      	movs	r3, #4
 80071ca:	77fb      	strb	r3, [r7, #31]
 80071cc:	e0ec      	b.n	80073a8 <UART_SetConfig+0x348>
 80071ce:	2308      	movs	r3, #8
 80071d0:	77fb      	strb	r3, [r7, #31]
 80071d2:	e0e9      	b.n	80073a8 <UART_SetConfig+0x348>
 80071d4:	2310      	movs	r3, #16
 80071d6:	77fb      	strb	r3, [r7, #31]
 80071d8:	e0e6      	b.n	80073a8 <UART_SetConfig+0x348>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a56      	ldr	r2, [pc, #344]	@ (8007338 <UART_SetConfig+0x2d8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d120      	bne.n	8007226 <UART_SetConfig+0x1c6>
 80071e4:	4b51      	ldr	r3, [pc, #324]	@ (800732c <UART_SetConfig+0x2cc>)
 80071e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80071f0:	d013      	beq.n	800721a <UART_SetConfig+0x1ba>
 80071f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80071f4:	d814      	bhi.n	8007220 <UART_SetConfig+0x1c0>
 80071f6:	2b80      	cmp	r3, #128	@ 0x80
 80071f8:	d009      	beq.n	800720e <UART_SetConfig+0x1ae>
 80071fa:	2b80      	cmp	r3, #128	@ 0x80
 80071fc:	d810      	bhi.n	8007220 <UART_SetConfig+0x1c0>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <UART_SetConfig+0x1a8>
 8007202:	2b40      	cmp	r3, #64	@ 0x40
 8007204:	d006      	beq.n	8007214 <UART_SetConfig+0x1b4>
 8007206:	e00b      	b.n	8007220 <UART_SetConfig+0x1c0>
 8007208:	2300      	movs	r3, #0
 800720a:	77fb      	strb	r3, [r7, #31]
 800720c:	e0cc      	b.n	80073a8 <UART_SetConfig+0x348>
 800720e:	2302      	movs	r3, #2
 8007210:	77fb      	strb	r3, [r7, #31]
 8007212:	e0c9      	b.n	80073a8 <UART_SetConfig+0x348>
 8007214:	2304      	movs	r3, #4
 8007216:	77fb      	strb	r3, [r7, #31]
 8007218:	e0c6      	b.n	80073a8 <UART_SetConfig+0x348>
 800721a:	2308      	movs	r3, #8
 800721c:	77fb      	strb	r3, [r7, #31]
 800721e:	e0c3      	b.n	80073a8 <UART_SetConfig+0x348>
 8007220:	2310      	movs	r3, #16
 8007222:	77fb      	strb	r3, [r7, #31]
 8007224:	e0c0      	b.n	80073a8 <UART_SetConfig+0x348>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a44      	ldr	r2, [pc, #272]	@ (800733c <UART_SetConfig+0x2dc>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d125      	bne.n	800727c <UART_SetConfig+0x21c>
 8007230:	4b3e      	ldr	r3, [pc, #248]	@ (800732c <UART_SetConfig+0x2cc>)
 8007232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800723a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800723e:	d017      	beq.n	8007270 <UART_SetConfig+0x210>
 8007240:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007244:	d817      	bhi.n	8007276 <UART_SetConfig+0x216>
 8007246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800724a:	d00b      	beq.n	8007264 <UART_SetConfig+0x204>
 800724c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007250:	d811      	bhi.n	8007276 <UART_SetConfig+0x216>
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <UART_SetConfig+0x1fe>
 8007256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800725a:	d006      	beq.n	800726a <UART_SetConfig+0x20a>
 800725c:	e00b      	b.n	8007276 <UART_SetConfig+0x216>
 800725e:	2300      	movs	r3, #0
 8007260:	77fb      	strb	r3, [r7, #31]
 8007262:	e0a1      	b.n	80073a8 <UART_SetConfig+0x348>
 8007264:	2302      	movs	r3, #2
 8007266:	77fb      	strb	r3, [r7, #31]
 8007268:	e09e      	b.n	80073a8 <UART_SetConfig+0x348>
 800726a:	2304      	movs	r3, #4
 800726c:	77fb      	strb	r3, [r7, #31]
 800726e:	e09b      	b.n	80073a8 <UART_SetConfig+0x348>
 8007270:	2308      	movs	r3, #8
 8007272:	77fb      	strb	r3, [r7, #31]
 8007274:	e098      	b.n	80073a8 <UART_SetConfig+0x348>
 8007276:	2310      	movs	r3, #16
 8007278:	77fb      	strb	r3, [r7, #31]
 800727a:	e095      	b.n	80073a8 <UART_SetConfig+0x348>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a2f      	ldr	r2, [pc, #188]	@ (8007340 <UART_SetConfig+0x2e0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d125      	bne.n	80072d2 <UART_SetConfig+0x272>
 8007286:	4b29      	ldr	r3, [pc, #164]	@ (800732c <UART_SetConfig+0x2cc>)
 8007288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800728c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007290:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007294:	d017      	beq.n	80072c6 <UART_SetConfig+0x266>
 8007296:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800729a:	d817      	bhi.n	80072cc <UART_SetConfig+0x26c>
 800729c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072a0:	d00b      	beq.n	80072ba <UART_SetConfig+0x25a>
 80072a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072a6:	d811      	bhi.n	80072cc <UART_SetConfig+0x26c>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <UART_SetConfig+0x254>
 80072ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072b0:	d006      	beq.n	80072c0 <UART_SetConfig+0x260>
 80072b2:	e00b      	b.n	80072cc <UART_SetConfig+0x26c>
 80072b4:	2301      	movs	r3, #1
 80072b6:	77fb      	strb	r3, [r7, #31]
 80072b8:	e076      	b.n	80073a8 <UART_SetConfig+0x348>
 80072ba:	2302      	movs	r3, #2
 80072bc:	77fb      	strb	r3, [r7, #31]
 80072be:	e073      	b.n	80073a8 <UART_SetConfig+0x348>
 80072c0:	2304      	movs	r3, #4
 80072c2:	77fb      	strb	r3, [r7, #31]
 80072c4:	e070      	b.n	80073a8 <UART_SetConfig+0x348>
 80072c6:	2308      	movs	r3, #8
 80072c8:	77fb      	strb	r3, [r7, #31]
 80072ca:	e06d      	b.n	80073a8 <UART_SetConfig+0x348>
 80072cc:	2310      	movs	r3, #16
 80072ce:	77fb      	strb	r3, [r7, #31]
 80072d0:	e06a      	b.n	80073a8 <UART_SetConfig+0x348>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007344 <UART_SetConfig+0x2e4>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d138      	bne.n	800734e <UART_SetConfig+0x2ee>
 80072dc:	4b13      	ldr	r3, [pc, #76]	@ (800732c <UART_SetConfig+0x2cc>)
 80072de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072e2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80072e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072ea:	d017      	beq.n	800731c <UART_SetConfig+0x2bc>
 80072ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072f0:	d82a      	bhi.n	8007348 <UART_SetConfig+0x2e8>
 80072f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072f6:	d00b      	beq.n	8007310 <UART_SetConfig+0x2b0>
 80072f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072fc:	d824      	bhi.n	8007348 <UART_SetConfig+0x2e8>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <UART_SetConfig+0x2aa>
 8007302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007306:	d006      	beq.n	8007316 <UART_SetConfig+0x2b6>
 8007308:	e01e      	b.n	8007348 <UART_SetConfig+0x2e8>
 800730a:	2300      	movs	r3, #0
 800730c:	77fb      	strb	r3, [r7, #31]
 800730e:	e04b      	b.n	80073a8 <UART_SetConfig+0x348>
 8007310:	2302      	movs	r3, #2
 8007312:	77fb      	strb	r3, [r7, #31]
 8007314:	e048      	b.n	80073a8 <UART_SetConfig+0x348>
 8007316:	2304      	movs	r3, #4
 8007318:	77fb      	strb	r3, [r7, #31]
 800731a:	e045      	b.n	80073a8 <UART_SetConfig+0x348>
 800731c:	2308      	movs	r3, #8
 800731e:	77fb      	strb	r3, [r7, #31]
 8007320:	e042      	b.n	80073a8 <UART_SetConfig+0x348>
 8007322:	bf00      	nop
 8007324:	efff69f3 	.word	0xefff69f3
 8007328:	40011000 	.word	0x40011000
 800732c:	40023800 	.word	0x40023800
 8007330:	40004400 	.word	0x40004400
 8007334:	40004800 	.word	0x40004800
 8007338:	40004c00 	.word	0x40004c00
 800733c:	40005000 	.word	0x40005000
 8007340:	40011400 	.word	0x40011400
 8007344:	40007800 	.word	0x40007800
 8007348:	2310      	movs	r3, #16
 800734a:	77fb      	strb	r3, [r7, #31]
 800734c:	e02c      	b.n	80073a8 <UART_SetConfig+0x348>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a72      	ldr	r2, [pc, #456]	@ (800751c <UART_SetConfig+0x4bc>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d125      	bne.n	80073a4 <UART_SetConfig+0x344>
 8007358:	4b71      	ldr	r3, [pc, #452]	@ (8007520 <UART_SetConfig+0x4c0>)
 800735a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800735e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007362:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007366:	d017      	beq.n	8007398 <UART_SetConfig+0x338>
 8007368:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800736c:	d817      	bhi.n	800739e <UART_SetConfig+0x33e>
 800736e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007372:	d00b      	beq.n	800738c <UART_SetConfig+0x32c>
 8007374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007378:	d811      	bhi.n	800739e <UART_SetConfig+0x33e>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <UART_SetConfig+0x326>
 800737e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007382:	d006      	beq.n	8007392 <UART_SetConfig+0x332>
 8007384:	e00b      	b.n	800739e <UART_SetConfig+0x33e>
 8007386:	2300      	movs	r3, #0
 8007388:	77fb      	strb	r3, [r7, #31]
 800738a:	e00d      	b.n	80073a8 <UART_SetConfig+0x348>
 800738c:	2302      	movs	r3, #2
 800738e:	77fb      	strb	r3, [r7, #31]
 8007390:	e00a      	b.n	80073a8 <UART_SetConfig+0x348>
 8007392:	2304      	movs	r3, #4
 8007394:	77fb      	strb	r3, [r7, #31]
 8007396:	e007      	b.n	80073a8 <UART_SetConfig+0x348>
 8007398:	2308      	movs	r3, #8
 800739a:	77fb      	strb	r3, [r7, #31]
 800739c:	e004      	b.n	80073a8 <UART_SetConfig+0x348>
 800739e:	2310      	movs	r3, #16
 80073a0:	77fb      	strb	r3, [r7, #31]
 80073a2:	e001      	b.n	80073a8 <UART_SetConfig+0x348>
 80073a4:	2310      	movs	r3, #16
 80073a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073b0:	d15b      	bne.n	800746a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80073b2:	7ffb      	ldrb	r3, [r7, #31]
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	d828      	bhi.n	800740a <UART_SetConfig+0x3aa>
 80073b8:	a201      	add	r2, pc, #4	@ (adr r2, 80073c0 <UART_SetConfig+0x360>)
 80073ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073be:	bf00      	nop
 80073c0:	080073e5 	.word	0x080073e5
 80073c4:	080073ed 	.word	0x080073ed
 80073c8:	080073f5 	.word	0x080073f5
 80073cc:	0800740b 	.word	0x0800740b
 80073d0:	080073fb 	.word	0x080073fb
 80073d4:	0800740b 	.word	0x0800740b
 80073d8:	0800740b 	.word	0x0800740b
 80073dc:	0800740b 	.word	0x0800740b
 80073e0:	08007403 	.word	0x08007403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073e4:	f7fd fb78 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 80073e8:	61b8      	str	r0, [r7, #24]
        break;
 80073ea:	e013      	b.n	8007414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073ec:	f7fd fb88 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 80073f0:	61b8      	str	r0, [r7, #24]
        break;
 80073f2:	e00f      	b.n	8007414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073f4:	4b4b      	ldr	r3, [pc, #300]	@ (8007524 <UART_SetConfig+0x4c4>)
 80073f6:	61bb      	str	r3, [r7, #24]
        break;
 80073f8:	e00c      	b.n	8007414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073fa:	f7fd fa5d 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 80073fe:	61b8      	str	r0, [r7, #24]
        break;
 8007400:	e008      	b.n	8007414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007406:	61bb      	str	r3, [r7, #24]
        break;
 8007408:	e004      	b.n	8007414 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	77bb      	strb	r3, [r7, #30]
        break;
 8007412:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d074      	beq.n	8007504 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	005a      	lsls	r2, r3, #1
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	441a      	add	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	fbb2 f3f3 	udiv	r3, r2, r3
 800742e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	2b0f      	cmp	r3, #15
 8007434:	d916      	bls.n	8007464 <UART_SetConfig+0x404>
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800743c:	d212      	bcs.n	8007464 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	b29b      	uxth	r3, r3
 8007442:	f023 030f 	bic.w	r3, r3, #15
 8007446:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	085b      	lsrs	r3, r3, #1
 800744c:	b29b      	uxth	r3, r3
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	b29a      	uxth	r2, r3
 8007454:	89fb      	ldrh	r3, [r7, #14]
 8007456:	4313      	orrs	r3, r2
 8007458:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	89fa      	ldrh	r2, [r7, #14]
 8007460:	60da      	str	r2, [r3, #12]
 8007462:	e04f      	b.n	8007504 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	77bb      	strb	r3, [r7, #30]
 8007468:	e04c      	b.n	8007504 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800746a:	7ffb      	ldrb	r3, [r7, #31]
 800746c:	2b08      	cmp	r3, #8
 800746e:	d828      	bhi.n	80074c2 <UART_SetConfig+0x462>
 8007470:	a201      	add	r2, pc, #4	@ (adr r2, 8007478 <UART_SetConfig+0x418>)
 8007472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007476:	bf00      	nop
 8007478:	0800749d 	.word	0x0800749d
 800747c:	080074a5 	.word	0x080074a5
 8007480:	080074ad 	.word	0x080074ad
 8007484:	080074c3 	.word	0x080074c3
 8007488:	080074b3 	.word	0x080074b3
 800748c:	080074c3 	.word	0x080074c3
 8007490:	080074c3 	.word	0x080074c3
 8007494:	080074c3 	.word	0x080074c3
 8007498:	080074bb 	.word	0x080074bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800749c:	f7fd fb1c 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 80074a0:	61b8      	str	r0, [r7, #24]
        break;
 80074a2:	e013      	b.n	80074cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074a4:	f7fd fb2c 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 80074a8:	61b8      	str	r0, [r7, #24]
        break;
 80074aa:	e00f      	b.n	80074cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007524 <UART_SetConfig+0x4c4>)
 80074ae:	61bb      	str	r3, [r7, #24]
        break;
 80074b0:	e00c      	b.n	80074cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074b2:	f7fd fa01 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 80074b6:	61b8      	str	r0, [r7, #24]
        break;
 80074b8:	e008      	b.n	80074cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074be:	61bb      	str	r3, [r7, #24]
        break;
 80074c0:	e004      	b.n	80074cc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	77bb      	strb	r3, [r7, #30]
        break;
 80074ca:	bf00      	nop
    }

    if (pclk != 0U)
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d018      	beq.n	8007504 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	085a      	lsrs	r2, r3, #1
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	441a      	add	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	2b0f      	cmp	r3, #15
 80074ea:	d909      	bls.n	8007500 <UART_SetConfig+0x4a0>
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074f2:	d205      	bcs.n	8007500 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	60da      	str	r2, [r3, #12]
 80074fe:	e001      	b.n	8007504 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007510:	7fbb      	ldrb	r3, [r7, #30]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3720      	adds	r7, #32
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	40007c00 	.word	0x40007c00
 8007520:	40023800 	.word	0x40023800
 8007524:	00f42400 	.word	0x00f42400

08007528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007556:	f003 0302 	and.w	r3, r3, #2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00a      	beq.n	8007596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075bc:	f003 0310 	and.w	r3, r3, #16
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075de:	f003 0320 	and.w	r3, r3, #32
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01a      	beq.n	800763e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007626:	d10a      	bne.n	800763e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	605a      	str	r2, [r3, #4]
  }
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af02      	add	r7, sp, #8
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800767c:	f7fb f89c 	bl	80027b8 <HAL_GetTick>
 8007680:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0308 	and.w	r3, r3, #8
 800768c:	2b08      	cmp	r3, #8
 800768e:	d10e      	bne.n	80076ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007690:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f831 	bl	8007706 <UART_WaitOnFlagUntilTimeout>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e027      	b.n	80076fe <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b04      	cmp	r3, #4
 80076ba:	d10e      	bne.n	80076da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f81b 	bl	8007706 <UART_WaitOnFlagUntilTimeout>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e011      	b.n	80076fe <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b09c      	sub	sp, #112	@ 0x70
 800770a:	af00      	add	r7, sp, #0
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	603b      	str	r3, [r7, #0]
 8007712:	4613      	mov	r3, r2
 8007714:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007716:	e0a7      	b.n	8007868 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007718:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771e:	f000 80a3 	beq.w	8007868 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007722:	f7fb f849 	bl	80027b8 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800772e:	429a      	cmp	r2, r3
 8007730:	d302      	bcc.n	8007738 <UART_WaitOnFlagUntilTimeout+0x32>
 8007732:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007734:	2b00      	cmp	r3, #0
 8007736:	d13f      	bne.n	80077b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007748:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800774c:	667b      	str	r3, [r7, #100]	@ 0x64
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007756:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007758:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800775c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1e6      	bne.n	8007738 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3308      	adds	r3, #8
 8007770:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800777a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777c:	f023 0301 	bic.w	r3, r3, #1
 8007780:	663b      	str	r3, [r7, #96]	@ 0x60
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3308      	adds	r3, #8
 8007788:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800778a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800778c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007790:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e5      	bne.n	800776a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2220      	movs	r2, #32
 80077a2:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e068      	b.n	800788a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0304 	and.w	r3, r3, #4
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d050      	beq.n	8007868 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077d4:	d148      	bne.n	8007868 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80077f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007800:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007804:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800780c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e6      	bne.n	80077e0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3308      	adds	r3, #8
 8007818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	613b      	str	r3, [r7, #16]
   return(result);
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f023 0301 	bic.w	r3, r3, #1
 8007828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3308      	adds	r3, #8
 8007830:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007832:	623a      	str	r2, [r7, #32]
 8007834:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	69f9      	ldr	r1, [r7, #28]
 8007838:	6a3a      	ldr	r2, [r7, #32]
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e5      	bne.n	8007812 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2220      	movs	r2, #32
 800784a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2220      	movs	r2, #32
 8007850:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2220      	movs	r2, #32
 8007858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e010      	b.n	800788a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	69da      	ldr	r2, [r3, #28]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4013      	ands	r3, r2
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	429a      	cmp	r2, r3
 8007876:	bf0c      	ite	eq
 8007878:	2301      	moveq	r3, #1
 800787a:	2300      	movne	r3, #0
 800787c:	b2db      	uxtb	r3, r3
 800787e:	461a      	mov	r2, r3
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	429a      	cmp	r2, r3
 8007884:	f43f af48 	beq.w	8007718 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3770      	adds	r7, #112	@ 0x70
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007894:	b480      	push	{r7}
 8007896:	b097      	sub	sp, #92	@ 0x5c
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	4613      	mov	r3, r2
 80078a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	88fa      	ldrh	r2, [r7, #6]
 80078ac:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	88fa      	ldrh	r2, [r7, #6]
 80078b4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078c6:	d10e      	bne.n	80078e6 <UART_Start_Receive_IT+0x52>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d105      	bne.n	80078dc <UART_Start_Receive_IT+0x48>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80078d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078da:	e02d      	b.n	8007938 <UART_Start_Receive_IT+0xa4>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	22ff      	movs	r2, #255	@ 0xff
 80078e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078e4:	e028      	b.n	8007938 <UART_Start_Receive_IT+0xa4>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10d      	bne.n	800790a <UART_Start_Receive_IT+0x76>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d104      	bne.n	8007900 <UART_Start_Receive_IT+0x6c>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	22ff      	movs	r2, #255	@ 0xff
 80078fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078fe:	e01b      	b.n	8007938 <UART_Start_Receive_IT+0xa4>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	227f      	movs	r2, #127	@ 0x7f
 8007904:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007908:	e016      	b.n	8007938 <UART_Start_Receive_IT+0xa4>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007912:	d10d      	bne.n	8007930 <UART_Start_Receive_IT+0x9c>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d104      	bne.n	8007926 <UART_Start_Receive_IT+0x92>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	227f      	movs	r2, #127	@ 0x7f
 8007920:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007924:	e008      	b.n	8007938 <UART_Start_Receive_IT+0xa4>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	223f      	movs	r2, #63	@ 0x3f
 800792a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800792e:	e003      	b.n	8007938 <UART_Start_Receive_IT+0xa4>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2222      	movs	r2, #34	@ 0x22
 8007944:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3308      	adds	r3, #8
 800794e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007952:	e853 3f00 	ldrex	r3, [r3]
 8007956:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795a:	f043 0301 	orr.w	r3, r3, #1
 800795e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3308      	adds	r3, #8
 8007966:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007968:	64ba      	str	r2, [r7, #72]	@ 0x48
 800796a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800796e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007970:	e841 2300 	strex	r3, r2, [r1]
 8007974:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1e5      	bne.n	8007948 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007984:	d107      	bne.n	8007996 <UART_Start_Receive_IT+0x102>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d103      	bne.n	8007996 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4a21      	ldr	r2, [pc, #132]	@ (8007a18 <UART_Start_Receive_IT+0x184>)
 8007992:	669a      	str	r2, [r3, #104]	@ 0x68
 8007994:	e002      	b.n	800799c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4a20      	ldr	r2, [pc, #128]	@ (8007a1c <UART_Start_Receive_IT+0x188>)
 800799a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d019      	beq.n	80079d8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80079b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80079d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e6      	bne.n	80079a4 <UART_Start_Receive_IT+0x110>
 80079d6:	e018      	b.n	8007a0a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	613b      	str	r3, [r7, #16]
   return(result);
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f043 0320 	orr.w	r3, r3, #32
 80079ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079f6:	623b      	str	r3, [r7, #32]
 80079f8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	69f9      	ldr	r1, [r7, #28]
 80079fc:	6a3a      	ldr	r2, [r7, #32]
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e6      	bne.n	80079d8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	375c      	adds	r7, #92	@ 0x5c
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	08007e45 	.word	0x08007e45
 8007a1c:	08007cdf 	.word	0x08007cdf

08007a20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b095      	sub	sp, #84	@ 0x54
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a46:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a48:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e6      	bne.n	8007a28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3308      	adds	r3, #8
 8007a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	f023 0301 	bic.w	r3, r3, #1
 8007a70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3308      	adds	r3, #8
 8007a78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e5      	bne.n	8007a5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d118      	bne.n	8007ac8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f023 0310 	bic.w	r3, r3, #16
 8007aaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ab4:	61bb      	str	r3, [r7, #24]
 8007ab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	6979      	ldr	r1, [r7, #20]
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e6      	bne.n	8007a96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007adc:	bf00      	nop
 8007ade:	3754      	adds	r7, #84	@ 0x54
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f7ff fa8a 	bl	8007020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b0c:	bf00      	nop
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b08f      	sub	sp, #60	@ 0x3c
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b20:	2b21      	cmp	r3, #33	@ 0x21
 8007b22:	d14c      	bne.n	8007bbe <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d132      	bne.n	8007b96 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b50:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e6      	bne.n	8007b30 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b76:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	61bb      	str	r3, [r7, #24]
 8007b82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	6979      	ldr	r1, [r7, #20]
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e6      	bne.n	8007b62 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007b94:	e013      	b.n	8007bbe <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b9a:	781a      	ldrb	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007bbe:	bf00      	nop
 8007bc0:	373c      	adds	r7, #60	@ 0x3c
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b091      	sub	sp, #68	@ 0x44
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bd6:	2b21      	cmp	r3, #33	@ 0x21
 8007bd8:	d151      	bne.n	8007c7e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d132      	bne.n	8007c4c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	623b      	str	r3, [r7, #32]
   return(result);
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	461a      	mov	r2, r3
 8007c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e6      	bne.n	8007be6 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c36:	61fb      	str	r3, [r7, #28]
 8007c38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	69b9      	ldr	r1, [r7, #24]
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	617b      	str	r3, [r7, #20]
   return(result);
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e6      	bne.n	8007c18 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007c4a:	e018      	b.n	8007c7e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c60:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c66:	1c9a      	adds	r2, r3, #2
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	3b01      	subs	r3, #1
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007c7e:	bf00      	nop
 8007c80:	3744      	adds	r7, #68	@ 0x44
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b088      	sub	sp, #32
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ca6:	61fb      	str	r3, [r7, #28]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	461a      	mov	r2, r3
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	61bb      	str	r3, [r7, #24]
 8007cb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	6979      	ldr	r1, [r7, #20]
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e6      	bne.n	8007c92 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7fa fcbd 	bl	8002650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cd6:	bf00      	nop
 8007cd8:	3720      	adds	r7, #32
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b096      	sub	sp, #88	@ 0x58
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007cec:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cf6:	2b22      	cmp	r3, #34	@ 0x22
 8007cf8:	f040 8098 	bne.w	8007e2c <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d02:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d06:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8007d0a:	b2d9      	uxtb	r1, r3
 8007d0c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d16:	400a      	ands	r2, r1
 8007d18:	b2d2      	uxtb	r2, r2
 8007d1a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d17b      	bne.n	8007e3c <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d58:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d62:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d64:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e6      	bne.n	8007d44 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	623b      	str	r3, [r7, #32]
   return(result);
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	f023 0301 	bic.w	r3, r3, #1
 8007d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3308      	adds	r3, #8
 8007d94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d96:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e5      	bne.n	8007d76 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d12e      	bne.n	8007e24 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f023 0310 	bic.w	r3, r3, #16
 8007de0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dea:	61fb      	str	r3, [r7, #28]
 8007dec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	69b9      	ldr	r1, [r7, #24]
 8007df0:	69fa      	ldr	r2, [r7, #28]
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	617b      	str	r3, [r7, #20]
   return(result);
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e6      	bne.n	8007dcc <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69db      	ldr	r3, [r3, #28]
 8007e04:	f003 0310 	and.w	r3, r3, #16
 8007e08:	2b10      	cmp	r3, #16
 8007e0a:	d103      	bne.n	8007e14 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2210      	movs	r2, #16
 8007e12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7ff f909 	bl	8007034 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e22:	e00b      	b.n	8007e3c <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7fa fba9 	bl	800257c <HAL_UART_RxCpltCallback>
}
 8007e2a:	e007      	b.n	8007e3c <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699a      	ldr	r2, [r3, #24]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f042 0208 	orr.w	r2, r2, #8
 8007e3a:	619a      	str	r2, [r3, #24]
}
 8007e3c:	bf00      	nop
 8007e3e:	3758      	adds	r7, #88	@ 0x58
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b096      	sub	sp, #88	@ 0x58
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e52:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e5c:	2b22      	cmp	r3, #34	@ 0x22
 8007e5e:	f040 8098 	bne.w	8007f92 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e68:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e70:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e72:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8007e76:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e80:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e86:	1c9a      	adds	r2, r3, #2
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	3b01      	subs	r3, #1
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d17b      	bne.n	8007fa2 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb2:	e853 3f00 	ldrex	r3, [r3]
 8007eb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ec8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ecc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ece:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ed0:	e841 2300 	strex	r3, r2, [r1]
 8007ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e6      	bne.n	8007eaa <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	f023 0301 	bic.w	r3, r3, #1
 8007ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3308      	adds	r3, #8
 8007efa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007efc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f04:	e841 2300 	strex	r3, r2, [r1]
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1e5      	bne.n	8007edc <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2220      	movs	r2, #32
 8007f14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d12e      	bne.n	8007f8a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	e853 3f00 	ldrex	r3, [r3]
 8007f3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	f023 0310 	bic.w	r3, r3, #16
 8007f46:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f50:	61bb      	str	r3, [r7, #24]
 8007f52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f54:	6979      	ldr	r1, [r7, #20]
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	e841 2300 	strex	r3, r2, [r1]
 8007f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1e6      	bne.n	8007f32 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	f003 0310 	and.w	r3, r3, #16
 8007f6e:	2b10      	cmp	r3, #16
 8007f70:	d103      	bne.n	8007f7a <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2210      	movs	r2, #16
 8007f78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff f856 	bl	8007034 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f88:	e00b      	b.n	8007fa2 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7fa faf6 	bl	800257c <HAL_UART_RxCpltCallback>
}
 8007f90:	e007      	b.n	8007fa2 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	699a      	ldr	r2, [r3, #24]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f042 0208 	orr.w	r2, r2, #8
 8007fa0:	619a      	str	r2, [r3, #24]
}
 8007fa2:	bf00      	nop
 8007fa4:	3758      	adds	r7, #88	@ 0x58
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007fb0:	4904      	ldr	r1, [pc, #16]	@ (8007fc4 <MX_FATFS_Init+0x18>)
 8007fb2:	4805      	ldr	r0, [pc, #20]	@ (8007fc8 <MX_FATFS_Init+0x1c>)
 8007fb4:	f003 f826 	bl	800b004 <FATFS_LinkDriver>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	461a      	mov	r2, r3
 8007fbc:	4b03      	ldr	r3, [pc, #12]	@ (8007fcc <MX_FATFS_Init+0x20>)
 8007fbe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007fc0:	bf00      	nop
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	20002b0c 	.word	0x20002b0c
 8007fc8:	20000010 	.word	0x20000010
 8007fcc:	20002b08 	.word	0x20002b08

08007fd0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007fd4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7f8 ffbd 	bl	8000f6c <SD_disk_initialize>
 8007ff2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	4603      	mov	r3, r0
 8008004:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	4618      	mov	r0, r3
 800800a:	f7f9 f895 	bl	8001138 <SD_disk_status>
 800800e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008010:	4618      	mov	r0, r3
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	607a      	str	r2, [r7, #4]
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	4603      	mov	r3, r0
 8008026:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8008028:	7bf8      	ldrb	r0, [r7, #15]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	68b9      	ldr	r1, [r7, #8]
 8008030:	f7f9 f898 	bl	8001164 <SD_disk_read>
 8008034:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800804e:	7bf8      	ldrb	r0, [r7, #15]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	68b9      	ldr	r1, [r7, #8]
 8008056:	f7f9 f8ef 	bl	8001238 <SD_disk_write>
 800805a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	603a      	str	r2, [r7, #0]
 800806e:	71fb      	strb	r3, [r7, #7]
 8008070:	460b      	mov	r3, r1
 8008072:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8008074:	79b9      	ldrb	r1, [r7, #6]
 8008076:	79fb      	ldrb	r3, [r7, #7]
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	4618      	mov	r0, r3
 800807c:	f7f9 f960 	bl	8001340 <SD_disk_ioctl>
 8008080:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
	...

0800808c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	4603      	mov	r3, r0
 8008094:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	4a08      	ldr	r2, [pc, #32]	@ (80080bc <disk_status+0x30>)
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	79fa      	ldrb	r2, [r7, #7]
 80080a4:	4905      	ldr	r1, [pc, #20]	@ (80080bc <disk_status+0x30>)
 80080a6:	440a      	add	r2, r1
 80080a8:	7a12      	ldrb	r2, [r2, #8]
 80080aa:	4610      	mov	r0, r2
 80080ac:	4798      	blx	r3
 80080ae:	4603      	mov	r3, r0
 80080b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	20002d38 	.word	0x20002d38

080080c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	4a0d      	ldr	r2, [pc, #52]	@ (8008108 <disk_initialize+0x48>)
 80080d2:	5cd3      	ldrb	r3, [r2, r3]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d111      	bne.n	80080fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80080d8:	79fb      	ldrb	r3, [r7, #7]
 80080da:	4a0b      	ldr	r2, [pc, #44]	@ (8008108 <disk_initialize+0x48>)
 80080dc:	2101      	movs	r1, #1
 80080de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80080e0:	79fb      	ldrb	r3, [r7, #7]
 80080e2:	4a09      	ldr	r2, [pc, #36]	@ (8008108 <disk_initialize+0x48>)
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	79fa      	ldrb	r2, [r7, #7]
 80080ee:	4906      	ldr	r1, [pc, #24]	@ (8008108 <disk_initialize+0x48>)
 80080f0:	440a      	add	r2, r1
 80080f2:	7a12      	ldrb	r2, [r2, #8]
 80080f4:	4610      	mov	r0, r2
 80080f6:	4798      	blx	r3
 80080f8:	4603      	mov	r3, r0
 80080fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20002d38 	.word	0x20002d38

0800810c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800810c:	b590      	push	{r4, r7, lr}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
 8008116:	603b      	str	r3, [r7, #0]
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	4a0a      	ldr	r2, [pc, #40]	@ (8008148 <disk_read+0x3c>)
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	689c      	ldr	r4, [r3, #8]
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	4a07      	ldr	r2, [pc, #28]	@ (8008148 <disk_read+0x3c>)
 800812c:	4413      	add	r3, r2
 800812e:	7a18      	ldrb	r0, [r3, #8]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	68b9      	ldr	r1, [r7, #8]
 8008136:	47a0      	blx	r4
 8008138:	4603      	mov	r3, r0
 800813a:	75fb      	strb	r3, [r7, #23]
  return res;
 800813c:	7dfb      	ldrb	r3, [r7, #23]
}
 800813e:	4618      	mov	r0, r3
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	bd90      	pop	{r4, r7, pc}
 8008146:	bf00      	nop
 8008148:	20002d38 	.word	0x20002d38

0800814c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800814c:	b590      	push	{r4, r7, lr}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	607a      	str	r2, [r7, #4]
 8008156:	603b      	str	r3, [r7, #0]
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800815c:	7bfb      	ldrb	r3, [r7, #15]
 800815e:	4a0a      	ldr	r2, [pc, #40]	@ (8008188 <disk_write+0x3c>)
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	68dc      	ldr	r4, [r3, #12]
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	4a07      	ldr	r2, [pc, #28]	@ (8008188 <disk_write+0x3c>)
 800816c:	4413      	add	r3, r2
 800816e:	7a18      	ldrb	r0, [r3, #8]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	68b9      	ldr	r1, [r7, #8]
 8008176:	47a0      	blx	r4
 8008178:	4603      	mov	r3, r0
 800817a:	75fb      	strb	r3, [r7, #23]
  return res;
 800817c:	7dfb      	ldrb	r3, [r7, #23]
}
 800817e:	4618      	mov	r0, r3
 8008180:	371c      	adds	r7, #28
 8008182:	46bd      	mov	sp, r7
 8008184:	bd90      	pop	{r4, r7, pc}
 8008186:	bf00      	nop
 8008188:	20002d38 	.word	0x20002d38

0800818c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	603a      	str	r2, [r7, #0]
 8008196:	71fb      	strb	r3, [r7, #7]
 8008198:	460b      	mov	r3, r1
 800819a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800819c:	79fb      	ldrb	r3, [r7, #7]
 800819e:	4a09      	ldr	r2, [pc, #36]	@ (80081c4 <disk_ioctl+0x38>)
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	79fa      	ldrb	r2, [r7, #7]
 80081aa:	4906      	ldr	r1, [pc, #24]	@ (80081c4 <disk_ioctl+0x38>)
 80081ac:	440a      	add	r2, r1
 80081ae:	7a10      	ldrb	r0, [r2, #8]
 80081b0:	79b9      	ldrb	r1, [r7, #6]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	4798      	blx	r3
 80081b6:	4603      	mov	r3, r0
 80081b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	20002d38 	.word	0x20002d38

080081c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3301      	adds	r3, #1
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80081d8:	89fb      	ldrh	r3, [r7, #14]
 80081da:	021b      	lsls	r3, r3, #8
 80081dc:	b21a      	sxth	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	b21b      	sxth	r3, r3
 80081e4:	4313      	orrs	r3, r2
 80081e6:	b21b      	sxth	r3, r3
 80081e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80081ea:	89fb      	ldrh	r3, [r7, #14]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3303      	adds	r3, #3
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	3202      	adds	r2, #2
 8008210:	7812      	ldrb	r2, [r2, #0]
 8008212:	4313      	orrs	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	021b      	lsls	r3, r3, #8
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	3201      	adds	r2, #1
 800821e:	7812      	ldrb	r2, [r2, #0]
 8008220:	4313      	orrs	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	021b      	lsls	r3, r3, #8
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	7812      	ldrb	r2, [r2, #0]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008230:	68fb      	ldr	r3, [r7, #12]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800823e:	b480      	push	{r7}
 8008240:	b083      	sub	sp, #12
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	460b      	mov	r3, r1
 8008248:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	887a      	ldrh	r2, [r7, #2]
 8008252:	b2d2      	uxtb	r2, r2
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	887b      	ldrh	r3, [r7, #2]
 8008258:	0a1b      	lsrs	r3, r3, #8
 800825a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	1c5a      	adds	r2, r3, #1
 8008260:	607a      	str	r2, [r7, #4]
 8008262:	887a      	ldrh	r2, [r7, #2]
 8008264:	b2d2      	uxtb	r2, r2
 8008266:	701a      	strb	r2, [r3, #0]
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	b2d2      	uxtb	r2, r2
 8008288:	701a      	strb	r2, [r3, #0]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	0a1b      	lsrs	r3, r3, #8
 800828e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	607a      	str	r2, [r7, #4]
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	b2d2      	uxtb	r2, r2
 800829a:	701a      	strb	r2, [r3, #0]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	0a1b      	lsrs	r3, r3, #8
 80082a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	b2d2      	uxtb	r2, r2
 80082ac:	701a      	strb	r2, [r3, #0]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	0a1b      	lsrs	r3, r3, #8
 80082b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	607a      	str	r2, [r7, #4]
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	b2d2      	uxtb	r2, r2
 80082be:	701a      	strb	r2, [r3, #0]
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80082cc:	b480      	push	{r7}
 80082ce:	b087      	sub	sp, #28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00d      	beq.n	8008302 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	1c53      	adds	r3, r2, #1
 80082ea:	613b      	str	r3, [r7, #16]
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	1c59      	adds	r1, r3, #1
 80082f0:	6179      	str	r1, [r7, #20]
 80082f2:	7812      	ldrb	r2, [r2, #0]
 80082f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	607b      	str	r3, [r7, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1f1      	bne.n	80082e6 <mem_cpy+0x1a>
	}
}
 8008302:	bf00      	nop
 8008304:	371c      	adds	r7, #28
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800830e:	b480      	push	{r7}
 8008310:	b087      	sub	sp, #28
 8008312:	af00      	add	r7, sp, #0
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	617a      	str	r2, [r7, #20]
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	b2d2      	uxtb	r2, r2
 8008328:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3b01      	subs	r3, #1
 800832e:	607b      	str	r3, [r7, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1f3      	bne.n	800831e <mem_set+0x10>
}
 8008336:	bf00      	nop
 8008338:	bf00      	nop
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008344:	b480      	push	{r7}
 8008346:	b089      	sub	sp, #36	@ 0x24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	61fb      	str	r3, [r7, #28]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	61fa      	str	r2, [r7, #28]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	4619      	mov	r1, r3
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	61ba      	str	r2, [r7, #24]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	1acb      	subs	r3, r1, r3
 8008370:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	3b01      	subs	r3, #1
 8008376:	607b      	str	r3, [r7, #4]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <mem_cmp+0x40>
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0eb      	beq.n	800835c <mem_cmp+0x18>

	return r;
 8008384:	697b      	ldr	r3, [r7, #20]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3724      	adds	r7, #36	@ 0x24
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800839c:	e002      	b.n	80083a4 <chk_chr+0x12>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	3301      	adds	r3, #1
 80083a2:	607b      	str	r3, [r7, #4]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d005      	beq.n	80083b8 <chk_chr+0x26>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d1f2      	bne.n	800839e <chk_chr+0xc>
	return *str;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	781b      	ldrb	r3, [r3, #0]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80083d2:	2300      	movs	r3, #0
 80083d4:	60bb      	str	r3, [r7, #8]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	e029      	b.n	8008430 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80083dc:	4a27      	ldr	r2, [pc, #156]	@ (800847c <chk_lock+0xb4>)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	011b      	lsls	r3, r3, #4
 80083e2:	4413      	add	r3, r2
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d01d      	beq.n	8008426 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80083ea:	4a24      	ldr	r2, [pc, #144]	@ (800847c <chk_lock+0xb4>)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	011b      	lsls	r3, r3, #4
 80083f0:	4413      	add	r3, r2
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d116      	bne.n	800842a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80083fc:	4a1f      	ldr	r2, [pc, #124]	@ (800847c <chk_lock+0xb4>)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	011b      	lsls	r3, r3, #4
 8008402:	4413      	add	r3, r2
 8008404:	3304      	adds	r3, #4
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800840c:	429a      	cmp	r2, r3
 800840e:	d10c      	bne.n	800842a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008410:	4a1a      	ldr	r2, [pc, #104]	@ (800847c <chk_lock+0xb4>)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	011b      	lsls	r3, r3, #4
 8008416:	4413      	add	r3, r2
 8008418:	3308      	adds	r3, #8
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008420:	429a      	cmp	r2, r3
 8008422:	d102      	bne.n	800842a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008424:	e007      	b.n	8008436 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008426:	2301      	movs	r3, #1
 8008428:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3301      	adds	r3, #1
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d9d2      	bls.n	80083dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b02      	cmp	r3, #2
 800843a:	d109      	bne.n	8008450 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d102      	bne.n	8008448 <chk_lock+0x80>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d101      	bne.n	800844c <chk_lock+0x84>
 8008448:	2300      	movs	r3, #0
 800844a:	e010      	b.n	800846e <chk_lock+0xa6>
 800844c:	2312      	movs	r3, #18
 800844e:	e00e      	b.n	800846e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d108      	bne.n	8008468 <chk_lock+0xa0>
 8008456:	4a09      	ldr	r2, [pc, #36]	@ (800847c <chk_lock+0xb4>)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	4413      	add	r3, r2
 800845e:	330c      	adds	r3, #12
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008466:	d101      	bne.n	800846c <chk_lock+0xa4>
 8008468:	2310      	movs	r3, #16
 800846a:	e000      	b.n	800846e <chk_lock+0xa6>
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	20002b18 	.word	0x20002b18

08008480 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008486:	2300      	movs	r3, #0
 8008488:	607b      	str	r3, [r7, #4]
 800848a:	e002      	b.n	8008492 <enq_lock+0x12>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3301      	adds	r3, #1
 8008490:	607b      	str	r3, [r7, #4]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d806      	bhi.n	80084a6 <enq_lock+0x26>
 8008498:	4a09      	ldr	r2, [pc, #36]	@ (80084c0 <enq_lock+0x40>)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	4413      	add	r3, r2
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1f2      	bne.n	800848c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	bf14      	ite	ne
 80084ac:	2301      	movne	r3, #1
 80084ae:	2300      	moveq	r3, #0
 80084b0:	b2db      	uxtb	r3, r3
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	20002b18 	.word	0x20002b18

080084c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80084ce:	2300      	movs	r3, #0
 80084d0:	60fb      	str	r3, [r7, #12]
 80084d2:	e01f      	b.n	8008514 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80084d4:	4a41      	ldr	r2, [pc, #260]	@ (80085dc <inc_lock+0x118>)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	4413      	add	r3, r2
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d113      	bne.n	800850e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80084e6:	4a3d      	ldr	r2, [pc, #244]	@ (80085dc <inc_lock+0x118>)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	4413      	add	r3, r2
 80084ee:	3304      	adds	r3, #4
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d109      	bne.n	800850e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80084fa:	4a38      	ldr	r2, [pc, #224]	@ (80085dc <inc_lock+0x118>)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	011b      	lsls	r3, r3, #4
 8008500:	4413      	add	r3, r2
 8008502:	3308      	adds	r3, #8
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800850a:	429a      	cmp	r2, r3
 800850c:	d006      	beq.n	800851c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3301      	adds	r3, #1
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d9dc      	bls.n	80084d4 <inc_lock+0x10>
 800851a:	e000      	b.n	800851e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800851c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b02      	cmp	r3, #2
 8008522:	d132      	bne.n	800858a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	e002      	b.n	8008530 <inc_lock+0x6c>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	3301      	adds	r3, #1
 800852e:	60fb      	str	r3, [r7, #12]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d806      	bhi.n	8008544 <inc_lock+0x80>
 8008536:	4a29      	ldr	r2, [pc, #164]	@ (80085dc <inc_lock+0x118>)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	011b      	lsls	r3, r3, #4
 800853c:	4413      	add	r3, r2
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1f2      	bne.n	800852a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b02      	cmp	r3, #2
 8008548:	d101      	bne.n	800854e <inc_lock+0x8a>
 800854a:	2300      	movs	r3, #0
 800854c:	e040      	b.n	80085d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	4922      	ldr	r1, [pc, #136]	@ (80085dc <inc_lock+0x118>)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	011b      	lsls	r3, r3, #4
 8008558:	440b      	add	r3, r1
 800855a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	491e      	ldr	r1, [pc, #120]	@ (80085dc <inc_lock+0x118>)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	011b      	lsls	r3, r3, #4
 8008566:	440b      	add	r3, r1
 8008568:	3304      	adds	r3, #4
 800856a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	695a      	ldr	r2, [r3, #20]
 8008570:	491a      	ldr	r1, [pc, #104]	@ (80085dc <inc_lock+0x118>)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	440b      	add	r3, r1
 8008578:	3308      	adds	r3, #8
 800857a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800857c:	4a17      	ldr	r2, [pc, #92]	@ (80085dc <inc_lock+0x118>)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	011b      	lsls	r3, r3, #4
 8008582:	4413      	add	r3, r2
 8008584:	330c      	adds	r3, #12
 8008586:	2200      	movs	r2, #0
 8008588:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d009      	beq.n	80085a4 <inc_lock+0xe0>
 8008590:	4a12      	ldr	r2, [pc, #72]	@ (80085dc <inc_lock+0x118>)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	011b      	lsls	r3, r3, #4
 8008596:	4413      	add	r3, r2
 8008598:	330c      	adds	r3, #12
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <inc_lock+0xe0>
 80085a0:	2300      	movs	r3, #0
 80085a2:	e015      	b.n	80085d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d108      	bne.n	80085bc <inc_lock+0xf8>
 80085aa:	4a0c      	ldr	r2, [pc, #48]	@ (80085dc <inc_lock+0x118>)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	4413      	add	r3, r2
 80085b2:	330c      	adds	r3, #12
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	3301      	adds	r3, #1
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	e001      	b.n	80085c0 <inc_lock+0xfc>
 80085bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085c0:	4906      	ldr	r1, [pc, #24]	@ (80085dc <inc_lock+0x118>)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	011b      	lsls	r3, r3, #4
 80085c6:	440b      	add	r3, r1
 80085c8:	330c      	adds	r3, #12
 80085ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3301      	adds	r3, #1
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	20002b18 	.word	0x20002b18

080085e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	607b      	str	r3, [r7, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d825      	bhi.n	8008640 <dec_lock+0x60>
		n = Files[i].ctr;
 80085f4:	4a17      	ldr	r2, [pc, #92]	@ (8008654 <dec_lock+0x74>)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	011b      	lsls	r3, r3, #4
 80085fa:	4413      	add	r3, r2
 80085fc:	330c      	adds	r3, #12
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008602:	89fb      	ldrh	r3, [r7, #14]
 8008604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008608:	d101      	bne.n	800860e <dec_lock+0x2e>
 800860a:	2300      	movs	r3, #0
 800860c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800860e:	89fb      	ldrh	r3, [r7, #14]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <dec_lock+0x3a>
 8008614:	89fb      	ldrh	r3, [r7, #14]
 8008616:	3b01      	subs	r3, #1
 8008618:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800861a:	4a0e      	ldr	r2, [pc, #56]	@ (8008654 <dec_lock+0x74>)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	011b      	lsls	r3, r3, #4
 8008620:	4413      	add	r3, r2
 8008622:	330c      	adds	r3, #12
 8008624:	89fa      	ldrh	r2, [r7, #14]
 8008626:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008628:	89fb      	ldrh	r3, [r7, #14]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d105      	bne.n	800863a <dec_lock+0x5a>
 800862e:	4a09      	ldr	r2, [pc, #36]	@ (8008654 <dec_lock+0x74>)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	011b      	lsls	r3, r3, #4
 8008634:	4413      	add	r3, r2
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	737b      	strb	r3, [r7, #13]
 800863e:	e001      	b.n	8008644 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008640:	2302      	movs	r3, #2
 8008642:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008644:	7b7b      	ldrb	r3, [r7, #13]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	20002b18 	.word	0x20002b18

08008658 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	e010      	b.n	8008688 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008666:	4a0d      	ldr	r2, [pc, #52]	@ (800869c <clear_lock+0x44>)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	011b      	lsls	r3, r3, #4
 800866c:	4413      	add	r3, r2
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	429a      	cmp	r2, r3
 8008674:	d105      	bne.n	8008682 <clear_lock+0x2a>
 8008676:	4a09      	ldr	r2, [pc, #36]	@ (800869c <clear_lock+0x44>)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	011b      	lsls	r3, r3, #4
 800867c:	4413      	add	r3, r2
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3301      	adds	r3, #1
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d9eb      	bls.n	8008666 <clear_lock+0xe>
	}
}
 800868e:	bf00      	nop
 8008690:	bf00      	nop
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	20002b18 	.word	0x20002b18

080086a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	78db      	ldrb	r3, [r3, #3]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d034      	beq.n	800871e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	7858      	ldrb	r0, [r3, #1]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80086c4:	2301      	movs	r3, #1
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	f7ff fd40 	bl	800814c <disk_write>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	73fb      	strb	r3, [r7, #15]
 80086d6:	e022      	b.n	800871e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	1ad2      	subs	r2, r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d217      	bcs.n	800871e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	789b      	ldrb	r3, [r3, #2]
 80086f2:	613b      	str	r3, [r7, #16]
 80086f4:	e010      	b.n	8008718 <sync_window+0x78>
					wsect += fs->fsize;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	4413      	add	r3, r2
 80086fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	7858      	ldrb	r0, [r3, #1]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800870a:	2301      	movs	r3, #1
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	f7ff fd1d 	bl	800814c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	3b01      	subs	r3, #1
 8008716:	613b      	str	r3, [r7, #16]
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d8eb      	bhi.n	80086f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800871e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	d01b      	beq.n	8008778 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff ffad 	bl	80086a0 <sync_window>
 8008746:	4603      	mov	r3, r0
 8008748:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d113      	bne.n	8008778 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7858      	ldrb	r0, [r3, #1]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800875a:	2301      	movs	r3, #1
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	f7ff fcd5 	bl	800810c <disk_read>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d004      	beq.n	8008772 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008768:	f04f 33ff 	mov.w	r3, #4294967295
 800876c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800876e:	2301      	movs	r3, #1
 8008770:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8008778:	7bfb      	ldrb	r3, [r7, #15]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
	...

08008784 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff ff87 	bl	80086a0 <sync_window>
 8008792:	4603      	mov	r3, r0
 8008794:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d159      	bne.n	8008850 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d149      	bne.n	8008838 <sync_fs+0xb4>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	791b      	ldrb	r3, [r3, #4]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d145      	bne.n	8008838 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	899b      	ldrh	r3, [r3, #12]
 80087b6:	461a      	mov	r2, r3
 80087b8:	2100      	movs	r1, #0
 80087ba:	f7ff fda8 	bl	800830e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	3338      	adds	r3, #56	@ 0x38
 80087c2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80087c6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7ff fd37 	bl	800823e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3338      	adds	r3, #56	@ 0x38
 80087d4:	4921      	ldr	r1, [pc, #132]	@ (800885c <sync_fs+0xd8>)
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff fd4c 	bl	8008274 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3338      	adds	r3, #56	@ 0x38
 80087e0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80087e4:	491e      	ldr	r1, [pc, #120]	@ (8008860 <sync_fs+0xdc>)
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7ff fd44 	bl	8008274 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3338      	adds	r3, #56	@ 0x38
 80087f0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	4619      	mov	r1, r3
 80087fa:	4610      	mov	r0, r2
 80087fc:	f7ff fd3a 	bl	8008274 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3338      	adds	r3, #56	@ 0x38
 8008804:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	4619      	mov	r1, r3
 800880e:	4610      	mov	r0, r2
 8008810:	f7ff fd30 	bl	8008274 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	7858      	ldrb	r0, [r3, #1]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800882c:	2301      	movs	r3, #1
 800882e:	f7ff fc8d 	bl	800814c <disk_write>
			fs->fsi_flag = 0;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	785b      	ldrb	r3, [r3, #1]
 800883c:	2200      	movs	r2, #0
 800883e:	2100      	movs	r1, #0
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fca3 	bl	800818c <disk_ioctl>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <sync_fs+0xcc>
 800884c:	2301      	movs	r3, #1
 800884e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	41615252 	.word	0x41615252
 8008860:	61417272 	.word	0x61417272

08008864 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	3b02      	subs	r3, #2
 8008872:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	3b02      	subs	r3, #2
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	429a      	cmp	r2, r3
 800887e:	d301      	bcc.n	8008884 <clust2sect+0x20>
 8008880:	2300      	movs	r3, #0
 8008882:	e008      	b.n	8008896 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	895b      	ldrh	r3, [r3, #10]
 8008888:	461a      	mov	r2, r3
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	fb03 f202 	mul.w	r2, r3, r2
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008894:	4413      	add	r3, r2
}
 8008896:	4618      	mov	r0, r3
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b086      	sub	sp, #24
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d904      	bls.n	80088c2 <get_fat+0x20>
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d302      	bcc.n	80088c8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80088c2:	2301      	movs	r3, #1
 80088c4:	617b      	str	r3, [r7, #20]
 80088c6:	e0ba      	b.n	8008a3e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80088c8:	f04f 33ff 	mov.w	r3, #4294967295
 80088cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	f000 8082 	beq.w	80089dc <get_fat+0x13a>
 80088d8:	2b03      	cmp	r3, #3
 80088da:	f300 80a6 	bgt.w	8008a2a <get_fat+0x188>
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d002      	beq.n	80088e8 <get_fat+0x46>
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d055      	beq.n	8008992 <get_fat+0xf0>
 80088e6:	e0a0      	b.n	8008a2a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	60fb      	str	r3, [r7, #12]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	085b      	lsrs	r3, r3, #1
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	4413      	add	r3, r2
 80088f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	899b      	ldrh	r3, [r3, #12]
 80088fe:	4619      	mov	r1, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	fbb3 f3f1 	udiv	r3, r3, r1
 8008906:	4413      	add	r3, r2
 8008908:	4619      	mov	r1, r3
 800890a:	6938      	ldr	r0, [r7, #16]
 800890c:	f7ff ff0c 	bl	8008728 <move_window>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	f040 808c 	bne.w	8008a30 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	1c5a      	adds	r2, r3, #1
 800891c:	60fa      	str	r2, [r7, #12]
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	8992      	ldrh	r2, [r2, #12]
 8008922:	fbb3 f1f2 	udiv	r1, r3, r2
 8008926:	fb01 f202 	mul.w	r2, r1, r2
 800892a:	1a9b      	subs	r3, r3, r2
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	4413      	add	r3, r2
 8008930:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008934:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	899b      	ldrh	r3, [r3, #12]
 800893e:	4619      	mov	r1, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	fbb3 f3f1 	udiv	r3, r3, r1
 8008946:	4413      	add	r3, r2
 8008948:	4619      	mov	r1, r3
 800894a:	6938      	ldr	r0, [r7, #16]
 800894c:	f7ff feec 	bl	8008728 <move_window>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d16e      	bne.n	8008a34 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	899b      	ldrh	r3, [r3, #12]
 800895a:	461a      	mov	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008962:	fb01 f202 	mul.w	r2, r1, r2
 8008966:	1a9b      	subs	r3, r3, r2
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	4413      	add	r3, r2
 800896c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008970:	021b      	lsls	r3, r3, #8
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	4313      	orrs	r3, r2
 8008976:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <get_fat+0xe6>
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	091b      	lsrs	r3, r3, #4
 8008986:	e002      	b.n	800898e <get_fat+0xec>
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800898e:	617b      	str	r3, [r7, #20]
			break;
 8008990:	e055      	b.n	8008a3e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	899b      	ldrh	r3, [r3, #12]
 800899a:	085b      	lsrs	r3, r3, #1
 800899c:	b29b      	uxth	r3, r3
 800899e:	4619      	mov	r1, r3
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80089a6:	4413      	add	r3, r2
 80089a8:	4619      	mov	r1, r3
 80089aa:	6938      	ldr	r0, [r7, #16]
 80089ac:	f7ff febc 	bl	8008728 <move_window>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d140      	bne.n	8008a38 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	8992      	ldrh	r2, [r2, #12]
 80089c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80089c8:	fb00 f202 	mul.w	r2, r0, r2
 80089cc:	1a9b      	subs	r3, r3, r2
 80089ce:	440b      	add	r3, r1
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7ff fbf9 	bl	80081c8 <ld_word>
 80089d6:	4603      	mov	r3, r0
 80089d8:	617b      	str	r3, [r7, #20]
			break;
 80089da:	e030      	b.n	8008a3e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	899b      	ldrh	r3, [r3, #12]
 80089e4:	089b      	lsrs	r3, r3, #2
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	4619      	mov	r1, r3
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80089f0:	4413      	add	r3, r2
 80089f2:	4619      	mov	r1, r3
 80089f4:	6938      	ldr	r0, [r7, #16]
 80089f6:	f7ff fe97 	bl	8008728 <move_window>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d11d      	bne.n	8008a3c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	8992      	ldrh	r2, [r2, #12]
 8008a0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a12:	fb00 f202 	mul.w	r2, r0, r2
 8008a16:	1a9b      	subs	r3, r3, r2
 8008a18:	440b      	add	r3, r1
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7ff fbec 	bl	80081f8 <ld_dword>
 8008a20:	4603      	mov	r3, r0
 8008a22:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008a26:	617b      	str	r3, [r7, #20]
			break;
 8008a28:	e009      	b.n	8008a3e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	617b      	str	r3, [r7, #20]
 8008a2e:	e006      	b.n	8008a3e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a30:	bf00      	nop
 8008a32:	e004      	b.n	8008a3e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a34:	bf00      	nop
 8008a36:	e002      	b.n	8008a3e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008a38:	bf00      	nop
 8008a3a:	e000      	b.n	8008a3e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008a3c:	bf00      	nop
		}
	}

	return val;
 8008a3e:	697b      	ldr	r3, [r7, #20]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3718      	adds	r7, #24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008a48:	b590      	push	{r4, r7, lr}
 8008a4a:	b089      	sub	sp, #36	@ 0x24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008a54:	2302      	movs	r3, #2
 8008a56:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	f240 8109 	bls.w	8008c72 <put_fat+0x22a>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	69db      	ldr	r3, [r3, #28]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	f080 8103 	bcs.w	8008c72 <put_fat+0x22a>
		switch (fs->fs_type) {
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	f000 80b6 	beq.w	8008be2 <put_fat+0x19a>
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	f300 80fb 	bgt.w	8008c72 <put_fat+0x22a>
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d003      	beq.n	8008a88 <put_fat+0x40>
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	f000 8083 	beq.w	8008b8c <put_fat+0x144>
 8008a86:	e0f4      	b.n	8008c72 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	61bb      	str	r3, [r7, #24]
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	085b      	lsrs	r3, r3, #1
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	4413      	add	r3, r2
 8008a94:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	899b      	ldrh	r3, [r3, #12]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008aa6:	4413      	add	r3, r2
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f7ff fe3c 	bl	8008728 <move_window>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ab4:	7ffb      	ldrb	r3, [r7, #31]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f040 80d4 	bne.w	8008c64 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	1c5a      	adds	r2, r3, #1
 8008ac6:	61ba      	str	r2, [r7, #24]
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	8992      	ldrh	r2, [r2, #12]
 8008acc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ad0:	fb00 f202 	mul.w	r2, r0, r2
 8008ad4:	1a9b      	subs	r3, r3, r2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00d      	beq.n	8008b00 <put_fat+0xb8>
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	b25b      	sxtb	r3, r3
 8008aea:	f003 030f 	and.w	r3, r3, #15
 8008aee:	b25a      	sxtb	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	011b      	lsls	r3, r3, #4
 8008af6:	b25b      	sxtb	r3, r3
 8008af8:	4313      	orrs	r3, r2
 8008afa:	b25b      	sxtb	r3, r3
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	e001      	b.n	8008b04 <put_fat+0xbc>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	899b      	ldrh	r3, [r3, #12]
 8008b16:	4619      	mov	r1, r3
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b1e:	4413      	add	r3, r2
 8008b20:	4619      	mov	r1, r3
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f7ff fe00 	bl	8008728 <move_window>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b2c:	7ffb      	ldrb	r3, [r7, #31]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f040 809a 	bne.w	8008c68 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	899b      	ldrh	r3, [r3, #12]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b46:	fb00 f202 	mul.w	r2, r0, r2
 8008b4a:	1a9b      	subs	r3, r3, r2
 8008b4c:	440b      	add	r3, r1
 8008b4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <put_fat+0x11a>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	091b      	lsrs	r3, r3, #4
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	e00e      	b.n	8008b80 <put_fat+0x138>
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	b25b      	sxtb	r3, r3
 8008b68:	f023 030f 	bic.w	r3, r3, #15
 8008b6c:	b25a      	sxtb	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	0a1b      	lsrs	r3, r3, #8
 8008b72:	b25b      	sxtb	r3, r3
 8008b74:	f003 030f 	and.w	r3, r3, #15
 8008b78:	b25b      	sxtb	r3, r3
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	b25b      	sxtb	r3, r3
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2201      	movs	r2, #1
 8008b88:	70da      	strb	r2, [r3, #3]
			break;
 8008b8a:	e072      	b.n	8008c72 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	899b      	ldrh	r3, [r3, #12]
 8008b94:	085b      	lsrs	r3, r3, #1
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	4619      	mov	r1, r3
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ba0:	4413      	add	r3, r2
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f7ff fdbf 	bl	8008728 <move_window>
 8008baa:	4603      	mov	r3, r0
 8008bac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008bae:	7ffb      	ldrb	r3, [r7, #31]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d15b      	bne.n	8008c6c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	005b      	lsls	r3, r3, #1
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	8992      	ldrh	r2, [r2, #12]
 8008bc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bc6:	fb00 f202 	mul.w	r2, r0, r2
 8008bca:	1a9b      	subs	r3, r3, r2
 8008bcc:	440b      	add	r3, r1
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	b292      	uxth	r2, r2
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7ff fb32 	bl	800823e <st_word>
			fs->wflag = 1;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	70da      	strb	r2, [r3, #3]
			break;
 8008be0:	e047      	b.n	8008c72 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	899b      	ldrh	r3, [r3, #12]
 8008bea:	089b      	lsrs	r3, r3, #2
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	4619      	mov	r1, r3
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bf6:	4413      	add	r3, r2
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f7ff fd94 	bl	8008728 <move_window>
 8008c00:	4603      	mov	r3, r0
 8008c02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008c04:	7ffb      	ldrb	r3, [r7, #31]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d132      	bne.n	8008c70 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	8992      	ldrh	r2, [r2, #12]
 8008c1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c22:	fb00 f202 	mul.w	r2, r0, r2
 8008c26:	1a9b      	subs	r3, r3, r2
 8008c28:	440b      	add	r3, r1
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7ff fae4 	bl	80081f8 <ld_dword>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008c36:	4323      	orrs	r3, r4
 8008c38:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	8992      	ldrh	r2, [r2, #12]
 8008c48:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c4c:	fb00 f202 	mul.w	r2, r0, r2
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	440b      	add	r3, r1
 8008c54:	6879      	ldr	r1, [r7, #4]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7ff fb0c 	bl	8008274 <st_dword>
			fs->wflag = 1;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	70da      	strb	r2, [r3, #3]
			break;
 8008c62:	e006      	b.n	8008c72 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008c64:	bf00      	nop
 8008c66:	e004      	b.n	8008c72 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008c68:	bf00      	nop
 8008c6a:	e002      	b.n	8008c72 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008c6c:	bf00      	nop
 8008c6e:	e000      	b.n	8008c72 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008c70:	bf00      	nop
		}
	}
	return res;
 8008c72:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3724      	adds	r7, #36	@ 0x24
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd90      	pop	{r4, r7, pc}

08008c7c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b088      	sub	sp, #32
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d904      	bls.n	8008ca2 <remove_chain+0x26>
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	69db      	ldr	r3, [r3, #28]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d301      	bcc.n	8008ca6 <remove_chain+0x2a>
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	e04b      	b.n	8008d3e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00c      	beq.n	8008cc6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008cac:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	69b8      	ldr	r0, [r7, #24]
 8008cb4:	f7ff fec8 	bl	8008a48 <put_fat>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008cbc:	7ffb      	ldrb	r3, [r7, #31]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <remove_chain+0x4a>
 8008cc2:	7ffb      	ldrb	r3, [r7, #31]
 8008cc4:	e03b      	b.n	8008d3e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008cc6:	68b9      	ldr	r1, [r7, #8]
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f7ff fdea 	bl	80088a2 <get_fat>
 8008cce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d031      	beq.n	8008d3a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d101      	bne.n	8008ce0 <remove_chain+0x64>
 8008cdc:	2302      	movs	r3, #2
 8008cde:	e02e      	b.n	8008d3e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce6:	d101      	bne.n	8008cec <remove_chain+0x70>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e028      	b.n	8008d3e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008cec:	2200      	movs	r2, #0
 8008cee:	68b9      	ldr	r1, [r7, #8]
 8008cf0:	69b8      	ldr	r0, [r7, #24]
 8008cf2:	f7ff fea9 	bl	8008a48 <put_fat>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008cfa:	7ffb      	ldrb	r3, [r7, #31]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <remove_chain+0x88>
 8008d00:	7ffb      	ldrb	r3, [r7, #31]
 8008d02:	e01c      	b.n	8008d3e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	699a      	ldr	r2, [r3, #24]
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	69db      	ldr	r3, [r3, #28]
 8008d0c:	3b02      	subs	r3, #2
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d20b      	bcs.n	8008d2a <remove_chain+0xae>
			fs->free_clst++;
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	791b      	ldrb	r3, [r3, #4]
 8008d20:	f043 0301 	orr.w	r3, r3, #1
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	69db      	ldr	r3, [r3, #28]
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d3c6      	bcc.n	8008cc6 <remove_chain+0x4a>
 8008d38:	e000      	b.n	8008d3c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008d3a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3720      	adds	r7, #32
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b088      	sub	sp, #32
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10d      	bne.n	8008d78 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d004      	beq.n	8008d72 <create_chain+0x2c>
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d31b      	bcc.n	8008daa <create_chain+0x64>
 8008d72:	2301      	movs	r3, #1
 8008d74:	61bb      	str	r3, [r7, #24]
 8008d76:	e018      	b.n	8008daa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff fd91 	bl	80088a2 <get_fat>
 8008d80:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d801      	bhi.n	8008d8c <create_chain+0x46>
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e070      	b.n	8008e6e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d92:	d101      	bne.n	8008d98 <create_chain+0x52>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	e06a      	b.n	8008e6e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	69db      	ldr	r3, [r3, #28]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d201      	bcs.n	8008da6 <create_chain+0x60>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	e063      	b.n	8008e6e <create_chain+0x128>
		scl = clst;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	3301      	adds	r3, #1
 8008db2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	69db      	ldr	r3, [r3, #28]
 8008db8:	69fa      	ldr	r2, [r7, #28]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d307      	bcc.n	8008dce <create_chain+0x88>
				ncl = 2;
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008dc2:	69fa      	ldr	r2, [r7, #28]
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d901      	bls.n	8008dce <create_chain+0x88>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e04f      	b.n	8008e6e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008dce:	69f9      	ldr	r1, [r7, #28]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f7ff fd66 	bl	80088a2 <get_fat>
 8008dd6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00e      	beq.n	8008dfc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d003      	beq.n	8008dec <create_chain+0xa6>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dea:	d101      	bne.n	8008df0 <create_chain+0xaa>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	e03e      	b.n	8008e6e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008df0:	69fa      	ldr	r2, [r7, #28]
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d1da      	bne.n	8008dae <create_chain+0x68>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e038      	b.n	8008e6e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008dfc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008e02:	69f9      	ldr	r1, [r7, #28]
 8008e04:	6938      	ldr	r0, [r7, #16]
 8008e06:	f7ff fe1f 	bl	8008a48 <put_fat>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d109      	bne.n	8008e28 <create_chain+0xe2>
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d006      	beq.n	8008e28 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008e1a:	69fa      	ldr	r2, [r7, #28]
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6938      	ldr	r0, [r7, #16]
 8008e20:	f7ff fe12 	bl	8008a48 <put_fat>
 8008e24:	4603      	mov	r3, r0
 8008e26:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008e28:	7dfb      	ldrb	r3, [r7, #23]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d116      	bne.n	8008e5c <create_chain+0x116>
		fs->last_clst = ncl;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	69fa      	ldr	r2, [r7, #28]
 8008e32:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	699a      	ldr	r2, [r3, #24]
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	69db      	ldr	r3, [r3, #28]
 8008e3c:	3b02      	subs	r3, #2
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d804      	bhi.n	8008e4c <create_chain+0x106>
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	1e5a      	subs	r2, r3, #1
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	791b      	ldrb	r3, [r3, #4]
 8008e50:	f043 0301 	orr.w	r3, r3, #1
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	711a      	strb	r2, [r3, #4]
 8008e5a:	e007      	b.n	8008e6c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d102      	bne.n	8008e68 <create_chain+0x122>
 8008e62:	f04f 33ff 	mov.w	r3, #4294967295
 8008e66:	e000      	b.n	8008e6a <create_chain+0x124>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008e6c:	69fb      	ldr	r3, [r7, #28]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3720      	adds	r7, #32
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b087      	sub	sp, #28
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	899b      	ldrh	r3, [r3, #12]
 8008e92:	461a      	mov	r2, r3
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	8952      	ldrh	r2, [r2, #10]
 8008e9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ea2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	1d1a      	adds	r2, r3, #4
 8008ea8:	613a      	str	r2, [r7, #16]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <clmt_clust+0x42>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e010      	b.n	8008eda <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d307      	bcc.n	8008ed0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	617b      	str	r3, [r7, #20]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008ece:	e7e9      	b.n	8008ea4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008ed0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	4413      	add	r3, r2
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	371c      	adds	r7, #28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b086      	sub	sp, #24
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008efc:	d204      	bcs.n	8008f08 <dir_sdi+0x22>
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	f003 031f 	and.w	r3, r3, #31
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <dir_sdi+0x26>
		return FR_INT_ERR;
 8008f08:	2302      	movs	r3, #2
 8008f0a:	e071      	b.n	8008ff0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d106      	bne.n	8008f2c <dir_sdi+0x46>
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d902      	bls.n	8008f2c <dir_sdi+0x46>
		clst = fs->dirbase;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f2a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10c      	bne.n	8008f4c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	095b      	lsrs	r3, r3, #5
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	8912      	ldrh	r2, [r2, #8]
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d301      	bcc.n	8008f42 <dir_sdi+0x5c>
 8008f3e:	2302      	movs	r3, #2
 8008f40:	e056      	b.n	8008ff0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	61da      	str	r2, [r3, #28]
 8008f4a:	e02d      	b.n	8008fa8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	895b      	ldrh	r3, [r3, #10]
 8008f50:	461a      	mov	r2, r3
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	899b      	ldrh	r3, [r3, #12]
 8008f56:	fb02 f303 	mul.w	r3, r2, r3
 8008f5a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f5c:	e019      	b.n	8008f92 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6979      	ldr	r1, [r7, #20]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7ff fc9d 	bl	80088a2 <get_fat>
 8008f68:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f70:	d101      	bne.n	8008f76 <dir_sdi+0x90>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e03c      	b.n	8008ff0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d904      	bls.n	8008f86 <dir_sdi+0xa0>
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d301      	bcc.n	8008f8a <dir_sdi+0xa4>
 8008f86:	2302      	movs	r3, #2
 8008f88:	e032      	b.n	8008ff0 <dir_sdi+0x10a>
			ofs -= csz;
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d2e1      	bcs.n	8008f5e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008f9a:	6979      	ldr	r1, [r7, #20]
 8008f9c:	6938      	ldr	r0, [r7, #16]
 8008f9e:	f7ff fc61 	bl	8008864 <clust2sect>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <dir_sdi+0xd4>
 8008fb6:	2302      	movs	r3, #2
 8008fb8:	e01a      	b.n	8008ff0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	69da      	ldr	r2, [r3, #28]
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	899b      	ldrh	r3, [r3, #12]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fca:	441a      	add	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	899b      	ldrh	r3, [r3, #12]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fe2:	fb00 f202 	mul.w	r2, r0, r2
 8008fe6:	1a9b      	subs	r3, r3, r2
 8008fe8:	18ca      	adds	r2, r1, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	3320      	adds	r3, #32
 800900e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d003      	beq.n	8009020 <dir_next+0x28>
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800901e:	d301      	bcc.n	8009024 <dir_next+0x2c>
 8009020:	2304      	movs	r3, #4
 8009022:	e0bb      	b.n	800919c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	899b      	ldrh	r3, [r3, #12]
 8009028:	461a      	mov	r2, r3
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009030:	fb01 f202 	mul.w	r2, r1, r2
 8009034:	1a9b      	subs	r3, r3, r2
 8009036:	2b00      	cmp	r3, #0
 8009038:	f040 809d 	bne.w	8009176 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	69db      	ldr	r3, [r3, #28]
 8009040:	1c5a      	adds	r2, r3, #1
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10b      	bne.n	8009066 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	095b      	lsrs	r3, r3, #5
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	8912      	ldrh	r2, [r2, #8]
 8009056:	4293      	cmp	r3, r2
 8009058:	f0c0 808d 	bcc.w	8009176 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	61da      	str	r2, [r3, #28]
 8009062:	2304      	movs	r3, #4
 8009064:	e09a      	b.n	800919c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	899b      	ldrh	r3, [r3, #12]
 800906a:	461a      	mov	r2, r3
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	8952      	ldrh	r2, [r2, #10]
 8009076:	3a01      	subs	r2, #1
 8009078:	4013      	ands	r3, r2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d17b      	bne.n	8009176 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	4619      	mov	r1, r3
 8009086:	4610      	mov	r0, r2
 8009088:	f7ff fc0b 	bl	80088a2 <get_fat>
 800908c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d801      	bhi.n	8009098 <dir_next+0xa0>
 8009094:	2302      	movs	r3, #2
 8009096:	e081      	b.n	800919c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909e:	d101      	bne.n	80090a4 <dir_next+0xac>
 80090a0:	2301      	movs	r3, #1
 80090a2:	e07b      	b.n	800919c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	69db      	ldr	r3, [r3, #28]
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d359      	bcc.n	8009162 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d104      	bne.n	80090be <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	61da      	str	r2, [r3, #28]
 80090ba:	2304      	movs	r3, #4
 80090bc:	e06e      	b.n	800919c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	4619      	mov	r1, r3
 80090c6:	4610      	mov	r0, r2
 80090c8:	f7ff fe3d 	bl	8008d46 <create_chain>
 80090cc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <dir_next+0xe0>
 80090d4:	2307      	movs	r3, #7
 80090d6:	e061      	b.n	800919c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d101      	bne.n	80090e2 <dir_next+0xea>
 80090de:	2302      	movs	r3, #2
 80090e0:	e05c      	b.n	800919c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e8:	d101      	bne.n	80090ee <dir_next+0xf6>
 80090ea:	2301      	movs	r3, #1
 80090ec:	e056      	b.n	800919c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f7ff fad6 	bl	80086a0 <sync_window>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <dir_next+0x106>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e04e      	b.n	800919c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	899b      	ldrh	r3, [r3, #12]
 8009108:	461a      	mov	r2, r3
 800910a:	2100      	movs	r1, #0
 800910c:	f7ff f8ff 	bl	800830e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009110:	2300      	movs	r3, #0
 8009112:	613b      	str	r3, [r7, #16]
 8009114:	6979      	ldr	r1, [r7, #20]
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f7ff fba4 	bl	8008864 <clust2sect>
 800911c:	4602      	mov	r2, r0
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	635a      	str	r2, [r3, #52]	@ 0x34
 8009122:	e012      	b.n	800914a <dir_next+0x152>
						fs->wflag = 1;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2201      	movs	r2, #1
 8009128:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f7ff fab8 	bl	80086a0 <sync_window>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <dir_next+0x142>
 8009136:	2301      	movs	r3, #1
 8009138:	e030      	b.n	800919c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	3301      	adds	r3, #1
 800913e:	613b      	str	r3, [r7, #16]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009144:	1c5a      	adds	r2, r3, #1
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	635a      	str	r2, [r3, #52]	@ 0x34
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	895b      	ldrh	r3, [r3, #10]
 800914e:	461a      	mov	r2, r3
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	4293      	cmp	r3, r2
 8009154:	d3e6      	bcc.n	8009124 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	1ad2      	subs	r2, r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009168:	6979      	ldr	r1, [r7, #20]
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f7ff fb7a 	bl	8008864 <clust2sect>
 8009170:	4602      	mov	r2, r0
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	899b      	ldrh	r3, [r3, #12]
 8009186:	461a      	mov	r2, r3
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	fbb3 f0f2 	udiv	r0, r3, r2
 800918e:	fb00 f202 	mul.w	r2, r0, r2
 8009192:	1a9b      	subs	r3, r3, r2
 8009194:	18ca      	adds	r2, r1, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80091b4:	2100      	movs	r1, #0
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7ff fe95 	bl	8008ee6 <dir_sdi>
 80091bc:	4603      	mov	r3, r0
 80091be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d12b      	bne.n	800921e <dir_alloc+0x7a>
		n = 0;
 80091c6:	2300      	movs	r3, #0
 80091c8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	4619      	mov	r1, r3
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f7ff faa9 	bl	8008728 <move_window>
 80091d6:	4603      	mov	r3, r0
 80091d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80091da:	7dfb      	ldrb	r3, [r7, #23]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d11d      	bne.n	800921c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	2be5      	cmp	r3, #229	@ 0xe5
 80091e8:	d004      	beq.n	80091f4 <dir_alloc+0x50>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d107      	bne.n	8009204 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	3301      	adds	r3, #1
 80091f8:	613b      	str	r3, [r7, #16]
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d102      	bne.n	8009208 <dir_alloc+0x64>
 8009202:	e00c      	b.n	800921e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009204:	2300      	movs	r3, #0
 8009206:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009208:	2101      	movs	r1, #1
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7ff fef4 	bl	8008ff8 <dir_next>
 8009210:	4603      	mov	r3, r0
 8009212:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009214:	7dfb      	ldrb	r3, [r7, #23]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d0d7      	beq.n	80091ca <dir_alloc+0x26>
 800921a:	e000      	b.n	800921e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800921c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800921e:	7dfb      	ldrb	r3, [r7, #23]
 8009220:	2b04      	cmp	r3, #4
 8009222:	d101      	bne.n	8009228 <dir_alloc+0x84>
 8009224:	2307      	movs	r3, #7
 8009226:	75fb      	strb	r3, [r7, #23]
	return res;
 8009228:	7dfb      	ldrb	r3, [r7, #23]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	331a      	adds	r3, #26
 8009240:	4618      	mov	r0, r3
 8009242:	f7fe ffc1 	bl	80081c8 <ld_word>
 8009246:	4603      	mov	r3, r0
 8009248:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	2b03      	cmp	r3, #3
 8009250:	d109      	bne.n	8009266 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	3314      	adds	r3, #20
 8009256:	4618      	mov	r0, r3
 8009258:	f7fe ffb6 	bl	80081c8 <ld_word>
 800925c:	4603      	mov	r3, r0
 800925e:	041b      	lsls	r3, r3, #16
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	4313      	orrs	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009266:	68fb      	ldr	r3, [r7, #12]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	331a      	adds	r3, #26
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	b292      	uxth	r2, r2
 8009284:	4611      	mov	r1, r2
 8009286:	4618      	mov	r0, r3
 8009288:	f7fe ffd9 	bl	800823e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	2b03      	cmp	r3, #3
 8009292:	d109      	bne.n	80092a8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f103 0214 	add.w	r2, r3, #20
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	0c1b      	lsrs	r3, r3, #16
 800929e:	b29b      	uxth	r3, r3
 80092a0:	4619      	mov	r1, r3
 80092a2:	4610      	mov	r0, r2
 80092a4:	f7fe ffcb 	bl	800823e <st_word>
	}
}
 80092a8:	bf00      	nop
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80092b0:	b590      	push	{r4, r7, lr}
 80092b2:	b087      	sub	sp, #28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	331a      	adds	r3, #26
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe ff82 	bl	80081c8 <ld_word>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <cmp_lfn+0x1e>
 80092ca:	2300      	movs	r3, #0
 80092cc:	e059      	b.n	8009382 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092d6:	1e5a      	subs	r2, r3, #1
 80092d8:	4613      	mov	r3, r2
 80092da:	005b      	lsls	r3, r3, #1
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80092e4:	2301      	movs	r3, #1
 80092e6:	81fb      	strh	r3, [r7, #14]
 80092e8:	2300      	movs	r3, #0
 80092ea:	613b      	str	r3, [r7, #16]
 80092ec:	e033      	b.n	8009356 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80092ee:	4a27      	ldr	r2, [pc, #156]	@ (800938c <cmp_lfn+0xdc>)
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	4413      	add	r3, r2
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	4413      	add	r3, r2
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe ff63 	bl	80081c8 <ld_word>
 8009302:	4603      	mov	r3, r0
 8009304:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009306:	89fb      	ldrh	r3, [r7, #14]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d01a      	beq.n	8009342 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	2bfe      	cmp	r3, #254	@ 0xfe
 8009310:	d812      	bhi.n	8009338 <cmp_lfn+0x88>
 8009312:	89bb      	ldrh	r3, [r7, #12]
 8009314:	4618      	mov	r0, r3
 8009316:	f001 fec1 	bl	800b09c <ff_wtoupper>
 800931a:	4603      	mov	r3, r0
 800931c:	461c      	mov	r4, r3
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	1c5a      	adds	r2, r3, #1
 8009322:	617a      	str	r2, [r7, #20]
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	4413      	add	r3, r2
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	4618      	mov	r0, r3
 800932e:	f001 feb5 	bl	800b09c <ff_wtoupper>
 8009332:	4603      	mov	r3, r0
 8009334:	429c      	cmp	r4, r3
 8009336:	d001      	beq.n	800933c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009338:	2300      	movs	r3, #0
 800933a:	e022      	b.n	8009382 <cmp_lfn+0xd2>
			}
			wc = uc;
 800933c:	89bb      	ldrh	r3, [r7, #12]
 800933e:	81fb      	strh	r3, [r7, #14]
 8009340:	e006      	b.n	8009350 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009342:	89bb      	ldrh	r3, [r7, #12]
 8009344:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009348:	4293      	cmp	r3, r2
 800934a:	d001      	beq.n	8009350 <cmp_lfn+0xa0>
 800934c:	2300      	movs	r3, #0
 800934e:	e018      	b.n	8009382 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	3301      	adds	r3, #1
 8009354:	613b      	str	r3, [r7, #16]
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	2b0c      	cmp	r3, #12
 800935a:	d9c8      	bls.n	80092ee <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00b      	beq.n	8009380 <cmp_lfn+0xd0>
 8009368:	89fb      	ldrh	r3, [r7, #14]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d008      	beq.n	8009380 <cmp_lfn+0xd0>
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	4413      	add	r3, r2
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <cmp_lfn+0xd0>
 800937c:	2300      	movs	r3, #0
 800937e:	e000      	b.n	8009382 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009380:	2301      	movs	r3, #1
}
 8009382:	4618      	mov	r0, r3
 8009384:	371c      	adds	r7, #28
 8009386:	46bd      	mov	sp, r7
 8009388:	bd90      	pop	{r4, r7, pc}
 800938a:	bf00      	nop
 800938c:	0800f84c 	.word	0x0800f84c

08009390 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b088      	sub	sp, #32
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	4611      	mov	r1, r2
 800939c:	461a      	mov	r2, r3
 800939e:	460b      	mov	r3, r1
 80093a0:	71fb      	strb	r3, [r7, #7]
 80093a2:	4613      	mov	r3, r2
 80093a4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	330d      	adds	r3, #13
 80093aa:	79ba      	ldrb	r2, [r7, #6]
 80093ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	330b      	adds	r3, #11
 80093b2:	220f      	movs	r2, #15
 80093b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	330c      	adds	r3, #12
 80093ba:	2200      	movs	r2, #0
 80093bc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	331a      	adds	r3, #26
 80093c2:	2100      	movs	r1, #0
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe ff3a 	bl	800823e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80093ca:	79fb      	ldrb	r3, [r7, #7]
 80093cc:	1e5a      	subs	r2, r3, #1
 80093ce:	4613      	mov	r3, r2
 80093d0:	005b      	lsls	r3, r3, #1
 80093d2:	4413      	add	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80093da:	2300      	movs	r3, #0
 80093dc:	82fb      	strh	r3, [r7, #22]
 80093de:	2300      	movs	r3, #0
 80093e0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80093e2:	8afb      	ldrh	r3, [r7, #22]
 80093e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d007      	beq.n	80093fc <put_lfn+0x6c>
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	61fa      	str	r2, [r7, #28]
 80093f2:	005b      	lsls	r3, r3, #1
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	4413      	add	r3, r2
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80093fc:	4a17      	ldr	r2, [pc, #92]	@ (800945c <put_lfn+0xcc>)
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	4413      	add	r3, r2
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	461a      	mov	r2, r3
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	4413      	add	r3, r2
 800940a:	8afa      	ldrh	r2, [r7, #22]
 800940c:	4611      	mov	r1, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f7fe ff15 	bl	800823e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009414:	8afb      	ldrh	r3, [r7, #22]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d102      	bne.n	8009420 <put_lfn+0x90>
 800941a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800941e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	3301      	adds	r3, #1
 8009424:	61bb      	str	r3, [r7, #24]
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	2b0c      	cmp	r3, #12
 800942a:	d9da      	bls.n	80093e2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800942c:	8afb      	ldrh	r3, [r7, #22]
 800942e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009432:	4293      	cmp	r3, r2
 8009434:	d006      	beq.n	8009444 <put_lfn+0xb4>
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	005b      	lsls	r3, r3, #1
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	4413      	add	r3, r2
 800943e:	881b      	ldrh	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d103      	bne.n	800944c <put_lfn+0xbc>
 8009444:	79fb      	ldrb	r3, [r7, #7]
 8009446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800944a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	79fa      	ldrb	r2, [r7, #7]
 8009450:	701a      	strb	r2, [r3, #0]
}
 8009452:	bf00      	nop
 8009454:	3720      	adds	r7, #32
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	0800f84c 	.word	0x0800f84c

08009460 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b08c      	sub	sp, #48	@ 0x30
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800946e:	220b      	movs	r2, #11
 8009470:	68b9      	ldr	r1, [r7, #8]
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f7fe ff2a 	bl	80082cc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	2b05      	cmp	r3, #5
 800947c:	d929      	bls.n	80094d2 <gen_numname+0x72>
		sr = seq;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009482:	e020      	b.n	80094c6 <gen_numname+0x66>
			wc = *lfn++;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	1c9a      	adds	r2, r3, #2
 8009488:	607a      	str	r2, [r7, #4]
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800948e:	2300      	movs	r3, #0
 8009490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009492:	e015      	b.n	80094c0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	005a      	lsls	r2, r3, #1
 8009498:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800949a:	f003 0301 	and.w	r3, r3, #1
 800949e:	4413      	add	r3, r2
 80094a0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80094a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80094a4:	085b      	lsrs	r3, r3, #1
 80094a6:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <gen_numname+0x5a>
 80094b2:	69fa      	ldr	r2, [r7, #28]
 80094b4:	4b30      	ldr	r3, [pc, #192]	@ (8009578 <gen_numname+0x118>)
 80094b6:	4053      	eors	r3, r2
 80094b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80094ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094bc:	3301      	adds	r3, #1
 80094be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c2:	2b0f      	cmp	r3, #15
 80094c4:	d9e6      	bls.n	8009494 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1da      	bne.n	8009484 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80094d2:	2307      	movs	r3, #7
 80094d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	f003 030f 	and.w	r3, r3, #15
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	3330      	adds	r3, #48	@ 0x30
 80094e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80094e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80094ea:	2b39      	cmp	r3, #57	@ 0x39
 80094ec:	d904      	bls.n	80094f8 <gen_numname+0x98>
 80094ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80094f2:	3307      	adds	r3, #7
 80094f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80094f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fa:	1e5a      	subs	r2, r3, #1
 80094fc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80094fe:	3330      	adds	r3, #48	@ 0x30
 8009500:	443b      	add	r3, r7
 8009502:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8009506:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	091b      	lsrs	r3, r3, #4
 800950e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1df      	bne.n	80094d6 <gen_numname+0x76>
	ns[i] = '~';
 8009516:	f107 0214 	add.w	r2, r7, #20
 800951a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951c:	4413      	add	r3, r2
 800951e:	227e      	movs	r2, #126	@ 0x7e
 8009520:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009522:	2300      	movs	r3, #0
 8009524:	627b      	str	r3, [r7, #36]	@ 0x24
 8009526:	e002      	b.n	800952e <gen_numname+0xce>
 8009528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952a:	3301      	adds	r3, #1
 800952c:	627b      	str	r3, [r7, #36]	@ 0x24
 800952e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009532:	429a      	cmp	r2, r3
 8009534:	d205      	bcs.n	8009542 <gen_numname+0xe2>
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953a:	4413      	add	r3, r2
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	2b20      	cmp	r3, #32
 8009540:	d1f2      	bne.n	8009528 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009544:	2b07      	cmp	r3, #7
 8009546:	d807      	bhi.n	8009558 <gen_numname+0xf8>
 8009548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800954e:	3330      	adds	r3, #48	@ 0x30
 8009550:	443b      	add	r3, r7
 8009552:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009556:	e000      	b.n	800955a <gen_numname+0xfa>
 8009558:	2120      	movs	r1, #32
 800955a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955c:	1c5a      	adds	r2, r3, #1
 800955e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	4413      	add	r3, r2
 8009564:	460a      	mov	r2, r1
 8009566:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956a:	2b07      	cmp	r3, #7
 800956c:	d9e9      	bls.n	8009542 <gen_numname+0xe2>
}
 800956e:	bf00      	nop
 8009570:	bf00      	nop
 8009572:	3730      	adds	r7, #48	@ 0x30
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	00011021 	.word	0x00011021

0800957c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009588:	230b      	movs	r3, #11
 800958a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	b2da      	uxtb	r2, r3
 8009590:	0852      	lsrs	r2, r2, #1
 8009592:	01db      	lsls	r3, r3, #7
 8009594:	4313      	orrs	r3, r2
 8009596:	b2da      	uxtb	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	1c59      	adds	r1, r3, #1
 800959c:	6079      	str	r1, [r7, #4]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	4413      	add	r3, r2
 80095a2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	60bb      	str	r3, [r7, #8]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1ed      	bne.n	800958c <sum_sfn+0x10>
	return sum;
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr

080095be <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b086      	sub	sp, #24
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80095cc:	2100      	movs	r1, #0
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7ff fc89 	bl	8008ee6 <dir_sdi>
 80095d4:	4603      	mov	r3, r0
 80095d6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80095d8:	7dfb      	ldrb	r3, [r7, #23]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <dir_find+0x24>
 80095de:	7dfb      	ldrb	r3, [r7, #23]
 80095e0:	e0a9      	b.n	8009736 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80095e2:	23ff      	movs	r3, #255	@ 0xff
 80095e4:	753b      	strb	r3, [r7, #20]
 80095e6:	7d3b      	ldrb	r3, [r7, #20]
 80095e8:	757b      	strb	r3, [r7, #21]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f04f 32ff 	mov.w	r2, #4294967295
 80095f0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	69db      	ldr	r3, [r3, #28]
 80095f6:	4619      	mov	r1, r3
 80095f8:	6938      	ldr	r0, [r7, #16]
 80095fa:	f7ff f895 	bl	8008728 <move_window>
 80095fe:	4603      	mov	r3, r0
 8009600:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	2b00      	cmp	r3, #0
 8009606:	f040 8090 	bne.w	800972a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009612:	7dbb      	ldrb	r3, [r7, #22]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d102      	bne.n	800961e <dir_find+0x60>
 8009618:	2304      	movs	r3, #4
 800961a:	75fb      	strb	r3, [r7, #23]
 800961c:	e08a      	b.n	8009734 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	330b      	adds	r3, #11
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800962a:	73fb      	strb	r3, [r7, #15]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	7bfa      	ldrb	r2, [r7, #15]
 8009630:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009632:	7dbb      	ldrb	r3, [r7, #22]
 8009634:	2be5      	cmp	r3, #229	@ 0xe5
 8009636:	d007      	beq.n	8009648 <dir_find+0x8a>
 8009638:	7bfb      	ldrb	r3, [r7, #15]
 800963a:	f003 0308 	and.w	r3, r3, #8
 800963e:	2b00      	cmp	r3, #0
 8009640:	d009      	beq.n	8009656 <dir_find+0x98>
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	2b0f      	cmp	r3, #15
 8009646:	d006      	beq.n	8009656 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009648:	23ff      	movs	r3, #255	@ 0xff
 800964a:	757b      	strb	r3, [r7, #21]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f04f 32ff 	mov.w	r2, #4294967295
 8009652:	631a      	str	r2, [r3, #48]	@ 0x30
 8009654:	e05e      	b.n	8009714 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009656:	7bfb      	ldrb	r3, [r7, #15]
 8009658:	2b0f      	cmp	r3, #15
 800965a:	d136      	bne.n	80096ca <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009666:	2b00      	cmp	r3, #0
 8009668:	d154      	bne.n	8009714 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800966a:	7dbb      	ldrb	r3, [r7, #22]
 800966c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00d      	beq.n	8009690 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a1b      	ldr	r3, [r3, #32]
 8009678:	7b5b      	ldrb	r3, [r3, #13]
 800967a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800967c:	7dbb      	ldrb	r3, [r7, #22]
 800967e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009682:	75bb      	strb	r3, [r7, #22]
 8009684:	7dbb      	ldrb	r3, [r7, #22]
 8009686:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	695a      	ldr	r2, [r3, #20]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009690:	7dba      	ldrb	r2, [r7, #22]
 8009692:	7d7b      	ldrb	r3, [r7, #21]
 8009694:	429a      	cmp	r2, r3
 8009696:	d115      	bne.n	80096c4 <dir_find+0x106>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a1b      	ldr	r3, [r3, #32]
 800969c:	330d      	adds	r3, #13
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	7d3a      	ldrb	r2, [r7, #20]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d10e      	bne.n	80096c4 <dir_find+0x106>
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	691a      	ldr	r2, [r3, #16]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	4619      	mov	r1, r3
 80096b0:	4610      	mov	r0, r2
 80096b2:	f7ff fdfd 	bl	80092b0 <cmp_lfn>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d003      	beq.n	80096c4 <dir_find+0x106>
 80096bc:	7d7b      	ldrb	r3, [r7, #21]
 80096be:	3b01      	subs	r3, #1
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	e000      	b.n	80096c6 <dir_find+0x108>
 80096c4:	23ff      	movs	r3, #255	@ 0xff
 80096c6:	757b      	strb	r3, [r7, #21]
 80096c8:	e024      	b.n	8009714 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80096ca:	7d7b      	ldrb	r3, [r7, #21]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d109      	bne.n	80096e4 <dir_find+0x126>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7ff ff51 	bl	800957c <sum_sfn>
 80096da:	4603      	mov	r3, r0
 80096dc:	461a      	mov	r2, r3
 80096de:	7d3b      	ldrb	r3, [r7, #20]
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d024      	beq.n	800972e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10a      	bne.n	8009708 <dir_find+0x14a>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a18      	ldr	r0, [r3, #32]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	3324      	adds	r3, #36	@ 0x24
 80096fa:	220b      	movs	r2, #11
 80096fc:	4619      	mov	r1, r3
 80096fe:	f7fe fe21 	bl	8008344 <mem_cmp>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d014      	beq.n	8009732 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009708:	23ff      	movs	r3, #255	@ 0xff
 800970a:	757b      	strb	r3, [r7, #21]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f04f 32ff 	mov.w	r2, #4294967295
 8009712:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009714:	2100      	movs	r1, #0
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7ff fc6e 	bl	8008ff8 <dir_next>
 800971c:	4603      	mov	r3, r0
 800971e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009720:	7dfb      	ldrb	r3, [r7, #23]
 8009722:	2b00      	cmp	r3, #0
 8009724:	f43f af65 	beq.w	80095f2 <dir_find+0x34>
 8009728:	e004      	b.n	8009734 <dir_find+0x176>
		if (res != FR_OK) break;
 800972a:	bf00      	nop
 800972c:	e002      	b.n	8009734 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800972e:	bf00      	nop
 8009730:	e000      	b.n	8009734 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009732:	bf00      	nop

	return res;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08c      	sub	sp, #48	@ 0x30
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009754:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d001      	beq.n	8009760 <dir_register+0x20>
 800975c:	2306      	movs	r3, #6
 800975e:	e0e0      	b.n	8009922 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009760:	2300      	movs	r3, #0
 8009762:	627b      	str	r3, [r7, #36]	@ 0x24
 8009764:	e002      	b.n	800976c <dir_register+0x2c>
 8009766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009768:	3301      	adds	r3, #1
 800976a:	627b      	str	r3, [r7, #36]	@ 0x24
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	691a      	ldr	r2, [r3, #16]
 8009770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009772:	005b      	lsls	r3, r3, #1
 8009774:	4413      	add	r3, r2
 8009776:	881b      	ldrh	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1f4      	bne.n	8009766 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8009782:	f107 030c 	add.w	r3, r7, #12
 8009786:	220c      	movs	r2, #12
 8009788:	4618      	mov	r0, r3
 800978a:	f7fe fd9f 	bl	80082cc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800978e:	7dfb      	ldrb	r3, [r7, #23]
 8009790:	f003 0301 	and.w	r3, r3, #1
 8009794:	2b00      	cmp	r3, #0
 8009796:	d032      	beq.n	80097fe <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2240      	movs	r2, #64	@ 0x40
 800979c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80097a0:	2301      	movs	r3, #1
 80097a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097a4:	e016      	b.n	80097d4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	691a      	ldr	r2, [r3, #16]
 80097b0:	f107 010c 	add.w	r1, r7, #12
 80097b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b6:	f7ff fe53 	bl	8009460 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7ff feff 	bl	80095be <dir_find>
 80097c0:	4603      	mov	r3, r0
 80097c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80097c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d106      	bne.n	80097dc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80097ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d0:	3301      	adds	r3, #1
 80097d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d6:	2b63      	cmp	r3, #99	@ 0x63
 80097d8:	d9e5      	bls.n	80097a6 <dir_register+0x66>
 80097da:	e000      	b.n	80097de <dir_register+0x9e>
			if (res != FR_OK) break;
 80097dc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80097de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e0:	2b64      	cmp	r3, #100	@ 0x64
 80097e2:	d101      	bne.n	80097e8 <dir_register+0xa8>
 80097e4:	2307      	movs	r3, #7
 80097e6:	e09c      	b.n	8009922 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80097e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80097ec:	2b04      	cmp	r3, #4
 80097ee:	d002      	beq.n	80097f6 <dir_register+0xb6>
 80097f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80097f4:	e095      	b.n	8009922 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80097f6:	7dfa      	ldrb	r2, [r7, #23]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
 8009800:	f003 0302 	and.w	r3, r3, #2
 8009804:	2b00      	cmp	r3, #0
 8009806:	d007      	beq.n	8009818 <dir_register+0xd8>
 8009808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980a:	330c      	adds	r3, #12
 800980c:	4a47      	ldr	r2, [pc, #284]	@ (800992c <dir_register+0x1ec>)
 800980e:	fba2 2303 	umull	r2, r3, r2, r3
 8009812:	089b      	lsrs	r3, r3, #2
 8009814:	3301      	adds	r3, #1
 8009816:	e000      	b.n	800981a <dir_register+0xda>
 8009818:	2301      	movs	r3, #1
 800981a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800981c:	6a39      	ldr	r1, [r7, #32]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7ff fcc0 	bl	80091a4 <dir_alloc>
 8009824:	4603      	mov	r3, r0
 8009826:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800982a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800982e:	2b00      	cmp	r3, #0
 8009830:	d148      	bne.n	80098c4 <dir_register+0x184>
 8009832:	6a3b      	ldr	r3, [r7, #32]
 8009834:	3b01      	subs	r3, #1
 8009836:	623b      	str	r3, [r7, #32]
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d042      	beq.n	80098c4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	695a      	ldr	r2, [r3, #20]
 8009842:	6a3b      	ldr	r3, [r7, #32]
 8009844:	015b      	lsls	r3, r3, #5
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7ff fb4b 	bl	8008ee6 <dir_sdi>
 8009850:	4603      	mov	r3, r0
 8009852:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8009856:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800985a:	2b00      	cmp	r3, #0
 800985c:	d132      	bne.n	80098c4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	3324      	adds	r3, #36	@ 0x24
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff fe8a 	bl	800957c <sum_sfn>
 8009868:	4603      	mov	r3, r0
 800986a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	69db      	ldr	r3, [r3, #28]
 8009870:	4619      	mov	r1, r3
 8009872:	69f8      	ldr	r0, [r7, #28]
 8009874:	f7fe ff58 	bl	8008728 <move_window>
 8009878:	4603      	mov	r3, r0
 800987a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800987e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009882:	2b00      	cmp	r3, #0
 8009884:	d11d      	bne.n	80098c2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	6918      	ldr	r0, [r3, #16]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a19      	ldr	r1, [r3, #32]
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	b2da      	uxtb	r2, r3
 8009892:	7efb      	ldrb	r3, [r7, #27]
 8009894:	f7ff fd7c 	bl	8009390 <put_lfn>
				fs->wflag = 1;
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	2201      	movs	r2, #1
 800989c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800989e:	2100      	movs	r1, #0
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7ff fba9 	bl	8008ff8 <dir_next>
 80098a6:	4603      	mov	r3, r0
 80098a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80098ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d107      	bne.n	80098c4 <dir_register+0x184>
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	3b01      	subs	r3, #1
 80098b8:	623b      	str	r3, [r7, #32]
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1d5      	bne.n	800986c <dir_register+0x12c>
 80098c0:	e000      	b.n	80098c4 <dir_register+0x184>
				if (res != FR_OK) break;
 80098c2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80098c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d128      	bne.n	800991e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	69db      	ldr	r3, [r3, #28]
 80098d0:	4619      	mov	r1, r3
 80098d2:	69f8      	ldr	r0, [r7, #28]
 80098d4:	f7fe ff28 	bl	8008728 <move_window>
 80098d8:	4603      	mov	r3, r0
 80098da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80098de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d11b      	bne.n	800991e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	2220      	movs	r2, #32
 80098ec:	2100      	movs	r1, #0
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fe fd0d 	bl	800830e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6a18      	ldr	r0, [r3, #32]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3324      	adds	r3, #36	@ 0x24
 80098fc:	220b      	movs	r2, #11
 80098fe:	4619      	mov	r1, r3
 8009900:	f7fe fce4 	bl	80082cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a1b      	ldr	r3, [r3, #32]
 800990e:	330c      	adds	r3, #12
 8009910:	f002 0218 	and.w	r2, r2, #24
 8009914:	b2d2      	uxtb	r2, r2
 8009916:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	2201      	movs	r2, #1
 800991c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800991e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009922:	4618      	mov	r0, r3
 8009924:	3730      	adds	r7, #48	@ 0x30
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	4ec4ec4f 	.word	0x4ec4ec4f

08009930 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b08a      	sub	sp, #40	@ 0x28
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	613b      	str	r3, [r7, #16]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	60fb      	str	r3, [r7, #12]
 8009948:	2300      	movs	r3, #0
 800994a:	617b      	str	r3, [r7, #20]
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	1c5a      	adds	r2, r3, #1
 8009954:	61ba      	str	r2, [r7, #24]
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	4413      	add	r3, r2
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800995e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009960:	2b1f      	cmp	r3, #31
 8009962:	d940      	bls.n	80099e6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009964:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009966:	2b2f      	cmp	r3, #47	@ 0x2f
 8009968:	d006      	beq.n	8009978 <create_name+0x48>
 800996a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800996c:	2b5c      	cmp	r3, #92	@ 0x5c
 800996e:	d110      	bne.n	8009992 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009970:	e002      	b.n	8009978 <create_name+0x48>
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	3301      	adds	r3, #1
 8009976:	61bb      	str	r3, [r7, #24]
 8009978:	693a      	ldr	r2, [r7, #16]
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	4413      	add	r3, r2
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	2b2f      	cmp	r3, #47	@ 0x2f
 8009982:	d0f6      	beq.n	8009972 <create_name+0x42>
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	4413      	add	r3, r2
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b5c      	cmp	r3, #92	@ 0x5c
 800998e:	d0f0      	beq.n	8009972 <create_name+0x42>
			break;
 8009990:	e02a      	b.n	80099e8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	2bfe      	cmp	r3, #254	@ 0xfe
 8009996:	d901      	bls.n	800999c <create_name+0x6c>
 8009998:	2306      	movs	r3, #6
 800999a:	e17d      	b.n	8009c98 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800999c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80099a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099a4:	2101      	movs	r1, #1
 80099a6:	4618      	mov	r0, r3
 80099a8:	f001 fb3c 	bl	800b024 <ff_convert>
 80099ac:	4603      	mov	r3, r0
 80099ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80099b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d101      	bne.n	80099ba <create_name+0x8a>
 80099b6:	2306      	movs	r3, #6
 80099b8:	e16e      	b.n	8009c98 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80099ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80099be:	d809      	bhi.n	80099d4 <create_name+0xa4>
 80099c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099c2:	4619      	mov	r1, r3
 80099c4:	488d      	ldr	r0, [pc, #564]	@ (8009bfc <create_name+0x2cc>)
 80099c6:	f7fe fce4 	bl	8008392 <chk_chr>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <create_name+0xa4>
 80099d0:	2306      	movs	r3, #6
 80099d2:	e161      	b.n	8009c98 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	1c5a      	adds	r2, r3, #1
 80099d8:	617a      	str	r2, [r7, #20]
 80099da:	005b      	lsls	r3, r3, #1
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	4413      	add	r3, r2
 80099e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80099e2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80099e4:	e7b4      	b.n	8009950 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80099e6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	441a      	add	r2, r3
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80099f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099f4:	2b1f      	cmp	r3, #31
 80099f6:	d801      	bhi.n	80099fc <create_name+0xcc>
 80099f8:	2304      	movs	r3, #4
 80099fa:	e000      	b.n	80099fe <create_name+0xce>
 80099fc:	2300      	movs	r3, #0
 80099fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009a02:	e011      	b.n	8009a28 <create_name+0xf8>
		w = lfn[di - 1];
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009a0a:	4413      	add	r3, r2
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	4413      	add	r3, r2
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8009a16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a18:	2b20      	cmp	r3, #32
 8009a1a:	d002      	beq.n	8009a22 <create_name+0xf2>
 8009a1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a20:	d106      	bne.n	8009a30 <create_name+0x100>
		di--;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1ea      	bne.n	8009a04 <create_name+0xd4>
 8009a2e:	e000      	b.n	8009a32 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009a30:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	4413      	add	r3, r2
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d101      	bne.n	8009a48 <create_name+0x118>
 8009a44:	2306      	movs	r3, #6
 8009a46:	e127      	b.n	8009c98 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3324      	adds	r3, #36	@ 0x24
 8009a4c:	220b      	movs	r2, #11
 8009a4e:	2120      	movs	r1, #32
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fe fc5c 	bl	800830e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009a56:	2300      	movs	r3, #0
 8009a58:	61bb      	str	r3, [r7, #24]
 8009a5a:	e002      	b.n	8009a62 <create_name+0x132>
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	61bb      	str	r3, [r7, #24]
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	005b      	lsls	r3, r3, #1
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	4413      	add	r3, r2
 8009a6a:	881b      	ldrh	r3, [r3, #0]
 8009a6c:	2b20      	cmp	r3, #32
 8009a6e:	d0f5      	beq.n	8009a5c <create_name+0x12c>
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	005b      	lsls	r3, r3, #1
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	4413      	add	r3, r2
 8009a78:	881b      	ldrh	r3, [r3, #0]
 8009a7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a7c:	d0ee      	beq.n	8009a5c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d009      	beq.n	8009a98 <create_name+0x168>
 8009a84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a88:	f043 0303 	orr.w	r3, r3, #3
 8009a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009a90:	e002      	b.n	8009a98 <create_name+0x168>
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	3b01      	subs	r3, #1
 8009a96:	617b      	str	r3, [r7, #20]
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d009      	beq.n	8009ab2 <create_name+0x182>
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009aa4:	4413      	add	r3, r2
 8009aa6:	005b      	lsls	r3, r3, #1
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	4413      	add	r3, r2
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ab0:	d1ef      	bne.n	8009a92 <create_name+0x162>

	i = b = 0; ni = 8;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009ab8:	2300      	movs	r3, #0
 8009aba:	623b      	str	r3, [r7, #32]
 8009abc:	2308      	movs	r3, #8
 8009abe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	61ba      	str	r2, [r7, #24]
 8009ac6:	005b      	lsls	r3, r3, #1
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4413      	add	r3, r2
 8009acc:	881b      	ldrh	r3, [r3, #0]
 8009ace:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009ad0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 8090 	beq.w	8009bf8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009ad8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ada:	2b20      	cmp	r3, #32
 8009adc:	d006      	beq.n	8009aec <create_name+0x1bc>
 8009ade:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ae0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ae2:	d10a      	bne.n	8009afa <create_name+0x1ca>
 8009ae4:	69ba      	ldr	r2, [r7, #24]
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d006      	beq.n	8009afa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009aec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009af0:	f043 0303 	orr.w	r3, r3, #3
 8009af4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009af8:	e07d      	b.n	8009bf6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009afa:	6a3a      	ldr	r2, [r7, #32]
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d203      	bcs.n	8009b0a <create_name+0x1da>
 8009b02:	69ba      	ldr	r2, [r7, #24]
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d123      	bne.n	8009b52 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	2b0b      	cmp	r3, #11
 8009b0e:	d106      	bne.n	8009b1e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009b10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b14:	f043 0303 	orr.w	r3, r3, #3
 8009b18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009b1c:	e075      	b.n	8009c0a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009b1e:	69ba      	ldr	r2, [r7, #24]
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d005      	beq.n	8009b32 <create_name+0x202>
 8009b26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b2a:	f043 0303 	orr.w	r3, r3, #3
 8009b2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8009b32:	69ba      	ldr	r2, [r7, #24]
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d866      	bhi.n	8009c08 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	61bb      	str	r3, [r7, #24]
 8009b3e:	2308      	movs	r3, #8
 8009b40:	623b      	str	r3, [r7, #32]
 8009b42:	230b      	movs	r3, #11
 8009b44:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009b46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009b50:	e051      	b.n	8009bf6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009b52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b54:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b56:	d914      	bls.n	8009b82 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009b58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f001 fa61 	bl	800b024 <ff_convert>
 8009b62:	4603      	mov	r3, r0
 8009b64:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009b66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d004      	beq.n	8009b76 <create_name+0x246>
 8009b6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b6e:	3b80      	subs	r3, #128	@ 0x80
 8009b70:	4a23      	ldr	r2, [pc, #140]	@ (8009c00 <create_name+0x2d0>)
 8009b72:	5cd3      	ldrb	r3, [r2, r3]
 8009b74:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009b76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b7a:	f043 0302 	orr.w	r3, r3, #2
 8009b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009b82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d007      	beq.n	8009b98 <create_name+0x268>
 8009b88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	481d      	ldr	r0, [pc, #116]	@ (8009c04 <create_name+0x2d4>)
 8009b8e:	f7fe fc00 	bl	8008392 <chk_chr>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d008      	beq.n	8009baa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009b98:	235f      	movs	r3, #95	@ 0x5f
 8009b9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ba0:	f043 0303 	orr.w	r3, r3, #3
 8009ba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009ba8:	e01b      	b.n	8009be2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009baa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009bac:	2b40      	cmp	r3, #64	@ 0x40
 8009bae:	d909      	bls.n	8009bc4 <create_name+0x294>
 8009bb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009bb2:	2b5a      	cmp	r3, #90	@ 0x5a
 8009bb4:	d806      	bhi.n	8009bc4 <create_name+0x294>
					b |= 2;
 8009bb6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009bba:	f043 0302 	orr.w	r3, r3, #2
 8009bbe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009bc2:	e00e      	b.n	8009be2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009bc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009bc6:	2b60      	cmp	r3, #96	@ 0x60
 8009bc8:	d90b      	bls.n	8009be2 <create_name+0x2b2>
 8009bca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009bcc:	2b7a      	cmp	r3, #122	@ 0x7a
 8009bce:	d808      	bhi.n	8009be2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009bd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009bd4:	f043 0301 	orr.w	r3, r3, #1
 8009bd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009bdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009bde:	3b20      	subs	r3, #32
 8009be0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009be2:	6a3b      	ldr	r3, [r7, #32]
 8009be4:	1c5a      	adds	r2, r3, #1
 8009be6:	623a      	str	r2, [r7, #32]
 8009be8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009bea:	b2d1      	uxtb	r1, r2
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	4413      	add	r3, r2
 8009bf0:	460a      	mov	r2, r1
 8009bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009bf6:	e763      	b.n	8009ac0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009bf8:	bf00      	nop
 8009bfa:	e006      	b.n	8009c0a <create_name+0x2da>
 8009bfc:	0800f764 	.word	0x0800f764
 8009c00:	0800f7cc 	.word	0x0800f7cc
 8009c04:	0800f770 	.word	0x0800f770
			if (si > di) break;			/* No extension */
 8009c08:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009c10:	2be5      	cmp	r3, #229	@ 0xe5
 8009c12:	d103      	bne.n	8009c1c <create_name+0x2ec>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2205      	movs	r2, #5
 8009c18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	2b08      	cmp	r3, #8
 8009c20:	d104      	bne.n	8009c2c <create_name+0x2fc>
 8009c22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009c2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009c30:	f003 030c 	and.w	r3, r3, #12
 8009c34:	2b0c      	cmp	r3, #12
 8009c36:	d005      	beq.n	8009c44 <create_name+0x314>
 8009c38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009c3c:	f003 0303 	and.w	r3, r3, #3
 8009c40:	2b03      	cmp	r3, #3
 8009c42:	d105      	bne.n	8009c50 <create_name+0x320>
 8009c44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c48:	f043 0302 	orr.w	r3, r3, #2
 8009c4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c54:	f003 0302 	and.w	r3, r3, #2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d117      	bne.n	8009c8c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009c5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009c60:	f003 0303 	and.w	r3, r3, #3
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d105      	bne.n	8009c74 <create_name+0x344>
 8009c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c6c:	f043 0310 	orr.w	r3, r3, #16
 8009c70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009c74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009c78:	f003 030c 	and.w	r3, r3, #12
 8009c7c:	2b04      	cmp	r3, #4
 8009c7e:	d105      	bne.n	8009c8c <create_name+0x35c>
 8009c80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c84:	f043 0308 	orr.w	r3, r3, #8
 8009c88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009c92:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8009c96:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3728      	adds	r7, #40	@ 0x28
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009cb4:	e002      	b.n	8009cbc <follow_path+0x1c>
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	603b      	str	r3, [r7, #0]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	2b2f      	cmp	r3, #47	@ 0x2f
 8009cc2:	d0f8      	beq.n	8009cb6 <follow_path+0x16>
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b5c      	cmp	r3, #92	@ 0x5c
 8009cca:	d0f4      	beq.n	8009cb6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	2b1f      	cmp	r3, #31
 8009cd8:	d80a      	bhi.n	8009cf0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2280      	movs	r2, #128	@ 0x80
 8009cde:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7ff f8fe 	bl	8008ee6 <dir_sdi>
 8009cea:	4603      	mov	r3, r0
 8009cec:	75fb      	strb	r3, [r7, #23]
 8009cee:	e048      	b.n	8009d82 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009cf0:	463b      	mov	r3, r7
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7ff fe1b 	bl	8009930 <create_name>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009cfe:	7dfb      	ldrb	r3, [r7, #23]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d139      	bne.n	8009d78 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f7ff fc5a 	bl	80095be <dir_find>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009d14:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009d16:	7dfb      	ldrb	r3, [r7, #23]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00a      	beq.n	8009d32 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009d1c:	7dfb      	ldrb	r3, [r7, #23]
 8009d1e:	2b04      	cmp	r3, #4
 8009d20:	d12c      	bne.n	8009d7c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009d22:	7afb      	ldrb	r3, [r7, #11]
 8009d24:	f003 0304 	and.w	r3, r3, #4
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d127      	bne.n	8009d7c <follow_path+0xdc>
 8009d2c:	2305      	movs	r3, #5
 8009d2e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009d30:	e024      	b.n	8009d7c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009d32:	7afb      	ldrb	r3, [r7, #11]
 8009d34:	f003 0304 	and.w	r3, r3, #4
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d121      	bne.n	8009d80 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	799b      	ldrb	r3, [r3, #6]
 8009d40:	f003 0310 	and.w	r3, r3, #16
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d102      	bne.n	8009d4e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009d48:	2305      	movs	r3, #5
 8009d4a:	75fb      	strb	r3, [r7, #23]
 8009d4c:	e019      	b.n	8009d82 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	8992      	ldrh	r2, [r2, #12]
 8009d5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d60:	fb00 f202 	mul.w	r2, r0, r2
 8009d64:	1a9b      	subs	r3, r3, r2
 8009d66:	440b      	add	r3, r1
 8009d68:	4619      	mov	r1, r3
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f7ff fa61 	bl	8009232 <ld_clust>
 8009d70:	4602      	mov	r2, r0
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009d76:	e7bb      	b.n	8009cf0 <follow_path+0x50>
			if (res != FR_OK) break;
 8009d78:	bf00      	nop
 8009d7a:	e002      	b.n	8009d82 <follow_path+0xe2>
				break;
 8009d7c:	bf00      	nop
 8009d7e:	e000      	b.n	8009d82 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009d80:	bf00      	nop
			}
		}
	}

	return res;
 8009d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b087      	sub	sp, #28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009d94:	f04f 33ff 	mov.w	r3, #4294967295
 8009d98:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d031      	beq.n	8009e06 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	617b      	str	r3, [r7, #20]
 8009da8:	e002      	b.n	8009db0 <get_ldnumber+0x24>
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	3301      	adds	r3, #1
 8009dae:	617b      	str	r3, [r7, #20]
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	2b1f      	cmp	r3, #31
 8009db6:	d903      	bls.n	8009dc0 <get_ldnumber+0x34>
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	2b3a      	cmp	r3, #58	@ 0x3a
 8009dbe:	d1f4      	bne.n	8009daa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2b3a      	cmp	r3, #58	@ 0x3a
 8009dc6:	d11c      	bne.n	8009e02 <get_ldnumber+0x76>
			tp = *path;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	1c5a      	adds	r2, r3, #1
 8009dd2:	60fa      	str	r2, [r7, #12]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	3b30      	subs	r3, #48	@ 0x30
 8009dd8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2b09      	cmp	r3, #9
 8009dde:	d80e      	bhi.n	8009dfe <get_ldnumber+0x72>
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d10a      	bne.n	8009dfe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d107      	bne.n	8009dfe <get_ldnumber+0x72>
					vol = (int)i;
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	3301      	adds	r3, #1
 8009df6:	617b      	str	r3, [r7, #20]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	e002      	b.n	8009e08 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009e02:	2300      	movs	r3, #0
 8009e04:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009e06:	693b      	ldr	r3, [r7, #16]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	371c      	adds	r7, #28
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	70da      	strb	r2, [r3, #3]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7fe fc7a 	bl	8008728 <move_window>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <check_fs+0x2a>
 8009e3a:	2304      	movs	r3, #4
 8009e3c:	e038      	b.n	8009eb0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	3338      	adds	r3, #56	@ 0x38
 8009e42:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fe f9be 	bl	80081c8 <ld_word>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	461a      	mov	r2, r3
 8009e50:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d001      	beq.n	8009e5c <check_fs+0x48>
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e029      	b.n	8009eb0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009e62:	2be9      	cmp	r3, #233	@ 0xe9
 8009e64:	d009      	beq.n	8009e7a <check_fs+0x66>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009e6c:	2beb      	cmp	r3, #235	@ 0xeb
 8009e6e:	d11e      	bne.n	8009eae <check_fs+0x9a>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009e76:	2b90      	cmp	r3, #144	@ 0x90
 8009e78:	d119      	bne.n	8009eae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	3338      	adds	r3, #56	@ 0x38
 8009e7e:	3336      	adds	r3, #54	@ 0x36
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fe f9b9 	bl	80081f8 <ld_dword>
 8009e86:	4603      	mov	r3, r0
 8009e88:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8009eb8 <check_fs+0xa4>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d101      	bne.n	8009e96 <check_fs+0x82>
 8009e92:	2300      	movs	r3, #0
 8009e94:	e00c      	b.n	8009eb0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	3338      	adds	r3, #56	@ 0x38
 8009e9a:	3352      	adds	r3, #82	@ 0x52
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fe f9ab 	bl	80081f8 <ld_dword>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	4a05      	ldr	r2, [pc, #20]	@ (8009ebc <check_fs+0xa8>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d101      	bne.n	8009eae <check_fs+0x9a>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	e000      	b.n	8009eb0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009eae:	2302      	movs	r3, #2
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	00544146 	.word	0x00544146
 8009ebc:	33544146 	.word	0x33544146

08009ec0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b096      	sub	sp, #88	@ 0x58
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f7ff ff59 	bl	8009d8c <get_ldnumber>
 8009eda:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	da01      	bge.n	8009ee6 <find_volume+0x26>
 8009ee2:	230b      	movs	r3, #11
 8009ee4:	e265      	b.n	800a3b2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009ee6:	4a9f      	ldr	r2, [pc, #636]	@ (800a164 <find_volume+0x2a4>)
 8009ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009eee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d101      	bne.n	8009efa <find_volume+0x3a>
 8009ef6:	230c      	movs	r3, #12
 8009ef8:	e25b      	b.n	800a3b2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009efe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009f00:	79fb      	ldrb	r3, [r7, #7]
 8009f02:	f023 0301 	bic.w	r3, r3, #1
 8009f06:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d01a      	beq.n	8009f46 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f12:	785b      	ldrb	r3, [r3, #1]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7fe f8b9 	bl	800808c <disk_status>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009f20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f24:	f003 0301 	and.w	r3, r3, #1
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10c      	bne.n	8009f46 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009f2c:	79fb      	ldrb	r3, [r7, #7]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d007      	beq.n	8009f42 <find_volume+0x82>
 8009f32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f36:	f003 0304 	and.w	r3, r3, #4
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009f3e:	230a      	movs	r3, #10
 8009f40:	e237      	b.n	800a3b2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8009f42:	2300      	movs	r3, #0
 8009f44:	e235      	b.n	800a3b2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f48:	2200      	movs	r2, #0
 8009f4a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f52:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f56:	785b      	ldrb	r3, [r3, #1]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fe f8b1 	bl	80080c0 <disk_initialize>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009f64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009f70:	2303      	movs	r3, #3
 8009f72:	e21e      	b.n	800a3b2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009f74:	79fb      	ldrb	r3, [r7, #7]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d007      	beq.n	8009f8a <find_volume+0xca>
 8009f7a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f7e:	f003 0304 	and.w	r3, r3, #4
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009f86:	230a      	movs	r3, #10
 8009f88:	e213      	b.n	800a3b2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8c:	7858      	ldrb	r0, [r3, #1]
 8009f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f90:	330c      	adds	r3, #12
 8009f92:	461a      	mov	r2, r3
 8009f94:	2102      	movs	r1, #2
 8009f96:	f7fe f8f9 	bl	800818c <disk_ioctl>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d001      	beq.n	8009fa4 <find_volume+0xe4>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e206      	b.n	800a3b2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa6:	899b      	ldrh	r3, [r3, #12]
 8009fa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fac:	d80d      	bhi.n	8009fca <find_volume+0x10a>
 8009fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb0:	899b      	ldrh	r3, [r3, #12]
 8009fb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fb6:	d308      	bcc.n	8009fca <find_volume+0x10a>
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fba:	899b      	ldrh	r3, [r3, #12]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc0:	899b      	ldrh	r3, [r3, #12]
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <find_volume+0x10e>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e1f1      	b.n	800a3b2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009fd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009fd4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009fd6:	f7ff ff1d 	bl	8009e14 <check_fs>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009fe0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	d149      	bne.n	800a07c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009fe8:	2300      	movs	r3, #0
 8009fea:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fec:	e01e      	b.n	800a02c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ff6:	011b      	lsls	r3, r3, #4
 8009ff8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009ffc:	4413      	add	r3, r2
 8009ffe:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a002:	3304      	adds	r3, #4
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d006      	beq.n	800a018 <find_volume+0x158>
 800a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00c:	3308      	adds	r3, #8
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fe f8f2 	bl	80081f8 <ld_dword>
 800a014:	4602      	mov	r2, r0
 800a016:	e000      	b.n	800a01a <find_volume+0x15a>
 800a018:	2200      	movs	r2, #0
 800a01a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	3358      	adds	r3, #88	@ 0x58
 800a020:	443b      	add	r3, r7
 800a022:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a028:	3301      	adds	r3, #1
 800a02a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a02c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a02e:	2b03      	cmp	r3, #3
 800a030:	d9dd      	bls.n	8009fee <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a032:	2300      	movs	r3, #0
 800a034:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <find_volume+0x182>
 800a03c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a03e:	3b01      	subs	r3, #1
 800a040:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	3358      	adds	r3, #88	@ 0x58
 800a048:	443b      	add	r3, r7
 800a04a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a04e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a052:	2b00      	cmp	r3, #0
 800a054:	d005      	beq.n	800a062 <find_volume+0x1a2>
 800a056:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a058:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a05a:	f7ff fedb 	bl	8009e14 <check_fs>
 800a05e:	4603      	mov	r3, r0
 800a060:	e000      	b.n	800a064 <find_volume+0x1a4>
 800a062:	2303      	movs	r3, #3
 800a064:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a068:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d905      	bls.n	800a07c <find_volume+0x1bc>
 800a070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a072:	3301      	adds	r3, #1
 800a074:	643b      	str	r3, [r7, #64]	@ 0x40
 800a076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a078:	2b03      	cmp	r3, #3
 800a07a:	d9e2      	bls.n	800a042 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a07c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a080:	2b04      	cmp	r3, #4
 800a082:	d101      	bne.n	800a088 <find_volume+0x1c8>
 800a084:	2301      	movs	r3, #1
 800a086:	e194      	b.n	800a3b2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a088:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d901      	bls.n	800a094 <find_volume+0x1d4>
 800a090:	230d      	movs	r3, #13
 800a092:	e18e      	b.n	800a3b2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a096:	3338      	adds	r3, #56	@ 0x38
 800a098:	330b      	adds	r3, #11
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fe f894 	bl	80081c8 <ld_word>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a6:	899b      	ldrh	r3, [r3, #12]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d001      	beq.n	800a0b0 <find_volume+0x1f0>
 800a0ac:	230d      	movs	r3, #13
 800a0ae:	e180      	b.n	800a3b2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b2:	3338      	adds	r3, #56	@ 0x38
 800a0b4:	3316      	adds	r3, #22
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fe f886 	bl	80081c8 <ld_word>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a0c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d106      	bne.n	800a0d4 <find_volume+0x214>
 800a0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c8:	3338      	adds	r3, #56	@ 0x38
 800a0ca:	3324      	adds	r3, #36	@ 0x24
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fe f893 	bl	80081f8 <ld_dword>
 800a0d2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a0d8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0dc:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800a0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e6:	789b      	ldrb	r3, [r3, #2]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d005      	beq.n	800a0f8 <find_volume+0x238>
 800a0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ee:	789b      	ldrb	r3, [r3, #2]
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d001      	beq.n	800a0f8 <find_volume+0x238>
 800a0f4:	230d      	movs	r3, #13
 800a0f6:	e15c      	b.n	800a3b2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fa:	789b      	ldrb	r3, [r3, #2]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a100:	fb02 f303 	mul.w	r3, r2, r3
 800a104:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a108:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a10c:	461a      	mov	r2, r3
 800a10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a110:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a114:	895b      	ldrh	r3, [r3, #10]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d008      	beq.n	800a12c <find_volume+0x26c>
 800a11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11c:	895b      	ldrh	r3, [r3, #10]
 800a11e:	461a      	mov	r2, r3
 800a120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a122:	895b      	ldrh	r3, [r3, #10]
 800a124:	3b01      	subs	r3, #1
 800a126:	4013      	ands	r3, r2
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <find_volume+0x270>
 800a12c:	230d      	movs	r3, #13
 800a12e:	e140      	b.n	800a3b2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a132:	3338      	adds	r3, #56	@ 0x38
 800a134:	3311      	adds	r3, #17
 800a136:	4618      	mov	r0, r3
 800a138:	f7fe f846 	bl	80081c8 <ld_word>
 800a13c:	4603      	mov	r3, r0
 800a13e:	461a      	mov	r2, r3
 800a140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a142:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a146:	891b      	ldrh	r3, [r3, #8]
 800a148:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a14a:	8992      	ldrh	r2, [r2, #12]
 800a14c:	0952      	lsrs	r2, r2, #5
 800a14e:	b292      	uxth	r2, r2
 800a150:	fbb3 f1f2 	udiv	r1, r3, r2
 800a154:	fb01 f202 	mul.w	r2, r1, r2
 800a158:	1a9b      	subs	r3, r3, r2
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d003      	beq.n	800a168 <find_volume+0x2a8>
 800a160:	230d      	movs	r3, #13
 800a162:	e126      	b.n	800a3b2 <find_volume+0x4f2>
 800a164:	20002b10 	.word	0x20002b10

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16a:	3338      	adds	r3, #56	@ 0x38
 800a16c:	3313      	adds	r3, #19
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fe f82a 	bl	80081c8 <ld_word>
 800a174:	4603      	mov	r3, r0
 800a176:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d106      	bne.n	800a18c <find_volume+0x2cc>
 800a17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a180:	3338      	adds	r3, #56	@ 0x38
 800a182:	3320      	adds	r3, #32
 800a184:	4618      	mov	r0, r3
 800a186:	f7fe f837 	bl	80081f8 <ld_dword>
 800a18a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18e:	3338      	adds	r3, #56	@ 0x38
 800a190:	330e      	adds	r3, #14
 800a192:	4618      	mov	r0, r3
 800a194:	f7fe f818 	bl	80081c8 <ld_word>
 800a198:	4603      	mov	r3, r0
 800a19a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a19c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <find_volume+0x2e6>
 800a1a2:	230d      	movs	r3, #13
 800a1a4:	e105      	b.n	800a3b2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a1a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a1a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1aa:	4413      	add	r3, r2
 800a1ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1ae:	8911      	ldrh	r1, [r2, #8]
 800a1b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1b2:	8992      	ldrh	r2, [r2, #12]
 800a1b4:	0952      	lsrs	r2, r2, #5
 800a1b6:	b292      	uxth	r2, r2
 800a1b8:	fbb1 f2f2 	udiv	r2, r1, r2
 800a1bc:	b292      	uxth	r2, r2
 800a1be:	4413      	add	r3, r2
 800a1c0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a1c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d201      	bcs.n	800a1ce <find_volume+0x30e>
 800a1ca:	230d      	movs	r3, #13
 800a1cc:	e0f1      	b.n	800a3b2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a1ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1d6:	8952      	ldrh	r2, [r2, #10]
 800a1d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1dc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d101      	bne.n	800a1e8 <find_volume+0x328>
 800a1e4:	230d      	movs	r3, #13
 800a1e6:	e0e4      	b.n	800a3b2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d802      	bhi.n	800a1fe <find_volume+0x33e>
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a200:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a204:	4293      	cmp	r3, r2
 800a206:	d802      	bhi.n	800a20e <find_volume+0x34e>
 800a208:	2301      	movs	r3, #1
 800a20a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a210:	1c9a      	adds	r2, r3, #2
 800a212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a214:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a218:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a21a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a21c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a21e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a220:	441a      	add	r2, r3
 800a222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a224:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a226:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22a:	441a      	add	r2, r3
 800a22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800a230:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a234:	2b03      	cmp	r3, #3
 800a236:	d11e      	bne.n	800a276 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23a:	3338      	adds	r3, #56	@ 0x38
 800a23c:	332a      	adds	r3, #42	@ 0x2a
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fd ffc2 	bl	80081c8 <ld_word>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <find_volume+0x38e>
 800a24a:	230d      	movs	r3, #13
 800a24c:	e0b1      	b.n	800a3b2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a250:	891b      	ldrh	r3, [r3, #8]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <find_volume+0x39a>
 800a256:	230d      	movs	r3, #13
 800a258:	e0ab      	b.n	800a3b2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25c:	3338      	adds	r3, #56	@ 0x38
 800a25e:	332c      	adds	r3, #44	@ 0x2c
 800a260:	4618      	mov	r0, r3
 800a262:	f7fd ffc9 	bl	80081f8 <ld_dword>
 800a266:	4602      	mov	r2, r0
 800a268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	647b      	str	r3, [r7, #68]	@ 0x44
 800a274:	e01f      	b.n	800a2b6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a278:	891b      	ldrh	r3, [r3, #8]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <find_volume+0x3c2>
 800a27e:	230d      	movs	r3, #13
 800a280:	e097      	b.n	800a3b2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a284:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a286:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a288:	441a      	add	r2, r3
 800a28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a28e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a292:	2b02      	cmp	r3, #2
 800a294:	d103      	bne.n	800a29e <find_volume+0x3de>
 800a296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a298:	69db      	ldr	r3, [r3, #28]
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	e00a      	b.n	800a2b4 <find_volume+0x3f4>
 800a29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a0:	69da      	ldr	r2, [r3, #28]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	005b      	lsls	r3, r3, #1
 800a2a6:	4413      	add	r3, r2
 800a2a8:	085a      	lsrs	r2, r3, #1
 800a2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ac:	69db      	ldr	r3, [r3, #28]
 800a2ae:	f003 0301 	and.w	r3, r3, #1
 800a2b2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a2b4:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b8:	6a1a      	ldr	r2, [r3, #32]
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2bc:	899b      	ldrh	r3, [r3, #12]
 800a2be:	4619      	mov	r1, r3
 800a2c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2c2:	440b      	add	r3, r1
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a2c8:	8989      	ldrh	r1, [r1, #12]
 800a2ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d201      	bcs.n	800a2d6 <find_volume+0x416>
 800a2d2:	230d      	movs	r3, #13
 800a2d4:	e06d      	b.n	800a3b2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2dc:	619a      	str	r2, [r3, #24]
 800a2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e0:	699a      	ldr	r2, [r3, #24]
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e8:	2280      	movs	r2, #128	@ 0x80
 800a2ea:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a2ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d149      	bne.n	800a388 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f6:	3338      	adds	r3, #56	@ 0x38
 800a2f8:	3330      	adds	r3, #48	@ 0x30
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fd ff64 	bl	80081c8 <ld_word>
 800a300:	4603      	mov	r3, r0
 800a302:	2b01      	cmp	r3, #1
 800a304:	d140      	bne.n	800a388 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a308:	3301      	adds	r3, #1
 800a30a:	4619      	mov	r1, r3
 800a30c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a30e:	f7fe fa0b 	bl	8008728 <move_window>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d137      	bne.n	800a388 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31a:	2200      	movs	r2, #0
 800a31c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a320:	3338      	adds	r3, #56	@ 0x38
 800a322:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a326:	4618      	mov	r0, r3
 800a328:	f7fd ff4e 	bl	80081c8 <ld_word>
 800a32c:	4603      	mov	r3, r0
 800a32e:	461a      	mov	r2, r3
 800a330:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a334:	429a      	cmp	r2, r3
 800a336:	d127      	bne.n	800a388 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a33a:	3338      	adds	r3, #56	@ 0x38
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7fd ff5b 	bl	80081f8 <ld_dword>
 800a342:	4603      	mov	r3, r0
 800a344:	4a1d      	ldr	r2, [pc, #116]	@ (800a3bc <find_volume+0x4fc>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d11e      	bne.n	800a388 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a34c:	3338      	adds	r3, #56	@ 0x38
 800a34e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a352:	4618      	mov	r0, r3
 800a354:	f7fd ff50 	bl	80081f8 <ld_dword>
 800a358:	4603      	mov	r3, r0
 800a35a:	4a19      	ldr	r2, [pc, #100]	@ (800a3c0 <find_volume+0x500>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d113      	bne.n	800a388 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a362:	3338      	adds	r3, #56	@ 0x38
 800a364:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a368:	4618      	mov	r0, r3
 800a36a:	f7fd ff45 	bl	80081f8 <ld_dword>
 800a36e:	4602      	mov	r2, r0
 800a370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a372:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a376:	3338      	adds	r3, #56	@ 0x38
 800a378:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7fd ff3b 	bl	80081f8 <ld_dword>
 800a382:	4602      	mov	r2, r0
 800a384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a386:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a38e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a390:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c4 <find_volume+0x504>)
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	3301      	adds	r3, #1
 800a396:	b29a      	uxth	r2, r3
 800a398:	4b0a      	ldr	r3, [pc, #40]	@ (800a3c4 <find_volume+0x504>)
 800a39a:	801a      	strh	r2, [r3, #0]
 800a39c:	4b09      	ldr	r3, [pc, #36]	@ (800a3c4 <find_volume+0x504>)
 800a39e:	881a      	ldrh	r2, [r3, #0]
 800a3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a6:	4a08      	ldr	r2, [pc, #32]	@ (800a3c8 <find_volume+0x508>)
 800a3a8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a3aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a3ac:	f7fe f954 	bl	8008658 <clear_lock>
#endif
	return FR_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3758      	adds	r7, #88	@ 0x58
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	41615252 	.word	0x41615252
 800a3c0:	61417272 	.word	0x61417272
 800a3c4:	20002b14 	.word	0x20002b14
 800a3c8:	20002b38 	.word	0x20002b38

0800a3cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a3d6:	2309      	movs	r3, #9
 800a3d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d01c      	beq.n	800a41a <validate+0x4e>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d018      	beq.n	800a41a <validate+0x4e>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d013      	beq.n	800a41a <validate+0x4e>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	889a      	ldrh	r2, [r3, #4]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	88db      	ldrh	r3, [r3, #6]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d10c      	bne.n	800a41a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	785b      	ldrb	r3, [r3, #1]
 800a406:	4618      	mov	r0, r3
 800a408:	f7fd fe40 	bl	800808c <disk_status>
 800a40c:	4603      	mov	r3, r0
 800a40e:	f003 0301 	and.w	r3, r3, #1
 800a412:	2b00      	cmp	r3, #0
 800a414:	d101      	bne.n	800a41a <validate+0x4e>
			res = FR_OK;
 800a416:	2300      	movs	r3, #0
 800a418:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d102      	bne.n	800a426 <validate+0x5a>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	e000      	b.n	800a428 <validate+0x5c>
 800a426:	2300      	movs	r3, #0
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	6013      	str	r3, [r2, #0]
	return res;
 800a42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
	...

0800a438 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b088      	sub	sp, #32
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	4613      	mov	r3, r2
 800a444:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a44a:	f107 0310 	add.w	r3, r7, #16
 800a44e:	4618      	mov	r0, r3
 800a450:	f7ff fc9c 	bl	8009d8c <get_ldnumber>
 800a454:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	da01      	bge.n	800a460 <f_mount+0x28>
 800a45c:	230b      	movs	r3, #11
 800a45e:	e02b      	b.n	800a4b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a460:	4a17      	ldr	r2, [pc, #92]	@ (800a4c0 <f_mount+0x88>)
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a468:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d005      	beq.n	800a47c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a470:	69b8      	ldr	r0, [r7, #24]
 800a472:	f7fe f8f1 	bl	8008658 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	2200      	movs	r2, #0
 800a47a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d002      	beq.n	800a488 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	490d      	ldr	r1, [pc, #52]	@ (800a4c0 <f_mount+0x88>)
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d002      	beq.n	800a49e <f_mount+0x66>
 800a498:	79fb      	ldrb	r3, [r7, #7]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d001      	beq.n	800a4a2 <f_mount+0x6a>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	e00a      	b.n	800a4b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a4a2:	f107 010c 	add.w	r1, r7, #12
 800a4a6:	f107 0308 	add.w	r3, r7, #8
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7ff fd07 	bl	8009ec0 <find_volume>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3720      	adds	r7, #32
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	20002b10 	.word	0x20002b10

0800a4c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b09a      	sub	sp, #104	@ 0x68
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d101      	bne.n	800a4dc <f_open+0x18>
 800a4d8:	2309      	movs	r3, #9
 800a4da:	e1b7      	b.n	800a84c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a4dc:	79fb      	ldrb	r3, [r7, #7]
 800a4de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a4e4:	79fa      	ldrb	r2, [r7, #7]
 800a4e6:	f107 0114 	add.w	r1, r7, #20
 800a4ea:	f107 0308 	add.w	r3, r7, #8
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff fce6 	bl	8009ec0 <find_volume>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800a4fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f040 819b 	bne.w	800a83a <f_open+0x376>
		dj.obj.fs = fs;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	f107 0318 	add.w	r3, r7, #24
 800a50e:	4611      	mov	r1, r2
 800a510:	4618      	mov	r0, r3
 800a512:	f7ff fbc5 	bl	8009ca0 <follow_path>
 800a516:	4603      	mov	r3, r0
 800a518:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a51c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a520:	2b00      	cmp	r3, #0
 800a522:	d118      	bne.n	800a556 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a524:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a528:	b25b      	sxtb	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	da03      	bge.n	800a536 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a52e:	2306      	movs	r3, #6
 800a530:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a534:	e00f      	b.n	800a556 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a536:	79fb      	ldrb	r3, [r7, #7]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	bf8c      	ite	hi
 800a53c:	2301      	movhi	r3, #1
 800a53e:	2300      	movls	r3, #0
 800a540:	b2db      	uxtb	r3, r3
 800a542:	461a      	mov	r2, r3
 800a544:	f107 0318 	add.w	r3, r7, #24
 800a548:	4611      	mov	r1, r2
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fd ff3c 	bl	80083c8 <chk_lock>
 800a550:	4603      	mov	r3, r0
 800a552:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a556:	79fb      	ldrb	r3, [r7, #7]
 800a558:	f003 031c 	and.w	r3, r3, #28
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d07f      	beq.n	800a660 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a560:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a564:	2b00      	cmp	r3, #0
 800a566:	d017      	beq.n	800a598 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a568:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a56c:	2b04      	cmp	r3, #4
 800a56e:	d10e      	bne.n	800a58e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a570:	f7fd ff86 	bl	8008480 <enq_lock>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d006      	beq.n	800a588 <f_open+0xc4>
 800a57a:	f107 0318 	add.w	r3, r7, #24
 800a57e:	4618      	mov	r0, r3
 800a580:	f7ff f8de 	bl	8009740 <dir_register>
 800a584:	4603      	mov	r3, r0
 800a586:	e000      	b.n	800a58a <f_open+0xc6>
 800a588:	2312      	movs	r3, #18
 800a58a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a58e:	79fb      	ldrb	r3, [r7, #7]
 800a590:	f043 0308 	orr.w	r3, r3, #8
 800a594:	71fb      	strb	r3, [r7, #7]
 800a596:	e010      	b.n	800a5ba <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a598:	7fbb      	ldrb	r3, [r7, #30]
 800a59a:	f003 0311 	and.w	r3, r3, #17
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d003      	beq.n	800a5aa <f_open+0xe6>
					res = FR_DENIED;
 800a5a2:	2307      	movs	r3, #7
 800a5a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a5a8:	e007      	b.n	800a5ba <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a5aa:	79fb      	ldrb	r3, [r7, #7]
 800a5ac:	f003 0304 	and.w	r3, r3, #4
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <f_open+0xf6>
 800a5b4:	2308      	movs	r3, #8
 800a5b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a5ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d168      	bne.n	800a694 <f_open+0x1d0>
 800a5c2:	79fb      	ldrb	r3, [r7, #7]
 800a5c4:	f003 0308 	and.w	r3, r3, #8
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d063      	beq.n	800a694 <f_open+0x1d0>
				dw = GET_FATTIME();
 800a5cc:	f7fd fd00 	bl	8007fd0 <get_fattime>
 800a5d0:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d4:	330e      	adds	r3, #14
 800a5d6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7fd fe4b 	bl	8008274 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e0:	3316      	adds	r3, #22
 800a5e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fd fe45 	bl	8008274 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ec:	330b      	adds	r3, #11
 800a5ee:	2220      	movs	r2, #32
 800a5f0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fe fe1a 	bl	8009232 <ld_clust>
 800a5fe:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a604:	2200      	movs	r2, #0
 800a606:	4618      	mov	r0, r3
 800a608:	f7fe fe32 	bl	8009270 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60e:	331c      	adds	r3, #28
 800a610:	2100      	movs	r1, #0
 800a612:	4618      	mov	r0, r3
 800a614:	f7fd fe2e 	bl	8008274 <st_dword>
					fs->wflag = 1;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	2201      	movs	r2, #1
 800a61c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a61e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a620:	2b00      	cmp	r3, #0
 800a622:	d037      	beq.n	800a694 <f_open+0x1d0>
						dw = fs->winsect;
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a628:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a62a:	f107 0318 	add.w	r3, r7, #24
 800a62e:	2200      	movs	r2, #0
 800a630:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe fb22 	bl	8008c7c <remove_chain>
 800a638:	4603      	mov	r3, r0
 800a63a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800a63e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a642:	2b00      	cmp	r3, #0
 800a644:	d126      	bne.n	800a694 <f_open+0x1d0>
							res = move_window(fs, dw);
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fe f86c 	bl	8008728 <move_window>
 800a650:	4603      	mov	r3, r0
 800a652:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a65a:	3a01      	subs	r2, #1
 800a65c:	615a      	str	r2, [r3, #20]
 800a65e:	e019      	b.n	800a694 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a660:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a664:	2b00      	cmp	r3, #0
 800a666:	d115      	bne.n	800a694 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a668:	7fbb      	ldrb	r3, [r7, #30]
 800a66a:	f003 0310 	and.w	r3, r3, #16
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d003      	beq.n	800a67a <f_open+0x1b6>
					res = FR_NO_FILE;
 800a672:	2304      	movs	r3, #4
 800a674:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a678:	e00c      	b.n	800a694 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a67a:	79fb      	ldrb	r3, [r7, #7]
 800a67c:	f003 0302 	and.w	r3, r3, #2
 800a680:	2b00      	cmp	r3, #0
 800a682:	d007      	beq.n	800a694 <f_open+0x1d0>
 800a684:	7fbb      	ldrb	r3, [r7, #30]
 800a686:	f003 0301 	and.w	r3, r3, #1
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d002      	beq.n	800a694 <f_open+0x1d0>
						res = FR_DENIED;
 800a68e:	2307      	movs	r3, #7
 800a690:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a694:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d126      	bne.n	800a6ea <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a69c:	79fb      	ldrb	r3, [r7, #7]
 800a69e:	f003 0308 	and.w	r3, r3, #8
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d003      	beq.n	800a6ae <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a6a6:	79fb      	ldrb	r3, [r7, #7]
 800a6a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6ac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a6b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a6bc:	79fb      	ldrb	r3, [r7, #7]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	bf8c      	ite	hi
 800a6c2:	2301      	movhi	r3, #1
 800a6c4:	2300      	movls	r3, #0
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	f107 0318 	add.w	r3, r7, #24
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fd fef7 	bl	80084c4 <inc_lock>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	691b      	ldr	r3, [r3, #16]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d102      	bne.n	800a6ea <f_open+0x226>
 800a6e4:	2302      	movs	r3, #2
 800a6e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a6ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f040 80a3 	bne.w	800a83a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fe fd99 	bl	8009232 <ld_clust>
 800a700:	4602      	mov	r2, r0
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a708:	331c      	adds	r3, #28
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fd fd74 	bl	80081f8 <ld_dword>
 800a710:	4602      	mov	r2, r0
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	88da      	ldrh	r2, [r3, #6]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	79fa      	ldrb	r2, [r7, #7]
 800a72e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	3330      	adds	r3, #48	@ 0x30
 800a746:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a74a:	2100      	movs	r1, #0
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fd fdde 	bl	800830e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a752:	79fb      	ldrb	r3, [r7, #7]
 800a754:	f003 0320 	and.w	r3, r3, #32
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d06e      	beq.n	800a83a <f_open+0x376>
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d06a      	beq.n	800a83a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	68da      	ldr	r2, [r3, #12]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	895b      	ldrh	r3, [r3, #10]
 800a770:	461a      	mov	r2, r3
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	899b      	ldrh	r3, [r3, #12]
 800a776:	fb02 f303 	mul.w	r3, r2, r3
 800a77a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a788:	e016      	b.n	800a7b8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fe f887 	bl	80088a2 <get_fat>
 800a794:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d802      	bhi.n	800a7a2 <f_open+0x2de>
 800a79c:	2302      	movs	r3, #2
 800a79e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a7a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a8:	d102      	bne.n	800a7b0 <f_open+0x2ec>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a7b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a7b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a7b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d103      	bne.n	800a7c8 <f_open+0x304>
 800a7c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a7c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d8e0      	bhi.n	800a78a <f_open+0x2c6>
				}
				fp->clust = clst;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a7cc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a7ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d131      	bne.n	800a83a <f_open+0x376>
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	899b      	ldrh	r3, [r3, #12]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7de:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7e2:	fb01 f202 	mul.w	r2, r1, r2
 800a7e6:	1a9b      	subs	r3, r3, r2
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d026      	beq.n	800a83a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7fe f837 	bl	8008864 <clust2sect>
 800a7f6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800a7f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d103      	bne.n	800a806 <f_open+0x342>
						res = FR_INT_ERR;
 800a7fe:	2302      	movs	r3, #2
 800a800:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a804:	e019      	b.n	800a83a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	899b      	ldrh	r3, [r3, #12]
 800a80a:	461a      	mov	r2, r3
 800a80c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a80e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a814:	441a      	add	r2, r3
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	7858      	ldrb	r0, [r3, #1]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6a1a      	ldr	r2, [r3, #32]
 800a828:	2301      	movs	r3, #1
 800a82a:	f7fd fc6f 	bl	800810c <disk_read>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d002      	beq.n	800a83a <f_open+0x376>
 800a834:	2301      	movs	r3, #1
 800a836:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a83a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d002      	beq.n	800a848 <f_open+0x384>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2200      	movs	r2, #0
 800a846:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a848:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3768      	adds	r7, #104	@ 0x68
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b08c      	sub	sp, #48	@ 0x30
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
 800a860:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	2200      	movs	r2, #0
 800a86a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f107 0210 	add.w	r2, r7, #16
 800a872:	4611      	mov	r1, r2
 800a874:	4618      	mov	r0, r3
 800a876:	f7ff fda9 	bl	800a3cc <validate>
 800a87a:	4603      	mov	r3, r0
 800a87c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a880:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a884:	2b00      	cmp	r3, #0
 800a886:	d107      	bne.n	800a898 <f_write+0x44>
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	7d5b      	ldrb	r3, [r3, #21]
 800a88c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a890:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a894:	2b00      	cmp	r3, #0
 800a896:	d002      	beq.n	800a89e <f_write+0x4a>
 800a898:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a89c:	e16a      	b.n	800ab74 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	7d1b      	ldrb	r3, [r3, #20]
 800a8a2:	f003 0302 	and.w	r3, r3, #2
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <f_write+0x5a>
 800a8aa:	2307      	movs	r3, #7
 800a8ac:	e162      	b.n	800ab74 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	699a      	ldr	r2, [r3, #24]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	441a      	add	r2, r3
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	f080 814c 	bcs.w	800ab58 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	43db      	mvns	r3, r3
 800a8c6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a8c8:	e146      	b.n	800ab58 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	8992      	ldrh	r2, [r2, #12]
 800a8d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8d6:	fb01 f202 	mul.w	r2, r1, r2
 800a8da:	1a9b      	subs	r3, r3, r2
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f040 80f1 	bne.w	800aac4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	8992      	ldrh	r2, [r2, #12]
 800a8ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8ee:	693a      	ldr	r2, [r7, #16]
 800a8f0:	8952      	ldrh	r2, [r2, #10]
 800a8f2:	3a01      	subs	r2, #1
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d143      	bne.n	800a986 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10c      	bne.n	800a920 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d11a      	bne.n	800a948 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2100      	movs	r1, #0
 800a916:	4618      	mov	r0, r3
 800a918:	f7fe fa15 	bl	8008d46 <create_chain>
 800a91c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a91e:	e013      	b.n	800a948 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a924:	2b00      	cmp	r3, #0
 800a926:	d007      	beq.n	800a938 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	4619      	mov	r1, r3
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f7fe faa1 	bl	8008e76 <clmt_clust>
 800a934:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a936:	e007      	b.n	800a948 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	69db      	ldr	r3, [r3, #28]
 800a93e:	4619      	mov	r1, r3
 800a940:	4610      	mov	r0, r2
 800a942:	f7fe fa00 	bl	8008d46 <create_chain>
 800a946:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f000 8109 	beq.w	800ab62 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a952:	2b01      	cmp	r3, #1
 800a954:	d104      	bne.n	800a960 <f_write+0x10c>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2202      	movs	r2, #2
 800a95a:	755a      	strb	r2, [r3, #21]
 800a95c:	2302      	movs	r3, #2
 800a95e:	e109      	b.n	800ab74 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a966:	d104      	bne.n	800a972 <f_write+0x11e>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2201      	movs	r2, #1
 800a96c:	755a      	strb	r2, [r3, #21]
 800a96e:	2301      	movs	r3, #1
 800a970:	e100      	b.n	800ab74 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a976:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d102      	bne.n	800a986 <f_write+0x132>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a984:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	7d1b      	ldrb	r3, [r3, #20]
 800a98a:	b25b      	sxtb	r3, r3
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	da18      	bge.n	800a9c2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	7858      	ldrb	r0, [r3, #1]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6a1a      	ldr	r2, [r3, #32]
 800a99e:	2301      	movs	r3, #1
 800a9a0:	f7fd fbd4 	bl	800814c <disk_write>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d004      	beq.n	800a9b4 <f_write+0x160>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	755a      	strb	r2, [r3, #21]
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e0df      	b.n	800ab74 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	7d1b      	ldrb	r3, [r3, #20]
 800a9b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9bc:	b2da      	uxtb	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a9c2:	693a      	ldr	r2, [r7, #16]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	69db      	ldr	r3, [r3, #28]
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	4610      	mov	r0, r2
 800a9cc:	f7fd ff4a 	bl	8008864 <clust2sect>
 800a9d0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d104      	bne.n	800a9e2 <f_write+0x18e>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2202      	movs	r2, #2
 800a9dc:	755a      	strb	r2, [r3, #21]
 800a9de:	2302      	movs	r3, #2
 800a9e0:	e0c8      	b.n	800ab74 <f_write+0x320>
			sect += csect;
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	899b      	ldrh	r3, [r3, #12]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9f6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d043      	beq.n	800aa86 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a9fe:	69ba      	ldr	r2, [r7, #24]
 800aa00:	6a3b      	ldr	r3, [r7, #32]
 800aa02:	4413      	add	r3, r2
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	8952      	ldrh	r2, [r2, #10]
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d905      	bls.n	800aa18 <f_write+0x1c4>
					cc = fs->csize - csect;
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	895b      	ldrh	r3, [r3, #10]
 800aa10:	461a      	mov	r2, r3
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	1ad3      	subs	r3, r2, r3
 800aa16:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	7858      	ldrb	r0, [r3, #1]
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	69f9      	ldr	r1, [r7, #28]
 800aa22:	f7fd fb93 	bl	800814c <disk_write>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d004      	beq.n	800aa36 <f_write+0x1e2>
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	755a      	strb	r2, [r3, #21]
 800aa32:	2301      	movs	r3, #1
 800aa34:	e09e      	b.n	800ab74 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6a1a      	ldr	r2, [r3, #32]
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	6a3a      	ldr	r2, [r7, #32]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d918      	bls.n	800aa76 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6a1a      	ldr	r2, [r3, #32]
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	693a      	ldr	r2, [r7, #16]
 800aa54:	8992      	ldrh	r2, [r2, #12]
 800aa56:	fb02 f303 	mul.w	r3, r2, r3
 800aa5a:	69fa      	ldr	r2, [r7, #28]
 800aa5c:	18d1      	adds	r1, r2, r3
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	899b      	ldrh	r3, [r3, #12]
 800aa62:	461a      	mov	r2, r3
 800aa64:	f7fd fc32 	bl	80082cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	7d1b      	ldrb	r3, [r3, #20]
 800aa6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	899b      	ldrh	r3, [r3, #12]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	fb02 f303 	mul.w	r3, r2, r3
 800aa82:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800aa84:	e04b      	b.n	800ab1e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	697a      	ldr	r2, [r7, #20]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d016      	beq.n	800aabe <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	699a      	ldr	r2, [r3, #24]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d210      	bcs.n	800aabe <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	7858      	ldrb	r0, [r3, #1]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	697a      	ldr	r2, [r7, #20]
 800aaaa:	f7fd fb2f 	bl	800810c <disk_read>
 800aaae:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d004      	beq.n	800aabe <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2201      	movs	r2, #1
 800aab8:	755a      	strb	r2, [r3, #21]
 800aaba:	2301      	movs	r3, #1
 800aabc:	e05a      	b.n	800ab74 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	899b      	ldrh	r3, [r3, #12]
 800aac8:	4618      	mov	r0, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	699b      	ldr	r3, [r3, #24]
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	8992      	ldrh	r2, [r2, #12]
 800aad2:	fbb3 f1f2 	udiv	r1, r3, r2
 800aad6:	fb01 f202 	mul.w	r2, r1, r2
 800aada:	1a9b      	subs	r3, r3, r2
 800aadc:	1ac3      	subs	r3, r0, r3
 800aade:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800aae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d901      	bls.n	800aaec <f_write+0x298>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	8992      	ldrh	r2, [r2, #12]
 800aafa:	fbb3 f0f2 	udiv	r0, r3, r2
 800aafe:	fb00 f202 	mul.w	r2, r0, r2
 800ab02:	1a9b      	subs	r3, r3, r2
 800ab04:	440b      	add	r3, r1
 800ab06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab08:	69f9      	ldr	r1, [r7, #28]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fd fbde 	bl	80082cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	7d1b      	ldrb	r3, [r3, #20]
 800ab14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ab1e:	69fa      	ldr	r2, [r7, #28]
 800ab20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab22:	4413      	add	r3, r2
 800ab24:	61fb      	str	r3, [r7, #28]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	699a      	ldr	r2, [r3, #24]
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2c:	441a      	add	r2, r3
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	619a      	str	r2, [r3, #24]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	68da      	ldr	r2, [r3, #12]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	bf38      	it	cc
 800ab3e:	461a      	movcc	r2, r3
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	60da      	str	r2, [r3, #12]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4a:	441a      	add	r2, r3
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	601a      	str	r2, [r3, #0]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab54:	1ad3      	subs	r3, r2, r3
 800ab56:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f47f aeb5 	bne.w	800a8ca <f_write+0x76>
 800ab60:	e000      	b.n	800ab64 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ab62:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	7d1b      	ldrb	r3, [r3, #20]
 800ab68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab6c:	b2da      	uxtb	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3730      	adds	r7, #48	@ 0x30
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f107 0208 	add.w	r2, r7, #8
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7ff fc1d 	bl	800a3cc <validate>
 800ab92:	4603      	mov	r3, r0
 800ab94:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab96:	7dfb      	ldrb	r3, [r7, #23]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d168      	bne.n	800ac6e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	7d1b      	ldrb	r3, [r3, #20]
 800aba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d062      	beq.n	800ac6e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	7d1b      	ldrb	r3, [r3, #20]
 800abac:	b25b      	sxtb	r3, r3
 800abae:	2b00      	cmp	r3, #0
 800abb0:	da15      	bge.n	800abde <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	7858      	ldrb	r0, [r3, #1]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6a1a      	ldr	r2, [r3, #32]
 800abc0:	2301      	movs	r3, #1
 800abc2:	f7fd fac3 	bl	800814c <disk_write>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d001      	beq.n	800abd0 <f_sync+0x54>
 800abcc:	2301      	movs	r3, #1
 800abce:	e04f      	b.n	800ac70 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	7d1b      	ldrb	r3, [r3, #20]
 800abd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abd8:	b2da      	uxtb	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800abde:	f7fd f9f7 	bl	8007fd0 <get_fattime>
 800abe2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abea:	4619      	mov	r1, r3
 800abec:	4610      	mov	r0, r2
 800abee:	f7fd fd9b 	bl	8008728 <move_window>
 800abf2:	4603      	mov	r3, r0
 800abf4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800abf6:	7dfb      	ldrb	r3, [r7, #23]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d138      	bne.n	800ac6e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac00:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	330b      	adds	r3, #11
 800ac06:	781a      	ldrb	r2, [r3, #0]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	330b      	adds	r3, #11
 800ac0c:	f042 0220 	orr.w	r2, r2, #32
 800ac10:	b2d2      	uxtb	r2, r2
 800ac12:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6818      	ldr	r0, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	68f9      	ldr	r1, [r7, #12]
 800ac20:	f7fe fb26 	bl	8009270 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f103 021c 	add.w	r2, r3, #28
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	4610      	mov	r0, r2
 800ac32:	f7fd fb1f 	bl	8008274 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	3316      	adds	r3, #22
 800ac3a:	6939      	ldr	r1, [r7, #16]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fd fb19 	bl	8008274 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	3312      	adds	r3, #18
 800ac46:	2100      	movs	r1, #0
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7fd faf8 	bl	800823e <st_word>
					fs->wflag = 1;
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2201      	movs	r2, #1
 800ac52:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fd fd94 	bl	8008784 <sync_fs>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	7d1b      	ldrb	r3, [r3, #20]
 800ac64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ac6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3718      	adds	r7, #24
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7ff ff7b 	bl	800ab7c <f_sync>
 800ac86:	4603      	mov	r3, r0
 800ac88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ac8a:	7bfb      	ldrb	r3, [r7, #15]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d118      	bne.n	800acc2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f107 0208 	add.w	r2, r7, #8
 800ac96:	4611      	mov	r1, r2
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7ff fb97 	bl	800a3cc <validate>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aca2:	7bfb      	ldrb	r3, [r7, #15]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10c      	bne.n	800acc2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	4618      	mov	r0, r3
 800acae:	f7fd fc97 	bl	80085e0 <dec_lock>
 800acb2:	4603      	mov	r3, r0
 800acb4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800acb6:	7bfb      	ldrb	r3, [r7, #15]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d102      	bne.n	800acc2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b092      	sub	sp, #72	@ 0x48
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800acd8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800acdc:	f107 030c 	add.w	r3, r7, #12
 800ace0:	2200      	movs	r2, #0
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7ff f8ec 	bl	8009ec0 <find_volume>
 800ace8:	4603      	mov	r3, r0
 800acea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800acee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f040 8099 	bne.w	800ae2a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800acf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800acfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad00:	699a      	ldr	r2, [r3, #24]
 800ad02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad04:	69db      	ldr	r3, [r3, #28]
 800ad06:	3b02      	subs	r3, #2
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d804      	bhi.n	800ad16 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800ad0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad0e:	699a      	ldr	r2, [r3, #24]
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	e089      	b.n	800ae2a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800ad16:	2300      	movs	r3, #0
 800ad18:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ad1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d128      	bne.n	800ad74 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ad22:	2302      	movs	r3, #2
 800ad24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad28:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ad2a:	f107 0314 	add.w	r3, r7, #20
 800ad2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fd fdb6 	bl	80088a2 <get_fat>
 800ad36:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ad38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3e:	d103      	bne.n	800ad48 <f_getfree+0x7c>
 800ad40:	2301      	movs	r3, #1
 800ad42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ad46:	e063      	b.n	800ae10 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ad48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d103      	bne.n	800ad56 <f_getfree+0x8a>
 800ad4e:	2302      	movs	r3, #2
 800ad50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ad54:	e05c      	b.n	800ae10 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ad56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d102      	bne.n	800ad62 <f_getfree+0x96>
 800ad5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad5e:	3301      	adds	r3, #1
 800ad60:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800ad62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad64:	3301      	adds	r3, #1
 800ad66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6a:	69db      	ldr	r3, [r3, #28]
 800ad6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d3db      	bcc.n	800ad2a <f_getfree+0x5e>
 800ad72:	e04d      	b.n	800ae10 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ad74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad76:	69db      	ldr	r3, [r3, #28]
 800ad78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad7e:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad84:	2300      	movs	r3, #0
 800ad86:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800ad88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d113      	bne.n	800adb6 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ad8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad92:	1c5a      	adds	r2, r3, #1
 800ad94:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ad96:	4619      	mov	r1, r3
 800ad98:	f7fd fcc6 	bl	8008728 <move_window>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800ada2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d131      	bne.n	800ae0e <f_getfree+0x142>
							p = fs->win;
 800adaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adac:	3338      	adds	r3, #56	@ 0x38
 800adae:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800adb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb2:	899b      	ldrh	r3, [r3, #12]
 800adb4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800adb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d10f      	bne.n	800adde <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800adbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800adc0:	f7fd fa02 	bl	80081c8 <ld_word>
 800adc4:	4603      	mov	r3, r0
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d102      	bne.n	800add0 <f_getfree+0x104>
 800adca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adcc:	3301      	adds	r3, #1
 800adce:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800add0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add2:	3302      	adds	r3, #2
 800add4:	633b      	str	r3, [r7, #48]	@ 0x30
 800add6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800add8:	3b02      	subs	r3, #2
 800adda:	637b      	str	r3, [r7, #52]	@ 0x34
 800addc:	e010      	b.n	800ae00 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800adde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ade0:	f7fd fa0a 	bl	80081f8 <ld_dword>
 800ade4:	4603      	mov	r3, r0
 800ade6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800adea:	2b00      	cmp	r3, #0
 800adec:	d102      	bne.n	800adf4 <f_getfree+0x128>
 800adee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adf0:	3301      	adds	r3, #1
 800adf2:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800adf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf6:	3304      	adds	r3, #4
 800adf8:	633b      	str	r3, [r7, #48]	@ 0x30
 800adfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adfc:	3b04      	subs	r3, #4
 800adfe:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800ae00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae02:	3b01      	subs	r3, #1
 800ae04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d1bd      	bne.n	800ad88 <f_getfree+0xbc>
 800ae0c:	e000      	b.n	800ae10 <f_getfree+0x144>
							if (res != FR_OK) break;
 800ae0e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae14:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ae16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae1a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ae1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae1e:	791a      	ldrb	r2, [r3, #4]
 800ae20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae22:	f042 0201 	orr.w	r2, r2, #1
 800ae26:	b2d2      	uxtb	r2, r2
 800ae28:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ae2a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3748      	adds	r7, #72	@ 0x48
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	460b      	mov	r3, r1
 800ae40:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ae42:	78fb      	ldrb	r3, [r7, #3]
 800ae44:	2b0a      	cmp	r3, #10
 800ae46:	d103      	bne.n	800ae50 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ae48:	210d      	movs	r1, #13
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7ff fff3 	bl	800ae36 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	db25      	blt.n	800aea8 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	1c5a      	adds	r2, r3, #1
 800ae60:	60fa      	str	r2, [r7, #12]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	4413      	add	r3, r2
 800ae66:	78fa      	ldrb	r2, [r7, #3]
 800ae68:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b3c      	cmp	r3, #60	@ 0x3c
 800ae6e:	dd12      	ble.n	800ae96 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6818      	ldr	r0, [r3, #0]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f103 010c 	add.w	r1, r3, #12
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	f107 0308 	add.w	r3, r7, #8
 800ae80:	f7ff fce8 	bl	800a854 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d101      	bne.n	800ae90 <putc_bfd+0x5a>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	e001      	b.n	800ae94 <putc_bfd+0x5e>
 800ae90:	f04f 33ff 	mov.w	r3, #4294967295
 800ae94:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	1c5a      	adds	r2, r3, #1
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	609a      	str	r2, [r3, #8]
 800aea6:	e000      	b.n	800aeaa <putc_bfd+0x74>
	if (i < 0) return;
 800aea8:	bf00      	nop
}
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	db16      	blt.n	800aeee <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6818      	ldr	r0, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f103 010c 	add.w	r1, r3, #12
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	461a      	mov	r2, r3
 800aed0:	f107 030c 	add.w	r3, r7, #12
 800aed4:	f7ff fcbe 	bl	800a854 <f_write>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d107      	bne.n	800aeee <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d102      	bne.n	800aeee <putc_flush+0x3e>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	e001      	b.n	800aef2 <putc_flush+0x42>
	return EOF;
 800aeee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b083      	sub	sp, #12
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	683a      	ldr	r2, [r7, #0]
 800af08:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	605a      	str	r2, [r3, #4]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685a      	ldr	r2, [r3, #4]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	609a      	str	r2, [r3, #8]
}
 800af18:	bf00      	nop
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b096      	sub	sp, #88	@ 0x58
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800af2e:	f107 030c 	add.w	r3, r7, #12
 800af32:	6839      	ldr	r1, [r7, #0]
 800af34:	4618      	mov	r0, r3
 800af36:	f7ff ffe0 	bl	800aefa <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800af3a:	e009      	b.n	800af50 <f_puts+0x2c>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	1c5a      	adds	r2, r3, #1
 800af40:	607a      	str	r2, [r7, #4]
 800af42:	781a      	ldrb	r2, [r3, #0]
 800af44:	f107 030c 	add.w	r3, r7, #12
 800af48:	4611      	mov	r1, r2
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7ff ff73 	bl	800ae36 <putc_bfd>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d1f1      	bne.n	800af3c <f_puts+0x18>
	return putc_flush(&pb);
 800af58:	f107 030c 	add.w	r3, r7, #12
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7ff ffa7 	bl	800aeb0 <putc_flush>
 800af62:	4603      	mov	r3, r0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3758      	adds	r7, #88	@ 0x58
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b087      	sub	sp, #28
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	4613      	mov	r3, r2
 800af78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800af7a:	2301      	movs	r3, #1
 800af7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800af82:	4b1f      	ldr	r3, [pc, #124]	@ (800b000 <FATFS_LinkDriverEx+0x94>)
 800af84:	7a5b      	ldrb	r3, [r3, #9]
 800af86:	b2db      	uxtb	r3, r3
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d131      	bne.n	800aff0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800af8c:	4b1c      	ldr	r3, [pc, #112]	@ (800b000 <FATFS_LinkDriverEx+0x94>)
 800af8e:	7a5b      	ldrb	r3, [r3, #9]
 800af90:	b2db      	uxtb	r3, r3
 800af92:	461a      	mov	r2, r3
 800af94:	4b1a      	ldr	r3, [pc, #104]	@ (800b000 <FATFS_LinkDriverEx+0x94>)
 800af96:	2100      	movs	r1, #0
 800af98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800af9a:	4b19      	ldr	r3, [pc, #100]	@ (800b000 <FATFS_LinkDriverEx+0x94>)
 800af9c:	7a5b      	ldrb	r3, [r3, #9]
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	4a17      	ldr	r2, [pc, #92]	@ (800b000 <FATFS_LinkDriverEx+0x94>)
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	4413      	add	r3, r2
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800afaa:	4b15      	ldr	r3, [pc, #84]	@ (800b000 <FATFS_LinkDriverEx+0x94>)
 800afac:	7a5b      	ldrb	r3, [r3, #9]
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	461a      	mov	r2, r3
 800afb2:	4b13      	ldr	r3, [pc, #76]	@ (800b000 <FATFS_LinkDriverEx+0x94>)
 800afb4:	4413      	add	r3, r2
 800afb6:	79fa      	ldrb	r2, [r7, #7]
 800afb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800afba:	4b11      	ldr	r3, [pc, #68]	@ (800b000 <FATFS_LinkDriverEx+0x94>)
 800afbc:	7a5b      	ldrb	r3, [r3, #9]
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	1c5a      	adds	r2, r3, #1
 800afc2:	b2d1      	uxtb	r1, r2
 800afc4:	4a0e      	ldr	r2, [pc, #56]	@ (800b000 <FATFS_LinkDriverEx+0x94>)
 800afc6:	7251      	strb	r1, [r2, #9]
 800afc8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800afca:	7dbb      	ldrb	r3, [r7, #22]
 800afcc:	3330      	adds	r3, #48	@ 0x30
 800afce:	b2da      	uxtb	r2, r3
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	3301      	adds	r3, #1
 800afd8:	223a      	movs	r2, #58	@ 0x3a
 800afda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	3302      	adds	r3, #2
 800afe0:	222f      	movs	r2, #47	@ 0x2f
 800afe2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	3303      	adds	r3, #3
 800afe8:	2200      	movs	r2, #0
 800afea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aff0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	371c      	adds	r7, #28
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	20002d38 	.word	0x20002d38

0800b004 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b00e:	2200      	movs	r2, #0
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f7ff ffaa 	bl	800af6c <FATFS_LinkDriverEx>
 800b018:	4603      	mov	r3, r0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3708      	adds	r7, #8
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
	...

0800b024 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	4603      	mov	r3, r0
 800b02c:	6039      	str	r1, [r7, #0]
 800b02e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b030:	88fb      	ldrh	r3, [r7, #6]
 800b032:	2b7f      	cmp	r3, #127	@ 0x7f
 800b034:	d802      	bhi.n	800b03c <ff_convert+0x18>
		c = chr;
 800b036:	88fb      	ldrh	r3, [r7, #6]
 800b038:	81fb      	strh	r3, [r7, #14]
 800b03a:	e025      	b.n	800b088 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00b      	beq.n	800b05a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b042:	88fb      	ldrh	r3, [r7, #6]
 800b044:	2bff      	cmp	r3, #255	@ 0xff
 800b046:	d805      	bhi.n	800b054 <ff_convert+0x30>
 800b048:	88fb      	ldrh	r3, [r7, #6]
 800b04a:	3b80      	subs	r3, #128	@ 0x80
 800b04c:	4a12      	ldr	r2, [pc, #72]	@ (800b098 <ff_convert+0x74>)
 800b04e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b052:	e000      	b.n	800b056 <ff_convert+0x32>
 800b054:	2300      	movs	r3, #0
 800b056:	81fb      	strh	r3, [r7, #14]
 800b058:	e016      	b.n	800b088 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b05a:	2300      	movs	r3, #0
 800b05c:	81fb      	strh	r3, [r7, #14]
 800b05e:	e009      	b.n	800b074 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b060:	89fb      	ldrh	r3, [r7, #14]
 800b062:	4a0d      	ldr	r2, [pc, #52]	@ (800b098 <ff_convert+0x74>)
 800b064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b068:	88fa      	ldrh	r2, [r7, #6]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d006      	beq.n	800b07c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b06e:	89fb      	ldrh	r3, [r7, #14]
 800b070:	3301      	adds	r3, #1
 800b072:	81fb      	strh	r3, [r7, #14]
 800b074:	89fb      	ldrh	r3, [r7, #14]
 800b076:	2b7f      	cmp	r3, #127	@ 0x7f
 800b078:	d9f2      	bls.n	800b060 <ff_convert+0x3c>
 800b07a:	e000      	b.n	800b07e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b07c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b07e:	89fb      	ldrh	r3, [r7, #14]
 800b080:	3380      	adds	r3, #128	@ 0x80
 800b082:	b29b      	uxth	r3, r3
 800b084:	b2db      	uxtb	r3, r3
 800b086:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b088:	89fb      	ldrh	r3, [r7, #14]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	0800f85c 	.word	0x0800f85c

0800b09c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b0a6:	88fb      	ldrh	r3, [r7, #6]
 800b0a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0ac:	d201      	bcs.n	800b0b2 <ff_wtoupper+0x16>
 800b0ae:	4b3e      	ldr	r3, [pc, #248]	@ (800b1a8 <ff_wtoupper+0x10c>)
 800b0b0:	e000      	b.n	800b0b4 <ff_wtoupper+0x18>
 800b0b2:	4b3e      	ldr	r3, [pc, #248]	@ (800b1ac <ff_wtoupper+0x110>)
 800b0b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	1c9a      	adds	r2, r3, #2
 800b0ba:	617a      	str	r2, [r7, #20]
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b0c0:	8a7b      	ldrh	r3, [r7, #18]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d068      	beq.n	800b198 <ff_wtoupper+0xfc>
 800b0c6:	88fa      	ldrh	r2, [r7, #6]
 800b0c8:	8a7b      	ldrh	r3, [r7, #18]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d364      	bcc.n	800b198 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	1c9a      	adds	r2, r3, #2
 800b0d2:	617a      	str	r2, [r7, #20]
 800b0d4:	881b      	ldrh	r3, [r3, #0]
 800b0d6:	823b      	strh	r3, [r7, #16]
 800b0d8:	8a3b      	ldrh	r3, [r7, #16]
 800b0da:	0a1b      	lsrs	r3, r3, #8
 800b0dc:	81fb      	strh	r3, [r7, #14]
 800b0de:	8a3b      	ldrh	r3, [r7, #16]
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b0e4:	88fa      	ldrh	r2, [r7, #6]
 800b0e6:	8a79      	ldrh	r1, [r7, #18]
 800b0e8:	8a3b      	ldrh	r3, [r7, #16]
 800b0ea:	440b      	add	r3, r1
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	da49      	bge.n	800b184 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b0f0:	89fb      	ldrh	r3, [r7, #14]
 800b0f2:	2b08      	cmp	r3, #8
 800b0f4:	d84f      	bhi.n	800b196 <ff_wtoupper+0xfa>
 800b0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0fc <ff_wtoupper+0x60>)
 800b0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fc:	0800b121 	.word	0x0800b121
 800b100:	0800b133 	.word	0x0800b133
 800b104:	0800b149 	.word	0x0800b149
 800b108:	0800b151 	.word	0x0800b151
 800b10c:	0800b159 	.word	0x0800b159
 800b110:	0800b161 	.word	0x0800b161
 800b114:	0800b169 	.word	0x0800b169
 800b118:	0800b171 	.word	0x0800b171
 800b11c:	0800b179 	.word	0x0800b179
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b120:	88fa      	ldrh	r2, [r7, #6]
 800b122:	8a7b      	ldrh	r3, [r7, #18]
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	005b      	lsls	r3, r3, #1
 800b128:	697a      	ldr	r2, [r7, #20]
 800b12a:	4413      	add	r3, r2
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	80fb      	strh	r3, [r7, #6]
 800b130:	e027      	b.n	800b182 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b132:	88fa      	ldrh	r2, [r7, #6]
 800b134:	8a7b      	ldrh	r3, [r7, #18]
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	b29b      	uxth	r3, r3
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	b29b      	uxth	r3, r3
 800b140:	88fa      	ldrh	r2, [r7, #6]
 800b142:	1ad3      	subs	r3, r2, r3
 800b144:	80fb      	strh	r3, [r7, #6]
 800b146:	e01c      	b.n	800b182 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b148:	88fb      	ldrh	r3, [r7, #6]
 800b14a:	3b10      	subs	r3, #16
 800b14c:	80fb      	strh	r3, [r7, #6]
 800b14e:	e018      	b.n	800b182 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b150:	88fb      	ldrh	r3, [r7, #6]
 800b152:	3b20      	subs	r3, #32
 800b154:	80fb      	strh	r3, [r7, #6]
 800b156:	e014      	b.n	800b182 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b158:	88fb      	ldrh	r3, [r7, #6]
 800b15a:	3b30      	subs	r3, #48	@ 0x30
 800b15c:	80fb      	strh	r3, [r7, #6]
 800b15e:	e010      	b.n	800b182 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b160:	88fb      	ldrh	r3, [r7, #6]
 800b162:	3b1a      	subs	r3, #26
 800b164:	80fb      	strh	r3, [r7, #6]
 800b166:	e00c      	b.n	800b182 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b168:	88fb      	ldrh	r3, [r7, #6]
 800b16a:	3308      	adds	r3, #8
 800b16c:	80fb      	strh	r3, [r7, #6]
 800b16e:	e008      	b.n	800b182 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b170:	88fb      	ldrh	r3, [r7, #6]
 800b172:	3b50      	subs	r3, #80	@ 0x50
 800b174:	80fb      	strh	r3, [r7, #6]
 800b176:	e004      	b.n	800b182 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b178:	88fb      	ldrh	r3, [r7, #6]
 800b17a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800b17e:	80fb      	strh	r3, [r7, #6]
 800b180:	bf00      	nop
			}
			break;
 800b182:	e008      	b.n	800b196 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b184:	89fb      	ldrh	r3, [r7, #14]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d195      	bne.n	800b0b6 <ff_wtoupper+0x1a>
 800b18a:	8a3b      	ldrh	r3, [r7, #16]
 800b18c:	005b      	lsls	r3, r3, #1
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	4413      	add	r3, r2
 800b192:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b194:	e78f      	b.n	800b0b6 <ff_wtoupper+0x1a>
			break;
 800b196:	bf00      	nop
	}

	return chr;
 800b198:	88fb      	ldrh	r3, [r7, #6]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	371c      	adds	r7, #28
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	0800f95c 	.word	0x0800f95c
 800b1ac:	0800fb50 	.word	0x0800fb50

0800b1b0 <__cvt>:
 800b1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1b2:	ed2d 8b02 	vpush	{d8}
 800b1b6:	eeb0 8b40 	vmov.f64	d8, d0
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	4617      	mov	r7, r2
 800b1be:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b1c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b1c2:	ee18 2a90 	vmov	r2, s17
 800b1c6:	f025 0520 	bic.w	r5, r5, #32
 800b1ca:	2a00      	cmp	r2, #0
 800b1cc:	bfb6      	itet	lt
 800b1ce:	222d      	movlt	r2, #45	@ 0x2d
 800b1d0:	2200      	movge	r2, #0
 800b1d2:	eeb1 8b40 	vneglt.f64	d8, d0
 800b1d6:	2d46      	cmp	r5, #70	@ 0x46
 800b1d8:	460c      	mov	r4, r1
 800b1da:	701a      	strb	r2, [r3, #0]
 800b1dc:	d004      	beq.n	800b1e8 <__cvt+0x38>
 800b1de:	2d45      	cmp	r5, #69	@ 0x45
 800b1e0:	d100      	bne.n	800b1e4 <__cvt+0x34>
 800b1e2:	3401      	adds	r4, #1
 800b1e4:	2102      	movs	r1, #2
 800b1e6:	e000      	b.n	800b1ea <__cvt+0x3a>
 800b1e8:	2103      	movs	r1, #3
 800b1ea:	ab03      	add	r3, sp, #12
 800b1ec:	9301      	str	r3, [sp, #4]
 800b1ee:	ab02      	add	r3, sp, #8
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	4622      	mov	r2, r4
 800b1f4:	4633      	mov	r3, r6
 800b1f6:	eeb0 0b48 	vmov.f64	d0, d8
 800b1fa:	f001 f865 	bl	800c2c8 <_dtoa_r>
 800b1fe:	2d47      	cmp	r5, #71	@ 0x47
 800b200:	d114      	bne.n	800b22c <__cvt+0x7c>
 800b202:	07fb      	lsls	r3, r7, #31
 800b204:	d50a      	bpl.n	800b21c <__cvt+0x6c>
 800b206:	1902      	adds	r2, r0, r4
 800b208:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b210:	bf08      	it	eq
 800b212:	9203      	streq	r2, [sp, #12]
 800b214:	2130      	movs	r1, #48	@ 0x30
 800b216:	9b03      	ldr	r3, [sp, #12]
 800b218:	4293      	cmp	r3, r2
 800b21a:	d319      	bcc.n	800b250 <__cvt+0xa0>
 800b21c:	9b03      	ldr	r3, [sp, #12]
 800b21e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b220:	1a1b      	subs	r3, r3, r0
 800b222:	6013      	str	r3, [r2, #0]
 800b224:	b005      	add	sp, #20
 800b226:	ecbd 8b02 	vpop	{d8}
 800b22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b22c:	2d46      	cmp	r5, #70	@ 0x46
 800b22e:	eb00 0204 	add.w	r2, r0, r4
 800b232:	d1e9      	bne.n	800b208 <__cvt+0x58>
 800b234:	7803      	ldrb	r3, [r0, #0]
 800b236:	2b30      	cmp	r3, #48	@ 0x30
 800b238:	d107      	bne.n	800b24a <__cvt+0x9a>
 800b23a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b242:	bf1c      	itt	ne
 800b244:	f1c4 0401 	rsbne	r4, r4, #1
 800b248:	6034      	strne	r4, [r6, #0]
 800b24a:	6833      	ldr	r3, [r6, #0]
 800b24c:	441a      	add	r2, r3
 800b24e:	e7db      	b.n	800b208 <__cvt+0x58>
 800b250:	1c5c      	adds	r4, r3, #1
 800b252:	9403      	str	r4, [sp, #12]
 800b254:	7019      	strb	r1, [r3, #0]
 800b256:	e7de      	b.n	800b216 <__cvt+0x66>

0800b258 <__exponent>:
 800b258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b25a:	2900      	cmp	r1, #0
 800b25c:	bfba      	itte	lt
 800b25e:	4249      	neglt	r1, r1
 800b260:	232d      	movlt	r3, #45	@ 0x2d
 800b262:	232b      	movge	r3, #43	@ 0x2b
 800b264:	2909      	cmp	r1, #9
 800b266:	7002      	strb	r2, [r0, #0]
 800b268:	7043      	strb	r3, [r0, #1]
 800b26a:	dd29      	ble.n	800b2c0 <__exponent+0x68>
 800b26c:	f10d 0307 	add.w	r3, sp, #7
 800b270:	461d      	mov	r5, r3
 800b272:	270a      	movs	r7, #10
 800b274:	461a      	mov	r2, r3
 800b276:	fbb1 f6f7 	udiv	r6, r1, r7
 800b27a:	fb07 1416 	mls	r4, r7, r6, r1
 800b27e:	3430      	adds	r4, #48	@ 0x30
 800b280:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b284:	460c      	mov	r4, r1
 800b286:	2c63      	cmp	r4, #99	@ 0x63
 800b288:	f103 33ff 	add.w	r3, r3, #4294967295
 800b28c:	4631      	mov	r1, r6
 800b28e:	dcf1      	bgt.n	800b274 <__exponent+0x1c>
 800b290:	3130      	adds	r1, #48	@ 0x30
 800b292:	1e94      	subs	r4, r2, #2
 800b294:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b298:	1c41      	adds	r1, r0, #1
 800b29a:	4623      	mov	r3, r4
 800b29c:	42ab      	cmp	r3, r5
 800b29e:	d30a      	bcc.n	800b2b6 <__exponent+0x5e>
 800b2a0:	f10d 0309 	add.w	r3, sp, #9
 800b2a4:	1a9b      	subs	r3, r3, r2
 800b2a6:	42ac      	cmp	r4, r5
 800b2a8:	bf88      	it	hi
 800b2aa:	2300      	movhi	r3, #0
 800b2ac:	3302      	adds	r3, #2
 800b2ae:	4403      	add	r3, r0
 800b2b0:	1a18      	subs	r0, r3, r0
 800b2b2:	b003      	add	sp, #12
 800b2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b2ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b2be:	e7ed      	b.n	800b29c <__exponent+0x44>
 800b2c0:	2330      	movs	r3, #48	@ 0x30
 800b2c2:	3130      	adds	r1, #48	@ 0x30
 800b2c4:	7083      	strb	r3, [r0, #2]
 800b2c6:	70c1      	strb	r1, [r0, #3]
 800b2c8:	1d03      	adds	r3, r0, #4
 800b2ca:	e7f1      	b.n	800b2b0 <__exponent+0x58>
 800b2cc:	0000      	movs	r0, r0
	...

0800b2d0 <_printf_float>:
 800b2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d4:	b08d      	sub	sp, #52	@ 0x34
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b2dc:	4616      	mov	r6, r2
 800b2de:	461f      	mov	r7, r3
 800b2e0:	4605      	mov	r5, r0
 800b2e2:	f000 fee9 	bl	800c0b8 <_localeconv_r>
 800b2e6:	f8d0 b000 	ldr.w	fp, [r0]
 800b2ea:	4658      	mov	r0, fp
 800b2ec:	f7f4 fff8 	bl	80002e0 <strlen>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b2f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b2fc:	6822      	ldr	r2, [r4, #0]
 800b2fe:	9005      	str	r0, [sp, #20]
 800b300:	3307      	adds	r3, #7
 800b302:	f023 0307 	bic.w	r3, r3, #7
 800b306:	f103 0108 	add.w	r1, r3, #8
 800b30a:	f8c8 1000 	str.w	r1, [r8]
 800b30e:	ed93 0b00 	vldr	d0, [r3]
 800b312:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b570 <_printf_float+0x2a0>
 800b316:	eeb0 7bc0 	vabs.f64	d7, d0
 800b31a:	eeb4 7b46 	vcmp.f64	d7, d6
 800b31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b322:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800b326:	dd24      	ble.n	800b372 <_printf_float+0xa2>
 800b328:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b330:	d502      	bpl.n	800b338 <_printf_float+0x68>
 800b332:	232d      	movs	r3, #45	@ 0x2d
 800b334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b338:	498f      	ldr	r1, [pc, #572]	@ (800b578 <_printf_float+0x2a8>)
 800b33a:	4b90      	ldr	r3, [pc, #576]	@ (800b57c <_printf_float+0x2ac>)
 800b33c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800b340:	bf94      	ite	ls
 800b342:	4688      	movls	r8, r1
 800b344:	4698      	movhi	r8, r3
 800b346:	f022 0204 	bic.w	r2, r2, #4
 800b34a:	2303      	movs	r3, #3
 800b34c:	6123      	str	r3, [r4, #16]
 800b34e:	6022      	str	r2, [r4, #0]
 800b350:	f04f 0a00 	mov.w	sl, #0
 800b354:	9700      	str	r7, [sp, #0]
 800b356:	4633      	mov	r3, r6
 800b358:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b35a:	4621      	mov	r1, r4
 800b35c:	4628      	mov	r0, r5
 800b35e:	f000 f9d1 	bl	800b704 <_printf_common>
 800b362:	3001      	adds	r0, #1
 800b364:	f040 8089 	bne.w	800b47a <_printf_float+0x1aa>
 800b368:	f04f 30ff 	mov.w	r0, #4294967295
 800b36c:	b00d      	add	sp, #52	@ 0x34
 800b36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b372:	eeb4 0b40 	vcmp.f64	d0, d0
 800b376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b37a:	d709      	bvc.n	800b390 <_printf_float+0xc0>
 800b37c:	ee10 3a90 	vmov	r3, s1
 800b380:	2b00      	cmp	r3, #0
 800b382:	bfbc      	itt	lt
 800b384:	232d      	movlt	r3, #45	@ 0x2d
 800b386:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b38a:	497d      	ldr	r1, [pc, #500]	@ (800b580 <_printf_float+0x2b0>)
 800b38c:	4b7d      	ldr	r3, [pc, #500]	@ (800b584 <_printf_float+0x2b4>)
 800b38e:	e7d5      	b.n	800b33c <_printf_float+0x6c>
 800b390:	6863      	ldr	r3, [r4, #4]
 800b392:	1c59      	adds	r1, r3, #1
 800b394:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800b398:	d139      	bne.n	800b40e <_printf_float+0x13e>
 800b39a:	2306      	movs	r3, #6
 800b39c:	6063      	str	r3, [r4, #4]
 800b39e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	6022      	str	r2, [r4, #0]
 800b3a6:	9303      	str	r3, [sp, #12]
 800b3a8:	ab0a      	add	r3, sp, #40	@ 0x28
 800b3aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b3ae:	ab09      	add	r3, sp, #36	@ 0x24
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	6861      	ldr	r1, [r4, #4]
 800b3b4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	f7ff fef9 	bl	800b1b0 <__cvt>
 800b3be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b3c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b3c4:	4680      	mov	r8, r0
 800b3c6:	d129      	bne.n	800b41c <_printf_float+0x14c>
 800b3c8:	1cc8      	adds	r0, r1, #3
 800b3ca:	db02      	blt.n	800b3d2 <_printf_float+0x102>
 800b3cc:	6863      	ldr	r3, [r4, #4]
 800b3ce:	4299      	cmp	r1, r3
 800b3d0:	dd41      	ble.n	800b456 <_printf_float+0x186>
 800b3d2:	f1a9 0902 	sub.w	r9, r9, #2
 800b3d6:	fa5f f989 	uxtb.w	r9, r9
 800b3da:	3901      	subs	r1, #1
 800b3dc:	464a      	mov	r2, r9
 800b3de:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b3e2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b3e4:	f7ff ff38 	bl	800b258 <__exponent>
 800b3e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3ea:	1813      	adds	r3, r2, r0
 800b3ec:	2a01      	cmp	r2, #1
 800b3ee:	4682      	mov	sl, r0
 800b3f0:	6123      	str	r3, [r4, #16]
 800b3f2:	dc02      	bgt.n	800b3fa <_printf_float+0x12a>
 800b3f4:	6822      	ldr	r2, [r4, #0]
 800b3f6:	07d2      	lsls	r2, r2, #31
 800b3f8:	d501      	bpl.n	800b3fe <_printf_float+0x12e>
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	6123      	str	r3, [r4, #16]
 800b3fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b402:	2b00      	cmp	r3, #0
 800b404:	d0a6      	beq.n	800b354 <_printf_float+0x84>
 800b406:	232d      	movs	r3, #45	@ 0x2d
 800b408:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b40c:	e7a2      	b.n	800b354 <_printf_float+0x84>
 800b40e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b412:	d1c4      	bne.n	800b39e <_printf_float+0xce>
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1c2      	bne.n	800b39e <_printf_float+0xce>
 800b418:	2301      	movs	r3, #1
 800b41a:	e7bf      	b.n	800b39c <_printf_float+0xcc>
 800b41c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b420:	d9db      	bls.n	800b3da <_printf_float+0x10a>
 800b422:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800b426:	d118      	bne.n	800b45a <_printf_float+0x18a>
 800b428:	2900      	cmp	r1, #0
 800b42a:	6863      	ldr	r3, [r4, #4]
 800b42c:	dd0b      	ble.n	800b446 <_printf_float+0x176>
 800b42e:	6121      	str	r1, [r4, #16]
 800b430:	b913      	cbnz	r3, 800b438 <_printf_float+0x168>
 800b432:	6822      	ldr	r2, [r4, #0]
 800b434:	07d0      	lsls	r0, r2, #31
 800b436:	d502      	bpl.n	800b43e <_printf_float+0x16e>
 800b438:	3301      	adds	r3, #1
 800b43a:	440b      	add	r3, r1
 800b43c:	6123      	str	r3, [r4, #16]
 800b43e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b440:	f04f 0a00 	mov.w	sl, #0
 800b444:	e7db      	b.n	800b3fe <_printf_float+0x12e>
 800b446:	b913      	cbnz	r3, 800b44e <_printf_float+0x17e>
 800b448:	6822      	ldr	r2, [r4, #0]
 800b44a:	07d2      	lsls	r2, r2, #31
 800b44c:	d501      	bpl.n	800b452 <_printf_float+0x182>
 800b44e:	3302      	adds	r3, #2
 800b450:	e7f4      	b.n	800b43c <_printf_float+0x16c>
 800b452:	2301      	movs	r3, #1
 800b454:	e7f2      	b.n	800b43c <_printf_float+0x16c>
 800b456:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800b45a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b45c:	4299      	cmp	r1, r3
 800b45e:	db05      	blt.n	800b46c <_printf_float+0x19c>
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	6121      	str	r1, [r4, #16]
 800b464:	07d8      	lsls	r0, r3, #31
 800b466:	d5ea      	bpl.n	800b43e <_printf_float+0x16e>
 800b468:	1c4b      	adds	r3, r1, #1
 800b46a:	e7e7      	b.n	800b43c <_printf_float+0x16c>
 800b46c:	2900      	cmp	r1, #0
 800b46e:	bfd4      	ite	le
 800b470:	f1c1 0202 	rsble	r2, r1, #2
 800b474:	2201      	movgt	r2, #1
 800b476:	4413      	add	r3, r2
 800b478:	e7e0      	b.n	800b43c <_printf_float+0x16c>
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	055a      	lsls	r2, r3, #21
 800b47e:	d407      	bmi.n	800b490 <_printf_float+0x1c0>
 800b480:	6923      	ldr	r3, [r4, #16]
 800b482:	4642      	mov	r2, r8
 800b484:	4631      	mov	r1, r6
 800b486:	4628      	mov	r0, r5
 800b488:	47b8      	blx	r7
 800b48a:	3001      	adds	r0, #1
 800b48c:	d12a      	bne.n	800b4e4 <_printf_float+0x214>
 800b48e:	e76b      	b.n	800b368 <_printf_float+0x98>
 800b490:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b494:	f240 80e0 	bls.w	800b658 <_printf_float+0x388>
 800b498:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b49c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4a4:	d133      	bne.n	800b50e <_printf_float+0x23e>
 800b4a6:	4a38      	ldr	r2, [pc, #224]	@ (800b588 <_printf_float+0x2b8>)
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	4631      	mov	r1, r6
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	47b8      	blx	r7
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	f43f af59 	beq.w	800b368 <_printf_float+0x98>
 800b4b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b4ba:	4543      	cmp	r3, r8
 800b4bc:	db02      	blt.n	800b4c4 <_printf_float+0x1f4>
 800b4be:	6823      	ldr	r3, [r4, #0]
 800b4c0:	07d8      	lsls	r0, r3, #31
 800b4c2:	d50f      	bpl.n	800b4e4 <_printf_float+0x214>
 800b4c4:	9b05      	ldr	r3, [sp, #20]
 800b4c6:	465a      	mov	r2, fp
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	47b8      	blx	r7
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	f43f af4a 	beq.w	800b368 <_printf_float+0x98>
 800b4d4:	f04f 0900 	mov.w	r9, #0
 800b4d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4dc:	f104 0a1a 	add.w	sl, r4, #26
 800b4e0:	45c8      	cmp	r8, r9
 800b4e2:	dc09      	bgt.n	800b4f8 <_printf_float+0x228>
 800b4e4:	6823      	ldr	r3, [r4, #0]
 800b4e6:	079b      	lsls	r3, r3, #30
 800b4e8:	f100 8107 	bmi.w	800b6fa <_printf_float+0x42a>
 800b4ec:	68e0      	ldr	r0, [r4, #12]
 800b4ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4f0:	4298      	cmp	r0, r3
 800b4f2:	bfb8      	it	lt
 800b4f4:	4618      	movlt	r0, r3
 800b4f6:	e739      	b.n	800b36c <_printf_float+0x9c>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	4652      	mov	r2, sl
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	4628      	mov	r0, r5
 800b500:	47b8      	blx	r7
 800b502:	3001      	adds	r0, #1
 800b504:	f43f af30 	beq.w	800b368 <_printf_float+0x98>
 800b508:	f109 0901 	add.w	r9, r9, #1
 800b50c:	e7e8      	b.n	800b4e0 <_printf_float+0x210>
 800b50e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b510:	2b00      	cmp	r3, #0
 800b512:	dc3b      	bgt.n	800b58c <_printf_float+0x2bc>
 800b514:	4a1c      	ldr	r2, [pc, #112]	@ (800b588 <_printf_float+0x2b8>)
 800b516:	2301      	movs	r3, #1
 800b518:	4631      	mov	r1, r6
 800b51a:	4628      	mov	r0, r5
 800b51c:	47b8      	blx	r7
 800b51e:	3001      	adds	r0, #1
 800b520:	f43f af22 	beq.w	800b368 <_printf_float+0x98>
 800b524:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b528:	ea59 0303 	orrs.w	r3, r9, r3
 800b52c:	d102      	bne.n	800b534 <_printf_float+0x264>
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	07d9      	lsls	r1, r3, #31
 800b532:	d5d7      	bpl.n	800b4e4 <_printf_float+0x214>
 800b534:	9b05      	ldr	r3, [sp, #20]
 800b536:	465a      	mov	r2, fp
 800b538:	4631      	mov	r1, r6
 800b53a:	4628      	mov	r0, r5
 800b53c:	47b8      	blx	r7
 800b53e:	3001      	adds	r0, #1
 800b540:	f43f af12 	beq.w	800b368 <_printf_float+0x98>
 800b544:	f04f 0a00 	mov.w	sl, #0
 800b548:	f104 0b1a 	add.w	fp, r4, #26
 800b54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b54e:	425b      	negs	r3, r3
 800b550:	4553      	cmp	r3, sl
 800b552:	dc01      	bgt.n	800b558 <_printf_float+0x288>
 800b554:	464b      	mov	r3, r9
 800b556:	e794      	b.n	800b482 <_printf_float+0x1b2>
 800b558:	2301      	movs	r3, #1
 800b55a:	465a      	mov	r2, fp
 800b55c:	4631      	mov	r1, r6
 800b55e:	4628      	mov	r0, r5
 800b560:	47b8      	blx	r7
 800b562:	3001      	adds	r0, #1
 800b564:	f43f af00 	beq.w	800b368 <_printf_float+0x98>
 800b568:	f10a 0a01 	add.w	sl, sl, #1
 800b56c:	e7ee      	b.n	800b54c <_printf_float+0x27c>
 800b56e:	bf00      	nop
 800b570:	ffffffff 	.word	0xffffffff
 800b574:	7fefffff 	.word	0x7fefffff
 800b578:	0800fc0c 	.word	0x0800fc0c
 800b57c:	0800fc10 	.word	0x0800fc10
 800b580:	0800fc14 	.word	0x0800fc14
 800b584:	0800fc18 	.word	0x0800fc18
 800b588:	0800fc1c 	.word	0x0800fc1c
 800b58c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b58e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b592:	4553      	cmp	r3, sl
 800b594:	bfa8      	it	ge
 800b596:	4653      	movge	r3, sl
 800b598:	2b00      	cmp	r3, #0
 800b59a:	4699      	mov	r9, r3
 800b59c:	dc37      	bgt.n	800b60e <_printf_float+0x33e>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	9307      	str	r3, [sp, #28]
 800b5a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5a6:	f104 021a 	add.w	r2, r4, #26
 800b5aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b5ac:	9907      	ldr	r1, [sp, #28]
 800b5ae:	9306      	str	r3, [sp, #24]
 800b5b0:	eba3 0309 	sub.w	r3, r3, r9
 800b5b4:	428b      	cmp	r3, r1
 800b5b6:	dc31      	bgt.n	800b61c <_printf_float+0x34c>
 800b5b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ba:	459a      	cmp	sl, r3
 800b5bc:	dc3b      	bgt.n	800b636 <_printf_float+0x366>
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	07da      	lsls	r2, r3, #31
 800b5c2:	d438      	bmi.n	800b636 <_printf_float+0x366>
 800b5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5c6:	ebaa 0903 	sub.w	r9, sl, r3
 800b5ca:	9b06      	ldr	r3, [sp, #24]
 800b5cc:	ebaa 0303 	sub.w	r3, sl, r3
 800b5d0:	4599      	cmp	r9, r3
 800b5d2:	bfa8      	it	ge
 800b5d4:	4699      	movge	r9, r3
 800b5d6:	f1b9 0f00 	cmp.w	r9, #0
 800b5da:	dc34      	bgt.n	800b646 <_printf_float+0x376>
 800b5dc:	f04f 0800 	mov.w	r8, #0
 800b5e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5e4:	f104 0b1a 	add.w	fp, r4, #26
 800b5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ea:	ebaa 0303 	sub.w	r3, sl, r3
 800b5ee:	eba3 0309 	sub.w	r3, r3, r9
 800b5f2:	4543      	cmp	r3, r8
 800b5f4:	f77f af76 	ble.w	800b4e4 <_printf_float+0x214>
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	465a      	mov	r2, fp
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	4628      	mov	r0, r5
 800b600:	47b8      	blx	r7
 800b602:	3001      	adds	r0, #1
 800b604:	f43f aeb0 	beq.w	800b368 <_printf_float+0x98>
 800b608:	f108 0801 	add.w	r8, r8, #1
 800b60c:	e7ec      	b.n	800b5e8 <_printf_float+0x318>
 800b60e:	4642      	mov	r2, r8
 800b610:	4631      	mov	r1, r6
 800b612:	4628      	mov	r0, r5
 800b614:	47b8      	blx	r7
 800b616:	3001      	adds	r0, #1
 800b618:	d1c1      	bne.n	800b59e <_printf_float+0x2ce>
 800b61a:	e6a5      	b.n	800b368 <_printf_float+0x98>
 800b61c:	2301      	movs	r3, #1
 800b61e:	4631      	mov	r1, r6
 800b620:	4628      	mov	r0, r5
 800b622:	9206      	str	r2, [sp, #24]
 800b624:	47b8      	blx	r7
 800b626:	3001      	adds	r0, #1
 800b628:	f43f ae9e 	beq.w	800b368 <_printf_float+0x98>
 800b62c:	9b07      	ldr	r3, [sp, #28]
 800b62e:	9a06      	ldr	r2, [sp, #24]
 800b630:	3301      	adds	r3, #1
 800b632:	9307      	str	r3, [sp, #28]
 800b634:	e7b9      	b.n	800b5aa <_printf_float+0x2da>
 800b636:	9b05      	ldr	r3, [sp, #20]
 800b638:	465a      	mov	r2, fp
 800b63a:	4631      	mov	r1, r6
 800b63c:	4628      	mov	r0, r5
 800b63e:	47b8      	blx	r7
 800b640:	3001      	adds	r0, #1
 800b642:	d1bf      	bne.n	800b5c4 <_printf_float+0x2f4>
 800b644:	e690      	b.n	800b368 <_printf_float+0x98>
 800b646:	9a06      	ldr	r2, [sp, #24]
 800b648:	464b      	mov	r3, r9
 800b64a:	4442      	add	r2, r8
 800b64c:	4631      	mov	r1, r6
 800b64e:	4628      	mov	r0, r5
 800b650:	47b8      	blx	r7
 800b652:	3001      	adds	r0, #1
 800b654:	d1c2      	bne.n	800b5dc <_printf_float+0x30c>
 800b656:	e687      	b.n	800b368 <_printf_float+0x98>
 800b658:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b65c:	f1b9 0f01 	cmp.w	r9, #1
 800b660:	dc01      	bgt.n	800b666 <_printf_float+0x396>
 800b662:	07db      	lsls	r3, r3, #31
 800b664:	d536      	bpl.n	800b6d4 <_printf_float+0x404>
 800b666:	2301      	movs	r3, #1
 800b668:	4642      	mov	r2, r8
 800b66a:	4631      	mov	r1, r6
 800b66c:	4628      	mov	r0, r5
 800b66e:	47b8      	blx	r7
 800b670:	3001      	adds	r0, #1
 800b672:	f43f ae79 	beq.w	800b368 <_printf_float+0x98>
 800b676:	9b05      	ldr	r3, [sp, #20]
 800b678:	465a      	mov	r2, fp
 800b67a:	4631      	mov	r1, r6
 800b67c:	4628      	mov	r0, r5
 800b67e:	47b8      	blx	r7
 800b680:	3001      	adds	r0, #1
 800b682:	f43f ae71 	beq.w	800b368 <_printf_float+0x98>
 800b686:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b68a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b692:	f109 39ff 	add.w	r9, r9, #4294967295
 800b696:	d018      	beq.n	800b6ca <_printf_float+0x3fa>
 800b698:	464b      	mov	r3, r9
 800b69a:	f108 0201 	add.w	r2, r8, #1
 800b69e:	4631      	mov	r1, r6
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	47b8      	blx	r7
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	d10c      	bne.n	800b6c2 <_printf_float+0x3f2>
 800b6a8:	e65e      	b.n	800b368 <_printf_float+0x98>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	465a      	mov	r2, fp
 800b6ae:	4631      	mov	r1, r6
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	47b8      	blx	r7
 800b6b4:	3001      	adds	r0, #1
 800b6b6:	f43f ae57 	beq.w	800b368 <_printf_float+0x98>
 800b6ba:	f108 0801 	add.w	r8, r8, #1
 800b6be:	45c8      	cmp	r8, r9
 800b6c0:	dbf3      	blt.n	800b6aa <_printf_float+0x3da>
 800b6c2:	4653      	mov	r3, sl
 800b6c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b6c8:	e6dc      	b.n	800b484 <_printf_float+0x1b4>
 800b6ca:	f04f 0800 	mov.w	r8, #0
 800b6ce:	f104 0b1a 	add.w	fp, r4, #26
 800b6d2:	e7f4      	b.n	800b6be <_printf_float+0x3ee>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	4642      	mov	r2, r8
 800b6d8:	e7e1      	b.n	800b69e <_printf_float+0x3ce>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	464a      	mov	r2, r9
 800b6de:	4631      	mov	r1, r6
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	47b8      	blx	r7
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	f43f ae3f 	beq.w	800b368 <_printf_float+0x98>
 800b6ea:	f108 0801 	add.w	r8, r8, #1
 800b6ee:	68e3      	ldr	r3, [r4, #12]
 800b6f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6f2:	1a5b      	subs	r3, r3, r1
 800b6f4:	4543      	cmp	r3, r8
 800b6f6:	dcf0      	bgt.n	800b6da <_printf_float+0x40a>
 800b6f8:	e6f8      	b.n	800b4ec <_printf_float+0x21c>
 800b6fa:	f04f 0800 	mov.w	r8, #0
 800b6fe:	f104 0919 	add.w	r9, r4, #25
 800b702:	e7f4      	b.n	800b6ee <_printf_float+0x41e>

0800b704 <_printf_common>:
 800b704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b708:	4616      	mov	r6, r2
 800b70a:	4698      	mov	r8, r3
 800b70c:	688a      	ldr	r2, [r1, #8]
 800b70e:	690b      	ldr	r3, [r1, #16]
 800b710:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b714:	4293      	cmp	r3, r2
 800b716:	bfb8      	it	lt
 800b718:	4613      	movlt	r3, r2
 800b71a:	6033      	str	r3, [r6, #0]
 800b71c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b720:	4607      	mov	r7, r0
 800b722:	460c      	mov	r4, r1
 800b724:	b10a      	cbz	r2, 800b72a <_printf_common+0x26>
 800b726:	3301      	adds	r3, #1
 800b728:	6033      	str	r3, [r6, #0]
 800b72a:	6823      	ldr	r3, [r4, #0]
 800b72c:	0699      	lsls	r1, r3, #26
 800b72e:	bf42      	ittt	mi
 800b730:	6833      	ldrmi	r3, [r6, #0]
 800b732:	3302      	addmi	r3, #2
 800b734:	6033      	strmi	r3, [r6, #0]
 800b736:	6825      	ldr	r5, [r4, #0]
 800b738:	f015 0506 	ands.w	r5, r5, #6
 800b73c:	d106      	bne.n	800b74c <_printf_common+0x48>
 800b73e:	f104 0a19 	add.w	sl, r4, #25
 800b742:	68e3      	ldr	r3, [r4, #12]
 800b744:	6832      	ldr	r2, [r6, #0]
 800b746:	1a9b      	subs	r3, r3, r2
 800b748:	42ab      	cmp	r3, r5
 800b74a:	dc26      	bgt.n	800b79a <_printf_common+0x96>
 800b74c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b750:	6822      	ldr	r2, [r4, #0]
 800b752:	3b00      	subs	r3, #0
 800b754:	bf18      	it	ne
 800b756:	2301      	movne	r3, #1
 800b758:	0692      	lsls	r2, r2, #26
 800b75a:	d42b      	bmi.n	800b7b4 <_printf_common+0xb0>
 800b75c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b760:	4641      	mov	r1, r8
 800b762:	4638      	mov	r0, r7
 800b764:	47c8      	blx	r9
 800b766:	3001      	adds	r0, #1
 800b768:	d01e      	beq.n	800b7a8 <_printf_common+0xa4>
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	6922      	ldr	r2, [r4, #16]
 800b76e:	f003 0306 	and.w	r3, r3, #6
 800b772:	2b04      	cmp	r3, #4
 800b774:	bf02      	ittt	eq
 800b776:	68e5      	ldreq	r5, [r4, #12]
 800b778:	6833      	ldreq	r3, [r6, #0]
 800b77a:	1aed      	subeq	r5, r5, r3
 800b77c:	68a3      	ldr	r3, [r4, #8]
 800b77e:	bf0c      	ite	eq
 800b780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b784:	2500      	movne	r5, #0
 800b786:	4293      	cmp	r3, r2
 800b788:	bfc4      	itt	gt
 800b78a:	1a9b      	subgt	r3, r3, r2
 800b78c:	18ed      	addgt	r5, r5, r3
 800b78e:	2600      	movs	r6, #0
 800b790:	341a      	adds	r4, #26
 800b792:	42b5      	cmp	r5, r6
 800b794:	d11a      	bne.n	800b7cc <_printf_common+0xc8>
 800b796:	2000      	movs	r0, #0
 800b798:	e008      	b.n	800b7ac <_printf_common+0xa8>
 800b79a:	2301      	movs	r3, #1
 800b79c:	4652      	mov	r2, sl
 800b79e:	4641      	mov	r1, r8
 800b7a0:	4638      	mov	r0, r7
 800b7a2:	47c8      	blx	r9
 800b7a4:	3001      	adds	r0, #1
 800b7a6:	d103      	bne.n	800b7b0 <_printf_common+0xac>
 800b7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b0:	3501      	adds	r5, #1
 800b7b2:	e7c6      	b.n	800b742 <_printf_common+0x3e>
 800b7b4:	18e1      	adds	r1, r4, r3
 800b7b6:	1c5a      	adds	r2, r3, #1
 800b7b8:	2030      	movs	r0, #48	@ 0x30
 800b7ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b7be:	4422      	add	r2, r4
 800b7c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b7c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b7c8:	3302      	adds	r3, #2
 800b7ca:	e7c7      	b.n	800b75c <_printf_common+0x58>
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	4622      	mov	r2, r4
 800b7d0:	4641      	mov	r1, r8
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	47c8      	blx	r9
 800b7d6:	3001      	adds	r0, #1
 800b7d8:	d0e6      	beq.n	800b7a8 <_printf_common+0xa4>
 800b7da:	3601      	adds	r6, #1
 800b7dc:	e7d9      	b.n	800b792 <_printf_common+0x8e>
	...

0800b7e0 <_printf_i>:
 800b7e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7e4:	7e0f      	ldrb	r7, [r1, #24]
 800b7e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b7e8:	2f78      	cmp	r7, #120	@ 0x78
 800b7ea:	4691      	mov	r9, r2
 800b7ec:	4680      	mov	r8, r0
 800b7ee:	460c      	mov	r4, r1
 800b7f0:	469a      	mov	sl, r3
 800b7f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b7f6:	d807      	bhi.n	800b808 <_printf_i+0x28>
 800b7f8:	2f62      	cmp	r7, #98	@ 0x62
 800b7fa:	d80a      	bhi.n	800b812 <_printf_i+0x32>
 800b7fc:	2f00      	cmp	r7, #0
 800b7fe:	f000 80d2 	beq.w	800b9a6 <_printf_i+0x1c6>
 800b802:	2f58      	cmp	r7, #88	@ 0x58
 800b804:	f000 80b9 	beq.w	800b97a <_printf_i+0x19a>
 800b808:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b80c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b810:	e03a      	b.n	800b888 <_printf_i+0xa8>
 800b812:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b816:	2b15      	cmp	r3, #21
 800b818:	d8f6      	bhi.n	800b808 <_printf_i+0x28>
 800b81a:	a101      	add	r1, pc, #4	@ (adr r1, 800b820 <_printf_i+0x40>)
 800b81c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b820:	0800b879 	.word	0x0800b879
 800b824:	0800b88d 	.word	0x0800b88d
 800b828:	0800b809 	.word	0x0800b809
 800b82c:	0800b809 	.word	0x0800b809
 800b830:	0800b809 	.word	0x0800b809
 800b834:	0800b809 	.word	0x0800b809
 800b838:	0800b88d 	.word	0x0800b88d
 800b83c:	0800b809 	.word	0x0800b809
 800b840:	0800b809 	.word	0x0800b809
 800b844:	0800b809 	.word	0x0800b809
 800b848:	0800b809 	.word	0x0800b809
 800b84c:	0800b98d 	.word	0x0800b98d
 800b850:	0800b8b7 	.word	0x0800b8b7
 800b854:	0800b947 	.word	0x0800b947
 800b858:	0800b809 	.word	0x0800b809
 800b85c:	0800b809 	.word	0x0800b809
 800b860:	0800b9af 	.word	0x0800b9af
 800b864:	0800b809 	.word	0x0800b809
 800b868:	0800b8b7 	.word	0x0800b8b7
 800b86c:	0800b809 	.word	0x0800b809
 800b870:	0800b809 	.word	0x0800b809
 800b874:	0800b94f 	.word	0x0800b94f
 800b878:	6833      	ldr	r3, [r6, #0]
 800b87a:	1d1a      	adds	r2, r3, #4
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	6032      	str	r2, [r6, #0]
 800b880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b884:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b888:	2301      	movs	r3, #1
 800b88a:	e09d      	b.n	800b9c8 <_printf_i+0x1e8>
 800b88c:	6833      	ldr	r3, [r6, #0]
 800b88e:	6820      	ldr	r0, [r4, #0]
 800b890:	1d19      	adds	r1, r3, #4
 800b892:	6031      	str	r1, [r6, #0]
 800b894:	0606      	lsls	r6, r0, #24
 800b896:	d501      	bpl.n	800b89c <_printf_i+0xbc>
 800b898:	681d      	ldr	r5, [r3, #0]
 800b89a:	e003      	b.n	800b8a4 <_printf_i+0xc4>
 800b89c:	0645      	lsls	r5, r0, #25
 800b89e:	d5fb      	bpl.n	800b898 <_printf_i+0xb8>
 800b8a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b8a4:	2d00      	cmp	r5, #0
 800b8a6:	da03      	bge.n	800b8b0 <_printf_i+0xd0>
 800b8a8:	232d      	movs	r3, #45	@ 0x2d
 800b8aa:	426d      	negs	r5, r5
 800b8ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8b0:	4859      	ldr	r0, [pc, #356]	@ (800ba18 <_printf_i+0x238>)
 800b8b2:	230a      	movs	r3, #10
 800b8b4:	e011      	b.n	800b8da <_printf_i+0xfa>
 800b8b6:	6821      	ldr	r1, [r4, #0]
 800b8b8:	6833      	ldr	r3, [r6, #0]
 800b8ba:	0608      	lsls	r0, r1, #24
 800b8bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b8c0:	d402      	bmi.n	800b8c8 <_printf_i+0xe8>
 800b8c2:	0649      	lsls	r1, r1, #25
 800b8c4:	bf48      	it	mi
 800b8c6:	b2ad      	uxthmi	r5, r5
 800b8c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b8ca:	4853      	ldr	r0, [pc, #332]	@ (800ba18 <_printf_i+0x238>)
 800b8cc:	6033      	str	r3, [r6, #0]
 800b8ce:	bf14      	ite	ne
 800b8d0:	230a      	movne	r3, #10
 800b8d2:	2308      	moveq	r3, #8
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b8da:	6866      	ldr	r6, [r4, #4]
 800b8dc:	60a6      	str	r6, [r4, #8]
 800b8de:	2e00      	cmp	r6, #0
 800b8e0:	bfa2      	ittt	ge
 800b8e2:	6821      	ldrge	r1, [r4, #0]
 800b8e4:	f021 0104 	bicge.w	r1, r1, #4
 800b8e8:	6021      	strge	r1, [r4, #0]
 800b8ea:	b90d      	cbnz	r5, 800b8f0 <_printf_i+0x110>
 800b8ec:	2e00      	cmp	r6, #0
 800b8ee:	d04b      	beq.n	800b988 <_printf_i+0x1a8>
 800b8f0:	4616      	mov	r6, r2
 800b8f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8f6:	fb03 5711 	mls	r7, r3, r1, r5
 800b8fa:	5dc7      	ldrb	r7, [r0, r7]
 800b8fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b900:	462f      	mov	r7, r5
 800b902:	42bb      	cmp	r3, r7
 800b904:	460d      	mov	r5, r1
 800b906:	d9f4      	bls.n	800b8f2 <_printf_i+0x112>
 800b908:	2b08      	cmp	r3, #8
 800b90a:	d10b      	bne.n	800b924 <_printf_i+0x144>
 800b90c:	6823      	ldr	r3, [r4, #0]
 800b90e:	07df      	lsls	r7, r3, #31
 800b910:	d508      	bpl.n	800b924 <_printf_i+0x144>
 800b912:	6923      	ldr	r3, [r4, #16]
 800b914:	6861      	ldr	r1, [r4, #4]
 800b916:	4299      	cmp	r1, r3
 800b918:	bfde      	ittt	le
 800b91a:	2330      	movle	r3, #48	@ 0x30
 800b91c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b920:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b924:	1b92      	subs	r2, r2, r6
 800b926:	6122      	str	r2, [r4, #16]
 800b928:	f8cd a000 	str.w	sl, [sp]
 800b92c:	464b      	mov	r3, r9
 800b92e:	aa03      	add	r2, sp, #12
 800b930:	4621      	mov	r1, r4
 800b932:	4640      	mov	r0, r8
 800b934:	f7ff fee6 	bl	800b704 <_printf_common>
 800b938:	3001      	adds	r0, #1
 800b93a:	d14a      	bne.n	800b9d2 <_printf_i+0x1f2>
 800b93c:	f04f 30ff 	mov.w	r0, #4294967295
 800b940:	b004      	add	sp, #16
 800b942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b946:	6823      	ldr	r3, [r4, #0]
 800b948:	f043 0320 	orr.w	r3, r3, #32
 800b94c:	6023      	str	r3, [r4, #0]
 800b94e:	4833      	ldr	r0, [pc, #204]	@ (800ba1c <_printf_i+0x23c>)
 800b950:	2778      	movs	r7, #120	@ 0x78
 800b952:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	6831      	ldr	r1, [r6, #0]
 800b95a:	061f      	lsls	r7, r3, #24
 800b95c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b960:	d402      	bmi.n	800b968 <_printf_i+0x188>
 800b962:	065f      	lsls	r7, r3, #25
 800b964:	bf48      	it	mi
 800b966:	b2ad      	uxthmi	r5, r5
 800b968:	6031      	str	r1, [r6, #0]
 800b96a:	07d9      	lsls	r1, r3, #31
 800b96c:	bf44      	itt	mi
 800b96e:	f043 0320 	orrmi.w	r3, r3, #32
 800b972:	6023      	strmi	r3, [r4, #0]
 800b974:	b11d      	cbz	r5, 800b97e <_printf_i+0x19e>
 800b976:	2310      	movs	r3, #16
 800b978:	e7ac      	b.n	800b8d4 <_printf_i+0xf4>
 800b97a:	4827      	ldr	r0, [pc, #156]	@ (800ba18 <_printf_i+0x238>)
 800b97c:	e7e9      	b.n	800b952 <_printf_i+0x172>
 800b97e:	6823      	ldr	r3, [r4, #0]
 800b980:	f023 0320 	bic.w	r3, r3, #32
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	e7f6      	b.n	800b976 <_printf_i+0x196>
 800b988:	4616      	mov	r6, r2
 800b98a:	e7bd      	b.n	800b908 <_printf_i+0x128>
 800b98c:	6833      	ldr	r3, [r6, #0]
 800b98e:	6825      	ldr	r5, [r4, #0]
 800b990:	6961      	ldr	r1, [r4, #20]
 800b992:	1d18      	adds	r0, r3, #4
 800b994:	6030      	str	r0, [r6, #0]
 800b996:	062e      	lsls	r6, r5, #24
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	d501      	bpl.n	800b9a0 <_printf_i+0x1c0>
 800b99c:	6019      	str	r1, [r3, #0]
 800b99e:	e002      	b.n	800b9a6 <_printf_i+0x1c6>
 800b9a0:	0668      	lsls	r0, r5, #25
 800b9a2:	d5fb      	bpl.n	800b99c <_printf_i+0x1bc>
 800b9a4:	8019      	strh	r1, [r3, #0]
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	6123      	str	r3, [r4, #16]
 800b9aa:	4616      	mov	r6, r2
 800b9ac:	e7bc      	b.n	800b928 <_printf_i+0x148>
 800b9ae:	6833      	ldr	r3, [r6, #0]
 800b9b0:	1d1a      	adds	r2, r3, #4
 800b9b2:	6032      	str	r2, [r6, #0]
 800b9b4:	681e      	ldr	r6, [r3, #0]
 800b9b6:	6862      	ldr	r2, [r4, #4]
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	f7f4 fc40 	bl	8000240 <memchr>
 800b9c0:	b108      	cbz	r0, 800b9c6 <_printf_i+0x1e6>
 800b9c2:	1b80      	subs	r0, r0, r6
 800b9c4:	6060      	str	r0, [r4, #4]
 800b9c6:	6863      	ldr	r3, [r4, #4]
 800b9c8:	6123      	str	r3, [r4, #16]
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9d0:	e7aa      	b.n	800b928 <_printf_i+0x148>
 800b9d2:	6923      	ldr	r3, [r4, #16]
 800b9d4:	4632      	mov	r2, r6
 800b9d6:	4649      	mov	r1, r9
 800b9d8:	4640      	mov	r0, r8
 800b9da:	47d0      	blx	sl
 800b9dc:	3001      	adds	r0, #1
 800b9de:	d0ad      	beq.n	800b93c <_printf_i+0x15c>
 800b9e0:	6823      	ldr	r3, [r4, #0]
 800b9e2:	079b      	lsls	r3, r3, #30
 800b9e4:	d413      	bmi.n	800ba0e <_printf_i+0x22e>
 800b9e6:	68e0      	ldr	r0, [r4, #12]
 800b9e8:	9b03      	ldr	r3, [sp, #12]
 800b9ea:	4298      	cmp	r0, r3
 800b9ec:	bfb8      	it	lt
 800b9ee:	4618      	movlt	r0, r3
 800b9f0:	e7a6      	b.n	800b940 <_printf_i+0x160>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	4632      	mov	r2, r6
 800b9f6:	4649      	mov	r1, r9
 800b9f8:	4640      	mov	r0, r8
 800b9fa:	47d0      	blx	sl
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	d09d      	beq.n	800b93c <_printf_i+0x15c>
 800ba00:	3501      	adds	r5, #1
 800ba02:	68e3      	ldr	r3, [r4, #12]
 800ba04:	9903      	ldr	r1, [sp, #12]
 800ba06:	1a5b      	subs	r3, r3, r1
 800ba08:	42ab      	cmp	r3, r5
 800ba0a:	dcf2      	bgt.n	800b9f2 <_printf_i+0x212>
 800ba0c:	e7eb      	b.n	800b9e6 <_printf_i+0x206>
 800ba0e:	2500      	movs	r5, #0
 800ba10:	f104 0619 	add.w	r6, r4, #25
 800ba14:	e7f5      	b.n	800ba02 <_printf_i+0x222>
 800ba16:	bf00      	nop
 800ba18:	0800fc1e 	.word	0x0800fc1e
 800ba1c:	0800fc2f 	.word	0x0800fc2f

0800ba20 <_scanf_float>:
 800ba20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba24:	b087      	sub	sp, #28
 800ba26:	4617      	mov	r7, r2
 800ba28:	9303      	str	r3, [sp, #12]
 800ba2a:	688b      	ldr	r3, [r1, #8]
 800ba2c:	1e5a      	subs	r2, r3, #1
 800ba2e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ba32:	bf81      	itttt	hi
 800ba34:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ba38:	eb03 0b05 	addhi.w	fp, r3, r5
 800ba3c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ba40:	608b      	strhi	r3, [r1, #8]
 800ba42:	680b      	ldr	r3, [r1, #0]
 800ba44:	460a      	mov	r2, r1
 800ba46:	f04f 0500 	mov.w	r5, #0
 800ba4a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ba4e:	f842 3b1c 	str.w	r3, [r2], #28
 800ba52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ba56:	4680      	mov	r8, r0
 800ba58:	460c      	mov	r4, r1
 800ba5a:	bf98      	it	ls
 800ba5c:	f04f 0b00 	movls.w	fp, #0
 800ba60:	9201      	str	r2, [sp, #4]
 800ba62:	4616      	mov	r6, r2
 800ba64:	46aa      	mov	sl, r5
 800ba66:	46a9      	mov	r9, r5
 800ba68:	9502      	str	r5, [sp, #8]
 800ba6a:	68a2      	ldr	r2, [r4, #8]
 800ba6c:	b152      	cbz	r2, 800ba84 <_scanf_float+0x64>
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	2b4e      	cmp	r3, #78	@ 0x4e
 800ba74:	d864      	bhi.n	800bb40 <_scanf_float+0x120>
 800ba76:	2b40      	cmp	r3, #64	@ 0x40
 800ba78:	d83c      	bhi.n	800baf4 <_scanf_float+0xd4>
 800ba7a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ba7e:	b2c8      	uxtb	r0, r1
 800ba80:	280e      	cmp	r0, #14
 800ba82:	d93a      	bls.n	800bafa <_scanf_float+0xda>
 800ba84:	f1b9 0f00 	cmp.w	r9, #0
 800ba88:	d003      	beq.n	800ba92 <_scanf_float+0x72>
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba90:	6023      	str	r3, [r4, #0]
 800ba92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba96:	f1ba 0f01 	cmp.w	sl, #1
 800ba9a:	f200 8117 	bhi.w	800bccc <_scanf_float+0x2ac>
 800ba9e:	9b01      	ldr	r3, [sp, #4]
 800baa0:	429e      	cmp	r6, r3
 800baa2:	f200 8108 	bhi.w	800bcb6 <_scanf_float+0x296>
 800baa6:	2001      	movs	r0, #1
 800baa8:	b007      	add	sp, #28
 800baaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bab2:	2a0d      	cmp	r2, #13
 800bab4:	d8e6      	bhi.n	800ba84 <_scanf_float+0x64>
 800bab6:	a101      	add	r1, pc, #4	@ (adr r1, 800babc <_scanf_float+0x9c>)
 800bab8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800babc:	0800bc03 	.word	0x0800bc03
 800bac0:	0800ba85 	.word	0x0800ba85
 800bac4:	0800ba85 	.word	0x0800ba85
 800bac8:	0800ba85 	.word	0x0800ba85
 800bacc:	0800bc63 	.word	0x0800bc63
 800bad0:	0800bc3b 	.word	0x0800bc3b
 800bad4:	0800ba85 	.word	0x0800ba85
 800bad8:	0800ba85 	.word	0x0800ba85
 800badc:	0800bc11 	.word	0x0800bc11
 800bae0:	0800ba85 	.word	0x0800ba85
 800bae4:	0800ba85 	.word	0x0800ba85
 800bae8:	0800ba85 	.word	0x0800ba85
 800baec:	0800ba85 	.word	0x0800ba85
 800baf0:	0800bbc9 	.word	0x0800bbc9
 800baf4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800baf8:	e7db      	b.n	800bab2 <_scanf_float+0x92>
 800bafa:	290e      	cmp	r1, #14
 800bafc:	d8c2      	bhi.n	800ba84 <_scanf_float+0x64>
 800bafe:	a001      	add	r0, pc, #4	@ (adr r0, 800bb04 <_scanf_float+0xe4>)
 800bb00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bb04:	0800bbb9 	.word	0x0800bbb9
 800bb08:	0800ba85 	.word	0x0800ba85
 800bb0c:	0800bbb9 	.word	0x0800bbb9
 800bb10:	0800bc4f 	.word	0x0800bc4f
 800bb14:	0800ba85 	.word	0x0800ba85
 800bb18:	0800bb61 	.word	0x0800bb61
 800bb1c:	0800bb9f 	.word	0x0800bb9f
 800bb20:	0800bb9f 	.word	0x0800bb9f
 800bb24:	0800bb9f 	.word	0x0800bb9f
 800bb28:	0800bb9f 	.word	0x0800bb9f
 800bb2c:	0800bb9f 	.word	0x0800bb9f
 800bb30:	0800bb9f 	.word	0x0800bb9f
 800bb34:	0800bb9f 	.word	0x0800bb9f
 800bb38:	0800bb9f 	.word	0x0800bb9f
 800bb3c:	0800bb9f 	.word	0x0800bb9f
 800bb40:	2b6e      	cmp	r3, #110	@ 0x6e
 800bb42:	d809      	bhi.n	800bb58 <_scanf_float+0x138>
 800bb44:	2b60      	cmp	r3, #96	@ 0x60
 800bb46:	d8b2      	bhi.n	800baae <_scanf_float+0x8e>
 800bb48:	2b54      	cmp	r3, #84	@ 0x54
 800bb4a:	d07b      	beq.n	800bc44 <_scanf_float+0x224>
 800bb4c:	2b59      	cmp	r3, #89	@ 0x59
 800bb4e:	d199      	bne.n	800ba84 <_scanf_float+0x64>
 800bb50:	2d07      	cmp	r5, #7
 800bb52:	d197      	bne.n	800ba84 <_scanf_float+0x64>
 800bb54:	2508      	movs	r5, #8
 800bb56:	e02c      	b.n	800bbb2 <_scanf_float+0x192>
 800bb58:	2b74      	cmp	r3, #116	@ 0x74
 800bb5a:	d073      	beq.n	800bc44 <_scanf_float+0x224>
 800bb5c:	2b79      	cmp	r3, #121	@ 0x79
 800bb5e:	e7f6      	b.n	800bb4e <_scanf_float+0x12e>
 800bb60:	6821      	ldr	r1, [r4, #0]
 800bb62:	05c8      	lsls	r0, r1, #23
 800bb64:	d51b      	bpl.n	800bb9e <_scanf_float+0x17e>
 800bb66:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bb6a:	6021      	str	r1, [r4, #0]
 800bb6c:	f109 0901 	add.w	r9, r9, #1
 800bb70:	f1bb 0f00 	cmp.w	fp, #0
 800bb74:	d003      	beq.n	800bb7e <_scanf_float+0x15e>
 800bb76:	3201      	adds	r2, #1
 800bb78:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb7c:	60a2      	str	r2, [r4, #8]
 800bb7e:	68a3      	ldr	r3, [r4, #8]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	60a3      	str	r3, [r4, #8]
 800bb84:	6923      	ldr	r3, [r4, #16]
 800bb86:	3301      	adds	r3, #1
 800bb88:	6123      	str	r3, [r4, #16]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	607b      	str	r3, [r7, #4]
 800bb92:	f340 8087 	ble.w	800bca4 <_scanf_float+0x284>
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	603b      	str	r3, [r7, #0]
 800bb9c:	e765      	b.n	800ba6a <_scanf_float+0x4a>
 800bb9e:	eb1a 0105 	adds.w	r1, sl, r5
 800bba2:	f47f af6f 	bne.w	800ba84 <_scanf_float+0x64>
 800bba6:	6822      	ldr	r2, [r4, #0]
 800bba8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bbac:	6022      	str	r2, [r4, #0]
 800bbae:	460d      	mov	r5, r1
 800bbb0:	468a      	mov	sl, r1
 800bbb2:	f806 3b01 	strb.w	r3, [r6], #1
 800bbb6:	e7e2      	b.n	800bb7e <_scanf_float+0x15e>
 800bbb8:	6822      	ldr	r2, [r4, #0]
 800bbba:	0610      	lsls	r0, r2, #24
 800bbbc:	f57f af62 	bpl.w	800ba84 <_scanf_float+0x64>
 800bbc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bbc4:	6022      	str	r2, [r4, #0]
 800bbc6:	e7f4      	b.n	800bbb2 <_scanf_float+0x192>
 800bbc8:	f1ba 0f00 	cmp.w	sl, #0
 800bbcc:	d10e      	bne.n	800bbec <_scanf_float+0x1cc>
 800bbce:	f1b9 0f00 	cmp.w	r9, #0
 800bbd2:	d10e      	bne.n	800bbf2 <_scanf_float+0x1d2>
 800bbd4:	6822      	ldr	r2, [r4, #0]
 800bbd6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bbda:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bbde:	d108      	bne.n	800bbf2 <_scanf_float+0x1d2>
 800bbe0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bbe4:	6022      	str	r2, [r4, #0]
 800bbe6:	f04f 0a01 	mov.w	sl, #1
 800bbea:	e7e2      	b.n	800bbb2 <_scanf_float+0x192>
 800bbec:	f1ba 0f02 	cmp.w	sl, #2
 800bbf0:	d055      	beq.n	800bc9e <_scanf_float+0x27e>
 800bbf2:	2d01      	cmp	r5, #1
 800bbf4:	d002      	beq.n	800bbfc <_scanf_float+0x1dc>
 800bbf6:	2d04      	cmp	r5, #4
 800bbf8:	f47f af44 	bne.w	800ba84 <_scanf_float+0x64>
 800bbfc:	3501      	adds	r5, #1
 800bbfe:	b2ed      	uxtb	r5, r5
 800bc00:	e7d7      	b.n	800bbb2 <_scanf_float+0x192>
 800bc02:	f1ba 0f01 	cmp.w	sl, #1
 800bc06:	f47f af3d 	bne.w	800ba84 <_scanf_float+0x64>
 800bc0a:	f04f 0a02 	mov.w	sl, #2
 800bc0e:	e7d0      	b.n	800bbb2 <_scanf_float+0x192>
 800bc10:	b97d      	cbnz	r5, 800bc32 <_scanf_float+0x212>
 800bc12:	f1b9 0f00 	cmp.w	r9, #0
 800bc16:	f47f af38 	bne.w	800ba8a <_scanf_float+0x6a>
 800bc1a:	6822      	ldr	r2, [r4, #0]
 800bc1c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bc20:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bc24:	f040 8101 	bne.w	800be2a <_scanf_float+0x40a>
 800bc28:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bc2c:	6022      	str	r2, [r4, #0]
 800bc2e:	2501      	movs	r5, #1
 800bc30:	e7bf      	b.n	800bbb2 <_scanf_float+0x192>
 800bc32:	2d03      	cmp	r5, #3
 800bc34:	d0e2      	beq.n	800bbfc <_scanf_float+0x1dc>
 800bc36:	2d05      	cmp	r5, #5
 800bc38:	e7de      	b.n	800bbf8 <_scanf_float+0x1d8>
 800bc3a:	2d02      	cmp	r5, #2
 800bc3c:	f47f af22 	bne.w	800ba84 <_scanf_float+0x64>
 800bc40:	2503      	movs	r5, #3
 800bc42:	e7b6      	b.n	800bbb2 <_scanf_float+0x192>
 800bc44:	2d06      	cmp	r5, #6
 800bc46:	f47f af1d 	bne.w	800ba84 <_scanf_float+0x64>
 800bc4a:	2507      	movs	r5, #7
 800bc4c:	e7b1      	b.n	800bbb2 <_scanf_float+0x192>
 800bc4e:	6822      	ldr	r2, [r4, #0]
 800bc50:	0591      	lsls	r1, r2, #22
 800bc52:	f57f af17 	bpl.w	800ba84 <_scanf_float+0x64>
 800bc56:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bc5a:	6022      	str	r2, [r4, #0]
 800bc5c:	f8cd 9008 	str.w	r9, [sp, #8]
 800bc60:	e7a7      	b.n	800bbb2 <_scanf_float+0x192>
 800bc62:	6822      	ldr	r2, [r4, #0]
 800bc64:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bc68:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bc6c:	d006      	beq.n	800bc7c <_scanf_float+0x25c>
 800bc6e:	0550      	lsls	r0, r2, #21
 800bc70:	f57f af08 	bpl.w	800ba84 <_scanf_float+0x64>
 800bc74:	f1b9 0f00 	cmp.w	r9, #0
 800bc78:	f000 80d7 	beq.w	800be2a <_scanf_float+0x40a>
 800bc7c:	0591      	lsls	r1, r2, #22
 800bc7e:	bf58      	it	pl
 800bc80:	9902      	ldrpl	r1, [sp, #8]
 800bc82:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bc86:	bf58      	it	pl
 800bc88:	eba9 0101 	subpl.w	r1, r9, r1
 800bc8c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bc90:	bf58      	it	pl
 800bc92:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bc96:	6022      	str	r2, [r4, #0]
 800bc98:	f04f 0900 	mov.w	r9, #0
 800bc9c:	e789      	b.n	800bbb2 <_scanf_float+0x192>
 800bc9e:	f04f 0a03 	mov.w	sl, #3
 800bca2:	e786      	b.n	800bbb2 <_scanf_float+0x192>
 800bca4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bca8:	4639      	mov	r1, r7
 800bcaa:	4640      	mov	r0, r8
 800bcac:	4798      	blx	r3
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	f43f aedb 	beq.w	800ba6a <_scanf_float+0x4a>
 800bcb4:	e6e6      	b.n	800ba84 <_scanf_float+0x64>
 800bcb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bcba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bcbe:	463a      	mov	r2, r7
 800bcc0:	4640      	mov	r0, r8
 800bcc2:	4798      	blx	r3
 800bcc4:	6923      	ldr	r3, [r4, #16]
 800bcc6:	3b01      	subs	r3, #1
 800bcc8:	6123      	str	r3, [r4, #16]
 800bcca:	e6e8      	b.n	800ba9e <_scanf_float+0x7e>
 800bccc:	1e6b      	subs	r3, r5, #1
 800bcce:	2b06      	cmp	r3, #6
 800bcd0:	d824      	bhi.n	800bd1c <_scanf_float+0x2fc>
 800bcd2:	2d02      	cmp	r5, #2
 800bcd4:	d836      	bhi.n	800bd44 <_scanf_float+0x324>
 800bcd6:	9b01      	ldr	r3, [sp, #4]
 800bcd8:	429e      	cmp	r6, r3
 800bcda:	f67f aee4 	bls.w	800baa6 <_scanf_float+0x86>
 800bcde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bce2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bce6:	463a      	mov	r2, r7
 800bce8:	4640      	mov	r0, r8
 800bcea:	4798      	blx	r3
 800bcec:	6923      	ldr	r3, [r4, #16]
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	6123      	str	r3, [r4, #16]
 800bcf2:	e7f0      	b.n	800bcd6 <_scanf_float+0x2b6>
 800bcf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bcf8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bcfc:	463a      	mov	r2, r7
 800bcfe:	4640      	mov	r0, r8
 800bd00:	4798      	blx	r3
 800bd02:	6923      	ldr	r3, [r4, #16]
 800bd04:	3b01      	subs	r3, #1
 800bd06:	6123      	str	r3, [r4, #16]
 800bd08:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd0c:	fa5f fa8a 	uxtb.w	sl, sl
 800bd10:	f1ba 0f02 	cmp.w	sl, #2
 800bd14:	d1ee      	bne.n	800bcf4 <_scanf_float+0x2d4>
 800bd16:	3d03      	subs	r5, #3
 800bd18:	b2ed      	uxtb	r5, r5
 800bd1a:	1b76      	subs	r6, r6, r5
 800bd1c:	6823      	ldr	r3, [r4, #0]
 800bd1e:	05da      	lsls	r2, r3, #23
 800bd20:	d530      	bpl.n	800bd84 <_scanf_float+0x364>
 800bd22:	055b      	lsls	r3, r3, #21
 800bd24:	d511      	bpl.n	800bd4a <_scanf_float+0x32a>
 800bd26:	9b01      	ldr	r3, [sp, #4]
 800bd28:	429e      	cmp	r6, r3
 800bd2a:	f67f aebc 	bls.w	800baa6 <_scanf_float+0x86>
 800bd2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd36:	463a      	mov	r2, r7
 800bd38:	4640      	mov	r0, r8
 800bd3a:	4798      	blx	r3
 800bd3c:	6923      	ldr	r3, [r4, #16]
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	6123      	str	r3, [r4, #16]
 800bd42:	e7f0      	b.n	800bd26 <_scanf_float+0x306>
 800bd44:	46aa      	mov	sl, r5
 800bd46:	46b3      	mov	fp, r6
 800bd48:	e7de      	b.n	800bd08 <_scanf_float+0x2e8>
 800bd4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bd4e:	6923      	ldr	r3, [r4, #16]
 800bd50:	2965      	cmp	r1, #101	@ 0x65
 800bd52:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd56:	f106 35ff 	add.w	r5, r6, #4294967295
 800bd5a:	6123      	str	r3, [r4, #16]
 800bd5c:	d00c      	beq.n	800bd78 <_scanf_float+0x358>
 800bd5e:	2945      	cmp	r1, #69	@ 0x45
 800bd60:	d00a      	beq.n	800bd78 <_scanf_float+0x358>
 800bd62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd66:	463a      	mov	r2, r7
 800bd68:	4640      	mov	r0, r8
 800bd6a:	4798      	blx	r3
 800bd6c:	6923      	ldr	r3, [r4, #16]
 800bd6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bd72:	3b01      	subs	r3, #1
 800bd74:	1eb5      	subs	r5, r6, #2
 800bd76:	6123      	str	r3, [r4, #16]
 800bd78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd7c:	463a      	mov	r2, r7
 800bd7e:	4640      	mov	r0, r8
 800bd80:	4798      	blx	r3
 800bd82:	462e      	mov	r6, r5
 800bd84:	6822      	ldr	r2, [r4, #0]
 800bd86:	f012 0210 	ands.w	r2, r2, #16
 800bd8a:	d001      	beq.n	800bd90 <_scanf_float+0x370>
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	e68b      	b.n	800baa8 <_scanf_float+0x88>
 800bd90:	7032      	strb	r2, [r6, #0]
 800bd92:	6823      	ldr	r3, [r4, #0]
 800bd94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bd98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd9c:	d11a      	bne.n	800bdd4 <_scanf_float+0x3b4>
 800bd9e:	9b02      	ldr	r3, [sp, #8]
 800bda0:	454b      	cmp	r3, r9
 800bda2:	eba3 0209 	sub.w	r2, r3, r9
 800bda6:	d121      	bne.n	800bdec <_scanf_float+0x3cc>
 800bda8:	9901      	ldr	r1, [sp, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	4640      	mov	r0, r8
 800bdae:	f002 fb41 	bl	800e434 <_strtod_r>
 800bdb2:	9b03      	ldr	r3, [sp, #12]
 800bdb4:	6821      	ldr	r1, [r4, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f011 0f02 	tst.w	r1, #2
 800bdbc:	f103 0204 	add.w	r2, r3, #4
 800bdc0:	d01f      	beq.n	800be02 <_scanf_float+0x3e2>
 800bdc2:	9903      	ldr	r1, [sp, #12]
 800bdc4:	600a      	str	r2, [r1, #0]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	ed83 0b00 	vstr	d0, [r3]
 800bdcc:	68e3      	ldr	r3, [r4, #12]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	60e3      	str	r3, [r4, #12]
 800bdd2:	e7db      	b.n	800bd8c <_scanf_float+0x36c>
 800bdd4:	9b04      	ldr	r3, [sp, #16]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d0e6      	beq.n	800bda8 <_scanf_float+0x388>
 800bdda:	9905      	ldr	r1, [sp, #20]
 800bddc:	230a      	movs	r3, #10
 800bdde:	3101      	adds	r1, #1
 800bde0:	4640      	mov	r0, r8
 800bde2:	f002 fba7 	bl	800e534 <_strtol_r>
 800bde6:	9b04      	ldr	r3, [sp, #16]
 800bde8:	9e05      	ldr	r6, [sp, #20]
 800bdea:	1ac2      	subs	r2, r0, r3
 800bdec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bdf0:	429e      	cmp	r6, r3
 800bdf2:	bf28      	it	cs
 800bdf4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bdf8:	490d      	ldr	r1, [pc, #52]	@ (800be30 <_scanf_float+0x410>)
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	f000 f8de 	bl	800bfbc <siprintf>
 800be00:	e7d2      	b.n	800bda8 <_scanf_float+0x388>
 800be02:	f011 0f04 	tst.w	r1, #4
 800be06:	9903      	ldr	r1, [sp, #12]
 800be08:	600a      	str	r2, [r1, #0]
 800be0a:	d1dc      	bne.n	800bdc6 <_scanf_float+0x3a6>
 800be0c:	eeb4 0b40 	vcmp.f64	d0, d0
 800be10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be14:	681d      	ldr	r5, [r3, #0]
 800be16:	d705      	bvc.n	800be24 <_scanf_float+0x404>
 800be18:	4806      	ldr	r0, [pc, #24]	@ (800be34 <_scanf_float+0x414>)
 800be1a:	f000 f9c5 	bl	800c1a8 <nanf>
 800be1e:	ed85 0a00 	vstr	s0, [r5]
 800be22:	e7d3      	b.n	800bdcc <_scanf_float+0x3ac>
 800be24:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800be28:	e7f9      	b.n	800be1e <_scanf_float+0x3fe>
 800be2a:	f04f 0900 	mov.w	r9, #0
 800be2e:	e630      	b.n	800ba92 <_scanf_float+0x72>
 800be30:	0800fc40 	.word	0x0800fc40
 800be34:	0800ffd5 	.word	0x0800ffd5

0800be38 <std>:
 800be38:	2300      	movs	r3, #0
 800be3a:	b510      	push	{r4, lr}
 800be3c:	4604      	mov	r4, r0
 800be3e:	e9c0 3300 	strd	r3, r3, [r0]
 800be42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be46:	6083      	str	r3, [r0, #8]
 800be48:	8181      	strh	r1, [r0, #12]
 800be4a:	6643      	str	r3, [r0, #100]	@ 0x64
 800be4c:	81c2      	strh	r2, [r0, #14]
 800be4e:	6183      	str	r3, [r0, #24]
 800be50:	4619      	mov	r1, r3
 800be52:	2208      	movs	r2, #8
 800be54:	305c      	adds	r0, #92	@ 0x5c
 800be56:	f000 f914 	bl	800c082 <memset>
 800be5a:	4b0d      	ldr	r3, [pc, #52]	@ (800be90 <std+0x58>)
 800be5c:	6263      	str	r3, [r4, #36]	@ 0x24
 800be5e:	4b0d      	ldr	r3, [pc, #52]	@ (800be94 <std+0x5c>)
 800be60:	62a3      	str	r3, [r4, #40]	@ 0x28
 800be62:	4b0d      	ldr	r3, [pc, #52]	@ (800be98 <std+0x60>)
 800be64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800be66:	4b0d      	ldr	r3, [pc, #52]	@ (800be9c <std+0x64>)
 800be68:	6323      	str	r3, [r4, #48]	@ 0x30
 800be6a:	4b0d      	ldr	r3, [pc, #52]	@ (800bea0 <std+0x68>)
 800be6c:	6224      	str	r4, [r4, #32]
 800be6e:	429c      	cmp	r4, r3
 800be70:	d006      	beq.n	800be80 <std+0x48>
 800be72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be76:	4294      	cmp	r4, r2
 800be78:	d002      	beq.n	800be80 <std+0x48>
 800be7a:	33d0      	adds	r3, #208	@ 0xd0
 800be7c:	429c      	cmp	r4, r3
 800be7e:	d105      	bne.n	800be8c <std+0x54>
 800be80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be88:	f000 b98a 	b.w	800c1a0 <__retarget_lock_init_recursive>
 800be8c:	bd10      	pop	{r4, pc}
 800be8e:	bf00      	nop
 800be90:	0800bffd 	.word	0x0800bffd
 800be94:	0800c01f 	.word	0x0800c01f
 800be98:	0800c057 	.word	0x0800c057
 800be9c:	0800c07b 	.word	0x0800c07b
 800bea0:	20002d44 	.word	0x20002d44

0800bea4 <stdio_exit_handler>:
 800bea4:	4a02      	ldr	r2, [pc, #8]	@ (800beb0 <stdio_exit_handler+0xc>)
 800bea6:	4903      	ldr	r1, [pc, #12]	@ (800beb4 <stdio_exit_handler+0x10>)
 800bea8:	4803      	ldr	r0, [pc, #12]	@ (800beb8 <stdio_exit_handler+0x14>)
 800beaa:	f000 b869 	b.w	800bf80 <_fwalk_sglue>
 800beae:	bf00      	nop
 800beb0:	20000024 	.word	0x20000024
 800beb4:	0800e8f1 	.word	0x0800e8f1
 800beb8:	20000034 	.word	0x20000034

0800bebc <cleanup_stdio>:
 800bebc:	6841      	ldr	r1, [r0, #4]
 800bebe:	4b0c      	ldr	r3, [pc, #48]	@ (800bef0 <cleanup_stdio+0x34>)
 800bec0:	4299      	cmp	r1, r3
 800bec2:	b510      	push	{r4, lr}
 800bec4:	4604      	mov	r4, r0
 800bec6:	d001      	beq.n	800becc <cleanup_stdio+0x10>
 800bec8:	f002 fd12 	bl	800e8f0 <_fflush_r>
 800becc:	68a1      	ldr	r1, [r4, #8]
 800bece:	4b09      	ldr	r3, [pc, #36]	@ (800bef4 <cleanup_stdio+0x38>)
 800bed0:	4299      	cmp	r1, r3
 800bed2:	d002      	beq.n	800beda <cleanup_stdio+0x1e>
 800bed4:	4620      	mov	r0, r4
 800bed6:	f002 fd0b 	bl	800e8f0 <_fflush_r>
 800beda:	68e1      	ldr	r1, [r4, #12]
 800bedc:	4b06      	ldr	r3, [pc, #24]	@ (800bef8 <cleanup_stdio+0x3c>)
 800bede:	4299      	cmp	r1, r3
 800bee0:	d004      	beq.n	800beec <cleanup_stdio+0x30>
 800bee2:	4620      	mov	r0, r4
 800bee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bee8:	f002 bd02 	b.w	800e8f0 <_fflush_r>
 800beec:	bd10      	pop	{r4, pc}
 800beee:	bf00      	nop
 800bef0:	20002d44 	.word	0x20002d44
 800bef4:	20002dac 	.word	0x20002dac
 800bef8:	20002e14 	.word	0x20002e14

0800befc <global_stdio_init.part.0>:
 800befc:	b510      	push	{r4, lr}
 800befe:	4b0b      	ldr	r3, [pc, #44]	@ (800bf2c <global_stdio_init.part.0+0x30>)
 800bf00:	4c0b      	ldr	r4, [pc, #44]	@ (800bf30 <global_stdio_init.part.0+0x34>)
 800bf02:	4a0c      	ldr	r2, [pc, #48]	@ (800bf34 <global_stdio_init.part.0+0x38>)
 800bf04:	601a      	str	r2, [r3, #0]
 800bf06:	4620      	mov	r0, r4
 800bf08:	2200      	movs	r2, #0
 800bf0a:	2104      	movs	r1, #4
 800bf0c:	f7ff ff94 	bl	800be38 <std>
 800bf10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bf14:	2201      	movs	r2, #1
 800bf16:	2109      	movs	r1, #9
 800bf18:	f7ff ff8e 	bl	800be38 <std>
 800bf1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bf20:	2202      	movs	r2, #2
 800bf22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf26:	2112      	movs	r1, #18
 800bf28:	f7ff bf86 	b.w	800be38 <std>
 800bf2c:	20002e7c 	.word	0x20002e7c
 800bf30:	20002d44 	.word	0x20002d44
 800bf34:	0800bea5 	.word	0x0800bea5

0800bf38 <__sfp_lock_acquire>:
 800bf38:	4801      	ldr	r0, [pc, #4]	@ (800bf40 <__sfp_lock_acquire+0x8>)
 800bf3a:	f000 b932 	b.w	800c1a2 <__retarget_lock_acquire_recursive>
 800bf3e:	bf00      	nop
 800bf40:	20002e85 	.word	0x20002e85

0800bf44 <__sfp_lock_release>:
 800bf44:	4801      	ldr	r0, [pc, #4]	@ (800bf4c <__sfp_lock_release+0x8>)
 800bf46:	f000 b92d 	b.w	800c1a4 <__retarget_lock_release_recursive>
 800bf4a:	bf00      	nop
 800bf4c:	20002e85 	.word	0x20002e85

0800bf50 <__sinit>:
 800bf50:	b510      	push	{r4, lr}
 800bf52:	4604      	mov	r4, r0
 800bf54:	f7ff fff0 	bl	800bf38 <__sfp_lock_acquire>
 800bf58:	6a23      	ldr	r3, [r4, #32]
 800bf5a:	b11b      	cbz	r3, 800bf64 <__sinit+0x14>
 800bf5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf60:	f7ff bff0 	b.w	800bf44 <__sfp_lock_release>
 800bf64:	4b04      	ldr	r3, [pc, #16]	@ (800bf78 <__sinit+0x28>)
 800bf66:	6223      	str	r3, [r4, #32]
 800bf68:	4b04      	ldr	r3, [pc, #16]	@ (800bf7c <__sinit+0x2c>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1f5      	bne.n	800bf5c <__sinit+0xc>
 800bf70:	f7ff ffc4 	bl	800befc <global_stdio_init.part.0>
 800bf74:	e7f2      	b.n	800bf5c <__sinit+0xc>
 800bf76:	bf00      	nop
 800bf78:	0800bebd 	.word	0x0800bebd
 800bf7c:	20002e7c 	.word	0x20002e7c

0800bf80 <_fwalk_sglue>:
 800bf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf84:	4607      	mov	r7, r0
 800bf86:	4688      	mov	r8, r1
 800bf88:	4614      	mov	r4, r2
 800bf8a:	2600      	movs	r6, #0
 800bf8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf90:	f1b9 0901 	subs.w	r9, r9, #1
 800bf94:	d505      	bpl.n	800bfa2 <_fwalk_sglue+0x22>
 800bf96:	6824      	ldr	r4, [r4, #0]
 800bf98:	2c00      	cmp	r4, #0
 800bf9a:	d1f7      	bne.n	800bf8c <_fwalk_sglue+0xc>
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfa2:	89ab      	ldrh	r3, [r5, #12]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d907      	bls.n	800bfb8 <_fwalk_sglue+0x38>
 800bfa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfac:	3301      	adds	r3, #1
 800bfae:	d003      	beq.n	800bfb8 <_fwalk_sglue+0x38>
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	4638      	mov	r0, r7
 800bfb4:	47c0      	blx	r8
 800bfb6:	4306      	orrs	r6, r0
 800bfb8:	3568      	adds	r5, #104	@ 0x68
 800bfba:	e7e9      	b.n	800bf90 <_fwalk_sglue+0x10>

0800bfbc <siprintf>:
 800bfbc:	b40e      	push	{r1, r2, r3}
 800bfbe:	b500      	push	{lr}
 800bfc0:	b09c      	sub	sp, #112	@ 0x70
 800bfc2:	ab1d      	add	r3, sp, #116	@ 0x74
 800bfc4:	9002      	str	r0, [sp, #8]
 800bfc6:	9006      	str	r0, [sp, #24]
 800bfc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bfcc:	4809      	ldr	r0, [pc, #36]	@ (800bff4 <siprintf+0x38>)
 800bfce:	9107      	str	r1, [sp, #28]
 800bfd0:	9104      	str	r1, [sp, #16]
 800bfd2:	4909      	ldr	r1, [pc, #36]	@ (800bff8 <siprintf+0x3c>)
 800bfd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfd8:	9105      	str	r1, [sp, #20]
 800bfda:	6800      	ldr	r0, [r0, #0]
 800bfdc:	9301      	str	r3, [sp, #4]
 800bfde:	a902      	add	r1, sp, #8
 800bfe0:	f002 fb06 	bl	800e5f0 <_svfiprintf_r>
 800bfe4:	9b02      	ldr	r3, [sp, #8]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	701a      	strb	r2, [r3, #0]
 800bfea:	b01c      	add	sp, #112	@ 0x70
 800bfec:	f85d eb04 	ldr.w	lr, [sp], #4
 800bff0:	b003      	add	sp, #12
 800bff2:	4770      	bx	lr
 800bff4:	20000030 	.word	0x20000030
 800bff8:	ffff0208 	.word	0xffff0208

0800bffc <__sread>:
 800bffc:	b510      	push	{r4, lr}
 800bffe:	460c      	mov	r4, r1
 800c000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c004:	f000 f87e 	bl	800c104 <_read_r>
 800c008:	2800      	cmp	r0, #0
 800c00a:	bfab      	itete	ge
 800c00c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c00e:	89a3      	ldrhlt	r3, [r4, #12]
 800c010:	181b      	addge	r3, r3, r0
 800c012:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c016:	bfac      	ite	ge
 800c018:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c01a:	81a3      	strhlt	r3, [r4, #12]
 800c01c:	bd10      	pop	{r4, pc}

0800c01e <__swrite>:
 800c01e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c022:	461f      	mov	r7, r3
 800c024:	898b      	ldrh	r3, [r1, #12]
 800c026:	05db      	lsls	r3, r3, #23
 800c028:	4605      	mov	r5, r0
 800c02a:	460c      	mov	r4, r1
 800c02c:	4616      	mov	r6, r2
 800c02e:	d505      	bpl.n	800c03c <__swrite+0x1e>
 800c030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c034:	2302      	movs	r3, #2
 800c036:	2200      	movs	r2, #0
 800c038:	f000 f852 	bl	800c0e0 <_lseek_r>
 800c03c:	89a3      	ldrh	r3, [r4, #12]
 800c03e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c042:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c046:	81a3      	strh	r3, [r4, #12]
 800c048:	4632      	mov	r2, r6
 800c04a:	463b      	mov	r3, r7
 800c04c:	4628      	mov	r0, r5
 800c04e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c052:	f000 b869 	b.w	800c128 <_write_r>

0800c056 <__sseek>:
 800c056:	b510      	push	{r4, lr}
 800c058:	460c      	mov	r4, r1
 800c05a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c05e:	f000 f83f 	bl	800c0e0 <_lseek_r>
 800c062:	1c43      	adds	r3, r0, #1
 800c064:	89a3      	ldrh	r3, [r4, #12]
 800c066:	bf15      	itete	ne
 800c068:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c06a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c06e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c072:	81a3      	strheq	r3, [r4, #12]
 800c074:	bf18      	it	ne
 800c076:	81a3      	strhne	r3, [r4, #12]
 800c078:	bd10      	pop	{r4, pc}

0800c07a <__sclose>:
 800c07a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c07e:	f000 b81f 	b.w	800c0c0 <_close_r>

0800c082 <memset>:
 800c082:	4402      	add	r2, r0
 800c084:	4603      	mov	r3, r0
 800c086:	4293      	cmp	r3, r2
 800c088:	d100      	bne.n	800c08c <memset+0xa>
 800c08a:	4770      	bx	lr
 800c08c:	f803 1b01 	strb.w	r1, [r3], #1
 800c090:	e7f9      	b.n	800c086 <memset+0x4>

0800c092 <strncpy>:
 800c092:	b510      	push	{r4, lr}
 800c094:	3901      	subs	r1, #1
 800c096:	4603      	mov	r3, r0
 800c098:	b132      	cbz	r2, 800c0a8 <strncpy+0x16>
 800c09a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c09e:	f803 4b01 	strb.w	r4, [r3], #1
 800c0a2:	3a01      	subs	r2, #1
 800c0a4:	2c00      	cmp	r4, #0
 800c0a6:	d1f7      	bne.n	800c098 <strncpy+0x6>
 800c0a8:	441a      	add	r2, r3
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d100      	bne.n	800c0b2 <strncpy+0x20>
 800c0b0:	bd10      	pop	{r4, pc}
 800c0b2:	f803 1b01 	strb.w	r1, [r3], #1
 800c0b6:	e7f9      	b.n	800c0ac <strncpy+0x1a>

0800c0b8 <_localeconv_r>:
 800c0b8:	4800      	ldr	r0, [pc, #0]	@ (800c0bc <_localeconv_r+0x4>)
 800c0ba:	4770      	bx	lr
 800c0bc:	20000170 	.word	0x20000170

0800c0c0 <_close_r>:
 800c0c0:	b538      	push	{r3, r4, r5, lr}
 800c0c2:	4d06      	ldr	r5, [pc, #24]	@ (800c0dc <_close_r+0x1c>)
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	4608      	mov	r0, r1
 800c0ca:	602b      	str	r3, [r5, #0]
 800c0cc:	f7f6 f83c 	bl	8002148 <_close>
 800c0d0:	1c43      	adds	r3, r0, #1
 800c0d2:	d102      	bne.n	800c0da <_close_r+0x1a>
 800c0d4:	682b      	ldr	r3, [r5, #0]
 800c0d6:	b103      	cbz	r3, 800c0da <_close_r+0x1a>
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	bd38      	pop	{r3, r4, r5, pc}
 800c0dc:	20002e80 	.word	0x20002e80

0800c0e0 <_lseek_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4d07      	ldr	r5, [pc, #28]	@ (800c100 <_lseek_r+0x20>)
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	4608      	mov	r0, r1
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	602a      	str	r2, [r5, #0]
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	f7f6 f851 	bl	8002196 <_lseek>
 800c0f4:	1c43      	adds	r3, r0, #1
 800c0f6:	d102      	bne.n	800c0fe <_lseek_r+0x1e>
 800c0f8:	682b      	ldr	r3, [r5, #0]
 800c0fa:	b103      	cbz	r3, 800c0fe <_lseek_r+0x1e>
 800c0fc:	6023      	str	r3, [r4, #0]
 800c0fe:	bd38      	pop	{r3, r4, r5, pc}
 800c100:	20002e80 	.word	0x20002e80

0800c104 <_read_r>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	4d07      	ldr	r5, [pc, #28]	@ (800c124 <_read_r+0x20>)
 800c108:	4604      	mov	r4, r0
 800c10a:	4608      	mov	r0, r1
 800c10c:	4611      	mov	r1, r2
 800c10e:	2200      	movs	r2, #0
 800c110:	602a      	str	r2, [r5, #0]
 800c112:	461a      	mov	r2, r3
 800c114:	f7f5 ffdf 	bl	80020d6 <_read>
 800c118:	1c43      	adds	r3, r0, #1
 800c11a:	d102      	bne.n	800c122 <_read_r+0x1e>
 800c11c:	682b      	ldr	r3, [r5, #0]
 800c11e:	b103      	cbz	r3, 800c122 <_read_r+0x1e>
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	bd38      	pop	{r3, r4, r5, pc}
 800c124:	20002e80 	.word	0x20002e80

0800c128 <_write_r>:
 800c128:	b538      	push	{r3, r4, r5, lr}
 800c12a:	4d07      	ldr	r5, [pc, #28]	@ (800c148 <_write_r+0x20>)
 800c12c:	4604      	mov	r4, r0
 800c12e:	4608      	mov	r0, r1
 800c130:	4611      	mov	r1, r2
 800c132:	2200      	movs	r2, #0
 800c134:	602a      	str	r2, [r5, #0]
 800c136:	461a      	mov	r2, r3
 800c138:	f7f5 ffea 	bl	8002110 <_write>
 800c13c:	1c43      	adds	r3, r0, #1
 800c13e:	d102      	bne.n	800c146 <_write_r+0x1e>
 800c140:	682b      	ldr	r3, [r5, #0]
 800c142:	b103      	cbz	r3, 800c146 <_write_r+0x1e>
 800c144:	6023      	str	r3, [r4, #0]
 800c146:	bd38      	pop	{r3, r4, r5, pc}
 800c148:	20002e80 	.word	0x20002e80

0800c14c <__errno>:
 800c14c:	4b01      	ldr	r3, [pc, #4]	@ (800c154 <__errno+0x8>)
 800c14e:	6818      	ldr	r0, [r3, #0]
 800c150:	4770      	bx	lr
 800c152:	bf00      	nop
 800c154:	20000030 	.word	0x20000030

0800c158 <__libc_init_array>:
 800c158:	b570      	push	{r4, r5, r6, lr}
 800c15a:	4d0d      	ldr	r5, [pc, #52]	@ (800c190 <__libc_init_array+0x38>)
 800c15c:	4c0d      	ldr	r4, [pc, #52]	@ (800c194 <__libc_init_array+0x3c>)
 800c15e:	1b64      	subs	r4, r4, r5
 800c160:	10a4      	asrs	r4, r4, #2
 800c162:	2600      	movs	r6, #0
 800c164:	42a6      	cmp	r6, r4
 800c166:	d109      	bne.n	800c17c <__libc_init_array+0x24>
 800c168:	4d0b      	ldr	r5, [pc, #44]	@ (800c198 <__libc_init_array+0x40>)
 800c16a:	4c0c      	ldr	r4, [pc, #48]	@ (800c19c <__libc_init_array+0x44>)
 800c16c:	f003 fab2 	bl	800f6d4 <_init>
 800c170:	1b64      	subs	r4, r4, r5
 800c172:	10a4      	asrs	r4, r4, #2
 800c174:	2600      	movs	r6, #0
 800c176:	42a6      	cmp	r6, r4
 800c178:	d105      	bne.n	800c186 <__libc_init_array+0x2e>
 800c17a:	bd70      	pop	{r4, r5, r6, pc}
 800c17c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c180:	4798      	blx	r3
 800c182:	3601      	adds	r6, #1
 800c184:	e7ee      	b.n	800c164 <__libc_init_array+0xc>
 800c186:	f855 3b04 	ldr.w	r3, [r5], #4
 800c18a:	4798      	blx	r3
 800c18c:	3601      	adds	r6, #1
 800c18e:	e7f2      	b.n	800c176 <__libc_init_array+0x1e>
 800c190:	08010040 	.word	0x08010040
 800c194:	08010040 	.word	0x08010040
 800c198:	08010040 	.word	0x08010040
 800c19c:	08010044 	.word	0x08010044

0800c1a0 <__retarget_lock_init_recursive>:
 800c1a0:	4770      	bx	lr

0800c1a2 <__retarget_lock_acquire_recursive>:
 800c1a2:	4770      	bx	lr

0800c1a4 <__retarget_lock_release_recursive>:
 800c1a4:	4770      	bx	lr
	...

0800c1a8 <nanf>:
 800c1a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c1b0 <nanf+0x8>
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	7fc00000 	.word	0x7fc00000

0800c1b4 <quorem>:
 800c1b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b8:	6903      	ldr	r3, [r0, #16]
 800c1ba:	690c      	ldr	r4, [r1, #16]
 800c1bc:	42a3      	cmp	r3, r4
 800c1be:	4607      	mov	r7, r0
 800c1c0:	db7e      	blt.n	800c2c0 <quorem+0x10c>
 800c1c2:	3c01      	subs	r4, #1
 800c1c4:	f101 0814 	add.w	r8, r1, #20
 800c1c8:	00a3      	lsls	r3, r4, #2
 800c1ca:	f100 0514 	add.w	r5, r0, #20
 800c1ce:	9300      	str	r3, [sp, #0]
 800c1d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1d4:	9301      	str	r3, [sp, #4]
 800c1d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c1da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c1e6:	fbb2 f6f3 	udiv	r6, r2, r3
 800c1ea:	d32e      	bcc.n	800c24a <quorem+0x96>
 800c1ec:	f04f 0a00 	mov.w	sl, #0
 800c1f0:	46c4      	mov	ip, r8
 800c1f2:	46ae      	mov	lr, r5
 800c1f4:	46d3      	mov	fp, sl
 800c1f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c1fa:	b298      	uxth	r0, r3
 800c1fc:	fb06 a000 	mla	r0, r6, r0, sl
 800c200:	0c02      	lsrs	r2, r0, #16
 800c202:	0c1b      	lsrs	r3, r3, #16
 800c204:	fb06 2303 	mla	r3, r6, r3, r2
 800c208:	f8de 2000 	ldr.w	r2, [lr]
 800c20c:	b280      	uxth	r0, r0
 800c20e:	b292      	uxth	r2, r2
 800c210:	1a12      	subs	r2, r2, r0
 800c212:	445a      	add	r2, fp
 800c214:	f8de 0000 	ldr.w	r0, [lr]
 800c218:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c21c:	b29b      	uxth	r3, r3
 800c21e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c222:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c226:	b292      	uxth	r2, r2
 800c228:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c22c:	45e1      	cmp	r9, ip
 800c22e:	f84e 2b04 	str.w	r2, [lr], #4
 800c232:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c236:	d2de      	bcs.n	800c1f6 <quorem+0x42>
 800c238:	9b00      	ldr	r3, [sp, #0]
 800c23a:	58eb      	ldr	r3, [r5, r3]
 800c23c:	b92b      	cbnz	r3, 800c24a <quorem+0x96>
 800c23e:	9b01      	ldr	r3, [sp, #4]
 800c240:	3b04      	subs	r3, #4
 800c242:	429d      	cmp	r5, r3
 800c244:	461a      	mov	r2, r3
 800c246:	d32f      	bcc.n	800c2a8 <quorem+0xf4>
 800c248:	613c      	str	r4, [r7, #16]
 800c24a:	4638      	mov	r0, r7
 800c24c:	f001 f956 	bl	800d4fc <__mcmp>
 800c250:	2800      	cmp	r0, #0
 800c252:	db25      	blt.n	800c2a0 <quorem+0xec>
 800c254:	4629      	mov	r1, r5
 800c256:	2000      	movs	r0, #0
 800c258:	f858 2b04 	ldr.w	r2, [r8], #4
 800c25c:	f8d1 c000 	ldr.w	ip, [r1]
 800c260:	fa1f fe82 	uxth.w	lr, r2
 800c264:	fa1f f38c 	uxth.w	r3, ip
 800c268:	eba3 030e 	sub.w	r3, r3, lr
 800c26c:	4403      	add	r3, r0
 800c26e:	0c12      	lsrs	r2, r2, #16
 800c270:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c274:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c278:	b29b      	uxth	r3, r3
 800c27a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c27e:	45c1      	cmp	r9, r8
 800c280:	f841 3b04 	str.w	r3, [r1], #4
 800c284:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c288:	d2e6      	bcs.n	800c258 <quorem+0xa4>
 800c28a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c28e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c292:	b922      	cbnz	r2, 800c29e <quorem+0xea>
 800c294:	3b04      	subs	r3, #4
 800c296:	429d      	cmp	r5, r3
 800c298:	461a      	mov	r2, r3
 800c29a:	d30b      	bcc.n	800c2b4 <quorem+0x100>
 800c29c:	613c      	str	r4, [r7, #16]
 800c29e:	3601      	adds	r6, #1
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	b003      	add	sp, #12
 800c2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a8:	6812      	ldr	r2, [r2, #0]
 800c2aa:	3b04      	subs	r3, #4
 800c2ac:	2a00      	cmp	r2, #0
 800c2ae:	d1cb      	bne.n	800c248 <quorem+0x94>
 800c2b0:	3c01      	subs	r4, #1
 800c2b2:	e7c6      	b.n	800c242 <quorem+0x8e>
 800c2b4:	6812      	ldr	r2, [r2, #0]
 800c2b6:	3b04      	subs	r3, #4
 800c2b8:	2a00      	cmp	r2, #0
 800c2ba:	d1ef      	bne.n	800c29c <quorem+0xe8>
 800c2bc:	3c01      	subs	r4, #1
 800c2be:	e7ea      	b.n	800c296 <quorem+0xe2>
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	e7ee      	b.n	800c2a2 <quorem+0xee>
 800c2c4:	0000      	movs	r0, r0
	...

0800c2c8 <_dtoa_r>:
 800c2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2cc:	ed2d 8b02 	vpush	{d8}
 800c2d0:	69c7      	ldr	r7, [r0, #28]
 800c2d2:	b091      	sub	sp, #68	@ 0x44
 800c2d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c2d8:	ec55 4b10 	vmov	r4, r5, d0
 800c2dc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c2de:	9107      	str	r1, [sp, #28]
 800c2e0:	4681      	mov	r9, r0
 800c2e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2e4:	930d      	str	r3, [sp, #52]	@ 0x34
 800c2e6:	b97f      	cbnz	r7, 800c308 <_dtoa_r+0x40>
 800c2e8:	2010      	movs	r0, #16
 800c2ea:	f000 fd8d 	bl	800ce08 <malloc>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	f8c9 001c 	str.w	r0, [r9, #28]
 800c2f4:	b920      	cbnz	r0, 800c300 <_dtoa_r+0x38>
 800c2f6:	4ba0      	ldr	r3, [pc, #640]	@ (800c578 <_dtoa_r+0x2b0>)
 800c2f8:	21ef      	movs	r1, #239	@ 0xef
 800c2fa:	48a0      	ldr	r0, [pc, #640]	@ (800c57c <_dtoa_r+0x2b4>)
 800c2fc:	f002 fb74 	bl	800e9e8 <__assert_func>
 800c300:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c304:	6007      	str	r7, [r0, #0]
 800c306:	60c7      	str	r7, [r0, #12]
 800c308:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c30c:	6819      	ldr	r1, [r3, #0]
 800c30e:	b159      	cbz	r1, 800c328 <_dtoa_r+0x60>
 800c310:	685a      	ldr	r2, [r3, #4]
 800c312:	604a      	str	r2, [r1, #4]
 800c314:	2301      	movs	r3, #1
 800c316:	4093      	lsls	r3, r2
 800c318:	608b      	str	r3, [r1, #8]
 800c31a:	4648      	mov	r0, r9
 800c31c:	f000 fe6a 	bl	800cff4 <_Bfree>
 800c320:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c324:	2200      	movs	r2, #0
 800c326:	601a      	str	r2, [r3, #0]
 800c328:	1e2b      	subs	r3, r5, #0
 800c32a:	bfbb      	ittet	lt
 800c32c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c330:	9303      	strlt	r3, [sp, #12]
 800c332:	2300      	movge	r3, #0
 800c334:	2201      	movlt	r2, #1
 800c336:	bfac      	ite	ge
 800c338:	6033      	strge	r3, [r6, #0]
 800c33a:	6032      	strlt	r2, [r6, #0]
 800c33c:	4b90      	ldr	r3, [pc, #576]	@ (800c580 <_dtoa_r+0x2b8>)
 800c33e:	9e03      	ldr	r6, [sp, #12]
 800c340:	43b3      	bics	r3, r6
 800c342:	d110      	bne.n	800c366 <_dtoa_r+0x9e>
 800c344:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c346:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c34a:	6013      	str	r3, [r2, #0]
 800c34c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c350:	4323      	orrs	r3, r4
 800c352:	f000 84de 	beq.w	800cd12 <_dtoa_r+0xa4a>
 800c356:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c358:	4f8a      	ldr	r7, [pc, #552]	@ (800c584 <_dtoa_r+0x2bc>)
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f000 84e0 	beq.w	800cd20 <_dtoa_r+0xa58>
 800c360:	1cfb      	adds	r3, r7, #3
 800c362:	f000 bcdb 	b.w	800cd1c <_dtoa_r+0xa54>
 800c366:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c36a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c372:	d10a      	bne.n	800c38a <_dtoa_r+0xc2>
 800c374:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c376:	2301      	movs	r3, #1
 800c378:	6013      	str	r3, [r2, #0]
 800c37a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c37c:	b113      	cbz	r3, 800c384 <_dtoa_r+0xbc>
 800c37e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c380:	4b81      	ldr	r3, [pc, #516]	@ (800c588 <_dtoa_r+0x2c0>)
 800c382:	6013      	str	r3, [r2, #0]
 800c384:	4f81      	ldr	r7, [pc, #516]	@ (800c58c <_dtoa_r+0x2c4>)
 800c386:	f000 bccb 	b.w	800cd20 <_dtoa_r+0xa58>
 800c38a:	aa0e      	add	r2, sp, #56	@ 0x38
 800c38c:	a90f      	add	r1, sp, #60	@ 0x3c
 800c38e:	4648      	mov	r0, r9
 800c390:	eeb0 0b48 	vmov.f64	d0, d8
 800c394:	f001 f9d2 	bl	800d73c <__d2b>
 800c398:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c39c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c39e:	9001      	str	r0, [sp, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d045      	beq.n	800c430 <_dtoa_r+0x168>
 800c3a4:	eeb0 7b48 	vmov.f64	d7, d8
 800c3a8:	ee18 1a90 	vmov	r1, s17
 800c3ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c3b0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c3b4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c3b8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c3bc:	2500      	movs	r5, #0
 800c3be:	ee07 1a90 	vmov	s15, r1
 800c3c2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c3c6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c560 <_dtoa_r+0x298>
 800c3ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c3ce:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c568 <_dtoa_r+0x2a0>
 800c3d2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c3d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c570 <_dtoa_r+0x2a8>
 800c3da:	ee07 3a90 	vmov	s15, r3
 800c3de:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c3e2:	eeb0 7b46 	vmov.f64	d7, d6
 800c3e6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c3ea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c3ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3f6:	ee16 8a90 	vmov	r8, s13
 800c3fa:	d508      	bpl.n	800c40e <_dtoa_r+0x146>
 800c3fc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c400:	eeb4 6b47 	vcmp.f64	d6, d7
 800c404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c408:	bf18      	it	ne
 800c40a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800c40e:	f1b8 0f16 	cmp.w	r8, #22
 800c412:	d82b      	bhi.n	800c46c <_dtoa_r+0x1a4>
 800c414:	495e      	ldr	r1, [pc, #376]	@ (800c590 <_dtoa_r+0x2c8>)
 800c416:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c41a:	ed91 7b00 	vldr	d7, [r1]
 800c41e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c426:	d501      	bpl.n	800c42c <_dtoa_r+0x164>
 800c428:	f108 38ff 	add.w	r8, r8, #4294967295
 800c42c:	2100      	movs	r1, #0
 800c42e:	e01e      	b.n	800c46e <_dtoa_r+0x1a6>
 800c430:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c432:	4413      	add	r3, r2
 800c434:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c438:	2920      	cmp	r1, #32
 800c43a:	bfc1      	itttt	gt
 800c43c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c440:	408e      	lslgt	r6, r1
 800c442:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c446:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c44a:	bfd6      	itet	le
 800c44c:	f1c1 0120 	rsble	r1, r1, #32
 800c450:	4331      	orrgt	r1, r6
 800c452:	fa04 f101 	lslle.w	r1, r4, r1
 800c456:	ee07 1a90 	vmov	s15, r1
 800c45a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c45e:	3b01      	subs	r3, #1
 800c460:	ee17 1a90 	vmov	r1, s15
 800c464:	2501      	movs	r5, #1
 800c466:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c46a:	e7a8      	b.n	800c3be <_dtoa_r+0xf6>
 800c46c:	2101      	movs	r1, #1
 800c46e:	1ad2      	subs	r2, r2, r3
 800c470:	1e53      	subs	r3, r2, #1
 800c472:	9306      	str	r3, [sp, #24]
 800c474:	bf45      	ittet	mi
 800c476:	f1c2 0301 	rsbmi	r3, r2, #1
 800c47a:	9305      	strmi	r3, [sp, #20]
 800c47c:	2300      	movpl	r3, #0
 800c47e:	2300      	movmi	r3, #0
 800c480:	bf4c      	ite	mi
 800c482:	9306      	strmi	r3, [sp, #24]
 800c484:	9305      	strpl	r3, [sp, #20]
 800c486:	f1b8 0f00 	cmp.w	r8, #0
 800c48a:	910c      	str	r1, [sp, #48]	@ 0x30
 800c48c:	db18      	blt.n	800c4c0 <_dtoa_r+0x1f8>
 800c48e:	9b06      	ldr	r3, [sp, #24]
 800c490:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c494:	4443      	add	r3, r8
 800c496:	9306      	str	r3, [sp, #24]
 800c498:	2300      	movs	r3, #0
 800c49a:	9a07      	ldr	r2, [sp, #28]
 800c49c:	2a09      	cmp	r2, #9
 800c49e:	d849      	bhi.n	800c534 <_dtoa_r+0x26c>
 800c4a0:	2a05      	cmp	r2, #5
 800c4a2:	bfc4      	itt	gt
 800c4a4:	3a04      	subgt	r2, #4
 800c4a6:	9207      	strgt	r2, [sp, #28]
 800c4a8:	9a07      	ldr	r2, [sp, #28]
 800c4aa:	f1a2 0202 	sub.w	r2, r2, #2
 800c4ae:	bfcc      	ite	gt
 800c4b0:	2400      	movgt	r4, #0
 800c4b2:	2401      	movle	r4, #1
 800c4b4:	2a03      	cmp	r2, #3
 800c4b6:	d848      	bhi.n	800c54a <_dtoa_r+0x282>
 800c4b8:	e8df f002 	tbb	[pc, r2]
 800c4bc:	3a2c2e0b 	.word	0x3a2c2e0b
 800c4c0:	9b05      	ldr	r3, [sp, #20]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	eba3 0308 	sub.w	r3, r3, r8
 800c4c8:	9305      	str	r3, [sp, #20]
 800c4ca:	920a      	str	r2, [sp, #40]	@ 0x28
 800c4cc:	f1c8 0300 	rsb	r3, r8, #0
 800c4d0:	e7e3      	b.n	800c49a <_dtoa_r+0x1d2>
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	9208      	str	r2, [sp, #32]
 800c4d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4d8:	2a00      	cmp	r2, #0
 800c4da:	dc39      	bgt.n	800c550 <_dtoa_r+0x288>
 800c4dc:	f04f 0b01 	mov.w	fp, #1
 800c4e0:	46da      	mov	sl, fp
 800c4e2:	465a      	mov	r2, fp
 800c4e4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c4e8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c4ec:	2100      	movs	r1, #0
 800c4ee:	2004      	movs	r0, #4
 800c4f0:	f100 0614 	add.w	r6, r0, #20
 800c4f4:	4296      	cmp	r6, r2
 800c4f6:	d930      	bls.n	800c55a <_dtoa_r+0x292>
 800c4f8:	6079      	str	r1, [r7, #4]
 800c4fa:	4648      	mov	r0, r9
 800c4fc:	9304      	str	r3, [sp, #16]
 800c4fe:	f000 fd39 	bl	800cf74 <_Balloc>
 800c502:	9b04      	ldr	r3, [sp, #16]
 800c504:	4607      	mov	r7, r0
 800c506:	2800      	cmp	r0, #0
 800c508:	d146      	bne.n	800c598 <_dtoa_r+0x2d0>
 800c50a:	4b22      	ldr	r3, [pc, #136]	@ (800c594 <_dtoa_r+0x2cc>)
 800c50c:	4602      	mov	r2, r0
 800c50e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c512:	e6f2      	b.n	800c2fa <_dtoa_r+0x32>
 800c514:	2201      	movs	r2, #1
 800c516:	e7dd      	b.n	800c4d4 <_dtoa_r+0x20c>
 800c518:	2200      	movs	r2, #0
 800c51a:	9208      	str	r2, [sp, #32]
 800c51c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c51e:	eb08 0b02 	add.w	fp, r8, r2
 800c522:	f10b 0a01 	add.w	sl, fp, #1
 800c526:	4652      	mov	r2, sl
 800c528:	2a01      	cmp	r2, #1
 800c52a:	bfb8      	it	lt
 800c52c:	2201      	movlt	r2, #1
 800c52e:	e7db      	b.n	800c4e8 <_dtoa_r+0x220>
 800c530:	2201      	movs	r2, #1
 800c532:	e7f2      	b.n	800c51a <_dtoa_r+0x252>
 800c534:	2401      	movs	r4, #1
 800c536:	2200      	movs	r2, #0
 800c538:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c53c:	f04f 3bff 	mov.w	fp, #4294967295
 800c540:	2100      	movs	r1, #0
 800c542:	46da      	mov	sl, fp
 800c544:	2212      	movs	r2, #18
 800c546:	9109      	str	r1, [sp, #36]	@ 0x24
 800c548:	e7ce      	b.n	800c4e8 <_dtoa_r+0x220>
 800c54a:	2201      	movs	r2, #1
 800c54c:	9208      	str	r2, [sp, #32]
 800c54e:	e7f5      	b.n	800c53c <_dtoa_r+0x274>
 800c550:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800c554:	46da      	mov	sl, fp
 800c556:	465a      	mov	r2, fp
 800c558:	e7c6      	b.n	800c4e8 <_dtoa_r+0x220>
 800c55a:	3101      	adds	r1, #1
 800c55c:	0040      	lsls	r0, r0, #1
 800c55e:	e7c7      	b.n	800c4f0 <_dtoa_r+0x228>
 800c560:	636f4361 	.word	0x636f4361
 800c564:	3fd287a7 	.word	0x3fd287a7
 800c568:	8b60c8b3 	.word	0x8b60c8b3
 800c56c:	3fc68a28 	.word	0x3fc68a28
 800c570:	509f79fb 	.word	0x509f79fb
 800c574:	3fd34413 	.word	0x3fd34413
 800c578:	0800fc52 	.word	0x0800fc52
 800c57c:	0800fc69 	.word	0x0800fc69
 800c580:	7ff00000 	.word	0x7ff00000
 800c584:	0800fc4e 	.word	0x0800fc4e
 800c588:	0800fc1d 	.word	0x0800fc1d
 800c58c:	0800fc1c 	.word	0x0800fc1c
 800c590:	0800fd60 	.word	0x0800fd60
 800c594:	0800fcc1 	.word	0x0800fcc1
 800c598:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c59c:	f1ba 0f0e 	cmp.w	sl, #14
 800c5a0:	6010      	str	r0, [r2, #0]
 800c5a2:	d86f      	bhi.n	800c684 <_dtoa_r+0x3bc>
 800c5a4:	2c00      	cmp	r4, #0
 800c5a6:	d06d      	beq.n	800c684 <_dtoa_r+0x3bc>
 800c5a8:	f1b8 0f00 	cmp.w	r8, #0
 800c5ac:	f340 80c2 	ble.w	800c734 <_dtoa_r+0x46c>
 800c5b0:	4aca      	ldr	r2, [pc, #808]	@ (800c8dc <_dtoa_r+0x614>)
 800c5b2:	f008 010f 	and.w	r1, r8, #15
 800c5b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c5ba:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c5be:	ed92 7b00 	vldr	d7, [r2]
 800c5c2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c5c6:	f000 80a9 	beq.w	800c71c <_dtoa_r+0x454>
 800c5ca:	4ac5      	ldr	r2, [pc, #788]	@ (800c8e0 <_dtoa_r+0x618>)
 800c5cc:	ed92 6b08 	vldr	d6, [r2, #32]
 800c5d0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c5d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c5d8:	f001 010f 	and.w	r1, r1, #15
 800c5dc:	2203      	movs	r2, #3
 800c5de:	48c0      	ldr	r0, [pc, #768]	@ (800c8e0 <_dtoa_r+0x618>)
 800c5e0:	2900      	cmp	r1, #0
 800c5e2:	f040 809d 	bne.w	800c720 <_dtoa_r+0x458>
 800c5e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c5ea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c5ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c5f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c5f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c5f8:	2900      	cmp	r1, #0
 800c5fa:	f000 80c1 	beq.w	800c780 <_dtoa_r+0x4b8>
 800c5fe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c602:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c60a:	f140 80b9 	bpl.w	800c780 <_dtoa_r+0x4b8>
 800c60e:	f1ba 0f00 	cmp.w	sl, #0
 800c612:	f000 80b5 	beq.w	800c780 <_dtoa_r+0x4b8>
 800c616:	f1bb 0f00 	cmp.w	fp, #0
 800c61a:	dd31      	ble.n	800c680 <_dtoa_r+0x3b8>
 800c61c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c620:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c624:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c628:	f108 31ff 	add.w	r1, r8, #4294967295
 800c62c:	9104      	str	r1, [sp, #16]
 800c62e:	3201      	adds	r2, #1
 800c630:	465c      	mov	r4, fp
 800c632:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c636:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c63a:	ee07 2a90 	vmov	s15, r2
 800c63e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c642:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c646:	ee15 2a90 	vmov	r2, s11
 800c64a:	ec51 0b15 	vmov	r0, r1, d5
 800c64e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c652:	2c00      	cmp	r4, #0
 800c654:	f040 8098 	bne.w	800c788 <_dtoa_r+0x4c0>
 800c658:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c65c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c660:	ec41 0b17 	vmov	d7, r0, r1
 800c664:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c66c:	f300 8261 	bgt.w	800cb32 <_dtoa_r+0x86a>
 800c670:	eeb1 7b47 	vneg.f64	d7, d7
 800c674:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c67c:	f100 80f5 	bmi.w	800c86a <_dtoa_r+0x5a2>
 800c680:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c684:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c686:	2a00      	cmp	r2, #0
 800c688:	f2c0 812c 	blt.w	800c8e4 <_dtoa_r+0x61c>
 800c68c:	f1b8 0f0e 	cmp.w	r8, #14
 800c690:	f300 8128 	bgt.w	800c8e4 <_dtoa_r+0x61c>
 800c694:	4b91      	ldr	r3, [pc, #580]	@ (800c8dc <_dtoa_r+0x614>)
 800c696:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c69a:	ed93 6b00 	vldr	d6, [r3]
 800c69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	da03      	bge.n	800c6ac <_dtoa_r+0x3e4>
 800c6a4:	f1ba 0f00 	cmp.w	sl, #0
 800c6a8:	f340 80d2 	ble.w	800c850 <_dtoa_r+0x588>
 800c6ac:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c6b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6b4:	463e      	mov	r6, r7
 800c6b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c6ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c6be:	ee15 3a10 	vmov	r3, s10
 800c6c2:	3330      	adds	r3, #48	@ 0x30
 800c6c4:	f806 3b01 	strb.w	r3, [r6], #1
 800c6c8:	1bf3      	subs	r3, r6, r7
 800c6ca:	459a      	cmp	sl, r3
 800c6cc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c6d0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c6d4:	f040 80f8 	bne.w	800c8c8 <_dtoa_r+0x600>
 800c6d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c6dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6e4:	f300 80dd 	bgt.w	800c8a2 <_dtoa_r+0x5da>
 800c6e8:	eeb4 7b46 	vcmp.f64	d7, d6
 800c6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f0:	d104      	bne.n	800c6fc <_dtoa_r+0x434>
 800c6f2:	ee15 3a10 	vmov	r3, s10
 800c6f6:	07db      	lsls	r3, r3, #31
 800c6f8:	f100 80d3 	bmi.w	800c8a2 <_dtoa_r+0x5da>
 800c6fc:	9901      	ldr	r1, [sp, #4]
 800c6fe:	4648      	mov	r0, r9
 800c700:	f000 fc78 	bl	800cff4 <_Bfree>
 800c704:	2300      	movs	r3, #0
 800c706:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c708:	7033      	strb	r3, [r6, #0]
 800c70a:	f108 0301 	add.w	r3, r8, #1
 800c70e:	6013      	str	r3, [r2, #0]
 800c710:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c712:	2b00      	cmp	r3, #0
 800c714:	f000 8304 	beq.w	800cd20 <_dtoa_r+0xa58>
 800c718:	601e      	str	r6, [r3, #0]
 800c71a:	e301      	b.n	800cd20 <_dtoa_r+0xa58>
 800c71c:	2202      	movs	r2, #2
 800c71e:	e75e      	b.n	800c5de <_dtoa_r+0x316>
 800c720:	07cc      	lsls	r4, r1, #31
 800c722:	d504      	bpl.n	800c72e <_dtoa_r+0x466>
 800c724:	ed90 6b00 	vldr	d6, [r0]
 800c728:	3201      	adds	r2, #1
 800c72a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c72e:	1049      	asrs	r1, r1, #1
 800c730:	3008      	adds	r0, #8
 800c732:	e755      	b.n	800c5e0 <_dtoa_r+0x318>
 800c734:	d022      	beq.n	800c77c <_dtoa_r+0x4b4>
 800c736:	f1c8 0100 	rsb	r1, r8, #0
 800c73a:	4a68      	ldr	r2, [pc, #416]	@ (800c8dc <_dtoa_r+0x614>)
 800c73c:	f001 000f 	and.w	r0, r1, #15
 800c740:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c744:	ed92 7b00 	vldr	d7, [r2]
 800c748:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c74c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c750:	4863      	ldr	r0, [pc, #396]	@ (800c8e0 <_dtoa_r+0x618>)
 800c752:	1109      	asrs	r1, r1, #4
 800c754:	2400      	movs	r4, #0
 800c756:	2202      	movs	r2, #2
 800c758:	b929      	cbnz	r1, 800c766 <_dtoa_r+0x49e>
 800c75a:	2c00      	cmp	r4, #0
 800c75c:	f43f af49 	beq.w	800c5f2 <_dtoa_r+0x32a>
 800c760:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c764:	e745      	b.n	800c5f2 <_dtoa_r+0x32a>
 800c766:	07ce      	lsls	r6, r1, #31
 800c768:	d505      	bpl.n	800c776 <_dtoa_r+0x4ae>
 800c76a:	ed90 6b00 	vldr	d6, [r0]
 800c76e:	3201      	adds	r2, #1
 800c770:	2401      	movs	r4, #1
 800c772:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c776:	1049      	asrs	r1, r1, #1
 800c778:	3008      	adds	r0, #8
 800c77a:	e7ed      	b.n	800c758 <_dtoa_r+0x490>
 800c77c:	2202      	movs	r2, #2
 800c77e:	e738      	b.n	800c5f2 <_dtoa_r+0x32a>
 800c780:	f8cd 8010 	str.w	r8, [sp, #16]
 800c784:	4654      	mov	r4, sl
 800c786:	e754      	b.n	800c632 <_dtoa_r+0x36a>
 800c788:	4a54      	ldr	r2, [pc, #336]	@ (800c8dc <_dtoa_r+0x614>)
 800c78a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c78e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c792:	9a08      	ldr	r2, [sp, #32]
 800c794:	ec41 0b17 	vmov	d7, r0, r1
 800c798:	443c      	add	r4, r7
 800c79a:	b34a      	cbz	r2, 800c7f0 <_dtoa_r+0x528>
 800c79c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c7a0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c7a4:	463e      	mov	r6, r7
 800c7a6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c7aa:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c7ae:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c7b2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c7b6:	ee14 2a90 	vmov	r2, s9
 800c7ba:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c7be:	3230      	adds	r2, #48	@ 0x30
 800c7c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c7c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7cc:	f806 2b01 	strb.w	r2, [r6], #1
 800c7d0:	d438      	bmi.n	800c844 <_dtoa_r+0x57c>
 800c7d2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c7d6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7de:	d462      	bmi.n	800c8a6 <_dtoa_r+0x5de>
 800c7e0:	42a6      	cmp	r6, r4
 800c7e2:	f43f af4d 	beq.w	800c680 <_dtoa_r+0x3b8>
 800c7e6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c7ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c7ee:	e7e0      	b.n	800c7b2 <_dtoa_r+0x4ea>
 800c7f0:	4621      	mov	r1, r4
 800c7f2:	463e      	mov	r6, r7
 800c7f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c7f8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c7fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c800:	ee14 2a90 	vmov	r2, s9
 800c804:	3230      	adds	r2, #48	@ 0x30
 800c806:	f806 2b01 	strb.w	r2, [r6], #1
 800c80a:	42a6      	cmp	r6, r4
 800c80c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c810:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c814:	d119      	bne.n	800c84a <_dtoa_r+0x582>
 800c816:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c81a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c81e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c826:	dc3e      	bgt.n	800c8a6 <_dtoa_r+0x5de>
 800c828:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c82c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c834:	f57f af24 	bpl.w	800c680 <_dtoa_r+0x3b8>
 800c838:	460e      	mov	r6, r1
 800c83a:	3901      	subs	r1, #1
 800c83c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c840:	2b30      	cmp	r3, #48	@ 0x30
 800c842:	d0f9      	beq.n	800c838 <_dtoa_r+0x570>
 800c844:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c848:	e758      	b.n	800c6fc <_dtoa_r+0x434>
 800c84a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c84e:	e7d5      	b.n	800c7fc <_dtoa_r+0x534>
 800c850:	d10b      	bne.n	800c86a <_dtoa_r+0x5a2>
 800c852:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c856:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c85a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c85e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c866:	f2c0 8161 	blt.w	800cb2c <_dtoa_r+0x864>
 800c86a:	2400      	movs	r4, #0
 800c86c:	4625      	mov	r5, r4
 800c86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c870:	43db      	mvns	r3, r3
 800c872:	9304      	str	r3, [sp, #16]
 800c874:	463e      	mov	r6, r7
 800c876:	f04f 0800 	mov.w	r8, #0
 800c87a:	4621      	mov	r1, r4
 800c87c:	4648      	mov	r0, r9
 800c87e:	f000 fbb9 	bl	800cff4 <_Bfree>
 800c882:	2d00      	cmp	r5, #0
 800c884:	d0de      	beq.n	800c844 <_dtoa_r+0x57c>
 800c886:	f1b8 0f00 	cmp.w	r8, #0
 800c88a:	d005      	beq.n	800c898 <_dtoa_r+0x5d0>
 800c88c:	45a8      	cmp	r8, r5
 800c88e:	d003      	beq.n	800c898 <_dtoa_r+0x5d0>
 800c890:	4641      	mov	r1, r8
 800c892:	4648      	mov	r0, r9
 800c894:	f000 fbae 	bl	800cff4 <_Bfree>
 800c898:	4629      	mov	r1, r5
 800c89a:	4648      	mov	r0, r9
 800c89c:	f000 fbaa 	bl	800cff4 <_Bfree>
 800c8a0:	e7d0      	b.n	800c844 <_dtoa_r+0x57c>
 800c8a2:	f8cd 8010 	str.w	r8, [sp, #16]
 800c8a6:	4633      	mov	r3, r6
 800c8a8:	461e      	mov	r6, r3
 800c8aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8ae:	2a39      	cmp	r2, #57	@ 0x39
 800c8b0:	d106      	bne.n	800c8c0 <_dtoa_r+0x5f8>
 800c8b2:	429f      	cmp	r7, r3
 800c8b4:	d1f8      	bne.n	800c8a8 <_dtoa_r+0x5e0>
 800c8b6:	9a04      	ldr	r2, [sp, #16]
 800c8b8:	3201      	adds	r2, #1
 800c8ba:	9204      	str	r2, [sp, #16]
 800c8bc:	2230      	movs	r2, #48	@ 0x30
 800c8be:	703a      	strb	r2, [r7, #0]
 800c8c0:	781a      	ldrb	r2, [r3, #0]
 800c8c2:	3201      	adds	r2, #1
 800c8c4:	701a      	strb	r2, [r3, #0]
 800c8c6:	e7bd      	b.n	800c844 <_dtoa_r+0x57c>
 800c8c8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c8cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8d4:	f47f aeef 	bne.w	800c6b6 <_dtoa_r+0x3ee>
 800c8d8:	e710      	b.n	800c6fc <_dtoa_r+0x434>
 800c8da:	bf00      	nop
 800c8dc:	0800fd60 	.word	0x0800fd60
 800c8e0:	0800fd38 	.word	0x0800fd38
 800c8e4:	9908      	ldr	r1, [sp, #32]
 800c8e6:	2900      	cmp	r1, #0
 800c8e8:	f000 80e3 	beq.w	800cab2 <_dtoa_r+0x7ea>
 800c8ec:	9907      	ldr	r1, [sp, #28]
 800c8ee:	2901      	cmp	r1, #1
 800c8f0:	f300 80c8 	bgt.w	800ca84 <_dtoa_r+0x7bc>
 800c8f4:	2d00      	cmp	r5, #0
 800c8f6:	f000 80c1 	beq.w	800ca7c <_dtoa_r+0x7b4>
 800c8fa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c8fe:	9e05      	ldr	r6, [sp, #20]
 800c900:	461c      	mov	r4, r3
 800c902:	9304      	str	r3, [sp, #16]
 800c904:	9b05      	ldr	r3, [sp, #20]
 800c906:	4413      	add	r3, r2
 800c908:	9305      	str	r3, [sp, #20]
 800c90a:	9b06      	ldr	r3, [sp, #24]
 800c90c:	2101      	movs	r1, #1
 800c90e:	4413      	add	r3, r2
 800c910:	4648      	mov	r0, r9
 800c912:	9306      	str	r3, [sp, #24]
 800c914:	f000 fc6c 	bl	800d1f0 <__i2b>
 800c918:	9b04      	ldr	r3, [sp, #16]
 800c91a:	4605      	mov	r5, r0
 800c91c:	b166      	cbz	r6, 800c938 <_dtoa_r+0x670>
 800c91e:	9a06      	ldr	r2, [sp, #24]
 800c920:	2a00      	cmp	r2, #0
 800c922:	dd09      	ble.n	800c938 <_dtoa_r+0x670>
 800c924:	42b2      	cmp	r2, r6
 800c926:	9905      	ldr	r1, [sp, #20]
 800c928:	bfa8      	it	ge
 800c92a:	4632      	movge	r2, r6
 800c92c:	1a89      	subs	r1, r1, r2
 800c92e:	9105      	str	r1, [sp, #20]
 800c930:	9906      	ldr	r1, [sp, #24]
 800c932:	1ab6      	subs	r6, r6, r2
 800c934:	1a8a      	subs	r2, r1, r2
 800c936:	9206      	str	r2, [sp, #24]
 800c938:	b1fb      	cbz	r3, 800c97a <_dtoa_r+0x6b2>
 800c93a:	9a08      	ldr	r2, [sp, #32]
 800c93c:	2a00      	cmp	r2, #0
 800c93e:	f000 80bc 	beq.w	800caba <_dtoa_r+0x7f2>
 800c942:	b19c      	cbz	r4, 800c96c <_dtoa_r+0x6a4>
 800c944:	4629      	mov	r1, r5
 800c946:	4622      	mov	r2, r4
 800c948:	4648      	mov	r0, r9
 800c94a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c94c:	f000 fd10 	bl	800d370 <__pow5mult>
 800c950:	9a01      	ldr	r2, [sp, #4]
 800c952:	4601      	mov	r1, r0
 800c954:	4605      	mov	r5, r0
 800c956:	4648      	mov	r0, r9
 800c958:	f000 fc60 	bl	800d21c <__multiply>
 800c95c:	9901      	ldr	r1, [sp, #4]
 800c95e:	9004      	str	r0, [sp, #16]
 800c960:	4648      	mov	r0, r9
 800c962:	f000 fb47 	bl	800cff4 <_Bfree>
 800c966:	9a04      	ldr	r2, [sp, #16]
 800c968:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c96a:	9201      	str	r2, [sp, #4]
 800c96c:	1b1a      	subs	r2, r3, r4
 800c96e:	d004      	beq.n	800c97a <_dtoa_r+0x6b2>
 800c970:	9901      	ldr	r1, [sp, #4]
 800c972:	4648      	mov	r0, r9
 800c974:	f000 fcfc 	bl	800d370 <__pow5mult>
 800c978:	9001      	str	r0, [sp, #4]
 800c97a:	2101      	movs	r1, #1
 800c97c:	4648      	mov	r0, r9
 800c97e:	f000 fc37 	bl	800d1f0 <__i2b>
 800c982:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c984:	4604      	mov	r4, r0
 800c986:	2b00      	cmp	r3, #0
 800c988:	f000 81d0 	beq.w	800cd2c <_dtoa_r+0xa64>
 800c98c:	461a      	mov	r2, r3
 800c98e:	4601      	mov	r1, r0
 800c990:	4648      	mov	r0, r9
 800c992:	f000 fced 	bl	800d370 <__pow5mult>
 800c996:	9b07      	ldr	r3, [sp, #28]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	4604      	mov	r4, r0
 800c99c:	f300 8095 	bgt.w	800caca <_dtoa_r+0x802>
 800c9a0:	9b02      	ldr	r3, [sp, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f040 808b 	bne.w	800cabe <_dtoa_r+0x7f6>
 800c9a8:	9b03      	ldr	r3, [sp, #12]
 800c9aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c9ae:	2a00      	cmp	r2, #0
 800c9b0:	f040 8087 	bne.w	800cac2 <_dtoa_r+0x7fa>
 800c9b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c9b8:	0d12      	lsrs	r2, r2, #20
 800c9ba:	0512      	lsls	r2, r2, #20
 800c9bc:	2a00      	cmp	r2, #0
 800c9be:	f000 8082 	beq.w	800cac6 <_dtoa_r+0x7fe>
 800c9c2:	9b05      	ldr	r3, [sp, #20]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	9305      	str	r3, [sp, #20]
 800c9c8:	9b06      	ldr	r3, [sp, #24]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	9306      	str	r3, [sp, #24]
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c9d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f000 81af 	beq.w	800cd38 <_dtoa_r+0xa70>
 800c9da:	6922      	ldr	r2, [r4, #16]
 800c9dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c9e0:	6910      	ldr	r0, [r2, #16]
 800c9e2:	f000 fbb9 	bl	800d158 <__hi0bits>
 800c9e6:	f1c0 0020 	rsb	r0, r0, #32
 800c9ea:	9b06      	ldr	r3, [sp, #24]
 800c9ec:	4418      	add	r0, r3
 800c9ee:	f010 001f 	ands.w	r0, r0, #31
 800c9f2:	d076      	beq.n	800cae2 <_dtoa_r+0x81a>
 800c9f4:	f1c0 0220 	rsb	r2, r0, #32
 800c9f8:	2a04      	cmp	r2, #4
 800c9fa:	dd69      	ble.n	800cad0 <_dtoa_r+0x808>
 800c9fc:	9b05      	ldr	r3, [sp, #20]
 800c9fe:	f1c0 001c 	rsb	r0, r0, #28
 800ca02:	4403      	add	r3, r0
 800ca04:	9305      	str	r3, [sp, #20]
 800ca06:	9b06      	ldr	r3, [sp, #24]
 800ca08:	4406      	add	r6, r0
 800ca0a:	4403      	add	r3, r0
 800ca0c:	9306      	str	r3, [sp, #24]
 800ca0e:	9b05      	ldr	r3, [sp, #20]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	dd05      	ble.n	800ca20 <_dtoa_r+0x758>
 800ca14:	9901      	ldr	r1, [sp, #4]
 800ca16:	461a      	mov	r2, r3
 800ca18:	4648      	mov	r0, r9
 800ca1a:	f000 fd03 	bl	800d424 <__lshift>
 800ca1e:	9001      	str	r0, [sp, #4]
 800ca20:	9b06      	ldr	r3, [sp, #24]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	dd05      	ble.n	800ca32 <_dtoa_r+0x76a>
 800ca26:	4621      	mov	r1, r4
 800ca28:	461a      	mov	r2, r3
 800ca2a:	4648      	mov	r0, r9
 800ca2c:	f000 fcfa 	bl	800d424 <__lshift>
 800ca30:	4604      	mov	r4, r0
 800ca32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d056      	beq.n	800cae6 <_dtoa_r+0x81e>
 800ca38:	9801      	ldr	r0, [sp, #4]
 800ca3a:	4621      	mov	r1, r4
 800ca3c:	f000 fd5e 	bl	800d4fc <__mcmp>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	da50      	bge.n	800cae6 <_dtoa_r+0x81e>
 800ca44:	f108 33ff 	add.w	r3, r8, #4294967295
 800ca48:	9304      	str	r3, [sp, #16]
 800ca4a:	9901      	ldr	r1, [sp, #4]
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	220a      	movs	r2, #10
 800ca50:	4648      	mov	r0, r9
 800ca52:	f000 faf1 	bl	800d038 <__multadd>
 800ca56:	9b08      	ldr	r3, [sp, #32]
 800ca58:	9001      	str	r0, [sp, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	f000 816e 	beq.w	800cd3c <_dtoa_r+0xa74>
 800ca60:	4629      	mov	r1, r5
 800ca62:	2300      	movs	r3, #0
 800ca64:	220a      	movs	r2, #10
 800ca66:	4648      	mov	r0, r9
 800ca68:	f000 fae6 	bl	800d038 <__multadd>
 800ca6c:	f1bb 0f00 	cmp.w	fp, #0
 800ca70:	4605      	mov	r5, r0
 800ca72:	dc64      	bgt.n	800cb3e <_dtoa_r+0x876>
 800ca74:	9b07      	ldr	r3, [sp, #28]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	dc3e      	bgt.n	800caf8 <_dtoa_r+0x830>
 800ca7a:	e060      	b.n	800cb3e <_dtoa_r+0x876>
 800ca7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca7e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ca82:	e73c      	b.n	800c8fe <_dtoa_r+0x636>
 800ca84:	f10a 34ff 	add.w	r4, sl, #4294967295
 800ca88:	42a3      	cmp	r3, r4
 800ca8a:	bfbf      	itttt	lt
 800ca8c:	1ae2      	sublt	r2, r4, r3
 800ca8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ca90:	189b      	addlt	r3, r3, r2
 800ca92:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800ca94:	bfae      	itee	ge
 800ca96:	1b1c      	subge	r4, r3, r4
 800ca98:	4623      	movlt	r3, r4
 800ca9a:	2400      	movlt	r4, #0
 800ca9c:	f1ba 0f00 	cmp.w	sl, #0
 800caa0:	bfb5      	itete	lt
 800caa2:	9a05      	ldrlt	r2, [sp, #20]
 800caa4:	9e05      	ldrge	r6, [sp, #20]
 800caa6:	eba2 060a 	sublt.w	r6, r2, sl
 800caaa:	4652      	movge	r2, sl
 800caac:	bfb8      	it	lt
 800caae:	2200      	movlt	r2, #0
 800cab0:	e727      	b.n	800c902 <_dtoa_r+0x63a>
 800cab2:	9e05      	ldr	r6, [sp, #20]
 800cab4:	9d08      	ldr	r5, [sp, #32]
 800cab6:	461c      	mov	r4, r3
 800cab8:	e730      	b.n	800c91c <_dtoa_r+0x654>
 800caba:	461a      	mov	r2, r3
 800cabc:	e758      	b.n	800c970 <_dtoa_r+0x6a8>
 800cabe:	2300      	movs	r3, #0
 800cac0:	e786      	b.n	800c9d0 <_dtoa_r+0x708>
 800cac2:	9b02      	ldr	r3, [sp, #8]
 800cac4:	e784      	b.n	800c9d0 <_dtoa_r+0x708>
 800cac6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cac8:	e783      	b.n	800c9d2 <_dtoa_r+0x70a>
 800caca:	2300      	movs	r3, #0
 800cacc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cace:	e784      	b.n	800c9da <_dtoa_r+0x712>
 800cad0:	d09d      	beq.n	800ca0e <_dtoa_r+0x746>
 800cad2:	9b05      	ldr	r3, [sp, #20]
 800cad4:	321c      	adds	r2, #28
 800cad6:	4413      	add	r3, r2
 800cad8:	9305      	str	r3, [sp, #20]
 800cada:	9b06      	ldr	r3, [sp, #24]
 800cadc:	4416      	add	r6, r2
 800cade:	4413      	add	r3, r2
 800cae0:	e794      	b.n	800ca0c <_dtoa_r+0x744>
 800cae2:	4602      	mov	r2, r0
 800cae4:	e7f5      	b.n	800cad2 <_dtoa_r+0x80a>
 800cae6:	f1ba 0f00 	cmp.w	sl, #0
 800caea:	f8cd 8010 	str.w	r8, [sp, #16]
 800caee:	46d3      	mov	fp, sl
 800caf0:	dc21      	bgt.n	800cb36 <_dtoa_r+0x86e>
 800caf2:	9b07      	ldr	r3, [sp, #28]
 800caf4:	2b02      	cmp	r3, #2
 800caf6:	dd1e      	ble.n	800cb36 <_dtoa_r+0x86e>
 800caf8:	f1bb 0f00 	cmp.w	fp, #0
 800cafc:	f47f aeb7 	bne.w	800c86e <_dtoa_r+0x5a6>
 800cb00:	4621      	mov	r1, r4
 800cb02:	465b      	mov	r3, fp
 800cb04:	2205      	movs	r2, #5
 800cb06:	4648      	mov	r0, r9
 800cb08:	f000 fa96 	bl	800d038 <__multadd>
 800cb0c:	4601      	mov	r1, r0
 800cb0e:	4604      	mov	r4, r0
 800cb10:	9801      	ldr	r0, [sp, #4]
 800cb12:	f000 fcf3 	bl	800d4fc <__mcmp>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	f77f aea9 	ble.w	800c86e <_dtoa_r+0x5a6>
 800cb1c:	463e      	mov	r6, r7
 800cb1e:	2331      	movs	r3, #49	@ 0x31
 800cb20:	f806 3b01 	strb.w	r3, [r6], #1
 800cb24:	9b04      	ldr	r3, [sp, #16]
 800cb26:	3301      	adds	r3, #1
 800cb28:	9304      	str	r3, [sp, #16]
 800cb2a:	e6a4      	b.n	800c876 <_dtoa_r+0x5ae>
 800cb2c:	f8cd 8010 	str.w	r8, [sp, #16]
 800cb30:	4654      	mov	r4, sl
 800cb32:	4625      	mov	r5, r4
 800cb34:	e7f2      	b.n	800cb1c <_dtoa_r+0x854>
 800cb36:	9b08      	ldr	r3, [sp, #32]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f000 8103 	beq.w	800cd44 <_dtoa_r+0xa7c>
 800cb3e:	2e00      	cmp	r6, #0
 800cb40:	dd05      	ble.n	800cb4e <_dtoa_r+0x886>
 800cb42:	4629      	mov	r1, r5
 800cb44:	4632      	mov	r2, r6
 800cb46:	4648      	mov	r0, r9
 800cb48:	f000 fc6c 	bl	800d424 <__lshift>
 800cb4c:	4605      	mov	r5, r0
 800cb4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d058      	beq.n	800cc06 <_dtoa_r+0x93e>
 800cb54:	6869      	ldr	r1, [r5, #4]
 800cb56:	4648      	mov	r0, r9
 800cb58:	f000 fa0c 	bl	800cf74 <_Balloc>
 800cb5c:	4606      	mov	r6, r0
 800cb5e:	b928      	cbnz	r0, 800cb6c <_dtoa_r+0x8a4>
 800cb60:	4b82      	ldr	r3, [pc, #520]	@ (800cd6c <_dtoa_r+0xaa4>)
 800cb62:	4602      	mov	r2, r0
 800cb64:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cb68:	f7ff bbc7 	b.w	800c2fa <_dtoa_r+0x32>
 800cb6c:	692a      	ldr	r2, [r5, #16]
 800cb6e:	3202      	adds	r2, #2
 800cb70:	0092      	lsls	r2, r2, #2
 800cb72:	f105 010c 	add.w	r1, r5, #12
 800cb76:	300c      	adds	r0, #12
 800cb78:	f001 ff1e 	bl	800e9b8 <memcpy>
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	4631      	mov	r1, r6
 800cb80:	4648      	mov	r0, r9
 800cb82:	f000 fc4f 	bl	800d424 <__lshift>
 800cb86:	1c7b      	adds	r3, r7, #1
 800cb88:	9305      	str	r3, [sp, #20]
 800cb8a:	eb07 030b 	add.w	r3, r7, fp
 800cb8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb90:	9b02      	ldr	r3, [sp, #8]
 800cb92:	f003 0301 	and.w	r3, r3, #1
 800cb96:	46a8      	mov	r8, r5
 800cb98:	9308      	str	r3, [sp, #32]
 800cb9a:	4605      	mov	r5, r0
 800cb9c:	9b05      	ldr	r3, [sp, #20]
 800cb9e:	9801      	ldr	r0, [sp, #4]
 800cba0:	4621      	mov	r1, r4
 800cba2:	f103 3bff 	add.w	fp, r3, #4294967295
 800cba6:	f7ff fb05 	bl	800c1b4 <quorem>
 800cbaa:	4641      	mov	r1, r8
 800cbac:	9002      	str	r0, [sp, #8]
 800cbae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800cbb2:	9801      	ldr	r0, [sp, #4]
 800cbb4:	f000 fca2 	bl	800d4fc <__mcmp>
 800cbb8:	462a      	mov	r2, r5
 800cbba:	9006      	str	r0, [sp, #24]
 800cbbc:	4621      	mov	r1, r4
 800cbbe:	4648      	mov	r0, r9
 800cbc0:	f000 fcb8 	bl	800d534 <__mdiff>
 800cbc4:	68c2      	ldr	r2, [r0, #12]
 800cbc6:	4606      	mov	r6, r0
 800cbc8:	b9fa      	cbnz	r2, 800cc0a <_dtoa_r+0x942>
 800cbca:	4601      	mov	r1, r0
 800cbcc:	9801      	ldr	r0, [sp, #4]
 800cbce:	f000 fc95 	bl	800d4fc <__mcmp>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	4631      	mov	r1, r6
 800cbd6:	4648      	mov	r0, r9
 800cbd8:	920a      	str	r2, [sp, #40]	@ 0x28
 800cbda:	f000 fa0b 	bl	800cff4 <_Bfree>
 800cbde:	9b07      	ldr	r3, [sp, #28]
 800cbe0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cbe2:	9e05      	ldr	r6, [sp, #20]
 800cbe4:	ea43 0102 	orr.w	r1, r3, r2
 800cbe8:	9b08      	ldr	r3, [sp, #32]
 800cbea:	4319      	orrs	r1, r3
 800cbec:	d10f      	bne.n	800cc0e <_dtoa_r+0x946>
 800cbee:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cbf2:	d028      	beq.n	800cc46 <_dtoa_r+0x97e>
 800cbf4:	9b06      	ldr	r3, [sp, #24]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	dd02      	ble.n	800cc00 <_dtoa_r+0x938>
 800cbfa:	9b02      	ldr	r3, [sp, #8]
 800cbfc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800cc00:	f88b a000 	strb.w	sl, [fp]
 800cc04:	e639      	b.n	800c87a <_dtoa_r+0x5b2>
 800cc06:	4628      	mov	r0, r5
 800cc08:	e7bd      	b.n	800cb86 <_dtoa_r+0x8be>
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	e7e2      	b.n	800cbd4 <_dtoa_r+0x90c>
 800cc0e:	9b06      	ldr	r3, [sp, #24]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	db04      	blt.n	800cc1e <_dtoa_r+0x956>
 800cc14:	9907      	ldr	r1, [sp, #28]
 800cc16:	430b      	orrs	r3, r1
 800cc18:	9908      	ldr	r1, [sp, #32]
 800cc1a:	430b      	orrs	r3, r1
 800cc1c:	d120      	bne.n	800cc60 <_dtoa_r+0x998>
 800cc1e:	2a00      	cmp	r2, #0
 800cc20:	ddee      	ble.n	800cc00 <_dtoa_r+0x938>
 800cc22:	9901      	ldr	r1, [sp, #4]
 800cc24:	2201      	movs	r2, #1
 800cc26:	4648      	mov	r0, r9
 800cc28:	f000 fbfc 	bl	800d424 <__lshift>
 800cc2c:	4621      	mov	r1, r4
 800cc2e:	9001      	str	r0, [sp, #4]
 800cc30:	f000 fc64 	bl	800d4fc <__mcmp>
 800cc34:	2800      	cmp	r0, #0
 800cc36:	dc03      	bgt.n	800cc40 <_dtoa_r+0x978>
 800cc38:	d1e2      	bne.n	800cc00 <_dtoa_r+0x938>
 800cc3a:	f01a 0f01 	tst.w	sl, #1
 800cc3e:	d0df      	beq.n	800cc00 <_dtoa_r+0x938>
 800cc40:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cc44:	d1d9      	bne.n	800cbfa <_dtoa_r+0x932>
 800cc46:	2339      	movs	r3, #57	@ 0x39
 800cc48:	f88b 3000 	strb.w	r3, [fp]
 800cc4c:	4633      	mov	r3, r6
 800cc4e:	461e      	mov	r6, r3
 800cc50:	3b01      	subs	r3, #1
 800cc52:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cc56:	2a39      	cmp	r2, #57	@ 0x39
 800cc58:	d053      	beq.n	800cd02 <_dtoa_r+0xa3a>
 800cc5a:	3201      	adds	r2, #1
 800cc5c:	701a      	strb	r2, [r3, #0]
 800cc5e:	e60c      	b.n	800c87a <_dtoa_r+0x5b2>
 800cc60:	2a00      	cmp	r2, #0
 800cc62:	dd07      	ble.n	800cc74 <_dtoa_r+0x9ac>
 800cc64:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cc68:	d0ed      	beq.n	800cc46 <_dtoa_r+0x97e>
 800cc6a:	f10a 0301 	add.w	r3, sl, #1
 800cc6e:	f88b 3000 	strb.w	r3, [fp]
 800cc72:	e602      	b.n	800c87a <_dtoa_r+0x5b2>
 800cc74:	9b05      	ldr	r3, [sp, #20]
 800cc76:	9a05      	ldr	r2, [sp, #20]
 800cc78:	f803 ac01 	strb.w	sl, [r3, #-1]
 800cc7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d029      	beq.n	800ccd6 <_dtoa_r+0xa0e>
 800cc82:	9901      	ldr	r1, [sp, #4]
 800cc84:	2300      	movs	r3, #0
 800cc86:	220a      	movs	r2, #10
 800cc88:	4648      	mov	r0, r9
 800cc8a:	f000 f9d5 	bl	800d038 <__multadd>
 800cc8e:	45a8      	cmp	r8, r5
 800cc90:	9001      	str	r0, [sp, #4]
 800cc92:	f04f 0300 	mov.w	r3, #0
 800cc96:	f04f 020a 	mov.w	r2, #10
 800cc9a:	4641      	mov	r1, r8
 800cc9c:	4648      	mov	r0, r9
 800cc9e:	d107      	bne.n	800ccb0 <_dtoa_r+0x9e8>
 800cca0:	f000 f9ca 	bl	800d038 <__multadd>
 800cca4:	4680      	mov	r8, r0
 800cca6:	4605      	mov	r5, r0
 800cca8:	9b05      	ldr	r3, [sp, #20]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	9305      	str	r3, [sp, #20]
 800ccae:	e775      	b.n	800cb9c <_dtoa_r+0x8d4>
 800ccb0:	f000 f9c2 	bl	800d038 <__multadd>
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	4680      	mov	r8, r0
 800ccb8:	2300      	movs	r3, #0
 800ccba:	220a      	movs	r2, #10
 800ccbc:	4648      	mov	r0, r9
 800ccbe:	f000 f9bb 	bl	800d038 <__multadd>
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	e7f0      	b.n	800cca8 <_dtoa_r+0x9e0>
 800ccc6:	f1bb 0f00 	cmp.w	fp, #0
 800ccca:	bfcc      	ite	gt
 800cccc:	465e      	movgt	r6, fp
 800ccce:	2601      	movle	r6, #1
 800ccd0:	443e      	add	r6, r7
 800ccd2:	f04f 0800 	mov.w	r8, #0
 800ccd6:	9901      	ldr	r1, [sp, #4]
 800ccd8:	2201      	movs	r2, #1
 800ccda:	4648      	mov	r0, r9
 800ccdc:	f000 fba2 	bl	800d424 <__lshift>
 800cce0:	4621      	mov	r1, r4
 800cce2:	9001      	str	r0, [sp, #4]
 800cce4:	f000 fc0a 	bl	800d4fc <__mcmp>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	dcaf      	bgt.n	800cc4c <_dtoa_r+0x984>
 800ccec:	d102      	bne.n	800ccf4 <_dtoa_r+0xa2c>
 800ccee:	f01a 0f01 	tst.w	sl, #1
 800ccf2:	d1ab      	bne.n	800cc4c <_dtoa_r+0x984>
 800ccf4:	4633      	mov	r3, r6
 800ccf6:	461e      	mov	r6, r3
 800ccf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccfc:	2a30      	cmp	r2, #48	@ 0x30
 800ccfe:	d0fa      	beq.n	800ccf6 <_dtoa_r+0xa2e>
 800cd00:	e5bb      	b.n	800c87a <_dtoa_r+0x5b2>
 800cd02:	429f      	cmp	r7, r3
 800cd04:	d1a3      	bne.n	800cc4e <_dtoa_r+0x986>
 800cd06:	9b04      	ldr	r3, [sp, #16]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	9304      	str	r3, [sp, #16]
 800cd0c:	2331      	movs	r3, #49	@ 0x31
 800cd0e:	703b      	strb	r3, [r7, #0]
 800cd10:	e5b3      	b.n	800c87a <_dtoa_r+0x5b2>
 800cd12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd14:	4f16      	ldr	r7, [pc, #88]	@ (800cd70 <_dtoa_r+0xaa8>)
 800cd16:	b11b      	cbz	r3, 800cd20 <_dtoa_r+0xa58>
 800cd18:	f107 0308 	add.w	r3, r7, #8
 800cd1c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cd1e:	6013      	str	r3, [r2, #0]
 800cd20:	4638      	mov	r0, r7
 800cd22:	b011      	add	sp, #68	@ 0x44
 800cd24:	ecbd 8b02 	vpop	{d8}
 800cd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2c:	9b07      	ldr	r3, [sp, #28]
 800cd2e:	2b01      	cmp	r3, #1
 800cd30:	f77f ae36 	ble.w	800c9a0 <_dtoa_r+0x6d8>
 800cd34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd36:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd38:	2001      	movs	r0, #1
 800cd3a:	e656      	b.n	800c9ea <_dtoa_r+0x722>
 800cd3c:	f1bb 0f00 	cmp.w	fp, #0
 800cd40:	f77f aed7 	ble.w	800caf2 <_dtoa_r+0x82a>
 800cd44:	463e      	mov	r6, r7
 800cd46:	9801      	ldr	r0, [sp, #4]
 800cd48:	4621      	mov	r1, r4
 800cd4a:	f7ff fa33 	bl	800c1b4 <quorem>
 800cd4e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800cd52:	f806 ab01 	strb.w	sl, [r6], #1
 800cd56:	1bf2      	subs	r2, r6, r7
 800cd58:	4593      	cmp	fp, r2
 800cd5a:	ddb4      	ble.n	800ccc6 <_dtoa_r+0x9fe>
 800cd5c:	9901      	ldr	r1, [sp, #4]
 800cd5e:	2300      	movs	r3, #0
 800cd60:	220a      	movs	r2, #10
 800cd62:	4648      	mov	r0, r9
 800cd64:	f000 f968 	bl	800d038 <__multadd>
 800cd68:	9001      	str	r0, [sp, #4]
 800cd6a:	e7ec      	b.n	800cd46 <_dtoa_r+0xa7e>
 800cd6c:	0800fcc1 	.word	0x0800fcc1
 800cd70:	0800fc45 	.word	0x0800fc45

0800cd74 <_free_r>:
 800cd74:	b538      	push	{r3, r4, r5, lr}
 800cd76:	4605      	mov	r5, r0
 800cd78:	2900      	cmp	r1, #0
 800cd7a:	d041      	beq.n	800ce00 <_free_r+0x8c>
 800cd7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd80:	1f0c      	subs	r4, r1, #4
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	bfb8      	it	lt
 800cd86:	18e4      	addlt	r4, r4, r3
 800cd88:	f000 f8e8 	bl	800cf5c <__malloc_lock>
 800cd8c:	4a1d      	ldr	r2, [pc, #116]	@ (800ce04 <_free_r+0x90>)
 800cd8e:	6813      	ldr	r3, [r2, #0]
 800cd90:	b933      	cbnz	r3, 800cda0 <_free_r+0x2c>
 800cd92:	6063      	str	r3, [r4, #4]
 800cd94:	6014      	str	r4, [r2, #0]
 800cd96:	4628      	mov	r0, r5
 800cd98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd9c:	f000 b8e4 	b.w	800cf68 <__malloc_unlock>
 800cda0:	42a3      	cmp	r3, r4
 800cda2:	d908      	bls.n	800cdb6 <_free_r+0x42>
 800cda4:	6820      	ldr	r0, [r4, #0]
 800cda6:	1821      	adds	r1, r4, r0
 800cda8:	428b      	cmp	r3, r1
 800cdaa:	bf01      	itttt	eq
 800cdac:	6819      	ldreq	r1, [r3, #0]
 800cdae:	685b      	ldreq	r3, [r3, #4]
 800cdb0:	1809      	addeq	r1, r1, r0
 800cdb2:	6021      	streq	r1, [r4, #0]
 800cdb4:	e7ed      	b.n	800cd92 <_free_r+0x1e>
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	b10b      	cbz	r3, 800cdc0 <_free_r+0x4c>
 800cdbc:	42a3      	cmp	r3, r4
 800cdbe:	d9fa      	bls.n	800cdb6 <_free_r+0x42>
 800cdc0:	6811      	ldr	r1, [r2, #0]
 800cdc2:	1850      	adds	r0, r2, r1
 800cdc4:	42a0      	cmp	r0, r4
 800cdc6:	d10b      	bne.n	800cde0 <_free_r+0x6c>
 800cdc8:	6820      	ldr	r0, [r4, #0]
 800cdca:	4401      	add	r1, r0
 800cdcc:	1850      	adds	r0, r2, r1
 800cdce:	4283      	cmp	r3, r0
 800cdd0:	6011      	str	r1, [r2, #0]
 800cdd2:	d1e0      	bne.n	800cd96 <_free_r+0x22>
 800cdd4:	6818      	ldr	r0, [r3, #0]
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	6053      	str	r3, [r2, #4]
 800cdda:	4408      	add	r0, r1
 800cddc:	6010      	str	r0, [r2, #0]
 800cdde:	e7da      	b.n	800cd96 <_free_r+0x22>
 800cde0:	d902      	bls.n	800cde8 <_free_r+0x74>
 800cde2:	230c      	movs	r3, #12
 800cde4:	602b      	str	r3, [r5, #0]
 800cde6:	e7d6      	b.n	800cd96 <_free_r+0x22>
 800cde8:	6820      	ldr	r0, [r4, #0]
 800cdea:	1821      	adds	r1, r4, r0
 800cdec:	428b      	cmp	r3, r1
 800cdee:	bf04      	itt	eq
 800cdf0:	6819      	ldreq	r1, [r3, #0]
 800cdf2:	685b      	ldreq	r3, [r3, #4]
 800cdf4:	6063      	str	r3, [r4, #4]
 800cdf6:	bf04      	itt	eq
 800cdf8:	1809      	addeq	r1, r1, r0
 800cdfa:	6021      	streq	r1, [r4, #0]
 800cdfc:	6054      	str	r4, [r2, #4]
 800cdfe:	e7ca      	b.n	800cd96 <_free_r+0x22>
 800ce00:	bd38      	pop	{r3, r4, r5, pc}
 800ce02:	bf00      	nop
 800ce04:	20002e8c 	.word	0x20002e8c

0800ce08 <malloc>:
 800ce08:	4b02      	ldr	r3, [pc, #8]	@ (800ce14 <malloc+0xc>)
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	6818      	ldr	r0, [r3, #0]
 800ce0e:	f000 b825 	b.w	800ce5c <_malloc_r>
 800ce12:	bf00      	nop
 800ce14:	20000030 	.word	0x20000030

0800ce18 <sbrk_aligned>:
 800ce18:	b570      	push	{r4, r5, r6, lr}
 800ce1a:	4e0f      	ldr	r6, [pc, #60]	@ (800ce58 <sbrk_aligned+0x40>)
 800ce1c:	460c      	mov	r4, r1
 800ce1e:	6831      	ldr	r1, [r6, #0]
 800ce20:	4605      	mov	r5, r0
 800ce22:	b911      	cbnz	r1, 800ce2a <sbrk_aligned+0x12>
 800ce24:	f001 fdb8 	bl	800e998 <_sbrk_r>
 800ce28:	6030      	str	r0, [r6, #0]
 800ce2a:	4621      	mov	r1, r4
 800ce2c:	4628      	mov	r0, r5
 800ce2e:	f001 fdb3 	bl	800e998 <_sbrk_r>
 800ce32:	1c43      	adds	r3, r0, #1
 800ce34:	d103      	bne.n	800ce3e <sbrk_aligned+0x26>
 800ce36:	f04f 34ff 	mov.w	r4, #4294967295
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	bd70      	pop	{r4, r5, r6, pc}
 800ce3e:	1cc4      	adds	r4, r0, #3
 800ce40:	f024 0403 	bic.w	r4, r4, #3
 800ce44:	42a0      	cmp	r0, r4
 800ce46:	d0f8      	beq.n	800ce3a <sbrk_aligned+0x22>
 800ce48:	1a21      	subs	r1, r4, r0
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	f001 fda4 	bl	800e998 <_sbrk_r>
 800ce50:	3001      	adds	r0, #1
 800ce52:	d1f2      	bne.n	800ce3a <sbrk_aligned+0x22>
 800ce54:	e7ef      	b.n	800ce36 <sbrk_aligned+0x1e>
 800ce56:	bf00      	nop
 800ce58:	20002e88 	.word	0x20002e88

0800ce5c <_malloc_r>:
 800ce5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce60:	1ccd      	adds	r5, r1, #3
 800ce62:	f025 0503 	bic.w	r5, r5, #3
 800ce66:	3508      	adds	r5, #8
 800ce68:	2d0c      	cmp	r5, #12
 800ce6a:	bf38      	it	cc
 800ce6c:	250c      	movcc	r5, #12
 800ce6e:	2d00      	cmp	r5, #0
 800ce70:	4606      	mov	r6, r0
 800ce72:	db01      	blt.n	800ce78 <_malloc_r+0x1c>
 800ce74:	42a9      	cmp	r1, r5
 800ce76:	d904      	bls.n	800ce82 <_malloc_r+0x26>
 800ce78:	230c      	movs	r3, #12
 800ce7a:	6033      	str	r3, [r6, #0]
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf58 <_malloc_r+0xfc>
 800ce86:	f000 f869 	bl	800cf5c <__malloc_lock>
 800ce8a:	f8d8 3000 	ldr.w	r3, [r8]
 800ce8e:	461c      	mov	r4, r3
 800ce90:	bb44      	cbnz	r4, 800cee4 <_malloc_r+0x88>
 800ce92:	4629      	mov	r1, r5
 800ce94:	4630      	mov	r0, r6
 800ce96:	f7ff ffbf 	bl	800ce18 <sbrk_aligned>
 800ce9a:	1c43      	adds	r3, r0, #1
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	d158      	bne.n	800cf52 <_malloc_r+0xf6>
 800cea0:	f8d8 4000 	ldr.w	r4, [r8]
 800cea4:	4627      	mov	r7, r4
 800cea6:	2f00      	cmp	r7, #0
 800cea8:	d143      	bne.n	800cf32 <_malloc_r+0xd6>
 800ceaa:	2c00      	cmp	r4, #0
 800ceac:	d04b      	beq.n	800cf46 <_malloc_r+0xea>
 800ceae:	6823      	ldr	r3, [r4, #0]
 800ceb0:	4639      	mov	r1, r7
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	eb04 0903 	add.w	r9, r4, r3
 800ceb8:	f001 fd6e 	bl	800e998 <_sbrk_r>
 800cebc:	4581      	cmp	r9, r0
 800cebe:	d142      	bne.n	800cf46 <_malloc_r+0xea>
 800cec0:	6821      	ldr	r1, [r4, #0]
 800cec2:	1a6d      	subs	r5, r5, r1
 800cec4:	4629      	mov	r1, r5
 800cec6:	4630      	mov	r0, r6
 800cec8:	f7ff ffa6 	bl	800ce18 <sbrk_aligned>
 800cecc:	3001      	adds	r0, #1
 800cece:	d03a      	beq.n	800cf46 <_malloc_r+0xea>
 800ced0:	6823      	ldr	r3, [r4, #0]
 800ced2:	442b      	add	r3, r5
 800ced4:	6023      	str	r3, [r4, #0]
 800ced6:	f8d8 3000 	ldr.w	r3, [r8]
 800ceda:	685a      	ldr	r2, [r3, #4]
 800cedc:	bb62      	cbnz	r2, 800cf38 <_malloc_r+0xdc>
 800cede:	f8c8 7000 	str.w	r7, [r8]
 800cee2:	e00f      	b.n	800cf04 <_malloc_r+0xa8>
 800cee4:	6822      	ldr	r2, [r4, #0]
 800cee6:	1b52      	subs	r2, r2, r5
 800cee8:	d420      	bmi.n	800cf2c <_malloc_r+0xd0>
 800ceea:	2a0b      	cmp	r2, #11
 800ceec:	d917      	bls.n	800cf1e <_malloc_r+0xc2>
 800ceee:	1961      	adds	r1, r4, r5
 800cef0:	42a3      	cmp	r3, r4
 800cef2:	6025      	str	r5, [r4, #0]
 800cef4:	bf18      	it	ne
 800cef6:	6059      	strne	r1, [r3, #4]
 800cef8:	6863      	ldr	r3, [r4, #4]
 800cefa:	bf08      	it	eq
 800cefc:	f8c8 1000 	streq.w	r1, [r8]
 800cf00:	5162      	str	r2, [r4, r5]
 800cf02:	604b      	str	r3, [r1, #4]
 800cf04:	4630      	mov	r0, r6
 800cf06:	f000 f82f 	bl	800cf68 <__malloc_unlock>
 800cf0a:	f104 000b 	add.w	r0, r4, #11
 800cf0e:	1d23      	adds	r3, r4, #4
 800cf10:	f020 0007 	bic.w	r0, r0, #7
 800cf14:	1ac2      	subs	r2, r0, r3
 800cf16:	bf1c      	itt	ne
 800cf18:	1a1b      	subne	r3, r3, r0
 800cf1a:	50a3      	strne	r3, [r4, r2]
 800cf1c:	e7af      	b.n	800ce7e <_malloc_r+0x22>
 800cf1e:	6862      	ldr	r2, [r4, #4]
 800cf20:	42a3      	cmp	r3, r4
 800cf22:	bf0c      	ite	eq
 800cf24:	f8c8 2000 	streq.w	r2, [r8]
 800cf28:	605a      	strne	r2, [r3, #4]
 800cf2a:	e7eb      	b.n	800cf04 <_malloc_r+0xa8>
 800cf2c:	4623      	mov	r3, r4
 800cf2e:	6864      	ldr	r4, [r4, #4]
 800cf30:	e7ae      	b.n	800ce90 <_malloc_r+0x34>
 800cf32:	463c      	mov	r4, r7
 800cf34:	687f      	ldr	r7, [r7, #4]
 800cf36:	e7b6      	b.n	800cea6 <_malloc_r+0x4a>
 800cf38:	461a      	mov	r2, r3
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	42a3      	cmp	r3, r4
 800cf3e:	d1fb      	bne.n	800cf38 <_malloc_r+0xdc>
 800cf40:	2300      	movs	r3, #0
 800cf42:	6053      	str	r3, [r2, #4]
 800cf44:	e7de      	b.n	800cf04 <_malloc_r+0xa8>
 800cf46:	230c      	movs	r3, #12
 800cf48:	6033      	str	r3, [r6, #0]
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	f000 f80c 	bl	800cf68 <__malloc_unlock>
 800cf50:	e794      	b.n	800ce7c <_malloc_r+0x20>
 800cf52:	6005      	str	r5, [r0, #0]
 800cf54:	e7d6      	b.n	800cf04 <_malloc_r+0xa8>
 800cf56:	bf00      	nop
 800cf58:	20002e8c 	.word	0x20002e8c

0800cf5c <__malloc_lock>:
 800cf5c:	4801      	ldr	r0, [pc, #4]	@ (800cf64 <__malloc_lock+0x8>)
 800cf5e:	f7ff b920 	b.w	800c1a2 <__retarget_lock_acquire_recursive>
 800cf62:	bf00      	nop
 800cf64:	20002e84 	.word	0x20002e84

0800cf68 <__malloc_unlock>:
 800cf68:	4801      	ldr	r0, [pc, #4]	@ (800cf70 <__malloc_unlock+0x8>)
 800cf6a:	f7ff b91b 	b.w	800c1a4 <__retarget_lock_release_recursive>
 800cf6e:	bf00      	nop
 800cf70:	20002e84 	.word	0x20002e84

0800cf74 <_Balloc>:
 800cf74:	b570      	push	{r4, r5, r6, lr}
 800cf76:	69c6      	ldr	r6, [r0, #28]
 800cf78:	4604      	mov	r4, r0
 800cf7a:	460d      	mov	r5, r1
 800cf7c:	b976      	cbnz	r6, 800cf9c <_Balloc+0x28>
 800cf7e:	2010      	movs	r0, #16
 800cf80:	f7ff ff42 	bl	800ce08 <malloc>
 800cf84:	4602      	mov	r2, r0
 800cf86:	61e0      	str	r0, [r4, #28]
 800cf88:	b920      	cbnz	r0, 800cf94 <_Balloc+0x20>
 800cf8a:	4b18      	ldr	r3, [pc, #96]	@ (800cfec <_Balloc+0x78>)
 800cf8c:	4818      	ldr	r0, [pc, #96]	@ (800cff0 <_Balloc+0x7c>)
 800cf8e:	216b      	movs	r1, #107	@ 0x6b
 800cf90:	f001 fd2a 	bl	800e9e8 <__assert_func>
 800cf94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf98:	6006      	str	r6, [r0, #0]
 800cf9a:	60c6      	str	r6, [r0, #12]
 800cf9c:	69e6      	ldr	r6, [r4, #28]
 800cf9e:	68f3      	ldr	r3, [r6, #12]
 800cfa0:	b183      	cbz	r3, 800cfc4 <_Balloc+0x50>
 800cfa2:	69e3      	ldr	r3, [r4, #28]
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cfaa:	b9b8      	cbnz	r0, 800cfdc <_Balloc+0x68>
 800cfac:	2101      	movs	r1, #1
 800cfae:	fa01 f605 	lsl.w	r6, r1, r5
 800cfb2:	1d72      	adds	r2, r6, #5
 800cfb4:	0092      	lsls	r2, r2, #2
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f001 fd34 	bl	800ea24 <_calloc_r>
 800cfbc:	b160      	cbz	r0, 800cfd8 <_Balloc+0x64>
 800cfbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cfc2:	e00e      	b.n	800cfe2 <_Balloc+0x6e>
 800cfc4:	2221      	movs	r2, #33	@ 0x21
 800cfc6:	2104      	movs	r1, #4
 800cfc8:	4620      	mov	r0, r4
 800cfca:	f001 fd2b 	bl	800ea24 <_calloc_r>
 800cfce:	69e3      	ldr	r3, [r4, #28]
 800cfd0:	60f0      	str	r0, [r6, #12]
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d1e4      	bne.n	800cfa2 <_Balloc+0x2e>
 800cfd8:	2000      	movs	r0, #0
 800cfda:	bd70      	pop	{r4, r5, r6, pc}
 800cfdc:	6802      	ldr	r2, [r0, #0]
 800cfde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cfe8:	e7f7      	b.n	800cfda <_Balloc+0x66>
 800cfea:	bf00      	nop
 800cfec:	0800fc52 	.word	0x0800fc52
 800cff0:	0800fcd2 	.word	0x0800fcd2

0800cff4 <_Bfree>:
 800cff4:	b570      	push	{r4, r5, r6, lr}
 800cff6:	69c6      	ldr	r6, [r0, #28]
 800cff8:	4605      	mov	r5, r0
 800cffa:	460c      	mov	r4, r1
 800cffc:	b976      	cbnz	r6, 800d01c <_Bfree+0x28>
 800cffe:	2010      	movs	r0, #16
 800d000:	f7ff ff02 	bl	800ce08 <malloc>
 800d004:	4602      	mov	r2, r0
 800d006:	61e8      	str	r0, [r5, #28]
 800d008:	b920      	cbnz	r0, 800d014 <_Bfree+0x20>
 800d00a:	4b09      	ldr	r3, [pc, #36]	@ (800d030 <_Bfree+0x3c>)
 800d00c:	4809      	ldr	r0, [pc, #36]	@ (800d034 <_Bfree+0x40>)
 800d00e:	218f      	movs	r1, #143	@ 0x8f
 800d010:	f001 fcea 	bl	800e9e8 <__assert_func>
 800d014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d018:	6006      	str	r6, [r0, #0]
 800d01a:	60c6      	str	r6, [r0, #12]
 800d01c:	b13c      	cbz	r4, 800d02e <_Bfree+0x3a>
 800d01e:	69eb      	ldr	r3, [r5, #28]
 800d020:	6862      	ldr	r2, [r4, #4]
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d028:	6021      	str	r1, [r4, #0]
 800d02a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d02e:	bd70      	pop	{r4, r5, r6, pc}
 800d030:	0800fc52 	.word	0x0800fc52
 800d034:	0800fcd2 	.word	0x0800fcd2

0800d038 <__multadd>:
 800d038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d03c:	690d      	ldr	r5, [r1, #16]
 800d03e:	4607      	mov	r7, r0
 800d040:	460c      	mov	r4, r1
 800d042:	461e      	mov	r6, r3
 800d044:	f101 0c14 	add.w	ip, r1, #20
 800d048:	2000      	movs	r0, #0
 800d04a:	f8dc 3000 	ldr.w	r3, [ip]
 800d04e:	b299      	uxth	r1, r3
 800d050:	fb02 6101 	mla	r1, r2, r1, r6
 800d054:	0c1e      	lsrs	r6, r3, #16
 800d056:	0c0b      	lsrs	r3, r1, #16
 800d058:	fb02 3306 	mla	r3, r2, r6, r3
 800d05c:	b289      	uxth	r1, r1
 800d05e:	3001      	adds	r0, #1
 800d060:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d064:	4285      	cmp	r5, r0
 800d066:	f84c 1b04 	str.w	r1, [ip], #4
 800d06a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d06e:	dcec      	bgt.n	800d04a <__multadd+0x12>
 800d070:	b30e      	cbz	r6, 800d0b6 <__multadd+0x7e>
 800d072:	68a3      	ldr	r3, [r4, #8]
 800d074:	42ab      	cmp	r3, r5
 800d076:	dc19      	bgt.n	800d0ac <__multadd+0x74>
 800d078:	6861      	ldr	r1, [r4, #4]
 800d07a:	4638      	mov	r0, r7
 800d07c:	3101      	adds	r1, #1
 800d07e:	f7ff ff79 	bl	800cf74 <_Balloc>
 800d082:	4680      	mov	r8, r0
 800d084:	b928      	cbnz	r0, 800d092 <__multadd+0x5a>
 800d086:	4602      	mov	r2, r0
 800d088:	4b0c      	ldr	r3, [pc, #48]	@ (800d0bc <__multadd+0x84>)
 800d08a:	480d      	ldr	r0, [pc, #52]	@ (800d0c0 <__multadd+0x88>)
 800d08c:	21ba      	movs	r1, #186	@ 0xba
 800d08e:	f001 fcab 	bl	800e9e8 <__assert_func>
 800d092:	6922      	ldr	r2, [r4, #16]
 800d094:	3202      	adds	r2, #2
 800d096:	f104 010c 	add.w	r1, r4, #12
 800d09a:	0092      	lsls	r2, r2, #2
 800d09c:	300c      	adds	r0, #12
 800d09e:	f001 fc8b 	bl	800e9b8 <memcpy>
 800d0a2:	4621      	mov	r1, r4
 800d0a4:	4638      	mov	r0, r7
 800d0a6:	f7ff ffa5 	bl	800cff4 <_Bfree>
 800d0aa:	4644      	mov	r4, r8
 800d0ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d0b0:	3501      	adds	r5, #1
 800d0b2:	615e      	str	r6, [r3, #20]
 800d0b4:	6125      	str	r5, [r4, #16]
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0bc:	0800fcc1 	.word	0x0800fcc1
 800d0c0:	0800fcd2 	.word	0x0800fcd2

0800d0c4 <__s2b>:
 800d0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0c8:	460c      	mov	r4, r1
 800d0ca:	4615      	mov	r5, r2
 800d0cc:	461f      	mov	r7, r3
 800d0ce:	2209      	movs	r2, #9
 800d0d0:	3308      	adds	r3, #8
 800d0d2:	4606      	mov	r6, r0
 800d0d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0d8:	2100      	movs	r1, #0
 800d0da:	2201      	movs	r2, #1
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	db09      	blt.n	800d0f4 <__s2b+0x30>
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	f7ff ff47 	bl	800cf74 <_Balloc>
 800d0e6:	b940      	cbnz	r0, 800d0fa <__s2b+0x36>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	4b19      	ldr	r3, [pc, #100]	@ (800d150 <__s2b+0x8c>)
 800d0ec:	4819      	ldr	r0, [pc, #100]	@ (800d154 <__s2b+0x90>)
 800d0ee:	21d3      	movs	r1, #211	@ 0xd3
 800d0f0:	f001 fc7a 	bl	800e9e8 <__assert_func>
 800d0f4:	0052      	lsls	r2, r2, #1
 800d0f6:	3101      	adds	r1, #1
 800d0f8:	e7f0      	b.n	800d0dc <__s2b+0x18>
 800d0fa:	9b08      	ldr	r3, [sp, #32]
 800d0fc:	6143      	str	r3, [r0, #20]
 800d0fe:	2d09      	cmp	r5, #9
 800d100:	f04f 0301 	mov.w	r3, #1
 800d104:	6103      	str	r3, [r0, #16]
 800d106:	dd16      	ble.n	800d136 <__s2b+0x72>
 800d108:	f104 0909 	add.w	r9, r4, #9
 800d10c:	46c8      	mov	r8, r9
 800d10e:	442c      	add	r4, r5
 800d110:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d114:	4601      	mov	r1, r0
 800d116:	3b30      	subs	r3, #48	@ 0x30
 800d118:	220a      	movs	r2, #10
 800d11a:	4630      	mov	r0, r6
 800d11c:	f7ff ff8c 	bl	800d038 <__multadd>
 800d120:	45a0      	cmp	r8, r4
 800d122:	d1f5      	bne.n	800d110 <__s2b+0x4c>
 800d124:	f1a5 0408 	sub.w	r4, r5, #8
 800d128:	444c      	add	r4, r9
 800d12a:	1b2d      	subs	r5, r5, r4
 800d12c:	1963      	adds	r3, r4, r5
 800d12e:	42bb      	cmp	r3, r7
 800d130:	db04      	blt.n	800d13c <__s2b+0x78>
 800d132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d136:	340a      	adds	r4, #10
 800d138:	2509      	movs	r5, #9
 800d13a:	e7f6      	b.n	800d12a <__s2b+0x66>
 800d13c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d140:	4601      	mov	r1, r0
 800d142:	3b30      	subs	r3, #48	@ 0x30
 800d144:	220a      	movs	r2, #10
 800d146:	4630      	mov	r0, r6
 800d148:	f7ff ff76 	bl	800d038 <__multadd>
 800d14c:	e7ee      	b.n	800d12c <__s2b+0x68>
 800d14e:	bf00      	nop
 800d150:	0800fcc1 	.word	0x0800fcc1
 800d154:	0800fcd2 	.word	0x0800fcd2

0800d158 <__hi0bits>:
 800d158:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d15c:	4603      	mov	r3, r0
 800d15e:	bf36      	itet	cc
 800d160:	0403      	lslcc	r3, r0, #16
 800d162:	2000      	movcs	r0, #0
 800d164:	2010      	movcc	r0, #16
 800d166:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d16a:	bf3c      	itt	cc
 800d16c:	021b      	lslcc	r3, r3, #8
 800d16e:	3008      	addcc	r0, #8
 800d170:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d174:	bf3c      	itt	cc
 800d176:	011b      	lslcc	r3, r3, #4
 800d178:	3004      	addcc	r0, #4
 800d17a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d17e:	bf3c      	itt	cc
 800d180:	009b      	lslcc	r3, r3, #2
 800d182:	3002      	addcc	r0, #2
 800d184:	2b00      	cmp	r3, #0
 800d186:	db05      	blt.n	800d194 <__hi0bits+0x3c>
 800d188:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d18c:	f100 0001 	add.w	r0, r0, #1
 800d190:	bf08      	it	eq
 800d192:	2020      	moveq	r0, #32
 800d194:	4770      	bx	lr

0800d196 <__lo0bits>:
 800d196:	6803      	ldr	r3, [r0, #0]
 800d198:	4602      	mov	r2, r0
 800d19a:	f013 0007 	ands.w	r0, r3, #7
 800d19e:	d00b      	beq.n	800d1b8 <__lo0bits+0x22>
 800d1a0:	07d9      	lsls	r1, r3, #31
 800d1a2:	d421      	bmi.n	800d1e8 <__lo0bits+0x52>
 800d1a4:	0798      	lsls	r0, r3, #30
 800d1a6:	bf49      	itett	mi
 800d1a8:	085b      	lsrmi	r3, r3, #1
 800d1aa:	089b      	lsrpl	r3, r3, #2
 800d1ac:	2001      	movmi	r0, #1
 800d1ae:	6013      	strmi	r3, [r2, #0]
 800d1b0:	bf5c      	itt	pl
 800d1b2:	6013      	strpl	r3, [r2, #0]
 800d1b4:	2002      	movpl	r0, #2
 800d1b6:	4770      	bx	lr
 800d1b8:	b299      	uxth	r1, r3
 800d1ba:	b909      	cbnz	r1, 800d1c0 <__lo0bits+0x2a>
 800d1bc:	0c1b      	lsrs	r3, r3, #16
 800d1be:	2010      	movs	r0, #16
 800d1c0:	b2d9      	uxtb	r1, r3
 800d1c2:	b909      	cbnz	r1, 800d1c8 <__lo0bits+0x32>
 800d1c4:	3008      	adds	r0, #8
 800d1c6:	0a1b      	lsrs	r3, r3, #8
 800d1c8:	0719      	lsls	r1, r3, #28
 800d1ca:	bf04      	itt	eq
 800d1cc:	091b      	lsreq	r3, r3, #4
 800d1ce:	3004      	addeq	r0, #4
 800d1d0:	0799      	lsls	r1, r3, #30
 800d1d2:	bf04      	itt	eq
 800d1d4:	089b      	lsreq	r3, r3, #2
 800d1d6:	3002      	addeq	r0, #2
 800d1d8:	07d9      	lsls	r1, r3, #31
 800d1da:	d403      	bmi.n	800d1e4 <__lo0bits+0x4e>
 800d1dc:	085b      	lsrs	r3, r3, #1
 800d1de:	f100 0001 	add.w	r0, r0, #1
 800d1e2:	d003      	beq.n	800d1ec <__lo0bits+0x56>
 800d1e4:	6013      	str	r3, [r2, #0]
 800d1e6:	4770      	bx	lr
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	4770      	bx	lr
 800d1ec:	2020      	movs	r0, #32
 800d1ee:	4770      	bx	lr

0800d1f0 <__i2b>:
 800d1f0:	b510      	push	{r4, lr}
 800d1f2:	460c      	mov	r4, r1
 800d1f4:	2101      	movs	r1, #1
 800d1f6:	f7ff febd 	bl	800cf74 <_Balloc>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	b928      	cbnz	r0, 800d20a <__i2b+0x1a>
 800d1fe:	4b05      	ldr	r3, [pc, #20]	@ (800d214 <__i2b+0x24>)
 800d200:	4805      	ldr	r0, [pc, #20]	@ (800d218 <__i2b+0x28>)
 800d202:	f240 1145 	movw	r1, #325	@ 0x145
 800d206:	f001 fbef 	bl	800e9e8 <__assert_func>
 800d20a:	2301      	movs	r3, #1
 800d20c:	6144      	str	r4, [r0, #20]
 800d20e:	6103      	str	r3, [r0, #16]
 800d210:	bd10      	pop	{r4, pc}
 800d212:	bf00      	nop
 800d214:	0800fcc1 	.word	0x0800fcc1
 800d218:	0800fcd2 	.word	0x0800fcd2

0800d21c <__multiply>:
 800d21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d220:	4614      	mov	r4, r2
 800d222:	690a      	ldr	r2, [r1, #16]
 800d224:	6923      	ldr	r3, [r4, #16]
 800d226:	429a      	cmp	r2, r3
 800d228:	bfa8      	it	ge
 800d22a:	4623      	movge	r3, r4
 800d22c:	460f      	mov	r7, r1
 800d22e:	bfa4      	itt	ge
 800d230:	460c      	movge	r4, r1
 800d232:	461f      	movge	r7, r3
 800d234:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d238:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d23c:	68a3      	ldr	r3, [r4, #8]
 800d23e:	6861      	ldr	r1, [r4, #4]
 800d240:	eb0a 0609 	add.w	r6, sl, r9
 800d244:	42b3      	cmp	r3, r6
 800d246:	b085      	sub	sp, #20
 800d248:	bfb8      	it	lt
 800d24a:	3101      	addlt	r1, #1
 800d24c:	f7ff fe92 	bl	800cf74 <_Balloc>
 800d250:	b930      	cbnz	r0, 800d260 <__multiply+0x44>
 800d252:	4602      	mov	r2, r0
 800d254:	4b44      	ldr	r3, [pc, #272]	@ (800d368 <__multiply+0x14c>)
 800d256:	4845      	ldr	r0, [pc, #276]	@ (800d36c <__multiply+0x150>)
 800d258:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d25c:	f001 fbc4 	bl	800e9e8 <__assert_func>
 800d260:	f100 0514 	add.w	r5, r0, #20
 800d264:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d268:	462b      	mov	r3, r5
 800d26a:	2200      	movs	r2, #0
 800d26c:	4543      	cmp	r3, r8
 800d26e:	d321      	bcc.n	800d2b4 <__multiply+0x98>
 800d270:	f107 0114 	add.w	r1, r7, #20
 800d274:	f104 0214 	add.w	r2, r4, #20
 800d278:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d27c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d280:	9302      	str	r3, [sp, #8]
 800d282:	1b13      	subs	r3, r2, r4
 800d284:	3b15      	subs	r3, #21
 800d286:	f023 0303 	bic.w	r3, r3, #3
 800d28a:	3304      	adds	r3, #4
 800d28c:	f104 0715 	add.w	r7, r4, #21
 800d290:	42ba      	cmp	r2, r7
 800d292:	bf38      	it	cc
 800d294:	2304      	movcc	r3, #4
 800d296:	9301      	str	r3, [sp, #4]
 800d298:	9b02      	ldr	r3, [sp, #8]
 800d29a:	9103      	str	r1, [sp, #12]
 800d29c:	428b      	cmp	r3, r1
 800d29e:	d80c      	bhi.n	800d2ba <__multiply+0x9e>
 800d2a0:	2e00      	cmp	r6, #0
 800d2a2:	dd03      	ble.n	800d2ac <__multiply+0x90>
 800d2a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d05b      	beq.n	800d364 <__multiply+0x148>
 800d2ac:	6106      	str	r6, [r0, #16]
 800d2ae:	b005      	add	sp, #20
 800d2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b4:	f843 2b04 	str.w	r2, [r3], #4
 800d2b8:	e7d8      	b.n	800d26c <__multiply+0x50>
 800d2ba:	f8b1 a000 	ldrh.w	sl, [r1]
 800d2be:	f1ba 0f00 	cmp.w	sl, #0
 800d2c2:	d024      	beq.n	800d30e <__multiply+0xf2>
 800d2c4:	f104 0e14 	add.w	lr, r4, #20
 800d2c8:	46a9      	mov	r9, r5
 800d2ca:	f04f 0c00 	mov.w	ip, #0
 800d2ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d2d2:	f8d9 3000 	ldr.w	r3, [r9]
 800d2d6:	fa1f fb87 	uxth.w	fp, r7
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	fb0a 330b 	mla	r3, sl, fp, r3
 800d2e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d2e4:	f8d9 7000 	ldr.w	r7, [r9]
 800d2e8:	4463      	add	r3, ip
 800d2ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d2ee:	fb0a c70b 	mla	r7, sl, fp, ip
 800d2f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d2fc:	4572      	cmp	r2, lr
 800d2fe:	f849 3b04 	str.w	r3, [r9], #4
 800d302:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d306:	d8e2      	bhi.n	800d2ce <__multiply+0xb2>
 800d308:	9b01      	ldr	r3, [sp, #4]
 800d30a:	f845 c003 	str.w	ip, [r5, r3]
 800d30e:	9b03      	ldr	r3, [sp, #12]
 800d310:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d314:	3104      	adds	r1, #4
 800d316:	f1b9 0f00 	cmp.w	r9, #0
 800d31a:	d021      	beq.n	800d360 <__multiply+0x144>
 800d31c:	682b      	ldr	r3, [r5, #0]
 800d31e:	f104 0c14 	add.w	ip, r4, #20
 800d322:	46ae      	mov	lr, r5
 800d324:	f04f 0a00 	mov.w	sl, #0
 800d328:	f8bc b000 	ldrh.w	fp, [ip]
 800d32c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d330:	fb09 770b 	mla	r7, r9, fp, r7
 800d334:	4457      	add	r7, sl
 800d336:	b29b      	uxth	r3, r3
 800d338:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d33c:	f84e 3b04 	str.w	r3, [lr], #4
 800d340:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d344:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d348:	f8be 3000 	ldrh.w	r3, [lr]
 800d34c:	fb09 330a 	mla	r3, r9, sl, r3
 800d350:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d354:	4562      	cmp	r2, ip
 800d356:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d35a:	d8e5      	bhi.n	800d328 <__multiply+0x10c>
 800d35c:	9f01      	ldr	r7, [sp, #4]
 800d35e:	51eb      	str	r3, [r5, r7]
 800d360:	3504      	adds	r5, #4
 800d362:	e799      	b.n	800d298 <__multiply+0x7c>
 800d364:	3e01      	subs	r6, #1
 800d366:	e79b      	b.n	800d2a0 <__multiply+0x84>
 800d368:	0800fcc1 	.word	0x0800fcc1
 800d36c:	0800fcd2 	.word	0x0800fcd2

0800d370 <__pow5mult>:
 800d370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d374:	4615      	mov	r5, r2
 800d376:	f012 0203 	ands.w	r2, r2, #3
 800d37a:	4607      	mov	r7, r0
 800d37c:	460e      	mov	r6, r1
 800d37e:	d007      	beq.n	800d390 <__pow5mult+0x20>
 800d380:	4c25      	ldr	r4, [pc, #148]	@ (800d418 <__pow5mult+0xa8>)
 800d382:	3a01      	subs	r2, #1
 800d384:	2300      	movs	r3, #0
 800d386:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d38a:	f7ff fe55 	bl	800d038 <__multadd>
 800d38e:	4606      	mov	r6, r0
 800d390:	10ad      	asrs	r5, r5, #2
 800d392:	d03d      	beq.n	800d410 <__pow5mult+0xa0>
 800d394:	69fc      	ldr	r4, [r7, #28]
 800d396:	b97c      	cbnz	r4, 800d3b8 <__pow5mult+0x48>
 800d398:	2010      	movs	r0, #16
 800d39a:	f7ff fd35 	bl	800ce08 <malloc>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	61f8      	str	r0, [r7, #28]
 800d3a2:	b928      	cbnz	r0, 800d3b0 <__pow5mult+0x40>
 800d3a4:	4b1d      	ldr	r3, [pc, #116]	@ (800d41c <__pow5mult+0xac>)
 800d3a6:	481e      	ldr	r0, [pc, #120]	@ (800d420 <__pow5mult+0xb0>)
 800d3a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d3ac:	f001 fb1c 	bl	800e9e8 <__assert_func>
 800d3b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3b4:	6004      	str	r4, [r0, #0]
 800d3b6:	60c4      	str	r4, [r0, #12]
 800d3b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d3bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3c0:	b94c      	cbnz	r4, 800d3d6 <__pow5mult+0x66>
 800d3c2:	f240 2171 	movw	r1, #625	@ 0x271
 800d3c6:	4638      	mov	r0, r7
 800d3c8:	f7ff ff12 	bl	800d1f0 <__i2b>
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	6003      	str	r3, [r0, #0]
 800d3d6:	f04f 0900 	mov.w	r9, #0
 800d3da:	07eb      	lsls	r3, r5, #31
 800d3dc:	d50a      	bpl.n	800d3f4 <__pow5mult+0x84>
 800d3de:	4631      	mov	r1, r6
 800d3e0:	4622      	mov	r2, r4
 800d3e2:	4638      	mov	r0, r7
 800d3e4:	f7ff ff1a 	bl	800d21c <__multiply>
 800d3e8:	4631      	mov	r1, r6
 800d3ea:	4680      	mov	r8, r0
 800d3ec:	4638      	mov	r0, r7
 800d3ee:	f7ff fe01 	bl	800cff4 <_Bfree>
 800d3f2:	4646      	mov	r6, r8
 800d3f4:	106d      	asrs	r5, r5, #1
 800d3f6:	d00b      	beq.n	800d410 <__pow5mult+0xa0>
 800d3f8:	6820      	ldr	r0, [r4, #0]
 800d3fa:	b938      	cbnz	r0, 800d40c <__pow5mult+0x9c>
 800d3fc:	4622      	mov	r2, r4
 800d3fe:	4621      	mov	r1, r4
 800d400:	4638      	mov	r0, r7
 800d402:	f7ff ff0b 	bl	800d21c <__multiply>
 800d406:	6020      	str	r0, [r4, #0]
 800d408:	f8c0 9000 	str.w	r9, [r0]
 800d40c:	4604      	mov	r4, r0
 800d40e:	e7e4      	b.n	800d3da <__pow5mult+0x6a>
 800d410:	4630      	mov	r0, r6
 800d412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d416:	bf00      	nop
 800d418:	0800fd2c 	.word	0x0800fd2c
 800d41c:	0800fc52 	.word	0x0800fc52
 800d420:	0800fcd2 	.word	0x0800fcd2

0800d424 <__lshift>:
 800d424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d428:	460c      	mov	r4, r1
 800d42a:	6849      	ldr	r1, [r1, #4]
 800d42c:	6923      	ldr	r3, [r4, #16]
 800d42e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d432:	68a3      	ldr	r3, [r4, #8]
 800d434:	4607      	mov	r7, r0
 800d436:	4691      	mov	r9, r2
 800d438:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d43c:	f108 0601 	add.w	r6, r8, #1
 800d440:	42b3      	cmp	r3, r6
 800d442:	db0b      	blt.n	800d45c <__lshift+0x38>
 800d444:	4638      	mov	r0, r7
 800d446:	f7ff fd95 	bl	800cf74 <_Balloc>
 800d44a:	4605      	mov	r5, r0
 800d44c:	b948      	cbnz	r0, 800d462 <__lshift+0x3e>
 800d44e:	4602      	mov	r2, r0
 800d450:	4b28      	ldr	r3, [pc, #160]	@ (800d4f4 <__lshift+0xd0>)
 800d452:	4829      	ldr	r0, [pc, #164]	@ (800d4f8 <__lshift+0xd4>)
 800d454:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d458:	f001 fac6 	bl	800e9e8 <__assert_func>
 800d45c:	3101      	adds	r1, #1
 800d45e:	005b      	lsls	r3, r3, #1
 800d460:	e7ee      	b.n	800d440 <__lshift+0x1c>
 800d462:	2300      	movs	r3, #0
 800d464:	f100 0114 	add.w	r1, r0, #20
 800d468:	f100 0210 	add.w	r2, r0, #16
 800d46c:	4618      	mov	r0, r3
 800d46e:	4553      	cmp	r3, sl
 800d470:	db33      	blt.n	800d4da <__lshift+0xb6>
 800d472:	6920      	ldr	r0, [r4, #16]
 800d474:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d478:	f104 0314 	add.w	r3, r4, #20
 800d47c:	f019 091f 	ands.w	r9, r9, #31
 800d480:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d484:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d488:	d02b      	beq.n	800d4e2 <__lshift+0xbe>
 800d48a:	f1c9 0e20 	rsb	lr, r9, #32
 800d48e:	468a      	mov	sl, r1
 800d490:	2200      	movs	r2, #0
 800d492:	6818      	ldr	r0, [r3, #0]
 800d494:	fa00 f009 	lsl.w	r0, r0, r9
 800d498:	4310      	orrs	r0, r2
 800d49a:	f84a 0b04 	str.w	r0, [sl], #4
 800d49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4a2:	459c      	cmp	ip, r3
 800d4a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4a8:	d8f3      	bhi.n	800d492 <__lshift+0x6e>
 800d4aa:	ebac 0304 	sub.w	r3, ip, r4
 800d4ae:	3b15      	subs	r3, #21
 800d4b0:	f023 0303 	bic.w	r3, r3, #3
 800d4b4:	3304      	adds	r3, #4
 800d4b6:	f104 0015 	add.w	r0, r4, #21
 800d4ba:	4584      	cmp	ip, r0
 800d4bc:	bf38      	it	cc
 800d4be:	2304      	movcc	r3, #4
 800d4c0:	50ca      	str	r2, [r1, r3]
 800d4c2:	b10a      	cbz	r2, 800d4c8 <__lshift+0xa4>
 800d4c4:	f108 0602 	add.w	r6, r8, #2
 800d4c8:	3e01      	subs	r6, #1
 800d4ca:	4638      	mov	r0, r7
 800d4cc:	612e      	str	r6, [r5, #16]
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	f7ff fd90 	bl	800cff4 <_Bfree>
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4da:	f842 0f04 	str.w	r0, [r2, #4]!
 800d4de:	3301      	adds	r3, #1
 800d4e0:	e7c5      	b.n	800d46e <__lshift+0x4a>
 800d4e2:	3904      	subs	r1, #4
 800d4e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4ec:	459c      	cmp	ip, r3
 800d4ee:	d8f9      	bhi.n	800d4e4 <__lshift+0xc0>
 800d4f0:	e7ea      	b.n	800d4c8 <__lshift+0xa4>
 800d4f2:	bf00      	nop
 800d4f4:	0800fcc1 	.word	0x0800fcc1
 800d4f8:	0800fcd2 	.word	0x0800fcd2

0800d4fc <__mcmp>:
 800d4fc:	690a      	ldr	r2, [r1, #16]
 800d4fe:	4603      	mov	r3, r0
 800d500:	6900      	ldr	r0, [r0, #16]
 800d502:	1a80      	subs	r0, r0, r2
 800d504:	b530      	push	{r4, r5, lr}
 800d506:	d10e      	bne.n	800d526 <__mcmp+0x2a>
 800d508:	3314      	adds	r3, #20
 800d50a:	3114      	adds	r1, #20
 800d50c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d510:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d514:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d518:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d51c:	4295      	cmp	r5, r2
 800d51e:	d003      	beq.n	800d528 <__mcmp+0x2c>
 800d520:	d205      	bcs.n	800d52e <__mcmp+0x32>
 800d522:	f04f 30ff 	mov.w	r0, #4294967295
 800d526:	bd30      	pop	{r4, r5, pc}
 800d528:	42a3      	cmp	r3, r4
 800d52a:	d3f3      	bcc.n	800d514 <__mcmp+0x18>
 800d52c:	e7fb      	b.n	800d526 <__mcmp+0x2a>
 800d52e:	2001      	movs	r0, #1
 800d530:	e7f9      	b.n	800d526 <__mcmp+0x2a>
	...

0800d534 <__mdiff>:
 800d534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d538:	4689      	mov	r9, r1
 800d53a:	4606      	mov	r6, r0
 800d53c:	4611      	mov	r1, r2
 800d53e:	4648      	mov	r0, r9
 800d540:	4614      	mov	r4, r2
 800d542:	f7ff ffdb 	bl	800d4fc <__mcmp>
 800d546:	1e05      	subs	r5, r0, #0
 800d548:	d112      	bne.n	800d570 <__mdiff+0x3c>
 800d54a:	4629      	mov	r1, r5
 800d54c:	4630      	mov	r0, r6
 800d54e:	f7ff fd11 	bl	800cf74 <_Balloc>
 800d552:	4602      	mov	r2, r0
 800d554:	b928      	cbnz	r0, 800d562 <__mdiff+0x2e>
 800d556:	4b3f      	ldr	r3, [pc, #252]	@ (800d654 <__mdiff+0x120>)
 800d558:	f240 2137 	movw	r1, #567	@ 0x237
 800d55c:	483e      	ldr	r0, [pc, #248]	@ (800d658 <__mdiff+0x124>)
 800d55e:	f001 fa43 	bl	800e9e8 <__assert_func>
 800d562:	2301      	movs	r3, #1
 800d564:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d568:	4610      	mov	r0, r2
 800d56a:	b003      	add	sp, #12
 800d56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d570:	bfbc      	itt	lt
 800d572:	464b      	movlt	r3, r9
 800d574:	46a1      	movlt	r9, r4
 800d576:	4630      	mov	r0, r6
 800d578:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d57c:	bfba      	itte	lt
 800d57e:	461c      	movlt	r4, r3
 800d580:	2501      	movlt	r5, #1
 800d582:	2500      	movge	r5, #0
 800d584:	f7ff fcf6 	bl	800cf74 <_Balloc>
 800d588:	4602      	mov	r2, r0
 800d58a:	b918      	cbnz	r0, 800d594 <__mdiff+0x60>
 800d58c:	4b31      	ldr	r3, [pc, #196]	@ (800d654 <__mdiff+0x120>)
 800d58e:	f240 2145 	movw	r1, #581	@ 0x245
 800d592:	e7e3      	b.n	800d55c <__mdiff+0x28>
 800d594:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d598:	6926      	ldr	r6, [r4, #16]
 800d59a:	60c5      	str	r5, [r0, #12]
 800d59c:	f109 0310 	add.w	r3, r9, #16
 800d5a0:	f109 0514 	add.w	r5, r9, #20
 800d5a4:	f104 0e14 	add.w	lr, r4, #20
 800d5a8:	f100 0b14 	add.w	fp, r0, #20
 800d5ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d5b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d5b4:	9301      	str	r3, [sp, #4]
 800d5b6:	46d9      	mov	r9, fp
 800d5b8:	f04f 0c00 	mov.w	ip, #0
 800d5bc:	9b01      	ldr	r3, [sp, #4]
 800d5be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d5c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d5c6:	9301      	str	r3, [sp, #4]
 800d5c8:	fa1f f38a 	uxth.w	r3, sl
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	b283      	uxth	r3, r0
 800d5d0:	1acb      	subs	r3, r1, r3
 800d5d2:	0c00      	lsrs	r0, r0, #16
 800d5d4:	4463      	add	r3, ip
 800d5d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d5da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d5e4:	4576      	cmp	r6, lr
 800d5e6:	f849 3b04 	str.w	r3, [r9], #4
 800d5ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d5ee:	d8e5      	bhi.n	800d5bc <__mdiff+0x88>
 800d5f0:	1b33      	subs	r3, r6, r4
 800d5f2:	3b15      	subs	r3, #21
 800d5f4:	f023 0303 	bic.w	r3, r3, #3
 800d5f8:	3415      	adds	r4, #21
 800d5fa:	3304      	adds	r3, #4
 800d5fc:	42a6      	cmp	r6, r4
 800d5fe:	bf38      	it	cc
 800d600:	2304      	movcc	r3, #4
 800d602:	441d      	add	r5, r3
 800d604:	445b      	add	r3, fp
 800d606:	461e      	mov	r6, r3
 800d608:	462c      	mov	r4, r5
 800d60a:	4544      	cmp	r4, r8
 800d60c:	d30e      	bcc.n	800d62c <__mdiff+0xf8>
 800d60e:	f108 0103 	add.w	r1, r8, #3
 800d612:	1b49      	subs	r1, r1, r5
 800d614:	f021 0103 	bic.w	r1, r1, #3
 800d618:	3d03      	subs	r5, #3
 800d61a:	45a8      	cmp	r8, r5
 800d61c:	bf38      	it	cc
 800d61e:	2100      	movcc	r1, #0
 800d620:	440b      	add	r3, r1
 800d622:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d626:	b191      	cbz	r1, 800d64e <__mdiff+0x11a>
 800d628:	6117      	str	r7, [r2, #16]
 800d62a:	e79d      	b.n	800d568 <__mdiff+0x34>
 800d62c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d630:	46e6      	mov	lr, ip
 800d632:	0c08      	lsrs	r0, r1, #16
 800d634:	fa1c fc81 	uxtah	ip, ip, r1
 800d638:	4471      	add	r1, lr
 800d63a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d63e:	b289      	uxth	r1, r1
 800d640:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d644:	f846 1b04 	str.w	r1, [r6], #4
 800d648:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d64c:	e7dd      	b.n	800d60a <__mdiff+0xd6>
 800d64e:	3f01      	subs	r7, #1
 800d650:	e7e7      	b.n	800d622 <__mdiff+0xee>
 800d652:	bf00      	nop
 800d654:	0800fcc1 	.word	0x0800fcc1
 800d658:	0800fcd2 	.word	0x0800fcd2

0800d65c <__ulp>:
 800d65c:	b082      	sub	sp, #8
 800d65e:	ed8d 0b00 	vstr	d0, [sp]
 800d662:	9a01      	ldr	r2, [sp, #4]
 800d664:	4b0f      	ldr	r3, [pc, #60]	@ (800d6a4 <__ulp+0x48>)
 800d666:	4013      	ands	r3, r2
 800d668:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	dc08      	bgt.n	800d682 <__ulp+0x26>
 800d670:	425b      	negs	r3, r3
 800d672:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d676:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d67a:	da04      	bge.n	800d686 <__ulp+0x2a>
 800d67c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d680:	4113      	asrs	r3, r2
 800d682:	2200      	movs	r2, #0
 800d684:	e008      	b.n	800d698 <__ulp+0x3c>
 800d686:	f1a2 0314 	sub.w	r3, r2, #20
 800d68a:	2b1e      	cmp	r3, #30
 800d68c:	bfda      	itte	le
 800d68e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d692:	40da      	lsrle	r2, r3
 800d694:	2201      	movgt	r2, #1
 800d696:	2300      	movs	r3, #0
 800d698:	4619      	mov	r1, r3
 800d69a:	4610      	mov	r0, r2
 800d69c:	ec41 0b10 	vmov	d0, r0, r1
 800d6a0:	b002      	add	sp, #8
 800d6a2:	4770      	bx	lr
 800d6a4:	7ff00000 	.word	0x7ff00000

0800d6a8 <__b2d>:
 800d6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ac:	6906      	ldr	r6, [r0, #16]
 800d6ae:	f100 0814 	add.w	r8, r0, #20
 800d6b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d6b6:	1f37      	subs	r7, r6, #4
 800d6b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d6bc:	4610      	mov	r0, r2
 800d6be:	f7ff fd4b 	bl	800d158 <__hi0bits>
 800d6c2:	f1c0 0320 	rsb	r3, r0, #32
 800d6c6:	280a      	cmp	r0, #10
 800d6c8:	600b      	str	r3, [r1, #0]
 800d6ca:	491b      	ldr	r1, [pc, #108]	@ (800d738 <__b2d+0x90>)
 800d6cc:	dc15      	bgt.n	800d6fa <__b2d+0x52>
 800d6ce:	f1c0 0c0b 	rsb	ip, r0, #11
 800d6d2:	fa22 f30c 	lsr.w	r3, r2, ip
 800d6d6:	45b8      	cmp	r8, r7
 800d6d8:	ea43 0501 	orr.w	r5, r3, r1
 800d6dc:	bf34      	ite	cc
 800d6de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d6e2:	2300      	movcs	r3, #0
 800d6e4:	3015      	adds	r0, #21
 800d6e6:	fa02 f000 	lsl.w	r0, r2, r0
 800d6ea:	fa23 f30c 	lsr.w	r3, r3, ip
 800d6ee:	4303      	orrs	r3, r0
 800d6f0:	461c      	mov	r4, r3
 800d6f2:	ec45 4b10 	vmov	d0, r4, r5
 800d6f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6fa:	45b8      	cmp	r8, r7
 800d6fc:	bf3a      	itte	cc
 800d6fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d702:	f1a6 0708 	subcc.w	r7, r6, #8
 800d706:	2300      	movcs	r3, #0
 800d708:	380b      	subs	r0, #11
 800d70a:	d012      	beq.n	800d732 <__b2d+0x8a>
 800d70c:	f1c0 0120 	rsb	r1, r0, #32
 800d710:	fa23 f401 	lsr.w	r4, r3, r1
 800d714:	4082      	lsls	r2, r0
 800d716:	4322      	orrs	r2, r4
 800d718:	4547      	cmp	r7, r8
 800d71a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d71e:	bf8c      	ite	hi
 800d720:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d724:	2200      	movls	r2, #0
 800d726:	4083      	lsls	r3, r0
 800d728:	40ca      	lsrs	r2, r1
 800d72a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d72e:	4313      	orrs	r3, r2
 800d730:	e7de      	b.n	800d6f0 <__b2d+0x48>
 800d732:	ea42 0501 	orr.w	r5, r2, r1
 800d736:	e7db      	b.n	800d6f0 <__b2d+0x48>
 800d738:	3ff00000 	.word	0x3ff00000

0800d73c <__d2b>:
 800d73c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d740:	460f      	mov	r7, r1
 800d742:	2101      	movs	r1, #1
 800d744:	ec59 8b10 	vmov	r8, r9, d0
 800d748:	4616      	mov	r6, r2
 800d74a:	f7ff fc13 	bl	800cf74 <_Balloc>
 800d74e:	4604      	mov	r4, r0
 800d750:	b930      	cbnz	r0, 800d760 <__d2b+0x24>
 800d752:	4602      	mov	r2, r0
 800d754:	4b23      	ldr	r3, [pc, #140]	@ (800d7e4 <__d2b+0xa8>)
 800d756:	4824      	ldr	r0, [pc, #144]	@ (800d7e8 <__d2b+0xac>)
 800d758:	f240 310f 	movw	r1, #783	@ 0x30f
 800d75c:	f001 f944 	bl	800e9e8 <__assert_func>
 800d760:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d764:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d768:	b10d      	cbz	r5, 800d76e <__d2b+0x32>
 800d76a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d76e:	9301      	str	r3, [sp, #4]
 800d770:	f1b8 0300 	subs.w	r3, r8, #0
 800d774:	d023      	beq.n	800d7be <__d2b+0x82>
 800d776:	4668      	mov	r0, sp
 800d778:	9300      	str	r3, [sp, #0]
 800d77a:	f7ff fd0c 	bl	800d196 <__lo0bits>
 800d77e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d782:	b1d0      	cbz	r0, 800d7ba <__d2b+0x7e>
 800d784:	f1c0 0320 	rsb	r3, r0, #32
 800d788:	fa02 f303 	lsl.w	r3, r2, r3
 800d78c:	430b      	orrs	r3, r1
 800d78e:	40c2      	lsrs	r2, r0
 800d790:	6163      	str	r3, [r4, #20]
 800d792:	9201      	str	r2, [sp, #4]
 800d794:	9b01      	ldr	r3, [sp, #4]
 800d796:	61a3      	str	r3, [r4, #24]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	bf0c      	ite	eq
 800d79c:	2201      	moveq	r2, #1
 800d79e:	2202      	movne	r2, #2
 800d7a0:	6122      	str	r2, [r4, #16]
 800d7a2:	b1a5      	cbz	r5, 800d7ce <__d2b+0x92>
 800d7a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d7a8:	4405      	add	r5, r0
 800d7aa:	603d      	str	r5, [r7, #0]
 800d7ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d7b0:	6030      	str	r0, [r6, #0]
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	b003      	add	sp, #12
 800d7b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7ba:	6161      	str	r1, [r4, #20]
 800d7bc:	e7ea      	b.n	800d794 <__d2b+0x58>
 800d7be:	a801      	add	r0, sp, #4
 800d7c0:	f7ff fce9 	bl	800d196 <__lo0bits>
 800d7c4:	9b01      	ldr	r3, [sp, #4]
 800d7c6:	6163      	str	r3, [r4, #20]
 800d7c8:	3020      	adds	r0, #32
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	e7e8      	b.n	800d7a0 <__d2b+0x64>
 800d7ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d7d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d7d6:	6038      	str	r0, [r7, #0]
 800d7d8:	6918      	ldr	r0, [r3, #16]
 800d7da:	f7ff fcbd 	bl	800d158 <__hi0bits>
 800d7de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d7e2:	e7e5      	b.n	800d7b0 <__d2b+0x74>
 800d7e4:	0800fcc1 	.word	0x0800fcc1
 800d7e8:	0800fcd2 	.word	0x0800fcd2

0800d7ec <__ratio>:
 800d7ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f0:	4688      	mov	r8, r1
 800d7f2:	4669      	mov	r1, sp
 800d7f4:	4681      	mov	r9, r0
 800d7f6:	f7ff ff57 	bl	800d6a8 <__b2d>
 800d7fa:	a901      	add	r1, sp, #4
 800d7fc:	4640      	mov	r0, r8
 800d7fe:	ec55 4b10 	vmov	r4, r5, d0
 800d802:	f7ff ff51 	bl	800d6a8 <__b2d>
 800d806:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d80a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d80e:	1ad2      	subs	r2, r2, r3
 800d810:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d814:	1a5b      	subs	r3, r3, r1
 800d816:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800d81a:	ec57 6b10 	vmov	r6, r7, d0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	bfd6      	itet	le
 800d822:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d826:	462a      	movgt	r2, r5
 800d828:	463a      	movle	r2, r7
 800d82a:	46ab      	mov	fp, r5
 800d82c:	46a2      	mov	sl, r4
 800d82e:	bfce      	itee	gt
 800d830:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d834:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d838:	ee00 3a90 	vmovle	s1, r3
 800d83c:	ec4b ab17 	vmov	d7, sl, fp
 800d840:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d844:	b003      	add	sp, #12
 800d846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d84a <__copybits>:
 800d84a:	3901      	subs	r1, #1
 800d84c:	b570      	push	{r4, r5, r6, lr}
 800d84e:	1149      	asrs	r1, r1, #5
 800d850:	6914      	ldr	r4, [r2, #16]
 800d852:	3101      	adds	r1, #1
 800d854:	f102 0314 	add.w	r3, r2, #20
 800d858:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d85c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d860:	1f05      	subs	r5, r0, #4
 800d862:	42a3      	cmp	r3, r4
 800d864:	d30c      	bcc.n	800d880 <__copybits+0x36>
 800d866:	1aa3      	subs	r3, r4, r2
 800d868:	3b11      	subs	r3, #17
 800d86a:	f023 0303 	bic.w	r3, r3, #3
 800d86e:	3211      	adds	r2, #17
 800d870:	42a2      	cmp	r2, r4
 800d872:	bf88      	it	hi
 800d874:	2300      	movhi	r3, #0
 800d876:	4418      	add	r0, r3
 800d878:	2300      	movs	r3, #0
 800d87a:	4288      	cmp	r0, r1
 800d87c:	d305      	bcc.n	800d88a <__copybits+0x40>
 800d87e:	bd70      	pop	{r4, r5, r6, pc}
 800d880:	f853 6b04 	ldr.w	r6, [r3], #4
 800d884:	f845 6f04 	str.w	r6, [r5, #4]!
 800d888:	e7eb      	b.n	800d862 <__copybits+0x18>
 800d88a:	f840 3b04 	str.w	r3, [r0], #4
 800d88e:	e7f4      	b.n	800d87a <__copybits+0x30>

0800d890 <__any_on>:
 800d890:	f100 0214 	add.w	r2, r0, #20
 800d894:	6900      	ldr	r0, [r0, #16]
 800d896:	114b      	asrs	r3, r1, #5
 800d898:	4298      	cmp	r0, r3
 800d89a:	b510      	push	{r4, lr}
 800d89c:	db11      	blt.n	800d8c2 <__any_on+0x32>
 800d89e:	dd0a      	ble.n	800d8b6 <__any_on+0x26>
 800d8a0:	f011 011f 	ands.w	r1, r1, #31
 800d8a4:	d007      	beq.n	800d8b6 <__any_on+0x26>
 800d8a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d8aa:	fa24 f001 	lsr.w	r0, r4, r1
 800d8ae:	fa00 f101 	lsl.w	r1, r0, r1
 800d8b2:	428c      	cmp	r4, r1
 800d8b4:	d10b      	bne.n	800d8ce <__any_on+0x3e>
 800d8b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d803      	bhi.n	800d8c6 <__any_on+0x36>
 800d8be:	2000      	movs	r0, #0
 800d8c0:	bd10      	pop	{r4, pc}
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	e7f7      	b.n	800d8b6 <__any_on+0x26>
 800d8c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d8ca:	2900      	cmp	r1, #0
 800d8cc:	d0f5      	beq.n	800d8ba <__any_on+0x2a>
 800d8ce:	2001      	movs	r0, #1
 800d8d0:	e7f6      	b.n	800d8c0 <__any_on+0x30>

0800d8d2 <sulp>:
 800d8d2:	b570      	push	{r4, r5, r6, lr}
 800d8d4:	4604      	mov	r4, r0
 800d8d6:	460d      	mov	r5, r1
 800d8d8:	4616      	mov	r6, r2
 800d8da:	ec45 4b10 	vmov	d0, r4, r5
 800d8de:	f7ff febd 	bl	800d65c <__ulp>
 800d8e2:	b17e      	cbz	r6, 800d904 <sulp+0x32>
 800d8e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d8e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	dd09      	ble.n	800d904 <sulp+0x32>
 800d8f0:	051b      	lsls	r3, r3, #20
 800d8f2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d8f6:	2000      	movs	r0, #0
 800d8f8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d8fc:	ec41 0b17 	vmov	d7, r0, r1
 800d900:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d904:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d908 <_strtod_l>:
 800d908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d90c:	ed2d 8b0a 	vpush	{d8-d12}
 800d910:	b097      	sub	sp, #92	@ 0x5c
 800d912:	4688      	mov	r8, r1
 800d914:	920e      	str	r2, [sp, #56]	@ 0x38
 800d916:	2200      	movs	r2, #0
 800d918:	9212      	str	r2, [sp, #72]	@ 0x48
 800d91a:	9005      	str	r0, [sp, #20]
 800d91c:	f04f 0a00 	mov.w	sl, #0
 800d920:	f04f 0b00 	mov.w	fp, #0
 800d924:	460a      	mov	r2, r1
 800d926:	9211      	str	r2, [sp, #68]	@ 0x44
 800d928:	7811      	ldrb	r1, [r2, #0]
 800d92a:	292b      	cmp	r1, #43	@ 0x2b
 800d92c:	d04c      	beq.n	800d9c8 <_strtod_l+0xc0>
 800d92e:	d839      	bhi.n	800d9a4 <_strtod_l+0x9c>
 800d930:	290d      	cmp	r1, #13
 800d932:	d833      	bhi.n	800d99c <_strtod_l+0x94>
 800d934:	2908      	cmp	r1, #8
 800d936:	d833      	bhi.n	800d9a0 <_strtod_l+0x98>
 800d938:	2900      	cmp	r1, #0
 800d93a:	d03c      	beq.n	800d9b6 <_strtod_l+0xae>
 800d93c:	2200      	movs	r2, #0
 800d93e:	9208      	str	r2, [sp, #32]
 800d940:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800d942:	782a      	ldrb	r2, [r5, #0]
 800d944:	2a30      	cmp	r2, #48	@ 0x30
 800d946:	f040 80b5 	bne.w	800dab4 <_strtod_l+0x1ac>
 800d94a:	786a      	ldrb	r2, [r5, #1]
 800d94c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d950:	2a58      	cmp	r2, #88	@ 0x58
 800d952:	d170      	bne.n	800da36 <_strtod_l+0x12e>
 800d954:	9302      	str	r3, [sp, #8]
 800d956:	9b08      	ldr	r3, [sp, #32]
 800d958:	9301      	str	r3, [sp, #4]
 800d95a:	ab12      	add	r3, sp, #72	@ 0x48
 800d95c:	9300      	str	r3, [sp, #0]
 800d95e:	4a8b      	ldr	r2, [pc, #556]	@ (800db8c <_strtod_l+0x284>)
 800d960:	9805      	ldr	r0, [sp, #20]
 800d962:	ab13      	add	r3, sp, #76	@ 0x4c
 800d964:	a911      	add	r1, sp, #68	@ 0x44
 800d966:	f001 f8d9 	bl	800eb1c <__gethex>
 800d96a:	f010 060f 	ands.w	r6, r0, #15
 800d96e:	4604      	mov	r4, r0
 800d970:	d005      	beq.n	800d97e <_strtod_l+0x76>
 800d972:	2e06      	cmp	r6, #6
 800d974:	d12a      	bne.n	800d9cc <_strtod_l+0xc4>
 800d976:	3501      	adds	r5, #1
 800d978:	2300      	movs	r3, #0
 800d97a:	9511      	str	r5, [sp, #68]	@ 0x44
 800d97c:	9308      	str	r3, [sp, #32]
 800d97e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d980:	2b00      	cmp	r3, #0
 800d982:	f040 852f 	bne.w	800e3e4 <_strtod_l+0xadc>
 800d986:	9b08      	ldr	r3, [sp, #32]
 800d988:	ec4b ab10 	vmov	d0, sl, fp
 800d98c:	b1cb      	cbz	r3, 800d9c2 <_strtod_l+0xba>
 800d98e:	eeb1 0b40 	vneg.f64	d0, d0
 800d992:	b017      	add	sp, #92	@ 0x5c
 800d994:	ecbd 8b0a 	vpop	{d8-d12}
 800d998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d99c:	2920      	cmp	r1, #32
 800d99e:	d1cd      	bne.n	800d93c <_strtod_l+0x34>
 800d9a0:	3201      	adds	r2, #1
 800d9a2:	e7c0      	b.n	800d926 <_strtod_l+0x1e>
 800d9a4:	292d      	cmp	r1, #45	@ 0x2d
 800d9a6:	d1c9      	bne.n	800d93c <_strtod_l+0x34>
 800d9a8:	2101      	movs	r1, #1
 800d9aa:	9108      	str	r1, [sp, #32]
 800d9ac:	1c51      	adds	r1, r2, #1
 800d9ae:	9111      	str	r1, [sp, #68]	@ 0x44
 800d9b0:	7852      	ldrb	r2, [r2, #1]
 800d9b2:	2a00      	cmp	r2, #0
 800d9b4:	d1c4      	bne.n	800d940 <_strtod_l+0x38>
 800d9b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9b8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f040 850f 	bne.w	800e3e0 <_strtod_l+0xad8>
 800d9c2:	ec4b ab10 	vmov	d0, sl, fp
 800d9c6:	e7e4      	b.n	800d992 <_strtod_l+0x8a>
 800d9c8:	2100      	movs	r1, #0
 800d9ca:	e7ee      	b.n	800d9aa <_strtod_l+0xa2>
 800d9cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d9ce:	b13a      	cbz	r2, 800d9e0 <_strtod_l+0xd8>
 800d9d0:	2135      	movs	r1, #53	@ 0x35
 800d9d2:	a814      	add	r0, sp, #80	@ 0x50
 800d9d4:	f7ff ff39 	bl	800d84a <__copybits>
 800d9d8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d9da:	9805      	ldr	r0, [sp, #20]
 800d9dc:	f7ff fb0a 	bl	800cff4 <_Bfree>
 800d9e0:	1e73      	subs	r3, r6, #1
 800d9e2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d9e4:	2b04      	cmp	r3, #4
 800d9e6:	d806      	bhi.n	800d9f6 <_strtod_l+0xee>
 800d9e8:	e8df f003 	tbb	[pc, r3]
 800d9ec:	201d0314 	.word	0x201d0314
 800d9f0:	14          	.byte	0x14
 800d9f1:	00          	.byte	0x00
 800d9f2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800d9f6:	05e3      	lsls	r3, r4, #23
 800d9f8:	bf48      	it	mi
 800d9fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d9fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da02:	0d1b      	lsrs	r3, r3, #20
 800da04:	051b      	lsls	r3, r3, #20
 800da06:	2b00      	cmp	r3, #0
 800da08:	d1b9      	bne.n	800d97e <_strtod_l+0x76>
 800da0a:	f7fe fb9f 	bl	800c14c <__errno>
 800da0e:	2322      	movs	r3, #34	@ 0x22
 800da10:	6003      	str	r3, [r0, #0]
 800da12:	e7b4      	b.n	800d97e <_strtod_l+0x76>
 800da14:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800da18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800da1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800da20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800da24:	e7e7      	b.n	800d9f6 <_strtod_l+0xee>
 800da26:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800db94 <_strtod_l+0x28c>
 800da2a:	e7e4      	b.n	800d9f6 <_strtod_l+0xee>
 800da2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800da30:	f04f 3aff 	mov.w	sl, #4294967295
 800da34:	e7df      	b.n	800d9f6 <_strtod_l+0xee>
 800da36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da38:	1c5a      	adds	r2, r3, #1
 800da3a:	9211      	str	r2, [sp, #68]	@ 0x44
 800da3c:	785b      	ldrb	r3, [r3, #1]
 800da3e:	2b30      	cmp	r3, #48	@ 0x30
 800da40:	d0f9      	beq.n	800da36 <_strtod_l+0x12e>
 800da42:	2b00      	cmp	r3, #0
 800da44:	d09b      	beq.n	800d97e <_strtod_l+0x76>
 800da46:	2301      	movs	r3, #1
 800da48:	2600      	movs	r6, #0
 800da4a:	9307      	str	r3, [sp, #28]
 800da4c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800da50:	46b1      	mov	r9, r6
 800da52:	4635      	mov	r5, r6
 800da54:	220a      	movs	r2, #10
 800da56:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800da58:	7804      	ldrb	r4, [r0, #0]
 800da5a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800da5e:	b2d9      	uxtb	r1, r3
 800da60:	2909      	cmp	r1, #9
 800da62:	d929      	bls.n	800dab8 <_strtod_l+0x1b0>
 800da64:	494a      	ldr	r1, [pc, #296]	@ (800db90 <_strtod_l+0x288>)
 800da66:	2201      	movs	r2, #1
 800da68:	f000 ff84 	bl	800e974 <strncmp>
 800da6c:	b378      	cbz	r0, 800dace <_strtod_l+0x1c6>
 800da6e:	2000      	movs	r0, #0
 800da70:	4622      	mov	r2, r4
 800da72:	462b      	mov	r3, r5
 800da74:	4607      	mov	r7, r0
 800da76:	9006      	str	r0, [sp, #24]
 800da78:	2a65      	cmp	r2, #101	@ 0x65
 800da7a:	d001      	beq.n	800da80 <_strtod_l+0x178>
 800da7c:	2a45      	cmp	r2, #69	@ 0x45
 800da7e:	d117      	bne.n	800dab0 <_strtod_l+0x1a8>
 800da80:	b91b      	cbnz	r3, 800da8a <_strtod_l+0x182>
 800da82:	9b07      	ldr	r3, [sp, #28]
 800da84:	4303      	orrs	r3, r0
 800da86:	d096      	beq.n	800d9b6 <_strtod_l+0xae>
 800da88:	2300      	movs	r3, #0
 800da8a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800da8e:	f108 0201 	add.w	r2, r8, #1
 800da92:	9211      	str	r2, [sp, #68]	@ 0x44
 800da94:	f898 2001 	ldrb.w	r2, [r8, #1]
 800da98:	2a2b      	cmp	r2, #43	@ 0x2b
 800da9a:	d06b      	beq.n	800db74 <_strtod_l+0x26c>
 800da9c:	2a2d      	cmp	r2, #45	@ 0x2d
 800da9e:	d071      	beq.n	800db84 <_strtod_l+0x27c>
 800daa0:	f04f 0e00 	mov.w	lr, #0
 800daa4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800daa8:	2c09      	cmp	r4, #9
 800daaa:	d979      	bls.n	800dba0 <_strtod_l+0x298>
 800daac:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800dab0:	2400      	movs	r4, #0
 800dab2:	e094      	b.n	800dbde <_strtod_l+0x2d6>
 800dab4:	2300      	movs	r3, #0
 800dab6:	e7c7      	b.n	800da48 <_strtod_l+0x140>
 800dab8:	2d08      	cmp	r5, #8
 800daba:	f100 0001 	add.w	r0, r0, #1
 800dabe:	bfd4      	ite	le
 800dac0:	fb02 3909 	mlale	r9, r2, r9, r3
 800dac4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800dac8:	3501      	adds	r5, #1
 800daca:	9011      	str	r0, [sp, #68]	@ 0x44
 800dacc:	e7c3      	b.n	800da56 <_strtod_l+0x14e>
 800dace:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	9211      	str	r2, [sp, #68]	@ 0x44
 800dad4:	785a      	ldrb	r2, [r3, #1]
 800dad6:	b375      	cbz	r5, 800db36 <_strtod_l+0x22e>
 800dad8:	4607      	mov	r7, r0
 800dada:	462b      	mov	r3, r5
 800dadc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dae0:	2909      	cmp	r1, #9
 800dae2:	d913      	bls.n	800db0c <_strtod_l+0x204>
 800dae4:	2101      	movs	r1, #1
 800dae6:	9106      	str	r1, [sp, #24]
 800dae8:	e7c6      	b.n	800da78 <_strtod_l+0x170>
 800daea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800daec:	1c5a      	adds	r2, r3, #1
 800daee:	9211      	str	r2, [sp, #68]	@ 0x44
 800daf0:	785a      	ldrb	r2, [r3, #1]
 800daf2:	3001      	adds	r0, #1
 800daf4:	2a30      	cmp	r2, #48	@ 0x30
 800daf6:	d0f8      	beq.n	800daea <_strtod_l+0x1e2>
 800daf8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dafc:	2b08      	cmp	r3, #8
 800dafe:	f200 8476 	bhi.w	800e3ee <_strtod_l+0xae6>
 800db02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db04:	930a      	str	r3, [sp, #40]	@ 0x28
 800db06:	4607      	mov	r7, r0
 800db08:	2000      	movs	r0, #0
 800db0a:	4603      	mov	r3, r0
 800db0c:	3a30      	subs	r2, #48	@ 0x30
 800db0e:	f100 0101 	add.w	r1, r0, #1
 800db12:	d023      	beq.n	800db5c <_strtod_l+0x254>
 800db14:	440f      	add	r7, r1
 800db16:	eb00 0c03 	add.w	ip, r0, r3
 800db1a:	4619      	mov	r1, r3
 800db1c:	240a      	movs	r4, #10
 800db1e:	4561      	cmp	r1, ip
 800db20:	d10b      	bne.n	800db3a <_strtod_l+0x232>
 800db22:	1c5c      	adds	r4, r3, #1
 800db24:	4403      	add	r3, r0
 800db26:	2b08      	cmp	r3, #8
 800db28:	4404      	add	r4, r0
 800db2a:	dc11      	bgt.n	800db50 <_strtod_l+0x248>
 800db2c:	230a      	movs	r3, #10
 800db2e:	fb03 2909 	mla	r9, r3, r9, r2
 800db32:	2100      	movs	r1, #0
 800db34:	e013      	b.n	800db5e <_strtod_l+0x256>
 800db36:	4628      	mov	r0, r5
 800db38:	e7dc      	b.n	800daf4 <_strtod_l+0x1ec>
 800db3a:	2908      	cmp	r1, #8
 800db3c:	f101 0101 	add.w	r1, r1, #1
 800db40:	dc02      	bgt.n	800db48 <_strtod_l+0x240>
 800db42:	fb04 f909 	mul.w	r9, r4, r9
 800db46:	e7ea      	b.n	800db1e <_strtod_l+0x216>
 800db48:	2910      	cmp	r1, #16
 800db4a:	bfd8      	it	le
 800db4c:	4366      	mulle	r6, r4
 800db4e:	e7e6      	b.n	800db1e <_strtod_l+0x216>
 800db50:	2b0f      	cmp	r3, #15
 800db52:	dcee      	bgt.n	800db32 <_strtod_l+0x22a>
 800db54:	230a      	movs	r3, #10
 800db56:	fb03 2606 	mla	r6, r3, r6, r2
 800db5a:	e7ea      	b.n	800db32 <_strtod_l+0x22a>
 800db5c:	461c      	mov	r4, r3
 800db5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db60:	1c5a      	adds	r2, r3, #1
 800db62:	9211      	str	r2, [sp, #68]	@ 0x44
 800db64:	785a      	ldrb	r2, [r3, #1]
 800db66:	4608      	mov	r0, r1
 800db68:	4623      	mov	r3, r4
 800db6a:	e7b7      	b.n	800dadc <_strtod_l+0x1d4>
 800db6c:	2301      	movs	r3, #1
 800db6e:	2700      	movs	r7, #0
 800db70:	9306      	str	r3, [sp, #24]
 800db72:	e786      	b.n	800da82 <_strtod_l+0x17a>
 800db74:	f04f 0e00 	mov.w	lr, #0
 800db78:	f108 0202 	add.w	r2, r8, #2
 800db7c:	9211      	str	r2, [sp, #68]	@ 0x44
 800db7e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800db82:	e78f      	b.n	800daa4 <_strtod_l+0x19c>
 800db84:	f04f 0e01 	mov.w	lr, #1
 800db88:	e7f6      	b.n	800db78 <_strtod_l+0x270>
 800db8a:	bf00      	nop
 800db8c:	0800fe40 	.word	0x0800fe40
 800db90:	0800fe28 	.word	0x0800fe28
 800db94:	7ff00000 	.word	0x7ff00000
 800db98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800db9a:	1c54      	adds	r4, r2, #1
 800db9c:	9411      	str	r4, [sp, #68]	@ 0x44
 800db9e:	7852      	ldrb	r2, [r2, #1]
 800dba0:	2a30      	cmp	r2, #48	@ 0x30
 800dba2:	d0f9      	beq.n	800db98 <_strtod_l+0x290>
 800dba4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800dba8:	2c08      	cmp	r4, #8
 800dbaa:	d881      	bhi.n	800dab0 <_strtod_l+0x1a8>
 800dbac:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800dbb0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dbb2:	9209      	str	r2, [sp, #36]	@ 0x24
 800dbb4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dbb6:	1c51      	adds	r1, r2, #1
 800dbb8:	9111      	str	r1, [sp, #68]	@ 0x44
 800dbba:	7852      	ldrb	r2, [r2, #1]
 800dbbc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800dbc0:	2c09      	cmp	r4, #9
 800dbc2:	d938      	bls.n	800dc36 <_strtod_l+0x32e>
 800dbc4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800dbc6:	1b0c      	subs	r4, r1, r4
 800dbc8:	2c08      	cmp	r4, #8
 800dbca:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800dbce:	dc02      	bgt.n	800dbd6 <_strtod_l+0x2ce>
 800dbd0:	4564      	cmp	r4, ip
 800dbd2:	bfa8      	it	ge
 800dbd4:	4664      	movge	r4, ip
 800dbd6:	f1be 0f00 	cmp.w	lr, #0
 800dbda:	d000      	beq.n	800dbde <_strtod_l+0x2d6>
 800dbdc:	4264      	negs	r4, r4
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d14e      	bne.n	800dc80 <_strtod_l+0x378>
 800dbe2:	9b07      	ldr	r3, [sp, #28]
 800dbe4:	4318      	orrs	r0, r3
 800dbe6:	f47f aeca 	bne.w	800d97e <_strtod_l+0x76>
 800dbea:	9b06      	ldr	r3, [sp, #24]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	f47f aee2 	bne.w	800d9b6 <_strtod_l+0xae>
 800dbf2:	2a69      	cmp	r2, #105	@ 0x69
 800dbf4:	d027      	beq.n	800dc46 <_strtod_l+0x33e>
 800dbf6:	dc24      	bgt.n	800dc42 <_strtod_l+0x33a>
 800dbf8:	2a49      	cmp	r2, #73	@ 0x49
 800dbfa:	d024      	beq.n	800dc46 <_strtod_l+0x33e>
 800dbfc:	2a4e      	cmp	r2, #78	@ 0x4e
 800dbfe:	f47f aeda 	bne.w	800d9b6 <_strtod_l+0xae>
 800dc02:	4997      	ldr	r1, [pc, #604]	@ (800de60 <_strtod_l+0x558>)
 800dc04:	a811      	add	r0, sp, #68	@ 0x44
 800dc06:	f001 f9ab 	bl	800ef60 <__match>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	f43f aed3 	beq.w	800d9b6 <_strtod_l+0xae>
 800dc10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	2b28      	cmp	r3, #40	@ 0x28
 800dc16:	d12d      	bne.n	800dc74 <_strtod_l+0x36c>
 800dc18:	4992      	ldr	r1, [pc, #584]	@ (800de64 <_strtod_l+0x55c>)
 800dc1a:	aa14      	add	r2, sp, #80	@ 0x50
 800dc1c:	a811      	add	r0, sp, #68	@ 0x44
 800dc1e:	f001 f9b3 	bl	800ef88 <__hexnan>
 800dc22:	2805      	cmp	r0, #5
 800dc24:	d126      	bne.n	800dc74 <_strtod_l+0x36c>
 800dc26:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dc28:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800dc2c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dc30:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dc34:	e6a3      	b.n	800d97e <_strtod_l+0x76>
 800dc36:	240a      	movs	r4, #10
 800dc38:	fb04 2c0c 	mla	ip, r4, ip, r2
 800dc3c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800dc40:	e7b8      	b.n	800dbb4 <_strtod_l+0x2ac>
 800dc42:	2a6e      	cmp	r2, #110	@ 0x6e
 800dc44:	e7db      	b.n	800dbfe <_strtod_l+0x2f6>
 800dc46:	4988      	ldr	r1, [pc, #544]	@ (800de68 <_strtod_l+0x560>)
 800dc48:	a811      	add	r0, sp, #68	@ 0x44
 800dc4a:	f001 f989 	bl	800ef60 <__match>
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	f43f aeb1 	beq.w	800d9b6 <_strtod_l+0xae>
 800dc54:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dc56:	4985      	ldr	r1, [pc, #532]	@ (800de6c <_strtod_l+0x564>)
 800dc58:	3b01      	subs	r3, #1
 800dc5a:	a811      	add	r0, sp, #68	@ 0x44
 800dc5c:	9311      	str	r3, [sp, #68]	@ 0x44
 800dc5e:	f001 f97f 	bl	800ef60 <__match>
 800dc62:	b910      	cbnz	r0, 800dc6a <_strtod_l+0x362>
 800dc64:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dc66:	3301      	adds	r3, #1
 800dc68:	9311      	str	r3, [sp, #68]	@ 0x44
 800dc6a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800de80 <_strtod_l+0x578>
 800dc6e:	f04f 0a00 	mov.w	sl, #0
 800dc72:	e684      	b.n	800d97e <_strtod_l+0x76>
 800dc74:	487e      	ldr	r0, [pc, #504]	@ (800de70 <_strtod_l+0x568>)
 800dc76:	f000 feaf 	bl	800e9d8 <nan>
 800dc7a:	ec5b ab10 	vmov	sl, fp, d0
 800dc7e:	e67e      	b.n	800d97e <_strtod_l+0x76>
 800dc80:	ee07 9a90 	vmov	s15, r9
 800dc84:	1be2      	subs	r2, r4, r7
 800dc86:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dc8a:	2d00      	cmp	r5, #0
 800dc8c:	bf08      	it	eq
 800dc8e:	461d      	moveq	r5, r3
 800dc90:	2b10      	cmp	r3, #16
 800dc92:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc94:	461a      	mov	r2, r3
 800dc96:	bfa8      	it	ge
 800dc98:	2210      	movge	r2, #16
 800dc9a:	2b09      	cmp	r3, #9
 800dc9c:	ec5b ab17 	vmov	sl, fp, d7
 800dca0:	dc15      	bgt.n	800dcce <_strtod_l+0x3c6>
 800dca2:	1be1      	subs	r1, r4, r7
 800dca4:	2900      	cmp	r1, #0
 800dca6:	f43f ae6a 	beq.w	800d97e <_strtod_l+0x76>
 800dcaa:	eba4 0107 	sub.w	r1, r4, r7
 800dcae:	dd72      	ble.n	800dd96 <_strtod_l+0x48e>
 800dcb0:	2916      	cmp	r1, #22
 800dcb2:	dc59      	bgt.n	800dd68 <_strtod_l+0x460>
 800dcb4:	4b6f      	ldr	r3, [pc, #444]	@ (800de74 <_strtod_l+0x56c>)
 800dcb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dcbc:	ed93 7b00 	vldr	d7, [r3]
 800dcc0:	ec4b ab16 	vmov	d6, sl, fp
 800dcc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dcc8:	ec5b ab17 	vmov	sl, fp, d7
 800dccc:	e657      	b.n	800d97e <_strtod_l+0x76>
 800dcce:	4969      	ldr	r1, [pc, #420]	@ (800de74 <_strtod_l+0x56c>)
 800dcd0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800dcd4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800dcd8:	ee06 6a90 	vmov	s13, r6
 800dcdc:	2b0f      	cmp	r3, #15
 800dcde:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800dce2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800dce6:	ec5b ab16 	vmov	sl, fp, d6
 800dcea:	ddda      	ble.n	800dca2 <_strtod_l+0x39a>
 800dcec:	1a9a      	subs	r2, r3, r2
 800dcee:	1be1      	subs	r1, r4, r7
 800dcf0:	440a      	add	r2, r1
 800dcf2:	2a00      	cmp	r2, #0
 800dcf4:	f340 8094 	ble.w	800de20 <_strtod_l+0x518>
 800dcf8:	f012 000f 	ands.w	r0, r2, #15
 800dcfc:	d00a      	beq.n	800dd14 <_strtod_l+0x40c>
 800dcfe:	495d      	ldr	r1, [pc, #372]	@ (800de74 <_strtod_l+0x56c>)
 800dd00:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dd04:	ed91 7b00 	vldr	d7, [r1]
 800dd08:	ec4b ab16 	vmov	d6, sl, fp
 800dd0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd10:	ec5b ab17 	vmov	sl, fp, d7
 800dd14:	f032 020f 	bics.w	r2, r2, #15
 800dd18:	d073      	beq.n	800de02 <_strtod_l+0x4fa>
 800dd1a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800dd1e:	dd47      	ble.n	800ddb0 <_strtod_l+0x4a8>
 800dd20:	2400      	movs	r4, #0
 800dd22:	4625      	mov	r5, r4
 800dd24:	9407      	str	r4, [sp, #28]
 800dd26:	4626      	mov	r6, r4
 800dd28:	9a05      	ldr	r2, [sp, #20]
 800dd2a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800de80 <_strtod_l+0x578>
 800dd2e:	2322      	movs	r3, #34	@ 0x22
 800dd30:	6013      	str	r3, [r2, #0]
 800dd32:	f04f 0a00 	mov.w	sl, #0
 800dd36:	9b07      	ldr	r3, [sp, #28]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f43f ae20 	beq.w	800d97e <_strtod_l+0x76>
 800dd3e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dd40:	9805      	ldr	r0, [sp, #20]
 800dd42:	f7ff f957 	bl	800cff4 <_Bfree>
 800dd46:	9805      	ldr	r0, [sp, #20]
 800dd48:	4631      	mov	r1, r6
 800dd4a:	f7ff f953 	bl	800cff4 <_Bfree>
 800dd4e:	9805      	ldr	r0, [sp, #20]
 800dd50:	4629      	mov	r1, r5
 800dd52:	f7ff f94f 	bl	800cff4 <_Bfree>
 800dd56:	9907      	ldr	r1, [sp, #28]
 800dd58:	9805      	ldr	r0, [sp, #20]
 800dd5a:	f7ff f94b 	bl	800cff4 <_Bfree>
 800dd5e:	9805      	ldr	r0, [sp, #20]
 800dd60:	4621      	mov	r1, r4
 800dd62:	f7ff f947 	bl	800cff4 <_Bfree>
 800dd66:	e60a      	b.n	800d97e <_strtod_l+0x76>
 800dd68:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800dd6c:	1be0      	subs	r0, r4, r7
 800dd6e:	4281      	cmp	r1, r0
 800dd70:	dbbc      	blt.n	800dcec <_strtod_l+0x3e4>
 800dd72:	4a40      	ldr	r2, [pc, #256]	@ (800de74 <_strtod_l+0x56c>)
 800dd74:	f1c3 030f 	rsb	r3, r3, #15
 800dd78:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800dd7c:	ed91 7b00 	vldr	d7, [r1]
 800dd80:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd82:	ec4b ab16 	vmov	d6, sl, fp
 800dd86:	1acb      	subs	r3, r1, r3
 800dd88:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800dd8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd90:	ed92 6b00 	vldr	d6, [r2]
 800dd94:	e796      	b.n	800dcc4 <_strtod_l+0x3bc>
 800dd96:	3116      	adds	r1, #22
 800dd98:	dba8      	blt.n	800dcec <_strtod_l+0x3e4>
 800dd9a:	4b36      	ldr	r3, [pc, #216]	@ (800de74 <_strtod_l+0x56c>)
 800dd9c:	1b3c      	subs	r4, r7, r4
 800dd9e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800dda2:	ed94 7b00 	vldr	d7, [r4]
 800dda6:	ec4b ab16 	vmov	d6, sl, fp
 800ddaa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ddae:	e78b      	b.n	800dcc8 <_strtod_l+0x3c0>
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	ec4b ab17 	vmov	d7, sl, fp
 800ddb6:	4e30      	ldr	r6, [pc, #192]	@ (800de78 <_strtod_l+0x570>)
 800ddb8:	1112      	asrs	r2, r2, #4
 800ddba:	4601      	mov	r1, r0
 800ddbc:	2a01      	cmp	r2, #1
 800ddbe:	dc23      	bgt.n	800de08 <_strtod_l+0x500>
 800ddc0:	b108      	cbz	r0, 800ddc6 <_strtod_l+0x4be>
 800ddc2:	ec5b ab17 	vmov	sl, fp, d7
 800ddc6:	4a2c      	ldr	r2, [pc, #176]	@ (800de78 <_strtod_l+0x570>)
 800ddc8:	482c      	ldr	r0, [pc, #176]	@ (800de7c <_strtod_l+0x574>)
 800ddca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ddce:	ed92 7b00 	vldr	d7, [r2]
 800ddd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ddd6:	ec4b ab16 	vmov	d6, sl, fp
 800ddda:	4a29      	ldr	r2, [pc, #164]	@ (800de80 <_strtod_l+0x578>)
 800dddc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dde0:	ee17 1a90 	vmov	r1, s15
 800dde4:	400a      	ands	r2, r1
 800dde6:	4282      	cmp	r2, r0
 800dde8:	ec5b ab17 	vmov	sl, fp, d7
 800ddec:	d898      	bhi.n	800dd20 <_strtod_l+0x418>
 800ddee:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800ddf2:	4282      	cmp	r2, r0
 800ddf4:	bf86      	itte	hi
 800ddf6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800de84 <_strtod_l+0x57c>
 800ddfa:	f04f 3aff 	movhi.w	sl, #4294967295
 800ddfe:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800de02:	2200      	movs	r2, #0
 800de04:	9206      	str	r2, [sp, #24]
 800de06:	e076      	b.n	800def6 <_strtod_l+0x5ee>
 800de08:	f012 0f01 	tst.w	r2, #1
 800de0c:	d004      	beq.n	800de18 <_strtod_l+0x510>
 800de0e:	ed96 6b00 	vldr	d6, [r6]
 800de12:	2001      	movs	r0, #1
 800de14:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de18:	3101      	adds	r1, #1
 800de1a:	1052      	asrs	r2, r2, #1
 800de1c:	3608      	adds	r6, #8
 800de1e:	e7cd      	b.n	800ddbc <_strtod_l+0x4b4>
 800de20:	d0ef      	beq.n	800de02 <_strtod_l+0x4fa>
 800de22:	4252      	negs	r2, r2
 800de24:	f012 000f 	ands.w	r0, r2, #15
 800de28:	d00a      	beq.n	800de40 <_strtod_l+0x538>
 800de2a:	4912      	ldr	r1, [pc, #72]	@ (800de74 <_strtod_l+0x56c>)
 800de2c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800de30:	ed91 7b00 	vldr	d7, [r1]
 800de34:	ec4b ab16 	vmov	d6, sl, fp
 800de38:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800de3c:	ec5b ab17 	vmov	sl, fp, d7
 800de40:	1112      	asrs	r2, r2, #4
 800de42:	d0de      	beq.n	800de02 <_strtod_l+0x4fa>
 800de44:	2a1f      	cmp	r2, #31
 800de46:	dd1f      	ble.n	800de88 <_strtod_l+0x580>
 800de48:	2400      	movs	r4, #0
 800de4a:	4625      	mov	r5, r4
 800de4c:	9407      	str	r4, [sp, #28]
 800de4e:	4626      	mov	r6, r4
 800de50:	9a05      	ldr	r2, [sp, #20]
 800de52:	2322      	movs	r3, #34	@ 0x22
 800de54:	f04f 0a00 	mov.w	sl, #0
 800de58:	f04f 0b00 	mov.w	fp, #0
 800de5c:	6013      	str	r3, [r2, #0]
 800de5e:	e76a      	b.n	800dd36 <_strtod_l+0x42e>
 800de60:	0800fc19 	.word	0x0800fc19
 800de64:	0800fe2c 	.word	0x0800fe2c
 800de68:	0800fc11 	.word	0x0800fc11
 800de6c:	0800fc48 	.word	0x0800fc48
 800de70:	0800ffd5 	.word	0x0800ffd5
 800de74:	0800fd60 	.word	0x0800fd60
 800de78:	0800fd38 	.word	0x0800fd38
 800de7c:	7ca00000 	.word	0x7ca00000
 800de80:	7ff00000 	.word	0x7ff00000
 800de84:	7fefffff 	.word	0x7fefffff
 800de88:	f012 0110 	ands.w	r1, r2, #16
 800de8c:	bf18      	it	ne
 800de8e:	216a      	movne	r1, #106	@ 0x6a
 800de90:	9106      	str	r1, [sp, #24]
 800de92:	ec4b ab17 	vmov	d7, sl, fp
 800de96:	49b0      	ldr	r1, [pc, #704]	@ (800e158 <_strtod_l+0x850>)
 800de98:	2000      	movs	r0, #0
 800de9a:	07d6      	lsls	r6, r2, #31
 800de9c:	d504      	bpl.n	800dea8 <_strtod_l+0x5a0>
 800de9e:	ed91 6b00 	vldr	d6, [r1]
 800dea2:	2001      	movs	r0, #1
 800dea4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dea8:	1052      	asrs	r2, r2, #1
 800deaa:	f101 0108 	add.w	r1, r1, #8
 800deae:	d1f4      	bne.n	800de9a <_strtod_l+0x592>
 800deb0:	b108      	cbz	r0, 800deb6 <_strtod_l+0x5ae>
 800deb2:	ec5b ab17 	vmov	sl, fp, d7
 800deb6:	9a06      	ldr	r2, [sp, #24]
 800deb8:	b1b2      	cbz	r2, 800dee8 <_strtod_l+0x5e0>
 800deba:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800debe:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800dec2:	2a00      	cmp	r2, #0
 800dec4:	4658      	mov	r0, fp
 800dec6:	dd0f      	ble.n	800dee8 <_strtod_l+0x5e0>
 800dec8:	2a1f      	cmp	r2, #31
 800deca:	dd55      	ble.n	800df78 <_strtod_l+0x670>
 800decc:	2a34      	cmp	r2, #52	@ 0x34
 800dece:	bfde      	ittt	le
 800ded0:	f04f 32ff 	movle.w	r2, #4294967295
 800ded4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800ded8:	408a      	lslle	r2, r1
 800deda:	f04f 0a00 	mov.w	sl, #0
 800dede:	bfcc      	ite	gt
 800dee0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800dee4:	ea02 0b00 	andle.w	fp, r2, r0
 800dee8:	ec4b ab17 	vmov	d7, sl, fp
 800deec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800def0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800def4:	d0a8      	beq.n	800de48 <_strtod_l+0x540>
 800def6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800def8:	9805      	ldr	r0, [sp, #20]
 800defa:	f8cd 9000 	str.w	r9, [sp]
 800defe:	462a      	mov	r2, r5
 800df00:	f7ff f8e0 	bl	800d0c4 <__s2b>
 800df04:	9007      	str	r0, [sp, #28]
 800df06:	2800      	cmp	r0, #0
 800df08:	f43f af0a 	beq.w	800dd20 <_strtod_l+0x418>
 800df0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df0e:	1b3f      	subs	r7, r7, r4
 800df10:	2b00      	cmp	r3, #0
 800df12:	bfb4      	ite	lt
 800df14:	463b      	movlt	r3, r7
 800df16:	2300      	movge	r3, #0
 800df18:	930a      	str	r3, [sp, #40]	@ 0x28
 800df1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df1c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800e148 <_strtod_l+0x840>
 800df20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800df24:	2400      	movs	r4, #0
 800df26:	930d      	str	r3, [sp, #52]	@ 0x34
 800df28:	4625      	mov	r5, r4
 800df2a:	9b07      	ldr	r3, [sp, #28]
 800df2c:	9805      	ldr	r0, [sp, #20]
 800df2e:	6859      	ldr	r1, [r3, #4]
 800df30:	f7ff f820 	bl	800cf74 <_Balloc>
 800df34:	4606      	mov	r6, r0
 800df36:	2800      	cmp	r0, #0
 800df38:	f43f aef6 	beq.w	800dd28 <_strtod_l+0x420>
 800df3c:	9b07      	ldr	r3, [sp, #28]
 800df3e:	691a      	ldr	r2, [r3, #16]
 800df40:	ec4b ab19 	vmov	d9, sl, fp
 800df44:	3202      	adds	r2, #2
 800df46:	f103 010c 	add.w	r1, r3, #12
 800df4a:	0092      	lsls	r2, r2, #2
 800df4c:	300c      	adds	r0, #12
 800df4e:	f000 fd33 	bl	800e9b8 <memcpy>
 800df52:	eeb0 0b49 	vmov.f64	d0, d9
 800df56:	9805      	ldr	r0, [sp, #20]
 800df58:	aa14      	add	r2, sp, #80	@ 0x50
 800df5a:	a913      	add	r1, sp, #76	@ 0x4c
 800df5c:	f7ff fbee 	bl	800d73c <__d2b>
 800df60:	9012      	str	r0, [sp, #72]	@ 0x48
 800df62:	2800      	cmp	r0, #0
 800df64:	f43f aee0 	beq.w	800dd28 <_strtod_l+0x420>
 800df68:	9805      	ldr	r0, [sp, #20]
 800df6a:	2101      	movs	r1, #1
 800df6c:	f7ff f940 	bl	800d1f0 <__i2b>
 800df70:	4605      	mov	r5, r0
 800df72:	b940      	cbnz	r0, 800df86 <_strtod_l+0x67e>
 800df74:	2500      	movs	r5, #0
 800df76:	e6d7      	b.n	800dd28 <_strtod_l+0x420>
 800df78:	f04f 31ff 	mov.w	r1, #4294967295
 800df7c:	fa01 f202 	lsl.w	r2, r1, r2
 800df80:	ea02 0a0a 	and.w	sl, r2, sl
 800df84:	e7b0      	b.n	800dee8 <_strtod_l+0x5e0>
 800df86:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800df88:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800df8a:	2f00      	cmp	r7, #0
 800df8c:	bfab      	itete	ge
 800df8e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800df90:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800df92:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800df96:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800df9a:	bfac      	ite	ge
 800df9c:	eb07 0903 	addge.w	r9, r7, r3
 800dfa0:	eba3 0807 	sublt.w	r8, r3, r7
 800dfa4:	9b06      	ldr	r3, [sp, #24]
 800dfa6:	1aff      	subs	r7, r7, r3
 800dfa8:	4417      	add	r7, r2
 800dfaa:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800dfae:	4a6b      	ldr	r2, [pc, #428]	@ (800e15c <_strtod_l+0x854>)
 800dfb0:	3f01      	subs	r7, #1
 800dfb2:	4297      	cmp	r7, r2
 800dfb4:	da51      	bge.n	800e05a <_strtod_l+0x752>
 800dfb6:	1bd1      	subs	r1, r2, r7
 800dfb8:	291f      	cmp	r1, #31
 800dfba:	eba3 0301 	sub.w	r3, r3, r1
 800dfbe:	f04f 0201 	mov.w	r2, #1
 800dfc2:	dc3e      	bgt.n	800e042 <_strtod_l+0x73a>
 800dfc4:	408a      	lsls	r2, r1
 800dfc6:	920c      	str	r2, [sp, #48]	@ 0x30
 800dfc8:	2200      	movs	r2, #0
 800dfca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dfcc:	eb09 0703 	add.w	r7, r9, r3
 800dfd0:	4498      	add	r8, r3
 800dfd2:	9b06      	ldr	r3, [sp, #24]
 800dfd4:	45b9      	cmp	r9, r7
 800dfd6:	4498      	add	r8, r3
 800dfd8:	464b      	mov	r3, r9
 800dfda:	bfa8      	it	ge
 800dfdc:	463b      	movge	r3, r7
 800dfde:	4543      	cmp	r3, r8
 800dfe0:	bfa8      	it	ge
 800dfe2:	4643      	movge	r3, r8
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	bfc2      	ittt	gt
 800dfe8:	1aff      	subgt	r7, r7, r3
 800dfea:	eba8 0803 	subgt.w	r8, r8, r3
 800dfee:	eba9 0903 	subgt.w	r9, r9, r3
 800dff2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	dd16      	ble.n	800e026 <_strtod_l+0x71e>
 800dff8:	4629      	mov	r1, r5
 800dffa:	9805      	ldr	r0, [sp, #20]
 800dffc:	461a      	mov	r2, r3
 800dffe:	f7ff f9b7 	bl	800d370 <__pow5mult>
 800e002:	4605      	mov	r5, r0
 800e004:	2800      	cmp	r0, #0
 800e006:	d0b5      	beq.n	800df74 <_strtod_l+0x66c>
 800e008:	4601      	mov	r1, r0
 800e00a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e00c:	9805      	ldr	r0, [sp, #20]
 800e00e:	f7ff f905 	bl	800d21c <__multiply>
 800e012:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e014:	2800      	cmp	r0, #0
 800e016:	f43f ae87 	beq.w	800dd28 <_strtod_l+0x420>
 800e01a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e01c:	9805      	ldr	r0, [sp, #20]
 800e01e:	f7fe ffe9 	bl	800cff4 <_Bfree>
 800e022:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e024:	9312      	str	r3, [sp, #72]	@ 0x48
 800e026:	2f00      	cmp	r7, #0
 800e028:	dc1b      	bgt.n	800e062 <_strtod_l+0x75a>
 800e02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	dd21      	ble.n	800e074 <_strtod_l+0x76c>
 800e030:	4631      	mov	r1, r6
 800e032:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e034:	9805      	ldr	r0, [sp, #20]
 800e036:	f7ff f99b 	bl	800d370 <__pow5mult>
 800e03a:	4606      	mov	r6, r0
 800e03c:	b9d0      	cbnz	r0, 800e074 <_strtod_l+0x76c>
 800e03e:	2600      	movs	r6, #0
 800e040:	e672      	b.n	800dd28 <_strtod_l+0x420>
 800e042:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800e046:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800e04a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800e04e:	37e2      	adds	r7, #226	@ 0xe2
 800e050:	fa02 f107 	lsl.w	r1, r2, r7
 800e054:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e056:	920c      	str	r2, [sp, #48]	@ 0x30
 800e058:	e7b8      	b.n	800dfcc <_strtod_l+0x6c4>
 800e05a:	2200      	movs	r2, #0
 800e05c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e05e:	2201      	movs	r2, #1
 800e060:	e7f9      	b.n	800e056 <_strtod_l+0x74e>
 800e062:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e064:	9805      	ldr	r0, [sp, #20]
 800e066:	463a      	mov	r2, r7
 800e068:	f7ff f9dc 	bl	800d424 <__lshift>
 800e06c:	9012      	str	r0, [sp, #72]	@ 0x48
 800e06e:	2800      	cmp	r0, #0
 800e070:	d1db      	bne.n	800e02a <_strtod_l+0x722>
 800e072:	e659      	b.n	800dd28 <_strtod_l+0x420>
 800e074:	f1b8 0f00 	cmp.w	r8, #0
 800e078:	dd07      	ble.n	800e08a <_strtod_l+0x782>
 800e07a:	4631      	mov	r1, r6
 800e07c:	9805      	ldr	r0, [sp, #20]
 800e07e:	4642      	mov	r2, r8
 800e080:	f7ff f9d0 	bl	800d424 <__lshift>
 800e084:	4606      	mov	r6, r0
 800e086:	2800      	cmp	r0, #0
 800e088:	d0d9      	beq.n	800e03e <_strtod_l+0x736>
 800e08a:	f1b9 0f00 	cmp.w	r9, #0
 800e08e:	dd08      	ble.n	800e0a2 <_strtod_l+0x79a>
 800e090:	4629      	mov	r1, r5
 800e092:	9805      	ldr	r0, [sp, #20]
 800e094:	464a      	mov	r2, r9
 800e096:	f7ff f9c5 	bl	800d424 <__lshift>
 800e09a:	4605      	mov	r5, r0
 800e09c:	2800      	cmp	r0, #0
 800e09e:	f43f ae43 	beq.w	800dd28 <_strtod_l+0x420>
 800e0a2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e0a4:	9805      	ldr	r0, [sp, #20]
 800e0a6:	4632      	mov	r2, r6
 800e0a8:	f7ff fa44 	bl	800d534 <__mdiff>
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	f43f ae3a 	beq.w	800dd28 <_strtod_l+0x420>
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800e0ba:	60c3      	str	r3, [r0, #12]
 800e0bc:	4629      	mov	r1, r5
 800e0be:	f7ff fa1d 	bl	800d4fc <__mcmp>
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	da4e      	bge.n	800e164 <_strtod_l+0x85c>
 800e0c6:	ea58 080a 	orrs.w	r8, r8, sl
 800e0ca:	d174      	bne.n	800e1b6 <_strtod_l+0x8ae>
 800e0cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d170      	bne.n	800e1b6 <_strtod_l+0x8ae>
 800e0d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e0d8:	0d1b      	lsrs	r3, r3, #20
 800e0da:	051b      	lsls	r3, r3, #20
 800e0dc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e0e0:	d969      	bls.n	800e1b6 <_strtod_l+0x8ae>
 800e0e2:	6963      	ldr	r3, [r4, #20]
 800e0e4:	b913      	cbnz	r3, 800e0ec <_strtod_l+0x7e4>
 800e0e6:	6923      	ldr	r3, [r4, #16]
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	dd64      	ble.n	800e1b6 <_strtod_l+0x8ae>
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	9805      	ldr	r0, [sp, #20]
 800e0f2:	f7ff f997 	bl	800d424 <__lshift>
 800e0f6:	4629      	mov	r1, r5
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	f7ff f9ff 	bl	800d4fc <__mcmp>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	dd59      	ble.n	800e1b6 <_strtod_l+0x8ae>
 800e102:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e106:	9a06      	ldr	r2, [sp, #24]
 800e108:	0d1b      	lsrs	r3, r3, #20
 800e10a:	051b      	lsls	r3, r3, #20
 800e10c:	2a00      	cmp	r2, #0
 800e10e:	d070      	beq.n	800e1f2 <_strtod_l+0x8ea>
 800e110:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e114:	d86d      	bhi.n	800e1f2 <_strtod_l+0x8ea>
 800e116:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e11a:	f67f ae99 	bls.w	800de50 <_strtod_l+0x548>
 800e11e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800e150 <_strtod_l+0x848>
 800e122:	ec4b ab16 	vmov	d6, sl, fp
 800e126:	4b0e      	ldr	r3, [pc, #56]	@ (800e160 <_strtod_l+0x858>)
 800e128:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e12c:	ee17 2a90 	vmov	r2, s15
 800e130:	4013      	ands	r3, r2
 800e132:	ec5b ab17 	vmov	sl, fp, d7
 800e136:	2b00      	cmp	r3, #0
 800e138:	f47f ae01 	bne.w	800dd3e <_strtod_l+0x436>
 800e13c:	9a05      	ldr	r2, [sp, #20]
 800e13e:	2322      	movs	r3, #34	@ 0x22
 800e140:	6013      	str	r3, [r2, #0]
 800e142:	e5fc      	b.n	800dd3e <_strtod_l+0x436>
 800e144:	f3af 8000 	nop.w
 800e148:	ffc00000 	.word	0xffc00000
 800e14c:	41dfffff 	.word	0x41dfffff
 800e150:	00000000 	.word	0x00000000
 800e154:	39500000 	.word	0x39500000
 800e158:	0800fe58 	.word	0x0800fe58
 800e15c:	fffffc02 	.word	0xfffffc02
 800e160:	7ff00000 	.word	0x7ff00000
 800e164:	46d9      	mov	r9, fp
 800e166:	d15d      	bne.n	800e224 <_strtod_l+0x91c>
 800e168:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e16c:	f1b8 0f00 	cmp.w	r8, #0
 800e170:	d02a      	beq.n	800e1c8 <_strtod_l+0x8c0>
 800e172:	4aab      	ldr	r2, [pc, #684]	@ (800e420 <_strtod_l+0xb18>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d12a      	bne.n	800e1ce <_strtod_l+0x8c6>
 800e178:	9b06      	ldr	r3, [sp, #24]
 800e17a:	4652      	mov	r2, sl
 800e17c:	b1fb      	cbz	r3, 800e1be <_strtod_l+0x8b6>
 800e17e:	4ba9      	ldr	r3, [pc, #676]	@ (800e424 <_strtod_l+0xb1c>)
 800e180:	ea0b 0303 	and.w	r3, fp, r3
 800e184:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e188:	f04f 31ff 	mov.w	r1, #4294967295
 800e18c:	d81a      	bhi.n	800e1c4 <_strtod_l+0x8bc>
 800e18e:	0d1b      	lsrs	r3, r3, #20
 800e190:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e194:	fa01 f303 	lsl.w	r3, r1, r3
 800e198:	429a      	cmp	r2, r3
 800e19a:	d118      	bne.n	800e1ce <_strtod_l+0x8c6>
 800e19c:	4ba2      	ldr	r3, [pc, #648]	@ (800e428 <_strtod_l+0xb20>)
 800e19e:	4599      	cmp	r9, r3
 800e1a0:	d102      	bne.n	800e1a8 <_strtod_l+0x8a0>
 800e1a2:	3201      	adds	r2, #1
 800e1a4:	f43f adc0 	beq.w	800dd28 <_strtod_l+0x420>
 800e1a8:	4b9e      	ldr	r3, [pc, #632]	@ (800e424 <_strtod_l+0xb1c>)
 800e1aa:	ea09 0303 	and.w	r3, r9, r3
 800e1ae:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800e1b2:	f04f 0a00 	mov.w	sl, #0
 800e1b6:	9b06      	ldr	r3, [sp, #24]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d1b0      	bne.n	800e11e <_strtod_l+0x816>
 800e1bc:	e5bf      	b.n	800dd3e <_strtod_l+0x436>
 800e1be:	f04f 33ff 	mov.w	r3, #4294967295
 800e1c2:	e7e9      	b.n	800e198 <_strtod_l+0x890>
 800e1c4:	460b      	mov	r3, r1
 800e1c6:	e7e7      	b.n	800e198 <_strtod_l+0x890>
 800e1c8:	ea53 030a 	orrs.w	r3, r3, sl
 800e1cc:	d099      	beq.n	800e102 <_strtod_l+0x7fa>
 800e1ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1d0:	b1c3      	cbz	r3, 800e204 <_strtod_l+0x8fc>
 800e1d2:	ea13 0f09 	tst.w	r3, r9
 800e1d6:	d0ee      	beq.n	800e1b6 <_strtod_l+0x8ae>
 800e1d8:	9a06      	ldr	r2, [sp, #24]
 800e1da:	4650      	mov	r0, sl
 800e1dc:	4659      	mov	r1, fp
 800e1de:	f1b8 0f00 	cmp.w	r8, #0
 800e1e2:	d013      	beq.n	800e20c <_strtod_l+0x904>
 800e1e4:	f7ff fb75 	bl	800d8d2 <sulp>
 800e1e8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800e1ec:	ec5b ab17 	vmov	sl, fp, d7
 800e1f0:	e7e1      	b.n	800e1b6 <_strtod_l+0x8ae>
 800e1f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e1f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e1fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e1fe:	f04f 3aff 	mov.w	sl, #4294967295
 800e202:	e7d8      	b.n	800e1b6 <_strtod_l+0x8ae>
 800e204:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e206:	ea13 0f0a 	tst.w	r3, sl
 800e20a:	e7e4      	b.n	800e1d6 <_strtod_l+0x8ce>
 800e20c:	f7ff fb61 	bl	800d8d2 <sulp>
 800e210:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e214:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e21c:	ec5b ab10 	vmov	sl, fp, d0
 800e220:	d1c9      	bne.n	800e1b6 <_strtod_l+0x8ae>
 800e222:	e615      	b.n	800de50 <_strtod_l+0x548>
 800e224:	4629      	mov	r1, r5
 800e226:	4620      	mov	r0, r4
 800e228:	f7ff fae0 	bl	800d7ec <__ratio>
 800e22c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800e230:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e238:	d85d      	bhi.n	800e2f6 <_strtod_l+0x9ee>
 800e23a:	f1b8 0f00 	cmp.w	r8, #0
 800e23e:	d164      	bne.n	800e30a <_strtod_l+0xa02>
 800e240:	f1ba 0f00 	cmp.w	sl, #0
 800e244:	d14b      	bne.n	800e2de <_strtod_l+0x9d6>
 800e246:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e24a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d160      	bne.n	800e314 <_strtod_l+0xa0c>
 800e252:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800e256:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25e:	d401      	bmi.n	800e264 <_strtod_l+0x95c>
 800e260:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e264:	eeb1 ab48 	vneg.f64	d10, d8
 800e268:	486e      	ldr	r0, [pc, #440]	@ (800e424 <_strtod_l+0xb1c>)
 800e26a:	4970      	ldr	r1, [pc, #448]	@ (800e42c <_strtod_l+0xb24>)
 800e26c:	ea09 0700 	and.w	r7, r9, r0
 800e270:	428f      	cmp	r7, r1
 800e272:	ec53 2b1a 	vmov	r2, r3, d10
 800e276:	d17d      	bne.n	800e374 <_strtod_l+0xa6c>
 800e278:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800e27c:	ec4b ab1c 	vmov	d12, sl, fp
 800e280:	eeb0 0b4c 	vmov.f64	d0, d12
 800e284:	f7ff f9ea 	bl	800d65c <__ulp>
 800e288:	4866      	ldr	r0, [pc, #408]	@ (800e424 <_strtod_l+0xb1c>)
 800e28a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800e28e:	ee1c 3a90 	vmov	r3, s25
 800e292:	4a67      	ldr	r2, [pc, #412]	@ (800e430 <_strtod_l+0xb28>)
 800e294:	ea03 0100 	and.w	r1, r3, r0
 800e298:	4291      	cmp	r1, r2
 800e29a:	ec5b ab1c 	vmov	sl, fp, d12
 800e29e:	d93c      	bls.n	800e31a <_strtod_l+0xa12>
 800e2a0:	ee19 2a90 	vmov	r2, s19
 800e2a4:	4b60      	ldr	r3, [pc, #384]	@ (800e428 <_strtod_l+0xb20>)
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d104      	bne.n	800e2b4 <_strtod_l+0x9ac>
 800e2aa:	ee19 3a10 	vmov	r3, s18
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	f43f ad3a 	beq.w	800dd28 <_strtod_l+0x420>
 800e2b4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800e428 <_strtod_l+0xb20>
 800e2b8:	f04f 3aff 	mov.w	sl, #4294967295
 800e2bc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e2be:	9805      	ldr	r0, [sp, #20]
 800e2c0:	f7fe fe98 	bl	800cff4 <_Bfree>
 800e2c4:	9805      	ldr	r0, [sp, #20]
 800e2c6:	4631      	mov	r1, r6
 800e2c8:	f7fe fe94 	bl	800cff4 <_Bfree>
 800e2cc:	9805      	ldr	r0, [sp, #20]
 800e2ce:	4629      	mov	r1, r5
 800e2d0:	f7fe fe90 	bl	800cff4 <_Bfree>
 800e2d4:	9805      	ldr	r0, [sp, #20]
 800e2d6:	4621      	mov	r1, r4
 800e2d8:	f7fe fe8c 	bl	800cff4 <_Bfree>
 800e2dc:	e625      	b.n	800df2a <_strtod_l+0x622>
 800e2de:	f1ba 0f01 	cmp.w	sl, #1
 800e2e2:	d103      	bne.n	800e2ec <_strtod_l+0x9e4>
 800e2e4:	f1bb 0f00 	cmp.w	fp, #0
 800e2e8:	f43f adb2 	beq.w	800de50 <_strtod_l+0x548>
 800e2ec:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e2f0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e2f4:	e7b8      	b.n	800e268 <_strtod_l+0x960>
 800e2f6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e2fa:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e2fe:	f1b8 0f00 	cmp.w	r8, #0
 800e302:	d0af      	beq.n	800e264 <_strtod_l+0x95c>
 800e304:	eeb0 ab48 	vmov.f64	d10, d8
 800e308:	e7ae      	b.n	800e268 <_strtod_l+0x960>
 800e30a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800e30e:	eeb0 8b4a 	vmov.f64	d8, d10
 800e312:	e7a9      	b.n	800e268 <_strtod_l+0x960>
 800e314:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e318:	e7a6      	b.n	800e268 <_strtod_l+0x960>
 800e31a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e31e:	9b06      	ldr	r3, [sp, #24]
 800e320:	46d9      	mov	r9, fp
 800e322:	2b00      	cmp	r3, #0
 800e324:	d1ca      	bne.n	800e2bc <_strtod_l+0x9b4>
 800e326:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e32a:	0d1b      	lsrs	r3, r3, #20
 800e32c:	051b      	lsls	r3, r3, #20
 800e32e:	429f      	cmp	r7, r3
 800e330:	d1c4      	bne.n	800e2bc <_strtod_l+0x9b4>
 800e332:	ec51 0b18 	vmov	r0, r1, d8
 800e336:	f7f2 f9af 	bl	8000698 <__aeabi_d2lz>
 800e33a:	f7f2 f967 	bl	800060c <__aeabi_l2d>
 800e33e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800e342:	ec41 0b17 	vmov	d7, r0, r1
 800e346:	ea49 090a 	orr.w	r9, r9, sl
 800e34a:	ea59 0908 	orrs.w	r9, r9, r8
 800e34e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e352:	d03c      	beq.n	800e3ce <_strtod_l+0xac6>
 800e354:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800e408 <_strtod_l+0xb00>
 800e358:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e360:	f53f aced 	bmi.w	800dd3e <_strtod_l+0x436>
 800e364:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e410 <_strtod_l+0xb08>
 800e368:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e370:	dda4      	ble.n	800e2bc <_strtod_l+0x9b4>
 800e372:	e4e4      	b.n	800dd3e <_strtod_l+0x436>
 800e374:	9906      	ldr	r1, [sp, #24]
 800e376:	b1e1      	cbz	r1, 800e3b2 <_strtod_l+0xaaa>
 800e378:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800e37c:	d819      	bhi.n	800e3b2 <_strtod_l+0xaaa>
 800e37e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e386:	d811      	bhi.n	800e3ac <_strtod_l+0xaa4>
 800e388:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800e38c:	ee18 3a10 	vmov	r3, s16
 800e390:	2b01      	cmp	r3, #1
 800e392:	bf38      	it	cc
 800e394:	2301      	movcc	r3, #1
 800e396:	ee08 3a10 	vmov	s16, r3
 800e39a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800e39e:	f1b8 0f00 	cmp.w	r8, #0
 800e3a2:	d111      	bne.n	800e3c8 <_strtod_l+0xac0>
 800e3a4:	eeb1 7b48 	vneg.f64	d7, d8
 800e3a8:	ec53 2b17 	vmov	r2, r3, d7
 800e3ac:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800e3b0:	1bcb      	subs	r3, r1, r7
 800e3b2:	eeb0 0b49 	vmov.f64	d0, d9
 800e3b6:	ec43 2b1a 	vmov	d10, r2, r3
 800e3ba:	f7ff f94f 	bl	800d65c <__ulp>
 800e3be:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800e3c2:	ec5b ab19 	vmov	sl, fp, d9
 800e3c6:	e7aa      	b.n	800e31e <_strtod_l+0xa16>
 800e3c8:	eeb0 7b48 	vmov.f64	d7, d8
 800e3cc:	e7ec      	b.n	800e3a8 <_strtod_l+0xaa0>
 800e3ce:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800e418 <_strtod_l+0xb10>
 800e3d2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3da:	f57f af6f 	bpl.w	800e2bc <_strtod_l+0x9b4>
 800e3de:	e4ae      	b.n	800dd3e <_strtod_l+0x436>
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	9308      	str	r3, [sp, #32]
 800e3e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e3e8:	6013      	str	r3, [r2, #0]
 800e3ea:	f7ff bacc 	b.w	800d986 <_strtod_l+0x7e>
 800e3ee:	2a65      	cmp	r2, #101	@ 0x65
 800e3f0:	f43f abbc 	beq.w	800db6c <_strtod_l+0x264>
 800e3f4:	2a45      	cmp	r2, #69	@ 0x45
 800e3f6:	f43f abb9 	beq.w	800db6c <_strtod_l+0x264>
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	9306      	str	r3, [sp, #24]
 800e3fe:	f7ff bbf0 	b.w	800dbe2 <_strtod_l+0x2da>
 800e402:	bf00      	nop
 800e404:	f3af 8000 	nop.w
 800e408:	94a03595 	.word	0x94a03595
 800e40c:	3fdfffff 	.word	0x3fdfffff
 800e410:	35afe535 	.word	0x35afe535
 800e414:	3fe00000 	.word	0x3fe00000
 800e418:	94a03595 	.word	0x94a03595
 800e41c:	3fcfffff 	.word	0x3fcfffff
 800e420:	000fffff 	.word	0x000fffff
 800e424:	7ff00000 	.word	0x7ff00000
 800e428:	7fefffff 	.word	0x7fefffff
 800e42c:	7fe00000 	.word	0x7fe00000
 800e430:	7c9fffff 	.word	0x7c9fffff

0800e434 <_strtod_r>:
 800e434:	4b01      	ldr	r3, [pc, #4]	@ (800e43c <_strtod_r+0x8>)
 800e436:	f7ff ba67 	b.w	800d908 <_strtod_l>
 800e43a:	bf00      	nop
 800e43c:	20000080 	.word	0x20000080

0800e440 <_strtol_l.constprop.0>:
 800e440:	2b24      	cmp	r3, #36	@ 0x24
 800e442:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e446:	4686      	mov	lr, r0
 800e448:	4690      	mov	r8, r2
 800e44a:	d801      	bhi.n	800e450 <_strtol_l.constprop.0+0x10>
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d106      	bne.n	800e45e <_strtol_l.constprop.0+0x1e>
 800e450:	f7fd fe7c 	bl	800c14c <__errno>
 800e454:	2316      	movs	r3, #22
 800e456:	6003      	str	r3, [r0, #0]
 800e458:	2000      	movs	r0, #0
 800e45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e45e:	4834      	ldr	r0, [pc, #208]	@ (800e530 <_strtol_l.constprop.0+0xf0>)
 800e460:	460d      	mov	r5, r1
 800e462:	462a      	mov	r2, r5
 800e464:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e468:	5d06      	ldrb	r6, [r0, r4]
 800e46a:	f016 0608 	ands.w	r6, r6, #8
 800e46e:	d1f8      	bne.n	800e462 <_strtol_l.constprop.0+0x22>
 800e470:	2c2d      	cmp	r4, #45	@ 0x2d
 800e472:	d12d      	bne.n	800e4d0 <_strtol_l.constprop.0+0x90>
 800e474:	782c      	ldrb	r4, [r5, #0]
 800e476:	2601      	movs	r6, #1
 800e478:	1c95      	adds	r5, r2, #2
 800e47a:	f033 0210 	bics.w	r2, r3, #16
 800e47e:	d109      	bne.n	800e494 <_strtol_l.constprop.0+0x54>
 800e480:	2c30      	cmp	r4, #48	@ 0x30
 800e482:	d12a      	bne.n	800e4da <_strtol_l.constprop.0+0x9a>
 800e484:	782a      	ldrb	r2, [r5, #0]
 800e486:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e48a:	2a58      	cmp	r2, #88	@ 0x58
 800e48c:	d125      	bne.n	800e4da <_strtol_l.constprop.0+0x9a>
 800e48e:	786c      	ldrb	r4, [r5, #1]
 800e490:	2310      	movs	r3, #16
 800e492:	3502      	adds	r5, #2
 800e494:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e498:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e49c:	2200      	movs	r2, #0
 800e49e:	fbbc f9f3 	udiv	r9, ip, r3
 800e4a2:	4610      	mov	r0, r2
 800e4a4:	fb03 ca19 	mls	sl, r3, r9, ip
 800e4a8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e4ac:	2f09      	cmp	r7, #9
 800e4ae:	d81b      	bhi.n	800e4e8 <_strtol_l.constprop.0+0xa8>
 800e4b0:	463c      	mov	r4, r7
 800e4b2:	42a3      	cmp	r3, r4
 800e4b4:	dd27      	ble.n	800e506 <_strtol_l.constprop.0+0xc6>
 800e4b6:	1c57      	adds	r7, r2, #1
 800e4b8:	d007      	beq.n	800e4ca <_strtol_l.constprop.0+0x8a>
 800e4ba:	4581      	cmp	r9, r0
 800e4bc:	d320      	bcc.n	800e500 <_strtol_l.constprop.0+0xc0>
 800e4be:	d101      	bne.n	800e4c4 <_strtol_l.constprop.0+0x84>
 800e4c0:	45a2      	cmp	sl, r4
 800e4c2:	db1d      	blt.n	800e500 <_strtol_l.constprop.0+0xc0>
 800e4c4:	fb00 4003 	mla	r0, r0, r3, r4
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4ce:	e7eb      	b.n	800e4a8 <_strtol_l.constprop.0+0x68>
 800e4d0:	2c2b      	cmp	r4, #43	@ 0x2b
 800e4d2:	bf04      	itt	eq
 800e4d4:	782c      	ldrbeq	r4, [r5, #0]
 800e4d6:	1c95      	addeq	r5, r2, #2
 800e4d8:	e7cf      	b.n	800e47a <_strtol_l.constprop.0+0x3a>
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d1da      	bne.n	800e494 <_strtol_l.constprop.0+0x54>
 800e4de:	2c30      	cmp	r4, #48	@ 0x30
 800e4e0:	bf0c      	ite	eq
 800e4e2:	2308      	moveq	r3, #8
 800e4e4:	230a      	movne	r3, #10
 800e4e6:	e7d5      	b.n	800e494 <_strtol_l.constprop.0+0x54>
 800e4e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e4ec:	2f19      	cmp	r7, #25
 800e4ee:	d801      	bhi.n	800e4f4 <_strtol_l.constprop.0+0xb4>
 800e4f0:	3c37      	subs	r4, #55	@ 0x37
 800e4f2:	e7de      	b.n	800e4b2 <_strtol_l.constprop.0+0x72>
 800e4f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e4f8:	2f19      	cmp	r7, #25
 800e4fa:	d804      	bhi.n	800e506 <_strtol_l.constprop.0+0xc6>
 800e4fc:	3c57      	subs	r4, #87	@ 0x57
 800e4fe:	e7d8      	b.n	800e4b2 <_strtol_l.constprop.0+0x72>
 800e500:	f04f 32ff 	mov.w	r2, #4294967295
 800e504:	e7e1      	b.n	800e4ca <_strtol_l.constprop.0+0x8a>
 800e506:	1c53      	adds	r3, r2, #1
 800e508:	d108      	bne.n	800e51c <_strtol_l.constprop.0+0xdc>
 800e50a:	2322      	movs	r3, #34	@ 0x22
 800e50c:	f8ce 3000 	str.w	r3, [lr]
 800e510:	4660      	mov	r0, ip
 800e512:	f1b8 0f00 	cmp.w	r8, #0
 800e516:	d0a0      	beq.n	800e45a <_strtol_l.constprop.0+0x1a>
 800e518:	1e69      	subs	r1, r5, #1
 800e51a:	e006      	b.n	800e52a <_strtol_l.constprop.0+0xea>
 800e51c:	b106      	cbz	r6, 800e520 <_strtol_l.constprop.0+0xe0>
 800e51e:	4240      	negs	r0, r0
 800e520:	f1b8 0f00 	cmp.w	r8, #0
 800e524:	d099      	beq.n	800e45a <_strtol_l.constprop.0+0x1a>
 800e526:	2a00      	cmp	r2, #0
 800e528:	d1f6      	bne.n	800e518 <_strtol_l.constprop.0+0xd8>
 800e52a:	f8c8 1000 	str.w	r1, [r8]
 800e52e:	e794      	b.n	800e45a <_strtol_l.constprop.0+0x1a>
 800e530:	0800fe81 	.word	0x0800fe81

0800e534 <_strtol_r>:
 800e534:	f7ff bf84 	b.w	800e440 <_strtol_l.constprop.0>

0800e538 <__ssputs_r>:
 800e538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e53c:	688e      	ldr	r6, [r1, #8]
 800e53e:	461f      	mov	r7, r3
 800e540:	42be      	cmp	r6, r7
 800e542:	680b      	ldr	r3, [r1, #0]
 800e544:	4682      	mov	sl, r0
 800e546:	460c      	mov	r4, r1
 800e548:	4690      	mov	r8, r2
 800e54a:	d82d      	bhi.n	800e5a8 <__ssputs_r+0x70>
 800e54c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e550:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e554:	d026      	beq.n	800e5a4 <__ssputs_r+0x6c>
 800e556:	6965      	ldr	r5, [r4, #20]
 800e558:	6909      	ldr	r1, [r1, #16]
 800e55a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e55e:	eba3 0901 	sub.w	r9, r3, r1
 800e562:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e566:	1c7b      	adds	r3, r7, #1
 800e568:	444b      	add	r3, r9
 800e56a:	106d      	asrs	r5, r5, #1
 800e56c:	429d      	cmp	r5, r3
 800e56e:	bf38      	it	cc
 800e570:	461d      	movcc	r5, r3
 800e572:	0553      	lsls	r3, r2, #21
 800e574:	d527      	bpl.n	800e5c6 <__ssputs_r+0x8e>
 800e576:	4629      	mov	r1, r5
 800e578:	f7fe fc70 	bl	800ce5c <_malloc_r>
 800e57c:	4606      	mov	r6, r0
 800e57e:	b360      	cbz	r0, 800e5da <__ssputs_r+0xa2>
 800e580:	6921      	ldr	r1, [r4, #16]
 800e582:	464a      	mov	r2, r9
 800e584:	f000 fa18 	bl	800e9b8 <memcpy>
 800e588:	89a3      	ldrh	r3, [r4, #12]
 800e58a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e58e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e592:	81a3      	strh	r3, [r4, #12]
 800e594:	6126      	str	r6, [r4, #16]
 800e596:	6165      	str	r5, [r4, #20]
 800e598:	444e      	add	r6, r9
 800e59a:	eba5 0509 	sub.w	r5, r5, r9
 800e59e:	6026      	str	r6, [r4, #0]
 800e5a0:	60a5      	str	r5, [r4, #8]
 800e5a2:	463e      	mov	r6, r7
 800e5a4:	42be      	cmp	r6, r7
 800e5a6:	d900      	bls.n	800e5aa <__ssputs_r+0x72>
 800e5a8:	463e      	mov	r6, r7
 800e5aa:	6820      	ldr	r0, [r4, #0]
 800e5ac:	4632      	mov	r2, r6
 800e5ae:	4641      	mov	r1, r8
 800e5b0:	f000 f9c6 	bl	800e940 <memmove>
 800e5b4:	68a3      	ldr	r3, [r4, #8]
 800e5b6:	1b9b      	subs	r3, r3, r6
 800e5b8:	60a3      	str	r3, [r4, #8]
 800e5ba:	6823      	ldr	r3, [r4, #0]
 800e5bc:	4433      	add	r3, r6
 800e5be:	6023      	str	r3, [r4, #0]
 800e5c0:	2000      	movs	r0, #0
 800e5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5c6:	462a      	mov	r2, r5
 800e5c8:	f000 fd8b 	bl	800f0e2 <_realloc_r>
 800e5cc:	4606      	mov	r6, r0
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	d1e0      	bne.n	800e594 <__ssputs_r+0x5c>
 800e5d2:	6921      	ldr	r1, [r4, #16]
 800e5d4:	4650      	mov	r0, sl
 800e5d6:	f7fe fbcd 	bl	800cd74 <_free_r>
 800e5da:	230c      	movs	r3, #12
 800e5dc:	f8ca 3000 	str.w	r3, [sl]
 800e5e0:	89a3      	ldrh	r3, [r4, #12]
 800e5e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5e6:	81a3      	strh	r3, [r4, #12]
 800e5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ec:	e7e9      	b.n	800e5c2 <__ssputs_r+0x8a>
	...

0800e5f0 <_svfiprintf_r>:
 800e5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	4698      	mov	r8, r3
 800e5f6:	898b      	ldrh	r3, [r1, #12]
 800e5f8:	061b      	lsls	r3, r3, #24
 800e5fa:	b09d      	sub	sp, #116	@ 0x74
 800e5fc:	4607      	mov	r7, r0
 800e5fe:	460d      	mov	r5, r1
 800e600:	4614      	mov	r4, r2
 800e602:	d510      	bpl.n	800e626 <_svfiprintf_r+0x36>
 800e604:	690b      	ldr	r3, [r1, #16]
 800e606:	b973      	cbnz	r3, 800e626 <_svfiprintf_r+0x36>
 800e608:	2140      	movs	r1, #64	@ 0x40
 800e60a:	f7fe fc27 	bl	800ce5c <_malloc_r>
 800e60e:	6028      	str	r0, [r5, #0]
 800e610:	6128      	str	r0, [r5, #16]
 800e612:	b930      	cbnz	r0, 800e622 <_svfiprintf_r+0x32>
 800e614:	230c      	movs	r3, #12
 800e616:	603b      	str	r3, [r7, #0]
 800e618:	f04f 30ff 	mov.w	r0, #4294967295
 800e61c:	b01d      	add	sp, #116	@ 0x74
 800e61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e622:	2340      	movs	r3, #64	@ 0x40
 800e624:	616b      	str	r3, [r5, #20]
 800e626:	2300      	movs	r3, #0
 800e628:	9309      	str	r3, [sp, #36]	@ 0x24
 800e62a:	2320      	movs	r3, #32
 800e62c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e630:	f8cd 800c 	str.w	r8, [sp, #12]
 800e634:	2330      	movs	r3, #48	@ 0x30
 800e636:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e7d4 <_svfiprintf_r+0x1e4>
 800e63a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e63e:	f04f 0901 	mov.w	r9, #1
 800e642:	4623      	mov	r3, r4
 800e644:	469a      	mov	sl, r3
 800e646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e64a:	b10a      	cbz	r2, 800e650 <_svfiprintf_r+0x60>
 800e64c:	2a25      	cmp	r2, #37	@ 0x25
 800e64e:	d1f9      	bne.n	800e644 <_svfiprintf_r+0x54>
 800e650:	ebba 0b04 	subs.w	fp, sl, r4
 800e654:	d00b      	beq.n	800e66e <_svfiprintf_r+0x7e>
 800e656:	465b      	mov	r3, fp
 800e658:	4622      	mov	r2, r4
 800e65a:	4629      	mov	r1, r5
 800e65c:	4638      	mov	r0, r7
 800e65e:	f7ff ff6b 	bl	800e538 <__ssputs_r>
 800e662:	3001      	adds	r0, #1
 800e664:	f000 80a7 	beq.w	800e7b6 <_svfiprintf_r+0x1c6>
 800e668:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e66a:	445a      	add	r2, fp
 800e66c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e66e:	f89a 3000 	ldrb.w	r3, [sl]
 800e672:	2b00      	cmp	r3, #0
 800e674:	f000 809f 	beq.w	800e7b6 <_svfiprintf_r+0x1c6>
 800e678:	2300      	movs	r3, #0
 800e67a:	f04f 32ff 	mov.w	r2, #4294967295
 800e67e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e682:	f10a 0a01 	add.w	sl, sl, #1
 800e686:	9304      	str	r3, [sp, #16]
 800e688:	9307      	str	r3, [sp, #28]
 800e68a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e68e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e690:	4654      	mov	r4, sl
 800e692:	2205      	movs	r2, #5
 800e694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e698:	484e      	ldr	r0, [pc, #312]	@ (800e7d4 <_svfiprintf_r+0x1e4>)
 800e69a:	f7f1 fdd1 	bl	8000240 <memchr>
 800e69e:	9a04      	ldr	r2, [sp, #16]
 800e6a0:	b9d8      	cbnz	r0, 800e6da <_svfiprintf_r+0xea>
 800e6a2:	06d0      	lsls	r0, r2, #27
 800e6a4:	bf44      	itt	mi
 800e6a6:	2320      	movmi	r3, #32
 800e6a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6ac:	0711      	lsls	r1, r2, #28
 800e6ae:	bf44      	itt	mi
 800e6b0:	232b      	movmi	r3, #43	@ 0x2b
 800e6b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6b6:	f89a 3000 	ldrb.w	r3, [sl]
 800e6ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6bc:	d015      	beq.n	800e6ea <_svfiprintf_r+0xfa>
 800e6be:	9a07      	ldr	r2, [sp, #28]
 800e6c0:	4654      	mov	r4, sl
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	f04f 0c0a 	mov.w	ip, #10
 800e6c8:	4621      	mov	r1, r4
 800e6ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6ce:	3b30      	subs	r3, #48	@ 0x30
 800e6d0:	2b09      	cmp	r3, #9
 800e6d2:	d94b      	bls.n	800e76c <_svfiprintf_r+0x17c>
 800e6d4:	b1b0      	cbz	r0, 800e704 <_svfiprintf_r+0x114>
 800e6d6:	9207      	str	r2, [sp, #28]
 800e6d8:	e014      	b.n	800e704 <_svfiprintf_r+0x114>
 800e6da:	eba0 0308 	sub.w	r3, r0, r8
 800e6de:	fa09 f303 	lsl.w	r3, r9, r3
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	9304      	str	r3, [sp, #16]
 800e6e6:	46a2      	mov	sl, r4
 800e6e8:	e7d2      	b.n	800e690 <_svfiprintf_r+0xa0>
 800e6ea:	9b03      	ldr	r3, [sp, #12]
 800e6ec:	1d19      	adds	r1, r3, #4
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	9103      	str	r1, [sp, #12]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	bfbb      	ittet	lt
 800e6f6:	425b      	neglt	r3, r3
 800e6f8:	f042 0202 	orrlt.w	r2, r2, #2
 800e6fc:	9307      	strge	r3, [sp, #28]
 800e6fe:	9307      	strlt	r3, [sp, #28]
 800e700:	bfb8      	it	lt
 800e702:	9204      	strlt	r2, [sp, #16]
 800e704:	7823      	ldrb	r3, [r4, #0]
 800e706:	2b2e      	cmp	r3, #46	@ 0x2e
 800e708:	d10a      	bne.n	800e720 <_svfiprintf_r+0x130>
 800e70a:	7863      	ldrb	r3, [r4, #1]
 800e70c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e70e:	d132      	bne.n	800e776 <_svfiprintf_r+0x186>
 800e710:	9b03      	ldr	r3, [sp, #12]
 800e712:	1d1a      	adds	r2, r3, #4
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	9203      	str	r2, [sp, #12]
 800e718:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e71c:	3402      	adds	r4, #2
 800e71e:	9305      	str	r3, [sp, #20]
 800e720:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e7e4 <_svfiprintf_r+0x1f4>
 800e724:	7821      	ldrb	r1, [r4, #0]
 800e726:	2203      	movs	r2, #3
 800e728:	4650      	mov	r0, sl
 800e72a:	f7f1 fd89 	bl	8000240 <memchr>
 800e72e:	b138      	cbz	r0, 800e740 <_svfiprintf_r+0x150>
 800e730:	9b04      	ldr	r3, [sp, #16]
 800e732:	eba0 000a 	sub.w	r0, r0, sl
 800e736:	2240      	movs	r2, #64	@ 0x40
 800e738:	4082      	lsls	r2, r0
 800e73a:	4313      	orrs	r3, r2
 800e73c:	3401      	adds	r4, #1
 800e73e:	9304      	str	r3, [sp, #16]
 800e740:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e744:	4824      	ldr	r0, [pc, #144]	@ (800e7d8 <_svfiprintf_r+0x1e8>)
 800e746:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e74a:	2206      	movs	r2, #6
 800e74c:	f7f1 fd78 	bl	8000240 <memchr>
 800e750:	2800      	cmp	r0, #0
 800e752:	d036      	beq.n	800e7c2 <_svfiprintf_r+0x1d2>
 800e754:	4b21      	ldr	r3, [pc, #132]	@ (800e7dc <_svfiprintf_r+0x1ec>)
 800e756:	bb1b      	cbnz	r3, 800e7a0 <_svfiprintf_r+0x1b0>
 800e758:	9b03      	ldr	r3, [sp, #12]
 800e75a:	3307      	adds	r3, #7
 800e75c:	f023 0307 	bic.w	r3, r3, #7
 800e760:	3308      	adds	r3, #8
 800e762:	9303      	str	r3, [sp, #12]
 800e764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e766:	4433      	add	r3, r6
 800e768:	9309      	str	r3, [sp, #36]	@ 0x24
 800e76a:	e76a      	b.n	800e642 <_svfiprintf_r+0x52>
 800e76c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e770:	460c      	mov	r4, r1
 800e772:	2001      	movs	r0, #1
 800e774:	e7a8      	b.n	800e6c8 <_svfiprintf_r+0xd8>
 800e776:	2300      	movs	r3, #0
 800e778:	3401      	adds	r4, #1
 800e77a:	9305      	str	r3, [sp, #20]
 800e77c:	4619      	mov	r1, r3
 800e77e:	f04f 0c0a 	mov.w	ip, #10
 800e782:	4620      	mov	r0, r4
 800e784:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e788:	3a30      	subs	r2, #48	@ 0x30
 800e78a:	2a09      	cmp	r2, #9
 800e78c:	d903      	bls.n	800e796 <_svfiprintf_r+0x1a6>
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d0c6      	beq.n	800e720 <_svfiprintf_r+0x130>
 800e792:	9105      	str	r1, [sp, #20]
 800e794:	e7c4      	b.n	800e720 <_svfiprintf_r+0x130>
 800e796:	fb0c 2101 	mla	r1, ip, r1, r2
 800e79a:	4604      	mov	r4, r0
 800e79c:	2301      	movs	r3, #1
 800e79e:	e7f0      	b.n	800e782 <_svfiprintf_r+0x192>
 800e7a0:	ab03      	add	r3, sp, #12
 800e7a2:	9300      	str	r3, [sp, #0]
 800e7a4:	462a      	mov	r2, r5
 800e7a6:	4b0e      	ldr	r3, [pc, #56]	@ (800e7e0 <_svfiprintf_r+0x1f0>)
 800e7a8:	a904      	add	r1, sp, #16
 800e7aa:	4638      	mov	r0, r7
 800e7ac:	f7fc fd90 	bl	800b2d0 <_printf_float>
 800e7b0:	1c42      	adds	r2, r0, #1
 800e7b2:	4606      	mov	r6, r0
 800e7b4:	d1d6      	bne.n	800e764 <_svfiprintf_r+0x174>
 800e7b6:	89ab      	ldrh	r3, [r5, #12]
 800e7b8:	065b      	lsls	r3, r3, #25
 800e7ba:	f53f af2d 	bmi.w	800e618 <_svfiprintf_r+0x28>
 800e7be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e7c0:	e72c      	b.n	800e61c <_svfiprintf_r+0x2c>
 800e7c2:	ab03      	add	r3, sp, #12
 800e7c4:	9300      	str	r3, [sp, #0]
 800e7c6:	462a      	mov	r2, r5
 800e7c8:	4b05      	ldr	r3, [pc, #20]	@ (800e7e0 <_svfiprintf_r+0x1f0>)
 800e7ca:	a904      	add	r1, sp, #16
 800e7cc:	4638      	mov	r0, r7
 800e7ce:	f7fd f807 	bl	800b7e0 <_printf_i>
 800e7d2:	e7ed      	b.n	800e7b0 <_svfiprintf_r+0x1c0>
 800e7d4:	0800ff81 	.word	0x0800ff81
 800e7d8:	0800ff8b 	.word	0x0800ff8b
 800e7dc:	0800b2d1 	.word	0x0800b2d1
 800e7e0:	0800e539 	.word	0x0800e539
 800e7e4:	0800ff87 	.word	0x0800ff87

0800e7e8 <__sflush_r>:
 800e7e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f0:	0716      	lsls	r6, r2, #28
 800e7f2:	4605      	mov	r5, r0
 800e7f4:	460c      	mov	r4, r1
 800e7f6:	d454      	bmi.n	800e8a2 <__sflush_r+0xba>
 800e7f8:	684b      	ldr	r3, [r1, #4]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	dc02      	bgt.n	800e804 <__sflush_r+0x1c>
 800e7fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e800:	2b00      	cmp	r3, #0
 800e802:	dd48      	ble.n	800e896 <__sflush_r+0xae>
 800e804:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e806:	2e00      	cmp	r6, #0
 800e808:	d045      	beq.n	800e896 <__sflush_r+0xae>
 800e80a:	2300      	movs	r3, #0
 800e80c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e810:	682f      	ldr	r7, [r5, #0]
 800e812:	6a21      	ldr	r1, [r4, #32]
 800e814:	602b      	str	r3, [r5, #0]
 800e816:	d030      	beq.n	800e87a <__sflush_r+0x92>
 800e818:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e81a:	89a3      	ldrh	r3, [r4, #12]
 800e81c:	0759      	lsls	r1, r3, #29
 800e81e:	d505      	bpl.n	800e82c <__sflush_r+0x44>
 800e820:	6863      	ldr	r3, [r4, #4]
 800e822:	1ad2      	subs	r2, r2, r3
 800e824:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e826:	b10b      	cbz	r3, 800e82c <__sflush_r+0x44>
 800e828:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e82a:	1ad2      	subs	r2, r2, r3
 800e82c:	2300      	movs	r3, #0
 800e82e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e830:	6a21      	ldr	r1, [r4, #32]
 800e832:	4628      	mov	r0, r5
 800e834:	47b0      	blx	r6
 800e836:	1c43      	adds	r3, r0, #1
 800e838:	89a3      	ldrh	r3, [r4, #12]
 800e83a:	d106      	bne.n	800e84a <__sflush_r+0x62>
 800e83c:	6829      	ldr	r1, [r5, #0]
 800e83e:	291d      	cmp	r1, #29
 800e840:	d82b      	bhi.n	800e89a <__sflush_r+0xb2>
 800e842:	4a2a      	ldr	r2, [pc, #168]	@ (800e8ec <__sflush_r+0x104>)
 800e844:	410a      	asrs	r2, r1
 800e846:	07d6      	lsls	r6, r2, #31
 800e848:	d427      	bmi.n	800e89a <__sflush_r+0xb2>
 800e84a:	2200      	movs	r2, #0
 800e84c:	6062      	str	r2, [r4, #4]
 800e84e:	04d9      	lsls	r1, r3, #19
 800e850:	6922      	ldr	r2, [r4, #16]
 800e852:	6022      	str	r2, [r4, #0]
 800e854:	d504      	bpl.n	800e860 <__sflush_r+0x78>
 800e856:	1c42      	adds	r2, r0, #1
 800e858:	d101      	bne.n	800e85e <__sflush_r+0x76>
 800e85a:	682b      	ldr	r3, [r5, #0]
 800e85c:	b903      	cbnz	r3, 800e860 <__sflush_r+0x78>
 800e85e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e860:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e862:	602f      	str	r7, [r5, #0]
 800e864:	b1b9      	cbz	r1, 800e896 <__sflush_r+0xae>
 800e866:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e86a:	4299      	cmp	r1, r3
 800e86c:	d002      	beq.n	800e874 <__sflush_r+0x8c>
 800e86e:	4628      	mov	r0, r5
 800e870:	f7fe fa80 	bl	800cd74 <_free_r>
 800e874:	2300      	movs	r3, #0
 800e876:	6363      	str	r3, [r4, #52]	@ 0x34
 800e878:	e00d      	b.n	800e896 <__sflush_r+0xae>
 800e87a:	2301      	movs	r3, #1
 800e87c:	4628      	mov	r0, r5
 800e87e:	47b0      	blx	r6
 800e880:	4602      	mov	r2, r0
 800e882:	1c50      	adds	r0, r2, #1
 800e884:	d1c9      	bne.n	800e81a <__sflush_r+0x32>
 800e886:	682b      	ldr	r3, [r5, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d0c6      	beq.n	800e81a <__sflush_r+0x32>
 800e88c:	2b1d      	cmp	r3, #29
 800e88e:	d001      	beq.n	800e894 <__sflush_r+0xac>
 800e890:	2b16      	cmp	r3, #22
 800e892:	d11e      	bne.n	800e8d2 <__sflush_r+0xea>
 800e894:	602f      	str	r7, [r5, #0]
 800e896:	2000      	movs	r0, #0
 800e898:	e022      	b.n	800e8e0 <__sflush_r+0xf8>
 800e89a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e89e:	b21b      	sxth	r3, r3
 800e8a0:	e01b      	b.n	800e8da <__sflush_r+0xf2>
 800e8a2:	690f      	ldr	r7, [r1, #16]
 800e8a4:	2f00      	cmp	r7, #0
 800e8a6:	d0f6      	beq.n	800e896 <__sflush_r+0xae>
 800e8a8:	0793      	lsls	r3, r2, #30
 800e8aa:	680e      	ldr	r6, [r1, #0]
 800e8ac:	bf08      	it	eq
 800e8ae:	694b      	ldreq	r3, [r1, #20]
 800e8b0:	600f      	str	r7, [r1, #0]
 800e8b2:	bf18      	it	ne
 800e8b4:	2300      	movne	r3, #0
 800e8b6:	eba6 0807 	sub.w	r8, r6, r7
 800e8ba:	608b      	str	r3, [r1, #8]
 800e8bc:	f1b8 0f00 	cmp.w	r8, #0
 800e8c0:	dde9      	ble.n	800e896 <__sflush_r+0xae>
 800e8c2:	6a21      	ldr	r1, [r4, #32]
 800e8c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e8c6:	4643      	mov	r3, r8
 800e8c8:	463a      	mov	r2, r7
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	47b0      	blx	r6
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	dc08      	bgt.n	800e8e4 <__sflush_r+0xfc>
 800e8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8da:	81a3      	strh	r3, [r4, #12]
 800e8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e4:	4407      	add	r7, r0
 800e8e6:	eba8 0800 	sub.w	r8, r8, r0
 800e8ea:	e7e7      	b.n	800e8bc <__sflush_r+0xd4>
 800e8ec:	dfbffffe 	.word	0xdfbffffe

0800e8f0 <_fflush_r>:
 800e8f0:	b538      	push	{r3, r4, r5, lr}
 800e8f2:	690b      	ldr	r3, [r1, #16]
 800e8f4:	4605      	mov	r5, r0
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	b913      	cbnz	r3, 800e900 <_fflush_r+0x10>
 800e8fa:	2500      	movs	r5, #0
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	bd38      	pop	{r3, r4, r5, pc}
 800e900:	b118      	cbz	r0, 800e90a <_fflush_r+0x1a>
 800e902:	6a03      	ldr	r3, [r0, #32]
 800e904:	b90b      	cbnz	r3, 800e90a <_fflush_r+0x1a>
 800e906:	f7fd fb23 	bl	800bf50 <__sinit>
 800e90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d0f3      	beq.n	800e8fa <_fflush_r+0xa>
 800e912:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e914:	07d0      	lsls	r0, r2, #31
 800e916:	d404      	bmi.n	800e922 <_fflush_r+0x32>
 800e918:	0599      	lsls	r1, r3, #22
 800e91a:	d402      	bmi.n	800e922 <_fflush_r+0x32>
 800e91c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e91e:	f7fd fc40 	bl	800c1a2 <__retarget_lock_acquire_recursive>
 800e922:	4628      	mov	r0, r5
 800e924:	4621      	mov	r1, r4
 800e926:	f7ff ff5f 	bl	800e7e8 <__sflush_r>
 800e92a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e92c:	07da      	lsls	r2, r3, #31
 800e92e:	4605      	mov	r5, r0
 800e930:	d4e4      	bmi.n	800e8fc <_fflush_r+0xc>
 800e932:	89a3      	ldrh	r3, [r4, #12]
 800e934:	059b      	lsls	r3, r3, #22
 800e936:	d4e1      	bmi.n	800e8fc <_fflush_r+0xc>
 800e938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e93a:	f7fd fc33 	bl	800c1a4 <__retarget_lock_release_recursive>
 800e93e:	e7dd      	b.n	800e8fc <_fflush_r+0xc>

0800e940 <memmove>:
 800e940:	4288      	cmp	r0, r1
 800e942:	b510      	push	{r4, lr}
 800e944:	eb01 0402 	add.w	r4, r1, r2
 800e948:	d902      	bls.n	800e950 <memmove+0x10>
 800e94a:	4284      	cmp	r4, r0
 800e94c:	4623      	mov	r3, r4
 800e94e:	d807      	bhi.n	800e960 <memmove+0x20>
 800e950:	1e43      	subs	r3, r0, #1
 800e952:	42a1      	cmp	r1, r4
 800e954:	d008      	beq.n	800e968 <memmove+0x28>
 800e956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e95a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e95e:	e7f8      	b.n	800e952 <memmove+0x12>
 800e960:	4402      	add	r2, r0
 800e962:	4601      	mov	r1, r0
 800e964:	428a      	cmp	r2, r1
 800e966:	d100      	bne.n	800e96a <memmove+0x2a>
 800e968:	bd10      	pop	{r4, pc}
 800e96a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e96e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e972:	e7f7      	b.n	800e964 <memmove+0x24>

0800e974 <strncmp>:
 800e974:	b510      	push	{r4, lr}
 800e976:	b16a      	cbz	r2, 800e994 <strncmp+0x20>
 800e978:	3901      	subs	r1, #1
 800e97a:	1884      	adds	r4, r0, r2
 800e97c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e980:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e984:	429a      	cmp	r2, r3
 800e986:	d103      	bne.n	800e990 <strncmp+0x1c>
 800e988:	42a0      	cmp	r0, r4
 800e98a:	d001      	beq.n	800e990 <strncmp+0x1c>
 800e98c:	2a00      	cmp	r2, #0
 800e98e:	d1f5      	bne.n	800e97c <strncmp+0x8>
 800e990:	1ad0      	subs	r0, r2, r3
 800e992:	bd10      	pop	{r4, pc}
 800e994:	4610      	mov	r0, r2
 800e996:	e7fc      	b.n	800e992 <strncmp+0x1e>

0800e998 <_sbrk_r>:
 800e998:	b538      	push	{r3, r4, r5, lr}
 800e99a:	4d06      	ldr	r5, [pc, #24]	@ (800e9b4 <_sbrk_r+0x1c>)
 800e99c:	2300      	movs	r3, #0
 800e99e:	4604      	mov	r4, r0
 800e9a0:	4608      	mov	r0, r1
 800e9a2:	602b      	str	r3, [r5, #0]
 800e9a4:	f7f3 fc04 	bl	80021b0 <_sbrk>
 800e9a8:	1c43      	adds	r3, r0, #1
 800e9aa:	d102      	bne.n	800e9b2 <_sbrk_r+0x1a>
 800e9ac:	682b      	ldr	r3, [r5, #0]
 800e9ae:	b103      	cbz	r3, 800e9b2 <_sbrk_r+0x1a>
 800e9b0:	6023      	str	r3, [r4, #0]
 800e9b2:	bd38      	pop	{r3, r4, r5, pc}
 800e9b4:	20002e80 	.word	0x20002e80

0800e9b8 <memcpy>:
 800e9b8:	440a      	add	r2, r1
 800e9ba:	4291      	cmp	r1, r2
 800e9bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9c0:	d100      	bne.n	800e9c4 <memcpy+0xc>
 800e9c2:	4770      	bx	lr
 800e9c4:	b510      	push	{r4, lr}
 800e9c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9ce:	4291      	cmp	r1, r2
 800e9d0:	d1f9      	bne.n	800e9c6 <memcpy+0xe>
 800e9d2:	bd10      	pop	{r4, pc}
 800e9d4:	0000      	movs	r0, r0
	...

0800e9d8 <nan>:
 800e9d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e9e0 <nan+0x8>
 800e9dc:	4770      	bx	lr
 800e9de:	bf00      	nop
 800e9e0:	00000000 	.word	0x00000000
 800e9e4:	7ff80000 	.word	0x7ff80000

0800e9e8 <__assert_func>:
 800e9e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9ea:	4614      	mov	r4, r2
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	4b09      	ldr	r3, [pc, #36]	@ (800ea14 <__assert_func+0x2c>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	4605      	mov	r5, r0
 800e9f4:	68d8      	ldr	r0, [r3, #12]
 800e9f6:	b954      	cbnz	r4, 800ea0e <__assert_func+0x26>
 800e9f8:	4b07      	ldr	r3, [pc, #28]	@ (800ea18 <__assert_func+0x30>)
 800e9fa:	461c      	mov	r4, r3
 800e9fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea00:	9100      	str	r1, [sp, #0]
 800ea02:	462b      	mov	r3, r5
 800ea04:	4905      	ldr	r1, [pc, #20]	@ (800ea1c <__assert_func+0x34>)
 800ea06:	f000 fba7 	bl	800f158 <fiprintf>
 800ea0a:	f000 fbb7 	bl	800f17c <abort>
 800ea0e:	4b04      	ldr	r3, [pc, #16]	@ (800ea20 <__assert_func+0x38>)
 800ea10:	e7f4      	b.n	800e9fc <__assert_func+0x14>
 800ea12:	bf00      	nop
 800ea14:	20000030 	.word	0x20000030
 800ea18:	0800ffd5 	.word	0x0800ffd5
 800ea1c:	0800ffa7 	.word	0x0800ffa7
 800ea20:	0800ff9a 	.word	0x0800ff9a

0800ea24 <_calloc_r>:
 800ea24:	b570      	push	{r4, r5, r6, lr}
 800ea26:	fba1 5402 	umull	r5, r4, r1, r2
 800ea2a:	b93c      	cbnz	r4, 800ea3c <_calloc_r+0x18>
 800ea2c:	4629      	mov	r1, r5
 800ea2e:	f7fe fa15 	bl	800ce5c <_malloc_r>
 800ea32:	4606      	mov	r6, r0
 800ea34:	b928      	cbnz	r0, 800ea42 <_calloc_r+0x1e>
 800ea36:	2600      	movs	r6, #0
 800ea38:	4630      	mov	r0, r6
 800ea3a:	bd70      	pop	{r4, r5, r6, pc}
 800ea3c:	220c      	movs	r2, #12
 800ea3e:	6002      	str	r2, [r0, #0]
 800ea40:	e7f9      	b.n	800ea36 <_calloc_r+0x12>
 800ea42:	462a      	mov	r2, r5
 800ea44:	4621      	mov	r1, r4
 800ea46:	f7fd fb1c 	bl	800c082 <memset>
 800ea4a:	e7f5      	b.n	800ea38 <_calloc_r+0x14>

0800ea4c <rshift>:
 800ea4c:	6903      	ldr	r3, [r0, #16]
 800ea4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ea52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ea5a:	f100 0414 	add.w	r4, r0, #20
 800ea5e:	dd45      	ble.n	800eaec <rshift+0xa0>
 800ea60:	f011 011f 	ands.w	r1, r1, #31
 800ea64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ea68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ea6c:	d10c      	bne.n	800ea88 <rshift+0x3c>
 800ea6e:	f100 0710 	add.w	r7, r0, #16
 800ea72:	4629      	mov	r1, r5
 800ea74:	42b1      	cmp	r1, r6
 800ea76:	d334      	bcc.n	800eae2 <rshift+0x96>
 800ea78:	1a9b      	subs	r3, r3, r2
 800ea7a:	009b      	lsls	r3, r3, #2
 800ea7c:	1eea      	subs	r2, r5, #3
 800ea7e:	4296      	cmp	r6, r2
 800ea80:	bf38      	it	cc
 800ea82:	2300      	movcc	r3, #0
 800ea84:	4423      	add	r3, r4
 800ea86:	e015      	b.n	800eab4 <rshift+0x68>
 800ea88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ea8c:	f1c1 0820 	rsb	r8, r1, #32
 800ea90:	40cf      	lsrs	r7, r1
 800ea92:	f105 0e04 	add.w	lr, r5, #4
 800ea96:	46a1      	mov	r9, r4
 800ea98:	4576      	cmp	r6, lr
 800ea9a:	46f4      	mov	ip, lr
 800ea9c:	d815      	bhi.n	800eaca <rshift+0x7e>
 800ea9e:	1a9a      	subs	r2, r3, r2
 800eaa0:	0092      	lsls	r2, r2, #2
 800eaa2:	3a04      	subs	r2, #4
 800eaa4:	3501      	adds	r5, #1
 800eaa6:	42ae      	cmp	r6, r5
 800eaa8:	bf38      	it	cc
 800eaaa:	2200      	movcc	r2, #0
 800eaac:	18a3      	adds	r3, r4, r2
 800eaae:	50a7      	str	r7, [r4, r2]
 800eab0:	b107      	cbz	r7, 800eab4 <rshift+0x68>
 800eab2:	3304      	adds	r3, #4
 800eab4:	1b1a      	subs	r2, r3, r4
 800eab6:	42a3      	cmp	r3, r4
 800eab8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eabc:	bf08      	it	eq
 800eabe:	2300      	moveq	r3, #0
 800eac0:	6102      	str	r2, [r0, #16]
 800eac2:	bf08      	it	eq
 800eac4:	6143      	streq	r3, [r0, #20]
 800eac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaca:	f8dc c000 	ldr.w	ip, [ip]
 800eace:	fa0c fc08 	lsl.w	ip, ip, r8
 800ead2:	ea4c 0707 	orr.w	r7, ip, r7
 800ead6:	f849 7b04 	str.w	r7, [r9], #4
 800eada:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eade:	40cf      	lsrs	r7, r1
 800eae0:	e7da      	b.n	800ea98 <rshift+0x4c>
 800eae2:	f851 cb04 	ldr.w	ip, [r1], #4
 800eae6:	f847 cf04 	str.w	ip, [r7, #4]!
 800eaea:	e7c3      	b.n	800ea74 <rshift+0x28>
 800eaec:	4623      	mov	r3, r4
 800eaee:	e7e1      	b.n	800eab4 <rshift+0x68>

0800eaf0 <__hexdig_fun>:
 800eaf0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800eaf4:	2b09      	cmp	r3, #9
 800eaf6:	d802      	bhi.n	800eafe <__hexdig_fun+0xe>
 800eaf8:	3820      	subs	r0, #32
 800eafa:	b2c0      	uxtb	r0, r0
 800eafc:	4770      	bx	lr
 800eafe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800eb02:	2b05      	cmp	r3, #5
 800eb04:	d801      	bhi.n	800eb0a <__hexdig_fun+0x1a>
 800eb06:	3847      	subs	r0, #71	@ 0x47
 800eb08:	e7f7      	b.n	800eafa <__hexdig_fun+0xa>
 800eb0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800eb0e:	2b05      	cmp	r3, #5
 800eb10:	d801      	bhi.n	800eb16 <__hexdig_fun+0x26>
 800eb12:	3827      	subs	r0, #39	@ 0x27
 800eb14:	e7f1      	b.n	800eafa <__hexdig_fun+0xa>
 800eb16:	2000      	movs	r0, #0
 800eb18:	4770      	bx	lr
	...

0800eb1c <__gethex>:
 800eb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb20:	b085      	sub	sp, #20
 800eb22:	468a      	mov	sl, r1
 800eb24:	9302      	str	r3, [sp, #8]
 800eb26:	680b      	ldr	r3, [r1, #0]
 800eb28:	9001      	str	r0, [sp, #4]
 800eb2a:	4690      	mov	r8, r2
 800eb2c:	1c9c      	adds	r4, r3, #2
 800eb2e:	46a1      	mov	r9, r4
 800eb30:	f814 0b01 	ldrb.w	r0, [r4], #1
 800eb34:	2830      	cmp	r0, #48	@ 0x30
 800eb36:	d0fa      	beq.n	800eb2e <__gethex+0x12>
 800eb38:	eba9 0303 	sub.w	r3, r9, r3
 800eb3c:	f1a3 0b02 	sub.w	fp, r3, #2
 800eb40:	f7ff ffd6 	bl	800eaf0 <__hexdig_fun>
 800eb44:	4605      	mov	r5, r0
 800eb46:	2800      	cmp	r0, #0
 800eb48:	d168      	bne.n	800ec1c <__gethex+0x100>
 800eb4a:	49a0      	ldr	r1, [pc, #640]	@ (800edcc <__gethex+0x2b0>)
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	4648      	mov	r0, r9
 800eb50:	f7ff ff10 	bl	800e974 <strncmp>
 800eb54:	4607      	mov	r7, r0
 800eb56:	2800      	cmp	r0, #0
 800eb58:	d167      	bne.n	800ec2a <__gethex+0x10e>
 800eb5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800eb5e:	4626      	mov	r6, r4
 800eb60:	f7ff ffc6 	bl	800eaf0 <__hexdig_fun>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d062      	beq.n	800ec2e <__gethex+0x112>
 800eb68:	4623      	mov	r3, r4
 800eb6a:	7818      	ldrb	r0, [r3, #0]
 800eb6c:	2830      	cmp	r0, #48	@ 0x30
 800eb6e:	4699      	mov	r9, r3
 800eb70:	f103 0301 	add.w	r3, r3, #1
 800eb74:	d0f9      	beq.n	800eb6a <__gethex+0x4e>
 800eb76:	f7ff ffbb 	bl	800eaf0 <__hexdig_fun>
 800eb7a:	fab0 f580 	clz	r5, r0
 800eb7e:	096d      	lsrs	r5, r5, #5
 800eb80:	f04f 0b01 	mov.w	fp, #1
 800eb84:	464a      	mov	r2, r9
 800eb86:	4616      	mov	r6, r2
 800eb88:	3201      	adds	r2, #1
 800eb8a:	7830      	ldrb	r0, [r6, #0]
 800eb8c:	f7ff ffb0 	bl	800eaf0 <__hexdig_fun>
 800eb90:	2800      	cmp	r0, #0
 800eb92:	d1f8      	bne.n	800eb86 <__gethex+0x6a>
 800eb94:	498d      	ldr	r1, [pc, #564]	@ (800edcc <__gethex+0x2b0>)
 800eb96:	2201      	movs	r2, #1
 800eb98:	4630      	mov	r0, r6
 800eb9a:	f7ff feeb 	bl	800e974 <strncmp>
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	d13f      	bne.n	800ec22 <__gethex+0x106>
 800eba2:	b944      	cbnz	r4, 800ebb6 <__gethex+0x9a>
 800eba4:	1c74      	adds	r4, r6, #1
 800eba6:	4622      	mov	r2, r4
 800eba8:	4616      	mov	r6, r2
 800ebaa:	3201      	adds	r2, #1
 800ebac:	7830      	ldrb	r0, [r6, #0]
 800ebae:	f7ff ff9f 	bl	800eaf0 <__hexdig_fun>
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	d1f8      	bne.n	800eba8 <__gethex+0x8c>
 800ebb6:	1ba4      	subs	r4, r4, r6
 800ebb8:	00a7      	lsls	r7, r4, #2
 800ebba:	7833      	ldrb	r3, [r6, #0]
 800ebbc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ebc0:	2b50      	cmp	r3, #80	@ 0x50
 800ebc2:	d13e      	bne.n	800ec42 <__gethex+0x126>
 800ebc4:	7873      	ldrb	r3, [r6, #1]
 800ebc6:	2b2b      	cmp	r3, #43	@ 0x2b
 800ebc8:	d033      	beq.n	800ec32 <__gethex+0x116>
 800ebca:	2b2d      	cmp	r3, #45	@ 0x2d
 800ebcc:	d034      	beq.n	800ec38 <__gethex+0x11c>
 800ebce:	1c71      	adds	r1, r6, #1
 800ebd0:	2400      	movs	r4, #0
 800ebd2:	7808      	ldrb	r0, [r1, #0]
 800ebd4:	f7ff ff8c 	bl	800eaf0 <__hexdig_fun>
 800ebd8:	1e43      	subs	r3, r0, #1
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	2b18      	cmp	r3, #24
 800ebde:	d830      	bhi.n	800ec42 <__gethex+0x126>
 800ebe0:	f1a0 0210 	sub.w	r2, r0, #16
 800ebe4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ebe8:	f7ff ff82 	bl	800eaf0 <__hexdig_fun>
 800ebec:	f100 3cff 	add.w	ip, r0, #4294967295
 800ebf0:	fa5f fc8c 	uxtb.w	ip, ip
 800ebf4:	f1bc 0f18 	cmp.w	ip, #24
 800ebf8:	f04f 030a 	mov.w	r3, #10
 800ebfc:	d91e      	bls.n	800ec3c <__gethex+0x120>
 800ebfe:	b104      	cbz	r4, 800ec02 <__gethex+0xe6>
 800ec00:	4252      	negs	r2, r2
 800ec02:	4417      	add	r7, r2
 800ec04:	f8ca 1000 	str.w	r1, [sl]
 800ec08:	b1ed      	cbz	r5, 800ec46 <__gethex+0x12a>
 800ec0a:	f1bb 0f00 	cmp.w	fp, #0
 800ec0e:	bf0c      	ite	eq
 800ec10:	2506      	moveq	r5, #6
 800ec12:	2500      	movne	r5, #0
 800ec14:	4628      	mov	r0, r5
 800ec16:	b005      	add	sp, #20
 800ec18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec1c:	2500      	movs	r5, #0
 800ec1e:	462c      	mov	r4, r5
 800ec20:	e7b0      	b.n	800eb84 <__gethex+0x68>
 800ec22:	2c00      	cmp	r4, #0
 800ec24:	d1c7      	bne.n	800ebb6 <__gethex+0x9a>
 800ec26:	4627      	mov	r7, r4
 800ec28:	e7c7      	b.n	800ebba <__gethex+0x9e>
 800ec2a:	464e      	mov	r6, r9
 800ec2c:	462f      	mov	r7, r5
 800ec2e:	2501      	movs	r5, #1
 800ec30:	e7c3      	b.n	800ebba <__gethex+0x9e>
 800ec32:	2400      	movs	r4, #0
 800ec34:	1cb1      	adds	r1, r6, #2
 800ec36:	e7cc      	b.n	800ebd2 <__gethex+0xb6>
 800ec38:	2401      	movs	r4, #1
 800ec3a:	e7fb      	b.n	800ec34 <__gethex+0x118>
 800ec3c:	fb03 0002 	mla	r0, r3, r2, r0
 800ec40:	e7ce      	b.n	800ebe0 <__gethex+0xc4>
 800ec42:	4631      	mov	r1, r6
 800ec44:	e7de      	b.n	800ec04 <__gethex+0xe8>
 800ec46:	eba6 0309 	sub.w	r3, r6, r9
 800ec4a:	3b01      	subs	r3, #1
 800ec4c:	4629      	mov	r1, r5
 800ec4e:	2b07      	cmp	r3, #7
 800ec50:	dc0a      	bgt.n	800ec68 <__gethex+0x14c>
 800ec52:	9801      	ldr	r0, [sp, #4]
 800ec54:	f7fe f98e 	bl	800cf74 <_Balloc>
 800ec58:	4604      	mov	r4, r0
 800ec5a:	b940      	cbnz	r0, 800ec6e <__gethex+0x152>
 800ec5c:	4b5c      	ldr	r3, [pc, #368]	@ (800edd0 <__gethex+0x2b4>)
 800ec5e:	4602      	mov	r2, r0
 800ec60:	21e4      	movs	r1, #228	@ 0xe4
 800ec62:	485c      	ldr	r0, [pc, #368]	@ (800edd4 <__gethex+0x2b8>)
 800ec64:	f7ff fec0 	bl	800e9e8 <__assert_func>
 800ec68:	3101      	adds	r1, #1
 800ec6a:	105b      	asrs	r3, r3, #1
 800ec6c:	e7ef      	b.n	800ec4e <__gethex+0x132>
 800ec6e:	f100 0a14 	add.w	sl, r0, #20
 800ec72:	2300      	movs	r3, #0
 800ec74:	4655      	mov	r5, sl
 800ec76:	469b      	mov	fp, r3
 800ec78:	45b1      	cmp	r9, r6
 800ec7a:	d337      	bcc.n	800ecec <__gethex+0x1d0>
 800ec7c:	f845 bb04 	str.w	fp, [r5], #4
 800ec80:	eba5 050a 	sub.w	r5, r5, sl
 800ec84:	10ad      	asrs	r5, r5, #2
 800ec86:	6125      	str	r5, [r4, #16]
 800ec88:	4658      	mov	r0, fp
 800ec8a:	f7fe fa65 	bl	800d158 <__hi0bits>
 800ec8e:	016d      	lsls	r5, r5, #5
 800ec90:	f8d8 6000 	ldr.w	r6, [r8]
 800ec94:	1a2d      	subs	r5, r5, r0
 800ec96:	42b5      	cmp	r5, r6
 800ec98:	dd54      	ble.n	800ed44 <__gethex+0x228>
 800ec9a:	1bad      	subs	r5, r5, r6
 800ec9c:	4629      	mov	r1, r5
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f7fe fdf6 	bl	800d890 <__any_on>
 800eca4:	4681      	mov	r9, r0
 800eca6:	b178      	cbz	r0, 800ecc8 <__gethex+0x1ac>
 800eca8:	1e6b      	subs	r3, r5, #1
 800ecaa:	1159      	asrs	r1, r3, #5
 800ecac:	f003 021f 	and.w	r2, r3, #31
 800ecb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ecb4:	f04f 0901 	mov.w	r9, #1
 800ecb8:	fa09 f202 	lsl.w	r2, r9, r2
 800ecbc:	420a      	tst	r2, r1
 800ecbe:	d003      	beq.n	800ecc8 <__gethex+0x1ac>
 800ecc0:	454b      	cmp	r3, r9
 800ecc2:	dc36      	bgt.n	800ed32 <__gethex+0x216>
 800ecc4:	f04f 0902 	mov.w	r9, #2
 800ecc8:	4629      	mov	r1, r5
 800ecca:	4620      	mov	r0, r4
 800eccc:	f7ff febe 	bl	800ea4c <rshift>
 800ecd0:	442f      	add	r7, r5
 800ecd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ecd6:	42bb      	cmp	r3, r7
 800ecd8:	da42      	bge.n	800ed60 <__gethex+0x244>
 800ecda:	9801      	ldr	r0, [sp, #4]
 800ecdc:	4621      	mov	r1, r4
 800ecde:	f7fe f989 	bl	800cff4 <_Bfree>
 800ece2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ece4:	2300      	movs	r3, #0
 800ece6:	6013      	str	r3, [r2, #0]
 800ece8:	25a3      	movs	r5, #163	@ 0xa3
 800ecea:	e793      	b.n	800ec14 <__gethex+0xf8>
 800ecec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ecf0:	2a2e      	cmp	r2, #46	@ 0x2e
 800ecf2:	d012      	beq.n	800ed1a <__gethex+0x1fe>
 800ecf4:	2b20      	cmp	r3, #32
 800ecf6:	d104      	bne.n	800ed02 <__gethex+0x1e6>
 800ecf8:	f845 bb04 	str.w	fp, [r5], #4
 800ecfc:	f04f 0b00 	mov.w	fp, #0
 800ed00:	465b      	mov	r3, fp
 800ed02:	7830      	ldrb	r0, [r6, #0]
 800ed04:	9303      	str	r3, [sp, #12]
 800ed06:	f7ff fef3 	bl	800eaf0 <__hexdig_fun>
 800ed0a:	9b03      	ldr	r3, [sp, #12]
 800ed0c:	f000 000f 	and.w	r0, r0, #15
 800ed10:	4098      	lsls	r0, r3
 800ed12:	ea4b 0b00 	orr.w	fp, fp, r0
 800ed16:	3304      	adds	r3, #4
 800ed18:	e7ae      	b.n	800ec78 <__gethex+0x15c>
 800ed1a:	45b1      	cmp	r9, r6
 800ed1c:	d8ea      	bhi.n	800ecf4 <__gethex+0x1d8>
 800ed1e:	492b      	ldr	r1, [pc, #172]	@ (800edcc <__gethex+0x2b0>)
 800ed20:	9303      	str	r3, [sp, #12]
 800ed22:	2201      	movs	r2, #1
 800ed24:	4630      	mov	r0, r6
 800ed26:	f7ff fe25 	bl	800e974 <strncmp>
 800ed2a:	9b03      	ldr	r3, [sp, #12]
 800ed2c:	2800      	cmp	r0, #0
 800ed2e:	d1e1      	bne.n	800ecf4 <__gethex+0x1d8>
 800ed30:	e7a2      	b.n	800ec78 <__gethex+0x15c>
 800ed32:	1ea9      	subs	r1, r5, #2
 800ed34:	4620      	mov	r0, r4
 800ed36:	f7fe fdab 	bl	800d890 <__any_on>
 800ed3a:	2800      	cmp	r0, #0
 800ed3c:	d0c2      	beq.n	800ecc4 <__gethex+0x1a8>
 800ed3e:	f04f 0903 	mov.w	r9, #3
 800ed42:	e7c1      	b.n	800ecc8 <__gethex+0x1ac>
 800ed44:	da09      	bge.n	800ed5a <__gethex+0x23e>
 800ed46:	1b75      	subs	r5, r6, r5
 800ed48:	4621      	mov	r1, r4
 800ed4a:	9801      	ldr	r0, [sp, #4]
 800ed4c:	462a      	mov	r2, r5
 800ed4e:	f7fe fb69 	bl	800d424 <__lshift>
 800ed52:	1b7f      	subs	r7, r7, r5
 800ed54:	4604      	mov	r4, r0
 800ed56:	f100 0a14 	add.w	sl, r0, #20
 800ed5a:	f04f 0900 	mov.w	r9, #0
 800ed5e:	e7b8      	b.n	800ecd2 <__gethex+0x1b6>
 800ed60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ed64:	42bd      	cmp	r5, r7
 800ed66:	dd6f      	ble.n	800ee48 <__gethex+0x32c>
 800ed68:	1bed      	subs	r5, r5, r7
 800ed6a:	42ae      	cmp	r6, r5
 800ed6c:	dc34      	bgt.n	800edd8 <__gethex+0x2bc>
 800ed6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed72:	2b02      	cmp	r3, #2
 800ed74:	d022      	beq.n	800edbc <__gethex+0x2a0>
 800ed76:	2b03      	cmp	r3, #3
 800ed78:	d024      	beq.n	800edc4 <__gethex+0x2a8>
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	d115      	bne.n	800edaa <__gethex+0x28e>
 800ed7e:	42ae      	cmp	r6, r5
 800ed80:	d113      	bne.n	800edaa <__gethex+0x28e>
 800ed82:	2e01      	cmp	r6, #1
 800ed84:	d10b      	bne.n	800ed9e <__gethex+0x282>
 800ed86:	9a02      	ldr	r2, [sp, #8]
 800ed88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ed8c:	6013      	str	r3, [r2, #0]
 800ed8e:	2301      	movs	r3, #1
 800ed90:	6123      	str	r3, [r4, #16]
 800ed92:	f8ca 3000 	str.w	r3, [sl]
 800ed96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed98:	2562      	movs	r5, #98	@ 0x62
 800ed9a:	601c      	str	r4, [r3, #0]
 800ed9c:	e73a      	b.n	800ec14 <__gethex+0xf8>
 800ed9e:	1e71      	subs	r1, r6, #1
 800eda0:	4620      	mov	r0, r4
 800eda2:	f7fe fd75 	bl	800d890 <__any_on>
 800eda6:	2800      	cmp	r0, #0
 800eda8:	d1ed      	bne.n	800ed86 <__gethex+0x26a>
 800edaa:	9801      	ldr	r0, [sp, #4]
 800edac:	4621      	mov	r1, r4
 800edae:	f7fe f921 	bl	800cff4 <_Bfree>
 800edb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edb4:	2300      	movs	r3, #0
 800edb6:	6013      	str	r3, [r2, #0]
 800edb8:	2550      	movs	r5, #80	@ 0x50
 800edba:	e72b      	b.n	800ec14 <__gethex+0xf8>
 800edbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1f3      	bne.n	800edaa <__gethex+0x28e>
 800edc2:	e7e0      	b.n	800ed86 <__gethex+0x26a>
 800edc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d1dd      	bne.n	800ed86 <__gethex+0x26a>
 800edca:	e7ee      	b.n	800edaa <__gethex+0x28e>
 800edcc:	0800fe28 	.word	0x0800fe28
 800edd0:	0800fcc1 	.word	0x0800fcc1
 800edd4:	0800ffd6 	.word	0x0800ffd6
 800edd8:	1e6f      	subs	r7, r5, #1
 800edda:	f1b9 0f00 	cmp.w	r9, #0
 800edde:	d130      	bne.n	800ee42 <__gethex+0x326>
 800ede0:	b127      	cbz	r7, 800edec <__gethex+0x2d0>
 800ede2:	4639      	mov	r1, r7
 800ede4:	4620      	mov	r0, r4
 800ede6:	f7fe fd53 	bl	800d890 <__any_on>
 800edea:	4681      	mov	r9, r0
 800edec:	117a      	asrs	r2, r7, #5
 800edee:	2301      	movs	r3, #1
 800edf0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800edf4:	f007 071f 	and.w	r7, r7, #31
 800edf8:	40bb      	lsls	r3, r7
 800edfa:	4213      	tst	r3, r2
 800edfc:	4629      	mov	r1, r5
 800edfe:	4620      	mov	r0, r4
 800ee00:	bf18      	it	ne
 800ee02:	f049 0902 	orrne.w	r9, r9, #2
 800ee06:	f7ff fe21 	bl	800ea4c <rshift>
 800ee0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ee0e:	1b76      	subs	r6, r6, r5
 800ee10:	2502      	movs	r5, #2
 800ee12:	f1b9 0f00 	cmp.w	r9, #0
 800ee16:	d047      	beq.n	800eea8 <__gethex+0x38c>
 800ee18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee1c:	2b02      	cmp	r3, #2
 800ee1e:	d015      	beq.n	800ee4c <__gethex+0x330>
 800ee20:	2b03      	cmp	r3, #3
 800ee22:	d017      	beq.n	800ee54 <__gethex+0x338>
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d109      	bne.n	800ee3c <__gethex+0x320>
 800ee28:	f019 0f02 	tst.w	r9, #2
 800ee2c:	d006      	beq.n	800ee3c <__gethex+0x320>
 800ee2e:	f8da 3000 	ldr.w	r3, [sl]
 800ee32:	ea49 0903 	orr.w	r9, r9, r3
 800ee36:	f019 0f01 	tst.w	r9, #1
 800ee3a:	d10e      	bne.n	800ee5a <__gethex+0x33e>
 800ee3c:	f045 0510 	orr.w	r5, r5, #16
 800ee40:	e032      	b.n	800eea8 <__gethex+0x38c>
 800ee42:	f04f 0901 	mov.w	r9, #1
 800ee46:	e7d1      	b.n	800edec <__gethex+0x2d0>
 800ee48:	2501      	movs	r5, #1
 800ee4a:	e7e2      	b.n	800ee12 <__gethex+0x2f6>
 800ee4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee4e:	f1c3 0301 	rsb	r3, r3, #1
 800ee52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d0f0      	beq.n	800ee3c <__gethex+0x320>
 800ee5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ee5e:	f104 0314 	add.w	r3, r4, #20
 800ee62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ee66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ee6a:	f04f 0c00 	mov.w	ip, #0
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee74:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ee78:	d01b      	beq.n	800eeb2 <__gethex+0x396>
 800ee7a:	3201      	adds	r2, #1
 800ee7c:	6002      	str	r2, [r0, #0]
 800ee7e:	2d02      	cmp	r5, #2
 800ee80:	f104 0314 	add.w	r3, r4, #20
 800ee84:	d13c      	bne.n	800ef00 <__gethex+0x3e4>
 800ee86:	f8d8 2000 	ldr.w	r2, [r8]
 800ee8a:	3a01      	subs	r2, #1
 800ee8c:	42b2      	cmp	r2, r6
 800ee8e:	d109      	bne.n	800eea4 <__gethex+0x388>
 800ee90:	1171      	asrs	r1, r6, #5
 800ee92:	2201      	movs	r2, #1
 800ee94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee98:	f006 061f 	and.w	r6, r6, #31
 800ee9c:	fa02 f606 	lsl.w	r6, r2, r6
 800eea0:	421e      	tst	r6, r3
 800eea2:	d13a      	bne.n	800ef1a <__gethex+0x3fe>
 800eea4:	f045 0520 	orr.w	r5, r5, #32
 800eea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eeaa:	601c      	str	r4, [r3, #0]
 800eeac:	9b02      	ldr	r3, [sp, #8]
 800eeae:	601f      	str	r7, [r3, #0]
 800eeb0:	e6b0      	b.n	800ec14 <__gethex+0xf8>
 800eeb2:	4299      	cmp	r1, r3
 800eeb4:	f843 cc04 	str.w	ip, [r3, #-4]
 800eeb8:	d8d9      	bhi.n	800ee6e <__gethex+0x352>
 800eeba:	68a3      	ldr	r3, [r4, #8]
 800eebc:	459b      	cmp	fp, r3
 800eebe:	db17      	blt.n	800eef0 <__gethex+0x3d4>
 800eec0:	6861      	ldr	r1, [r4, #4]
 800eec2:	9801      	ldr	r0, [sp, #4]
 800eec4:	3101      	adds	r1, #1
 800eec6:	f7fe f855 	bl	800cf74 <_Balloc>
 800eeca:	4681      	mov	r9, r0
 800eecc:	b918      	cbnz	r0, 800eed6 <__gethex+0x3ba>
 800eece:	4b1a      	ldr	r3, [pc, #104]	@ (800ef38 <__gethex+0x41c>)
 800eed0:	4602      	mov	r2, r0
 800eed2:	2184      	movs	r1, #132	@ 0x84
 800eed4:	e6c5      	b.n	800ec62 <__gethex+0x146>
 800eed6:	6922      	ldr	r2, [r4, #16]
 800eed8:	3202      	adds	r2, #2
 800eeda:	f104 010c 	add.w	r1, r4, #12
 800eede:	0092      	lsls	r2, r2, #2
 800eee0:	300c      	adds	r0, #12
 800eee2:	f7ff fd69 	bl	800e9b8 <memcpy>
 800eee6:	4621      	mov	r1, r4
 800eee8:	9801      	ldr	r0, [sp, #4]
 800eeea:	f7fe f883 	bl	800cff4 <_Bfree>
 800eeee:	464c      	mov	r4, r9
 800eef0:	6923      	ldr	r3, [r4, #16]
 800eef2:	1c5a      	adds	r2, r3, #1
 800eef4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eef8:	6122      	str	r2, [r4, #16]
 800eefa:	2201      	movs	r2, #1
 800eefc:	615a      	str	r2, [r3, #20]
 800eefe:	e7be      	b.n	800ee7e <__gethex+0x362>
 800ef00:	6922      	ldr	r2, [r4, #16]
 800ef02:	455a      	cmp	r2, fp
 800ef04:	dd0b      	ble.n	800ef1e <__gethex+0x402>
 800ef06:	2101      	movs	r1, #1
 800ef08:	4620      	mov	r0, r4
 800ef0a:	f7ff fd9f 	bl	800ea4c <rshift>
 800ef0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef12:	3701      	adds	r7, #1
 800ef14:	42bb      	cmp	r3, r7
 800ef16:	f6ff aee0 	blt.w	800ecda <__gethex+0x1be>
 800ef1a:	2501      	movs	r5, #1
 800ef1c:	e7c2      	b.n	800eea4 <__gethex+0x388>
 800ef1e:	f016 061f 	ands.w	r6, r6, #31
 800ef22:	d0fa      	beq.n	800ef1a <__gethex+0x3fe>
 800ef24:	4453      	add	r3, sl
 800ef26:	f1c6 0620 	rsb	r6, r6, #32
 800ef2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ef2e:	f7fe f913 	bl	800d158 <__hi0bits>
 800ef32:	42b0      	cmp	r0, r6
 800ef34:	dbe7      	blt.n	800ef06 <__gethex+0x3ea>
 800ef36:	e7f0      	b.n	800ef1a <__gethex+0x3fe>
 800ef38:	0800fcc1 	.word	0x0800fcc1

0800ef3c <L_shift>:
 800ef3c:	f1c2 0208 	rsb	r2, r2, #8
 800ef40:	0092      	lsls	r2, r2, #2
 800ef42:	b570      	push	{r4, r5, r6, lr}
 800ef44:	f1c2 0620 	rsb	r6, r2, #32
 800ef48:	6843      	ldr	r3, [r0, #4]
 800ef4a:	6804      	ldr	r4, [r0, #0]
 800ef4c:	fa03 f506 	lsl.w	r5, r3, r6
 800ef50:	432c      	orrs	r4, r5
 800ef52:	40d3      	lsrs	r3, r2
 800ef54:	6004      	str	r4, [r0, #0]
 800ef56:	f840 3f04 	str.w	r3, [r0, #4]!
 800ef5a:	4288      	cmp	r0, r1
 800ef5c:	d3f4      	bcc.n	800ef48 <L_shift+0xc>
 800ef5e:	bd70      	pop	{r4, r5, r6, pc}

0800ef60 <__match>:
 800ef60:	b530      	push	{r4, r5, lr}
 800ef62:	6803      	ldr	r3, [r0, #0]
 800ef64:	3301      	adds	r3, #1
 800ef66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef6a:	b914      	cbnz	r4, 800ef72 <__match+0x12>
 800ef6c:	6003      	str	r3, [r0, #0]
 800ef6e:	2001      	movs	r0, #1
 800ef70:	bd30      	pop	{r4, r5, pc}
 800ef72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ef7a:	2d19      	cmp	r5, #25
 800ef7c:	bf98      	it	ls
 800ef7e:	3220      	addls	r2, #32
 800ef80:	42a2      	cmp	r2, r4
 800ef82:	d0f0      	beq.n	800ef66 <__match+0x6>
 800ef84:	2000      	movs	r0, #0
 800ef86:	e7f3      	b.n	800ef70 <__match+0x10>

0800ef88 <__hexnan>:
 800ef88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef8c:	680b      	ldr	r3, [r1, #0]
 800ef8e:	6801      	ldr	r1, [r0, #0]
 800ef90:	115e      	asrs	r6, r3, #5
 800ef92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ef96:	f013 031f 	ands.w	r3, r3, #31
 800ef9a:	b087      	sub	sp, #28
 800ef9c:	bf18      	it	ne
 800ef9e:	3604      	addne	r6, #4
 800efa0:	2500      	movs	r5, #0
 800efa2:	1f37      	subs	r7, r6, #4
 800efa4:	4682      	mov	sl, r0
 800efa6:	4690      	mov	r8, r2
 800efa8:	9301      	str	r3, [sp, #4]
 800efaa:	f846 5c04 	str.w	r5, [r6, #-4]
 800efae:	46b9      	mov	r9, r7
 800efb0:	463c      	mov	r4, r7
 800efb2:	9502      	str	r5, [sp, #8]
 800efb4:	46ab      	mov	fp, r5
 800efb6:	784a      	ldrb	r2, [r1, #1]
 800efb8:	1c4b      	adds	r3, r1, #1
 800efba:	9303      	str	r3, [sp, #12]
 800efbc:	b342      	cbz	r2, 800f010 <__hexnan+0x88>
 800efbe:	4610      	mov	r0, r2
 800efc0:	9105      	str	r1, [sp, #20]
 800efc2:	9204      	str	r2, [sp, #16]
 800efc4:	f7ff fd94 	bl	800eaf0 <__hexdig_fun>
 800efc8:	2800      	cmp	r0, #0
 800efca:	d151      	bne.n	800f070 <__hexnan+0xe8>
 800efcc:	9a04      	ldr	r2, [sp, #16]
 800efce:	9905      	ldr	r1, [sp, #20]
 800efd0:	2a20      	cmp	r2, #32
 800efd2:	d818      	bhi.n	800f006 <__hexnan+0x7e>
 800efd4:	9b02      	ldr	r3, [sp, #8]
 800efd6:	459b      	cmp	fp, r3
 800efd8:	dd13      	ble.n	800f002 <__hexnan+0x7a>
 800efda:	454c      	cmp	r4, r9
 800efdc:	d206      	bcs.n	800efec <__hexnan+0x64>
 800efde:	2d07      	cmp	r5, #7
 800efe0:	dc04      	bgt.n	800efec <__hexnan+0x64>
 800efe2:	462a      	mov	r2, r5
 800efe4:	4649      	mov	r1, r9
 800efe6:	4620      	mov	r0, r4
 800efe8:	f7ff ffa8 	bl	800ef3c <L_shift>
 800efec:	4544      	cmp	r4, r8
 800efee:	d952      	bls.n	800f096 <__hexnan+0x10e>
 800eff0:	2300      	movs	r3, #0
 800eff2:	f1a4 0904 	sub.w	r9, r4, #4
 800eff6:	f844 3c04 	str.w	r3, [r4, #-4]
 800effa:	f8cd b008 	str.w	fp, [sp, #8]
 800effe:	464c      	mov	r4, r9
 800f000:	461d      	mov	r5, r3
 800f002:	9903      	ldr	r1, [sp, #12]
 800f004:	e7d7      	b.n	800efb6 <__hexnan+0x2e>
 800f006:	2a29      	cmp	r2, #41	@ 0x29
 800f008:	d157      	bne.n	800f0ba <__hexnan+0x132>
 800f00a:	3102      	adds	r1, #2
 800f00c:	f8ca 1000 	str.w	r1, [sl]
 800f010:	f1bb 0f00 	cmp.w	fp, #0
 800f014:	d051      	beq.n	800f0ba <__hexnan+0x132>
 800f016:	454c      	cmp	r4, r9
 800f018:	d206      	bcs.n	800f028 <__hexnan+0xa0>
 800f01a:	2d07      	cmp	r5, #7
 800f01c:	dc04      	bgt.n	800f028 <__hexnan+0xa0>
 800f01e:	462a      	mov	r2, r5
 800f020:	4649      	mov	r1, r9
 800f022:	4620      	mov	r0, r4
 800f024:	f7ff ff8a 	bl	800ef3c <L_shift>
 800f028:	4544      	cmp	r4, r8
 800f02a:	d936      	bls.n	800f09a <__hexnan+0x112>
 800f02c:	f1a8 0204 	sub.w	r2, r8, #4
 800f030:	4623      	mov	r3, r4
 800f032:	f853 1b04 	ldr.w	r1, [r3], #4
 800f036:	f842 1f04 	str.w	r1, [r2, #4]!
 800f03a:	429f      	cmp	r7, r3
 800f03c:	d2f9      	bcs.n	800f032 <__hexnan+0xaa>
 800f03e:	1b3b      	subs	r3, r7, r4
 800f040:	f023 0303 	bic.w	r3, r3, #3
 800f044:	3304      	adds	r3, #4
 800f046:	3401      	adds	r4, #1
 800f048:	3e03      	subs	r6, #3
 800f04a:	42b4      	cmp	r4, r6
 800f04c:	bf88      	it	hi
 800f04e:	2304      	movhi	r3, #4
 800f050:	4443      	add	r3, r8
 800f052:	2200      	movs	r2, #0
 800f054:	f843 2b04 	str.w	r2, [r3], #4
 800f058:	429f      	cmp	r7, r3
 800f05a:	d2fb      	bcs.n	800f054 <__hexnan+0xcc>
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	b91b      	cbnz	r3, 800f068 <__hexnan+0xe0>
 800f060:	4547      	cmp	r7, r8
 800f062:	d128      	bne.n	800f0b6 <__hexnan+0x12e>
 800f064:	2301      	movs	r3, #1
 800f066:	603b      	str	r3, [r7, #0]
 800f068:	2005      	movs	r0, #5
 800f06a:	b007      	add	sp, #28
 800f06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f070:	3501      	adds	r5, #1
 800f072:	2d08      	cmp	r5, #8
 800f074:	f10b 0b01 	add.w	fp, fp, #1
 800f078:	dd06      	ble.n	800f088 <__hexnan+0x100>
 800f07a:	4544      	cmp	r4, r8
 800f07c:	d9c1      	bls.n	800f002 <__hexnan+0x7a>
 800f07e:	2300      	movs	r3, #0
 800f080:	f844 3c04 	str.w	r3, [r4, #-4]
 800f084:	2501      	movs	r5, #1
 800f086:	3c04      	subs	r4, #4
 800f088:	6822      	ldr	r2, [r4, #0]
 800f08a:	f000 000f 	and.w	r0, r0, #15
 800f08e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f092:	6020      	str	r0, [r4, #0]
 800f094:	e7b5      	b.n	800f002 <__hexnan+0x7a>
 800f096:	2508      	movs	r5, #8
 800f098:	e7b3      	b.n	800f002 <__hexnan+0x7a>
 800f09a:	9b01      	ldr	r3, [sp, #4]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d0dd      	beq.n	800f05c <__hexnan+0xd4>
 800f0a0:	f1c3 0320 	rsb	r3, r3, #32
 800f0a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f0a8:	40da      	lsrs	r2, r3
 800f0aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f0ae:	4013      	ands	r3, r2
 800f0b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800f0b4:	e7d2      	b.n	800f05c <__hexnan+0xd4>
 800f0b6:	3f04      	subs	r7, #4
 800f0b8:	e7d0      	b.n	800f05c <__hexnan+0xd4>
 800f0ba:	2004      	movs	r0, #4
 800f0bc:	e7d5      	b.n	800f06a <__hexnan+0xe2>

0800f0be <__ascii_mbtowc>:
 800f0be:	b082      	sub	sp, #8
 800f0c0:	b901      	cbnz	r1, 800f0c4 <__ascii_mbtowc+0x6>
 800f0c2:	a901      	add	r1, sp, #4
 800f0c4:	b142      	cbz	r2, 800f0d8 <__ascii_mbtowc+0x1a>
 800f0c6:	b14b      	cbz	r3, 800f0dc <__ascii_mbtowc+0x1e>
 800f0c8:	7813      	ldrb	r3, [r2, #0]
 800f0ca:	600b      	str	r3, [r1, #0]
 800f0cc:	7812      	ldrb	r2, [r2, #0]
 800f0ce:	1e10      	subs	r0, r2, #0
 800f0d0:	bf18      	it	ne
 800f0d2:	2001      	movne	r0, #1
 800f0d4:	b002      	add	sp, #8
 800f0d6:	4770      	bx	lr
 800f0d8:	4610      	mov	r0, r2
 800f0da:	e7fb      	b.n	800f0d4 <__ascii_mbtowc+0x16>
 800f0dc:	f06f 0001 	mvn.w	r0, #1
 800f0e0:	e7f8      	b.n	800f0d4 <__ascii_mbtowc+0x16>

0800f0e2 <_realloc_r>:
 800f0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0e6:	4680      	mov	r8, r0
 800f0e8:	4615      	mov	r5, r2
 800f0ea:	460c      	mov	r4, r1
 800f0ec:	b921      	cbnz	r1, 800f0f8 <_realloc_r+0x16>
 800f0ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f2:	4611      	mov	r1, r2
 800f0f4:	f7fd beb2 	b.w	800ce5c <_malloc_r>
 800f0f8:	b92a      	cbnz	r2, 800f106 <_realloc_r+0x24>
 800f0fa:	f7fd fe3b 	bl	800cd74 <_free_r>
 800f0fe:	2400      	movs	r4, #0
 800f100:	4620      	mov	r0, r4
 800f102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f106:	f000 f840 	bl	800f18a <_malloc_usable_size_r>
 800f10a:	4285      	cmp	r5, r0
 800f10c:	4606      	mov	r6, r0
 800f10e:	d802      	bhi.n	800f116 <_realloc_r+0x34>
 800f110:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f114:	d8f4      	bhi.n	800f100 <_realloc_r+0x1e>
 800f116:	4629      	mov	r1, r5
 800f118:	4640      	mov	r0, r8
 800f11a:	f7fd fe9f 	bl	800ce5c <_malloc_r>
 800f11e:	4607      	mov	r7, r0
 800f120:	2800      	cmp	r0, #0
 800f122:	d0ec      	beq.n	800f0fe <_realloc_r+0x1c>
 800f124:	42b5      	cmp	r5, r6
 800f126:	462a      	mov	r2, r5
 800f128:	4621      	mov	r1, r4
 800f12a:	bf28      	it	cs
 800f12c:	4632      	movcs	r2, r6
 800f12e:	f7ff fc43 	bl	800e9b8 <memcpy>
 800f132:	4621      	mov	r1, r4
 800f134:	4640      	mov	r0, r8
 800f136:	f7fd fe1d 	bl	800cd74 <_free_r>
 800f13a:	463c      	mov	r4, r7
 800f13c:	e7e0      	b.n	800f100 <_realloc_r+0x1e>

0800f13e <__ascii_wctomb>:
 800f13e:	4603      	mov	r3, r0
 800f140:	4608      	mov	r0, r1
 800f142:	b141      	cbz	r1, 800f156 <__ascii_wctomb+0x18>
 800f144:	2aff      	cmp	r2, #255	@ 0xff
 800f146:	d904      	bls.n	800f152 <__ascii_wctomb+0x14>
 800f148:	228a      	movs	r2, #138	@ 0x8a
 800f14a:	601a      	str	r2, [r3, #0]
 800f14c:	f04f 30ff 	mov.w	r0, #4294967295
 800f150:	4770      	bx	lr
 800f152:	700a      	strb	r2, [r1, #0]
 800f154:	2001      	movs	r0, #1
 800f156:	4770      	bx	lr

0800f158 <fiprintf>:
 800f158:	b40e      	push	{r1, r2, r3}
 800f15a:	b503      	push	{r0, r1, lr}
 800f15c:	4601      	mov	r1, r0
 800f15e:	ab03      	add	r3, sp, #12
 800f160:	4805      	ldr	r0, [pc, #20]	@ (800f178 <fiprintf+0x20>)
 800f162:	f853 2b04 	ldr.w	r2, [r3], #4
 800f166:	6800      	ldr	r0, [r0, #0]
 800f168:	9301      	str	r3, [sp, #4]
 800f16a:	f000 f83f 	bl	800f1ec <_vfiprintf_r>
 800f16e:	b002      	add	sp, #8
 800f170:	f85d eb04 	ldr.w	lr, [sp], #4
 800f174:	b003      	add	sp, #12
 800f176:	4770      	bx	lr
 800f178:	20000030 	.word	0x20000030

0800f17c <abort>:
 800f17c:	b508      	push	{r3, lr}
 800f17e:	2006      	movs	r0, #6
 800f180:	f000 fa08 	bl	800f594 <raise>
 800f184:	2001      	movs	r0, #1
 800f186:	f7f2 ff9b 	bl	80020c0 <_exit>

0800f18a <_malloc_usable_size_r>:
 800f18a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f18e:	1f18      	subs	r0, r3, #4
 800f190:	2b00      	cmp	r3, #0
 800f192:	bfbc      	itt	lt
 800f194:	580b      	ldrlt	r3, [r1, r0]
 800f196:	18c0      	addlt	r0, r0, r3
 800f198:	4770      	bx	lr

0800f19a <__sfputc_r>:
 800f19a:	6893      	ldr	r3, [r2, #8]
 800f19c:	3b01      	subs	r3, #1
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	b410      	push	{r4}
 800f1a2:	6093      	str	r3, [r2, #8]
 800f1a4:	da08      	bge.n	800f1b8 <__sfputc_r+0x1e>
 800f1a6:	6994      	ldr	r4, [r2, #24]
 800f1a8:	42a3      	cmp	r3, r4
 800f1aa:	db01      	blt.n	800f1b0 <__sfputc_r+0x16>
 800f1ac:	290a      	cmp	r1, #10
 800f1ae:	d103      	bne.n	800f1b8 <__sfputc_r+0x1e>
 800f1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1b4:	f000 b932 	b.w	800f41c <__swbuf_r>
 800f1b8:	6813      	ldr	r3, [r2, #0]
 800f1ba:	1c58      	adds	r0, r3, #1
 800f1bc:	6010      	str	r0, [r2, #0]
 800f1be:	7019      	strb	r1, [r3, #0]
 800f1c0:	4608      	mov	r0, r1
 800f1c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1c6:	4770      	bx	lr

0800f1c8 <__sfputs_r>:
 800f1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ca:	4606      	mov	r6, r0
 800f1cc:	460f      	mov	r7, r1
 800f1ce:	4614      	mov	r4, r2
 800f1d0:	18d5      	adds	r5, r2, r3
 800f1d2:	42ac      	cmp	r4, r5
 800f1d4:	d101      	bne.n	800f1da <__sfputs_r+0x12>
 800f1d6:	2000      	movs	r0, #0
 800f1d8:	e007      	b.n	800f1ea <__sfputs_r+0x22>
 800f1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1de:	463a      	mov	r2, r7
 800f1e0:	4630      	mov	r0, r6
 800f1e2:	f7ff ffda 	bl	800f19a <__sfputc_r>
 800f1e6:	1c43      	adds	r3, r0, #1
 800f1e8:	d1f3      	bne.n	800f1d2 <__sfputs_r+0xa>
 800f1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1ec <_vfiprintf_r>:
 800f1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f0:	460d      	mov	r5, r1
 800f1f2:	b09d      	sub	sp, #116	@ 0x74
 800f1f4:	4614      	mov	r4, r2
 800f1f6:	4698      	mov	r8, r3
 800f1f8:	4606      	mov	r6, r0
 800f1fa:	b118      	cbz	r0, 800f204 <_vfiprintf_r+0x18>
 800f1fc:	6a03      	ldr	r3, [r0, #32]
 800f1fe:	b90b      	cbnz	r3, 800f204 <_vfiprintf_r+0x18>
 800f200:	f7fc fea6 	bl	800bf50 <__sinit>
 800f204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f206:	07d9      	lsls	r1, r3, #31
 800f208:	d405      	bmi.n	800f216 <_vfiprintf_r+0x2a>
 800f20a:	89ab      	ldrh	r3, [r5, #12]
 800f20c:	059a      	lsls	r2, r3, #22
 800f20e:	d402      	bmi.n	800f216 <_vfiprintf_r+0x2a>
 800f210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f212:	f7fc ffc6 	bl	800c1a2 <__retarget_lock_acquire_recursive>
 800f216:	89ab      	ldrh	r3, [r5, #12]
 800f218:	071b      	lsls	r3, r3, #28
 800f21a:	d501      	bpl.n	800f220 <_vfiprintf_r+0x34>
 800f21c:	692b      	ldr	r3, [r5, #16]
 800f21e:	b99b      	cbnz	r3, 800f248 <_vfiprintf_r+0x5c>
 800f220:	4629      	mov	r1, r5
 800f222:	4630      	mov	r0, r6
 800f224:	f000 f938 	bl	800f498 <__swsetup_r>
 800f228:	b170      	cbz	r0, 800f248 <_vfiprintf_r+0x5c>
 800f22a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f22c:	07dc      	lsls	r4, r3, #31
 800f22e:	d504      	bpl.n	800f23a <_vfiprintf_r+0x4e>
 800f230:	f04f 30ff 	mov.w	r0, #4294967295
 800f234:	b01d      	add	sp, #116	@ 0x74
 800f236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f23a:	89ab      	ldrh	r3, [r5, #12]
 800f23c:	0598      	lsls	r0, r3, #22
 800f23e:	d4f7      	bmi.n	800f230 <_vfiprintf_r+0x44>
 800f240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f242:	f7fc ffaf 	bl	800c1a4 <__retarget_lock_release_recursive>
 800f246:	e7f3      	b.n	800f230 <_vfiprintf_r+0x44>
 800f248:	2300      	movs	r3, #0
 800f24a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f24c:	2320      	movs	r3, #32
 800f24e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f252:	f8cd 800c 	str.w	r8, [sp, #12]
 800f256:	2330      	movs	r3, #48	@ 0x30
 800f258:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f408 <_vfiprintf_r+0x21c>
 800f25c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f260:	f04f 0901 	mov.w	r9, #1
 800f264:	4623      	mov	r3, r4
 800f266:	469a      	mov	sl, r3
 800f268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f26c:	b10a      	cbz	r2, 800f272 <_vfiprintf_r+0x86>
 800f26e:	2a25      	cmp	r2, #37	@ 0x25
 800f270:	d1f9      	bne.n	800f266 <_vfiprintf_r+0x7a>
 800f272:	ebba 0b04 	subs.w	fp, sl, r4
 800f276:	d00b      	beq.n	800f290 <_vfiprintf_r+0xa4>
 800f278:	465b      	mov	r3, fp
 800f27a:	4622      	mov	r2, r4
 800f27c:	4629      	mov	r1, r5
 800f27e:	4630      	mov	r0, r6
 800f280:	f7ff ffa2 	bl	800f1c8 <__sfputs_r>
 800f284:	3001      	adds	r0, #1
 800f286:	f000 80a7 	beq.w	800f3d8 <_vfiprintf_r+0x1ec>
 800f28a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f28c:	445a      	add	r2, fp
 800f28e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f290:	f89a 3000 	ldrb.w	r3, [sl]
 800f294:	2b00      	cmp	r3, #0
 800f296:	f000 809f 	beq.w	800f3d8 <_vfiprintf_r+0x1ec>
 800f29a:	2300      	movs	r3, #0
 800f29c:	f04f 32ff 	mov.w	r2, #4294967295
 800f2a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2a4:	f10a 0a01 	add.w	sl, sl, #1
 800f2a8:	9304      	str	r3, [sp, #16]
 800f2aa:	9307      	str	r3, [sp, #28]
 800f2ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f2b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2b2:	4654      	mov	r4, sl
 800f2b4:	2205      	movs	r2, #5
 800f2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2ba:	4853      	ldr	r0, [pc, #332]	@ (800f408 <_vfiprintf_r+0x21c>)
 800f2bc:	f7f0 ffc0 	bl	8000240 <memchr>
 800f2c0:	9a04      	ldr	r2, [sp, #16]
 800f2c2:	b9d8      	cbnz	r0, 800f2fc <_vfiprintf_r+0x110>
 800f2c4:	06d1      	lsls	r1, r2, #27
 800f2c6:	bf44      	itt	mi
 800f2c8:	2320      	movmi	r3, #32
 800f2ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2ce:	0713      	lsls	r3, r2, #28
 800f2d0:	bf44      	itt	mi
 800f2d2:	232b      	movmi	r3, #43	@ 0x2b
 800f2d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800f2dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2de:	d015      	beq.n	800f30c <_vfiprintf_r+0x120>
 800f2e0:	9a07      	ldr	r2, [sp, #28]
 800f2e2:	4654      	mov	r4, sl
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	f04f 0c0a 	mov.w	ip, #10
 800f2ea:	4621      	mov	r1, r4
 800f2ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2f0:	3b30      	subs	r3, #48	@ 0x30
 800f2f2:	2b09      	cmp	r3, #9
 800f2f4:	d94b      	bls.n	800f38e <_vfiprintf_r+0x1a2>
 800f2f6:	b1b0      	cbz	r0, 800f326 <_vfiprintf_r+0x13a>
 800f2f8:	9207      	str	r2, [sp, #28]
 800f2fa:	e014      	b.n	800f326 <_vfiprintf_r+0x13a>
 800f2fc:	eba0 0308 	sub.w	r3, r0, r8
 800f300:	fa09 f303 	lsl.w	r3, r9, r3
 800f304:	4313      	orrs	r3, r2
 800f306:	9304      	str	r3, [sp, #16]
 800f308:	46a2      	mov	sl, r4
 800f30a:	e7d2      	b.n	800f2b2 <_vfiprintf_r+0xc6>
 800f30c:	9b03      	ldr	r3, [sp, #12]
 800f30e:	1d19      	adds	r1, r3, #4
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	9103      	str	r1, [sp, #12]
 800f314:	2b00      	cmp	r3, #0
 800f316:	bfbb      	ittet	lt
 800f318:	425b      	neglt	r3, r3
 800f31a:	f042 0202 	orrlt.w	r2, r2, #2
 800f31e:	9307      	strge	r3, [sp, #28]
 800f320:	9307      	strlt	r3, [sp, #28]
 800f322:	bfb8      	it	lt
 800f324:	9204      	strlt	r2, [sp, #16]
 800f326:	7823      	ldrb	r3, [r4, #0]
 800f328:	2b2e      	cmp	r3, #46	@ 0x2e
 800f32a:	d10a      	bne.n	800f342 <_vfiprintf_r+0x156>
 800f32c:	7863      	ldrb	r3, [r4, #1]
 800f32e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f330:	d132      	bne.n	800f398 <_vfiprintf_r+0x1ac>
 800f332:	9b03      	ldr	r3, [sp, #12]
 800f334:	1d1a      	adds	r2, r3, #4
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	9203      	str	r2, [sp, #12]
 800f33a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f33e:	3402      	adds	r4, #2
 800f340:	9305      	str	r3, [sp, #20]
 800f342:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f418 <_vfiprintf_r+0x22c>
 800f346:	7821      	ldrb	r1, [r4, #0]
 800f348:	2203      	movs	r2, #3
 800f34a:	4650      	mov	r0, sl
 800f34c:	f7f0 ff78 	bl	8000240 <memchr>
 800f350:	b138      	cbz	r0, 800f362 <_vfiprintf_r+0x176>
 800f352:	9b04      	ldr	r3, [sp, #16]
 800f354:	eba0 000a 	sub.w	r0, r0, sl
 800f358:	2240      	movs	r2, #64	@ 0x40
 800f35a:	4082      	lsls	r2, r0
 800f35c:	4313      	orrs	r3, r2
 800f35e:	3401      	adds	r4, #1
 800f360:	9304      	str	r3, [sp, #16]
 800f362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f366:	4829      	ldr	r0, [pc, #164]	@ (800f40c <_vfiprintf_r+0x220>)
 800f368:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f36c:	2206      	movs	r2, #6
 800f36e:	f7f0 ff67 	bl	8000240 <memchr>
 800f372:	2800      	cmp	r0, #0
 800f374:	d03f      	beq.n	800f3f6 <_vfiprintf_r+0x20a>
 800f376:	4b26      	ldr	r3, [pc, #152]	@ (800f410 <_vfiprintf_r+0x224>)
 800f378:	bb1b      	cbnz	r3, 800f3c2 <_vfiprintf_r+0x1d6>
 800f37a:	9b03      	ldr	r3, [sp, #12]
 800f37c:	3307      	adds	r3, #7
 800f37e:	f023 0307 	bic.w	r3, r3, #7
 800f382:	3308      	adds	r3, #8
 800f384:	9303      	str	r3, [sp, #12]
 800f386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f388:	443b      	add	r3, r7
 800f38a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f38c:	e76a      	b.n	800f264 <_vfiprintf_r+0x78>
 800f38e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f392:	460c      	mov	r4, r1
 800f394:	2001      	movs	r0, #1
 800f396:	e7a8      	b.n	800f2ea <_vfiprintf_r+0xfe>
 800f398:	2300      	movs	r3, #0
 800f39a:	3401      	adds	r4, #1
 800f39c:	9305      	str	r3, [sp, #20]
 800f39e:	4619      	mov	r1, r3
 800f3a0:	f04f 0c0a 	mov.w	ip, #10
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3aa:	3a30      	subs	r2, #48	@ 0x30
 800f3ac:	2a09      	cmp	r2, #9
 800f3ae:	d903      	bls.n	800f3b8 <_vfiprintf_r+0x1cc>
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d0c6      	beq.n	800f342 <_vfiprintf_r+0x156>
 800f3b4:	9105      	str	r1, [sp, #20]
 800f3b6:	e7c4      	b.n	800f342 <_vfiprintf_r+0x156>
 800f3b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3bc:	4604      	mov	r4, r0
 800f3be:	2301      	movs	r3, #1
 800f3c0:	e7f0      	b.n	800f3a4 <_vfiprintf_r+0x1b8>
 800f3c2:	ab03      	add	r3, sp, #12
 800f3c4:	9300      	str	r3, [sp, #0]
 800f3c6:	462a      	mov	r2, r5
 800f3c8:	4b12      	ldr	r3, [pc, #72]	@ (800f414 <_vfiprintf_r+0x228>)
 800f3ca:	a904      	add	r1, sp, #16
 800f3cc:	4630      	mov	r0, r6
 800f3ce:	f7fb ff7f 	bl	800b2d0 <_printf_float>
 800f3d2:	4607      	mov	r7, r0
 800f3d4:	1c78      	adds	r0, r7, #1
 800f3d6:	d1d6      	bne.n	800f386 <_vfiprintf_r+0x19a>
 800f3d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3da:	07d9      	lsls	r1, r3, #31
 800f3dc:	d405      	bmi.n	800f3ea <_vfiprintf_r+0x1fe>
 800f3de:	89ab      	ldrh	r3, [r5, #12]
 800f3e0:	059a      	lsls	r2, r3, #22
 800f3e2:	d402      	bmi.n	800f3ea <_vfiprintf_r+0x1fe>
 800f3e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3e6:	f7fc fedd 	bl	800c1a4 <__retarget_lock_release_recursive>
 800f3ea:	89ab      	ldrh	r3, [r5, #12]
 800f3ec:	065b      	lsls	r3, r3, #25
 800f3ee:	f53f af1f 	bmi.w	800f230 <_vfiprintf_r+0x44>
 800f3f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f3f4:	e71e      	b.n	800f234 <_vfiprintf_r+0x48>
 800f3f6:	ab03      	add	r3, sp, #12
 800f3f8:	9300      	str	r3, [sp, #0]
 800f3fa:	462a      	mov	r2, r5
 800f3fc:	4b05      	ldr	r3, [pc, #20]	@ (800f414 <_vfiprintf_r+0x228>)
 800f3fe:	a904      	add	r1, sp, #16
 800f400:	4630      	mov	r0, r6
 800f402:	f7fc f9ed 	bl	800b7e0 <_printf_i>
 800f406:	e7e4      	b.n	800f3d2 <_vfiprintf_r+0x1e6>
 800f408:	0800ff81 	.word	0x0800ff81
 800f40c:	0800ff8b 	.word	0x0800ff8b
 800f410:	0800b2d1 	.word	0x0800b2d1
 800f414:	0800f1c9 	.word	0x0800f1c9
 800f418:	0800ff87 	.word	0x0800ff87

0800f41c <__swbuf_r>:
 800f41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41e:	460e      	mov	r6, r1
 800f420:	4614      	mov	r4, r2
 800f422:	4605      	mov	r5, r0
 800f424:	b118      	cbz	r0, 800f42e <__swbuf_r+0x12>
 800f426:	6a03      	ldr	r3, [r0, #32]
 800f428:	b90b      	cbnz	r3, 800f42e <__swbuf_r+0x12>
 800f42a:	f7fc fd91 	bl	800bf50 <__sinit>
 800f42e:	69a3      	ldr	r3, [r4, #24]
 800f430:	60a3      	str	r3, [r4, #8]
 800f432:	89a3      	ldrh	r3, [r4, #12]
 800f434:	071a      	lsls	r2, r3, #28
 800f436:	d501      	bpl.n	800f43c <__swbuf_r+0x20>
 800f438:	6923      	ldr	r3, [r4, #16]
 800f43a:	b943      	cbnz	r3, 800f44e <__swbuf_r+0x32>
 800f43c:	4621      	mov	r1, r4
 800f43e:	4628      	mov	r0, r5
 800f440:	f000 f82a 	bl	800f498 <__swsetup_r>
 800f444:	b118      	cbz	r0, 800f44e <__swbuf_r+0x32>
 800f446:	f04f 37ff 	mov.w	r7, #4294967295
 800f44a:	4638      	mov	r0, r7
 800f44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f44e:	6823      	ldr	r3, [r4, #0]
 800f450:	6922      	ldr	r2, [r4, #16]
 800f452:	1a98      	subs	r0, r3, r2
 800f454:	6963      	ldr	r3, [r4, #20]
 800f456:	b2f6      	uxtb	r6, r6
 800f458:	4283      	cmp	r3, r0
 800f45a:	4637      	mov	r7, r6
 800f45c:	dc05      	bgt.n	800f46a <__swbuf_r+0x4e>
 800f45e:	4621      	mov	r1, r4
 800f460:	4628      	mov	r0, r5
 800f462:	f7ff fa45 	bl	800e8f0 <_fflush_r>
 800f466:	2800      	cmp	r0, #0
 800f468:	d1ed      	bne.n	800f446 <__swbuf_r+0x2a>
 800f46a:	68a3      	ldr	r3, [r4, #8]
 800f46c:	3b01      	subs	r3, #1
 800f46e:	60a3      	str	r3, [r4, #8]
 800f470:	6823      	ldr	r3, [r4, #0]
 800f472:	1c5a      	adds	r2, r3, #1
 800f474:	6022      	str	r2, [r4, #0]
 800f476:	701e      	strb	r6, [r3, #0]
 800f478:	6962      	ldr	r2, [r4, #20]
 800f47a:	1c43      	adds	r3, r0, #1
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d004      	beq.n	800f48a <__swbuf_r+0x6e>
 800f480:	89a3      	ldrh	r3, [r4, #12]
 800f482:	07db      	lsls	r3, r3, #31
 800f484:	d5e1      	bpl.n	800f44a <__swbuf_r+0x2e>
 800f486:	2e0a      	cmp	r6, #10
 800f488:	d1df      	bne.n	800f44a <__swbuf_r+0x2e>
 800f48a:	4621      	mov	r1, r4
 800f48c:	4628      	mov	r0, r5
 800f48e:	f7ff fa2f 	bl	800e8f0 <_fflush_r>
 800f492:	2800      	cmp	r0, #0
 800f494:	d0d9      	beq.n	800f44a <__swbuf_r+0x2e>
 800f496:	e7d6      	b.n	800f446 <__swbuf_r+0x2a>

0800f498 <__swsetup_r>:
 800f498:	b538      	push	{r3, r4, r5, lr}
 800f49a:	4b29      	ldr	r3, [pc, #164]	@ (800f540 <__swsetup_r+0xa8>)
 800f49c:	4605      	mov	r5, r0
 800f49e:	6818      	ldr	r0, [r3, #0]
 800f4a0:	460c      	mov	r4, r1
 800f4a2:	b118      	cbz	r0, 800f4ac <__swsetup_r+0x14>
 800f4a4:	6a03      	ldr	r3, [r0, #32]
 800f4a6:	b90b      	cbnz	r3, 800f4ac <__swsetup_r+0x14>
 800f4a8:	f7fc fd52 	bl	800bf50 <__sinit>
 800f4ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4b0:	0719      	lsls	r1, r3, #28
 800f4b2:	d422      	bmi.n	800f4fa <__swsetup_r+0x62>
 800f4b4:	06da      	lsls	r2, r3, #27
 800f4b6:	d407      	bmi.n	800f4c8 <__swsetup_r+0x30>
 800f4b8:	2209      	movs	r2, #9
 800f4ba:	602a      	str	r2, [r5, #0]
 800f4bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4c0:	81a3      	strh	r3, [r4, #12]
 800f4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4c6:	e033      	b.n	800f530 <__swsetup_r+0x98>
 800f4c8:	0758      	lsls	r0, r3, #29
 800f4ca:	d512      	bpl.n	800f4f2 <__swsetup_r+0x5a>
 800f4cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4ce:	b141      	cbz	r1, 800f4e2 <__swsetup_r+0x4a>
 800f4d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4d4:	4299      	cmp	r1, r3
 800f4d6:	d002      	beq.n	800f4de <__swsetup_r+0x46>
 800f4d8:	4628      	mov	r0, r5
 800f4da:	f7fd fc4b 	bl	800cd74 <_free_r>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4e2:	89a3      	ldrh	r3, [r4, #12]
 800f4e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f4e8:	81a3      	strh	r3, [r4, #12]
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	6063      	str	r3, [r4, #4]
 800f4ee:	6923      	ldr	r3, [r4, #16]
 800f4f0:	6023      	str	r3, [r4, #0]
 800f4f2:	89a3      	ldrh	r3, [r4, #12]
 800f4f4:	f043 0308 	orr.w	r3, r3, #8
 800f4f8:	81a3      	strh	r3, [r4, #12]
 800f4fa:	6923      	ldr	r3, [r4, #16]
 800f4fc:	b94b      	cbnz	r3, 800f512 <__swsetup_r+0x7a>
 800f4fe:	89a3      	ldrh	r3, [r4, #12]
 800f500:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f508:	d003      	beq.n	800f512 <__swsetup_r+0x7a>
 800f50a:	4621      	mov	r1, r4
 800f50c:	4628      	mov	r0, r5
 800f50e:	f000 f883 	bl	800f618 <__smakebuf_r>
 800f512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f516:	f013 0201 	ands.w	r2, r3, #1
 800f51a:	d00a      	beq.n	800f532 <__swsetup_r+0x9a>
 800f51c:	2200      	movs	r2, #0
 800f51e:	60a2      	str	r2, [r4, #8]
 800f520:	6962      	ldr	r2, [r4, #20]
 800f522:	4252      	negs	r2, r2
 800f524:	61a2      	str	r2, [r4, #24]
 800f526:	6922      	ldr	r2, [r4, #16]
 800f528:	b942      	cbnz	r2, 800f53c <__swsetup_r+0xa4>
 800f52a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f52e:	d1c5      	bne.n	800f4bc <__swsetup_r+0x24>
 800f530:	bd38      	pop	{r3, r4, r5, pc}
 800f532:	0799      	lsls	r1, r3, #30
 800f534:	bf58      	it	pl
 800f536:	6962      	ldrpl	r2, [r4, #20]
 800f538:	60a2      	str	r2, [r4, #8]
 800f53a:	e7f4      	b.n	800f526 <__swsetup_r+0x8e>
 800f53c:	2000      	movs	r0, #0
 800f53e:	e7f7      	b.n	800f530 <__swsetup_r+0x98>
 800f540:	20000030 	.word	0x20000030

0800f544 <_raise_r>:
 800f544:	291f      	cmp	r1, #31
 800f546:	b538      	push	{r3, r4, r5, lr}
 800f548:	4605      	mov	r5, r0
 800f54a:	460c      	mov	r4, r1
 800f54c:	d904      	bls.n	800f558 <_raise_r+0x14>
 800f54e:	2316      	movs	r3, #22
 800f550:	6003      	str	r3, [r0, #0]
 800f552:	f04f 30ff 	mov.w	r0, #4294967295
 800f556:	bd38      	pop	{r3, r4, r5, pc}
 800f558:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f55a:	b112      	cbz	r2, 800f562 <_raise_r+0x1e>
 800f55c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f560:	b94b      	cbnz	r3, 800f576 <_raise_r+0x32>
 800f562:	4628      	mov	r0, r5
 800f564:	f000 f830 	bl	800f5c8 <_getpid_r>
 800f568:	4622      	mov	r2, r4
 800f56a:	4601      	mov	r1, r0
 800f56c:	4628      	mov	r0, r5
 800f56e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f572:	f000 b817 	b.w	800f5a4 <_kill_r>
 800f576:	2b01      	cmp	r3, #1
 800f578:	d00a      	beq.n	800f590 <_raise_r+0x4c>
 800f57a:	1c59      	adds	r1, r3, #1
 800f57c:	d103      	bne.n	800f586 <_raise_r+0x42>
 800f57e:	2316      	movs	r3, #22
 800f580:	6003      	str	r3, [r0, #0]
 800f582:	2001      	movs	r0, #1
 800f584:	e7e7      	b.n	800f556 <_raise_r+0x12>
 800f586:	2100      	movs	r1, #0
 800f588:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f58c:	4620      	mov	r0, r4
 800f58e:	4798      	blx	r3
 800f590:	2000      	movs	r0, #0
 800f592:	e7e0      	b.n	800f556 <_raise_r+0x12>

0800f594 <raise>:
 800f594:	4b02      	ldr	r3, [pc, #8]	@ (800f5a0 <raise+0xc>)
 800f596:	4601      	mov	r1, r0
 800f598:	6818      	ldr	r0, [r3, #0]
 800f59a:	f7ff bfd3 	b.w	800f544 <_raise_r>
 800f59e:	bf00      	nop
 800f5a0:	20000030 	.word	0x20000030

0800f5a4 <_kill_r>:
 800f5a4:	b538      	push	{r3, r4, r5, lr}
 800f5a6:	4d07      	ldr	r5, [pc, #28]	@ (800f5c4 <_kill_r+0x20>)
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	4604      	mov	r4, r0
 800f5ac:	4608      	mov	r0, r1
 800f5ae:	4611      	mov	r1, r2
 800f5b0:	602b      	str	r3, [r5, #0]
 800f5b2:	f7f2 fd75 	bl	80020a0 <_kill>
 800f5b6:	1c43      	adds	r3, r0, #1
 800f5b8:	d102      	bne.n	800f5c0 <_kill_r+0x1c>
 800f5ba:	682b      	ldr	r3, [r5, #0]
 800f5bc:	b103      	cbz	r3, 800f5c0 <_kill_r+0x1c>
 800f5be:	6023      	str	r3, [r4, #0]
 800f5c0:	bd38      	pop	{r3, r4, r5, pc}
 800f5c2:	bf00      	nop
 800f5c4:	20002e80 	.word	0x20002e80

0800f5c8 <_getpid_r>:
 800f5c8:	f7f2 bd62 	b.w	8002090 <_getpid>

0800f5cc <__swhatbuf_r>:
 800f5cc:	b570      	push	{r4, r5, r6, lr}
 800f5ce:	460c      	mov	r4, r1
 800f5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5d4:	2900      	cmp	r1, #0
 800f5d6:	b096      	sub	sp, #88	@ 0x58
 800f5d8:	4615      	mov	r5, r2
 800f5da:	461e      	mov	r6, r3
 800f5dc:	da0d      	bge.n	800f5fa <__swhatbuf_r+0x2e>
 800f5de:	89a3      	ldrh	r3, [r4, #12]
 800f5e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f5e4:	f04f 0100 	mov.w	r1, #0
 800f5e8:	bf14      	ite	ne
 800f5ea:	2340      	movne	r3, #64	@ 0x40
 800f5ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f5f0:	2000      	movs	r0, #0
 800f5f2:	6031      	str	r1, [r6, #0]
 800f5f4:	602b      	str	r3, [r5, #0]
 800f5f6:	b016      	add	sp, #88	@ 0x58
 800f5f8:	bd70      	pop	{r4, r5, r6, pc}
 800f5fa:	466a      	mov	r2, sp
 800f5fc:	f000 f848 	bl	800f690 <_fstat_r>
 800f600:	2800      	cmp	r0, #0
 800f602:	dbec      	blt.n	800f5de <__swhatbuf_r+0x12>
 800f604:	9901      	ldr	r1, [sp, #4]
 800f606:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f60a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f60e:	4259      	negs	r1, r3
 800f610:	4159      	adcs	r1, r3
 800f612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f616:	e7eb      	b.n	800f5f0 <__swhatbuf_r+0x24>

0800f618 <__smakebuf_r>:
 800f618:	898b      	ldrh	r3, [r1, #12]
 800f61a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f61c:	079d      	lsls	r5, r3, #30
 800f61e:	4606      	mov	r6, r0
 800f620:	460c      	mov	r4, r1
 800f622:	d507      	bpl.n	800f634 <__smakebuf_r+0x1c>
 800f624:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f628:	6023      	str	r3, [r4, #0]
 800f62a:	6123      	str	r3, [r4, #16]
 800f62c:	2301      	movs	r3, #1
 800f62e:	6163      	str	r3, [r4, #20]
 800f630:	b003      	add	sp, #12
 800f632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f634:	ab01      	add	r3, sp, #4
 800f636:	466a      	mov	r2, sp
 800f638:	f7ff ffc8 	bl	800f5cc <__swhatbuf_r>
 800f63c:	9f00      	ldr	r7, [sp, #0]
 800f63e:	4605      	mov	r5, r0
 800f640:	4639      	mov	r1, r7
 800f642:	4630      	mov	r0, r6
 800f644:	f7fd fc0a 	bl	800ce5c <_malloc_r>
 800f648:	b948      	cbnz	r0, 800f65e <__smakebuf_r+0x46>
 800f64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f64e:	059a      	lsls	r2, r3, #22
 800f650:	d4ee      	bmi.n	800f630 <__smakebuf_r+0x18>
 800f652:	f023 0303 	bic.w	r3, r3, #3
 800f656:	f043 0302 	orr.w	r3, r3, #2
 800f65a:	81a3      	strh	r3, [r4, #12]
 800f65c:	e7e2      	b.n	800f624 <__smakebuf_r+0xc>
 800f65e:	89a3      	ldrh	r3, [r4, #12]
 800f660:	6020      	str	r0, [r4, #0]
 800f662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f666:	81a3      	strh	r3, [r4, #12]
 800f668:	9b01      	ldr	r3, [sp, #4]
 800f66a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f66e:	b15b      	cbz	r3, 800f688 <__smakebuf_r+0x70>
 800f670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f674:	4630      	mov	r0, r6
 800f676:	f000 f81d 	bl	800f6b4 <_isatty_r>
 800f67a:	b128      	cbz	r0, 800f688 <__smakebuf_r+0x70>
 800f67c:	89a3      	ldrh	r3, [r4, #12]
 800f67e:	f023 0303 	bic.w	r3, r3, #3
 800f682:	f043 0301 	orr.w	r3, r3, #1
 800f686:	81a3      	strh	r3, [r4, #12]
 800f688:	89a3      	ldrh	r3, [r4, #12]
 800f68a:	431d      	orrs	r5, r3
 800f68c:	81a5      	strh	r5, [r4, #12]
 800f68e:	e7cf      	b.n	800f630 <__smakebuf_r+0x18>

0800f690 <_fstat_r>:
 800f690:	b538      	push	{r3, r4, r5, lr}
 800f692:	4d07      	ldr	r5, [pc, #28]	@ (800f6b0 <_fstat_r+0x20>)
 800f694:	2300      	movs	r3, #0
 800f696:	4604      	mov	r4, r0
 800f698:	4608      	mov	r0, r1
 800f69a:	4611      	mov	r1, r2
 800f69c:	602b      	str	r3, [r5, #0]
 800f69e:	f7f2 fd5f 	bl	8002160 <_fstat>
 800f6a2:	1c43      	adds	r3, r0, #1
 800f6a4:	d102      	bne.n	800f6ac <_fstat_r+0x1c>
 800f6a6:	682b      	ldr	r3, [r5, #0]
 800f6a8:	b103      	cbz	r3, 800f6ac <_fstat_r+0x1c>
 800f6aa:	6023      	str	r3, [r4, #0]
 800f6ac:	bd38      	pop	{r3, r4, r5, pc}
 800f6ae:	bf00      	nop
 800f6b0:	20002e80 	.word	0x20002e80

0800f6b4 <_isatty_r>:
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	4d06      	ldr	r5, [pc, #24]	@ (800f6d0 <_isatty_r+0x1c>)
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	4608      	mov	r0, r1
 800f6be:	602b      	str	r3, [r5, #0]
 800f6c0:	f7f2 fd5e 	bl	8002180 <_isatty>
 800f6c4:	1c43      	adds	r3, r0, #1
 800f6c6:	d102      	bne.n	800f6ce <_isatty_r+0x1a>
 800f6c8:	682b      	ldr	r3, [r5, #0]
 800f6ca:	b103      	cbz	r3, 800f6ce <_isatty_r+0x1a>
 800f6cc:	6023      	str	r3, [r4, #0]
 800f6ce:	bd38      	pop	{r3, r4, r5, pc}
 800f6d0:	20002e80 	.word	0x20002e80

0800f6d4 <_init>:
 800f6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6d6:	bf00      	nop
 800f6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6da:	bc08      	pop	{r3}
 800f6dc:	469e      	mov	lr, r3
 800f6de:	4770      	bx	lr

0800f6e0 <_fini>:
 800f6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6e2:	bf00      	nop
 800f6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6e6:	bc08      	pop	{r3}
 800f6e8:	469e      	mov	lr, r3
 800f6ea:	4770      	bx	lr
