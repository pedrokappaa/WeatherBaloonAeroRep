
Balloon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc18  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800be18  0800be18  0001be18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c344  0800c344  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c344  0800c344  0001c344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c34c  0800c34c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c34c  0800c34c  0001c34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c350  0800c350  0001c350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800c354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  2000020c  0800c560  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  0800c560  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001706b  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003566  00000000  00000000  000372a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  0003a810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0003bb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad93  00000000  00000000  0003cc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f50  00000000  00000000  00067a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001052a7  00000000  00000000  0008195b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00186c02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000617c  00000000  00000000  00186c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000020c 	.word	0x2000020c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800be00 	.word	0x0800be00

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000210 	.word	0x20000210
 800023c:	0800be00 	.word	0x0800be00

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ee:	4b3e      	ldr	r3, [pc, #248]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 80009f0:	4a3e      	ldr	r2, [pc, #248]	; (8000aec <MX_ADC1_Init+0x110>)
 80009f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009f4:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a00:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a06:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0c:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000a1c:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a1e:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a2c:	2205      	movs	r2, #5
 8000a2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a30:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a38:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3e:	482a      	ldr	r0, [pc, #168]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a40:	f001 fdb6 	bl	80025b0 <HAL_ADC_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000a4a:	f001 f839 	bl	8001ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_ADC1_Init+0x114>)
 8000a50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a60:	f001 fdea 	bl	8002638 <HAL_ADC_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a6a:	f001 f829 	bl	8001ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a7c:	f001 fddc 	bl	8002638 <HAL_ADC_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000a86:	f001 f81b 	bl	8001ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a98:	f001 fdce 	bl	8002638 <HAL_ADC_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000aa2:	f001 f80d 	bl	8001ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aae:	463b      	mov	r3, r7
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000ab4:	f001 fdc0 	bl	8002638 <HAL_ADC_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000abe:	f000 ffff 	bl	8001ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ac2:	230d      	movs	r3, #13
 8000ac4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aca:	463b      	mov	r3, r7
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000ad0:	f001 fdb2 	bl	8002638 <HAL_ADC_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000ada:	f000 fff1 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000228 	.word	0x20000228
 8000aec:	40012000 	.word	0x40012000
 8000af0:	10000012 	.word	0x10000012

08000af4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a39      	ldr	r2, [pc, #228]	; (8000bf8 <HAL_ADC_MspInit+0x104>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d16b      	bne.n	8000bee <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b16:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a38      	ldr	r2, [pc, #224]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a32      	ldr	r2, [pc, #200]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a2c      	ldr	r2, [pc, #176]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000b5e:	2309      	movs	r3, #9
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b62:	2303      	movs	r3, #3
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4823      	ldr	r0, [pc, #140]	; (8000c00 <HAL_ADC_MspInit+0x10c>)
 8000b72:	f002 fc3f 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000b76:	2309      	movs	r3, #9
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	481e      	ldr	r0, [pc, #120]	; (8000c04 <HAL_ADC_MspInit+0x110>)
 8000b8a:	f002 fc33 	bl	80033f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000b90:	4a1e      	ldr	r2, [pc, #120]	; (8000c0c <HAL_ADC_MspInit+0x118>)
 8000b92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bc4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bd4:	f002 f892 	bl	8002cfc <HAL_DMA_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8000bde:	f000 ff6f 	bl	8001ac0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000be6:	639a      	str	r2, [r3, #56]	; 0x38
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40012000 	.word	0x40012000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	20000270 	.word	0x20000270
 8000c0c:	40026410 	.word	0x40026410

08000c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2038      	movs	r0, #56	; 0x38
 8000c34:	f002 f82b 	bl	8002c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c38:	2038      	movs	r0, #56	; 0x38
 8000c3a:	f002 f844 	bl	8002cc6 <HAL_NVIC_EnableIRQ>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c56:	4804      	ldr	r0, [pc, #16]	; (8000c68 <SELECT+0x1c>)
 8000c58:	f002 fd78 	bl	800374c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f001 fc83 	bl	8002568 <HAL_Delay>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <DESELECT+0x1c>)
 8000c78:	f002 fd68 	bl	800374c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f001 fc73 	bl	8002568 <HAL_Delay>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40020c00 	.word	0x40020c00

08000c8c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c96:	bf00      	nop
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <SPI_TxByte+0x30>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d1f8      	bne.n	8000c98 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000ca6:	1df9      	adds	r1, r7, #7
 8000ca8:	2364      	movs	r3, #100	; 0x64
 8000caa:	2201      	movs	r2, #1
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <SPI_TxByte+0x30>)
 8000cae:	f003 ff3e 	bl	8004b2e <HAL_SPI_Transmit>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000314 	.word	0x20000314

08000cc0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ccc:	bf00      	nop
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <SPI_TxBuffer+0x30>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d1f8      	bne.n	8000cce <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000cdc:	887a      	ldrh	r2, [r7, #2]
 8000cde:	2364      	movs	r3, #100	; 0x64
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <SPI_TxBuffer+0x30>)
 8000ce4:	f003 ff23 	bl	8004b2e <HAL_SPI_Transmit>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000314 	.word	0x20000314

08000cf4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000cfa:	23ff      	movs	r3, #255	; 0xff
 8000cfc:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000cfe:	bf00      	nop
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <SPI_RxByte+0x34>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d1f8      	bne.n	8000d00 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000d0e:	1dba      	adds	r2, r7, #6
 8000d10:	1df9      	adds	r1, r7, #7
 8000d12:	2364      	movs	r3, #100	; 0x64
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2301      	movs	r3, #1
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <SPI_RxByte+0x34>)
 8000d1a:	f004 f876 	bl	8004e0a <HAL_SPI_TransmitReceive>

	return data;
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000314 	.word	0x20000314

08000d2c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000d34:	f7ff ffde 	bl	8000cf4 <SPI_RxByte>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	701a      	strb	r2, [r3, #0]
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <SD_ReadyWait+0x30>)
 8000d50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d54:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000d56:	f7ff ffcd 	bl	8000cf4 <SPI_RxByte>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2bff      	cmp	r3, #255	; 0xff
 8000d62:	d003      	beq.n	8000d6c <SD_ReadyWait+0x24>
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SD_ReadyWait+0x30>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f4      	bne.n	8000d56 <SD_ReadyWait+0xe>

	return res;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200003e0 	.word	0x200003e0

08000d7c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000d82:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d86:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000d88:	f7ff ff70 	bl	8000c6c <DESELECT>
	for(int i = 0; i < 10; i++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	e005      	b.n	8000d9e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000d92:	20ff      	movs	r0, #255	; 0xff
 8000d94:	f7ff ff7a 	bl	8000c8c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	2b09      	cmp	r3, #9
 8000da2:	ddf6      	ble.n	8000d92 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000da4:	f7ff ff52 	bl	8000c4c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000da8:	2340      	movs	r3, #64	; 0x40
 8000daa:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000dbc:	2395      	movs	r3, #149	; 0x95
 8000dbe:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2106      	movs	r1, #6
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff7b 	bl	8000cc0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000dca:	e002      	b.n	8000dd2 <SD_PowerOn+0x56>
	{
		cnt--;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000dd2:	f7ff ff8f 	bl	8000cf4 <SPI_RxByte>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d002      	beq.n	8000de2 <SD_PowerOn+0x66>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f4      	bne.n	8000dcc <SD_PowerOn+0x50>
	}

	DESELECT();
 8000de2:	f7ff ff43 	bl	8000c6c <DESELECT>
	SPI_TxByte(0XFF);
 8000de6:	20ff      	movs	r0, #255	; 0xff
 8000de8:	f7ff ff50 	bl	8000c8c <SPI_TxByte>

	PowerFlag = 1;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <SD_PowerOn+0x80>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200002d1 	.word	0x200002d1

08000e00 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <SD_PowerOff+0x14>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	200002d1 	.word	0x200002d1

08000e18 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <SD_CheckPower+0x14>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	200002d1 	.word	0x200002d1

08000e30 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <SD_RxDataBlock+0x58>)
 8000e3c:	22c8      	movs	r2, #200	; 0xc8
 8000e3e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000e40:	f7ff ff58 	bl	8000cf4 <SPI_RxByte>
 8000e44:	4603      	mov	r3, r0
 8000e46:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	2bff      	cmp	r3, #255	; 0xff
 8000e4c:	d103      	bne.n	8000e56 <SD_RxDataBlock+0x26>
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <SD_RxDataBlock+0x58>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f4      	bne.n	8000e40 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	2bfe      	cmp	r3, #254	; 0xfe
 8000e5a:	d001      	beq.n	8000e60 <SD_RxDataBlock+0x30>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e00f      	b.n	8000e80 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff60 	bl	8000d2c <SPI_RxBytePtr>
	} while(len--);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	1e5a      	subs	r2, r3, #1
 8000e70:	603a      	str	r2, [r7, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f4      	bne.n	8000e60 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000e76:	f7ff ff3d 	bl	8000cf4 <SPI_RxByte>
	SPI_RxByte();
 8000e7a:	f7ff ff3b 	bl	8000cf4 <SPI_RxByte>

	return TRUE;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200003de 	.word	0x200003de

08000e8c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000e9c:	f7ff ff54 	bl	8000d48 <SD_ReadyWait>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2bff      	cmp	r3, #255	; 0xff
 8000ea4:	d001      	beq.n	8000eaa <SD_TxDataBlock+0x1e>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e02f      	b.n	8000f0a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff feed 	bl	8000c8c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	2bfd      	cmp	r3, #253	; 0xfd
 8000eb6:	d020      	beq.n	8000efa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff feff 	bl	8000cc0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000ec2:	f7ff ff17 	bl	8000cf4 <SPI_RxByte>
		SPI_RxByte();
 8000ec6:	f7ff ff15 	bl	8000cf4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000eca:	e00b      	b.n	8000ee4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000ecc:	f7ff ff12 	bl	8000cf4 <SPI_RxByte>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	2b05      	cmp	r3, #5
 8000edc:	d006      	beq.n	8000eec <SD_TxDataBlock+0x60>
			i++;
 8000ede:	7bbb      	ldrb	r3, [r7, #14]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	2b40      	cmp	r3, #64	; 0x40
 8000ee8:	d9f0      	bls.n	8000ecc <SD_TxDataBlock+0x40>
 8000eea:	e000      	b.n	8000eee <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000eec:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000eee:	bf00      	nop
 8000ef0:	f7ff ff00 	bl	8000cf4 <SPI_RxByte>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0fa      	beq.n	8000ef0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	f003 031f 	and.w	r3, r3, #31
 8000f00:	2b05      	cmp	r3, #5
 8000f02:	d101      	bne.n	8000f08 <SD_TxDataBlock+0x7c>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <SD_TxDataBlock+0x7e>

	return FALSE;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	6039      	str	r1, [r7, #0]
 8000f1c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000f1e:	f7ff ff13 	bl	8000d48 <SD_ReadyWait>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2bff      	cmp	r3, #255	; 0xff
 8000f26:	d001      	beq.n	8000f2c <SD_SendCmd+0x1a>
 8000f28:	23ff      	movs	r3, #255	; 0xff
 8000f2a:	e042      	b.n	8000fb2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff feac 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	0e1b      	lsrs	r3, r3, #24
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fea6 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	0c1b      	lsrs	r3, r3, #16
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fea0 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fe9a 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fe95 	bl	8000c8c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b40      	cmp	r3, #64	; 0x40
 8000f66:	d102      	bne.n	8000f6e <SD_SendCmd+0x5c>
 8000f68:	2395      	movs	r3, #149	; 0x95
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	e007      	b.n	8000f7e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b48      	cmp	r3, #72	; 0x48
 8000f72:	d102      	bne.n	8000f7a <SD_SendCmd+0x68>
 8000f74:	2387      	movs	r3, #135	; 0x87
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e001      	b.n	8000f7e <SD_SendCmd+0x6c>
	else crc = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fe83 	bl	8000c8c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b4c      	cmp	r3, #76	; 0x4c
 8000f8a:	d101      	bne.n	8000f90 <SD_SendCmd+0x7e>
 8000f8c:	f7ff feb2 	bl	8000cf4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000f90:	230a      	movs	r3, #10
 8000f92:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000f94:	f7ff feae 	bl	8000cf4 <SPI_RxByte>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000f9c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	da05      	bge.n	8000fb0 <SD_SendCmd+0x9e>
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	73bb      	strb	r3, [r7, #14]
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f1      	bne.n	8000f94 <SD_SendCmd+0x82>

	return res;
 8000fb0:	7b7b      	ldrb	r3, [r7, #13]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SD_disk_initialize+0x14>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e0d1      	b.n	8001174 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000fd0:	4b6a      	ldr	r3, [pc, #424]	; (800117c <SD_disk_initialize+0x1c0>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <SD_disk_initialize+0x2a>
 8000fde:	4b67      	ldr	r3, [pc, #412]	; (800117c <SD_disk_initialize+0x1c0>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	e0c6      	b.n	8001174 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000fe6:	f7ff fec9 	bl	8000d7c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000fea:	f7ff fe2f 	bl	8000c4c <SELECT>

	/* check disk type */
	type = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2040      	movs	r0, #64	; 0x40
 8000ff6:	f7ff ff8c 	bl	8000f12 <SD_SendCmd>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	f040 80a1 	bne.w	8001144 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001002:	4b5f      	ldr	r3, [pc, #380]	; (8001180 <SD_disk_initialize+0x1c4>)
 8001004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001008:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800100a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800100e:	2048      	movs	r0, #72	; 0x48
 8001010:	f7ff ff7f 	bl	8000f12 <SD_SendCmd>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d155      	bne.n	80010c6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e00c      	b.n	800103a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001020:	7bfc      	ldrb	r4, [r7, #15]
 8001022:	f7ff fe67 	bl	8000cf4 <SPI_RxByte>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	f104 0310 	add.w	r3, r4, #16
 800102e:	443b      	add	r3, r7
 8001030:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	3301      	adds	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b03      	cmp	r3, #3
 800103e:	d9ef      	bls.n	8001020 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001040:	7abb      	ldrb	r3, [r7, #10]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d17e      	bne.n	8001144 <SD_disk_initialize+0x188>
 8001046:	7afb      	ldrb	r3, [r7, #11]
 8001048:	2baa      	cmp	r3, #170	; 0xaa
 800104a:	d17b      	bne.n	8001144 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800104c:	2100      	movs	r1, #0
 800104e:	2077      	movs	r0, #119	; 0x77
 8001050:	f7ff ff5f 	bl	8000f12 <SD_SendCmd>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d807      	bhi.n	800106a <SD_disk_initialize+0xae>
 800105a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800105e:	2069      	movs	r0, #105	; 0x69
 8001060:	f7ff ff57 	bl	8000f12 <SD_SendCmd>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800106a:	4b45      	ldr	r3, [pc, #276]	; (8001180 <SD_disk_initialize+0x1c4>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1ec      	bne.n	800104c <SD_disk_initialize+0x90>
 8001072:	e000      	b.n	8001076 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001074:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001076:	4b42      	ldr	r3, [pc, #264]	; (8001180 <SD_disk_initialize+0x1c4>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d062      	beq.n	8001144 <SD_disk_initialize+0x188>
 800107e:	2100      	movs	r1, #0
 8001080:	207a      	movs	r0, #122	; 0x7a
 8001082:	f7ff ff46 	bl	8000f12 <SD_SendCmd>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d15b      	bne.n	8001144 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e00c      	b.n	80010ac <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001092:	7bfc      	ldrb	r4, [r7, #15]
 8001094:	f7ff fe2e 	bl	8000cf4 <SPI_RxByte>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	f104 0310 	add.w	r3, r4, #16
 80010a0:	443b      	add	r3, r7
 80010a2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	3301      	adds	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d9ef      	bls.n	8001092 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80010b2:	7a3b      	ldrb	r3, [r7, #8]
 80010b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SD_disk_initialize+0x104>
 80010bc:	230c      	movs	r3, #12
 80010be:	e000      	b.n	80010c2 <SD_disk_initialize+0x106>
 80010c0:	2304      	movs	r3, #4
 80010c2:	73bb      	strb	r3, [r7, #14]
 80010c4:	e03e      	b.n	8001144 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80010c6:	2100      	movs	r1, #0
 80010c8:	2077      	movs	r0, #119	; 0x77
 80010ca:	f7ff ff22 	bl	8000f12 <SD_SendCmd>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d808      	bhi.n	80010e6 <SD_disk_initialize+0x12a>
 80010d4:	2100      	movs	r1, #0
 80010d6:	2069      	movs	r0, #105	; 0x69
 80010d8:	f7ff ff1b 	bl	8000f12 <SD_SendCmd>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d801      	bhi.n	80010e6 <SD_disk_initialize+0x12a>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e000      	b.n	80010e8 <SD_disk_initialize+0x12c>
 80010e6:	2301      	movs	r3, #1
 80010e8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80010ea:	7bbb      	ldrb	r3, [r7, #14]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d10e      	bne.n	800110e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80010f0:	2100      	movs	r1, #0
 80010f2:	2077      	movs	r0, #119	; 0x77
 80010f4:	f7ff ff0d 	bl	8000f12 <SD_SendCmd>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d80e      	bhi.n	800111c <SD_disk_initialize+0x160>
 80010fe:	2100      	movs	r1, #0
 8001100:	2069      	movs	r0, #105	; 0x69
 8001102:	f7ff ff06 	bl	8000f12 <SD_SendCmd>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d107      	bne.n	800111c <SD_disk_initialize+0x160>
 800110c:	e00c      	b.n	8001128 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800110e:	2100      	movs	r1, #0
 8001110:	2041      	movs	r0, #65	; 0x41
 8001112:	f7ff fefe 	bl	8000f12 <SD_SendCmd>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <SD_disk_initialize+0x1c4>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e2      	bne.n	80010ea <SD_disk_initialize+0x12e>
 8001124:	e000      	b.n	8001128 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001126:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <SD_disk_initialize+0x1c4>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d007      	beq.n	8001140 <SD_disk_initialize+0x184>
 8001130:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001134:	2050      	movs	r0, #80	; 0x50
 8001136:	f7ff feec 	bl	8000f12 <SD_SendCmd>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SD_disk_initialize+0x188>
 8001140:	2300      	movs	r3, #0
 8001142:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001144:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <SD_disk_initialize+0x1c8>)
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800114a:	f7ff fd8f 	bl	8000c6c <DESELECT>
	SPI_RxByte();
 800114e:	f7ff fdd1 	bl	8000cf4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001152:	7bbb      	ldrb	r3, [r7, #14]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d008      	beq.n	800116a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <SD_disk_initialize+0x1c0>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SD_disk_initialize+0x1c0>)
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e001      	b.n	800116e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800116a:	f7ff fe49 	bl	8000e00 <SD_PowerOff>
	}

	return Stat;
 800116e:	4b03      	ldr	r3, [pc, #12]	; (800117c <SD_disk_initialize+0x1c0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bd90      	pop	{r4, r7, pc}
 800117c:	20000000 	.word	0x20000000
 8001180:	200003de 	.word	0x200003de
 8001184:	200002d0 	.word	0x200002d0

08001188 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SD_disk_status+0x14>
 8001198:	2301      	movs	r3, #1
 800119a:	e002      	b.n	80011a2 <SD_disk_status+0x1a>
	return Stat;
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <SD_disk_status+0x28>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000000 	.word	0x20000000

080011b4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d102      	bne.n	80011d0 <SD_disk_read+0x1c>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <SD_disk_read+0x20>
 80011d0:	2304      	movs	r3, #4
 80011d2:	e051      	b.n	8001278 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <SD_disk_read+0xcc>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SD_disk_read+0x32>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e048      	b.n	8001278 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80011e6:	4b27      	ldr	r3, [pc, #156]	; (8001284 <SD_disk_read+0xd0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <SD_disk_read+0x44>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	025b      	lsls	r3, r3, #9
 80011f6:	607b      	str	r3, [r7, #4]

	SELECT();
 80011f8:	f7ff fd28 	bl	8000c4c <SELECT>

	if (count == 1)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d111      	bne.n	8001226 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	2051      	movs	r0, #81	; 0x51
 8001206:	f7ff fe84 	bl	8000f12 <SD_SendCmd>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d129      	bne.n	8001264 <SD_disk_read+0xb0>
 8001210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001214:	68b8      	ldr	r0, [r7, #8]
 8001216:	f7ff fe0b 	bl	8000e30 <SD_RxDataBlock>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d021      	beq.n	8001264 <SD_disk_read+0xb0>
 8001220:	2300      	movs	r3, #0
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	e01e      	b.n	8001264 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	2052      	movs	r0, #82	; 0x52
 800122a:	f7ff fe72 	bl	8000f12 <SD_SendCmd>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d117      	bne.n	8001264 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001234:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001238:	68b8      	ldr	r0, [r7, #8]
 800123a:	f7ff fdf9 	bl	8000e30 <SD_RxDataBlock>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00a      	beq.n	800125a <SD_disk_read+0xa6>
				buff += 512;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800124a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	3b01      	subs	r3, #1
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1ed      	bne.n	8001234 <SD_disk_read+0x80>
 8001258:	e000      	b.n	800125c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800125a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800125c:	2100      	movs	r1, #0
 800125e:	204c      	movs	r0, #76	; 0x4c
 8001260:	f7ff fe57 	bl	8000f12 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001264:	f7ff fd02 	bl	8000c6c <DESELECT>
	SPI_RxByte();
 8001268:	f7ff fd44 	bl	8000cf4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	bf14      	ite	ne
 8001272:	2301      	movne	r3, #1
 8001274:	2300      	moveq	r3, #0
 8001276:	b2db      	uxtb	r3, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000000 	.word	0x20000000
 8001284:	200002d0 	.word	0x200002d0

08001288 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <SD_disk_write+0x1c>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <SD_disk_write+0x20>
 80012a4:	2304      	movs	r3, #4
 80012a6:	e06b      	b.n	8001380 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012a8:	4b37      	ldr	r3, [pc, #220]	; (8001388 <SD_disk_write+0x100>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SD_disk_write+0x32>
 80012b6:	2303      	movs	r3, #3
 80012b8:	e062      	b.n	8001380 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80012ba:	4b33      	ldr	r3, [pc, #204]	; (8001388 <SD_disk_write+0x100>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SD_disk_write+0x44>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e059      	b.n	8001380 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <SD_disk_write+0x104>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <SD_disk_write+0x56>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	025b      	lsls	r3, r3, #9
 80012dc:	607b      	str	r3, [r7, #4]

	SELECT();
 80012de:	f7ff fcb5 	bl	8000c4c <SELECT>

	if (count == 1)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d110      	bne.n	800130a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	2058      	movs	r0, #88	; 0x58
 80012ec:	f7ff fe11 	bl	8000f12 <SD_SendCmd>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d13a      	bne.n	800136c <SD_disk_write+0xe4>
 80012f6:	21fe      	movs	r1, #254	; 0xfe
 80012f8:	68b8      	ldr	r0, [r7, #8]
 80012fa:	f7ff fdc7 	bl	8000e8c <SD_TxDataBlock>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d033      	beq.n	800136c <SD_disk_write+0xe4>
			count = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	e030      	b.n	800136c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <SD_disk_write+0x104>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001316:	2100      	movs	r1, #0
 8001318:	2077      	movs	r0, #119	; 0x77
 800131a:	f7ff fdfa 	bl	8000f12 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	2057      	movs	r0, #87	; 0x57
 8001322:	f7ff fdf6 	bl	8000f12 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	2059      	movs	r0, #89	; 0x59
 800132a:	f7ff fdf2 	bl	8000f12 <SD_SendCmd>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d11b      	bne.n	800136c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001334:	21fc      	movs	r1, #252	; 0xfc
 8001336:	68b8      	ldr	r0, [r7, #8]
 8001338:	f7ff fda8 	bl	8000e8c <SD_TxDataBlock>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00a      	beq.n	8001358 <SD_disk_write+0xd0>
				buff += 512;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001348:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1ee      	bne.n	8001334 <SD_disk_write+0xac>
 8001356:	e000      	b.n	800135a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001358:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800135a:	21fd      	movs	r1, #253	; 0xfd
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff fd95 	bl	8000e8c <SD_TxDataBlock>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <SD_disk_write+0xe4>
			{
				count = 1;
 8001368:	2301      	movs	r3, #1
 800136a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800136c:	f7ff fc7e 	bl	8000c6c <DESELECT>
	SPI_RxByte();
 8001370:	f7ff fcc0 	bl	8000cf4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf14      	ite	ne
 800137a:	2301      	movne	r3, #1
 800137c:	2300      	moveq	r3, #0
 800137e:	b2db      	uxtb	r3, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000000 	.word	0x20000000
 800138c:	200002d0 	.word	0x200002d0

08001390 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b08b      	sub	sp, #44	; 0x2c
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	603a      	str	r2, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	460b      	mov	r3, r1
 800139e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SD_disk_ioctl+0x1e>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e115      	b.n	80015da <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	d124      	bne.n	8001404 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d012      	beq.n	80013e8 <SD_disk_ioctl+0x58>
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	dc1a      	bgt.n	80013fc <SD_disk_ioctl+0x6c>
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <SD_disk_ioctl+0x40>
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d006      	beq.n	80013dc <SD_disk_ioctl+0x4c>
 80013ce:	e015      	b.n	80013fc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80013d0:	f7ff fd16 	bl	8000e00 <SD_PowerOff>
			res = RES_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013da:	e0fc      	b.n	80015d6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80013dc:	f7ff fcce 	bl	8000d7c <SD_PowerOn>
			res = RES_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013e6:	e0f6      	b.n	80015d6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	1c5c      	adds	r4, r3, #1
 80013ec:	f7ff fd14 	bl	8000e18 <SD_CheckPower>
 80013f0:	4603      	mov	r3, r0
 80013f2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013fa:	e0ec      	b.n	80015d6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80013fc:	2304      	movs	r3, #4
 80013fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001402:	e0e8      	b.n	80015d6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001404:	4b77      	ldr	r3, [pc, #476]	; (80015e4 <SD_disk_ioctl+0x254>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SD_disk_ioctl+0x86>
 8001412:	2303      	movs	r3, #3
 8001414:	e0e1      	b.n	80015da <SD_disk_ioctl+0x24a>

		SELECT();
 8001416:	f7ff fc19 	bl	8000c4c <SELECT>

		switch (ctrl)
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	2b0d      	cmp	r3, #13
 800141e:	f200 80cb 	bhi.w	80015b8 <SD_disk_ioctl+0x228>
 8001422:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <SD_disk_ioctl+0x98>)
 8001424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001428:	08001523 	.word	0x08001523
 800142c:	08001461 	.word	0x08001461
 8001430:	08001513 	.word	0x08001513
 8001434:	080015b9 	.word	0x080015b9
 8001438:	080015b9 	.word	0x080015b9
 800143c:	080015b9 	.word	0x080015b9
 8001440:	080015b9 	.word	0x080015b9
 8001444:	080015b9 	.word	0x080015b9
 8001448:	080015b9 	.word	0x080015b9
 800144c:	080015b9 	.word	0x080015b9
 8001450:	080015b9 	.word	0x080015b9
 8001454:	08001535 	.word	0x08001535
 8001458:	08001559 	.word	0x08001559
 800145c:	0800157d 	.word	0x0800157d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001460:	2100      	movs	r1, #0
 8001462:	2049      	movs	r0, #73	; 0x49
 8001464:	f7ff fd55 	bl	8000f12 <SD_SendCmd>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	f040 80a8 	bne.w	80015c0 <SD_disk_ioctl+0x230>
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	2110      	movs	r1, #16
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fcda 	bl	8000e30 <SD_RxDataBlock>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 809e 	beq.w	80015c0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	099b      	lsrs	r3, r3, #6
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d10e      	bne.n	80014ac <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800148e:	7d7b      	ldrb	r3, [r7, #21]
 8001490:	b29a      	uxth	r2, r3
 8001492:	7d3b      	ldrb	r3, [r7, #20]
 8001494:	b29b      	uxth	r3, r3
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	4413      	add	r3, r2
 800149c:	b29b      	uxth	r3, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80014a2:	8bfb      	ldrh	r3, [r7, #30]
 80014a4:	029a      	lsls	r2, r3, #10
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	e02e      	b.n	800150a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80014ac:	7c7b      	ldrb	r3, [r7, #17]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	7dbb      	ldrb	r3, [r7, #22]
 80014b6:	09db      	lsrs	r3, r3, #7
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	7d7b      	ldrb	r3, [r7, #21]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f003 0306 	and.w	r3, r3, #6
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	3302      	adds	r3, #2
 80014d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80014d4:	7d3b      	ldrb	r3, [r7, #20]
 80014d6:	099b      	lsrs	r3, r3, #6
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	b29a      	uxth	r2, r3
 80014dc:	7cfb      	ldrb	r3, [r7, #19]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	7cbb      	ldrb	r3, [r7, #18]
 80014ea:	029b      	lsls	r3, r3, #10
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	4413      	add	r3, r2
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80014fc:	8bfa      	ldrh	r2, [r7, #30]
 80014fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001502:	3b09      	subs	r3, #9
 8001504:	409a      	lsls	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001510:	e056      	b.n	80015c0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001518:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001520:	e055      	b.n	80015ce <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001522:	f7ff fc11 	bl	8000d48 <SD_ReadyWait>
 8001526:	4603      	mov	r3, r0
 8001528:	2bff      	cmp	r3, #255	; 0xff
 800152a:	d14b      	bne.n	80015c4 <SD_disk_ioctl+0x234>
 800152c:	2300      	movs	r3, #0
 800152e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001532:	e047      	b.n	80015c4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001534:	2100      	movs	r1, #0
 8001536:	2049      	movs	r0, #73	; 0x49
 8001538:	f7ff fceb 	bl	8000f12 <SD_SendCmd>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d142      	bne.n	80015c8 <SD_disk_ioctl+0x238>
 8001542:	2110      	movs	r1, #16
 8001544:	6a38      	ldr	r0, [r7, #32]
 8001546:	f7ff fc73 	bl	8000e30 <SD_RxDataBlock>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d03b      	beq.n	80015c8 <SD_disk_ioctl+0x238>
 8001550:	2300      	movs	r3, #0
 8001552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001556:	e037      	b.n	80015c8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001558:	2100      	movs	r1, #0
 800155a:	204a      	movs	r0, #74	; 0x4a
 800155c:	f7ff fcd9 	bl	8000f12 <SD_SendCmd>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d132      	bne.n	80015cc <SD_disk_ioctl+0x23c>
 8001566:	2110      	movs	r1, #16
 8001568:	6a38      	ldr	r0, [r7, #32]
 800156a:	f7ff fc61 	bl	8000e30 <SD_RxDataBlock>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d02b      	beq.n	80015cc <SD_disk_ioctl+0x23c>
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800157a:	e027      	b.n	80015cc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800157c:	2100      	movs	r1, #0
 800157e:	207a      	movs	r0, #122	; 0x7a
 8001580:	f7ff fcc7 	bl	8000f12 <SD_SendCmd>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d116      	bne.n	80015b8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800158a:	2300      	movs	r3, #0
 800158c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001590:	e00b      	b.n	80015aa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001592:	6a3c      	ldr	r4, [r7, #32]
 8001594:	1c63      	adds	r3, r4, #1
 8001596:	623b      	str	r3, [r7, #32]
 8001598:	f7ff fbac 	bl	8000cf4 <SPI_RxByte>
 800159c:	4603      	mov	r3, r0
 800159e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80015a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015a4:	3301      	adds	r3, #1
 80015a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d9ef      	bls.n	8001592 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80015b8:	2304      	movs	r3, #4
 80015ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015be:	e006      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015c0:	bf00      	nop
 80015c2:	e004      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015c4:	bf00      	nop
 80015c6:	e002      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015c8:	bf00      	nop
 80015ca:	e000      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015cc:	bf00      	nop
		}

		DESELECT();
 80015ce:	f7ff fb4d 	bl	8000c6c <DESELECT>
		SPI_RxByte();
 80015d2:	f7ff fb8f 	bl	8000cf4 <SPI_RxByte>
	}

	return res;
 80015d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015da:	4618      	mov	r0, r3
 80015dc:	372c      	adds	r7, #44	; 0x2c
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd90      	pop	{r4, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000000 	.word	0x20000000

080015e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	; 0x30
 80015ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fe:	4b4f      	ldr	r3, [pc, #316]	; (800173c <MX_GPIO_Init+0x154>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a4e      	ldr	r2, [pc, #312]	; (800173c <MX_GPIO_Init+0x154>)
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b4c      	ldr	r3, [pc, #304]	; (800173c <MX_GPIO_Init+0x154>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b49      	ldr	r3, [pc, #292]	; (800173c <MX_GPIO_Init+0x154>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a48      	ldr	r2, [pc, #288]	; (800173c <MX_GPIO_Init+0x154>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b46      	ldr	r3, [pc, #280]	; (800173c <MX_GPIO_Init+0x154>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800162e:	4b43      	ldr	r3, [pc, #268]	; (800173c <MX_GPIO_Init+0x154>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a42      	ldr	r2, [pc, #264]	; (800173c <MX_GPIO_Init+0x154>)
 8001634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b40      	ldr	r3, [pc, #256]	; (800173c <MX_GPIO_Init+0x154>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	4b3d      	ldr	r3, [pc, #244]	; (800173c <MX_GPIO_Init+0x154>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a3c      	ldr	r2, [pc, #240]	; (800173c <MX_GPIO_Init+0x154>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b3a      	ldr	r3, [pc, #232]	; (800173c <MX_GPIO_Init+0x154>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <MX_GPIO_Init+0x154>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a36      	ldr	r2, [pc, #216]	; (800173c <MX_GPIO_Init+0x154>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b34      	ldr	r3, [pc, #208]	; (800173c <MX_GPIO_Init+0x154>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <MX_GPIO_Init+0x154>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a30      	ldr	r2, [pc, #192]	; (800173c <MX_GPIO_Init+0x154>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <MX_GPIO_Init+0x154>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2110      	movs	r1, #16
 8001692:	482b      	ldr	r0, [pc, #172]	; (8001740 <MX_GPIO_Init+0x158>)
 8001694:	f002 f85a 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f244 0181 	movw	r1, #16513	; 0x4081
 800169e:	4829      	ldr	r0, [pc, #164]	; (8001744 <MX_GPIO_Init+0x15c>)
 80016a0:	f002 f854 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016aa:	4827      	ldr	r0, [pc, #156]	; (8001748 <MX_GPIO_Init+0x160>)
 80016ac:	f002 f84e 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80016b0:	2310      	movs	r3, #16
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	481e      	ldr	r0, [pc, #120]	; (8001740 <MX_GPIO_Init+0x158>)
 80016c8:	f001 fe94 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4619      	mov	r1, r3
 80016e2:	481a      	ldr	r0, [pc, #104]	; (800174c <MX_GPIO_Init+0x164>)
 80016e4:	f001 fe86 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80016e8:	f244 0381 	movw	r3, #16513	; 0x4081
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	4810      	ldr	r0, [pc, #64]	; (8001744 <MX_GPIO_Init+0x15c>)
 8001702:	f001 fe77 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001706:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800170a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170c:	2301      	movs	r3, #1
 800170e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	4619      	mov	r1, r3
 800171e:	480a      	ldr	r0, [pc, #40]	; (8001748 <MX_GPIO_Init+0x160>)
 8001720:	f001 fe68 	bl	80033f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2028      	movs	r0, #40	; 0x28
 800172a:	f001 fab0 	bl	8002c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800172e:	2028      	movs	r0, #40	; 0x28
 8001730:	f001 fac9 	bl	8002cc6 <HAL_NVIC_EnableIRQ>

}
 8001734:	bf00      	nop
 8001736:	3730      	adds	r7, #48	; 0x30
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	40021000 	.word	0x40021000
 8001744:	40020400 	.word	0x40020400
 8001748:	40020c00 	.word	0x40020c00
 800174c:	40020800 	.word	0x40020800

08001750 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */
float volts = 0;
int butPressed = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001760:	d102      	bne.n	8001768 <HAL_GPIO_EXTI_Callback+0x18>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		send_UART("{to:'Log',from:'Mst',reci:'headerValsCsv',dir:'g',rc:''}\r");
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		*/

		butPressed = 1;
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <HAL_GPIO_EXTI_Callback+0x24>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]
	}
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	200002d4 	.word	0x200002d4

08001778 <isButPressed>:

int isButPressed()
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
	return butPressed;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <isButPressed+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	200002d4 	.word	0x200002d4

08001790 <butClear>:

void butClear()
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
	butPressed = 0;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <butClear+0x14>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	200002d4 	.word	0x200002d4

080017a8 <Build_MSG>:
float T_PT100 = 24.7898; //Temperature provided by PT100
float T_STM = -8.45234;//Temperature provided by STM



void Build_MSG(){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af08      	add	r7, sp, #32
	//builds the Message that will be sent from the STM(Master) to the Arduino(Slave)
	sprintf(MSG, "{T1:%.2f;T2:%.2f;B1:%.1f;B2:%.1f;B3:%.1f}",T_PT100, T_STM, B1, B2, B3);
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <Build_MSG+0x5c>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <Build_MSG+0x60>)
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <Build_MSG+0x64>)
 80017c4:	edd3 6a00 	vldr	s13, [r3]
 80017c8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <Build_MSG+0x68>)
 80017ce:	edd3 5a00 	vldr	s11, [r3]
 80017d2:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <Build_MSG+0x6c>)
 80017d8:	edd3 4a00 	vldr	s9, [r3]
 80017dc:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80017e0:	ed8d 4b06 	vstr	d4, [sp, #24]
 80017e4:	ed8d 5b04 	vstr	d5, [sp, #16]
 80017e8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80017ec:	ed8d 7b00 	vstr	d7, [sp]
 80017f0:	ec53 2b13 	vmov	r2, r3, d3
 80017f4:	4908      	ldr	r1, [pc, #32]	; (8001818 <Build_MSG+0x70>)
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <Build_MSG+0x74>)
 80017f8:	f006 fdd4 	bl	80083a4 <siprintf>
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000010 	.word	0x20000010
 8001808:	20000014 	.word	0x20000014
 800180c:	20000004 	.word	0x20000004
 8001810:	20000008 	.word	0x20000008
 8001814:	2000000c 	.word	0x2000000c
 8001818:	0800be18 	.word	0x0800be18
 800181c:	200002e4 	.word	0x200002e4

08001820 <Send_MSG>:

void Send_MSG(){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
	//Send Message from STM(Master) to Arduino(Slave) using SPI4

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET); // CS Low => initiate communication between Master and Slave
 8001826:	2200      	movs	r2, #0
 8001828:	2110      	movs	r1, #16
 800182a:	4813      	ldr	r0, [pc, #76]	; (8001878 <Send_MSG+0x58>)
 800182c:	f001 ff8e 	bl	800374c <HAL_GPIO_WritePin>
	int i = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]

	for(i=0;i<strlen(MSG);i++){
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	e00d      	b.n	8001856 <Send_MSG+0x36>
		char dataSend = MSG[i];
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <Send_MSG+0x5c>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	70fb      	strb	r3, [r7, #3]
		HAL_SPI_Transmit(&hspi4, (uint8_t*)&dataSend, 1,100); //send byte by byte
 8001844:	1cf9      	adds	r1, r7, #3
 8001846:	2364      	movs	r3, #100	; 0x64
 8001848:	2201      	movs	r2, #1
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <Send_MSG+0x60>)
 800184c:	f003 f96f 	bl	8004b2e <HAL_SPI_Transmit>
	for(i=0;i<strlen(MSG);i++){
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3301      	adds	r3, #1
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4809      	ldr	r0, [pc, #36]	; (800187c <Send_MSG+0x5c>)
 8001858:	f7fe fcf2 	bl	8000240 <strlen>
 800185c:	4602      	mov	r2, r0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8ea      	bhi.n	800183a <Send_MSG+0x1a>
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); // CS High => End communication
 8001864:	2201      	movs	r2, #1
 8001866:	2110      	movs	r1, #16
 8001868:	4803      	ldr	r0, [pc, #12]	; (8001878 <Send_MSG+0x58>)
 800186a:	f001 ff6f 	bl	800374c <HAL_GPIO_WritePin>

}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	200002e4 	.word	0x200002e4
 8001880:	20000378 	.word	0x20000378
 8001884:	00000000 	.word	0x00000000

08001888 <print_adc>:

void print_adc()
{
 8001888:	b580      	push	{r7, lr}
 800188a:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 800188e:	af08      	add	r7, sp, #32
	char message[1024];
	sprintf((char*) message, "%d, %.2fV, %.2fV, %.2fV, %.2fV", ADC_results[0],
 8001890:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <print_adc+0xc0>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
			ADC_results[1]*3.33/4096, ADC_results[2]*3.33/4096,
 8001896:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <print_adc+0xc0>)
 8001898:	885b      	ldrh	r3, [r3, #2]
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018a2:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8001938 <print_adc+0xb0>
 80018a6:	ee27 6b06 	vmul.f64	d6, d7, d6
	sprintf((char*) message, "%d, %.2fV, %.2fV, %.2fV, %.2fV", ADC_results[0],
 80018aa:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8001940 <print_adc+0xb8>
 80018ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
			ADC_results[1]*3.33/4096, ADC_results[2]*3.33/4096,
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <print_adc+0xc0>)
 80018b4:	889b      	ldrh	r3, [r3, #4]
 80018b6:	ee06 3a90 	vmov	s13, r3
 80018ba:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80018be:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8001938 <print_adc+0xb0>
 80018c2:	ee26 5b05 	vmul.f64	d5, d6, d5
	sprintf((char*) message, "%d, %.2fV, %.2fV, %.2fV, %.2fV", ADC_results[0],
 80018c6:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8001940 <print_adc+0xb8>
 80018ca:	ee85 6b04 	vdiv.f64	d6, d5, d4
			ADC_results[3]*3.33/4096, ADC_results[4]*3.33/4096);
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <print_adc+0xc0>)
 80018d0:	88db      	ldrh	r3, [r3, #6]
 80018d2:	ee05 3a90 	vmov	s11, r3
 80018d6:	eeb8 5be5 	vcvt.f64.s32	d5, s11
 80018da:	ed9f 4b17 	vldr	d4, [pc, #92]	; 8001938 <print_adc+0xb0>
 80018de:	ee25 4b04 	vmul.f64	d4, d5, d4
	sprintf((char*) message, "%d, %.2fV, %.2fV, %.2fV, %.2fV", ADC_results[0],
 80018e2:	ed9f 3b17 	vldr	d3, [pc, #92]	; 8001940 <print_adc+0xb8>
 80018e6:	ee84 5b03 	vdiv.f64	d5, d4, d3
			ADC_results[3]*3.33/4096, ADC_results[4]*3.33/4096);
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <print_adc+0xc0>)
 80018ec:	891b      	ldrh	r3, [r3, #8]
 80018ee:	ee04 3a90 	vmov	s9, r3
 80018f2:	eeb8 4be4 	vcvt.f64.s32	d4, s9
 80018f6:	ed9f 3b10 	vldr	d3, [pc, #64]	; 8001938 <print_adc+0xb0>
 80018fa:	ee24 3b03 	vmul.f64	d3, d4, d3
	sprintf((char*) message, "%d, %.2fV, %.2fV, %.2fV, %.2fV", ADC_results[0],
 80018fe:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8001940 <print_adc+0xb8>
 8001902:	ee83 4b02 	vdiv.f64	d4, d3, d2
 8001906:	463b      	mov	r3, r7
 8001908:	ed8d 4b06 	vstr	d4, [sp, #24]
 800190c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001910:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001914:	ed8d 7b00 	vstr	d7, [sp]
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <print_adc+0xc4>)
 800191a:	4618      	mov	r0, r3
 800191c:	f006 fd42 	bl	80083a4 <siprintf>
	send_UART(message);
 8001920:	463b      	mov	r3, r7
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fcbc 	bl	80022a0 <send_UART>
}
 8001928:	bf00      	nop
 800192a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	f3af 8000 	nop.w
 8001938:	0a3d70a4 	.word	0x0a3d70a4
 800193c:	400aa3d7 	.word	0x400aa3d7
 8001940:	00000000 	.word	0x00000000
 8001944:	40b00000 	.word	0x40b00000
 8001948:	200002d8 	.word	0x200002d8
 800194c:	0800be44 	.word	0x0800be44

08001950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); //CS of SPI4 High => No communication between STM and Arduino
 8001958:	2201      	movs	r2, #1
 800195a:	2110      	movs	r1, #16
 800195c:	4820      	ldr	r0, [pc, #128]	; (80019e0 <main+0x90>)
 800195e:	f001 fef5 	bl	800374c <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001962:	f000 fda4 	bl	80024ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001966:	f000 f843 	bl	80019f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196a:	f7ff fe3d 	bl	80015e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800196e:	f7ff f94f 	bl	8000c10 <MX_DMA_Init>
  MX_FATFS_Init();
 8001972:	f005 fdd1 	bl	8007518 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8001976:	f000 fbb3 	bl	80020e0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800197a:	f7ff f82f 	bl	80009dc <MX_ADC1_Init>
  MX_TIM1_Init();
 800197e:	f000 fb1b 	bl	8001fb8 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001982:	f000 f8a3 	bl	8001acc <MX_SPI1_Init>
  MX_SPI4_Init();
 8001986:	f000 f8df 	bl	8001b48 <MX_SPI4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
	{
		if(has_message_from_UART())
 800198a:	f000 fc59 	bl	8002240 <has_message_from_UART>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d016      	beq.n	80019c2 <main+0x72>
		{
		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 8001994:	463b      	mov	r3, r7
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fcac 	bl	80022f4 <read_UART>

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800199c:	2101      	movs	r1, #1
 800199e:	4811      	ldr	r0, [pc, #68]	; (80019e4 <main+0x94>)
 80019a0:	f001 feed 	bl	800377e <HAL_GPIO_TogglePin>

		  send_UART((char*) message);
 80019a4:	463b      	mov	r3, r7
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fc7a 	bl	80022a0 <send_UART>

		  while(is_transmitting_to_UART());
 80019ac:	bf00      	nop
 80019ae:	f000 fc53 	bl	8002258 <is_transmitting_to_UART>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1fa      	bne.n	80019ae <main+0x5e>

		  reset_UART();
 80019b8:	f000 fc5a 	bl	8002270 <reset_UART>
		  send_UART(PROMPT);
 80019bc:	480a      	ldr	r0, [pc, #40]	; (80019e8 <main+0x98>)
 80019be:	f000 fc6f 	bl	80022a0 <send_UART>
		}

		if(isButPressed())
 80019c2:	f7ff fed9 	bl	8001778 <isButPressed>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0de      	beq.n	800198a <main+0x3a>
		{
			butClear();
 80019cc:	f7ff fee0 	bl	8001790 <butClear>
			send_UART("Button pressed");
 80019d0:	4806      	ldr	r0, [pc, #24]	; (80019ec <main+0x9c>)
 80019d2:	f000 fc65 	bl	80022a0 <send_UART>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <main+0x94>)
 80019da:	f001 fed0 	bl	800377e <HAL_GPIO_TogglePin>
		if(has_message_from_UART())
 80019de:	e7d4      	b.n	800198a <main+0x3a>
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40020400 	.word	0x40020400
 80019e8:	0800be64 	.word	0x0800be64
 80019ec:	0800be68 	.word	0x0800be68

080019f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b094      	sub	sp, #80	; 0x50
 80019f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	2234      	movs	r2, #52	; 0x34
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f005 fe78 	bl	80076f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a04:	f107 0308 	add.w	r3, r7, #8
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <SystemClock_Config+0xc8>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	4a27      	ldr	r2, [pc, #156]	; (8001ab8 <SystemClock_Config+0xc8>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <SystemClock_Config+0xc8>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a2c:	4b23      	ldr	r3, [pc, #140]	; (8001abc <SystemClock_Config+0xcc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a34:	4a21      	ldr	r2, [pc, #132]	; (8001abc <SystemClock_Config+0xcc>)
 8001a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <SystemClock_Config+0xcc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a50:	2310      	movs	r3, #16
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a54:	2302      	movs	r3, #2
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001a60:	2360      	movs	r3, #96	; 0x60
 8001a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001a64:	2306      	movs	r3, #6
 8001a66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a68:	2307      	movs	r3, #7
 8001a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 feb5 	bl	80037e4 <HAL_RCC_OscConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a80:	f000 f81e 	bl	8001ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a84:	230f      	movs	r3, #15
 8001a86:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 f94e 	bl	8003d40 <HAL_RCC_ClockConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001aaa:	f000 f809 	bl	8001ac0 <Error_Handler>
  }
}
 8001aae:	bf00      	nop
 8001ab0:	3750      	adds	r7, #80	; 0x50
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000

08001ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac4:	b672      	cpsid	i
}
 8001ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <Error_Handler+0x8>
	...

08001acc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <MX_SPI1_Init+0x78>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001ae6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001aea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b1a:	2207      	movs	r2, #7
 8001b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b26:	2208      	movs	r2, #8
 8001b28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_SPI1_Init+0x74>)
 8001b2c:	f002 ff54 	bl	80049d8 <HAL_SPI_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b36:	f7ff ffc3 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000314 	.word	0x20000314
 8001b44:	40013000 	.word	0x40013000

08001b48 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b4e:	4a1c      	ldr	r2, [pc, #112]	; (8001bc0 <MX_SPI4_Init+0x78>)
 8001b50:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b58:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b66:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b68:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b7e:	2208      	movs	r2, #8
 8001b80:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b96:	2207      	movs	r2, #7
 8001b98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_SPI4_Init+0x74>)
 8001ba8:	f002 ff16 	bl	80049d8 <HAL_SPI_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001bb2:	f7ff ff85 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000378 	.word	0x20000378
 8001bc0:	40013400 	.word	0x40013400

08001bc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a2e      	ldr	r2, [pc, #184]	; (8001c9c <HAL_SPI_MspInit+0xd8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d128      	bne.n	8001c38 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001be6:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a27      	ldr	r2, [pc, #156]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c16:	23e0      	movs	r3, #224	; 0xe0
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c26:	2305      	movs	r3, #5
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	481c      	ldr	r0, [pc, #112]	; (8001ca4 <HAL_SPI_MspInit+0xe0>)
 8001c32:	f001 fbdf 	bl	80033f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001c36:	e02c      	b.n	8001c92 <HAL_SPI_MspInit+0xce>
  else if(spiHandle->Instance==SPI4)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1a      	ldr	r2, [pc, #104]	; (8001ca8 <HAL_SPI_MspInit+0xe4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d127      	bne.n	8001c92 <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a16      	ldr	r2, [pc, #88]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c60:	f043 0310 	orr.w	r3, r3, #16
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_SPI_MspInit+0xdc>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c72:	2364      	movs	r3, #100	; 0x64
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c82:	2305      	movs	r3, #5
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c86:	f107 031c 	add.w	r3, r7, #28
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <HAL_SPI_MspInit+0xe8>)
 8001c8e:	f001 fbb1 	bl	80033f4 <HAL_GPIO_Init>
}
 8001c92:	bf00      	nop
 8001c94:	3730      	adds	r7, #48	; 0x30
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40013000 	.word	0x40013000
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40013400 	.word	0x40013400
 8001cac:	40021000 	.word	0x40021000

08001cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <SDTimer_Handler>:

volatile uint8_t FatFSCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <SDTimer_Handler+0x40>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <SDTimer_Handler+0x1c>
		Timer1--;
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <SDTimer_Handler+0x40>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <SDTimer_Handler+0x40>)
 8001d12:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <SDTimer_Handler+0x44>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <SDTimer_Handler+0x34>
		Timer2--;
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <SDTimer_Handler+0x44>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <SDTimer_Handler+0x44>)
 8001d2a:	801a      	strh	r2, [r3, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	200003de 	.word	0x200003de
 8001d3c:	200003e0 	.word	0x200003e0

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <NMI_Handler+0x4>

08001d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <MemManage_Handler+0x4>

08001d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFSCnt++;
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <SysTick_Handler+0x30>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	3301      	adds	r3, #1
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <SysTick_Handler+0x30>)
 8001d98:	701a      	strb	r2, [r3, #0]
	if(FatFSCnt >= 10)
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <SysTick_Handler+0x30>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b09      	cmp	r3, #9
 8001da2:	d904      	bls.n	8001dae <SysTick_Handler+0x26>
	{
		FatFSCnt = 0;
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <SysTick_Handler+0x30>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001daa:	f7ff ffa5 	bl	8001cf8 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dae:	f000 fbbb 	bl	8002528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200003dc 	.word	0x200003dc

08001dbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001dc2:	f003 fc14 	bl	80055ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200003e8 	.word	0x200003e8

08001dd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <USART3_IRQHandler+0x10>)
 8001dd6:	f004 f8f1 	bl	8005fbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000840 	.word	0x20000840

08001de4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001de8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001dec:	f001 fce2 	bl	80037b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <DMA2_Stream0_IRQHandler+0x10>)
 8001dfa:	f001 f8bf 	bl	8002f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000270 	.word	0x20000270

08001e08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return 1;
 8001e0c:	2301      	movs	r3, #1
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <_kill>:

int _kill(int pid, int sig)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e22:	f005 fc3d 	bl	80076a0 <__errno>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2216      	movs	r2, #22
 8001e2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_exit>:

void _exit (int status)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ffe7 	bl	8001e18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e4a:	e7fe      	b.n	8001e4a <_exit+0x12>

08001e4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	e00a      	b.n	8001e74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e5e:	f3af 8000 	nop.w
 8001e62:	4601      	mov	r1, r0
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	60ba      	str	r2, [r7, #8]
 8001e6a:	b2ca      	uxtb	r2, r1
 8001e6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	dbf0      	blt.n	8001e5e <_read+0x12>
  }

  return len;
 8001e7c:	687b      	ldr	r3, [r7, #4]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e009      	b.n	8001eac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	60ba      	str	r2, [r7, #8]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	dbf1      	blt.n	8001e98 <_write+0x12>
  }
  return len;
 8001eb4:	687b      	ldr	r3, [r7, #4]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_close>:

int _close(int file)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <_isatty>:

int _isatty(int file)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f30:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <_sbrk+0x5c>)
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <_sbrk+0x60>)
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <_sbrk+0x64>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <_sbrk+0x68>)
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d207      	bcs.n	8001f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f58:	f005 fba2 	bl	80076a0 <__errno>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	220c      	movs	r2, #12
 8001f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	e009      	b.n	8001f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <_sbrk+0x64>)
 8001f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20080000 	.word	0x20080000
 8001f88:	00000400 	.word	0x00000400
 8001f8c:	200003e4 	.word	0x200003e4
 8001f90:	200008f0 	.word	0x200008f0

08001f94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <SystemInit+0x20>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9e:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <SystemInit+0x20>)
 8001fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fbe:	f107 0310 	add.w	r3, r7, #16
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <MX_TIM1_Init+0xa0>)
 8001fd8:	4a20      	ldr	r2, [pc, #128]	; (800205c <MX_TIM1_Init+0xa4>)
 8001fda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600-1;
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <MX_TIM1_Init+0xa0>)
 8001fde:	f240 623f 	movw	r2, #1599	; 0x63f
 8001fe2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe4:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <MX_TIM1_Init+0xa0>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001fea:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <MX_TIM1_Init+0xa0>)
 8001fec:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001ff0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <MX_TIM1_Init+0xa0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ff8:	4b17      	ldr	r3, [pc, #92]	; (8002058 <MX_TIM1_Init+0xa0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <MX_TIM1_Init+0xa0>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002004:	4814      	ldr	r0, [pc, #80]	; (8002058 <MX_TIM1_Init+0xa0>)
 8002006:	f003 fa9b 	bl	8005540 <HAL_TIM_Base_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002010:	f7ff fd56 	bl	8001ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002018:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800201a:	f107 0310 	add.w	r3, r7, #16
 800201e:	4619      	mov	r1, r3
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <MX_TIM1_Init+0xa0>)
 8002022:	f003 fc03 	bl	800582c <HAL_TIM_ConfigClockSource>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800202c:	f7ff fd48 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002030:	2320      	movs	r3, #32
 8002032:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	4619      	mov	r1, r3
 8002040:	4805      	ldr	r0, [pc, #20]	; (8002058 <MX_TIM1_Init+0xa0>)
 8002042:	f003 fe1f 	bl	8005c84 <HAL_TIMEx_MasterConfigSynchronization>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800204c:	f7ff fd38 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	3720      	adds	r7, #32
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	200003e8 	.word	0x200003e8
 800205c:	40010000 	.word	0x40010000

08002060 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_TIM_Base_MspInit+0x44>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d113      	bne.n	800209a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <HAL_TIM_Base_MspInit+0x48>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <HAL_TIM_Base_MspInit+0x48>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_TIM_Base_MspInit+0x48>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	2019      	movs	r0, #25
 8002090:	f000 fdfd 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002094:	2019      	movs	r0, #25
 8002096:	f000 fe16 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40023800 	.word	0x40023800

080020ac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 1 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	//This function will be executed when the Timer reaches 3s

	if(htim == &htim1){
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d109      	bne.n	80020d0 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80020bc:	2101      	movs	r1, #1
 80020be:	4807      	ldr	r0, [pc, #28]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80020c0:	f001 fb5d 	bl	800377e <HAL_GPIO_TogglePin>
		print_adc();
 80020c4:	f7ff fbe0 	bl	8001888 <print_adc>
		Build_MSG(); //build Message before sending
 80020c8:	f7ff fb6e 	bl	80017a8 <Build_MSG>
		Send_MSG(); //Send Message to Slave(Arduino)
 80020cc:	f7ff fba8 	bl	8001820 <Send_MSG>
	}
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200003e8 	.word	0x200003e8
 80020dc:	40020400 	.word	0x40020400

080020e0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <MX_USART3_UART_Init+0x74>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 80020ea:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <MX_USART3_UART_Init+0x78>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <MX_USART3_UART_Init+0x7c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <MX_USART3_UART_Init+0x80>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <MX_USART3_UART_Init+0x84>)
 80020fe:	220d      	movs	r2, #13
 8002100:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002102:	4b19      	ldr	r3, [pc, #100]	; (8002168 <MX_USART3_UART_Init+0x88>)
 8002104:	4a19      	ldr	r2, [pc, #100]	; (800216c <MX_USART3_UART_Init+0x8c>)
 8002106:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002108:	4b17      	ldr	r3, [pc, #92]	; (8002168 <MX_USART3_UART_Init+0x88>)
 800210a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800210e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002110:	4b15      	ldr	r3, [pc, #84]	; (8002168 <MX_USART3_UART_Init+0x88>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <MX_USART3_UART_Init+0x88>)
 8002118:	2200      	movs	r2, #0
 800211a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <MX_USART3_UART_Init+0x88>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <MX_USART3_UART_Init+0x88>)
 8002124:	220c      	movs	r2, #12
 8002126:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MX_USART3_UART_Init+0x88>)
 800212a:	2200      	movs	r2, #0
 800212c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MX_USART3_UART_Init+0x88>)
 8002130:	2200      	movs	r2, #0
 8002132:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <MX_USART3_UART_Init+0x88>)
 8002136:	2200      	movs	r2, #0
 8002138:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <MX_USART3_UART_Init+0x88>)
 800213c:	2200      	movs	r2, #0
 800213e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002140:	4809      	ldr	r0, [pc, #36]	; (8002168 <MX_USART3_UART_Init+0x88>)
 8002142:	f003 fe4b 	bl	8005ddc <HAL_UART_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 800214c:	f7ff fcb8 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	2000083c 	.word	0x2000083c
 8002158:	2000083d 	.word	0x2000083d
 800215c:	20000634 	.word	0x20000634
 8002160:	20000838 	.word	0x20000838
 8002164:	20000638 	.word	0x20000638
 8002168:	20000840 	.word	0x20000840
 800216c:	40004800 	.word	0x40004800

08002170 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b0ae      	sub	sp, #184	; 0xb8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2290      	movs	r2, #144	; 0x90
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f005 faaf 	bl	80076f4 <memset>
  if(uartHandle->Instance==USART3)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a26      	ldr	r2, [pc, #152]	; (8002234 <HAL_UART_MspInit+0xc4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d144      	bne.n	800222a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021a6:	2300      	movs	r3, #0
 80021a8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 ffea 	bl	8004188 <HAL_RCCEx_PeriphCLKConfig>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021ba:	f7ff fc81 	bl	8001ac0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a17      	ldr	r2, [pc, #92]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_UART_MspInit+0xc8>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002202:	2303      	movs	r3, #3
 8002204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002208:	2307      	movs	r3, #7
 800220a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800220e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002212:	4619      	mov	r1, r3
 8002214:	4809      	ldr	r0, [pc, #36]	; (800223c <HAL_UART_MspInit+0xcc>)
 8002216:	f001 f8ed 	bl	80033f4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	2027      	movs	r0, #39	; 0x27
 8002220:	f000 fd35 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002224:	2027      	movs	r0, #39	; 0x27
 8002226:	f000 fd4e 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800222a:	bf00      	nop
 800222c:	37b8      	adds	r7, #184	; 0xb8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40004800 	.word	0x40004800
 8002238:	40023800 	.word	0x40023800
 800223c:	40020c00 	.word	0x40020c00

08002240 <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
	return flagCPP;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <has_message_from_UART+0x14>)
 8002246:	781b      	ldrb	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	2000083c 	.word	0x2000083c

08002258 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
	return flagCPE;
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <is_transmitting_to_UART+0x14>)
 800225e:	781b      	ldrb	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	2000083d 	.word	0x2000083d

08002270 <reset_UART>:

void reset_UART()
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 8002274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002278:	2100      	movs	r1, #0
 800227a:	4806      	ldr	r0, [pc, #24]	; (8002294 <reset_UART+0x24>)
 800227c:	f005 fa3a 	bl	80076f4 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8002280:	2201      	movs	r2, #1
 8002282:	4904      	ldr	r1, [pc, #16]	; (8002294 <reset_UART+0x24>)
 8002284:	4804      	ldr	r0, [pc, #16]	; (8002298 <reset_UART+0x28>)
 8002286:	f003 fe55 	bl	8005f34 <HAL_UART_Receive_IT>
	flagCPP = false;
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <reset_UART+0x2c>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000434 	.word	0x20000434
 8002298:	20000840 	.word	0x20000840
 800229c:	2000083c 	.word	0x2000083c

080022a0 <send_UART>:

void send_UART(const char* msg_to_send)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 80022a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	480d      	ldr	r0, [pc, #52]	; (80022e4 <send_UART+0x44>)
 80022b0:	f006 f898 	bl	80083e4 <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 80022b4:	480b      	ldr	r0, [pc, #44]	; (80022e4 <send_UART+0x44>)
 80022b6:	f7fd ffc3 	bl	8000240 <strlen>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <send_UART+0x44>)
 80022c0:	4413      	add	r3, r2
 80022c2:	4909      	ldr	r1, [pc, #36]	; (80022e8 <send_UART+0x48>)
 80022c4:	461a      	mov	r2, r3
 80022c6:	460b      	mov	r3, r1
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 80022cc:	4b07      	ldr	r3, [pc, #28]	; (80022ec <send_UART+0x4c>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 80022d2:	2201      	movs	r2, #1
 80022d4:	4903      	ldr	r1, [pc, #12]	; (80022e4 <send_UART+0x44>)
 80022d6:	4806      	ldr	r0, [pc, #24]	; (80022f0 <send_UART+0x50>)
 80022d8:	f003 fdce 	bl	8005e78 <HAL_UART_Transmit_IT>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000638 	.word	0x20000638
 80022e8:	0800be78 	.word	0x0800be78
 80022ec:	2000083d 	.word	0x2000083d
 80022f0:	20000840 	.word	0x20000840

080022f4 <read_UART>:

void read_UART(char* msg_to_read)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 80022fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002300:	4903      	ldr	r1, [pc, #12]	; (8002310 <read_UART+0x1c>)
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f006 f86e 	bl	80083e4 <strncpy>
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000434 	.word	0x20000434

08002314 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 800231c:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_UART_RxCpltCallback+0xc4>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d154      	bne.n	80023ce <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 8002324:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a2d      	ldr	r2, [pc, #180]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	2b0d      	cmp	r3, #13
 800232e:	d00b      	beq.n	8002348 <HAL_UART_RxCpltCallback+0x34>
 8002330:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2a      	ldr	r2, [pc, #168]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 8002336:	5cd3      	ldrb	r3, [r2, r3]
 8002338:	2b5c      	cmp	r3, #92	; 0x5c
 800233a:	d005      	beq.n	8002348 <HAL_UART_RxCpltCallback+0x34>
 800233c:	4b27      	ldr	r3, [pc, #156]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a27      	ldr	r2, [pc, #156]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	2b2f      	cmp	r3, #47	; 0x2f
 8002346:	d106      	bne.n	8002356 <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 8002348:	4b24      	ldr	r3, [pc, #144]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 800234e:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <HAL_UART_RxCpltCallback+0xc4>)
 8002350:	2201      	movs	r2, #1
 8002352:	701a      	strb	r2, [r3, #0]
 8002354:	e03c      	b.n	80023d0 <HAL_UART_RxCpltCallback+0xbc>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 8002356:	4b21      	ldr	r3, [pc, #132]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 800235c:	5cd3      	ldrb	r3, [r2, r3]
 800235e:	2b08      	cmp	r3, #8
 8002360:	d10f      	bne.n	8002382 <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 800236a:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3b01      	subs	r3, #1
 8002370:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	e01c      	b.n	80023b0 <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 8002376:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3b02      	subs	r3, #2
 800237c:	4a17      	ldr	r2, [pc, #92]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	e016      	b.n	80023b0 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 8002382:	4b16      	ldr	r3, [pc, #88]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a16      	ldr	r2, [pc, #88]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	2b1b      	cmp	r3, #27
 800238c:	d104      	bne.n	8002398 <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	e00b      	b.n	80023b0 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8002398:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 800239e:	5cd3      	ldrb	r3, [r2, r3]
 80023a0:	2b24      	cmp	r3, #36	; 0x24
 80023a2:	d105      	bne.n	80023b0 <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 80023ac:	2224      	movs	r2, #36	; 0x24
 80023ae:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_UART_RxCpltCallback+0xc8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <HAL_UART_RxCpltCallback+0xcc>)
 80023c0:	4413      	add	r3, r2
 80023c2:	2201      	movs	r2, #1
 80023c4:	4619      	mov	r1, r3
 80023c6:	4807      	ldr	r0, [pc, #28]	; (80023e4 <HAL_UART_RxCpltCallback+0xd0>)
 80023c8:	f003 fdb4 	bl	8005f34 <HAL_UART_Receive_IT>
 80023cc:	e000      	b.n	80023d0 <HAL_UART_RxCpltCallback+0xbc>
		return;
 80023ce:	bf00      	nop
	}
}
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2000083c 	.word	0x2000083c
 80023dc:	20000634 	.word	0x20000634
 80023e0:	20000434 	.word	0x20000434
 80023e4:	20000840 	.word	0x20000840

080023e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_UART_TxCpltCallback+0x64>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	f083 0301 	eor.w	r3, r3, #1
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d122      	bne.n	8002444 <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <HAL_UART_TxCpltCallback+0x68>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a14      	ldr	r2, [pc, #80]	; (8002454 <HAL_UART_TxCpltCallback+0x6c>)
 8002404:	5cd3      	ldrb	r3, [r2, r3]
 8002406:	2b0d      	cmp	r3, #13
 8002408:	d10d      	bne.n	8002426 <HAL_UART_TxCpltCallback+0x3e>
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_UART_TxCpltCallback+0x68>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	3b01      	subs	r3, #1
 8002410:	4a10      	ldr	r2, [pc, #64]	; (8002454 <HAL_UART_TxCpltCallback+0x6c>)
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	2b0a      	cmp	r3, #10
 8002416:	d006      	beq.n	8002426 <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8002418:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <HAL_UART_TxCpltCallback+0x68>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_UART_TxCpltCallback+0x64>)
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e00f      	b.n	8002446 <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_UART_TxCpltCallback+0x68>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3301      	adds	r3, #1
 800242c:	4a08      	ldr	r2, [pc, #32]	; (8002450 <HAL_UART_TxCpltCallback+0x68>)
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <HAL_UART_TxCpltCallback+0x68>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a07      	ldr	r2, [pc, #28]	; (8002454 <HAL_UART_TxCpltCallback+0x6c>)
 8002436:	4413      	add	r3, r2
 8002438:	2201      	movs	r2, #1
 800243a:	4619      	mov	r1, r3
 800243c:	4806      	ldr	r0, [pc, #24]	; (8002458 <HAL_UART_TxCpltCallback+0x70>)
 800243e:	f003 fd1b 	bl	8005e78 <HAL_UART_Transmit_IT>
 8002442:	e000      	b.n	8002446 <HAL_UART_TxCpltCallback+0x5e>
		return;
 8002444:	bf00      	nop
}
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	2000083d 	.word	0x2000083d
 8002450:	20000838 	.word	0x20000838
 8002454:	20000638 	.word	0x20000638
 8002458:	20000840 	.word	0x20000840

0800245c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800245c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002494 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002460:	480d      	ldr	r0, [pc, #52]	; (8002498 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002462:	490e      	ldr	r1, [pc, #56]	; (800249c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002464:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002468:	e002      	b.n	8002470 <LoopCopyDataInit>

0800246a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800246c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246e:	3304      	adds	r3, #4

08002470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002474:	d3f9      	bcc.n	800246a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002476:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002478:	4c0b      	ldr	r4, [pc, #44]	; (80024a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800247c:	e001      	b.n	8002482 <LoopFillZerobss>

0800247e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002480:	3204      	adds	r2, #4

08002482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002484:	d3fb      	bcc.n	800247e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002486:	f7ff fd85 	bl	8001f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800248a:	f005 f90f 	bl	80076ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800248e:	f7ff fa5f 	bl	8001950 <main>
  bx  lr    
 8002492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002494:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800249c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80024a0:	0800c354 	.word	0x0800c354
  ldr r2, =_sbss
 80024a4:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80024a8:	200008f0 	.word	0x200008f0

080024ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024ac:	e7fe      	b.n	80024ac <ADC_IRQHandler>

080024ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b2:	2003      	movs	r0, #3
 80024b4:	f000 fbe0 	bl	8002c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f000 f805 	bl	80024c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024be:	f7ff fbf7 	bl	8001cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_InitTick+0x54>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_InitTick+0x58>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024de:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fbfb 	bl	8002ce2 <HAL_SYSTICK_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00e      	b.n	8002514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b0f      	cmp	r3, #15
 80024fa:	d80a      	bhi.n	8002512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024fc:	2200      	movs	r2, #0
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f000 fbc3 	bl	8002c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002508:	4a06      	ldr	r2, [pc, #24]	; (8002524 <HAL_InitTick+0x5c>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e000      	b.n	8002514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000018 	.word	0x20000018
 8002520:	20000020 	.word	0x20000020
 8002524:	2000001c 	.word	0x2000001c

08002528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_IncTick+0x20>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_IncTick+0x24>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4413      	add	r3, r2
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <HAL_IncTick+0x24>)
 800253a:	6013      	str	r3, [r2, #0]
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	20000020 	.word	0x20000020
 800254c:	200008c8 	.word	0x200008c8

08002550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return uwTick;
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_GetTick+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	200008c8 	.word	0x200008c8

08002568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002570:	f7ff ffee 	bl	8002550 <HAL_GetTick>
 8002574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d005      	beq.n	800258e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_Delay+0x44>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800258e:	bf00      	nop
 8002590:	f7ff ffde 	bl	8002550 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	429a      	cmp	r2, r3
 800259e:	d8f7      	bhi.n	8002590 <HAL_Delay+0x28>
  {
  }
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000020 	.word	0x20000020

080025b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e031      	b.n	800262a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe fa90 	bl	8000af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d116      	bne.n	800261c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HAL_ADC_Init+0x84>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	f043 0202 	orr.w	r2, r3, #2
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f970 	bl	80028e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f023 0303 	bic.w	r3, r3, #3
 8002612:	f043 0201 	orr.w	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
 800261a:	e001      	b.n	8002620 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	ffffeefd 	.word	0xffffeefd

08002638 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x1c>
 8002650:	2302      	movs	r3, #2
 8002652:	e136      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x28a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b09      	cmp	r3, #9
 8002662:	d93a      	bls.n	80026da <HAL_ADC_ConfigChannel+0xa2>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800266c:	d035      	beq.n	80026da <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68d9      	ldr	r1, [r3, #12]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	3b1e      	subs	r3, #30
 8002684:	2207      	movs	r2, #7
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	400a      	ands	r2, r1
 8002692:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a8d      	ldr	r2, [pc, #564]	; (80028d0 <HAL_ADC_ConfigChannel+0x298>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10a      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68d9      	ldr	r1, [r3, #12]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	061a      	lsls	r2, r3, #24
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026b2:	e035      	b.n	8002720 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68d9      	ldr	r1, [r3, #12]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	4603      	mov	r3, r0
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4403      	add	r3, r0
 80026cc:	3b1e      	subs	r3, #30
 80026ce:	409a      	lsls	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026d8:	e022      	b.n	8002720 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6919      	ldr	r1, [r3, #16]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	2207      	movs	r2, #7
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43da      	mvns	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	400a      	ands	r2, r1
 80026fc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6919      	ldr	r1, [r3, #16]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	4618      	mov	r0, r3
 8002710:	4603      	mov	r3, r0
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4403      	add	r3, r0
 8002716:	409a      	lsls	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b06      	cmp	r3, #6
 8002726:	d824      	bhi.n	8002772 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	3b05      	subs	r3, #5
 800273a:	221f      	movs	r2, #31
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43da      	mvns	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	400a      	ands	r2, r1
 8002748:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	b29b      	uxth	r3, r3
 8002756:	4618      	mov	r0, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	3b05      	subs	r3, #5
 8002764:	fa00 f203 	lsl.w	r2, r0, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	635a      	str	r2, [r3, #52]	; 0x34
 8002770:	e04c      	b.n	800280c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d824      	bhi.n	80027c4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	3b23      	subs	r3, #35	; 0x23
 800278c:	221f      	movs	r2, #31
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	400a      	ands	r2, r1
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	3b23      	subs	r3, #35	; 0x23
 80027b6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
 80027c2:	e023      	b.n	800280c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	3b41      	subs	r3, #65	; 0x41
 80027d6:	221f      	movs	r2, #31
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43da      	mvns	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	400a      	ands	r2, r1
 80027e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	3b41      	subs	r3, #65	; 0x41
 8002800:	fa00 f203 	lsl.w	r2, r0, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a30      	ldr	r2, [pc, #192]	; (80028d4 <HAL_ADC_ConfigChannel+0x29c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10a      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1f4>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800281e:	d105      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002820:	4b2d      	ldr	r3, [pc, #180]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4a2c      	ldr	r2, [pc, #176]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002826:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800282a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a28      	ldr	r2, [pc, #160]	; (80028d4 <HAL_ADC_ConfigChannel+0x29c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10f      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x21e>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b12      	cmp	r3, #18
 800283c:	d10b      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002844:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002848:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800284a:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002854:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1e      	ldr	r2, [pc, #120]	; (80028d4 <HAL_ADC_ConfigChannel+0x29c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d12b      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x280>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a1a      	ldr	r2, [pc, #104]	; (80028d0 <HAL_ADC_ConfigChannel+0x298>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d003      	beq.n	8002872 <HAL_ADC_ConfigChannel+0x23a>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b11      	cmp	r3, #17
 8002870:	d122      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002872:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002878:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800287c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002884:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002888:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a10      	ldr	r2, [pc, #64]	; (80028d0 <HAL_ADC_ConfigChannel+0x298>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d111      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_ADC_ConfigChannel+0x2a4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <HAL_ADC_ConfigChannel+0x2a8>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0c9a      	lsrs	r2, r3, #18
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028aa:	e002      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f9      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	10000012 	.word	0x10000012
 80028d4:	40012000 	.word	0x40012000
 80028d8:	40012300 	.word	0x40012300
 80028dc:	20000018 	.word	0x20000018
 80028e0:	431bde83 	.word	0x431bde83

080028e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80028ec:	4b78      	ldr	r3, [pc, #480]	; (8002ad0 <ADC_Init+0x1ec>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a77      	ldr	r2, [pc, #476]	; (8002ad0 <ADC_Init+0x1ec>)
 80028f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80028f8:	4b75      	ldr	r3, [pc, #468]	; (8002ad0 <ADC_Init+0x1ec>)
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4973      	ldr	r1, [pc, #460]	; (8002ad0 <ADC_Init+0x1ec>)
 8002902:	4313      	orrs	r3, r2
 8002904:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	021a      	lsls	r2, r3, #8
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6899      	ldr	r1, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <ADC_Init+0x1f0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d022      	beq.n	80029be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002986:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6899      	ldr	r1, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6899      	ldr	r1, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	e00f      	b.n	80029de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0202 	bic.w	r2, r2, #2
 80029ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6899      	ldr	r1, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	005a      	lsls	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	3b01      	subs	r3, #1
 8002a38:	035a      	lsls	r2, r3, #13
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	e007      	b.n	8002a54 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	051a      	lsls	r2, r3, #20
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6899      	ldr	r1, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a96:	025a      	lsls	r2, r3, #9
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6899      	ldr	r1, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	029a      	lsls	r2, r3, #10
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40012300 	.word	0x40012300
 8002ad4:	0f000001 	.word	0x0f000001

08002ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <__NVIC_SetPriorityGrouping+0x40>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af4:	4013      	ands	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b06:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <__NVIC_SetPriorityGrouping+0x40>)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	60d3      	str	r3, [r2, #12]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00
 8002b1c:	05fa0000 	.word	0x05fa0000

08002b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <__NVIC_GetPriorityGrouping+0x18>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f003 0307 	and.w	r3, r3, #7
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	db0b      	blt.n	8002b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	4907      	ldr	r1, [pc, #28]	; (8002b74 <__NVIC_EnableIRQ+0x38>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db0a      	blt.n	8002ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	490c      	ldr	r1, [pc, #48]	; (8002bc4 <__NVIC_SetPriority+0x4c>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba0:	e00a      	b.n	8002bb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4908      	ldr	r1, [pc, #32]	; (8002bc8 <__NVIC_SetPriority+0x50>)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	761a      	strb	r2, [r3, #24]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f1c3 0307 	rsb	r3, r3, #7
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf28      	it	cs
 8002bea:	2304      	movcs	r3, #4
 8002bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d902      	bls.n	8002bfc <NVIC_EncodePriority+0x30>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3b03      	subs	r3, #3
 8002bfa:	e000      	b.n	8002bfe <NVIC_EncodePriority+0x32>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	401a      	ands	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	4313      	orrs	r3, r2
         );
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c44:	d301      	bcc.n	8002c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00f      	b.n	8002c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <SysTick_Config+0x40>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c52:	210f      	movs	r1, #15
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
 8002c58:	f7ff ff8e 	bl	8002b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <SysTick_Config+0x40>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <SysTick_Config+0x40>)
 8002c64:	2207      	movs	r2, #7
 8002c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	e000e010 	.word	0xe000e010

08002c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff29 	bl	8002ad8 <__NVIC_SetPriorityGrouping>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca0:	f7ff ff3e 	bl	8002b20 <__NVIC_GetPriorityGrouping>
 8002ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f7ff ff8e 	bl	8002bcc <NVIC_EncodePriority>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff5d 	bl	8002b78 <__NVIC_SetPriority>
}
 8002cbe:	bf00      	nop
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff31 	bl	8002b3c <__NVIC_EnableIRQ>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff ffa2 	bl	8002c34 <SysTick_Config>
 8002cf0:	4603      	mov	r3, r0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7ff fc22 	bl	8002550 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e099      	b.n	8002e4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d38:	e00f      	b.n	8002d5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d3a:	f7ff fc09 	bl	8002550 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	d908      	bls.n	8002d5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2203      	movs	r2, #3
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e078      	b.n	8002e4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e8      	bne.n	8002d3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <HAL_DMA_Init+0x158>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d107      	bne.n	8002dc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f023 0307 	bic.w	r3, r3, #7
 8002dda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d117      	bne.n	8002e1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00e      	beq.n	8002e1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fa7b 	bl	80032fc <DMA_CheckFifoParam>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2240      	movs	r2, #64	; 0x40
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e016      	b.n	8002e4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fa32 	bl	8003290 <DMA_CalcBaseAndBitshift>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e34:	223f      	movs	r2, #63	; 0x3f
 8002e36:	409a      	lsls	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	e010803f 	.word	0xe010803f

08002e58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e66:	f7ff fb73 	bl	8002550 <HAL_GetTick>
 8002e6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d008      	beq.n	8002e8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2280      	movs	r2, #128	; 0x80
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e052      	b.n	8002f30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0216 	bic.w	r2, r2, #22
 8002e98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ea8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d103      	bne.n	8002eba <HAL_DMA_Abort+0x62>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0208 	bic.w	r2, r2, #8
 8002ec8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eda:	e013      	b.n	8002f04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002edc:	f7ff fb38 	bl	8002550 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b05      	cmp	r3, #5
 8002ee8:	d90c      	bls.n	8002f04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2220      	movs	r2, #32
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e015      	b.n	8002f30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e4      	bne.n	8002edc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	223f      	movs	r2, #63	; 0x3f
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d004      	beq.n	8002f56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00c      	b.n	8002f70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2205      	movs	r2, #5
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002f88:	4b8e      	ldr	r3, [pc, #568]	; (80031c4 <HAL_DMA_IRQHandler+0x248>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a8e      	ldr	r2, [pc, #568]	; (80031c8 <HAL_DMA_IRQHandler+0x24c>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	0a9b      	lsrs	r3, r3, #10
 8002f94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01a      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d013      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0204 	bic.w	r2, r2, #4
 8002fce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	2201      	movs	r2, #1
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d012      	beq.n	800301e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300a:	2201      	movs	r2, #1
 800300c:	409a      	lsls	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003016:	f043 0202 	orr.w	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003022:	2204      	movs	r2, #4
 8003024:	409a      	lsls	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d012      	beq.n	8003054 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	2204      	movs	r2, #4
 8003042:	409a      	lsls	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	f043 0204 	orr.w	r2, r3, #4
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	2210      	movs	r2, #16
 800305a:	409a      	lsls	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d043      	beq.n	80030ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d03c      	beq.n	80030ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	2210      	movs	r2, #16
 8003078:	409a      	lsls	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d018      	beq.n	80030be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d108      	bne.n	80030ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d024      	beq.n	80030ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	4798      	blx	r3
 80030aa:	e01f      	b.n	80030ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01b      	beq.n	80030ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
 80030bc:	e016      	b.n	80030ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d107      	bne.n	80030dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0208 	bic.w	r2, r2, #8
 80030da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f0:	2220      	movs	r2, #32
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 808f 	beq.w	800321c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8087 	beq.w	800321c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003112:	2220      	movs	r2, #32
 8003114:	409a      	lsls	r2, r3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b05      	cmp	r3, #5
 8003124:	d136      	bne.n	8003194 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0216 	bic.w	r2, r2, #22
 8003134:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003144:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <HAL_DMA_IRQHandler+0x1da>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0208 	bic.w	r2, r2, #8
 8003164:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316a:	223f      	movs	r2, #63	; 0x3f
 800316c:	409a      	lsls	r2, r3
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003186:	2b00      	cmp	r3, #0
 8003188:	d07e      	beq.n	8003288 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
        }
        return;
 8003192:	e079      	b.n	8003288 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d01d      	beq.n	80031de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10d      	bne.n	80031cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d031      	beq.n	800321c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
 80031c0:	e02c      	b.n	800321c <HAL_DMA_IRQHandler+0x2a0>
 80031c2:	bf00      	nop
 80031c4:	20000018 	.word	0x20000018
 80031c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d023      	beq.n	800321c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
 80031dc:	e01e      	b.n	800321c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10f      	bne.n	800320c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0210 	bic.w	r2, r2, #16
 80031fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	2b00      	cmp	r3, #0
 8003222:	d032      	beq.n	800328a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d022      	beq.n	8003276 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2205      	movs	r2, #5
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	3301      	adds	r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	429a      	cmp	r2, r3
 8003252:	d307      	bcc.n	8003264 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f2      	bne.n	8003248 <HAL_DMA_IRQHandler+0x2cc>
 8003262:	e000      	b.n	8003266 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003264:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
 8003286:	e000      	b.n	800328a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003288:	bf00      	nop
    }
  }
}
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	3b10      	subs	r3, #16
 80032a0:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <DMA_CalcBaseAndBitshift+0x60>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032aa:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <DMA_CalcBaseAndBitshift+0x64>)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d908      	bls.n	80032d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <DMA_CalcBaseAndBitshift+0x68>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	1d1a      	adds	r2, r3, #4
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	659a      	str	r2, [r3, #88]	; 0x58
 80032ce:	e006      	b.n	80032de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <DMA_CalcBaseAndBitshift+0x68>)
 80032d8:	4013      	ands	r3, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	aaaaaaab 	.word	0xaaaaaaab
 80032f4:	0800be94 	.word	0x0800be94
 80032f8:	fffffc00 	.word	0xfffffc00

080032fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d11f      	bne.n	8003356 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d856      	bhi.n	80033ca <DMA_CheckFifoParam+0xce>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <DMA_CheckFifoParam+0x28>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003335 	.word	0x08003335
 8003328:	08003347 	.word	0x08003347
 800332c:	08003335 	.word	0x08003335
 8003330:	080033cb 	.word	0x080033cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d046      	beq.n	80033ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003344:	e043      	b.n	80033ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800334e:	d140      	bne.n	80033d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003354:	e03d      	b.n	80033d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335e:	d121      	bne.n	80033a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d837      	bhi.n	80033d6 <DMA_CheckFifoParam+0xda>
 8003366:	a201      	add	r2, pc, #4	; (adr r2, 800336c <DMA_CheckFifoParam+0x70>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	0800337d 	.word	0x0800337d
 8003370:	08003383 	.word	0x08003383
 8003374:	0800337d 	.word	0x0800337d
 8003378:	08003395 	.word	0x08003395
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      break;
 8003380:	e030      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d025      	beq.n	80033da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003392:	e022      	b.n	80033da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800339c:	d11f      	bne.n	80033de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033a2:	e01c      	b.n	80033de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d903      	bls.n	80033b2 <DMA_CheckFifoParam+0xb6>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d003      	beq.n	80033b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033b0:	e018      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
      break;
 80033b6:	e015      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00e      	beq.n	80033e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      break;
 80033c8:	e00b      	b.n	80033e2 <DMA_CheckFifoParam+0xe6>
      break;
 80033ca:	bf00      	nop
 80033cc:	e00a      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033ce:	bf00      	nop
 80033d0:	e008      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033d2:	bf00      	nop
 80033d4:	e006      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033d6:	bf00      	nop
 80033d8:	e004      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033da:	bf00      	nop
 80033dc:	e002      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033e2:	bf00      	nop
    }
  } 
  
  return status; 
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop

080033f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	e175      	b.n	8003700 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003414:	2201      	movs	r2, #1
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	429a      	cmp	r2, r3
 800342e:	f040 8164 	bne.w	80036fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d005      	beq.n	800344a <HAL_GPIO_Init+0x56>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d130      	bne.n	80034ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	2203      	movs	r2, #3
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003480:	2201      	movs	r2, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	f003 0201 	and.w	r2, r3, #1
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d017      	beq.n	80034e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2203      	movs	r2, #3
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d123      	bne.n	800353c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	08da      	lsrs	r2, r3, #3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3208      	adds	r2, #8
 80034fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	220f      	movs	r2, #15
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	08da      	lsrs	r2, r3, #3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3208      	adds	r2, #8
 8003536:	69b9      	ldr	r1, [r7, #24]
 8003538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	2203      	movs	r2, #3
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0203 	and.w	r2, r3, #3
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80be 	beq.w	80036fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357e:	4b66      	ldr	r3, [pc, #408]	; (8003718 <HAL_GPIO_Init+0x324>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	4a65      	ldr	r2, [pc, #404]	; (8003718 <HAL_GPIO_Init+0x324>)
 8003584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003588:	6453      	str	r3, [r2, #68]	; 0x44
 800358a:	4b63      	ldr	r3, [pc, #396]	; (8003718 <HAL_GPIO_Init+0x324>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003596:	4a61      	ldr	r2, [pc, #388]	; (800371c <HAL_GPIO_Init+0x328>)
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	3302      	adds	r3, #2
 800359e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	220f      	movs	r2, #15
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_GPIO_Init+0x32c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d037      	beq.n	8003632 <HAL_GPIO_Init+0x23e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a57      	ldr	r2, [pc, #348]	; (8003724 <HAL_GPIO_Init+0x330>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d031      	beq.n	800362e <HAL_GPIO_Init+0x23a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a56      	ldr	r2, [pc, #344]	; (8003728 <HAL_GPIO_Init+0x334>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d02b      	beq.n	800362a <HAL_GPIO_Init+0x236>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a55      	ldr	r2, [pc, #340]	; (800372c <HAL_GPIO_Init+0x338>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d025      	beq.n	8003626 <HAL_GPIO_Init+0x232>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a54      	ldr	r2, [pc, #336]	; (8003730 <HAL_GPIO_Init+0x33c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01f      	beq.n	8003622 <HAL_GPIO_Init+0x22e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a53      	ldr	r2, [pc, #332]	; (8003734 <HAL_GPIO_Init+0x340>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d019      	beq.n	800361e <HAL_GPIO_Init+0x22a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a52      	ldr	r2, [pc, #328]	; (8003738 <HAL_GPIO_Init+0x344>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_GPIO_Init+0x226>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a51      	ldr	r2, [pc, #324]	; (800373c <HAL_GPIO_Init+0x348>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00d      	beq.n	8003616 <HAL_GPIO_Init+0x222>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a50      	ldr	r2, [pc, #320]	; (8003740 <HAL_GPIO_Init+0x34c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <HAL_GPIO_Init+0x21e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4f      	ldr	r2, [pc, #316]	; (8003744 <HAL_GPIO_Init+0x350>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_GPIO_Init+0x21a>
 800360a:	2309      	movs	r3, #9
 800360c:	e012      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800360e:	230a      	movs	r3, #10
 8003610:	e010      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003612:	2308      	movs	r3, #8
 8003614:	e00e      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003616:	2307      	movs	r3, #7
 8003618:	e00c      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800361a:	2306      	movs	r3, #6
 800361c:	e00a      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800361e:	2305      	movs	r3, #5
 8003620:	e008      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003622:	2304      	movs	r3, #4
 8003624:	e006      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003626:	2303      	movs	r3, #3
 8003628:	e004      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800362a:	2302      	movs	r3, #2
 800362c:	e002      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003632:	2300      	movs	r3, #0
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	f002 0203 	and.w	r2, r2, #3
 800363a:	0092      	lsls	r2, r2, #2
 800363c:	4093      	lsls	r3, r2
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003644:	4935      	ldr	r1, [pc, #212]	; (800371c <HAL_GPIO_Init+0x328>)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	089b      	lsrs	r3, r3, #2
 800364a:	3302      	adds	r3, #2
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <HAL_GPIO_Init+0x354>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003676:	4a34      	ldr	r2, [pc, #208]	; (8003748 <HAL_GPIO_Init+0x354>)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800367c:	4b32      	ldr	r3, [pc, #200]	; (8003748 <HAL_GPIO_Init+0x354>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a0:	4a29      	ldr	r2, [pc, #164]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036a6:	4b28      	ldr	r3, [pc, #160]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ca:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036f4:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3301      	adds	r3, #1
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b0f      	cmp	r3, #15
 8003704:	f67f ae86 	bls.w	8003414 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	3724      	adds	r7, #36	; 0x24
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40013800 	.word	0x40013800
 8003720:	40020000 	.word	0x40020000
 8003724:	40020400 	.word	0x40020400
 8003728:	40020800 	.word	0x40020800
 800372c:	40020c00 	.word	0x40020c00
 8003730:	40021000 	.word	0x40021000
 8003734:	40021400 	.word	0x40021400
 8003738:	40021800 	.word	0x40021800
 800373c:	40021c00 	.word	0x40021c00
 8003740:	40022000 	.word	0x40022000
 8003744:	40022400 	.word	0x40022400
 8003748:	40013c00 	.word	0x40013c00

0800374c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
 8003758:	4613      	mov	r3, r2
 800375a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800375c:	787b      	ldrb	r3, [r7, #1]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003768:	e003      	b.n	8003772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800376a:	887b      	ldrh	r3, [r7, #2]
 800376c:	041a      	lsls	r2, r3, #16
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	619a      	str	r2, [r3, #24]
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	460b      	mov	r3, r1
 8003788:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003790:	887a      	ldrh	r2, [r7, #2]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4013      	ands	r3, r2
 8003796:	041a      	lsls	r2, r3, #16
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	43d9      	mvns	r1, r3
 800379c:	887b      	ldrh	r3, [r7, #2]
 800379e:	400b      	ands	r3, r1
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	619a      	str	r2, [r3, #24]
}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d006      	beq.n	80037d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037ca:	4a05      	ldr	r2, [pc, #20]	; (80037e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037d0:	88fb      	ldrh	r3, [r7, #6]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fd ffbc 	bl	8001750 <HAL_GPIO_EXTI_Callback>
  }
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40013c00 	.word	0x40013c00

080037e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037ec:	2300      	movs	r3, #0
 80037ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e29b      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 8087 	beq.w	8003916 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003808:	4b96      	ldr	r3, [pc, #600]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 030c 	and.w	r3, r3, #12
 8003810:	2b04      	cmp	r3, #4
 8003812:	d00c      	beq.n	800382e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003814:	4b93      	ldr	r3, [pc, #588]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b08      	cmp	r3, #8
 800381e:	d112      	bne.n	8003846 <HAL_RCC_OscConfig+0x62>
 8003820:	4b90      	ldr	r3, [pc, #576]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003828:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800382c:	d10b      	bne.n	8003846 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382e:	4b8d      	ldr	r3, [pc, #564]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d06c      	beq.n	8003914 <HAL_RCC_OscConfig+0x130>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d168      	bne.n	8003914 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e275      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384e:	d106      	bne.n	800385e <HAL_RCC_OscConfig+0x7a>
 8003850:	4b84      	ldr	r3, [pc, #528]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a83      	ldr	r2, [pc, #524]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	e02e      	b.n	80038bc <HAL_RCC_OscConfig+0xd8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0x9c>
 8003866:	4b7f      	ldr	r3, [pc, #508]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a7e      	ldr	r2, [pc, #504]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 800386c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b7c      	ldr	r3, [pc, #496]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a7b      	ldr	r2, [pc, #492]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e01d      	b.n	80038bc <HAL_RCC_OscConfig+0xd8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0xc0>
 800388a:	4b76      	ldr	r3, [pc, #472]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a75      	ldr	r2, [pc, #468]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b73      	ldr	r3, [pc, #460]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a72      	ldr	r2, [pc, #456]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0xd8>
 80038a4:	4b6f      	ldr	r3, [pc, #444]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a6e      	ldr	r2, [pc, #440]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80038aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b6c      	ldr	r3, [pc, #432]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a6b      	ldr	r2, [pc, #428]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80038b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d013      	beq.n	80038ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fe fe44 	bl	8002550 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038cc:	f7fe fe40 	bl	8002550 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	; 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e229      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b61      	ldr	r3, [pc, #388]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0xe8>
 80038ea:	e014      	b.n	8003916 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fe fe30 	bl	8002550 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fe fe2c 	bl	8002550 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e215      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	4b57      	ldr	r3, [pc, #348]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x110>
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d069      	beq.n	80039f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003922:	4b50      	ldr	r3, [pc, #320]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392e:	4b4d      	ldr	r3, [pc, #308]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b08      	cmp	r3, #8
 8003938:	d11c      	bne.n	8003974 <HAL_RCC_OscConfig+0x190>
 800393a:	4b4a      	ldr	r3, [pc, #296]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d116      	bne.n	8003974 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003946:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x17a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e1e9      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	493d      	ldr	r1, [pc, #244]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	e040      	b.n	80039f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d023      	beq.n	80039c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397c:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a38      	ldr	r2, [pc, #224]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe fde2 	bl	8002550 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003990:	f7fe fdde 	bl	8002550 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e1c7      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a2:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ae:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4929      	ldr	r1, [pc, #164]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]
 80039c2:	e018      	b.n	80039f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c4:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a26      	ldr	r2, [pc, #152]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fe fdbe 	bl	8002550 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d8:	f7fe fdba 	bl	8002550 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e1a3      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ea:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d038      	beq.n	8003a74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d019      	beq.n	8003a3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a0a:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0e:	4a15      	ldr	r2, [pc, #84]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a16:	f7fe fd9b 	bl	8002550 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7fe fd97 	bl	8002550 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e180      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x23a>
 8003a3c:	e01a      	b.n	8003a74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a42:	4a08      	ldr	r2, [pc, #32]	; (8003a64 <HAL_RCC_OscConfig+0x280>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4a:	f7fe fd81 	bl	8002550 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a52:	f7fe fd7d 	bl	8002550 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d903      	bls.n	8003a68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e166      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
 8003a64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a68:	4b92      	ldr	r3, [pc, #584]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ee      	bne.n	8003a52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80a4 	beq.w	8003bca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a82:	4b8c      	ldr	r3, [pc, #560]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10d      	bne.n	8003aaa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8e:	4b89      	ldr	r3, [pc, #548]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	4a88      	ldr	r2, [pc, #544]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a98:	6413      	str	r3, [r2, #64]	; 0x40
 8003a9a:	4b86      	ldr	r3, [pc, #536]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	60bb      	str	r3, [r7, #8]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aaa:	4b83      	ldr	r3, [pc, #524]	; (8003cb8 <HAL_RCC_OscConfig+0x4d4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d118      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ab6:	4b80      	ldr	r3, [pc, #512]	; (8003cb8 <HAL_RCC_OscConfig+0x4d4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a7f      	ldr	r2, [pc, #508]	; (8003cb8 <HAL_RCC_OscConfig+0x4d4>)
 8003abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac2:	f7fe fd45 	bl	8002550 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aca:	f7fe fd41 	bl	8002550 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b64      	cmp	r3, #100	; 0x64
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e12a      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003adc:	4b76      	ldr	r3, [pc, #472]	; (8003cb8 <HAL_RCC_OscConfig+0x4d4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d106      	bne.n	8003afe <HAL_RCC_OscConfig+0x31a>
 8003af0:	4b70      	ldr	r3, [pc, #448]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	4a6f      	ldr	r2, [pc, #444]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6713      	str	r3, [r2, #112]	; 0x70
 8003afc:	e02d      	b.n	8003b5a <HAL_RCC_OscConfig+0x376>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x33c>
 8003b06:	4b6b      	ldr	r3, [pc, #428]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	4a6a      	ldr	r2, [pc, #424]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	6713      	str	r3, [r2, #112]	; 0x70
 8003b12:	4b68      	ldr	r3, [pc, #416]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4a67      	ldr	r2, [pc, #412]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b18:	f023 0304 	bic.w	r3, r3, #4
 8003b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1e:	e01c      	b.n	8003b5a <HAL_RCC_OscConfig+0x376>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d10c      	bne.n	8003b42 <HAL_RCC_OscConfig+0x35e>
 8003b28:	4b62      	ldr	r3, [pc, #392]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2c:	4a61      	ldr	r2, [pc, #388]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b2e:	f043 0304 	orr.w	r3, r3, #4
 8003b32:	6713      	str	r3, [r2, #112]	; 0x70
 8003b34:	4b5f      	ldr	r3, [pc, #380]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	4a5e      	ldr	r2, [pc, #376]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b40:	e00b      	b.n	8003b5a <HAL_RCC_OscConfig+0x376>
 8003b42:	4b5c      	ldr	r3, [pc, #368]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	4a5b      	ldr	r2, [pc, #364]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4e:	4b59      	ldr	r3, [pc, #356]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	4a58      	ldr	r2, [pc, #352]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b54:	f023 0304 	bic.w	r3, r3, #4
 8003b58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d015      	beq.n	8003b8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b62:	f7fe fcf5 	bl	8002550 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b68:	e00a      	b.n	8003b80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6a:	f7fe fcf1 	bl	8002550 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e0d8      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b80:	4b4c      	ldr	r3, [pc, #304]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0ee      	beq.n	8003b6a <HAL_RCC_OscConfig+0x386>
 8003b8c:	e014      	b.n	8003bb8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8e:	f7fe fcdf 	bl	8002550 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b94:	e00a      	b.n	8003bac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b96:	f7fe fcdb 	bl	8002550 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e0c2      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bac:	4b41      	ldr	r3, [pc, #260]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1ee      	bne.n	8003b96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d105      	bne.n	8003bca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbe:	4b3d      	ldr	r3, [pc, #244]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	4a3c      	ldr	r2, [pc, #240]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80ae 	beq.w	8003d30 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bd4:	4b37      	ldr	r3, [pc, #220]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d06d      	beq.n	8003cbc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d14b      	bne.n	8003c80 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be8:	4b32      	ldr	r3, [pc, #200]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a31      	ldr	r2, [pc, #196]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fe fcac 	bl	8002550 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfc:	f7fe fca8 	bl	8002550 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e091      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0e:	4b29      	ldr	r3, [pc, #164]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	019b      	lsls	r3, r3, #6
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	085b      	lsrs	r3, r3, #1
 8003c32:	3b01      	subs	r3, #1
 8003c34:	041b      	lsls	r3, r3, #16
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	061b      	lsls	r3, r3, #24
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	071b      	lsls	r3, r3, #28
 8003c46:	491b      	ldr	r1, [pc, #108]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c4c:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a18      	ldr	r2, [pc, #96]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe fc7a 	bl	8002550 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c60:	f7fe fc76 	bl	8002550 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e05f      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c72:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0x47c>
 8003c7e:	e057      	b.n	8003d30 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a0b      	ldr	r2, [pc, #44]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fe fc60 	bl	8002550 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c94:	f7fe fc5c 	bl	8002550 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e045      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca6:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_RCC_OscConfig+0x4d0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4b0>
 8003cb2:	e03d      	b.n	8003d30 <HAL_RCC_OscConfig+0x54c>
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003cbc:	4b1f      	ldr	r3, [pc, #124]	; (8003d3c <HAL_RCC_OscConfig+0x558>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d030      	beq.n	8003d2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d129      	bne.n	8003d2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d122      	bne.n	8003d2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cec:	4013      	ands	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cf2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d119      	bne.n	8003d2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	3b01      	subs	r3, #1
 8003d06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d10f      	bne.n	8003d2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d107      	bne.n	8003d2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800

08003d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0d0      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d58:	4b6a      	ldr	r3, [pc, #424]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d910      	bls.n	8003d88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	4b67      	ldr	r3, [pc, #412]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 020f 	bic.w	r2, r3, #15
 8003d6e:	4965      	ldr	r1, [pc, #404]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d76:	4b63      	ldr	r3, [pc, #396]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0b8      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d020      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da0:	4b59      	ldr	r3, [pc, #356]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a58      	ldr	r2, [pc, #352]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003da6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003daa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db8:	4b53      	ldr	r3, [pc, #332]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	4a52      	ldr	r2, [pc, #328]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc4:	4b50      	ldr	r3, [pc, #320]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	494d      	ldr	r1, [pc, #308]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d040      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d115      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e07f      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d107      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e02:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e073      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e12:	4b3d      	ldr	r3, [pc, #244]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06b      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e22:	4b39      	ldr	r3, [pc, #228]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f023 0203 	bic.w	r2, r3, #3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4936      	ldr	r1, [pc, #216]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e34:	f7fe fb8c 	bl	8002550 <HAL_GetTick>
 8003e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3c:	f7fe fb88 	bl	8002550 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e053      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e52:	4b2d      	ldr	r3, [pc, #180]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 020c 	and.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d1eb      	bne.n	8003e3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e64:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d210      	bcs.n	8003e94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 020f 	bic.w	r2, r3, #15
 8003e7a:	4922      	ldr	r1, [pc, #136]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e032      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4916      	ldr	r1, [pc, #88]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	490e      	ldr	r1, [pc, #56]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ed2:	f000 f821 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	490a      	ldr	r1, [pc, #40]	; (8003f0c <HAL_RCC_ClockConfig+0x1cc>)
 8003ee4:	5ccb      	ldrb	r3, [r1, r3]
 8003ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eea:	4a09      	ldr	r2, [pc, #36]	; (8003f10 <HAL_RCC_ClockConfig+0x1d0>)
 8003eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eee:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <HAL_RCC_ClockConfig+0x1d4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fae8 	bl	80024c8 <HAL_InitTick>

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40023c00 	.word	0x40023c00
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	0800be7c 	.word	0x0800be7c
 8003f10:	20000018 	.word	0x20000018
 8003f14:	2000001c 	.word	0x2000001c

08003f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f1c:	b094      	sub	sp, #80	; 0x50
 8003f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	647b      	str	r3, [r7, #68]	; 0x44
 8003f24:	2300      	movs	r3, #0
 8003f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f28:	2300      	movs	r3, #0
 8003f2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f30:	4b79      	ldr	r3, [pc, #484]	; (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 030c 	and.w	r3, r3, #12
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d00d      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x40>
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	f200 80e1 	bhi.w	8004104 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0x34>
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d003      	beq.n	8003f52 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f4a:	e0db      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f4c:	4b73      	ldr	r3, [pc, #460]	; (800411c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f50:	e0db      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f52:	4b72      	ldr	r3, [pc, #456]	; (800411c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f56:	e0d8      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f58:	4b6f      	ldr	r3, [pc, #444]	; (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f60:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f62:	4b6d      	ldr	r3, [pc, #436]	; (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d063      	beq.n	8004036 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6e:	4b6a      	ldr	r3, [pc, #424]	; (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	099b      	lsrs	r3, r3, #6
 8003f74:	2200      	movs	r2, #0
 8003f76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f80:	633b      	str	r3, [r7, #48]	; 0x30
 8003f82:	2300      	movs	r3, #0
 8003f84:	637b      	str	r3, [r7, #52]	; 0x34
 8003f86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f8a:	4622      	mov	r2, r4
 8003f8c:	462b      	mov	r3, r5
 8003f8e:	f04f 0000 	mov.w	r0, #0
 8003f92:	f04f 0100 	mov.w	r1, #0
 8003f96:	0159      	lsls	r1, r3, #5
 8003f98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f9c:	0150      	lsls	r0, r2, #5
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	1a51      	subs	r1, r2, r1
 8003fa6:	6139      	str	r1, [r7, #16]
 8003fa8:	4629      	mov	r1, r5
 8003faa:	eb63 0301 	sbc.w	r3, r3, r1
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fbc:	4659      	mov	r1, fp
 8003fbe:	018b      	lsls	r3, r1, #6
 8003fc0:	4651      	mov	r1, sl
 8003fc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fc6:	4651      	mov	r1, sl
 8003fc8:	018a      	lsls	r2, r1, #6
 8003fca:	4651      	mov	r1, sl
 8003fcc:	ebb2 0801 	subs.w	r8, r2, r1
 8003fd0:	4659      	mov	r1, fp
 8003fd2:	eb63 0901 	sbc.w	r9, r3, r1
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fea:	4690      	mov	r8, r2
 8003fec:	4699      	mov	r9, r3
 8003fee:	4623      	mov	r3, r4
 8003ff0:	eb18 0303 	adds.w	r3, r8, r3
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	462b      	mov	r3, r5
 8003ff8:	eb49 0303 	adc.w	r3, r9, r3
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800400a:	4629      	mov	r1, r5
 800400c:	028b      	lsls	r3, r1, #10
 800400e:	4621      	mov	r1, r4
 8004010:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004014:	4621      	mov	r1, r4
 8004016:	028a      	lsls	r2, r1, #10
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800401e:	2200      	movs	r2, #0
 8004020:	62bb      	str	r3, [r7, #40]	; 0x28
 8004022:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004024:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004028:	f7fc fb1e 	bl	8000668 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4613      	mov	r3, r2
 8004032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004034:	e058      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004036:	4b38      	ldr	r3, [pc, #224]	; (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	099b      	lsrs	r3, r3, #6
 800403c:	2200      	movs	r2, #0
 800403e:	4618      	mov	r0, r3
 8004040:	4611      	mov	r1, r2
 8004042:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004046:	623b      	str	r3, [r7, #32]
 8004048:	2300      	movs	r3, #0
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
 800404c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004050:	4642      	mov	r2, r8
 8004052:	464b      	mov	r3, r9
 8004054:	f04f 0000 	mov.w	r0, #0
 8004058:	f04f 0100 	mov.w	r1, #0
 800405c:	0159      	lsls	r1, r3, #5
 800405e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004062:	0150      	lsls	r0, r2, #5
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4641      	mov	r1, r8
 800406a:	ebb2 0a01 	subs.w	sl, r2, r1
 800406e:	4649      	mov	r1, r9
 8004070:	eb63 0b01 	sbc.w	fp, r3, r1
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004080:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004084:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004088:	ebb2 040a 	subs.w	r4, r2, sl
 800408c:	eb63 050b 	sbc.w	r5, r3, fp
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	00eb      	lsls	r3, r5, #3
 800409a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800409e:	00e2      	lsls	r2, r4, #3
 80040a0:	4614      	mov	r4, r2
 80040a2:	461d      	mov	r5, r3
 80040a4:	4643      	mov	r3, r8
 80040a6:	18e3      	adds	r3, r4, r3
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	464b      	mov	r3, r9
 80040ac:	eb45 0303 	adc.w	r3, r5, r3
 80040b0:	607b      	str	r3, [r7, #4]
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040be:	4629      	mov	r1, r5
 80040c0:	028b      	lsls	r3, r1, #10
 80040c2:	4621      	mov	r1, r4
 80040c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040c8:	4621      	mov	r1, r4
 80040ca:	028a      	lsls	r2, r1, #10
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d2:	2200      	movs	r2, #0
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	61fa      	str	r2, [r7, #28]
 80040d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040dc:	f7fc fac4 	bl	8000668 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4613      	mov	r3, r2
 80040e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80040e8:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	3301      	adds	r3, #1
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80040f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004102:	e002      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <HAL_RCC_GetSysClockFreq+0x204>)
 8004106:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800410a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800410c:	4618      	mov	r0, r3
 800410e:	3750      	adds	r7, #80	; 0x50
 8004110:	46bd      	mov	sp, r7
 8004112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	00f42400 	.word	0x00f42400

08004120 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <HAL_RCC_GetHCLKFreq+0x14>)
 8004126:	681b      	ldr	r3, [r3, #0]
}
 8004128:	4618      	mov	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	20000018 	.word	0x20000018

08004138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800413c:	f7ff fff0 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 8004140:	4602      	mov	r2, r0
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	0a9b      	lsrs	r3, r3, #10
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	4903      	ldr	r1, [pc, #12]	; (800415c <HAL_RCC_GetPCLK1Freq+0x24>)
 800414e:	5ccb      	ldrb	r3, [r1, r3]
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40023800 	.word	0x40023800
 800415c:	0800be8c 	.word	0x0800be8c

08004160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004164:	f7ff ffdc 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 8004168:	4602      	mov	r2, r0
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	0b5b      	lsrs	r3, r3, #13
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	4903      	ldr	r1, [pc, #12]	; (8004184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004176:	5ccb      	ldrb	r3, [r1, r3]
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800417c:	4618      	mov	r0, r3
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40023800 	.word	0x40023800
 8004184:	0800be8c 	.word	0x0800be8c

08004188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d012      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041b0:	4b69      	ldr	r3, [pc, #420]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4a68      	ldr	r2, [pc, #416]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041ba:	6093      	str	r3, [r2, #8]
 80041bc:	4b66      	ldr	r3, [pc, #408]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c4:	4964      	ldr	r1, [pc, #400]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80041d2:	2301      	movs	r3, #1
 80041d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d017      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041e2:	4b5d      	ldr	r3, [pc, #372]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f0:	4959      	ldr	r1, [pc, #356]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004200:	d101      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004202:	2301      	movs	r3, #1
 8004204:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800420e:	2301      	movs	r3, #1
 8004210:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d017      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800421e:	4b4e      	ldr	r3, [pc, #312]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004224:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	494a      	ldr	r1, [pc, #296]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800423c:	d101      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800423e:	2301      	movs	r3, #1
 8004240:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800424a:	2301      	movs	r3, #1
 800424c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800425a:	2301      	movs	r3, #1
 800425c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 808b 	beq.w	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800426c:	4b3a      	ldr	r3, [pc, #232]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	4a39      	ldr	r2, [pc, #228]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004276:	6413      	str	r3, [r2, #64]	; 0x40
 8004278:	4b37      	ldr	r3, [pc, #220]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004284:	4b35      	ldr	r3, [pc, #212]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a34      	ldr	r2, [pc, #208]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800428a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004290:	f7fe f95e 	bl	8002550 <HAL_GetTick>
 8004294:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004298:	f7fe f95a 	bl	8002550 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e38f      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042aa:	4b2c      	ldr	r3, [pc, #176]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042b6:	4b28      	ldr	r3, [pc, #160]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d035      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d02e      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042d4:	4b20      	ldr	r3, [pc, #128]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042de:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ea:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	4a1a      	ldr	r2, [pc, #104]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042fc:	4b16      	ldr	r3, [pc, #88]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d114      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fe f922 	bl	8002550 <HAL_GetTick>
 800430c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430e:	e00a      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004310:	f7fe f91e 	bl	8002550 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e351      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0ee      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800433e:	d111      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800434e:	400b      	ands	r3, r1
 8004350:	4901      	ldr	r1, [pc, #4]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004352:	4313      	orrs	r3, r2
 8004354:	608b      	str	r3, [r1, #8]
 8004356:	e00b      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004358:	40023800 	.word	0x40023800
 800435c:	40007000 	.word	0x40007000
 8004360:	0ffffcff 	.word	0x0ffffcff
 8004364:	4bac      	ldr	r3, [pc, #688]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4aab      	ldr	r2, [pc, #684]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800436a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800436e:	6093      	str	r3, [r2, #8]
 8004370:	4ba9      	ldr	r3, [pc, #676]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437c:	49a6      	ldr	r1, [pc, #664]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800437e:	4313      	orrs	r3, r2
 8004380:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	d010      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800438e:	4ba2      	ldr	r3, [pc, #648]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004394:	4aa0      	ldr	r2, [pc, #640]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800439a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800439e:	4b9e      	ldr	r3, [pc, #632]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	499b      	ldr	r1, [pc, #620]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043bc:	4b96      	ldr	r3, [pc, #600]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ca:	4993      	ldr	r1, [pc, #588]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043de:	4b8e      	ldr	r3, [pc, #568]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ec:	498a      	ldr	r1, [pc, #552]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004400:	4b85      	ldr	r3, [pc, #532]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800440e:	4982      	ldr	r1, [pc, #520]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004422:	4b7d      	ldr	r3, [pc, #500]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004428:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	4979      	ldr	r1, [pc, #484]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004444:	4b74      	ldr	r3, [pc, #464]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	f023 0203 	bic.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	4971      	ldr	r1, [pc, #452]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004466:	4b6c      	ldr	r3, [pc, #432]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446c:	f023 020c 	bic.w	r2, r3, #12
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004474:	4968      	ldr	r1, [pc, #416]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004488:	4b63      	ldr	r3, [pc, #396]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	4960      	ldr	r1, [pc, #384]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044aa:	4b5b      	ldr	r3, [pc, #364]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b8:	4957      	ldr	r1, [pc, #348]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044cc:	4b52      	ldr	r3, [pc, #328]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	494f      	ldr	r1, [pc, #316]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80044ee:	4b4a      	ldr	r3, [pc, #296]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	4946      	ldr	r1, [pc, #280]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004510:	4b41      	ldr	r3, [pc, #260]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451e:	493e      	ldr	r1, [pc, #248]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004532:	4b39      	ldr	r3, [pc, #228]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004540:	4935      	ldr	r1, [pc, #212]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004554:	4b30      	ldr	r3, [pc, #192]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004562:	492d      	ldr	r1, [pc, #180]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d011      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004576:	4b28      	ldr	r3, [pc, #160]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004584:	4924      	ldr	r1, [pc, #144]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004594:	d101      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004596:	2301      	movs	r3, #1
 8004598:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80045a6:	2301      	movs	r3, #1
 80045a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045b6:	4b18      	ldr	r3, [pc, #96]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c4:	4914      	ldr	r1, [pc, #80]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e8:	490b      	ldr	r1, [pc, #44]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00f      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460c:	4902      	ldr	r1, [pc, #8]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004614:	e002      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004616:	bf00      	nop
 8004618:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00b      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004628:	4b8a      	ldr	r3, [pc, #552]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800462a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800462e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	4986      	ldr	r1, [pc, #536]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00b      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800464c:	4b81      	ldr	r3, [pc, #516]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800464e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004652:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800465c:	497d      	ldr	r1, [pc, #500]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d006      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80d6 	beq.w	8004824 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004678:	4b76      	ldr	r3, [pc, #472]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a75      	ldr	r2, [pc, #468]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004684:	f7fd ff64 	bl	8002550 <HAL_GetTick>
 8004688:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800468c:	f7fd ff60 	bl	8002550 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	; 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e195      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800469e:	4b6d      	ldr	r3, [pc, #436]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d021      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d11d      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046be:	4b65      	ldr	r3, [pc, #404]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c4:	0c1b      	lsrs	r3, r3, #16
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046cc:	4b61      	ldr	r3, [pc, #388]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d2:	0e1b      	lsrs	r3, r3, #24
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	019a      	lsls	r2, r3, #6
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	431a      	orrs	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	061b      	lsls	r3, r3, #24
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	071b      	lsls	r3, r3, #28
 80046f2:	4958      	ldr	r1, [pc, #352]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d004      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004718:	2b00      	cmp	r3, #0
 800471a:	d02e      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004724:	d129      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004726:	4b4b      	ldr	r3, [pc, #300]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004734:	4b47      	ldr	r3, [pc, #284]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473a:	0f1b      	lsrs	r3, r3, #28
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	019a      	lsls	r2, r3, #6
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	061b      	lsls	r3, r3, #24
 8004754:	431a      	orrs	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	071b      	lsls	r3, r3, #28
 800475a:	493e      	ldr	r1, [pc, #248]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004762:	4b3c      	ldr	r3, [pc, #240]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004768:	f023 021f 	bic.w	r2, r3, #31
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	3b01      	subs	r3, #1
 8004772:	4938      	ldr	r1, [pc, #224]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d01d      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004786:	4b33      	ldr	r3, [pc, #204]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478c:	0e1b      	lsrs	r3, r3, #24
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004794:	4b2f      	ldr	r3, [pc, #188]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479a:	0f1b      	lsrs	r3, r3, #28
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	019a      	lsls	r2, r3, #6
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	041b      	lsls	r3, r3, #16
 80047ae:	431a      	orrs	r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	061b      	lsls	r3, r3, #24
 80047b4:	431a      	orrs	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	071b      	lsls	r3, r3, #28
 80047ba:	4926      	ldr	r1, [pc, #152]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d011      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	019a      	lsls	r2, r3, #6
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	071b      	lsls	r3, r3, #28
 80047ea:	491a      	ldr	r1, [pc, #104]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047f2:	4b18      	ldr	r3, [pc, #96]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a17      	ldr	r2, [pc, #92]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fe:	f7fd fea7 	bl	8002550 <HAL_GetTick>
 8004802:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004804:	e008      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004806:	f7fd fea3 	bl	8002550 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b64      	cmp	r3, #100	; 0x64
 8004812:	d901      	bls.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e0d8      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004818:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b01      	cmp	r3, #1
 8004828:	f040 80ce 	bne.w	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800482c:	4b09      	ldr	r3, [pc, #36]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a08      	ldr	r2, [pc, #32]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004838:	f7fd fe8a 	bl	8002550 <HAL_GetTick>
 800483c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800483e:	e00b      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004840:	f7fd fe86 	bl	8002550 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d904      	bls.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e0bb      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004858:	4b5e      	ldr	r3, [pc, #376]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004864:	d0ec      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004882:	2b00      	cmp	r3, #0
 8004884:	d02e      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d12a      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800488e:	4b51      	ldr	r3, [pc, #324]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800489c:	4b4d      	ldr	r3, [pc, #308]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a2:	0f1b      	lsrs	r3, r3, #28
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	019a      	lsls	r2, r3, #6
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	431a      	orrs	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	071b      	lsls	r3, r3, #28
 80048c2:	4944      	ldr	r1, [pc, #272]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048ca:	4b42      	ldr	r3, [pc, #264]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	3b01      	subs	r3, #1
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	493d      	ldr	r1, [pc, #244]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d022      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048f8:	d11d      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048fa:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	0e1b      	lsrs	r3, r3, #24
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004908:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	0f1b      	lsrs	r3, r3, #28
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	019a      	lsls	r2, r3, #6
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	041b      	lsls	r3, r3, #16
 8004922:	431a      	orrs	r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	061b      	lsls	r3, r3, #24
 8004928:	431a      	orrs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	071b      	lsls	r3, r3, #28
 800492e:	4929      	ldr	r1, [pc, #164]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d028      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	0e1b      	lsrs	r3, r3, #24
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004950:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	019a      	lsls	r2, r3, #6
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	041b      	lsls	r3, r3, #16
 8004968:	431a      	orrs	r2, r3
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	061b      	lsls	r3, r3, #24
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	071b      	lsls	r3, r3, #28
 8004976:	4917      	ldr	r1, [pc, #92]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800497e:	4b15      	ldr	r3, [pc, #84]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004984:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	4911      	ldr	r1, [pc, #68]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004994:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0e      	ldr	r2, [pc, #56]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800499a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a0:	f7fd fdd6 	bl	8002550 <HAL_GetTick>
 80049a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049a8:	f7fd fdd2 	bl	8002550 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e007      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c6:	d1ef      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800

080049d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e09d      	b.n	8004b26 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d108      	bne.n	8004a04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049fa:	d009      	beq.n	8004a10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	61da      	str	r2, [r3, #28]
 8004a02:	e005      	b.n	8004a10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fd f8ca 	bl	8001bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a50:	d902      	bls.n	8004a58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	e002      	b.n	8004a5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a66:	d007      	beq.n	8004a78 <HAL_SPI_Init+0xa0>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a70:	d002      	beq.n	8004a78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aba:	ea42 0103 	orr.w	r1, r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	f003 0204 	and.w	r2, r3, #4
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004af4:	ea42 0103 	orr.w	r1, r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b088      	sub	sp, #32
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	603b      	str	r3, [r7, #0]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_SPI_Transmit+0x22>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e158      	b.n	8004e02 <HAL_SPI_Transmit+0x2d4>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b58:	f7fd fcfa 	bl	8002550 <HAL_GetTick>
 8004b5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d002      	beq.n	8004b74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b72:	e13d      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <HAL_SPI_Transmit+0x52>
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b84:	e134      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2203      	movs	r2, #3
 8004b8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	88fa      	ldrh	r2, [r7, #6]
 8004b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	88fa      	ldrh	r2, [r7, #6]
 8004ba4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bf0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d007      	beq.n	8004c10 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c18:	d94b      	bls.n	8004cb2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_SPI_Transmit+0xfa>
 8004c22:	8afb      	ldrh	r3, [r7, #22]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d13e      	bne.n	8004ca6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	881a      	ldrh	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	1c9a      	adds	r2, r3, #2
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c4c:	e02b      	b.n	8004ca6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d112      	bne.n	8004c82 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	881a      	ldrh	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	1c9a      	adds	r2, r3, #2
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c80:	e011      	b.n	8004ca6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c82:	f7fd fc65 	bl	8002550 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d803      	bhi.n	8004c9a <HAL_SPI_Transmit+0x16c>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d102      	bne.n	8004ca0 <HAL_SPI_Transmit+0x172>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ca4:	e0a4      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1ce      	bne.n	8004c4e <HAL_SPI_Transmit+0x120>
 8004cb0:	e07c      	b.n	8004dac <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_SPI_Transmit+0x192>
 8004cba:	8afb      	ldrh	r3, [r7, #22]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d170      	bne.n	8004da2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d912      	bls.n	8004cf0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	881a      	ldrh	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	1c9a      	adds	r2, r3, #2
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b02      	subs	r3, #2
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cee:	e058      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	330c      	adds	r3, #12
 8004cfa:	7812      	ldrb	r2, [r2, #0]
 8004cfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d16:	e044      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d12b      	bne.n	8004d7e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d912      	bls.n	8004d56 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	881a      	ldrh	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	1c9a      	adds	r2, r3, #2
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b02      	subs	r3, #2
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d54:	e025      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	330c      	adds	r3, #12
 8004d60:	7812      	ldrb	r2, [r2, #0]
 8004d62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d7c:	e011      	b.n	8004da2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d7e:	f7fd fbe7 	bl	8002550 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d803      	bhi.n	8004d96 <HAL_SPI_Transmit+0x268>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d102      	bne.n	8004d9c <HAL_SPI_Transmit+0x26e>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004da0:	e026      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1b5      	bne.n	8004d18 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fb5b 	bl	800546c <SPI_EndRxTxTransaction>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dca:	2300      	movs	r3, #0
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e000      	b.n	8004df0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004dee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e00:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3720      	adds	r7, #32
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b08a      	sub	sp, #40	; 0x28
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	607a      	str	r2, [r7, #4]
 8004e16:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_SPI_TransmitReceive+0x26>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e1fb      	b.n	8005228 <HAL_SPI_TransmitReceive+0x41e>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e38:	f7fd fb8a 	bl	8002550 <HAL_GetTick>
 8004e3c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e44:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004e4c:	887b      	ldrh	r3, [r7, #2]
 8004e4e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004e50:	887b      	ldrh	r3, [r7, #2]
 8004e52:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e54:	7efb      	ldrb	r3, [r7, #27]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d00e      	beq.n	8004e78 <HAL_SPI_TransmitReceive+0x6e>
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e60:	d106      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x66>
 8004e6a:	7efb      	ldrb	r3, [r7, #27]
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d003      	beq.n	8004e78 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004e70:	2302      	movs	r3, #2
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e76:	e1cd      	b.n	8005214 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <HAL_SPI_TransmitReceive+0x80>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <HAL_SPI_TransmitReceive+0x80>
 8004e84:	887b      	ldrh	r3, [r7, #2]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e90:	e1c0      	b.n	8005214 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d003      	beq.n	8004ea6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2205      	movs	r2, #5
 8004ea2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	887a      	ldrh	r2, [r7, #2]
 8004eb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	887a      	ldrh	r2, [r7, #2]
 8004ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	887a      	ldrh	r2, [r7, #2]
 8004ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	887a      	ldrh	r2, [r7, #2]
 8004ed2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ee8:	d802      	bhi.n	8004ef0 <HAL_SPI_TransmitReceive+0xe6>
 8004eea:	8a3b      	ldrh	r3, [r7, #16]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d908      	bls.n	8004f02 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004efe:	605a      	str	r2, [r3, #4]
 8004f00:	e007      	b.n	8004f12 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f10:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1c:	2b40      	cmp	r3, #64	; 0x40
 8004f1e:	d007      	beq.n	8004f30 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f38:	d97c      	bls.n	8005034 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_SPI_TransmitReceive+0x13e>
 8004f42:	8a7b      	ldrh	r3, [r7, #18]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d169      	bne.n	800501c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	881a      	ldrh	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	1c9a      	adds	r2, r3, #2
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f6c:	e056      	b.n	800501c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d11b      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x1aa>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d016      	beq.n	8004fb4 <HAL_SPI_TransmitReceive+0x1aa>
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d113      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	881a      	ldrh	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	1c9a      	adds	r2, r3, #2
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d11c      	bne.n	8004ffc <HAL_SPI_TransmitReceive+0x1f2>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d016      	beq.n	8004ffc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	b292      	uxth	r2, r2
 8004fda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	1c9a      	adds	r2, r3, #2
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ffc:	f7fd faa8 	bl	8002550 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005008:	429a      	cmp	r2, r3
 800500a:	d807      	bhi.n	800501c <HAL_SPI_TransmitReceive+0x212>
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d003      	beq.n	800501c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800501a:	e0fb      	b.n	8005214 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1a3      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x164>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d19d      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x164>
 8005032:	e0df      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_SPI_TransmitReceive+0x23a>
 800503c:	8a7b      	ldrh	r3, [r7, #18]
 800503e:	2b01      	cmp	r3, #1
 8005040:	f040 80cb 	bne.w	80051da <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	d912      	bls.n	8005074 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	881a      	ldrh	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	1c9a      	adds	r2, r3, #2
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b02      	subs	r3, #2
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005072:	e0b2      	b.n	80051da <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	7812      	ldrb	r2, [r2, #0]
 8005080:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800509a:	e09e      	b.n	80051da <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d134      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x30a>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d02f      	beq.n	8005114 <HAL_SPI_TransmitReceive+0x30a>
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d12c      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d912      	bls.n	80050ea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	881a      	ldrh	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	1c9a      	adds	r2, r3, #2
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b02      	subs	r3, #2
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050e8:	e012      	b.n	8005110 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	7812      	ldrb	r2, [r2, #0]
 80050f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b01      	cmp	r3, #1
 8005120:	d148      	bne.n	80051b4 <HAL_SPI_TransmitReceive+0x3aa>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d042      	beq.n	80051b4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	d923      	bls.n	8005182 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	b292      	uxth	r2, r2
 8005146:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	1c9a      	adds	r2, r3, #2
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b02      	subs	r3, #2
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	d81f      	bhi.n	80051b0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800517e:	605a      	str	r2, [r3, #4]
 8005180:	e016      	b.n	80051b0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f103 020c 	add.w	r2, r3, #12
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	7812      	ldrb	r2, [r2, #0]
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051b0:	2301      	movs	r3, #1
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051b4:	f7fd f9cc 	bl	8002550 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d803      	bhi.n	80051cc <HAL_SPI_TransmitReceive+0x3c2>
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d102      	bne.n	80051d2 <HAL_SPI_TransmitReceive+0x3c8>
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d103      	bne.n	80051da <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80051d8:	e01c      	b.n	8005214 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051de:	b29b      	uxth	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f47f af5b 	bne.w	800509c <HAL_SPI_TransmitReceive+0x292>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f47f af54 	bne.w	800509c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f937 	bl	800546c <SPI_EndRxTxTransaction>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d006      	beq.n	8005212 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	661a      	str	r2, [r3, #96]	; 0x60
 8005210:	e000      	b.n	8005214 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005212:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005228:	4618      	mov	r0, r3
 800522a:	3728      	adds	r7, #40	; 0x28
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	4613      	mov	r3, r2
 800523e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005240:	f7fd f986 	bl	8002550 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	4413      	add	r3, r2
 800524e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005250:	f7fd f97e 	bl	8002550 <HAL_GetTick>
 8005254:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005256:	4b39      	ldr	r3, [pc, #228]	; (800533c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	015b      	lsls	r3, r3, #5
 800525c:	0d1b      	lsrs	r3, r3, #20
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	fb02 f303 	mul.w	r3, r2, r3
 8005264:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005266:	e054      	b.n	8005312 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526e:	d050      	beq.n	8005312 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005270:	f7fd f96e 	bl	8002550 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	429a      	cmp	r2, r3
 800527e:	d902      	bls.n	8005286 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d13d      	bne.n	8005302 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005294:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800529e:	d111      	bne.n	80052c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a8:	d004      	beq.n	80052b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b2:	d107      	bne.n	80052c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052cc:	d10f      	bne.n	80052ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e017      	b.n	8005332 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	3b01      	subs	r3, #1
 8005310:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4013      	ands	r3, r2
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	429a      	cmp	r2, r3
 8005320:	bf0c      	ite	eq
 8005322:	2301      	moveq	r3, #1
 8005324:	2300      	movne	r3, #0
 8005326:	b2db      	uxtb	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	429a      	cmp	r2, r3
 800532e:	d19b      	bne.n	8005268 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000018 	.word	0x20000018

08005340 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	; 0x28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005352:	f7fd f8fd 	bl	8002550 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	4413      	add	r3, r2
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005362:	f7fd f8f5 	bl	8002550 <HAL_GetTick>
 8005366:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	330c      	adds	r3, #12
 800536e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005370:	4b3d      	ldr	r3, [pc, #244]	; (8005468 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	00da      	lsls	r2, r3, #3
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	0d1b      	lsrs	r3, r3, #20
 8005380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005388:	e060      	b.n	800544c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005390:	d107      	bne.n	80053a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d104      	bne.n	80053a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a8:	d050      	beq.n	800544c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053aa:	f7fd f8d1 	bl	8002550 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d902      	bls.n	80053c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d13d      	bne.n	800543c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d8:	d111      	bne.n	80053fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e2:	d004      	beq.n	80053ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ec:	d107      	bne.n	80053fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005406:	d10f      	bne.n	8005428 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005426:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e010      	b.n	800545e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	3b01      	subs	r3, #1
 800544a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4013      	ands	r3, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	429a      	cmp	r2, r3
 800545a:	d196      	bne.n	800538a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3728      	adds	r7, #40	; 0x28
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000018 	.word	0x20000018

0800546c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af02      	add	r7, sp, #8
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2200      	movs	r2, #0
 8005480:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f7ff ff5b 	bl	8005340 <SPI_WaitFifoStateUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005494:	f043 0220 	orr.w	r2, r3, #32
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e046      	b.n	800552e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054a0:	4b25      	ldr	r3, [pc, #148]	; (8005538 <SPI_EndRxTxTransaction+0xcc>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a25      	ldr	r2, [pc, #148]	; (800553c <SPI_EndRxTxTransaction+0xd0>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	0d5b      	lsrs	r3, r3, #21
 80054ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054b0:	fb02 f303 	mul.w	r3, r2, r3
 80054b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054be:	d112      	bne.n	80054e6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2200      	movs	r2, #0
 80054c8:	2180      	movs	r1, #128	; 0x80
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7ff feb0 	bl	8005230 <SPI_WaitFlagStateUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d016      	beq.n	8005504 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054da:	f043 0220 	orr.w	r2, r3, #32
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e023      	b.n	800552e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fc:	2b80      	cmp	r3, #128	; 0x80
 80054fe:	d0f2      	beq.n	80054e6 <SPI_EndRxTxTransaction+0x7a>
 8005500:	e000      	b.n	8005504 <SPI_EndRxTxTransaction+0x98>
        break;
 8005502:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2200      	movs	r2, #0
 800550c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f7ff ff15 	bl	8005340 <SPI_WaitFifoStateUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005520:	f043 0220 	orr.w	r2, r3, #32
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e000      	b.n	800552e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000018 	.word	0x20000018
 800553c:	165e9f81 	.word	0x165e9f81

08005540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e049      	b.n	80055e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fc fd7a 	bl	8002060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	4619      	mov	r1, r3
 800557e:	4610      	mov	r0, r2
 8005580:	f000 fa46 	bl	8005a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b02      	cmp	r3, #2
 8005602:	d122      	bne.n	800564a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b02      	cmp	r3, #2
 8005610:	d11b      	bne.n	800564a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f06f 0202 	mvn.w	r2, #2
 800561a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f9cf 	bl	80059d4 <HAL_TIM_IC_CaptureCallback>
 8005636:	e005      	b.n	8005644 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f9c1 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f9d2 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b04      	cmp	r3, #4
 8005656:	d122      	bne.n	800569e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b04      	cmp	r3, #4
 8005664:	d11b      	bne.n	800569e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f06f 0204 	mvn.w	r2, #4
 800566e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f9a5 	bl	80059d4 <HAL_TIM_IC_CaptureCallback>
 800568a:	e005      	b.n	8005698 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f997 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f9a8 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d122      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d11b      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f06f 0208 	mvn.w	r2, #8
 80056c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2204      	movs	r2, #4
 80056c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f97b 	bl	80059d4 <HAL_TIM_IC_CaptureCallback>
 80056de:	e005      	b.n	80056ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f96d 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f97e 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d122      	bne.n	8005746 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0310 	and.w	r3, r3, #16
 800570a:	2b10      	cmp	r3, #16
 800570c:	d11b      	bne.n	8005746 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f06f 0210 	mvn.w	r2, #16
 8005716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2208      	movs	r2, #8
 800571c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f951 	bl	80059d4 <HAL_TIM_IC_CaptureCallback>
 8005732:	e005      	b.n	8005740 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f943 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f954 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b01      	cmp	r3, #1
 8005752:	d10e      	bne.n	8005772 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b01      	cmp	r3, #1
 8005760:	d107      	bne.n	8005772 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f06f 0201 	mvn.w	r2, #1
 800576a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7fc fc9d 	bl	80020ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577c:	2b80      	cmp	r3, #128	; 0x80
 800577e:	d10e      	bne.n	800579e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578a:	2b80      	cmp	r3, #128	; 0x80
 800578c:	d107      	bne.n	800579e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fb0b 	bl	8005db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ac:	d10e      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b8:	2b80      	cmp	r3, #128	; 0x80
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fafe 	bl	8005dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d10e      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	d107      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f902 	bl	80059fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b20      	cmp	r3, #32
 8005804:	d10e      	bne.n	8005824 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b20      	cmp	r3, #32
 8005812:	d107      	bne.n	8005824 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0220 	mvn.w	r2, #32
 800581c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fabe 	bl	8005da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_TIM_ConfigClockSource+0x1c>
 8005844:	2302      	movs	r3, #2
 8005846:	e0b4      	b.n	80059b2 <HAL_TIM_ConfigClockSource+0x186>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	4b56      	ldr	r3, [pc, #344]	; (80059bc <HAL_TIM_ConfigClockSource+0x190>)
 8005864:	4013      	ands	r3, r2
 8005866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800586e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005880:	d03e      	beq.n	8005900 <HAL_TIM_ConfigClockSource+0xd4>
 8005882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005886:	f200 8087 	bhi.w	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588e:	f000 8086 	beq.w	800599e <HAL_TIM_ConfigClockSource+0x172>
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005896:	d87f      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 8005898:	2b70      	cmp	r3, #112	; 0x70
 800589a:	d01a      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0xa6>
 800589c:	2b70      	cmp	r3, #112	; 0x70
 800589e:	d87b      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058a0:	2b60      	cmp	r3, #96	; 0x60
 80058a2:	d050      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0x11a>
 80058a4:	2b60      	cmp	r3, #96	; 0x60
 80058a6:	d877      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058a8:	2b50      	cmp	r3, #80	; 0x50
 80058aa:	d03c      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0xfa>
 80058ac:	2b50      	cmp	r3, #80	; 0x50
 80058ae:	d873      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	d058      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x13a>
 80058b4:	2b40      	cmp	r3, #64	; 0x40
 80058b6:	d86f      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b30      	cmp	r3, #48	; 0x30
 80058ba:	d064      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058bc:	2b30      	cmp	r3, #48	; 0x30
 80058be:	d86b      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d060      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	d867      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d05c      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d05a      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058d0:	e062      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6899      	ldr	r1, [r3, #8]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f000 f9af 	bl	8005c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	609a      	str	r2, [r3, #8]
      break;
 80058fe:	e04f      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	6899      	ldr	r1, [r3, #8]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f000 f998 	bl	8005c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005922:	609a      	str	r2, [r3, #8]
      break;
 8005924:	e03c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6859      	ldr	r1, [r3, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	461a      	mov	r2, r3
 8005934:	f000 f90c 	bl	8005b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2150      	movs	r1, #80	; 0x50
 800593e:	4618      	mov	r0, r3
 8005940:	f000 f965 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 8005944:	e02c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6859      	ldr	r1, [r3, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	461a      	mov	r2, r3
 8005954:	f000 f92b 	bl	8005bae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2160      	movs	r1, #96	; 0x60
 800595e:	4618      	mov	r0, r3
 8005960:	f000 f955 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 8005964:	e01c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6859      	ldr	r1, [r3, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	461a      	mov	r2, r3
 8005974:	f000 f8ec 	bl	8005b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2140      	movs	r1, #64	; 0x40
 800597e:	4618      	mov	r0, r3
 8005980:	f000 f945 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 8005984:	e00c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4619      	mov	r1, r3
 8005990:	4610      	mov	r0, r2
 8005992:	f000 f93c 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 8005996:	e003      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	73fb      	strb	r3, [r7, #15]
      break;
 800599c:	e000      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800599e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	fffeff88 	.word	0xfffeff88

080059c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a40      	ldr	r2, [pc, #256]	; (8005b24 <TIM_Base_SetConfig+0x114>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d013      	beq.n	8005a50 <TIM_Base_SetConfig+0x40>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2e:	d00f      	beq.n	8005a50 <TIM_Base_SetConfig+0x40>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a3d      	ldr	r2, [pc, #244]	; (8005b28 <TIM_Base_SetConfig+0x118>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00b      	beq.n	8005a50 <TIM_Base_SetConfig+0x40>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a3c      	ldr	r2, [pc, #240]	; (8005b2c <TIM_Base_SetConfig+0x11c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d007      	beq.n	8005a50 <TIM_Base_SetConfig+0x40>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a3b      	ldr	r2, [pc, #236]	; (8005b30 <TIM_Base_SetConfig+0x120>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_Base_SetConfig+0x40>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a3a      	ldr	r2, [pc, #232]	; (8005b34 <TIM_Base_SetConfig+0x124>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d108      	bne.n	8005a62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2f      	ldr	r2, [pc, #188]	; (8005b24 <TIM_Base_SetConfig+0x114>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d02b      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a70:	d027      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a2c      	ldr	r2, [pc, #176]	; (8005b28 <TIM_Base_SetConfig+0x118>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d023      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a2b      	ldr	r2, [pc, #172]	; (8005b2c <TIM_Base_SetConfig+0x11c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d01f      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a2a      	ldr	r2, [pc, #168]	; (8005b30 <TIM_Base_SetConfig+0x120>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d01b      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a29      	ldr	r2, [pc, #164]	; (8005b34 <TIM_Base_SetConfig+0x124>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d017      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a28      	ldr	r2, [pc, #160]	; (8005b38 <TIM_Base_SetConfig+0x128>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d013      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a27      	ldr	r2, [pc, #156]	; (8005b3c <TIM_Base_SetConfig+0x12c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00f      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a26      	ldr	r2, [pc, #152]	; (8005b40 <TIM_Base_SetConfig+0x130>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00b      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a25      	ldr	r2, [pc, #148]	; (8005b44 <TIM_Base_SetConfig+0x134>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d007      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a24      	ldr	r2, [pc, #144]	; (8005b48 <TIM_Base_SetConfig+0x138>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d003      	beq.n	8005ac2 <TIM_Base_SetConfig+0xb2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a23      	ldr	r2, [pc, #140]	; (8005b4c <TIM_Base_SetConfig+0x13c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d108      	bne.n	8005ad4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a0a      	ldr	r2, [pc, #40]	; (8005b24 <TIM_Base_SetConfig+0x114>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d003      	beq.n	8005b08 <TIM_Base_SetConfig+0xf8>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a0c      	ldr	r2, [pc, #48]	; (8005b34 <TIM_Base_SetConfig+0x124>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d103      	bne.n	8005b10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	615a      	str	r2, [r3, #20]
}
 8005b16:	bf00      	nop
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40000400 	.word	0x40000400
 8005b2c:	40000800 	.word	0x40000800
 8005b30:	40000c00 	.word	0x40000c00
 8005b34:	40010400 	.word	0x40010400
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40014400 	.word	0x40014400
 8005b40:	40014800 	.word	0x40014800
 8005b44:	40001800 	.word	0x40001800
 8005b48:	40001c00 	.word	0x40001c00
 8005b4c:	40002000 	.word	0x40002000

08005b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	f023 0201 	bic.w	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f023 030a 	bic.w	r3, r3, #10
 8005b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	621a      	str	r2, [r3, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b087      	sub	sp, #28
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f023 0210 	bic.w	r2, r3, #16
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	031b      	lsls	r3, r3, #12
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f043 0307 	orr.w	r3, r3, #7
 8005c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	609a      	str	r2, [r3, #8]
}
 8005c38:	bf00      	nop
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	021a      	lsls	r2, r3, #8
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	431a      	orrs	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	609a      	str	r2, [r3, #8]
}
 8005c78:	bf00      	nop
 8005c7a:	371c      	adds	r7, #28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e06d      	b.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a30      	ldr	r2, [pc, #192]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a2f      	ldr	r2, [pc, #188]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d108      	bne.n	8005ce2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a20      	ldr	r2, [pc, #128]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d022      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0e:	d01d      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d018      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1c      	ldr	r2, [pc, #112]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d013      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00e      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a15      	ldr	r2, [pc, #84]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d009      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a16      	ldr	r2, [pc, #88]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a15      	ldr	r2, [pc, #84]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d10c      	bne.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	40010000 	.word	0x40010000
 8005d88:	40010400 	.word	0x40010400
 8005d8c:	40000400 	.word	0x40000400
 8005d90:	40000800 	.word	0x40000800
 8005d94:	40000c00 	.word	0x40000c00
 8005d98:	40014000 	.word	0x40014000
 8005d9c:	40001800 	.word	0x40001800

08005da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e040      	b.n	8005e70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fc f9b6 	bl	8002170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2224      	movs	r2, #36	; 0x24
 8005e08:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0201 	bic.w	r2, r2, #1
 8005e18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fbd6 	bl	80065cc <UART_SetConfig>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e022      	b.n	8005e70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fe2e 	bl	8006a94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0201 	orr.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 feb5 	bl	8006bd8 <UART_CheckIdleState>
 8005e6e:	4603      	mov	r3, r0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b08b      	sub	sp, #44	; 0x2c
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	4613      	mov	r3, r2
 8005e84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	d147      	bne.n	8005f1e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <HAL_UART_Transmit_IT+0x22>
 8005e94:	88fb      	ldrh	r3, [r7, #6]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e040      	b.n	8005f20 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	88fa      	ldrh	r2, [r7, #6]
 8005ea8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	88fa      	ldrh	r2, [r7, #6]
 8005eb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2221      	movs	r2, #33	; 0x21
 8005ec6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed0:	d107      	bne.n	8005ee2 <HAL_UART_Transmit_IT+0x6a>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d103      	bne.n	8005ee2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <HAL_UART_Transmit_IT+0xb4>)
 8005ede:	66da      	str	r2, [r3, #108]	; 0x6c
 8005ee0:	e002      	b.n	8005ee8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4a12      	ldr	r2, [pc, #72]	; (8005f30 <HAL_UART_Transmit_IT+0xb8>)
 8005ee6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	623b      	str	r3, [r7, #32]
 8005f08:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	69f9      	ldr	r1, [r7, #28]
 8005f0c:	6a3a      	ldr	r2, [r7, #32]
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e6      	bne.n	8005ee8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e000      	b.n	8005f20 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005f1e:	2302      	movs	r3, #2
  }
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	372c      	adds	r7, #44	; 0x2c
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	08007137 	.word	0x08007137
 8005f30:	08007081 	.word	0x08007081

08005f34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	; 0x28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f48:	2b20      	cmp	r3, #32
 8005f4a:	d132      	bne.n	8005fb2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_UART_Receive_IT+0x24>
 8005f52:	88fb      	ldrh	r3, [r7, #6]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e02b      	b.n	8005fb4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d018      	beq.n	8005fa2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	623b      	str	r3, [r7, #32]
 8005f90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	69f9      	ldr	r1, [r7, #28]
 8005f94:	6a3a      	ldr	r2, [r7, #32]
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e6      	bne.n	8005f70 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005fa2:	88fb      	ldrh	r3, [r7, #6]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 ff29 	bl	8006e00 <UART_Start_Receive_IT>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	e000      	b.n	8005fb4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005fb2:	2302      	movs	r3, #2
  }
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3728      	adds	r7, #40	; 0x28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b0ba      	sub	sp, #232	; 0xe8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005fe2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005fe6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005fea:	4013      	ands	r3, r2
 8005fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d115      	bne.n	8006024 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00f      	beq.n	8006024 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b00      	cmp	r3, #0
 800600e:	d009      	beq.n	8006024 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 82ac 	beq.w	8006572 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	4798      	blx	r3
      }
      return;
 8006022:	e2a6      	b.n	8006572 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006024:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8117 	beq.w	800625c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800602e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800603a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800603e:	4b85      	ldr	r3, [pc, #532]	; (8006254 <HAL_UART_IRQHandler+0x298>)
 8006040:	4013      	ands	r3, r2
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 810a 	beq.w	800625c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d011      	beq.n	8006078 <HAL_UART_IRQHandler+0xbc>
 8006054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00b      	beq.n	8006078 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2201      	movs	r2, #1
 8006066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800606e:	f043 0201 	orr.w	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d011      	beq.n	80060a8 <HAL_UART_IRQHandler+0xec>
 8006084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00b      	beq.n	80060a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2202      	movs	r2, #2
 8006096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800609e:	f043 0204 	orr.w	r2, r3, #4
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d011      	beq.n	80060d8 <HAL_UART_IRQHandler+0x11c>
 80060b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00b      	beq.n	80060d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2204      	movs	r2, #4
 80060c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ce:	f043 0202 	orr.w	r2, r3, #2
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d017      	beq.n	8006114 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d105      	bne.n	80060fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80060f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00b      	beq.n	8006114 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2208      	movs	r2, #8
 8006102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800610a:	f043 0208 	orr.w	r2, r3, #8
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800611c:	2b00      	cmp	r3, #0
 800611e:	d012      	beq.n	8006146 <HAL_UART_IRQHandler+0x18a>
 8006120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006124:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00c      	beq.n	8006146 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006134:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800613c:	f043 0220 	orr.w	r2, r3, #32
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 8212 	beq.w	8006576 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00d      	beq.n	800617a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800615e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d007      	beq.n	800617a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006180:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	d005      	beq.n	800619e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006196:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800619a:	2b00      	cmp	r3, #0
 800619c:	d04f      	beq.n	800623e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fef4 	bl	8006f8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ae:	2b40      	cmp	r3, #64	; 0x40
 80061b0:	d141      	bne.n	8006236 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3308      	adds	r3, #8
 80061b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3308      	adds	r3, #8
 80061da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1d9      	bne.n	80061b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006202:	2b00      	cmp	r3, #0
 8006204:	d013      	beq.n	800622e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620a:	4a13      	ldr	r2, [pc, #76]	; (8006258 <HAL_UART_IRQHandler+0x29c>)
 800620c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006212:	4618      	mov	r0, r3
 8006214:	f7fc fe90 	bl	8002f38 <HAL_DMA_Abort_IT>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d017      	beq.n	800624e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006228:	4610      	mov	r0, r2
 800622a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622c:	e00f      	b.n	800624e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f9ac 	bl	800658c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006234:	e00b      	b.n	800624e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f9a8 	bl	800658c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623c:	e007      	b.n	800624e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f9a4 	bl	800658c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800624c:	e193      	b.n	8006576 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800624e:	bf00      	nop
    return;
 8006250:	e191      	b.n	8006576 <HAL_UART_IRQHandler+0x5ba>
 8006252:	bf00      	nop
 8006254:	04000120 	.word	0x04000120
 8006258:	08007055 	.word	0x08007055

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006260:	2b01      	cmp	r3, #1
 8006262:	f040 814c 	bne.w	80064fe <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626a:	f003 0310 	and.w	r3, r3, #16
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 8145 	beq.w	80064fe <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006278:	f003 0310 	and.w	r3, r3, #16
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 813e 	beq.w	80064fe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2210      	movs	r2, #16
 8006288:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006294:	2b40      	cmp	r3, #64	; 0x40
 8006296:	f040 80b6 	bne.w	8006406 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 8165 	beq.w	800657a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062ba:	429a      	cmp	r2, r3
 80062bc:	f080 815d 	bcs.w	800657a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d4:	f000 8086 	beq.w	80063e4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	461a      	mov	r2, r3
 80062fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006302:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006306:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800630e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800631a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1da      	bne.n	80062d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3308      	adds	r3, #8
 8006328:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3308      	adds	r3, #8
 8006342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006346:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800634a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800634e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e1      	bne.n	8006322 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3308      	adds	r3, #8
 8006364:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800636e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3308      	adds	r3, #8
 800637e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006382:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006384:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006388:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e3      	bne.n	800635e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b4:	f023 0310 	bic.w	r3, r3, #16
 80063b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80063c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e4      	bne.n	80063a4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fc fd3a 	bl	8002e58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	4619      	mov	r1, r3
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f8ce 	bl	80065a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006404:	e0b9      	b.n	800657a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006412:	b29b      	uxth	r3, r3
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006420:	b29b      	uxth	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 80ab 	beq.w	800657e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 80a6 	beq.w	800657e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006442:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006454:	647b      	str	r3, [r7, #68]	; 0x44
 8006456:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800645a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e4      	bne.n	8006432 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3308      	adds	r3, #8
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	e853 3f00 	ldrex	r3, [r3]
 8006476:	623b      	str	r3, [r7, #32]
   return(result);
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	f023 0301 	bic.w	r3, r3, #1
 800647e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3308      	adds	r3, #8
 8006488:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800648c:	633a      	str	r2, [r7, #48]	; 0x30
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e3      	bne.n	8006468 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f023 0310 	bic.w	r3, r3, #16
 80064c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064d6:	61fb      	str	r3, [r7, #28]
 80064d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	69b9      	ldr	r1, [r7, #24]
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	617b      	str	r3, [r7, #20]
   return(result);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e4      	bne.n	80064b4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2202      	movs	r2, #2
 80064ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f852 	bl	80065a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064fc:	e03f      	b.n	800657e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00e      	beq.n	8006528 <HAL_UART_IRQHandler+0x56c>
 800650a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800650e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d008      	beq.n	8006528 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800651e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f849 	bl	80065b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006526:	e02d      	b.n	8006584 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00e      	beq.n	8006552 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01c      	beq.n	8006582 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	4798      	blx	r3
    }
    return;
 8006550:	e017      	b.n	8006582 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d012      	beq.n	8006584 <HAL_UART_IRQHandler+0x5c8>
 800655e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00c      	beq.n	8006584 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fe43 	bl	80071f6 <UART_EndTransmit_IT>
    return;
 8006570:	e008      	b.n	8006584 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006572:	bf00      	nop
 8006574:	e006      	b.n	8006584 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006576:	bf00      	nop
 8006578:	e004      	b.n	8006584 <HAL_UART_IRQHandler+0x5c8>
      return;
 800657a:	bf00      	nop
 800657c:	e002      	b.n	8006584 <HAL_UART_IRQHandler+0x5c8>
      return;
 800657e:	bf00      	nop
 8006580:	e000      	b.n	8006584 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006582:	bf00      	nop
  }

}
 8006584:	37e8      	adds	r7, #232	; 0xe8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop

0800658c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	431a      	orrs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	4ba6      	ldr	r3, [pc, #664]	; (8006890 <UART_SetConfig+0x2c4>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6812      	ldr	r2, [r2, #0]
 80065fe:	6979      	ldr	r1, [r7, #20]
 8006600:	430b      	orrs	r3, r1
 8006602:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	430a      	orrs	r2, r1
 800663c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a94      	ldr	r2, [pc, #592]	; (8006894 <UART_SetConfig+0x2c8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d120      	bne.n	800668a <UART_SetConfig+0xbe>
 8006648:	4b93      	ldr	r3, [pc, #588]	; (8006898 <UART_SetConfig+0x2cc>)
 800664a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	2b03      	cmp	r3, #3
 8006654:	d816      	bhi.n	8006684 <UART_SetConfig+0xb8>
 8006656:	a201      	add	r2, pc, #4	; (adr r2, 800665c <UART_SetConfig+0x90>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	0800666d 	.word	0x0800666d
 8006660:	08006679 	.word	0x08006679
 8006664:	08006673 	.word	0x08006673
 8006668:	0800667f 	.word	0x0800667f
 800666c:	2301      	movs	r3, #1
 800666e:	77fb      	strb	r3, [r7, #31]
 8006670:	e150      	b.n	8006914 <UART_SetConfig+0x348>
 8006672:	2302      	movs	r3, #2
 8006674:	77fb      	strb	r3, [r7, #31]
 8006676:	e14d      	b.n	8006914 <UART_SetConfig+0x348>
 8006678:	2304      	movs	r3, #4
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	e14a      	b.n	8006914 <UART_SetConfig+0x348>
 800667e:	2308      	movs	r3, #8
 8006680:	77fb      	strb	r3, [r7, #31]
 8006682:	e147      	b.n	8006914 <UART_SetConfig+0x348>
 8006684:	2310      	movs	r3, #16
 8006686:	77fb      	strb	r3, [r7, #31]
 8006688:	e144      	b.n	8006914 <UART_SetConfig+0x348>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a83      	ldr	r2, [pc, #524]	; (800689c <UART_SetConfig+0x2d0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d132      	bne.n	80066fa <UART_SetConfig+0x12e>
 8006694:	4b80      	ldr	r3, [pc, #512]	; (8006898 <UART_SetConfig+0x2cc>)
 8006696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669a:	f003 030c 	and.w	r3, r3, #12
 800669e:	2b0c      	cmp	r3, #12
 80066a0:	d828      	bhi.n	80066f4 <UART_SetConfig+0x128>
 80066a2:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <UART_SetConfig+0xdc>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066dd 	.word	0x080066dd
 80066ac:	080066f5 	.word	0x080066f5
 80066b0:	080066f5 	.word	0x080066f5
 80066b4:	080066f5 	.word	0x080066f5
 80066b8:	080066e9 	.word	0x080066e9
 80066bc:	080066f5 	.word	0x080066f5
 80066c0:	080066f5 	.word	0x080066f5
 80066c4:	080066f5 	.word	0x080066f5
 80066c8:	080066e3 	.word	0x080066e3
 80066cc:	080066f5 	.word	0x080066f5
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	080066f5 	.word	0x080066f5
 80066d8:	080066ef 	.word	0x080066ef
 80066dc:	2300      	movs	r3, #0
 80066de:	77fb      	strb	r3, [r7, #31]
 80066e0:	e118      	b.n	8006914 <UART_SetConfig+0x348>
 80066e2:	2302      	movs	r3, #2
 80066e4:	77fb      	strb	r3, [r7, #31]
 80066e6:	e115      	b.n	8006914 <UART_SetConfig+0x348>
 80066e8:	2304      	movs	r3, #4
 80066ea:	77fb      	strb	r3, [r7, #31]
 80066ec:	e112      	b.n	8006914 <UART_SetConfig+0x348>
 80066ee:	2308      	movs	r3, #8
 80066f0:	77fb      	strb	r3, [r7, #31]
 80066f2:	e10f      	b.n	8006914 <UART_SetConfig+0x348>
 80066f4:	2310      	movs	r3, #16
 80066f6:	77fb      	strb	r3, [r7, #31]
 80066f8:	e10c      	b.n	8006914 <UART_SetConfig+0x348>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a68      	ldr	r2, [pc, #416]	; (80068a0 <UART_SetConfig+0x2d4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d120      	bne.n	8006746 <UART_SetConfig+0x17a>
 8006704:	4b64      	ldr	r3, [pc, #400]	; (8006898 <UART_SetConfig+0x2cc>)
 8006706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800670e:	2b30      	cmp	r3, #48	; 0x30
 8006710:	d013      	beq.n	800673a <UART_SetConfig+0x16e>
 8006712:	2b30      	cmp	r3, #48	; 0x30
 8006714:	d814      	bhi.n	8006740 <UART_SetConfig+0x174>
 8006716:	2b20      	cmp	r3, #32
 8006718:	d009      	beq.n	800672e <UART_SetConfig+0x162>
 800671a:	2b20      	cmp	r3, #32
 800671c:	d810      	bhi.n	8006740 <UART_SetConfig+0x174>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <UART_SetConfig+0x15c>
 8006722:	2b10      	cmp	r3, #16
 8006724:	d006      	beq.n	8006734 <UART_SetConfig+0x168>
 8006726:	e00b      	b.n	8006740 <UART_SetConfig+0x174>
 8006728:	2300      	movs	r3, #0
 800672a:	77fb      	strb	r3, [r7, #31]
 800672c:	e0f2      	b.n	8006914 <UART_SetConfig+0x348>
 800672e:	2302      	movs	r3, #2
 8006730:	77fb      	strb	r3, [r7, #31]
 8006732:	e0ef      	b.n	8006914 <UART_SetConfig+0x348>
 8006734:	2304      	movs	r3, #4
 8006736:	77fb      	strb	r3, [r7, #31]
 8006738:	e0ec      	b.n	8006914 <UART_SetConfig+0x348>
 800673a:	2308      	movs	r3, #8
 800673c:	77fb      	strb	r3, [r7, #31]
 800673e:	e0e9      	b.n	8006914 <UART_SetConfig+0x348>
 8006740:	2310      	movs	r3, #16
 8006742:	77fb      	strb	r3, [r7, #31]
 8006744:	e0e6      	b.n	8006914 <UART_SetConfig+0x348>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a56      	ldr	r2, [pc, #344]	; (80068a4 <UART_SetConfig+0x2d8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d120      	bne.n	8006792 <UART_SetConfig+0x1c6>
 8006750:	4b51      	ldr	r3, [pc, #324]	; (8006898 <UART_SetConfig+0x2cc>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006756:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800675a:	2bc0      	cmp	r3, #192	; 0xc0
 800675c:	d013      	beq.n	8006786 <UART_SetConfig+0x1ba>
 800675e:	2bc0      	cmp	r3, #192	; 0xc0
 8006760:	d814      	bhi.n	800678c <UART_SetConfig+0x1c0>
 8006762:	2b80      	cmp	r3, #128	; 0x80
 8006764:	d009      	beq.n	800677a <UART_SetConfig+0x1ae>
 8006766:	2b80      	cmp	r3, #128	; 0x80
 8006768:	d810      	bhi.n	800678c <UART_SetConfig+0x1c0>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <UART_SetConfig+0x1a8>
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	d006      	beq.n	8006780 <UART_SetConfig+0x1b4>
 8006772:	e00b      	b.n	800678c <UART_SetConfig+0x1c0>
 8006774:	2300      	movs	r3, #0
 8006776:	77fb      	strb	r3, [r7, #31]
 8006778:	e0cc      	b.n	8006914 <UART_SetConfig+0x348>
 800677a:	2302      	movs	r3, #2
 800677c:	77fb      	strb	r3, [r7, #31]
 800677e:	e0c9      	b.n	8006914 <UART_SetConfig+0x348>
 8006780:	2304      	movs	r3, #4
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e0c6      	b.n	8006914 <UART_SetConfig+0x348>
 8006786:	2308      	movs	r3, #8
 8006788:	77fb      	strb	r3, [r7, #31]
 800678a:	e0c3      	b.n	8006914 <UART_SetConfig+0x348>
 800678c:	2310      	movs	r3, #16
 800678e:	77fb      	strb	r3, [r7, #31]
 8006790:	e0c0      	b.n	8006914 <UART_SetConfig+0x348>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a44      	ldr	r2, [pc, #272]	; (80068a8 <UART_SetConfig+0x2dc>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d125      	bne.n	80067e8 <UART_SetConfig+0x21c>
 800679c:	4b3e      	ldr	r3, [pc, #248]	; (8006898 <UART_SetConfig+0x2cc>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067aa:	d017      	beq.n	80067dc <UART_SetConfig+0x210>
 80067ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067b0:	d817      	bhi.n	80067e2 <UART_SetConfig+0x216>
 80067b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b6:	d00b      	beq.n	80067d0 <UART_SetConfig+0x204>
 80067b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067bc:	d811      	bhi.n	80067e2 <UART_SetConfig+0x216>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <UART_SetConfig+0x1fe>
 80067c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c6:	d006      	beq.n	80067d6 <UART_SetConfig+0x20a>
 80067c8:	e00b      	b.n	80067e2 <UART_SetConfig+0x216>
 80067ca:	2300      	movs	r3, #0
 80067cc:	77fb      	strb	r3, [r7, #31]
 80067ce:	e0a1      	b.n	8006914 <UART_SetConfig+0x348>
 80067d0:	2302      	movs	r3, #2
 80067d2:	77fb      	strb	r3, [r7, #31]
 80067d4:	e09e      	b.n	8006914 <UART_SetConfig+0x348>
 80067d6:	2304      	movs	r3, #4
 80067d8:	77fb      	strb	r3, [r7, #31]
 80067da:	e09b      	b.n	8006914 <UART_SetConfig+0x348>
 80067dc:	2308      	movs	r3, #8
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e098      	b.n	8006914 <UART_SetConfig+0x348>
 80067e2:	2310      	movs	r3, #16
 80067e4:	77fb      	strb	r3, [r7, #31]
 80067e6:	e095      	b.n	8006914 <UART_SetConfig+0x348>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a2f      	ldr	r2, [pc, #188]	; (80068ac <UART_SetConfig+0x2e0>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d125      	bne.n	800683e <UART_SetConfig+0x272>
 80067f2:	4b29      	ldr	r3, [pc, #164]	; (8006898 <UART_SetConfig+0x2cc>)
 80067f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006800:	d017      	beq.n	8006832 <UART_SetConfig+0x266>
 8006802:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006806:	d817      	bhi.n	8006838 <UART_SetConfig+0x26c>
 8006808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800680c:	d00b      	beq.n	8006826 <UART_SetConfig+0x25a>
 800680e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006812:	d811      	bhi.n	8006838 <UART_SetConfig+0x26c>
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <UART_SetConfig+0x254>
 8006818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800681c:	d006      	beq.n	800682c <UART_SetConfig+0x260>
 800681e:	e00b      	b.n	8006838 <UART_SetConfig+0x26c>
 8006820:	2301      	movs	r3, #1
 8006822:	77fb      	strb	r3, [r7, #31]
 8006824:	e076      	b.n	8006914 <UART_SetConfig+0x348>
 8006826:	2302      	movs	r3, #2
 8006828:	77fb      	strb	r3, [r7, #31]
 800682a:	e073      	b.n	8006914 <UART_SetConfig+0x348>
 800682c:	2304      	movs	r3, #4
 800682e:	77fb      	strb	r3, [r7, #31]
 8006830:	e070      	b.n	8006914 <UART_SetConfig+0x348>
 8006832:	2308      	movs	r3, #8
 8006834:	77fb      	strb	r3, [r7, #31]
 8006836:	e06d      	b.n	8006914 <UART_SetConfig+0x348>
 8006838:	2310      	movs	r3, #16
 800683a:	77fb      	strb	r3, [r7, #31]
 800683c:	e06a      	b.n	8006914 <UART_SetConfig+0x348>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1b      	ldr	r2, [pc, #108]	; (80068b0 <UART_SetConfig+0x2e4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d138      	bne.n	80068ba <UART_SetConfig+0x2ee>
 8006848:	4b13      	ldr	r3, [pc, #76]	; (8006898 <UART_SetConfig+0x2cc>)
 800684a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800684e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006852:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006856:	d017      	beq.n	8006888 <UART_SetConfig+0x2bc>
 8006858:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800685c:	d82a      	bhi.n	80068b4 <UART_SetConfig+0x2e8>
 800685e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006862:	d00b      	beq.n	800687c <UART_SetConfig+0x2b0>
 8006864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006868:	d824      	bhi.n	80068b4 <UART_SetConfig+0x2e8>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <UART_SetConfig+0x2aa>
 800686e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006872:	d006      	beq.n	8006882 <UART_SetConfig+0x2b6>
 8006874:	e01e      	b.n	80068b4 <UART_SetConfig+0x2e8>
 8006876:	2300      	movs	r3, #0
 8006878:	77fb      	strb	r3, [r7, #31]
 800687a:	e04b      	b.n	8006914 <UART_SetConfig+0x348>
 800687c:	2302      	movs	r3, #2
 800687e:	77fb      	strb	r3, [r7, #31]
 8006880:	e048      	b.n	8006914 <UART_SetConfig+0x348>
 8006882:	2304      	movs	r3, #4
 8006884:	77fb      	strb	r3, [r7, #31]
 8006886:	e045      	b.n	8006914 <UART_SetConfig+0x348>
 8006888:	2308      	movs	r3, #8
 800688a:	77fb      	strb	r3, [r7, #31]
 800688c:	e042      	b.n	8006914 <UART_SetConfig+0x348>
 800688e:	bf00      	nop
 8006890:	efff69f3 	.word	0xefff69f3
 8006894:	40011000 	.word	0x40011000
 8006898:	40023800 	.word	0x40023800
 800689c:	40004400 	.word	0x40004400
 80068a0:	40004800 	.word	0x40004800
 80068a4:	40004c00 	.word	0x40004c00
 80068a8:	40005000 	.word	0x40005000
 80068ac:	40011400 	.word	0x40011400
 80068b0:	40007800 	.word	0x40007800
 80068b4:	2310      	movs	r3, #16
 80068b6:	77fb      	strb	r3, [r7, #31]
 80068b8:	e02c      	b.n	8006914 <UART_SetConfig+0x348>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a72      	ldr	r2, [pc, #456]	; (8006a88 <UART_SetConfig+0x4bc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d125      	bne.n	8006910 <UART_SetConfig+0x344>
 80068c4:	4b71      	ldr	r3, [pc, #452]	; (8006a8c <UART_SetConfig+0x4c0>)
 80068c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068d2:	d017      	beq.n	8006904 <UART_SetConfig+0x338>
 80068d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068d8:	d817      	bhi.n	800690a <UART_SetConfig+0x33e>
 80068da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068de:	d00b      	beq.n	80068f8 <UART_SetConfig+0x32c>
 80068e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e4:	d811      	bhi.n	800690a <UART_SetConfig+0x33e>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <UART_SetConfig+0x326>
 80068ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068ee:	d006      	beq.n	80068fe <UART_SetConfig+0x332>
 80068f0:	e00b      	b.n	800690a <UART_SetConfig+0x33e>
 80068f2:	2300      	movs	r3, #0
 80068f4:	77fb      	strb	r3, [r7, #31]
 80068f6:	e00d      	b.n	8006914 <UART_SetConfig+0x348>
 80068f8:	2302      	movs	r3, #2
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e00a      	b.n	8006914 <UART_SetConfig+0x348>
 80068fe:	2304      	movs	r3, #4
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e007      	b.n	8006914 <UART_SetConfig+0x348>
 8006904:	2308      	movs	r3, #8
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e004      	b.n	8006914 <UART_SetConfig+0x348>
 800690a:	2310      	movs	r3, #16
 800690c:	77fb      	strb	r3, [r7, #31]
 800690e:	e001      	b.n	8006914 <UART_SetConfig+0x348>
 8006910:	2310      	movs	r3, #16
 8006912:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800691c:	d15b      	bne.n	80069d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800691e:	7ffb      	ldrb	r3, [r7, #31]
 8006920:	2b08      	cmp	r3, #8
 8006922:	d828      	bhi.n	8006976 <UART_SetConfig+0x3aa>
 8006924:	a201      	add	r2, pc, #4	; (adr r2, 800692c <UART_SetConfig+0x360>)
 8006926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692a:	bf00      	nop
 800692c:	08006951 	.word	0x08006951
 8006930:	08006959 	.word	0x08006959
 8006934:	08006961 	.word	0x08006961
 8006938:	08006977 	.word	0x08006977
 800693c:	08006967 	.word	0x08006967
 8006940:	08006977 	.word	0x08006977
 8006944:	08006977 	.word	0x08006977
 8006948:	08006977 	.word	0x08006977
 800694c:	0800696f 	.word	0x0800696f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006950:	f7fd fbf2 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8006954:	61b8      	str	r0, [r7, #24]
        break;
 8006956:	e013      	b.n	8006980 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006958:	f7fd fc02 	bl	8004160 <HAL_RCC_GetPCLK2Freq>
 800695c:	61b8      	str	r0, [r7, #24]
        break;
 800695e:	e00f      	b.n	8006980 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006960:	4b4b      	ldr	r3, [pc, #300]	; (8006a90 <UART_SetConfig+0x4c4>)
 8006962:	61bb      	str	r3, [r7, #24]
        break;
 8006964:	e00c      	b.n	8006980 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006966:	f7fd fad7 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 800696a:	61b8      	str	r0, [r7, #24]
        break;
 800696c:	e008      	b.n	8006980 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006972:	61bb      	str	r3, [r7, #24]
        break;
 8006974:	e004      	b.n	8006980 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	77bb      	strb	r3, [r7, #30]
        break;
 800697e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d074      	beq.n	8006a70 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	005a      	lsls	r2, r3, #1
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	085b      	lsrs	r3, r3, #1
 8006990:	441a      	add	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	fbb2 f3f3 	udiv	r3, r2, r3
 800699a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	2b0f      	cmp	r3, #15
 80069a0:	d916      	bls.n	80069d0 <UART_SetConfig+0x404>
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a8:	d212      	bcs.n	80069d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	f023 030f 	bic.w	r3, r3, #15
 80069b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	b29a      	uxth	r2, r3
 80069c0:	89fb      	ldrh	r3, [r7, #14]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	89fa      	ldrh	r2, [r7, #14]
 80069cc:	60da      	str	r2, [r3, #12]
 80069ce:	e04f      	b.n	8006a70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	77bb      	strb	r3, [r7, #30]
 80069d4:	e04c      	b.n	8006a70 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069d6:	7ffb      	ldrb	r3, [r7, #31]
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d828      	bhi.n	8006a2e <UART_SetConfig+0x462>
 80069dc:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <UART_SetConfig+0x418>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	08006a09 	.word	0x08006a09
 80069e8:	08006a11 	.word	0x08006a11
 80069ec:	08006a19 	.word	0x08006a19
 80069f0:	08006a2f 	.word	0x08006a2f
 80069f4:	08006a1f 	.word	0x08006a1f
 80069f8:	08006a2f 	.word	0x08006a2f
 80069fc:	08006a2f 	.word	0x08006a2f
 8006a00:	08006a2f 	.word	0x08006a2f
 8006a04:	08006a27 	.word	0x08006a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a08:	f7fd fb96 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8006a0c:	61b8      	str	r0, [r7, #24]
        break;
 8006a0e:	e013      	b.n	8006a38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a10:	f7fd fba6 	bl	8004160 <HAL_RCC_GetPCLK2Freq>
 8006a14:	61b8      	str	r0, [r7, #24]
        break;
 8006a16:	e00f      	b.n	8006a38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a18:	4b1d      	ldr	r3, [pc, #116]	; (8006a90 <UART_SetConfig+0x4c4>)
 8006a1a:	61bb      	str	r3, [r7, #24]
        break;
 8006a1c:	e00c      	b.n	8006a38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a1e:	f7fd fa7b 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8006a22:	61b8      	str	r0, [r7, #24]
        break;
 8006a24:	e008      	b.n	8006a38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a2a:	61bb      	str	r3, [r7, #24]
        break;
 8006a2c:	e004      	b.n	8006a38 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	77bb      	strb	r3, [r7, #30]
        break;
 8006a36:	bf00      	nop
    }

    if (pclk != 0U)
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d018      	beq.n	8006a70 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	085a      	lsrs	r2, r3, #1
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	441a      	add	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	2b0f      	cmp	r3, #15
 8006a56:	d909      	bls.n	8006a6c <UART_SetConfig+0x4a0>
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a5e:	d205      	bcs.n	8006a6c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	60da      	str	r2, [r3, #12]
 8006a6a:	e001      	b.n	8006a70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006a7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3720      	adds	r7, #32
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	40007c00 	.word	0x40007c00
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	00f42400 	.word	0x00f42400

08006a94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	f003 0308 	and.w	r3, r3, #8
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	f003 0310 	and.w	r3, r3, #16
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00a      	beq.n	8006b46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d01a      	beq.n	8006baa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b92:	d10a      	bne.n	8006baa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	605a      	str	r2, [r3, #4]
  }
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006be8:	f7fb fcb2 	bl	8002550 <HAL_GetTick>
 8006bec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0308 	and.w	r3, r3, #8
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d10e      	bne.n	8006c1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f831 	bl	8006c72 <UART_WaitOnFlagUntilTimeout>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e027      	b.n	8006c6a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d10e      	bne.n	8006c46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f81b 	bl	8006c72 <UART_WaitOnFlagUntilTimeout>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e011      	b.n	8006c6a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b09c      	sub	sp, #112	; 0x70
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	60b9      	str	r1, [r7, #8]
 8006c7c:	603b      	str	r3, [r7, #0]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c82:	e0a7      	b.n	8006dd4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8a:	f000 80a3 	beq.w	8006dd4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c8e:	f7fb fc5f 	bl	8002550 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d302      	bcc.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d13f      	bne.n	8006d24 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cb8:	667b      	str	r3, [r7, #100]	; 0x64
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cc4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e6      	bne.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3308      	adds	r3, #8
 8006cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce8:	f023 0301 	bic.w	r3, r3, #1
 8006cec:	663b      	str	r3, [r7, #96]	; 0x60
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cf6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006cf8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cfe:	e841 2300 	strex	r3, r2, [r1]
 8006d02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1e5      	bne.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e068      	b.n	8006df6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d050      	beq.n	8006dd4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d40:	d148      	bne.n	8006dd4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d4a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d6c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e6      	bne.n	8006d4c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3308      	adds	r3, #8
 8006d84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f023 0301 	bic.w	r3, r3, #1
 8006d94:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d9e:	623a      	str	r2, [r7, #32]
 8006da0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	69f9      	ldr	r1, [r7, #28]
 8006da4:	6a3a      	ldr	r2, [r7, #32]
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e5      	bne.n	8006d7e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2220      	movs	r2, #32
 8006db6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e010      	b.n	8006df6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69da      	ldr	r2, [r3, #28]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	4013      	ands	r3, r2
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	bf0c      	ite	eq
 8006de4:	2301      	moveq	r3, #1
 8006de6:	2300      	movne	r3, #0
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	f43f af48 	beq.w	8006c84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3770      	adds	r7, #112	; 0x70
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b097      	sub	sp, #92	; 0x5c
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	88fa      	ldrh	r2, [r7, #6]
 8006e18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	88fa      	ldrh	r2, [r7, #6]
 8006e20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e32:	d10e      	bne.n	8006e52 <UART_Start_Receive_IT+0x52>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d105      	bne.n	8006e48 <UART_Start_Receive_IT+0x48>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006e42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e46:	e02d      	b.n	8006ea4 <UART_Start_Receive_IT+0xa4>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	22ff      	movs	r2, #255	; 0xff
 8006e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e50:	e028      	b.n	8006ea4 <UART_Start_Receive_IT+0xa4>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10d      	bne.n	8006e76 <UART_Start_Receive_IT+0x76>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d104      	bne.n	8006e6c <UART_Start_Receive_IT+0x6c>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	22ff      	movs	r2, #255	; 0xff
 8006e66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e6a:	e01b      	b.n	8006ea4 <UART_Start_Receive_IT+0xa4>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	227f      	movs	r2, #127	; 0x7f
 8006e70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e74:	e016      	b.n	8006ea4 <UART_Start_Receive_IT+0xa4>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e7e:	d10d      	bne.n	8006e9c <UART_Start_Receive_IT+0x9c>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d104      	bne.n	8006e92 <UART_Start_Receive_IT+0x92>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	227f      	movs	r2, #127	; 0x7f
 8006e8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e90:	e008      	b.n	8006ea4 <UART_Start_Receive_IT+0xa4>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	223f      	movs	r2, #63	; 0x3f
 8006e96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e9a:	e003      	b.n	8006ea4 <UART_Start_Receive_IT+0xa4>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2222      	movs	r2, #34	; 0x22
 8006eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	f043 0301 	orr.w	r3, r3, #1
 8006eca:	657b      	str	r3, [r7, #84]	; 0x54
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ed4:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ed6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006edc:	e841 2300 	strex	r3, r2, [r1]
 8006ee0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e5      	bne.n	8006eb4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef0:	d107      	bne.n	8006f02 <UART_Start_Receive_IT+0x102>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d103      	bne.n	8006f02 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4a21      	ldr	r2, [pc, #132]	; (8006f84 <UART_Start_Receive_IT+0x184>)
 8006efe:	669a      	str	r2, [r3, #104]	; 0x68
 8006f00:	e002      	b.n	8006f08 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4a20      	ldr	r2, [pc, #128]	; (8006f88 <UART_Start_Receive_IT+0x188>)
 8006f06:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d019      	beq.n	8006f44 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f30:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e6      	bne.n	8006f10 <UART_Start_Receive_IT+0x110>
 8006f42:	e018      	b.n	8006f76 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	613b      	str	r3, [r7, #16]
   return(result);
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f043 0320 	orr.w	r3, r3, #32
 8006f58:	653b      	str	r3, [r7, #80]	; 0x50
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f62:	623b      	str	r3, [r7, #32]
 8006f64:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	69f9      	ldr	r1, [r7, #28]
 8006f68:	6a3a      	ldr	r2, [r7, #32]
 8006f6a:	e841 2300 	strex	r3, r2, [r1]
 8006f6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1e6      	bne.n	8006f44 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	375c      	adds	r7, #92	; 0x5c
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	080073b1 	.word	0x080073b1
 8006f88:	0800724b 	.word	0x0800724b

08006f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b095      	sub	sp, #84	; 0x54
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9c:	e853 3f00 	ldrex	r3, [r3]
 8006fa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1e6      	bne.n	8006f94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3308      	adds	r3, #8
 8006fcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	e853 3f00 	ldrex	r3, [r3]
 8006fd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	f023 0301 	bic.w	r3, r3, #1
 8006fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3308      	adds	r3, #8
 8006fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e5      	bne.n	8006fc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d118      	bne.n	8007034 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f023 0310 	bic.w	r3, r3, #16
 8007016:	647b      	str	r3, [r7, #68]	; 0x44
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	461a      	mov	r2, r3
 800701e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007024:	6979      	ldr	r1, [r7, #20]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	e841 2300 	strex	r3, r2, [r1]
 800702c:	613b      	str	r3, [r7, #16]
   return(result);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e6      	bne.n	8007002 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2220      	movs	r2, #32
 8007038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007048:	bf00      	nop
 800704a:	3754      	adds	r7, #84	; 0x54
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7ff fa8a 	bl	800658c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007078:	bf00      	nop
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007080:	b480      	push	{r7}
 8007082:	b08f      	sub	sp, #60	; 0x3c
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800708c:	2b21      	cmp	r3, #33	; 0x21
 800708e:	d14c      	bne.n	800712a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d132      	bne.n	8007102 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070b0:	637b      	str	r3, [r7, #52]	; 0x34
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070bc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e6      	bne.n	800709c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	60bb      	str	r3, [r7, #8]
   return(result);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e2:	633b      	str	r3, [r7, #48]	; 0x30
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	461a      	mov	r2, r3
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	61bb      	str	r3, [r7, #24]
 80070ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	6979      	ldr	r1, [r7, #20]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	613b      	str	r3, [r7, #16]
   return(result);
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e6      	bne.n	80070ce <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007100:	e013      	b.n	800712a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007106:	781a      	ldrb	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800712a:	bf00      	nop
 800712c:	373c      	adds	r7, #60	; 0x3c
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007136:	b480      	push	{r7}
 8007138:	b091      	sub	sp, #68	; 0x44
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007142:	2b21      	cmp	r3, #33	; 0x21
 8007144:	d151      	bne.n	80071ea <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d132      	bne.n	80071b8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	623b      	str	r3, [r7, #32]
   return(result);
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007166:	63bb      	str	r3, [r7, #56]	; 0x38
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	633b      	str	r3, [r7, #48]	; 0x30
 8007172:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e6      	bne.n	8007152 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	60fb      	str	r3, [r7, #12]
   return(result);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007198:	637b      	str	r3, [r7, #52]	; 0x34
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a2:	61fb      	str	r3, [r7, #28]
 80071a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	69b9      	ldr	r1, [r7, #24]
 80071a8:	69fa      	ldr	r2, [r7, #28]
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	617b      	str	r3, [r7, #20]
   return(result);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e6      	bne.n	8007184 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80071b6:	e018      	b.n	80071ea <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80071be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071cc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d2:	1c9a      	adds	r2, r3, #2
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80071ea:	bf00      	nop
 80071ec:	3744      	adds	r7, #68	; 0x44
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b088      	sub	sp, #32
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	60bb      	str	r3, [r7, #8]
   return(result);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007212:	61fb      	str	r3, [r7, #28]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	61bb      	str	r3, [r7, #24]
 800721e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	6979      	ldr	r1, [r7, #20]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	613b      	str	r3, [r7, #16]
   return(result);
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e6      	bne.n	80071fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7fb f8d3 	bl	80023e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007242:	bf00      	nop
 8007244:	3720      	adds	r7, #32
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b096      	sub	sp, #88	; 0x58
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007258:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007262:	2b22      	cmp	r3, #34	; 0x22
 8007264:	f040 8098 	bne.w	8007398 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007272:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007276:	b2d9      	uxtb	r1, r3
 8007278:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800727c:	b2da      	uxtb	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007282:	400a      	ands	r2, r1
 8007284:	b2d2      	uxtb	r2, r2
 8007286:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d17b      	bne.n	80073a8 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072c4:	653b      	str	r3, [r7, #80]	; 0x50
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ce:	647b      	str	r3, [r7, #68]	; 0x44
 80072d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e6      	bne.n	80072b0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3308      	adds	r3, #8
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	623b      	str	r3, [r7, #32]
   return(result);
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	f023 0301 	bic.w	r3, r3, #1
 80072f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3308      	adds	r3, #8
 8007300:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007302:	633a      	str	r2, [r7, #48]	; 0x30
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e5      	bne.n	80072e2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2220      	movs	r2, #32
 800731a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800732e:	2b01      	cmp	r3, #1
 8007330:	d12e      	bne.n	8007390 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	60fb      	str	r3, [r7, #12]
   return(result);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f023 0310 	bic.w	r3, r3, #16
 800734c:	64bb      	str	r3, [r7, #72]	; 0x48
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007356:	61fb      	str	r3, [r7, #28]
 8007358:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	69b9      	ldr	r1, [r7, #24]
 800735c:	69fa      	ldr	r2, [r7, #28]
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	617b      	str	r3, [r7, #20]
   return(result);
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e6      	bne.n	8007338 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	f003 0310 	and.w	r3, r3, #16
 8007374:	2b10      	cmp	r3, #16
 8007376:	d103      	bne.n	8007380 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2210      	movs	r2, #16
 800737e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff f909 	bl	80065a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800738e:	e00b      	b.n	80073a8 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7fa ffbf 	bl	8002314 <HAL_UART_RxCpltCallback>
}
 8007396:	e007      	b.n	80073a8 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0208 	orr.w	r2, r2, #8
 80073a6:	619a      	str	r2, [r3, #24]
}
 80073a8:	bf00      	nop
 80073aa:	3758      	adds	r7, #88	; 0x58
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b096      	sub	sp, #88	; 0x58
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073be:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073c8:	2b22      	cmp	r3, #34	; 0x22
 80073ca:	f040 8098 	bne.w	80074fe <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073dc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80073de:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80073e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073e6:	4013      	ands	r3, r2
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f2:	1c9a      	adds	r2, r3, #2
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073fe:	b29b      	uxth	r3, r3
 8007400:	3b01      	subs	r3, #1
 8007402:	b29a      	uxth	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d17b      	bne.n	800750e <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741e:	e853 3f00 	ldrex	r3, [r3]
 8007422:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800742a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	461a      	mov	r2, r3
 8007432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007434:	643b      	str	r3, [r7, #64]	; 0x40
 8007436:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800743a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800743c:	e841 2300 	strex	r3, r2, [r1]
 8007440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e6      	bne.n	8007416 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3308      	adds	r3, #8
 800744e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	61fb      	str	r3, [r7, #28]
   return(result);
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	f023 0301 	bic.w	r3, r3, #1
 800745e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3308      	adds	r3, #8
 8007466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007468:	62fa      	str	r2, [r7, #44]	; 0x2c
 800746a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800746e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e5      	bne.n	8007448 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007494:	2b01      	cmp	r3, #1
 8007496:	d12e      	bne.n	80074f6 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f023 0310 	bic.w	r3, r3, #16
 80074b2:	647b      	str	r3, [r7, #68]	; 0x44
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6979      	ldr	r1, [r7, #20]
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	613b      	str	r3, [r7, #16]
   return(result);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e6      	bne.n	800749e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b10      	cmp	r3, #16
 80074dc:	d103      	bne.n	80074e6 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2210      	movs	r2, #16
 80074e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff f856 	bl	80065a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074f4:	e00b      	b.n	800750e <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fa ff0c 	bl	8002314 <HAL_UART_RxCpltCallback>
}
 80074fc:	e007      	b.n	800750e <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	699a      	ldr	r2, [r3, #24]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f042 0208 	orr.w	r2, r2, #8
 800750c:	619a      	str	r2, [r3, #24]
}
 800750e:	bf00      	nop
 8007510:	3758      	adds	r7, #88	; 0x58
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800751c:	4904      	ldr	r1, [pc, #16]	; (8007530 <MX_FATFS_Init+0x18>)
 800751e:	4805      	ldr	r0, [pc, #20]	; (8007534 <MX_FATFS_Init+0x1c>)
 8007520:	f000 f8ae 	bl	8007680 <FATFS_LinkDriver>
 8007524:	4603      	mov	r3, r0
 8007526:	461a      	mov	r2, r3
 8007528:	4b03      	ldr	r3, [pc, #12]	; (8007538 <MX_FATFS_Init+0x20>)
 800752a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800752c:	bf00      	nop
 800752e:	bd80      	pop	{r7, pc}
 8007530:	200008d0 	.word	0x200008d0
 8007534:	20000024 	.word	0x20000024
 8007538:	200008cc 	.word	0x200008cc

0800753c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8007546:	79fb      	ldrb	r3, [r7, #7]
 8007548:	4618      	mov	r0, r3
 800754a:	f7f9 fd37 	bl	8000fbc <SD_disk_initialize>
 800754e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	4603      	mov	r3, r0
 8007560:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007562:	79fb      	ldrb	r3, [r7, #7]
 8007564:	4618      	mov	r0, r3
 8007566:	f7f9 fe0f 	bl	8001188 <SD_disk_status>
 800756a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	4603      	mov	r3, r0
 8007582:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007584:	7bf8      	ldrb	r0, [r7, #15]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	f7f9 fe12 	bl	80011b4 <SD_disk_read>
 8007590:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
 80075a6:	4603      	mov	r3, r0
 80075a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80075aa:	7bf8      	ldrb	r0, [r7, #15]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	68b9      	ldr	r1, [r7, #8]
 80075b2:	f7f9 fe69 	bl	8001288 <SD_disk_write>
 80075b6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	603a      	str	r2, [r7, #0]
 80075ca:	71fb      	strb	r3, [r7, #7]
 80075cc:	460b      	mov	r3, r1
 80075ce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80075d0:	79b9      	ldrb	r1, [r7, #6]
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7f9 feda 	bl	8001390 <SD_disk_ioctl>
 80075dc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80075f6:	2301      	movs	r3, #1
 80075f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80075fe:	4b1f      	ldr	r3, [pc, #124]	; (800767c <FATFS_LinkDriverEx+0x94>)
 8007600:	7a5b      	ldrb	r3, [r3, #9]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d131      	bne.n	800766c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007608:	4b1c      	ldr	r3, [pc, #112]	; (800767c <FATFS_LinkDriverEx+0x94>)
 800760a:	7a5b      	ldrb	r3, [r3, #9]
 800760c:	b2db      	uxtb	r3, r3
 800760e:	461a      	mov	r2, r3
 8007610:	4b1a      	ldr	r3, [pc, #104]	; (800767c <FATFS_LinkDriverEx+0x94>)
 8007612:	2100      	movs	r1, #0
 8007614:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007616:	4b19      	ldr	r3, [pc, #100]	; (800767c <FATFS_LinkDriverEx+0x94>)
 8007618:	7a5b      	ldrb	r3, [r3, #9]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	4a17      	ldr	r2, [pc, #92]	; (800767c <FATFS_LinkDriverEx+0x94>)
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007626:	4b15      	ldr	r3, [pc, #84]	; (800767c <FATFS_LinkDriverEx+0x94>)
 8007628:	7a5b      	ldrb	r3, [r3, #9]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	461a      	mov	r2, r3
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <FATFS_LinkDriverEx+0x94>)
 8007630:	4413      	add	r3, r2
 8007632:	79fa      	ldrb	r2, [r7, #7]
 8007634:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007636:	4b11      	ldr	r3, [pc, #68]	; (800767c <FATFS_LinkDriverEx+0x94>)
 8007638:	7a5b      	ldrb	r3, [r3, #9]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	b2d1      	uxtb	r1, r2
 8007640:	4a0e      	ldr	r2, [pc, #56]	; (800767c <FATFS_LinkDriverEx+0x94>)
 8007642:	7251      	strb	r1, [r2, #9]
 8007644:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007646:	7dbb      	ldrb	r3, [r7, #22]
 8007648:	3330      	adds	r3, #48	; 0x30
 800764a:	b2da      	uxtb	r2, r3
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	3301      	adds	r3, #1
 8007654:	223a      	movs	r2, #58	; 0x3a
 8007656:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	3302      	adds	r3, #2
 800765c:	222f      	movs	r2, #47	; 0x2f
 800765e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	3303      	adds	r3, #3
 8007664:	2200      	movs	r2, #0
 8007666:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800766c:	7dfb      	ldrb	r3, [r7, #23]
}
 800766e:	4618      	mov	r0, r3
 8007670:	371c      	adds	r7, #28
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	200008d4 	.word	0x200008d4

08007680 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800768a:	2200      	movs	r2, #0
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff ffaa 	bl	80075e8 <FATFS_LinkDriverEx>
 8007694:	4603      	mov	r3, r0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <__errno>:
 80076a0:	4b01      	ldr	r3, [pc, #4]	; (80076a8 <__errno+0x8>)
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	20000038 	.word	0x20000038

080076ac <__libc_init_array>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	4d0d      	ldr	r5, [pc, #52]	; (80076e4 <__libc_init_array+0x38>)
 80076b0:	4c0d      	ldr	r4, [pc, #52]	; (80076e8 <__libc_init_array+0x3c>)
 80076b2:	1b64      	subs	r4, r4, r5
 80076b4:	10a4      	asrs	r4, r4, #2
 80076b6:	2600      	movs	r6, #0
 80076b8:	42a6      	cmp	r6, r4
 80076ba:	d109      	bne.n	80076d0 <__libc_init_array+0x24>
 80076bc:	4d0b      	ldr	r5, [pc, #44]	; (80076ec <__libc_init_array+0x40>)
 80076be:	4c0c      	ldr	r4, [pc, #48]	; (80076f0 <__libc_init_array+0x44>)
 80076c0:	f004 fb9e 	bl	800be00 <_init>
 80076c4:	1b64      	subs	r4, r4, r5
 80076c6:	10a4      	asrs	r4, r4, #2
 80076c8:	2600      	movs	r6, #0
 80076ca:	42a6      	cmp	r6, r4
 80076cc:	d105      	bne.n	80076da <__libc_init_array+0x2e>
 80076ce:	bd70      	pop	{r4, r5, r6, pc}
 80076d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d4:	4798      	blx	r3
 80076d6:	3601      	adds	r6, #1
 80076d8:	e7ee      	b.n	80076b8 <__libc_init_array+0xc>
 80076da:	f855 3b04 	ldr.w	r3, [r5], #4
 80076de:	4798      	blx	r3
 80076e0:	3601      	adds	r6, #1
 80076e2:	e7f2      	b.n	80076ca <__libc_init_array+0x1e>
 80076e4:	0800c34c 	.word	0x0800c34c
 80076e8:	0800c34c 	.word	0x0800c34c
 80076ec:	0800c34c 	.word	0x0800c34c
 80076f0:	0800c350 	.word	0x0800c350

080076f4 <memset>:
 80076f4:	4402      	add	r2, r0
 80076f6:	4603      	mov	r3, r0
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d100      	bne.n	80076fe <memset+0xa>
 80076fc:	4770      	bx	lr
 80076fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007702:	e7f9      	b.n	80076f8 <memset+0x4>

08007704 <__cvt>:
 8007704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007706:	ed2d 8b02 	vpush	{d8}
 800770a:	eeb0 8b40 	vmov.f64	d8, d0
 800770e:	b085      	sub	sp, #20
 8007710:	4617      	mov	r7, r2
 8007712:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007714:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007716:	ee18 2a90 	vmov	r2, s17
 800771a:	f025 0520 	bic.w	r5, r5, #32
 800771e:	2a00      	cmp	r2, #0
 8007720:	bfb6      	itet	lt
 8007722:	222d      	movlt	r2, #45	; 0x2d
 8007724:	2200      	movge	r2, #0
 8007726:	eeb1 8b40 	vneglt.f64	d8, d0
 800772a:	2d46      	cmp	r5, #70	; 0x46
 800772c:	460c      	mov	r4, r1
 800772e:	701a      	strb	r2, [r3, #0]
 8007730:	d004      	beq.n	800773c <__cvt+0x38>
 8007732:	2d45      	cmp	r5, #69	; 0x45
 8007734:	d100      	bne.n	8007738 <__cvt+0x34>
 8007736:	3401      	adds	r4, #1
 8007738:	2102      	movs	r1, #2
 800773a:	e000      	b.n	800773e <__cvt+0x3a>
 800773c:	2103      	movs	r1, #3
 800773e:	ab03      	add	r3, sp, #12
 8007740:	9301      	str	r3, [sp, #4]
 8007742:	ab02      	add	r3, sp, #8
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	4622      	mov	r2, r4
 8007748:	4633      	mov	r3, r6
 800774a:	eeb0 0b48 	vmov.f64	d0, d8
 800774e:	f001 fd43 	bl	80091d8 <_dtoa_r>
 8007752:	2d47      	cmp	r5, #71	; 0x47
 8007754:	d101      	bne.n	800775a <__cvt+0x56>
 8007756:	07fb      	lsls	r3, r7, #31
 8007758:	d51a      	bpl.n	8007790 <__cvt+0x8c>
 800775a:	2d46      	cmp	r5, #70	; 0x46
 800775c:	eb00 0204 	add.w	r2, r0, r4
 8007760:	d10c      	bne.n	800777c <__cvt+0x78>
 8007762:	7803      	ldrb	r3, [r0, #0]
 8007764:	2b30      	cmp	r3, #48	; 0x30
 8007766:	d107      	bne.n	8007778 <__cvt+0x74>
 8007768:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800776c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007770:	bf1c      	itt	ne
 8007772:	f1c4 0401 	rsbne	r4, r4, #1
 8007776:	6034      	strne	r4, [r6, #0]
 8007778:	6833      	ldr	r3, [r6, #0]
 800777a:	441a      	add	r2, r3
 800777c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007784:	bf08      	it	eq
 8007786:	9203      	streq	r2, [sp, #12]
 8007788:	2130      	movs	r1, #48	; 0x30
 800778a:	9b03      	ldr	r3, [sp, #12]
 800778c:	4293      	cmp	r3, r2
 800778e:	d307      	bcc.n	80077a0 <__cvt+0x9c>
 8007790:	9b03      	ldr	r3, [sp, #12]
 8007792:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007794:	1a1b      	subs	r3, r3, r0
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	b005      	add	sp, #20
 800779a:	ecbd 8b02 	vpop	{d8}
 800779e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077a0:	1c5c      	adds	r4, r3, #1
 80077a2:	9403      	str	r4, [sp, #12]
 80077a4:	7019      	strb	r1, [r3, #0]
 80077a6:	e7f0      	b.n	800778a <__cvt+0x86>

080077a8 <__exponent>:
 80077a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077aa:	4603      	mov	r3, r0
 80077ac:	2900      	cmp	r1, #0
 80077ae:	bfb8      	it	lt
 80077b0:	4249      	neglt	r1, r1
 80077b2:	f803 2b02 	strb.w	r2, [r3], #2
 80077b6:	bfb4      	ite	lt
 80077b8:	222d      	movlt	r2, #45	; 0x2d
 80077ba:	222b      	movge	r2, #43	; 0x2b
 80077bc:	2909      	cmp	r1, #9
 80077be:	7042      	strb	r2, [r0, #1]
 80077c0:	dd2a      	ble.n	8007818 <__exponent+0x70>
 80077c2:	f10d 0407 	add.w	r4, sp, #7
 80077c6:	46a4      	mov	ip, r4
 80077c8:	270a      	movs	r7, #10
 80077ca:	46a6      	mov	lr, r4
 80077cc:	460a      	mov	r2, r1
 80077ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80077d2:	fb07 1516 	mls	r5, r7, r6, r1
 80077d6:	3530      	adds	r5, #48	; 0x30
 80077d8:	2a63      	cmp	r2, #99	; 0x63
 80077da:	f104 34ff 	add.w	r4, r4, #4294967295
 80077de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80077e2:	4631      	mov	r1, r6
 80077e4:	dcf1      	bgt.n	80077ca <__exponent+0x22>
 80077e6:	3130      	adds	r1, #48	; 0x30
 80077e8:	f1ae 0502 	sub.w	r5, lr, #2
 80077ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077f0:	1c44      	adds	r4, r0, #1
 80077f2:	4629      	mov	r1, r5
 80077f4:	4561      	cmp	r1, ip
 80077f6:	d30a      	bcc.n	800780e <__exponent+0x66>
 80077f8:	f10d 0209 	add.w	r2, sp, #9
 80077fc:	eba2 020e 	sub.w	r2, r2, lr
 8007800:	4565      	cmp	r5, ip
 8007802:	bf88      	it	hi
 8007804:	2200      	movhi	r2, #0
 8007806:	4413      	add	r3, r2
 8007808:	1a18      	subs	r0, r3, r0
 800780a:	b003      	add	sp, #12
 800780c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800780e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007812:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007816:	e7ed      	b.n	80077f4 <__exponent+0x4c>
 8007818:	2330      	movs	r3, #48	; 0x30
 800781a:	3130      	adds	r1, #48	; 0x30
 800781c:	7083      	strb	r3, [r0, #2]
 800781e:	70c1      	strb	r1, [r0, #3]
 8007820:	1d03      	adds	r3, r0, #4
 8007822:	e7f1      	b.n	8007808 <__exponent+0x60>
 8007824:	0000      	movs	r0, r0
	...

08007828 <_printf_float>:
 8007828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	b08b      	sub	sp, #44	; 0x2c
 800782e:	460c      	mov	r4, r1
 8007830:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007834:	4616      	mov	r6, r2
 8007836:	461f      	mov	r7, r3
 8007838:	4605      	mov	r5, r0
 800783a:	f002 fdab 	bl	800a394 <_localeconv_r>
 800783e:	f8d0 b000 	ldr.w	fp, [r0]
 8007842:	4658      	mov	r0, fp
 8007844:	f7f8 fcfc 	bl	8000240 <strlen>
 8007848:	2300      	movs	r3, #0
 800784a:	9308      	str	r3, [sp, #32]
 800784c:	f8d8 3000 	ldr.w	r3, [r8]
 8007850:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007854:	6822      	ldr	r2, [r4, #0]
 8007856:	3307      	adds	r3, #7
 8007858:	f023 0307 	bic.w	r3, r3, #7
 800785c:	f103 0108 	add.w	r1, r3, #8
 8007860:	f8c8 1000 	str.w	r1, [r8]
 8007864:	4682      	mov	sl, r0
 8007866:	e9d3 0100 	ldrd	r0, r1, [r3]
 800786a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800786e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007ad0 <_printf_float+0x2a8>
 8007872:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007876:	eeb0 6bc0 	vabs.f64	d6, d0
 800787a:	eeb4 6b47 	vcmp.f64	d6, d7
 800787e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007882:	dd24      	ble.n	80078ce <_printf_float+0xa6>
 8007884:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800788c:	d502      	bpl.n	8007894 <_printf_float+0x6c>
 800788e:	232d      	movs	r3, #45	; 0x2d
 8007890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007894:	4b90      	ldr	r3, [pc, #576]	; (8007ad8 <_printf_float+0x2b0>)
 8007896:	4891      	ldr	r0, [pc, #580]	; (8007adc <_printf_float+0x2b4>)
 8007898:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800789c:	bf94      	ite	ls
 800789e:	4698      	movls	r8, r3
 80078a0:	4680      	movhi	r8, r0
 80078a2:	2303      	movs	r3, #3
 80078a4:	6123      	str	r3, [r4, #16]
 80078a6:	f022 0204 	bic.w	r2, r2, #4
 80078aa:	2300      	movs	r3, #0
 80078ac:	6022      	str	r2, [r4, #0]
 80078ae:	9304      	str	r3, [sp, #16]
 80078b0:	9700      	str	r7, [sp, #0]
 80078b2:	4633      	mov	r3, r6
 80078b4:	aa09      	add	r2, sp, #36	; 0x24
 80078b6:	4621      	mov	r1, r4
 80078b8:	4628      	mov	r0, r5
 80078ba:	f000 f9d3 	bl	8007c64 <_printf_common>
 80078be:	3001      	adds	r0, #1
 80078c0:	f040 808a 	bne.w	80079d8 <_printf_float+0x1b0>
 80078c4:	f04f 30ff 	mov.w	r0, #4294967295
 80078c8:	b00b      	add	sp, #44	; 0x2c
 80078ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ce:	eeb4 0b40 	vcmp.f64	d0, d0
 80078d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d6:	d709      	bvc.n	80078ec <_printf_float+0xc4>
 80078d8:	ee10 3a90 	vmov	r3, s1
 80078dc:	2b00      	cmp	r3, #0
 80078de:	bfbc      	itt	lt
 80078e0:	232d      	movlt	r3, #45	; 0x2d
 80078e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078e6:	487e      	ldr	r0, [pc, #504]	; (8007ae0 <_printf_float+0x2b8>)
 80078e8:	4b7e      	ldr	r3, [pc, #504]	; (8007ae4 <_printf_float+0x2bc>)
 80078ea:	e7d5      	b.n	8007898 <_printf_float+0x70>
 80078ec:	6863      	ldr	r3, [r4, #4]
 80078ee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80078f2:	9104      	str	r1, [sp, #16]
 80078f4:	1c59      	adds	r1, r3, #1
 80078f6:	d13c      	bne.n	8007972 <_printf_float+0x14a>
 80078f8:	2306      	movs	r3, #6
 80078fa:	6063      	str	r3, [r4, #4]
 80078fc:	2300      	movs	r3, #0
 80078fe:	9303      	str	r3, [sp, #12]
 8007900:	ab08      	add	r3, sp, #32
 8007902:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007906:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800790a:	ab07      	add	r3, sp, #28
 800790c:	6861      	ldr	r1, [r4, #4]
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	6022      	str	r2, [r4, #0]
 8007912:	f10d 031b 	add.w	r3, sp, #27
 8007916:	4628      	mov	r0, r5
 8007918:	f7ff fef4 	bl	8007704 <__cvt>
 800791c:	9b04      	ldr	r3, [sp, #16]
 800791e:	9907      	ldr	r1, [sp, #28]
 8007920:	2b47      	cmp	r3, #71	; 0x47
 8007922:	4680      	mov	r8, r0
 8007924:	d108      	bne.n	8007938 <_printf_float+0x110>
 8007926:	1cc8      	adds	r0, r1, #3
 8007928:	db02      	blt.n	8007930 <_printf_float+0x108>
 800792a:	6863      	ldr	r3, [r4, #4]
 800792c:	4299      	cmp	r1, r3
 800792e:	dd41      	ble.n	80079b4 <_printf_float+0x18c>
 8007930:	f1a9 0902 	sub.w	r9, r9, #2
 8007934:	fa5f f989 	uxtb.w	r9, r9
 8007938:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800793c:	d820      	bhi.n	8007980 <_printf_float+0x158>
 800793e:	3901      	subs	r1, #1
 8007940:	464a      	mov	r2, r9
 8007942:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007946:	9107      	str	r1, [sp, #28]
 8007948:	f7ff ff2e 	bl	80077a8 <__exponent>
 800794c:	9a08      	ldr	r2, [sp, #32]
 800794e:	9004      	str	r0, [sp, #16]
 8007950:	1813      	adds	r3, r2, r0
 8007952:	2a01      	cmp	r2, #1
 8007954:	6123      	str	r3, [r4, #16]
 8007956:	dc02      	bgt.n	800795e <_printf_float+0x136>
 8007958:	6822      	ldr	r2, [r4, #0]
 800795a:	07d2      	lsls	r2, r2, #31
 800795c:	d501      	bpl.n	8007962 <_printf_float+0x13a>
 800795e:	3301      	adds	r3, #1
 8007960:	6123      	str	r3, [r4, #16]
 8007962:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0a2      	beq.n	80078b0 <_printf_float+0x88>
 800796a:	232d      	movs	r3, #45	; 0x2d
 800796c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007970:	e79e      	b.n	80078b0 <_printf_float+0x88>
 8007972:	9904      	ldr	r1, [sp, #16]
 8007974:	2947      	cmp	r1, #71	; 0x47
 8007976:	d1c1      	bne.n	80078fc <_printf_float+0xd4>
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1bf      	bne.n	80078fc <_printf_float+0xd4>
 800797c:	2301      	movs	r3, #1
 800797e:	e7bc      	b.n	80078fa <_printf_float+0xd2>
 8007980:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007984:	d118      	bne.n	80079b8 <_printf_float+0x190>
 8007986:	2900      	cmp	r1, #0
 8007988:	6863      	ldr	r3, [r4, #4]
 800798a:	dd0b      	ble.n	80079a4 <_printf_float+0x17c>
 800798c:	6121      	str	r1, [r4, #16]
 800798e:	b913      	cbnz	r3, 8007996 <_printf_float+0x16e>
 8007990:	6822      	ldr	r2, [r4, #0]
 8007992:	07d0      	lsls	r0, r2, #31
 8007994:	d502      	bpl.n	800799c <_printf_float+0x174>
 8007996:	3301      	adds	r3, #1
 8007998:	440b      	add	r3, r1
 800799a:	6123      	str	r3, [r4, #16]
 800799c:	2300      	movs	r3, #0
 800799e:	65a1      	str	r1, [r4, #88]	; 0x58
 80079a0:	9304      	str	r3, [sp, #16]
 80079a2:	e7de      	b.n	8007962 <_printf_float+0x13a>
 80079a4:	b913      	cbnz	r3, 80079ac <_printf_float+0x184>
 80079a6:	6822      	ldr	r2, [r4, #0]
 80079a8:	07d2      	lsls	r2, r2, #31
 80079aa:	d501      	bpl.n	80079b0 <_printf_float+0x188>
 80079ac:	3302      	adds	r3, #2
 80079ae:	e7f4      	b.n	800799a <_printf_float+0x172>
 80079b0:	2301      	movs	r3, #1
 80079b2:	e7f2      	b.n	800799a <_printf_float+0x172>
 80079b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80079b8:	9b08      	ldr	r3, [sp, #32]
 80079ba:	4299      	cmp	r1, r3
 80079bc:	db05      	blt.n	80079ca <_printf_float+0x1a2>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	6121      	str	r1, [r4, #16]
 80079c2:	07d8      	lsls	r0, r3, #31
 80079c4:	d5ea      	bpl.n	800799c <_printf_float+0x174>
 80079c6:	1c4b      	adds	r3, r1, #1
 80079c8:	e7e7      	b.n	800799a <_printf_float+0x172>
 80079ca:	2900      	cmp	r1, #0
 80079cc:	bfd4      	ite	le
 80079ce:	f1c1 0202 	rsble	r2, r1, #2
 80079d2:	2201      	movgt	r2, #1
 80079d4:	4413      	add	r3, r2
 80079d6:	e7e0      	b.n	800799a <_printf_float+0x172>
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	055a      	lsls	r2, r3, #21
 80079dc:	d407      	bmi.n	80079ee <_printf_float+0x1c6>
 80079de:	6923      	ldr	r3, [r4, #16]
 80079e0:	4642      	mov	r2, r8
 80079e2:	4631      	mov	r1, r6
 80079e4:	4628      	mov	r0, r5
 80079e6:	47b8      	blx	r7
 80079e8:	3001      	adds	r0, #1
 80079ea:	d12a      	bne.n	8007a42 <_printf_float+0x21a>
 80079ec:	e76a      	b.n	80078c4 <_printf_float+0x9c>
 80079ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80079f2:	f240 80e2 	bls.w	8007bba <_printf_float+0x392>
 80079f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80079fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80079fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a02:	d133      	bne.n	8007a6c <_printf_float+0x244>
 8007a04:	4a38      	ldr	r2, [pc, #224]	; (8007ae8 <_printf_float+0x2c0>)
 8007a06:	2301      	movs	r3, #1
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	47b8      	blx	r7
 8007a0e:	3001      	adds	r0, #1
 8007a10:	f43f af58 	beq.w	80078c4 <_printf_float+0x9c>
 8007a14:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	db02      	blt.n	8007a22 <_printf_float+0x1fa>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	07d8      	lsls	r0, r3, #31
 8007a20:	d50f      	bpl.n	8007a42 <_printf_float+0x21a>
 8007a22:	4653      	mov	r3, sl
 8007a24:	465a      	mov	r2, fp
 8007a26:	4631      	mov	r1, r6
 8007a28:	4628      	mov	r0, r5
 8007a2a:	47b8      	blx	r7
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	f43f af49 	beq.w	80078c4 <_printf_float+0x9c>
 8007a32:	f04f 0800 	mov.w	r8, #0
 8007a36:	f104 091a 	add.w	r9, r4, #26
 8007a3a:	9b08      	ldr	r3, [sp, #32]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	4543      	cmp	r3, r8
 8007a40:	dc09      	bgt.n	8007a56 <_printf_float+0x22e>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	079b      	lsls	r3, r3, #30
 8007a46:	f100 8108 	bmi.w	8007c5a <_printf_float+0x432>
 8007a4a:	68e0      	ldr	r0, [r4, #12]
 8007a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a4e:	4298      	cmp	r0, r3
 8007a50:	bfb8      	it	lt
 8007a52:	4618      	movlt	r0, r3
 8007a54:	e738      	b.n	80078c8 <_printf_float+0xa0>
 8007a56:	2301      	movs	r3, #1
 8007a58:	464a      	mov	r2, r9
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b8      	blx	r7
 8007a60:	3001      	adds	r0, #1
 8007a62:	f43f af2f 	beq.w	80078c4 <_printf_float+0x9c>
 8007a66:	f108 0801 	add.w	r8, r8, #1
 8007a6a:	e7e6      	b.n	8007a3a <_printf_float+0x212>
 8007a6c:	9b07      	ldr	r3, [sp, #28]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	dc3c      	bgt.n	8007aec <_printf_float+0x2c4>
 8007a72:	4a1d      	ldr	r2, [pc, #116]	; (8007ae8 <_printf_float+0x2c0>)
 8007a74:	2301      	movs	r3, #1
 8007a76:	4631      	mov	r1, r6
 8007a78:	4628      	mov	r0, r5
 8007a7a:	47b8      	blx	r7
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	f43f af21 	beq.w	80078c4 <_printf_float+0x9c>
 8007a82:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	d102      	bne.n	8007a90 <_printf_float+0x268>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	07d9      	lsls	r1, r3, #31
 8007a8e:	d5d8      	bpl.n	8007a42 <_printf_float+0x21a>
 8007a90:	4653      	mov	r3, sl
 8007a92:	465a      	mov	r2, fp
 8007a94:	4631      	mov	r1, r6
 8007a96:	4628      	mov	r0, r5
 8007a98:	47b8      	blx	r7
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	f43f af12 	beq.w	80078c4 <_printf_float+0x9c>
 8007aa0:	f04f 0900 	mov.w	r9, #0
 8007aa4:	f104 0a1a 	add.w	sl, r4, #26
 8007aa8:	9b07      	ldr	r3, [sp, #28]
 8007aaa:	425b      	negs	r3, r3
 8007aac:	454b      	cmp	r3, r9
 8007aae:	dc01      	bgt.n	8007ab4 <_printf_float+0x28c>
 8007ab0:	9b08      	ldr	r3, [sp, #32]
 8007ab2:	e795      	b.n	80079e0 <_printf_float+0x1b8>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	4652      	mov	r2, sl
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b8      	blx	r7
 8007abe:	3001      	adds	r0, #1
 8007ac0:	f43f af00 	beq.w	80078c4 <_printf_float+0x9c>
 8007ac4:	f109 0901 	add.w	r9, r9, #1
 8007ac8:	e7ee      	b.n	8007aa8 <_printf_float+0x280>
 8007aca:	bf00      	nop
 8007acc:	f3af 8000 	nop.w
 8007ad0:	ffffffff 	.word	0xffffffff
 8007ad4:	7fefffff 	.word	0x7fefffff
 8007ad8:	0800bea0 	.word	0x0800bea0
 8007adc:	0800bea4 	.word	0x0800bea4
 8007ae0:	0800beac 	.word	0x0800beac
 8007ae4:	0800bea8 	.word	0x0800bea8
 8007ae8:	0800beb0 	.word	0x0800beb0
 8007aec:	9a08      	ldr	r2, [sp, #32]
 8007aee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007af0:	429a      	cmp	r2, r3
 8007af2:	bfa8      	it	ge
 8007af4:	461a      	movge	r2, r3
 8007af6:	2a00      	cmp	r2, #0
 8007af8:	4691      	mov	r9, r2
 8007afa:	dc38      	bgt.n	8007b6e <_printf_float+0x346>
 8007afc:	2300      	movs	r3, #0
 8007afe:	9305      	str	r3, [sp, #20]
 8007b00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b04:	f104 021a 	add.w	r2, r4, #26
 8007b08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b0a:	9905      	ldr	r1, [sp, #20]
 8007b0c:	9304      	str	r3, [sp, #16]
 8007b0e:	eba3 0309 	sub.w	r3, r3, r9
 8007b12:	428b      	cmp	r3, r1
 8007b14:	dc33      	bgt.n	8007b7e <_printf_float+0x356>
 8007b16:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	db3c      	blt.n	8007b98 <_printf_float+0x370>
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	07da      	lsls	r2, r3, #31
 8007b22:	d439      	bmi.n	8007b98 <_printf_float+0x370>
 8007b24:	9b08      	ldr	r3, [sp, #32]
 8007b26:	9a04      	ldr	r2, [sp, #16]
 8007b28:	9907      	ldr	r1, [sp, #28]
 8007b2a:	1a9a      	subs	r2, r3, r2
 8007b2c:	eba3 0901 	sub.w	r9, r3, r1
 8007b30:	4591      	cmp	r9, r2
 8007b32:	bfa8      	it	ge
 8007b34:	4691      	movge	r9, r2
 8007b36:	f1b9 0f00 	cmp.w	r9, #0
 8007b3a:	dc35      	bgt.n	8007ba8 <_printf_float+0x380>
 8007b3c:	f04f 0800 	mov.w	r8, #0
 8007b40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b44:	f104 0a1a 	add.w	sl, r4, #26
 8007b48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007b4c:	1a9b      	subs	r3, r3, r2
 8007b4e:	eba3 0309 	sub.w	r3, r3, r9
 8007b52:	4543      	cmp	r3, r8
 8007b54:	f77f af75 	ble.w	8007a42 <_printf_float+0x21a>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	4652      	mov	r2, sl
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	4628      	mov	r0, r5
 8007b60:	47b8      	blx	r7
 8007b62:	3001      	adds	r0, #1
 8007b64:	f43f aeae 	beq.w	80078c4 <_printf_float+0x9c>
 8007b68:	f108 0801 	add.w	r8, r8, #1
 8007b6c:	e7ec      	b.n	8007b48 <_printf_float+0x320>
 8007b6e:	4613      	mov	r3, r2
 8007b70:	4631      	mov	r1, r6
 8007b72:	4642      	mov	r2, r8
 8007b74:	4628      	mov	r0, r5
 8007b76:	47b8      	blx	r7
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d1bf      	bne.n	8007afc <_printf_float+0x2d4>
 8007b7c:	e6a2      	b.n	80078c4 <_printf_float+0x9c>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	4631      	mov	r1, r6
 8007b82:	4628      	mov	r0, r5
 8007b84:	9204      	str	r2, [sp, #16]
 8007b86:	47b8      	blx	r7
 8007b88:	3001      	adds	r0, #1
 8007b8a:	f43f ae9b 	beq.w	80078c4 <_printf_float+0x9c>
 8007b8e:	9b05      	ldr	r3, [sp, #20]
 8007b90:	9a04      	ldr	r2, [sp, #16]
 8007b92:	3301      	adds	r3, #1
 8007b94:	9305      	str	r3, [sp, #20]
 8007b96:	e7b7      	b.n	8007b08 <_printf_float+0x2e0>
 8007b98:	4653      	mov	r3, sl
 8007b9a:	465a      	mov	r2, fp
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	47b8      	blx	r7
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	d1be      	bne.n	8007b24 <_printf_float+0x2fc>
 8007ba6:	e68d      	b.n	80078c4 <_printf_float+0x9c>
 8007ba8:	9a04      	ldr	r2, [sp, #16]
 8007baa:	464b      	mov	r3, r9
 8007bac:	4442      	add	r2, r8
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	47b8      	blx	r7
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	d1c1      	bne.n	8007b3c <_printf_float+0x314>
 8007bb8:	e684      	b.n	80078c4 <_printf_float+0x9c>
 8007bba:	9a08      	ldr	r2, [sp, #32]
 8007bbc:	2a01      	cmp	r2, #1
 8007bbe:	dc01      	bgt.n	8007bc4 <_printf_float+0x39c>
 8007bc0:	07db      	lsls	r3, r3, #31
 8007bc2:	d537      	bpl.n	8007c34 <_printf_float+0x40c>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	4642      	mov	r2, r8
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4628      	mov	r0, r5
 8007bcc:	47b8      	blx	r7
 8007bce:	3001      	adds	r0, #1
 8007bd0:	f43f ae78 	beq.w	80078c4 <_printf_float+0x9c>
 8007bd4:	4653      	mov	r3, sl
 8007bd6:	465a      	mov	r2, fp
 8007bd8:	4631      	mov	r1, r6
 8007bda:	4628      	mov	r0, r5
 8007bdc:	47b8      	blx	r7
 8007bde:	3001      	adds	r0, #1
 8007be0:	f43f ae70 	beq.w	80078c4 <_printf_float+0x9c>
 8007be4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007be8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf0:	d01b      	beq.n	8007c2a <_printf_float+0x402>
 8007bf2:	9b08      	ldr	r3, [sp, #32]
 8007bf4:	f108 0201 	add.w	r2, r8, #1
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	47b8      	blx	r7
 8007c00:	3001      	adds	r0, #1
 8007c02:	d10e      	bne.n	8007c22 <_printf_float+0x3fa>
 8007c04:	e65e      	b.n	80078c4 <_printf_float+0x9c>
 8007c06:	2301      	movs	r3, #1
 8007c08:	464a      	mov	r2, r9
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	47b8      	blx	r7
 8007c10:	3001      	adds	r0, #1
 8007c12:	f43f ae57 	beq.w	80078c4 <_printf_float+0x9c>
 8007c16:	f108 0801 	add.w	r8, r8, #1
 8007c1a:	9b08      	ldr	r3, [sp, #32]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	4543      	cmp	r3, r8
 8007c20:	dcf1      	bgt.n	8007c06 <_printf_float+0x3de>
 8007c22:	9b04      	ldr	r3, [sp, #16]
 8007c24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c28:	e6db      	b.n	80079e2 <_printf_float+0x1ba>
 8007c2a:	f04f 0800 	mov.w	r8, #0
 8007c2e:	f104 091a 	add.w	r9, r4, #26
 8007c32:	e7f2      	b.n	8007c1a <_printf_float+0x3f2>
 8007c34:	2301      	movs	r3, #1
 8007c36:	4642      	mov	r2, r8
 8007c38:	e7df      	b.n	8007bfa <_printf_float+0x3d2>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	464a      	mov	r2, r9
 8007c3e:	4631      	mov	r1, r6
 8007c40:	4628      	mov	r0, r5
 8007c42:	47b8      	blx	r7
 8007c44:	3001      	adds	r0, #1
 8007c46:	f43f ae3d 	beq.w	80078c4 <_printf_float+0x9c>
 8007c4a:	f108 0801 	add.w	r8, r8, #1
 8007c4e:	68e3      	ldr	r3, [r4, #12]
 8007c50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c52:	1a5b      	subs	r3, r3, r1
 8007c54:	4543      	cmp	r3, r8
 8007c56:	dcf0      	bgt.n	8007c3a <_printf_float+0x412>
 8007c58:	e6f7      	b.n	8007a4a <_printf_float+0x222>
 8007c5a:	f04f 0800 	mov.w	r8, #0
 8007c5e:	f104 0919 	add.w	r9, r4, #25
 8007c62:	e7f4      	b.n	8007c4e <_printf_float+0x426>

08007c64 <_printf_common>:
 8007c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c68:	4616      	mov	r6, r2
 8007c6a:	4699      	mov	r9, r3
 8007c6c:	688a      	ldr	r2, [r1, #8]
 8007c6e:	690b      	ldr	r3, [r1, #16]
 8007c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c74:	4293      	cmp	r3, r2
 8007c76:	bfb8      	it	lt
 8007c78:	4613      	movlt	r3, r2
 8007c7a:	6033      	str	r3, [r6, #0]
 8007c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c80:	4607      	mov	r7, r0
 8007c82:	460c      	mov	r4, r1
 8007c84:	b10a      	cbz	r2, 8007c8a <_printf_common+0x26>
 8007c86:	3301      	adds	r3, #1
 8007c88:	6033      	str	r3, [r6, #0]
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	0699      	lsls	r1, r3, #26
 8007c8e:	bf42      	ittt	mi
 8007c90:	6833      	ldrmi	r3, [r6, #0]
 8007c92:	3302      	addmi	r3, #2
 8007c94:	6033      	strmi	r3, [r6, #0]
 8007c96:	6825      	ldr	r5, [r4, #0]
 8007c98:	f015 0506 	ands.w	r5, r5, #6
 8007c9c:	d106      	bne.n	8007cac <_printf_common+0x48>
 8007c9e:	f104 0a19 	add.w	sl, r4, #25
 8007ca2:	68e3      	ldr	r3, [r4, #12]
 8007ca4:	6832      	ldr	r2, [r6, #0]
 8007ca6:	1a9b      	subs	r3, r3, r2
 8007ca8:	42ab      	cmp	r3, r5
 8007caa:	dc26      	bgt.n	8007cfa <_printf_common+0x96>
 8007cac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cb0:	1e13      	subs	r3, r2, #0
 8007cb2:	6822      	ldr	r2, [r4, #0]
 8007cb4:	bf18      	it	ne
 8007cb6:	2301      	movne	r3, #1
 8007cb8:	0692      	lsls	r2, r2, #26
 8007cba:	d42b      	bmi.n	8007d14 <_printf_common+0xb0>
 8007cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	47c0      	blx	r8
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	d01e      	beq.n	8007d08 <_printf_common+0xa4>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	68e5      	ldr	r5, [r4, #12]
 8007cce:	6832      	ldr	r2, [r6, #0]
 8007cd0:	f003 0306 	and.w	r3, r3, #6
 8007cd4:	2b04      	cmp	r3, #4
 8007cd6:	bf08      	it	eq
 8007cd8:	1aad      	subeq	r5, r5, r2
 8007cda:	68a3      	ldr	r3, [r4, #8]
 8007cdc:	6922      	ldr	r2, [r4, #16]
 8007cde:	bf0c      	ite	eq
 8007ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ce4:	2500      	movne	r5, #0
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	bfc4      	itt	gt
 8007cea:	1a9b      	subgt	r3, r3, r2
 8007cec:	18ed      	addgt	r5, r5, r3
 8007cee:	2600      	movs	r6, #0
 8007cf0:	341a      	adds	r4, #26
 8007cf2:	42b5      	cmp	r5, r6
 8007cf4:	d11a      	bne.n	8007d2c <_printf_common+0xc8>
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	e008      	b.n	8007d0c <_printf_common+0xa8>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	4652      	mov	r2, sl
 8007cfe:	4649      	mov	r1, r9
 8007d00:	4638      	mov	r0, r7
 8007d02:	47c0      	blx	r8
 8007d04:	3001      	adds	r0, #1
 8007d06:	d103      	bne.n	8007d10 <_printf_common+0xac>
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d10:	3501      	adds	r5, #1
 8007d12:	e7c6      	b.n	8007ca2 <_printf_common+0x3e>
 8007d14:	18e1      	adds	r1, r4, r3
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	2030      	movs	r0, #48	; 0x30
 8007d1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d1e:	4422      	add	r2, r4
 8007d20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d28:	3302      	adds	r3, #2
 8007d2a:	e7c7      	b.n	8007cbc <_printf_common+0x58>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	4622      	mov	r2, r4
 8007d30:	4649      	mov	r1, r9
 8007d32:	4638      	mov	r0, r7
 8007d34:	47c0      	blx	r8
 8007d36:	3001      	adds	r0, #1
 8007d38:	d0e6      	beq.n	8007d08 <_printf_common+0xa4>
 8007d3a:	3601      	adds	r6, #1
 8007d3c:	e7d9      	b.n	8007cf2 <_printf_common+0x8e>
	...

08007d40 <_printf_i>:
 8007d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d44:	7e0f      	ldrb	r7, [r1, #24]
 8007d46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d48:	2f78      	cmp	r7, #120	; 0x78
 8007d4a:	4691      	mov	r9, r2
 8007d4c:	4680      	mov	r8, r0
 8007d4e:	460c      	mov	r4, r1
 8007d50:	469a      	mov	sl, r3
 8007d52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d56:	d807      	bhi.n	8007d68 <_printf_i+0x28>
 8007d58:	2f62      	cmp	r7, #98	; 0x62
 8007d5a:	d80a      	bhi.n	8007d72 <_printf_i+0x32>
 8007d5c:	2f00      	cmp	r7, #0
 8007d5e:	f000 80d8 	beq.w	8007f12 <_printf_i+0x1d2>
 8007d62:	2f58      	cmp	r7, #88	; 0x58
 8007d64:	f000 80a3 	beq.w	8007eae <_printf_i+0x16e>
 8007d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d70:	e03a      	b.n	8007de8 <_printf_i+0xa8>
 8007d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d76:	2b15      	cmp	r3, #21
 8007d78:	d8f6      	bhi.n	8007d68 <_printf_i+0x28>
 8007d7a:	a101      	add	r1, pc, #4	; (adr r1, 8007d80 <_printf_i+0x40>)
 8007d7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d80:	08007dd9 	.word	0x08007dd9
 8007d84:	08007ded 	.word	0x08007ded
 8007d88:	08007d69 	.word	0x08007d69
 8007d8c:	08007d69 	.word	0x08007d69
 8007d90:	08007d69 	.word	0x08007d69
 8007d94:	08007d69 	.word	0x08007d69
 8007d98:	08007ded 	.word	0x08007ded
 8007d9c:	08007d69 	.word	0x08007d69
 8007da0:	08007d69 	.word	0x08007d69
 8007da4:	08007d69 	.word	0x08007d69
 8007da8:	08007d69 	.word	0x08007d69
 8007dac:	08007ef9 	.word	0x08007ef9
 8007db0:	08007e1d 	.word	0x08007e1d
 8007db4:	08007edb 	.word	0x08007edb
 8007db8:	08007d69 	.word	0x08007d69
 8007dbc:	08007d69 	.word	0x08007d69
 8007dc0:	08007f1b 	.word	0x08007f1b
 8007dc4:	08007d69 	.word	0x08007d69
 8007dc8:	08007e1d 	.word	0x08007e1d
 8007dcc:	08007d69 	.word	0x08007d69
 8007dd0:	08007d69 	.word	0x08007d69
 8007dd4:	08007ee3 	.word	0x08007ee3
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	1d1a      	adds	r2, r3, #4
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	602a      	str	r2, [r5, #0]
 8007de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007de8:	2301      	movs	r3, #1
 8007dea:	e0a3      	b.n	8007f34 <_printf_i+0x1f4>
 8007dec:	6820      	ldr	r0, [r4, #0]
 8007dee:	6829      	ldr	r1, [r5, #0]
 8007df0:	0606      	lsls	r6, r0, #24
 8007df2:	f101 0304 	add.w	r3, r1, #4
 8007df6:	d50a      	bpl.n	8007e0e <_printf_i+0xce>
 8007df8:	680e      	ldr	r6, [r1, #0]
 8007dfa:	602b      	str	r3, [r5, #0]
 8007dfc:	2e00      	cmp	r6, #0
 8007dfe:	da03      	bge.n	8007e08 <_printf_i+0xc8>
 8007e00:	232d      	movs	r3, #45	; 0x2d
 8007e02:	4276      	negs	r6, r6
 8007e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e08:	485e      	ldr	r0, [pc, #376]	; (8007f84 <_printf_i+0x244>)
 8007e0a:	230a      	movs	r3, #10
 8007e0c:	e019      	b.n	8007e42 <_printf_i+0x102>
 8007e0e:	680e      	ldr	r6, [r1, #0]
 8007e10:	602b      	str	r3, [r5, #0]
 8007e12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e16:	bf18      	it	ne
 8007e18:	b236      	sxthne	r6, r6
 8007e1a:	e7ef      	b.n	8007dfc <_printf_i+0xbc>
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	6820      	ldr	r0, [r4, #0]
 8007e20:	1d19      	adds	r1, r3, #4
 8007e22:	6029      	str	r1, [r5, #0]
 8007e24:	0601      	lsls	r1, r0, #24
 8007e26:	d501      	bpl.n	8007e2c <_printf_i+0xec>
 8007e28:	681e      	ldr	r6, [r3, #0]
 8007e2a:	e002      	b.n	8007e32 <_printf_i+0xf2>
 8007e2c:	0646      	lsls	r6, r0, #25
 8007e2e:	d5fb      	bpl.n	8007e28 <_printf_i+0xe8>
 8007e30:	881e      	ldrh	r6, [r3, #0]
 8007e32:	4854      	ldr	r0, [pc, #336]	; (8007f84 <_printf_i+0x244>)
 8007e34:	2f6f      	cmp	r7, #111	; 0x6f
 8007e36:	bf0c      	ite	eq
 8007e38:	2308      	moveq	r3, #8
 8007e3a:	230a      	movne	r3, #10
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e42:	6865      	ldr	r5, [r4, #4]
 8007e44:	60a5      	str	r5, [r4, #8]
 8007e46:	2d00      	cmp	r5, #0
 8007e48:	bfa2      	ittt	ge
 8007e4a:	6821      	ldrge	r1, [r4, #0]
 8007e4c:	f021 0104 	bicge.w	r1, r1, #4
 8007e50:	6021      	strge	r1, [r4, #0]
 8007e52:	b90e      	cbnz	r6, 8007e58 <_printf_i+0x118>
 8007e54:	2d00      	cmp	r5, #0
 8007e56:	d04d      	beq.n	8007ef4 <_printf_i+0x1b4>
 8007e58:	4615      	mov	r5, r2
 8007e5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e5e:	fb03 6711 	mls	r7, r3, r1, r6
 8007e62:	5dc7      	ldrb	r7, [r0, r7]
 8007e64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e68:	4637      	mov	r7, r6
 8007e6a:	42bb      	cmp	r3, r7
 8007e6c:	460e      	mov	r6, r1
 8007e6e:	d9f4      	bls.n	8007e5a <_printf_i+0x11a>
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	d10b      	bne.n	8007e8c <_printf_i+0x14c>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	07de      	lsls	r6, r3, #31
 8007e78:	d508      	bpl.n	8007e8c <_printf_i+0x14c>
 8007e7a:	6923      	ldr	r3, [r4, #16]
 8007e7c:	6861      	ldr	r1, [r4, #4]
 8007e7e:	4299      	cmp	r1, r3
 8007e80:	bfde      	ittt	le
 8007e82:	2330      	movle	r3, #48	; 0x30
 8007e84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e8c:	1b52      	subs	r2, r2, r5
 8007e8e:	6122      	str	r2, [r4, #16]
 8007e90:	f8cd a000 	str.w	sl, [sp]
 8007e94:	464b      	mov	r3, r9
 8007e96:	aa03      	add	r2, sp, #12
 8007e98:	4621      	mov	r1, r4
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	f7ff fee2 	bl	8007c64 <_printf_common>
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d14c      	bne.n	8007f3e <_printf_i+0x1fe>
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea8:	b004      	add	sp, #16
 8007eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eae:	4835      	ldr	r0, [pc, #212]	; (8007f84 <_printf_i+0x244>)
 8007eb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007eb4:	6829      	ldr	r1, [r5, #0]
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ebc:	6029      	str	r1, [r5, #0]
 8007ebe:	061d      	lsls	r5, r3, #24
 8007ec0:	d514      	bpl.n	8007eec <_printf_i+0x1ac>
 8007ec2:	07df      	lsls	r7, r3, #31
 8007ec4:	bf44      	itt	mi
 8007ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8007eca:	6023      	strmi	r3, [r4, #0]
 8007ecc:	b91e      	cbnz	r6, 8007ed6 <_printf_i+0x196>
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	f023 0320 	bic.w	r3, r3, #32
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	2310      	movs	r3, #16
 8007ed8:	e7b0      	b.n	8007e3c <_printf_i+0xfc>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	f043 0320 	orr.w	r3, r3, #32
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	2378      	movs	r3, #120	; 0x78
 8007ee4:	4828      	ldr	r0, [pc, #160]	; (8007f88 <_printf_i+0x248>)
 8007ee6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007eea:	e7e3      	b.n	8007eb4 <_printf_i+0x174>
 8007eec:	0659      	lsls	r1, r3, #25
 8007eee:	bf48      	it	mi
 8007ef0:	b2b6      	uxthmi	r6, r6
 8007ef2:	e7e6      	b.n	8007ec2 <_printf_i+0x182>
 8007ef4:	4615      	mov	r5, r2
 8007ef6:	e7bb      	b.n	8007e70 <_printf_i+0x130>
 8007ef8:	682b      	ldr	r3, [r5, #0]
 8007efa:	6826      	ldr	r6, [r4, #0]
 8007efc:	6961      	ldr	r1, [r4, #20]
 8007efe:	1d18      	adds	r0, r3, #4
 8007f00:	6028      	str	r0, [r5, #0]
 8007f02:	0635      	lsls	r5, r6, #24
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	d501      	bpl.n	8007f0c <_printf_i+0x1cc>
 8007f08:	6019      	str	r1, [r3, #0]
 8007f0a:	e002      	b.n	8007f12 <_printf_i+0x1d2>
 8007f0c:	0670      	lsls	r0, r6, #25
 8007f0e:	d5fb      	bpl.n	8007f08 <_printf_i+0x1c8>
 8007f10:	8019      	strh	r1, [r3, #0]
 8007f12:	2300      	movs	r3, #0
 8007f14:	6123      	str	r3, [r4, #16]
 8007f16:	4615      	mov	r5, r2
 8007f18:	e7ba      	b.n	8007e90 <_printf_i+0x150>
 8007f1a:	682b      	ldr	r3, [r5, #0]
 8007f1c:	1d1a      	adds	r2, r3, #4
 8007f1e:	602a      	str	r2, [r5, #0]
 8007f20:	681d      	ldr	r5, [r3, #0]
 8007f22:	6862      	ldr	r2, [r4, #4]
 8007f24:	2100      	movs	r1, #0
 8007f26:	4628      	mov	r0, r5
 8007f28:	f7f8 f992 	bl	8000250 <memchr>
 8007f2c:	b108      	cbz	r0, 8007f32 <_printf_i+0x1f2>
 8007f2e:	1b40      	subs	r0, r0, r5
 8007f30:	6060      	str	r0, [r4, #4]
 8007f32:	6863      	ldr	r3, [r4, #4]
 8007f34:	6123      	str	r3, [r4, #16]
 8007f36:	2300      	movs	r3, #0
 8007f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f3c:	e7a8      	b.n	8007e90 <_printf_i+0x150>
 8007f3e:	6923      	ldr	r3, [r4, #16]
 8007f40:	462a      	mov	r2, r5
 8007f42:	4649      	mov	r1, r9
 8007f44:	4640      	mov	r0, r8
 8007f46:	47d0      	blx	sl
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d0ab      	beq.n	8007ea4 <_printf_i+0x164>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	079b      	lsls	r3, r3, #30
 8007f50:	d413      	bmi.n	8007f7a <_printf_i+0x23a>
 8007f52:	68e0      	ldr	r0, [r4, #12]
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	4298      	cmp	r0, r3
 8007f58:	bfb8      	it	lt
 8007f5a:	4618      	movlt	r0, r3
 8007f5c:	e7a4      	b.n	8007ea8 <_printf_i+0x168>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	4632      	mov	r2, r6
 8007f62:	4649      	mov	r1, r9
 8007f64:	4640      	mov	r0, r8
 8007f66:	47d0      	blx	sl
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d09b      	beq.n	8007ea4 <_printf_i+0x164>
 8007f6c:	3501      	adds	r5, #1
 8007f6e:	68e3      	ldr	r3, [r4, #12]
 8007f70:	9903      	ldr	r1, [sp, #12]
 8007f72:	1a5b      	subs	r3, r3, r1
 8007f74:	42ab      	cmp	r3, r5
 8007f76:	dcf2      	bgt.n	8007f5e <_printf_i+0x21e>
 8007f78:	e7eb      	b.n	8007f52 <_printf_i+0x212>
 8007f7a:	2500      	movs	r5, #0
 8007f7c:	f104 0619 	add.w	r6, r4, #25
 8007f80:	e7f5      	b.n	8007f6e <_printf_i+0x22e>
 8007f82:	bf00      	nop
 8007f84:	0800beb2 	.word	0x0800beb2
 8007f88:	0800bec3 	.word	0x0800bec3

08007f8c <_scanf_float>:
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	b087      	sub	sp, #28
 8007f92:	4617      	mov	r7, r2
 8007f94:	9303      	str	r3, [sp, #12]
 8007f96:	688b      	ldr	r3, [r1, #8]
 8007f98:	1e5a      	subs	r2, r3, #1
 8007f9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007f9e:	bf83      	ittte	hi
 8007fa0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007fa4:	195b      	addhi	r3, r3, r5
 8007fa6:	9302      	strhi	r3, [sp, #8]
 8007fa8:	2300      	movls	r3, #0
 8007faa:	bf86      	itte	hi
 8007fac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007fb0:	608b      	strhi	r3, [r1, #8]
 8007fb2:	9302      	strls	r3, [sp, #8]
 8007fb4:	680b      	ldr	r3, [r1, #0]
 8007fb6:	468b      	mov	fp, r1
 8007fb8:	2500      	movs	r5, #0
 8007fba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007fbe:	f84b 3b1c 	str.w	r3, [fp], #28
 8007fc2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007fc6:	4680      	mov	r8, r0
 8007fc8:	460c      	mov	r4, r1
 8007fca:	465e      	mov	r6, fp
 8007fcc:	46aa      	mov	sl, r5
 8007fce:	46a9      	mov	r9, r5
 8007fd0:	9501      	str	r5, [sp, #4]
 8007fd2:	68a2      	ldr	r2, [r4, #8]
 8007fd4:	b152      	cbz	r2, 8007fec <_scanf_float+0x60>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b4e      	cmp	r3, #78	; 0x4e
 8007fdc:	d864      	bhi.n	80080a8 <_scanf_float+0x11c>
 8007fde:	2b40      	cmp	r3, #64	; 0x40
 8007fe0:	d83c      	bhi.n	800805c <_scanf_float+0xd0>
 8007fe2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007fe6:	b2c8      	uxtb	r0, r1
 8007fe8:	280e      	cmp	r0, #14
 8007fea:	d93a      	bls.n	8008062 <_scanf_float+0xd6>
 8007fec:	f1b9 0f00 	cmp.w	r9, #0
 8007ff0:	d003      	beq.n	8007ffa <_scanf_float+0x6e>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ffe:	f1ba 0f01 	cmp.w	sl, #1
 8008002:	f200 8113 	bhi.w	800822c <_scanf_float+0x2a0>
 8008006:	455e      	cmp	r6, fp
 8008008:	f200 8105 	bhi.w	8008216 <_scanf_float+0x28a>
 800800c:	2501      	movs	r5, #1
 800800e:	4628      	mov	r0, r5
 8008010:	b007      	add	sp, #28
 8008012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008016:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800801a:	2a0d      	cmp	r2, #13
 800801c:	d8e6      	bhi.n	8007fec <_scanf_float+0x60>
 800801e:	a101      	add	r1, pc, #4	; (adr r1, 8008024 <_scanf_float+0x98>)
 8008020:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008024:	08008163 	.word	0x08008163
 8008028:	08007fed 	.word	0x08007fed
 800802c:	08007fed 	.word	0x08007fed
 8008030:	08007fed 	.word	0x08007fed
 8008034:	080081c3 	.word	0x080081c3
 8008038:	0800819b 	.word	0x0800819b
 800803c:	08007fed 	.word	0x08007fed
 8008040:	08007fed 	.word	0x08007fed
 8008044:	08008171 	.word	0x08008171
 8008048:	08007fed 	.word	0x08007fed
 800804c:	08007fed 	.word	0x08007fed
 8008050:	08007fed 	.word	0x08007fed
 8008054:	08007fed 	.word	0x08007fed
 8008058:	08008129 	.word	0x08008129
 800805c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008060:	e7db      	b.n	800801a <_scanf_float+0x8e>
 8008062:	290e      	cmp	r1, #14
 8008064:	d8c2      	bhi.n	8007fec <_scanf_float+0x60>
 8008066:	a001      	add	r0, pc, #4	; (adr r0, 800806c <_scanf_float+0xe0>)
 8008068:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800806c:	0800811b 	.word	0x0800811b
 8008070:	08007fed 	.word	0x08007fed
 8008074:	0800811b 	.word	0x0800811b
 8008078:	080081af 	.word	0x080081af
 800807c:	08007fed 	.word	0x08007fed
 8008080:	080080c9 	.word	0x080080c9
 8008084:	08008105 	.word	0x08008105
 8008088:	08008105 	.word	0x08008105
 800808c:	08008105 	.word	0x08008105
 8008090:	08008105 	.word	0x08008105
 8008094:	08008105 	.word	0x08008105
 8008098:	08008105 	.word	0x08008105
 800809c:	08008105 	.word	0x08008105
 80080a0:	08008105 	.word	0x08008105
 80080a4:	08008105 	.word	0x08008105
 80080a8:	2b6e      	cmp	r3, #110	; 0x6e
 80080aa:	d809      	bhi.n	80080c0 <_scanf_float+0x134>
 80080ac:	2b60      	cmp	r3, #96	; 0x60
 80080ae:	d8b2      	bhi.n	8008016 <_scanf_float+0x8a>
 80080b0:	2b54      	cmp	r3, #84	; 0x54
 80080b2:	d077      	beq.n	80081a4 <_scanf_float+0x218>
 80080b4:	2b59      	cmp	r3, #89	; 0x59
 80080b6:	d199      	bne.n	8007fec <_scanf_float+0x60>
 80080b8:	2d07      	cmp	r5, #7
 80080ba:	d197      	bne.n	8007fec <_scanf_float+0x60>
 80080bc:	2508      	movs	r5, #8
 80080be:	e029      	b.n	8008114 <_scanf_float+0x188>
 80080c0:	2b74      	cmp	r3, #116	; 0x74
 80080c2:	d06f      	beq.n	80081a4 <_scanf_float+0x218>
 80080c4:	2b79      	cmp	r3, #121	; 0x79
 80080c6:	e7f6      	b.n	80080b6 <_scanf_float+0x12a>
 80080c8:	6821      	ldr	r1, [r4, #0]
 80080ca:	05c8      	lsls	r0, r1, #23
 80080cc:	d51a      	bpl.n	8008104 <_scanf_float+0x178>
 80080ce:	9b02      	ldr	r3, [sp, #8]
 80080d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80080d4:	6021      	str	r1, [r4, #0]
 80080d6:	f109 0901 	add.w	r9, r9, #1
 80080da:	b11b      	cbz	r3, 80080e4 <_scanf_float+0x158>
 80080dc:	3b01      	subs	r3, #1
 80080de:	3201      	adds	r2, #1
 80080e0:	9302      	str	r3, [sp, #8]
 80080e2:	60a2      	str	r2, [r4, #8]
 80080e4:	68a3      	ldr	r3, [r4, #8]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	60a3      	str	r3, [r4, #8]
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	3301      	adds	r3, #1
 80080ee:	6123      	str	r3, [r4, #16]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	607b      	str	r3, [r7, #4]
 80080f8:	f340 8084 	ble.w	8008204 <_scanf_float+0x278>
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	3301      	adds	r3, #1
 8008100:	603b      	str	r3, [r7, #0]
 8008102:	e766      	b.n	8007fd2 <_scanf_float+0x46>
 8008104:	eb1a 0f05 	cmn.w	sl, r5
 8008108:	f47f af70 	bne.w	8007fec <_scanf_float+0x60>
 800810c:	6822      	ldr	r2, [r4, #0]
 800810e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008112:	6022      	str	r2, [r4, #0]
 8008114:	f806 3b01 	strb.w	r3, [r6], #1
 8008118:	e7e4      	b.n	80080e4 <_scanf_float+0x158>
 800811a:	6822      	ldr	r2, [r4, #0]
 800811c:	0610      	lsls	r0, r2, #24
 800811e:	f57f af65 	bpl.w	8007fec <_scanf_float+0x60>
 8008122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008126:	e7f4      	b.n	8008112 <_scanf_float+0x186>
 8008128:	f1ba 0f00 	cmp.w	sl, #0
 800812c:	d10e      	bne.n	800814c <_scanf_float+0x1c0>
 800812e:	f1b9 0f00 	cmp.w	r9, #0
 8008132:	d10e      	bne.n	8008152 <_scanf_float+0x1c6>
 8008134:	6822      	ldr	r2, [r4, #0]
 8008136:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800813a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800813e:	d108      	bne.n	8008152 <_scanf_float+0x1c6>
 8008140:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008144:	6022      	str	r2, [r4, #0]
 8008146:	f04f 0a01 	mov.w	sl, #1
 800814a:	e7e3      	b.n	8008114 <_scanf_float+0x188>
 800814c:	f1ba 0f02 	cmp.w	sl, #2
 8008150:	d055      	beq.n	80081fe <_scanf_float+0x272>
 8008152:	2d01      	cmp	r5, #1
 8008154:	d002      	beq.n	800815c <_scanf_float+0x1d0>
 8008156:	2d04      	cmp	r5, #4
 8008158:	f47f af48 	bne.w	8007fec <_scanf_float+0x60>
 800815c:	3501      	adds	r5, #1
 800815e:	b2ed      	uxtb	r5, r5
 8008160:	e7d8      	b.n	8008114 <_scanf_float+0x188>
 8008162:	f1ba 0f01 	cmp.w	sl, #1
 8008166:	f47f af41 	bne.w	8007fec <_scanf_float+0x60>
 800816a:	f04f 0a02 	mov.w	sl, #2
 800816e:	e7d1      	b.n	8008114 <_scanf_float+0x188>
 8008170:	b97d      	cbnz	r5, 8008192 <_scanf_float+0x206>
 8008172:	f1b9 0f00 	cmp.w	r9, #0
 8008176:	f47f af3c 	bne.w	8007ff2 <_scanf_float+0x66>
 800817a:	6822      	ldr	r2, [r4, #0]
 800817c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008180:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008184:	f47f af39 	bne.w	8007ffa <_scanf_float+0x6e>
 8008188:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800818c:	6022      	str	r2, [r4, #0]
 800818e:	2501      	movs	r5, #1
 8008190:	e7c0      	b.n	8008114 <_scanf_float+0x188>
 8008192:	2d03      	cmp	r5, #3
 8008194:	d0e2      	beq.n	800815c <_scanf_float+0x1d0>
 8008196:	2d05      	cmp	r5, #5
 8008198:	e7de      	b.n	8008158 <_scanf_float+0x1cc>
 800819a:	2d02      	cmp	r5, #2
 800819c:	f47f af26 	bne.w	8007fec <_scanf_float+0x60>
 80081a0:	2503      	movs	r5, #3
 80081a2:	e7b7      	b.n	8008114 <_scanf_float+0x188>
 80081a4:	2d06      	cmp	r5, #6
 80081a6:	f47f af21 	bne.w	8007fec <_scanf_float+0x60>
 80081aa:	2507      	movs	r5, #7
 80081ac:	e7b2      	b.n	8008114 <_scanf_float+0x188>
 80081ae:	6822      	ldr	r2, [r4, #0]
 80081b0:	0591      	lsls	r1, r2, #22
 80081b2:	f57f af1b 	bpl.w	8007fec <_scanf_float+0x60>
 80081b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80081ba:	6022      	str	r2, [r4, #0]
 80081bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80081c0:	e7a8      	b.n	8008114 <_scanf_float+0x188>
 80081c2:	6822      	ldr	r2, [r4, #0]
 80081c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80081c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80081cc:	d006      	beq.n	80081dc <_scanf_float+0x250>
 80081ce:	0550      	lsls	r0, r2, #21
 80081d0:	f57f af0c 	bpl.w	8007fec <_scanf_float+0x60>
 80081d4:	f1b9 0f00 	cmp.w	r9, #0
 80081d8:	f43f af0f 	beq.w	8007ffa <_scanf_float+0x6e>
 80081dc:	0591      	lsls	r1, r2, #22
 80081de:	bf58      	it	pl
 80081e0:	9901      	ldrpl	r1, [sp, #4]
 80081e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80081e6:	bf58      	it	pl
 80081e8:	eba9 0101 	subpl.w	r1, r9, r1
 80081ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80081f0:	bf58      	it	pl
 80081f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80081f6:	6022      	str	r2, [r4, #0]
 80081f8:	f04f 0900 	mov.w	r9, #0
 80081fc:	e78a      	b.n	8008114 <_scanf_float+0x188>
 80081fe:	f04f 0a03 	mov.w	sl, #3
 8008202:	e787      	b.n	8008114 <_scanf_float+0x188>
 8008204:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008208:	4639      	mov	r1, r7
 800820a:	4640      	mov	r0, r8
 800820c:	4798      	blx	r3
 800820e:	2800      	cmp	r0, #0
 8008210:	f43f aedf 	beq.w	8007fd2 <_scanf_float+0x46>
 8008214:	e6ea      	b.n	8007fec <_scanf_float+0x60>
 8008216:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800821a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800821e:	463a      	mov	r2, r7
 8008220:	4640      	mov	r0, r8
 8008222:	4798      	blx	r3
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	3b01      	subs	r3, #1
 8008228:	6123      	str	r3, [r4, #16]
 800822a:	e6ec      	b.n	8008006 <_scanf_float+0x7a>
 800822c:	1e6b      	subs	r3, r5, #1
 800822e:	2b06      	cmp	r3, #6
 8008230:	d825      	bhi.n	800827e <_scanf_float+0x2f2>
 8008232:	2d02      	cmp	r5, #2
 8008234:	d836      	bhi.n	80082a4 <_scanf_float+0x318>
 8008236:	455e      	cmp	r6, fp
 8008238:	f67f aee8 	bls.w	800800c <_scanf_float+0x80>
 800823c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008240:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008244:	463a      	mov	r2, r7
 8008246:	4640      	mov	r0, r8
 8008248:	4798      	blx	r3
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	3b01      	subs	r3, #1
 800824e:	6123      	str	r3, [r4, #16]
 8008250:	e7f1      	b.n	8008236 <_scanf_float+0x2aa>
 8008252:	9802      	ldr	r0, [sp, #8]
 8008254:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008258:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800825c:	9002      	str	r0, [sp, #8]
 800825e:	463a      	mov	r2, r7
 8008260:	4640      	mov	r0, r8
 8008262:	4798      	blx	r3
 8008264:	6923      	ldr	r3, [r4, #16]
 8008266:	3b01      	subs	r3, #1
 8008268:	6123      	str	r3, [r4, #16]
 800826a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800826e:	fa5f fa8a 	uxtb.w	sl, sl
 8008272:	f1ba 0f02 	cmp.w	sl, #2
 8008276:	d1ec      	bne.n	8008252 <_scanf_float+0x2c6>
 8008278:	3d03      	subs	r5, #3
 800827a:	b2ed      	uxtb	r5, r5
 800827c:	1b76      	subs	r6, r6, r5
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	05da      	lsls	r2, r3, #23
 8008282:	d52f      	bpl.n	80082e4 <_scanf_float+0x358>
 8008284:	055b      	lsls	r3, r3, #21
 8008286:	d510      	bpl.n	80082aa <_scanf_float+0x31e>
 8008288:	455e      	cmp	r6, fp
 800828a:	f67f aebf 	bls.w	800800c <_scanf_float+0x80>
 800828e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008292:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008296:	463a      	mov	r2, r7
 8008298:	4640      	mov	r0, r8
 800829a:	4798      	blx	r3
 800829c:	6923      	ldr	r3, [r4, #16]
 800829e:	3b01      	subs	r3, #1
 80082a0:	6123      	str	r3, [r4, #16]
 80082a2:	e7f1      	b.n	8008288 <_scanf_float+0x2fc>
 80082a4:	46aa      	mov	sl, r5
 80082a6:	9602      	str	r6, [sp, #8]
 80082a8:	e7df      	b.n	800826a <_scanf_float+0x2de>
 80082aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80082ae:	6923      	ldr	r3, [r4, #16]
 80082b0:	2965      	cmp	r1, #101	; 0x65
 80082b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80082b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80082ba:	6123      	str	r3, [r4, #16]
 80082bc:	d00c      	beq.n	80082d8 <_scanf_float+0x34c>
 80082be:	2945      	cmp	r1, #69	; 0x45
 80082c0:	d00a      	beq.n	80082d8 <_scanf_float+0x34c>
 80082c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082c6:	463a      	mov	r2, r7
 80082c8:	4640      	mov	r0, r8
 80082ca:	4798      	blx	r3
 80082cc:	6923      	ldr	r3, [r4, #16]
 80082ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	1eb5      	subs	r5, r6, #2
 80082d6:	6123      	str	r3, [r4, #16]
 80082d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082dc:	463a      	mov	r2, r7
 80082de:	4640      	mov	r0, r8
 80082e0:	4798      	blx	r3
 80082e2:	462e      	mov	r6, r5
 80082e4:	6825      	ldr	r5, [r4, #0]
 80082e6:	f015 0510 	ands.w	r5, r5, #16
 80082ea:	d14e      	bne.n	800838a <_scanf_float+0x3fe>
 80082ec:	7035      	strb	r5, [r6, #0]
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80082f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f8:	d119      	bne.n	800832e <_scanf_float+0x3a2>
 80082fa:	9b01      	ldr	r3, [sp, #4]
 80082fc:	454b      	cmp	r3, r9
 80082fe:	eba3 0209 	sub.w	r2, r3, r9
 8008302:	d121      	bne.n	8008348 <_scanf_float+0x3bc>
 8008304:	2200      	movs	r2, #0
 8008306:	4659      	mov	r1, fp
 8008308:	4640      	mov	r0, r8
 800830a:	f000 fe4f 	bl	8008fac <_strtod_r>
 800830e:	6822      	ldr	r2, [r4, #0]
 8008310:	9b03      	ldr	r3, [sp, #12]
 8008312:	f012 0f02 	tst.w	r2, #2
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	d021      	beq.n	800835e <_scanf_float+0x3d2>
 800831a:	9903      	ldr	r1, [sp, #12]
 800831c:	1d1a      	adds	r2, r3, #4
 800831e:	600a      	str	r2, [r1, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	ed83 0b00 	vstr	d0, [r3]
 8008326:	68e3      	ldr	r3, [r4, #12]
 8008328:	3301      	adds	r3, #1
 800832a:	60e3      	str	r3, [r4, #12]
 800832c:	e66f      	b.n	800800e <_scanf_float+0x82>
 800832e:	9b04      	ldr	r3, [sp, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0e7      	beq.n	8008304 <_scanf_float+0x378>
 8008334:	9905      	ldr	r1, [sp, #20]
 8008336:	230a      	movs	r3, #10
 8008338:	462a      	mov	r2, r5
 800833a:	3101      	adds	r1, #1
 800833c:	4640      	mov	r0, r8
 800833e:	f000 febd 	bl	80090bc <_strtol_r>
 8008342:	9b04      	ldr	r3, [sp, #16]
 8008344:	9e05      	ldr	r6, [sp, #20]
 8008346:	1ac2      	subs	r2, r0, r3
 8008348:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800834c:	429e      	cmp	r6, r3
 800834e:	bf28      	it	cs
 8008350:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008354:	490e      	ldr	r1, [pc, #56]	; (8008390 <_scanf_float+0x404>)
 8008356:	4630      	mov	r0, r6
 8008358:	f000 f824 	bl	80083a4 <siprintf>
 800835c:	e7d2      	b.n	8008304 <_scanf_float+0x378>
 800835e:	9903      	ldr	r1, [sp, #12]
 8008360:	f012 0f04 	tst.w	r2, #4
 8008364:	f103 0204 	add.w	r2, r3, #4
 8008368:	600a      	str	r2, [r1, #0]
 800836a:	d1d9      	bne.n	8008320 <_scanf_float+0x394>
 800836c:	eeb4 0b40 	vcmp.f64	d0, d0
 8008370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008374:	681e      	ldr	r6, [r3, #0]
 8008376:	d705      	bvc.n	8008384 <_scanf_float+0x3f8>
 8008378:	4806      	ldr	r0, [pc, #24]	; (8008394 <_scanf_float+0x408>)
 800837a:	f000 f80d 	bl	8008398 <nanf>
 800837e:	ed86 0a00 	vstr	s0, [r6]
 8008382:	e7d0      	b.n	8008326 <_scanf_float+0x39a>
 8008384:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008388:	e7f9      	b.n	800837e <_scanf_float+0x3f2>
 800838a:	2500      	movs	r5, #0
 800838c:	e63f      	b.n	800800e <_scanf_float+0x82>
 800838e:	bf00      	nop
 8008390:	0800bed4 	.word	0x0800bed4
 8008394:	0800c2e0 	.word	0x0800c2e0

08008398 <nanf>:
 8008398:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80083a0 <nanf+0x8>
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	7fc00000 	.word	0x7fc00000

080083a4 <siprintf>:
 80083a4:	b40e      	push	{r1, r2, r3}
 80083a6:	b500      	push	{lr}
 80083a8:	b09c      	sub	sp, #112	; 0x70
 80083aa:	ab1d      	add	r3, sp, #116	; 0x74
 80083ac:	9002      	str	r0, [sp, #8]
 80083ae:	9006      	str	r0, [sp, #24]
 80083b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083b4:	4809      	ldr	r0, [pc, #36]	; (80083dc <siprintf+0x38>)
 80083b6:	9107      	str	r1, [sp, #28]
 80083b8:	9104      	str	r1, [sp, #16]
 80083ba:	4909      	ldr	r1, [pc, #36]	; (80083e0 <siprintf+0x3c>)
 80083bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c0:	9105      	str	r1, [sp, #20]
 80083c2:	6800      	ldr	r0, [r0, #0]
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	a902      	add	r1, sp, #8
 80083c8:	f002 fe20 	bl	800b00c <_svfiprintf_r>
 80083cc:	9b02      	ldr	r3, [sp, #8]
 80083ce:	2200      	movs	r2, #0
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	b01c      	add	sp, #112	; 0x70
 80083d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083d8:	b003      	add	sp, #12
 80083da:	4770      	bx	lr
 80083dc:	20000038 	.word	0x20000038
 80083e0:	ffff0208 	.word	0xffff0208

080083e4 <strncpy>:
 80083e4:	b510      	push	{r4, lr}
 80083e6:	3901      	subs	r1, #1
 80083e8:	4603      	mov	r3, r0
 80083ea:	b132      	cbz	r2, 80083fa <strncpy+0x16>
 80083ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80083f0:	f803 4b01 	strb.w	r4, [r3], #1
 80083f4:	3a01      	subs	r2, #1
 80083f6:	2c00      	cmp	r4, #0
 80083f8:	d1f7      	bne.n	80083ea <strncpy+0x6>
 80083fa:	441a      	add	r2, r3
 80083fc:	2100      	movs	r1, #0
 80083fe:	4293      	cmp	r3, r2
 8008400:	d100      	bne.n	8008404 <strncpy+0x20>
 8008402:	bd10      	pop	{r4, pc}
 8008404:	f803 1b01 	strb.w	r1, [r3], #1
 8008408:	e7f9      	b.n	80083fe <strncpy+0x1a>

0800840a <sulp>:
 800840a:	b570      	push	{r4, r5, r6, lr}
 800840c:	4604      	mov	r4, r0
 800840e:	460d      	mov	r5, r1
 8008410:	4616      	mov	r6, r2
 8008412:	ec45 4b10 	vmov	d0, r4, r5
 8008416:	f002 fb5b 	bl	800aad0 <__ulp>
 800841a:	b17e      	cbz	r6, 800843c <sulp+0x32>
 800841c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008420:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008424:	2b00      	cmp	r3, #0
 8008426:	dd09      	ble.n	800843c <sulp+0x32>
 8008428:	051b      	lsls	r3, r3, #20
 800842a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800842e:	2000      	movs	r0, #0
 8008430:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008434:	ec41 0b17 	vmov	d7, r0, r1
 8008438:	ee20 0b07 	vmul.f64	d0, d0, d7
 800843c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008440 <_strtod_l>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	ed2d 8b0e 	vpush	{d8-d14}
 8008448:	b097      	sub	sp, #92	; 0x5c
 800844a:	461f      	mov	r7, r3
 800844c:	2300      	movs	r3, #0
 800844e:	9312      	str	r3, [sp, #72]	; 0x48
 8008450:	4ba1      	ldr	r3, [pc, #644]	; (80086d8 <_strtod_l+0x298>)
 8008452:	920d      	str	r2, [sp, #52]	; 0x34
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	9307      	str	r3, [sp, #28]
 8008458:	4604      	mov	r4, r0
 800845a:	4618      	mov	r0, r3
 800845c:	468b      	mov	fp, r1
 800845e:	f7f7 feef 	bl	8000240 <strlen>
 8008462:	f04f 0800 	mov.w	r8, #0
 8008466:	4605      	mov	r5, r0
 8008468:	f04f 0900 	mov.w	r9, #0
 800846c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008470:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008472:	7813      	ldrb	r3, [r2, #0]
 8008474:	2b2b      	cmp	r3, #43	; 0x2b
 8008476:	d04d      	beq.n	8008514 <_strtod_l+0xd4>
 8008478:	d83a      	bhi.n	80084f0 <_strtod_l+0xb0>
 800847a:	2b0d      	cmp	r3, #13
 800847c:	d833      	bhi.n	80084e6 <_strtod_l+0xa6>
 800847e:	2b08      	cmp	r3, #8
 8008480:	d833      	bhi.n	80084ea <_strtod_l+0xaa>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d03d      	beq.n	8008502 <_strtod_l+0xc2>
 8008486:	2300      	movs	r3, #0
 8008488:	9308      	str	r3, [sp, #32]
 800848a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800848c:	7833      	ldrb	r3, [r6, #0]
 800848e:	2b30      	cmp	r3, #48	; 0x30
 8008490:	f040 80b0 	bne.w	80085f4 <_strtod_l+0x1b4>
 8008494:	7873      	ldrb	r3, [r6, #1]
 8008496:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800849a:	2b58      	cmp	r3, #88	; 0x58
 800849c:	d167      	bne.n	800856e <_strtod_l+0x12e>
 800849e:	9b08      	ldr	r3, [sp, #32]
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	ab12      	add	r3, sp, #72	; 0x48
 80084a4:	9702      	str	r7, [sp, #8]
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	4a8c      	ldr	r2, [pc, #560]	; (80086dc <_strtod_l+0x29c>)
 80084aa:	ab13      	add	r3, sp, #76	; 0x4c
 80084ac:	a911      	add	r1, sp, #68	; 0x44
 80084ae:	4620      	mov	r0, r4
 80084b0:	f001 fc68 	bl	8009d84 <__gethex>
 80084b4:	f010 0507 	ands.w	r5, r0, #7
 80084b8:	4607      	mov	r7, r0
 80084ba:	d005      	beq.n	80084c8 <_strtod_l+0x88>
 80084bc:	2d06      	cmp	r5, #6
 80084be:	d12b      	bne.n	8008518 <_strtod_l+0xd8>
 80084c0:	3601      	adds	r6, #1
 80084c2:	2300      	movs	r3, #0
 80084c4:	9611      	str	r6, [sp, #68]	; 0x44
 80084c6:	9308      	str	r3, [sp, #32]
 80084c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f040 854e 	bne.w	8008f6c <_strtod_l+0xb2c>
 80084d0:	9b08      	ldr	r3, [sp, #32]
 80084d2:	b1e3      	cbz	r3, 800850e <_strtod_l+0xce>
 80084d4:	ec49 8b17 	vmov	d7, r8, r9
 80084d8:	eeb1 0b47 	vneg.f64	d0, d7
 80084dc:	b017      	add	sp, #92	; 0x5c
 80084de:	ecbd 8b0e 	vpop	{d8-d14}
 80084e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e6:	2b20      	cmp	r3, #32
 80084e8:	d1cd      	bne.n	8008486 <_strtod_l+0x46>
 80084ea:	3201      	adds	r2, #1
 80084ec:	9211      	str	r2, [sp, #68]	; 0x44
 80084ee:	e7bf      	b.n	8008470 <_strtod_l+0x30>
 80084f0:	2b2d      	cmp	r3, #45	; 0x2d
 80084f2:	d1c8      	bne.n	8008486 <_strtod_l+0x46>
 80084f4:	2301      	movs	r3, #1
 80084f6:	9308      	str	r3, [sp, #32]
 80084f8:	1c53      	adds	r3, r2, #1
 80084fa:	9311      	str	r3, [sp, #68]	; 0x44
 80084fc:	7853      	ldrb	r3, [r2, #1]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1c3      	bne.n	800848a <_strtod_l+0x4a>
 8008502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008504:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008508:	2b00      	cmp	r3, #0
 800850a:	f040 852d 	bne.w	8008f68 <_strtod_l+0xb28>
 800850e:	ec49 8b10 	vmov	d0, r8, r9
 8008512:	e7e3      	b.n	80084dc <_strtod_l+0x9c>
 8008514:	2300      	movs	r3, #0
 8008516:	e7ee      	b.n	80084f6 <_strtod_l+0xb6>
 8008518:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800851a:	b13a      	cbz	r2, 800852c <_strtod_l+0xec>
 800851c:	2135      	movs	r1, #53	; 0x35
 800851e:	a814      	add	r0, sp, #80	; 0x50
 8008520:	f002 fbde 	bl	800ace0 <__copybits>
 8008524:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008526:	4620      	mov	r0, r4
 8008528:	f001 ffa0 	bl	800a46c <_Bfree>
 800852c:	3d01      	subs	r5, #1
 800852e:	2d04      	cmp	r5, #4
 8008530:	d806      	bhi.n	8008540 <_strtod_l+0x100>
 8008532:	e8df f005 	tbb	[pc, r5]
 8008536:	030a      	.short	0x030a
 8008538:	1714      	.short	0x1714
 800853a:	0a          	.byte	0x0a
 800853b:	00          	.byte	0x00
 800853c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8008540:	073f      	lsls	r7, r7, #28
 8008542:	d5c1      	bpl.n	80084c8 <_strtod_l+0x88>
 8008544:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008548:	e7be      	b.n	80084c8 <_strtod_l+0x88>
 800854a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800854e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008550:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008554:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008558:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800855c:	e7f0      	b.n	8008540 <_strtod_l+0x100>
 800855e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80086e0 <_strtod_l+0x2a0>
 8008562:	e7ed      	b.n	8008540 <_strtod_l+0x100>
 8008564:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008568:	f04f 38ff 	mov.w	r8, #4294967295
 800856c:	e7e8      	b.n	8008540 <_strtod_l+0x100>
 800856e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	9211      	str	r2, [sp, #68]	; 0x44
 8008574:	785b      	ldrb	r3, [r3, #1]
 8008576:	2b30      	cmp	r3, #48	; 0x30
 8008578:	d0f9      	beq.n	800856e <_strtod_l+0x12e>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0a4      	beq.n	80084c8 <_strtod_l+0x88>
 800857e:	2301      	movs	r3, #1
 8008580:	f04f 0a00 	mov.w	sl, #0
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008588:	930a      	str	r3, [sp, #40]	; 0x28
 800858a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800858e:	f8cd a018 	str.w	sl, [sp, #24]
 8008592:	220a      	movs	r2, #10
 8008594:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008596:	7807      	ldrb	r7, [r0, #0]
 8008598:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800859c:	b2d9      	uxtb	r1, r3
 800859e:	2909      	cmp	r1, #9
 80085a0:	d92a      	bls.n	80085f8 <_strtod_l+0x1b8>
 80085a2:	9907      	ldr	r1, [sp, #28]
 80085a4:	462a      	mov	r2, r5
 80085a6:	f002 fe4b 	bl	800b240 <strncmp>
 80085aa:	2800      	cmp	r0, #0
 80085ac:	d033      	beq.n	8008616 <_strtod_l+0x1d6>
 80085ae:	2000      	movs	r0, #0
 80085b0:	9b06      	ldr	r3, [sp, #24]
 80085b2:	463a      	mov	r2, r7
 80085b4:	4601      	mov	r1, r0
 80085b6:	4607      	mov	r7, r0
 80085b8:	2a65      	cmp	r2, #101	; 0x65
 80085ba:	d001      	beq.n	80085c0 <_strtod_l+0x180>
 80085bc:	2a45      	cmp	r2, #69	; 0x45
 80085be:	d117      	bne.n	80085f0 <_strtod_l+0x1b0>
 80085c0:	b91b      	cbnz	r3, 80085ca <_strtod_l+0x18a>
 80085c2:	9b04      	ldr	r3, [sp, #16]
 80085c4:	4303      	orrs	r3, r0
 80085c6:	d09c      	beq.n	8008502 <_strtod_l+0xc2>
 80085c8:	2300      	movs	r3, #0
 80085ca:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80085ce:	f10b 0201 	add.w	r2, fp, #1
 80085d2:	9211      	str	r2, [sp, #68]	; 0x44
 80085d4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80085d8:	2a2b      	cmp	r2, #43	; 0x2b
 80085da:	d071      	beq.n	80086c0 <_strtod_l+0x280>
 80085dc:	2a2d      	cmp	r2, #45	; 0x2d
 80085de:	d077      	beq.n	80086d0 <_strtod_l+0x290>
 80085e0:	f04f 0e00 	mov.w	lr, #0
 80085e4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80085e8:	2d09      	cmp	r5, #9
 80085ea:	d97f      	bls.n	80086ec <_strtod_l+0x2ac>
 80085ec:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80085f0:	2500      	movs	r5, #0
 80085f2:	e09b      	b.n	800872c <_strtod_l+0x2ec>
 80085f4:	2300      	movs	r3, #0
 80085f6:	e7c3      	b.n	8008580 <_strtod_l+0x140>
 80085f8:	9906      	ldr	r1, [sp, #24]
 80085fa:	2908      	cmp	r1, #8
 80085fc:	bfdd      	ittte	le
 80085fe:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008600:	fb02 3301 	mlale	r3, r2, r1, r3
 8008604:	9309      	strle	r3, [sp, #36]	; 0x24
 8008606:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800860a:	9b06      	ldr	r3, [sp, #24]
 800860c:	3001      	adds	r0, #1
 800860e:	3301      	adds	r3, #1
 8008610:	9306      	str	r3, [sp, #24]
 8008612:	9011      	str	r0, [sp, #68]	; 0x44
 8008614:	e7be      	b.n	8008594 <_strtod_l+0x154>
 8008616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008618:	195a      	adds	r2, r3, r5
 800861a:	9211      	str	r2, [sp, #68]	; 0x44
 800861c:	5d5a      	ldrb	r2, [r3, r5]
 800861e:	9b06      	ldr	r3, [sp, #24]
 8008620:	b3a3      	cbz	r3, 800868c <_strtod_l+0x24c>
 8008622:	4607      	mov	r7, r0
 8008624:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008628:	2909      	cmp	r1, #9
 800862a:	d912      	bls.n	8008652 <_strtod_l+0x212>
 800862c:	2101      	movs	r1, #1
 800862e:	e7c3      	b.n	80085b8 <_strtod_l+0x178>
 8008630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	9211      	str	r2, [sp, #68]	; 0x44
 8008636:	785a      	ldrb	r2, [r3, #1]
 8008638:	3001      	adds	r0, #1
 800863a:	2a30      	cmp	r2, #48	; 0x30
 800863c:	d0f8      	beq.n	8008630 <_strtod_l+0x1f0>
 800863e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008642:	2b08      	cmp	r3, #8
 8008644:	f200 8497 	bhi.w	8008f76 <_strtod_l+0xb36>
 8008648:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800864a:	930a      	str	r3, [sp, #40]	; 0x28
 800864c:	4607      	mov	r7, r0
 800864e:	2000      	movs	r0, #0
 8008650:	4603      	mov	r3, r0
 8008652:	3a30      	subs	r2, #48	; 0x30
 8008654:	f100 0101 	add.w	r1, r0, #1
 8008658:	d012      	beq.n	8008680 <_strtod_l+0x240>
 800865a:	440f      	add	r7, r1
 800865c:	eb00 0c03 	add.w	ip, r0, r3
 8008660:	4619      	mov	r1, r3
 8008662:	250a      	movs	r5, #10
 8008664:	4561      	cmp	r1, ip
 8008666:	d113      	bne.n	8008690 <_strtod_l+0x250>
 8008668:	1819      	adds	r1, r3, r0
 800866a:	2908      	cmp	r1, #8
 800866c:	f103 0301 	add.w	r3, r3, #1
 8008670:	4403      	add	r3, r0
 8008672:	dc1c      	bgt.n	80086ae <_strtod_l+0x26e>
 8008674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008676:	210a      	movs	r1, #10
 8008678:	fb01 2200 	mla	r2, r1, r0, r2
 800867c:	9209      	str	r2, [sp, #36]	; 0x24
 800867e:	2100      	movs	r1, #0
 8008680:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008682:	1c50      	adds	r0, r2, #1
 8008684:	9011      	str	r0, [sp, #68]	; 0x44
 8008686:	7852      	ldrb	r2, [r2, #1]
 8008688:	4608      	mov	r0, r1
 800868a:	e7cb      	b.n	8008624 <_strtod_l+0x1e4>
 800868c:	9806      	ldr	r0, [sp, #24]
 800868e:	e7d4      	b.n	800863a <_strtod_l+0x1fa>
 8008690:	2908      	cmp	r1, #8
 8008692:	dc04      	bgt.n	800869e <_strtod_l+0x25e>
 8008694:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008696:	436e      	muls	r6, r5
 8008698:	9609      	str	r6, [sp, #36]	; 0x24
 800869a:	3101      	adds	r1, #1
 800869c:	e7e2      	b.n	8008664 <_strtod_l+0x224>
 800869e:	f101 0e01 	add.w	lr, r1, #1
 80086a2:	f1be 0f10 	cmp.w	lr, #16
 80086a6:	bfd8      	it	le
 80086a8:	fb05 fa0a 	mulle.w	sl, r5, sl
 80086ac:	e7f5      	b.n	800869a <_strtod_l+0x25a>
 80086ae:	2b10      	cmp	r3, #16
 80086b0:	bfdc      	itt	le
 80086b2:	210a      	movle	r1, #10
 80086b4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80086b8:	e7e1      	b.n	800867e <_strtod_l+0x23e>
 80086ba:	2700      	movs	r7, #0
 80086bc:	2101      	movs	r1, #1
 80086be:	e780      	b.n	80085c2 <_strtod_l+0x182>
 80086c0:	f04f 0e00 	mov.w	lr, #0
 80086c4:	f10b 0202 	add.w	r2, fp, #2
 80086c8:	9211      	str	r2, [sp, #68]	; 0x44
 80086ca:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80086ce:	e789      	b.n	80085e4 <_strtod_l+0x1a4>
 80086d0:	f04f 0e01 	mov.w	lr, #1
 80086d4:	e7f6      	b.n	80086c4 <_strtod_l+0x284>
 80086d6:	bf00      	nop
 80086d8:	0800c128 	.word	0x0800c128
 80086dc:	0800bedc 	.word	0x0800bedc
 80086e0:	7ff00000 	.word	0x7ff00000
 80086e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086e6:	1c55      	adds	r5, r2, #1
 80086e8:	9511      	str	r5, [sp, #68]	; 0x44
 80086ea:	7852      	ldrb	r2, [r2, #1]
 80086ec:	2a30      	cmp	r2, #48	; 0x30
 80086ee:	d0f9      	beq.n	80086e4 <_strtod_l+0x2a4>
 80086f0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80086f4:	2d08      	cmp	r5, #8
 80086f6:	f63f af7b 	bhi.w	80085f0 <_strtod_l+0x1b0>
 80086fa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80086fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008700:	9207      	str	r2, [sp, #28]
 8008702:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008704:	1c55      	adds	r5, r2, #1
 8008706:	9511      	str	r5, [sp, #68]	; 0x44
 8008708:	7852      	ldrb	r2, [r2, #1]
 800870a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800870e:	2e09      	cmp	r6, #9
 8008710:	d937      	bls.n	8008782 <_strtod_l+0x342>
 8008712:	9e07      	ldr	r6, [sp, #28]
 8008714:	1bad      	subs	r5, r5, r6
 8008716:	2d08      	cmp	r5, #8
 8008718:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800871c:	dc02      	bgt.n	8008724 <_strtod_l+0x2e4>
 800871e:	4565      	cmp	r5, ip
 8008720:	bfa8      	it	ge
 8008722:	4665      	movge	r5, ip
 8008724:	f1be 0f00 	cmp.w	lr, #0
 8008728:	d000      	beq.n	800872c <_strtod_l+0x2ec>
 800872a:	426d      	negs	r5, r5
 800872c:	2b00      	cmp	r3, #0
 800872e:	d14d      	bne.n	80087cc <_strtod_l+0x38c>
 8008730:	9b04      	ldr	r3, [sp, #16]
 8008732:	4303      	orrs	r3, r0
 8008734:	f47f aec8 	bne.w	80084c8 <_strtod_l+0x88>
 8008738:	2900      	cmp	r1, #0
 800873a:	f47f aee2 	bne.w	8008502 <_strtod_l+0xc2>
 800873e:	2a69      	cmp	r2, #105	; 0x69
 8008740:	d027      	beq.n	8008792 <_strtod_l+0x352>
 8008742:	dc24      	bgt.n	800878e <_strtod_l+0x34e>
 8008744:	2a49      	cmp	r2, #73	; 0x49
 8008746:	d024      	beq.n	8008792 <_strtod_l+0x352>
 8008748:	2a4e      	cmp	r2, #78	; 0x4e
 800874a:	f47f aeda 	bne.w	8008502 <_strtod_l+0xc2>
 800874e:	4996      	ldr	r1, [pc, #600]	; (80089a8 <_strtod_l+0x568>)
 8008750:	a811      	add	r0, sp, #68	; 0x44
 8008752:	f001 fd6f 	bl	800a234 <__match>
 8008756:	2800      	cmp	r0, #0
 8008758:	f43f aed3 	beq.w	8008502 <_strtod_l+0xc2>
 800875c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b28      	cmp	r3, #40	; 0x28
 8008762:	d12d      	bne.n	80087c0 <_strtod_l+0x380>
 8008764:	4991      	ldr	r1, [pc, #580]	; (80089ac <_strtod_l+0x56c>)
 8008766:	aa14      	add	r2, sp, #80	; 0x50
 8008768:	a811      	add	r0, sp, #68	; 0x44
 800876a:	f001 fd77 	bl	800a25c <__hexnan>
 800876e:	2805      	cmp	r0, #5
 8008770:	d126      	bne.n	80087c0 <_strtod_l+0x380>
 8008772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008774:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008778:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800877c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008780:	e6a2      	b.n	80084c8 <_strtod_l+0x88>
 8008782:	250a      	movs	r5, #10
 8008784:	fb05 250c 	mla	r5, r5, ip, r2
 8008788:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800878c:	e7b9      	b.n	8008702 <_strtod_l+0x2c2>
 800878e:	2a6e      	cmp	r2, #110	; 0x6e
 8008790:	e7db      	b.n	800874a <_strtod_l+0x30a>
 8008792:	4987      	ldr	r1, [pc, #540]	; (80089b0 <_strtod_l+0x570>)
 8008794:	a811      	add	r0, sp, #68	; 0x44
 8008796:	f001 fd4d 	bl	800a234 <__match>
 800879a:	2800      	cmp	r0, #0
 800879c:	f43f aeb1 	beq.w	8008502 <_strtod_l+0xc2>
 80087a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087a2:	4984      	ldr	r1, [pc, #528]	; (80089b4 <_strtod_l+0x574>)
 80087a4:	3b01      	subs	r3, #1
 80087a6:	a811      	add	r0, sp, #68	; 0x44
 80087a8:	9311      	str	r3, [sp, #68]	; 0x44
 80087aa:	f001 fd43 	bl	800a234 <__match>
 80087ae:	b910      	cbnz	r0, 80087b6 <_strtod_l+0x376>
 80087b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087b2:	3301      	adds	r3, #1
 80087b4:	9311      	str	r3, [sp, #68]	; 0x44
 80087b6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80089c8 <_strtod_l+0x588>
 80087ba:	f04f 0800 	mov.w	r8, #0
 80087be:	e683      	b.n	80084c8 <_strtod_l+0x88>
 80087c0:	487d      	ldr	r0, [pc, #500]	; (80089b8 <_strtod_l+0x578>)
 80087c2:	f002 fd25 	bl	800b210 <nan>
 80087c6:	ec59 8b10 	vmov	r8, r9, d0
 80087ca:	e67d      	b.n	80084c8 <_strtod_l+0x88>
 80087cc:	1bea      	subs	r2, r5, r7
 80087ce:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80087d2:	9207      	str	r2, [sp, #28]
 80087d4:	9a06      	ldr	r2, [sp, #24]
 80087d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80087da:	2a00      	cmp	r2, #0
 80087dc:	bf08      	it	eq
 80087de:	461a      	moveq	r2, r3
 80087e0:	2b10      	cmp	r3, #16
 80087e2:	9206      	str	r2, [sp, #24]
 80087e4:	461a      	mov	r2, r3
 80087e6:	bfa8      	it	ge
 80087e8:	2210      	movge	r2, #16
 80087ea:	2b09      	cmp	r3, #9
 80087ec:	ec59 8b17 	vmov	r8, r9, d7
 80087f0:	dd0c      	ble.n	800880c <_strtod_l+0x3cc>
 80087f2:	4972      	ldr	r1, [pc, #456]	; (80089bc <_strtod_l+0x57c>)
 80087f4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80087f8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80087fc:	ee06 aa90 	vmov	s13, sl
 8008800:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008804:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008808:	ec59 8b16 	vmov	r8, r9, d6
 800880c:	2b0f      	cmp	r3, #15
 800880e:	dc36      	bgt.n	800887e <_strtod_l+0x43e>
 8008810:	9907      	ldr	r1, [sp, #28]
 8008812:	2900      	cmp	r1, #0
 8008814:	f43f ae58 	beq.w	80084c8 <_strtod_l+0x88>
 8008818:	dd23      	ble.n	8008862 <_strtod_l+0x422>
 800881a:	2916      	cmp	r1, #22
 800881c:	dc0b      	bgt.n	8008836 <_strtod_l+0x3f6>
 800881e:	4b67      	ldr	r3, [pc, #412]	; (80089bc <_strtod_l+0x57c>)
 8008820:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008824:	ed93 7b00 	vldr	d7, [r3]
 8008828:	ec49 8b16 	vmov	d6, r8, r9
 800882c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008830:	ec59 8b17 	vmov	r8, r9, d7
 8008834:	e648      	b.n	80084c8 <_strtod_l+0x88>
 8008836:	9807      	ldr	r0, [sp, #28]
 8008838:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800883c:	4281      	cmp	r1, r0
 800883e:	db1e      	blt.n	800887e <_strtod_l+0x43e>
 8008840:	4a5e      	ldr	r2, [pc, #376]	; (80089bc <_strtod_l+0x57c>)
 8008842:	f1c3 030f 	rsb	r3, r3, #15
 8008846:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800884a:	ed91 7b00 	vldr	d7, [r1]
 800884e:	ec49 8b16 	vmov	d6, r8, r9
 8008852:	1ac3      	subs	r3, r0, r3
 8008854:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008858:	ee27 7b06 	vmul.f64	d7, d7, d6
 800885c:	ed92 6b00 	vldr	d6, [r2]
 8008860:	e7e4      	b.n	800882c <_strtod_l+0x3ec>
 8008862:	9907      	ldr	r1, [sp, #28]
 8008864:	3116      	adds	r1, #22
 8008866:	db0a      	blt.n	800887e <_strtod_l+0x43e>
 8008868:	4b54      	ldr	r3, [pc, #336]	; (80089bc <_strtod_l+0x57c>)
 800886a:	1b7d      	subs	r5, r7, r5
 800886c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008870:	ed95 7b00 	vldr	d7, [r5]
 8008874:	ec49 8b16 	vmov	d6, r8, r9
 8008878:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800887c:	e7d8      	b.n	8008830 <_strtod_l+0x3f0>
 800887e:	9907      	ldr	r1, [sp, #28]
 8008880:	1a9a      	subs	r2, r3, r2
 8008882:	440a      	add	r2, r1
 8008884:	2a00      	cmp	r2, #0
 8008886:	dd6f      	ble.n	8008968 <_strtod_l+0x528>
 8008888:	f012 000f 	ands.w	r0, r2, #15
 800888c:	d00a      	beq.n	80088a4 <_strtod_l+0x464>
 800888e:	494b      	ldr	r1, [pc, #300]	; (80089bc <_strtod_l+0x57c>)
 8008890:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008894:	ed91 7b00 	vldr	d7, [r1]
 8008898:	ec49 8b16 	vmov	d6, r8, r9
 800889c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80088a0:	ec59 8b17 	vmov	r8, r9, d7
 80088a4:	f032 020f 	bics.w	r2, r2, #15
 80088a8:	d04f      	beq.n	800894a <_strtod_l+0x50a>
 80088aa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80088ae:	dd22      	ble.n	80088f6 <_strtod_l+0x4b6>
 80088b0:	2500      	movs	r5, #0
 80088b2:	462e      	mov	r6, r5
 80088b4:	9506      	str	r5, [sp, #24]
 80088b6:	462f      	mov	r7, r5
 80088b8:	2322      	movs	r3, #34	; 0x22
 80088ba:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80089c8 <_strtod_l+0x588>
 80088be:	6023      	str	r3, [r4, #0]
 80088c0:	f04f 0800 	mov.w	r8, #0
 80088c4:	9b06      	ldr	r3, [sp, #24]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f43f adfe 	beq.w	80084c8 <_strtod_l+0x88>
 80088cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80088ce:	4620      	mov	r0, r4
 80088d0:	f001 fdcc 	bl	800a46c <_Bfree>
 80088d4:	4639      	mov	r1, r7
 80088d6:	4620      	mov	r0, r4
 80088d8:	f001 fdc8 	bl	800a46c <_Bfree>
 80088dc:	4631      	mov	r1, r6
 80088de:	4620      	mov	r0, r4
 80088e0:	f001 fdc4 	bl	800a46c <_Bfree>
 80088e4:	9906      	ldr	r1, [sp, #24]
 80088e6:	4620      	mov	r0, r4
 80088e8:	f001 fdc0 	bl	800a46c <_Bfree>
 80088ec:	4629      	mov	r1, r5
 80088ee:	4620      	mov	r0, r4
 80088f0:	f001 fdbc 	bl	800a46c <_Bfree>
 80088f4:	e5e8      	b.n	80084c8 <_strtod_l+0x88>
 80088f6:	2000      	movs	r0, #0
 80088f8:	ec49 8b17 	vmov	d7, r8, r9
 80088fc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80089c0 <_strtod_l+0x580>
 8008900:	1112      	asrs	r2, r2, #4
 8008902:	4601      	mov	r1, r0
 8008904:	2a01      	cmp	r2, #1
 8008906:	dc23      	bgt.n	8008950 <_strtod_l+0x510>
 8008908:	b108      	cbz	r0, 800890e <_strtod_l+0x4ce>
 800890a:	ec59 8b17 	vmov	r8, r9, d7
 800890e:	4a2c      	ldr	r2, [pc, #176]	; (80089c0 <_strtod_l+0x580>)
 8008910:	482c      	ldr	r0, [pc, #176]	; (80089c4 <_strtod_l+0x584>)
 8008912:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008916:	ed92 7b00 	vldr	d7, [r2]
 800891a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800891e:	ec49 8b16 	vmov	d6, r8, r9
 8008922:	4a29      	ldr	r2, [pc, #164]	; (80089c8 <_strtod_l+0x588>)
 8008924:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008928:	ee17 1a90 	vmov	r1, s15
 800892c:	400a      	ands	r2, r1
 800892e:	4282      	cmp	r2, r0
 8008930:	ec59 8b17 	vmov	r8, r9, d7
 8008934:	d8bc      	bhi.n	80088b0 <_strtod_l+0x470>
 8008936:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800893a:	4282      	cmp	r2, r0
 800893c:	bf86      	itte	hi
 800893e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80089cc <_strtod_l+0x58c>
 8008942:	f04f 38ff 	movhi.w	r8, #4294967295
 8008946:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800894a:	2200      	movs	r2, #0
 800894c:	9204      	str	r2, [sp, #16]
 800894e:	e078      	b.n	8008a42 <_strtod_l+0x602>
 8008950:	07d6      	lsls	r6, r2, #31
 8008952:	d504      	bpl.n	800895e <_strtod_l+0x51e>
 8008954:	ed9c 6b00 	vldr	d6, [ip]
 8008958:	2001      	movs	r0, #1
 800895a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800895e:	3101      	adds	r1, #1
 8008960:	1052      	asrs	r2, r2, #1
 8008962:	f10c 0c08 	add.w	ip, ip, #8
 8008966:	e7cd      	b.n	8008904 <_strtod_l+0x4c4>
 8008968:	d0ef      	beq.n	800894a <_strtod_l+0x50a>
 800896a:	4252      	negs	r2, r2
 800896c:	f012 000f 	ands.w	r0, r2, #15
 8008970:	d00a      	beq.n	8008988 <_strtod_l+0x548>
 8008972:	4912      	ldr	r1, [pc, #72]	; (80089bc <_strtod_l+0x57c>)
 8008974:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008978:	ed91 7b00 	vldr	d7, [r1]
 800897c:	ec49 8b16 	vmov	d6, r8, r9
 8008980:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008984:	ec59 8b17 	vmov	r8, r9, d7
 8008988:	1112      	asrs	r2, r2, #4
 800898a:	d0de      	beq.n	800894a <_strtod_l+0x50a>
 800898c:	2a1f      	cmp	r2, #31
 800898e:	dd1f      	ble.n	80089d0 <_strtod_l+0x590>
 8008990:	2500      	movs	r5, #0
 8008992:	462e      	mov	r6, r5
 8008994:	9506      	str	r5, [sp, #24]
 8008996:	462f      	mov	r7, r5
 8008998:	2322      	movs	r3, #34	; 0x22
 800899a:	f04f 0800 	mov.w	r8, #0
 800899e:	f04f 0900 	mov.w	r9, #0
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	e78e      	b.n	80088c4 <_strtod_l+0x484>
 80089a6:	bf00      	nop
 80089a8:	0800bead 	.word	0x0800bead
 80089ac:	0800bef0 	.word	0x0800bef0
 80089b0:	0800bea5 	.word	0x0800bea5
 80089b4:	0800c034 	.word	0x0800c034
 80089b8:	0800c2e0 	.word	0x0800c2e0
 80089bc:	0800c1c0 	.word	0x0800c1c0
 80089c0:	0800c198 	.word	0x0800c198
 80089c4:	7ca00000 	.word	0x7ca00000
 80089c8:	7ff00000 	.word	0x7ff00000
 80089cc:	7fefffff 	.word	0x7fefffff
 80089d0:	f012 0110 	ands.w	r1, r2, #16
 80089d4:	bf18      	it	ne
 80089d6:	216a      	movne	r1, #106	; 0x6a
 80089d8:	9104      	str	r1, [sp, #16]
 80089da:	ec49 8b17 	vmov	d7, r8, r9
 80089de:	49be      	ldr	r1, [pc, #760]	; (8008cd8 <_strtod_l+0x898>)
 80089e0:	2000      	movs	r0, #0
 80089e2:	07d6      	lsls	r6, r2, #31
 80089e4:	d504      	bpl.n	80089f0 <_strtod_l+0x5b0>
 80089e6:	ed91 6b00 	vldr	d6, [r1]
 80089ea:	2001      	movs	r0, #1
 80089ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80089f0:	1052      	asrs	r2, r2, #1
 80089f2:	f101 0108 	add.w	r1, r1, #8
 80089f6:	d1f4      	bne.n	80089e2 <_strtod_l+0x5a2>
 80089f8:	b108      	cbz	r0, 80089fe <_strtod_l+0x5be>
 80089fa:	ec59 8b17 	vmov	r8, r9, d7
 80089fe:	9a04      	ldr	r2, [sp, #16]
 8008a00:	b1c2      	cbz	r2, 8008a34 <_strtod_l+0x5f4>
 8008a02:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8008a06:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8008a0a:	2a00      	cmp	r2, #0
 8008a0c:	4648      	mov	r0, r9
 8008a0e:	dd11      	ble.n	8008a34 <_strtod_l+0x5f4>
 8008a10:	2a1f      	cmp	r2, #31
 8008a12:	f340 812e 	ble.w	8008c72 <_strtod_l+0x832>
 8008a16:	2a34      	cmp	r2, #52	; 0x34
 8008a18:	bfde      	ittt	le
 8008a1a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8008a1e:	f04f 32ff 	movle.w	r2, #4294967295
 8008a22:	fa02 f101 	lslle.w	r1, r2, r1
 8008a26:	f04f 0800 	mov.w	r8, #0
 8008a2a:	bfcc      	ite	gt
 8008a2c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008a30:	ea01 0900 	andle.w	r9, r1, r0
 8008a34:	ec49 8b17 	vmov	d7, r8, r9
 8008a38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a40:	d0a6      	beq.n	8008990 <_strtod_l+0x550>
 8008a42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a44:	9200      	str	r2, [sp, #0]
 8008a46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a48:	9a06      	ldr	r2, [sp, #24]
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f001 fd76 	bl	800a53c <__s2b>
 8008a50:	9006      	str	r0, [sp, #24]
 8008a52:	2800      	cmp	r0, #0
 8008a54:	f43f af2c 	beq.w	80088b0 <_strtod_l+0x470>
 8008a58:	9b07      	ldr	r3, [sp, #28]
 8008a5a:	1b7d      	subs	r5, r7, r5
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	bfb4      	ite	lt
 8008a60:	462b      	movlt	r3, r5
 8008a62:	2300      	movge	r3, #0
 8008a64:	9309      	str	r3, [sp, #36]	; 0x24
 8008a66:	9b07      	ldr	r3, [sp, #28]
 8008a68:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8008cb8 <_strtod_l+0x878>
 8008a6c:	ed9f ab94 	vldr	d10, [pc, #592]	; 8008cc0 <_strtod_l+0x880>
 8008a70:	ed9f bb95 	vldr	d11, [pc, #596]	; 8008cc8 <_strtod_l+0x888>
 8008a74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008a78:	2500      	movs	r5, #0
 8008a7a:	930c      	str	r3, [sp, #48]	; 0x30
 8008a7c:	462e      	mov	r6, r5
 8008a7e:	9b06      	ldr	r3, [sp, #24]
 8008a80:	4620      	mov	r0, r4
 8008a82:	6859      	ldr	r1, [r3, #4]
 8008a84:	f001 fcb2 	bl	800a3ec <_Balloc>
 8008a88:	4607      	mov	r7, r0
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	f43f af14 	beq.w	80088b8 <_strtod_l+0x478>
 8008a90:	9b06      	ldr	r3, [sp, #24]
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	3202      	adds	r2, #2
 8008a96:	f103 010c 	add.w	r1, r3, #12
 8008a9a:	0092      	lsls	r2, r2, #2
 8008a9c:	300c      	adds	r0, #12
 8008a9e:	f001 fc97 	bl	800a3d0 <memcpy>
 8008aa2:	ec49 8b10 	vmov	d0, r8, r9
 8008aa6:	aa14      	add	r2, sp, #80	; 0x50
 8008aa8:	a913      	add	r1, sp, #76	; 0x4c
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f002 f88c 	bl	800abc8 <__d2b>
 8008ab0:	ec49 8b18 	vmov	d8, r8, r9
 8008ab4:	9012      	str	r0, [sp, #72]	; 0x48
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	f43f aefe 	beq.w	80088b8 <_strtod_l+0x478>
 8008abc:	2101      	movs	r1, #1
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f001 fdd6 	bl	800a670 <__i2b>
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	f43f aef6 	beq.w	80088b8 <_strtod_l+0x478>
 8008acc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ace:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	bfab      	itete	ge
 8008ad4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8008ad6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008ad8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008adc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008ae0:	bfac      	ite	ge
 8008ae2:	eb03 0b02 	addge.w	fp, r3, r2
 8008ae6:	eba2 0a03 	sublt.w	sl, r2, r3
 8008aea:	9a04      	ldr	r2, [sp, #16]
 8008aec:	1a9b      	subs	r3, r3, r2
 8008aee:	440b      	add	r3, r1
 8008af0:	4a7a      	ldr	r2, [pc, #488]	; (8008cdc <_strtod_l+0x89c>)
 8008af2:	3b01      	subs	r3, #1
 8008af4:	4293      	cmp	r3, r2
 8008af6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008afa:	f280 80cd 	bge.w	8008c98 <_strtod_l+0x858>
 8008afe:	1ad2      	subs	r2, r2, r3
 8008b00:	2a1f      	cmp	r2, #31
 8008b02:	eba1 0102 	sub.w	r1, r1, r2
 8008b06:	f04f 0001 	mov.w	r0, #1
 8008b0a:	f300 80b9 	bgt.w	8008c80 <_strtod_l+0x840>
 8008b0e:	fa00 f302 	lsl.w	r3, r0, r2
 8008b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b14:	2300      	movs	r3, #0
 8008b16:	930a      	str	r3, [sp, #40]	; 0x28
 8008b18:	eb0b 0301 	add.w	r3, fp, r1
 8008b1c:	9a04      	ldr	r2, [sp, #16]
 8008b1e:	459b      	cmp	fp, r3
 8008b20:	448a      	add	sl, r1
 8008b22:	4492      	add	sl, r2
 8008b24:	465a      	mov	r2, fp
 8008b26:	bfa8      	it	ge
 8008b28:	461a      	movge	r2, r3
 8008b2a:	4552      	cmp	r2, sl
 8008b2c:	bfa8      	it	ge
 8008b2e:	4652      	movge	r2, sl
 8008b30:	2a00      	cmp	r2, #0
 8008b32:	bfc2      	ittt	gt
 8008b34:	1a9b      	subgt	r3, r3, r2
 8008b36:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008b3a:	ebab 0b02 	subgt.w	fp, fp, r2
 8008b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b40:	2a00      	cmp	r2, #0
 8008b42:	dd18      	ble.n	8008b76 <_strtod_l+0x736>
 8008b44:	4631      	mov	r1, r6
 8008b46:	4620      	mov	r0, r4
 8008b48:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b4a:	f001 fe51 	bl	800a7f0 <__pow5mult>
 8008b4e:	4606      	mov	r6, r0
 8008b50:	2800      	cmp	r0, #0
 8008b52:	f43f aeb1 	beq.w	80088b8 <_strtod_l+0x478>
 8008b56:	4601      	mov	r1, r0
 8008b58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f001 fd9e 	bl	800a69c <__multiply>
 8008b60:	900e      	str	r0, [sp, #56]	; 0x38
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f43f aea8 	beq.w	80088b8 <_strtod_l+0x478>
 8008b68:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f001 fc7e 	bl	800a46c <_Bfree>
 8008b70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b74:	9212      	str	r2, [sp, #72]	; 0x48
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f300 8093 	bgt.w	8008ca2 <_strtod_l+0x862>
 8008b7c:	9b07      	ldr	r3, [sp, #28]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	dd08      	ble.n	8008b94 <_strtod_l+0x754>
 8008b82:	4639      	mov	r1, r7
 8008b84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b86:	4620      	mov	r0, r4
 8008b88:	f001 fe32 	bl	800a7f0 <__pow5mult>
 8008b8c:	4607      	mov	r7, r0
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	f43f ae92 	beq.w	80088b8 <_strtod_l+0x478>
 8008b94:	f1ba 0f00 	cmp.w	sl, #0
 8008b98:	dd08      	ble.n	8008bac <_strtod_l+0x76c>
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	4652      	mov	r2, sl
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f001 fe80 	bl	800a8a4 <__lshift>
 8008ba4:	4607      	mov	r7, r0
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f43f ae86 	beq.w	80088b8 <_strtod_l+0x478>
 8008bac:	f1bb 0f00 	cmp.w	fp, #0
 8008bb0:	dd08      	ble.n	8008bc4 <_strtod_l+0x784>
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	465a      	mov	r2, fp
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f001 fe74 	bl	800a8a4 <__lshift>
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	f43f ae7a 	beq.w	80088b8 <_strtod_l+0x478>
 8008bc4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008bc6:	463a      	mov	r2, r7
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f001 fef7 	bl	800a9bc <__mdiff>
 8008bce:	4605      	mov	r5, r0
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	f43f ae71 	beq.w	80088b8 <_strtod_l+0x478>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008bdc:	60c3      	str	r3, [r0, #12]
 8008bde:	4631      	mov	r1, r6
 8008be0:	f001 fed0 	bl	800a984 <__mcmp>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	da7d      	bge.n	8008ce4 <_strtod_l+0x8a4>
 8008be8:	ea5a 0308 	orrs.w	r3, sl, r8
 8008bec:	f040 80a3 	bne.w	8008d36 <_strtod_l+0x8f6>
 8008bf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f040 809e 	bne.w	8008d36 <_strtod_l+0x8f6>
 8008bfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bfe:	0d1b      	lsrs	r3, r3, #20
 8008c00:	051b      	lsls	r3, r3, #20
 8008c02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008c06:	f240 8096 	bls.w	8008d36 <_strtod_l+0x8f6>
 8008c0a:	696b      	ldr	r3, [r5, #20]
 8008c0c:	b91b      	cbnz	r3, 8008c16 <_strtod_l+0x7d6>
 8008c0e:	692b      	ldr	r3, [r5, #16]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	f340 8090 	ble.w	8008d36 <_strtod_l+0x8f6>
 8008c16:	4629      	mov	r1, r5
 8008c18:	2201      	movs	r2, #1
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f001 fe42 	bl	800a8a4 <__lshift>
 8008c20:	4631      	mov	r1, r6
 8008c22:	4605      	mov	r5, r0
 8008c24:	f001 feae 	bl	800a984 <__mcmp>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	f340 8084 	ble.w	8008d36 <_strtod_l+0x8f6>
 8008c2e:	9904      	ldr	r1, [sp, #16]
 8008c30:	4a2b      	ldr	r2, [pc, #172]	; (8008ce0 <_strtod_l+0x8a0>)
 8008c32:	464b      	mov	r3, r9
 8008c34:	2900      	cmp	r1, #0
 8008c36:	f000 809d 	beq.w	8008d74 <_strtod_l+0x934>
 8008c3a:	ea02 0109 	and.w	r1, r2, r9
 8008c3e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008c42:	f300 8097 	bgt.w	8008d74 <_strtod_l+0x934>
 8008c46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008c4a:	f77f aea5 	ble.w	8008998 <_strtod_l+0x558>
 8008c4e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008cd0 <_strtod_l+0x890>
 8008c52:	ec49 8b16 	vmov	d6, r8, r9
 8008c56:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008c5a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008c5e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	bf08      	it	eq
 8008c66:	2322      	moveq	r3, #34	; 0x22
 8008c68:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008c6c:	bf08      	it	eq
 8008c6e:	6023      	streq	r3, [r4, #0]
 8008c70:	e62c      	b.n	80088cc <_strtod_l+0x48c>
 8008c72:	f04f 31ff 	mov.w	r1, #4294967295
 8008c76:	fa01 f202 	lsl.w	r2, r1, r2
 8008c7a:	ea02 0808 	and.w	r8, r2, r8
 8008c7e:	e6d9      	b.n	8008a34 <_strtod_l+0x5f4>
 8008c80:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008c84:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008c88:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008c8c:	33e2      	adds	r3, #226	; 0xe2
 8008c8e:	fa00 f303 	lsl.w	r3, r0, r3
 8008c92:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8008c96:	e73f      	b.n	8008b18 <_strtod_l+0x6d8>
 8008c98:	2200      	movs	r2, #0
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008ca0:	e73a      	b.n	8008b18 <_strtod_l+0x6d8>
 8008ca2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f001 fdfc 	bl	800a8a4 <__lshift>
 8008cac:	9012      	str	r0, [sp, #72]	; 0x48
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f47f af64 	bne.w	8008b7c <_strtod_l+0x73c>
 8008cb4:	e600      	b.n	80088b8 <_strtod_l+0x478>
 8008cb6:	bf00      	nop
 8008cb8:	94a03595 	.word	0x94a03595
 8008cbc:	3fcfffff 	.word	0x3fcfffff
 8008cc0:	94a03595 	.word	0x94a03595
 8008cc4:	3fdfffff 	.word	0x3fdfffff
 8008cc8:	35afe535 	.word	0x35afe535
 8008ccc:	3fe00000 	.word	0x3fe00000
 8008cd0:	00000000 	.word	0x00000000
 8008cd4:	39500000 	.word	0x39500000
 8008cd8:	0800bf08 	.word	0x0800bf08
 8008cdc:	fffffc02 	.word	0xfffffc02
 8008ce0:	7ff00000 	.word	0x7ff00000
 8008ce4:	46cb      	mov	fp, r9
 8008ce6:	d15f      	bne.n	8008da8 <_strtod_l+0x968>
 8008ce8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cec:	f1ba 0f00 	cmp.w	sl, #0
 8008cf0:	d02a      	beq.n	8008d48 <_strtod_l+0x908>
 8008cf2:	4aa7      	ldr	r2, [pc, #668]	; (8008f90 <_strtod_l+0xb50>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d12b      	bne.n	8008d50 <_strtod_l+0x910>
 8008cf8:	9b04      	ldr	r3, [sp, #16]
 8008cfa:	4642      	mov	r2, r8
 8008cfc:	b1fb      	cbz	r3, 8008d3e <_strtod_l+0x8fe>
 8008cfe:	4ba5      	ldr	r3, [pc, #660]	; (8008f94 <_strtod_l+0xb54>)
 8008d00:	ea09 0303 	and.w	r3, r9, r3
 8008d04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d08:	f04f 31ff 	mov.w	r1, #4294967295
 8008d0c:	d81a      	bhi.n	8008d44 <_strtod_l+0x904>
 8008d0e:	0d1b      	lsrs	r3, r3, #20
 8008d10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d14:	fa01 f303 	lsl.w	r3, r1, r3
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d119      	bne.n	8008d50 <_strtod_l+0x910>
 8008d1c:	4b9e      	ldr	r3, [pc, #632]	; (8008f98 <_strtod_l+0xb58>)
 8008d1e:	459b      	cmp	fp, r3
 8008d20:	d102      	bne.n	8008d28 <_strtod_l+0x8e8>
 8008d22:	3201      	adds	r2, #1
 8008d24:	f43f adc8 	beq.w	80088b8 <_strtod_l+0x478>
 8008d28:	4b9a      	ldr	r3, [pc, #616]	; (8008f94 <_strtod_l+0xb54>)
 8008d2a:	ea0b 0303 	and.w	r3, fp, r3
 8008d2e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008d32:	f04f 0800 	mov.w	r8, #0
 8008d36:	9b04      	ldr	r3, [sp, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d188      	bne.n	8008c4e <_strtod_l+0x80e>
 8008d3c:	e5c6      	b.n	80088cc <_strtod_l+0x48c>
 8008d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d42:	e7e9      	b.n	8008d18 <_strtod_l+0x8d8>
 8008d44:	460b      	mov	r3, r1
 8008d46:	e7e7      	b.n	8008d18 <_strtod_l+0x8d8>
 8008d48:	ea53 0308 	orrs.w	r3, r3, r8
 8008d4c:	f43f af6f 	beq.w	8008c2e <_strtod_l+0x7ee>
 8008d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d52:	b1cb      	cbz	r3, 8008d88 <_strtod_l+0x948>
 8008d54:	ea13 0f0b 	tst.w	r3, fp
 8008d58:	d0ed      	beq.n	8008d36 <_strtod_l+0x8f6>
 8008d5a:	9a04      	ldr	r2, [sp, #16]
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	4649      	mov	r1, r9
 8008d60:	f1ba 0f00 	cmp.w	sl, #0
 8008d64:	d014      	beq.n	8008d90 <_strtod_l+0x950>
 8008d66:	f7ff fb50 	bl	800840a <sulp>
 8008d6a:	ee38 7b00 	vadd.f64	d7, d8, d0
 8008d6e:	ec59 8b17 	vmov	r8, r9, d7
 8008d72:	e7e0      	b.n	8008d36 <_strtod_l+0x8f6>
 8008d74:	4013      	ands	r3, r2
 8008d76:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008d7a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008d7e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008d82:	f04f 38ff 	mov.w	r8, #4294967295
 8008d86:	e7d6      	b.n	8008d36 <_strtod_l+0x8f6>
 8008d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d8a:	ea13 0f08 	tst.w	r3, r8
 8008d8e:	e7e3      	b.n	8008d58 <_strtod_l+0x918>
 8008d90:	f7ff fb3b 	bl	800840a <sulp>
 8008d94:	ee38 0b40 	vsub.f64	d0, d8, d0
 8008d98:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da0:	ec59 8b10 	vmov	r8, r9, d0
 8008da4:	d1c7      	bne.n	8008d36 <_strtod_l+0x8f6>
 8008da6:	e5f7      	b.n	8008998 <_strtod_l+0x558>
 8008da8:	4631      	mov	r1, r6
 8008daa:	4628      	mov	r0, r5
 8008dac:	f001 ff68 	bl	800ac80 <__ratio>
 8008db0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008db4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dbc:	d865      	bhi.n	8008e8a <_strtod_l+0xa4a>
 8008dbe:	f1ba 0f00 	cmp.w	sl, #0
 8008dc2:	d042      	beq.n	8008e4a <_strtod_l+0xa0a>
 8008dc4:	4b75      	ldr	r3, [pc, #468]	; (8008f9c <_strtod_l+0xb5c>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8008dcc:	4871      	ldr	r0, [pc, #452]	; (8008f94 <_strtod_l+0xb54>)
 8008dce:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8008fa8 <_strtod_l+0xb68>
 8008dd2:	ea0b 0100 	and.w	r1, fp, r0
 8008dd6:	4561      	cmp	r1, ip
 8008dd8:	f040 808e 	bne.w	8008ef8 <_strtod_l+0xab8>
 8008ddc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008de0:	ec49 8b10 	vmov	d0, r8, r9
 8008de4:	ec43 2b1c 	vmov	d12, r2, r3
 8008de8:	910a      	str	r1, [sp, #40]	; 0x28
 8008dea:	f001 fe71 	bl	800aad0 <__ulp>
 8008dee:	ec49 8b1e 	vmov	d14, r8, r9
 8008df2:	4868      	ldr	r0, [pc, #416]	; (8008f94 <_strtod_l+0xb54>)
 8008df4:	eeac eb00 	vfma.f64	d14, d12, d0
 8008df8:	ee1e 3a90 	vmov	r3, s29
 8008dfc:	4a68      	ldr	r2, [pc, #416]	; (8008fa0 <_strtod_l+0xb60>)
 8008dfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e00:	4018      	ands	r0, r3
 8008e02:	4290      	cmp	r0, r2
 8008e04:	ec59 8b1e 	vmov	r8, r9, d14
 8008e08:	d94e      	bls.n	8008ea8 <_strtod_l+0xa68>
 8008e0a:	ee18 3a90 	vmov	r3, s17
 8008e0e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d104      	bne.n	8008e20 <_strtod_l+0x9e0>
 8008e16:	ee18 3a10 	vmov	r3, s16
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	f43f ad4c 	beq.w	80088b8 <_strtod_l+0x478>
 8008e20:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008f98 <_strtod_l+0xb58>
 8008e24:	f04f 38ff 	mov.w	r8, #4294967295
 8008e28:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f001 fb1e 	bl	800a46c <_Bfree>
 8008e30:	4639      	mov	r1, r7
 8008e32:	4620      	mov	r0, r4
 8008e34:	f001 fb1a 	bl	800a46c <_Bfree>
 8008e38:	4631      	mov	r1, r6
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f001 fb16 	bl	800a46c <_Bfree>
 8008e40:	4629      	mov	r1, r5
 8008e42:	4620      	mov	r0, r4
 8008e44:	f001 fb12 	bl	800a46c <_Bfree>
 8008e48:	e619      	b.n	8008a7e <_strtod_l+0x63e>
 8008e4a:	f1b8 0f00 	cmp.w	r8, #0
 8008e4e:	d112      	bne.n	8008e76 <_strtod_l+0xa36>
 8008e50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e54:	b9b3      	cbnz	r3, 8008e84 <_strtod_l+0xa44>
 8008e56:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008e5a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e62:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008e66:	bf58      	it	pl
 8008e68:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8008e6c:	eeb1 7b4d 	vneg.f64	d7, d13
 8008e70:	ec53 2b17 	vmov	r2, r3, d7
 8008e74:	e7aa      	b.n	8008dcc <_strtod_l+0x98c>
 8008e76:	f1b8 0f01 	cmp.w	r8, #1
 8008e7a:	d103      	bne.n	8008e84 <_strtod_l+0xa44>
 8008e7c:	f1b9 0f00 	cmp.w	r9, #0
 8008e80:	f43f ad8a 	beq.w	8008998 <_strtod_l+0x558>
 8008e84:	4b47      	ldr	r3, [pc, #284]	; (8008fa4 <_strtod_l+0xb64>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	e79e      	b.n	8008dc8 <_strtod_l+0x988>
 8008e8a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008e8e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8008e92:	f1ba 0f00 	cmp.w	sl, #0
 8008e96:	d104      	bne.n	8008ea2 <_strtod_l+0xa62>
 8008e98:	eeb1 7b4d 	vneg.f64	d7, d13
 8008e9c:	ec53 2b17 	vmov	r2, r3, d7
 8008ea0:	e794      	b.n	8008dcc <_strtod_l+0x98c>
 8008ea2:	eeb0 7b4d 	vmov.f64	d7, d13
 8008ea6:	e7f9      	b.n	8008e9c <_strtod_l+0xa5c>
 8008ea8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008eac:	9b04      	ldr	r3, [sp, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1ba      	bne.n	8008e28 <_strtod_l+0x9e8>
 8008eb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008eb6:	0d1b      	lsrs	r3, r3, #20
 8008eb8:	051b      	lsls	r3, r3, #20
 8008eba:	4299      	cmp	r1, r3
 8008ebc:	d1b4      	bne.n	8008e28 <_strtod_l+0x9e8>
 8008ebe:	ec51 0b1d 	vmov	r0, r1, d13
 8008ec2:	f7f7 fbe9 	bl	8000698 <__aeabi_d2lz>
 8008ec6:	f7f7 fba1 	bl	800060c <__aeabi_l2d>
 8008eca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ece:	ec41 0b17 	vmov	d7, r0, r1
 8008ed2:	ea43 0308 	orr.w	r3, r3, r8
 8008ed6:	ea53 030a 	orrs.w	r3, r3, sl
 8008eda:	ee3d db47 	vsub.f64	d13, d13, d7
 8008ede:	d03c      	beq.n	8008f5a <_strtod_l+0xb1a>
 8008ee0:	eeb4 dbca 	vcmpe.f64	d13, d10
 8008ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee8:	f53f acf0 	bmi.w	80088cc <_strtod_l+0x48c>
 8008eec:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8008ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef4:	dd98      	ble.n	8008e28 <_strtod_l+0x9e8>
 8008ef6:	e4e9      	b.n	80088cc <_strtod_l+0x48c>
 8008ef8:	9804      	ldr	r0, [sp, #16]
 8008efa:	b1f0      	cbz	r0, 8008f3a <_strtod_l+0xafa>
 8008efc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8008f00:	d81b      	bhi.n	8008f3a <_strtod_l+0xafa>
 8008f02:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008f88 <_strtod_l+0xb48>
 8008f06:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8008f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f0e:	d811      	bhi.n	8008f34 <_strtod_l+0xaf4>
 8008f10:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8008f14:	ee1d 3a10 	vmov	r3, s26
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	bf38      	it	cc
 8008f1c:	2301      	movcc	r3, #1
 8008f1e:	ee0d 3a10 	vmov	s26, r3
 8008f22:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8008f26:	f1ba 0f00 	cmp.w	sl, #0
 8008f2a:	d113      	bne.n	8008f54 <_strtod_l+0xb14>
 8008f2c:	eeb1 7b4d 	vneg.f64	d7, d13
 8008f30:	ec53 2b17 	vmov	r2, r3, d7
 8008f34:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8008f38:	1a43      	subs	r3, r0, r1
 8008f3a:	eeb0 0b48 	vmov.f64	d0, d8
 8008f3e:	ec43 2b1c 	vmov	d12, r2, r3
 8008f42:	910a      	str	r1, [sp, #40]	; 0x28
 8008f44:	f001 fdc4 	bl	800aad0 <__ulp>
 8008f48:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f4a:	eeac 8b00 	vfma.f64	d8, d12, d0
 8008f4e:	ec59 8b18 	vmov	r8, r9, d8
 8008f52:	e7ab      	b.n	8008eac <_strtod_l+0xa6c>
 8008f54:	eeb0 7b4d 	vmov.f64	d7, d13
 8008f58:	e7ea      	b.n	8008f30 <_strtod_l+0xaf0>
 8008f5a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8008f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f62:	f57f af61 	bpl.w	8008e28 <_strtod_l+0x9e8>
 8008f66:	e4b1      	b.n	80088cc <_strtod_l+0x48c>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	9308      	str	r3, [sp, #32]
 8008f6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f70:	6013      	str	r3, [r2, #0]
 8008f72:	f7ff baad 	b.w	80084d0 <_strtod_l+0x90>
 8008f76:	2a65      	cmp	r2, #101	; 0x65
 8008f78:	f43f ab9f 	beq.w	80086ba <_strtod_l+0x27a>
 8008f7c:	2a45      	cmp	r2, #69	; 0x45
 8008f7e:	f43f ab9c 	beq.w	80086ba <_strtod_l+0x27a>
 8008f82:	2101      	movs	r1, #1
 8008f84:	f7ff bbd4 	b.w	8008730 <_strtod_l+0x2f0>
 8008f88:	ffc00000 	.word	0xffc00000
 8008f8c:	41dfffff 	.word	0x41dfffff
 8008f90:	000fffff 	.word	0x000fffff
 8008f94:	7ff00000 	.word	0x7ff00000
 8008f98:	7fefffff 	.word	0x7fefffff
 8008f9c:	3ff00000 	.word	0x3ff00000
 8008fa0:	7c9fffff 	.word	0x7c9fffff
 8008fa4:	bff00000 	.word	0xbff00000
 8008fa8:	7fe00000 	.word	0x7fe00000

08008fac <_strtod_r>:
 8008fac:	4b01      	ldr	r3, [pc, #4]	; (8008fb4 <_strtod_r+0x8>)
 8008fae:	f7ff ba47 	b.w	8008440 <_strtod_l>
 8008fb2:	bf00      	nop
 8008fb4:	200000a0 	.word	0x200000a0

08008fb8 <_strtol_l.constprop.0>:
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fbe:	d001      	beq.n	8008fc4 <_strtol_l.constprop.0+0xc>
 8008fc0:	2b24      	cmp	r3, #36	; 0x24
 8008fc2:	d906      	bls.n	8008fd2 <_strtol_l.constprop.0+0x1a>
 8008fc4:	f7fe fb6c 	bl	80076a0 <__errno>
 8008fc8:	2316      	movs	r3, #22
 8008fca:	6003      	str	r3, [r0, #0]
 8008fcc:	2000      	movs	r0, #0
 8008fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80090b8 <_strtol_l.constprop.0+0x100>
 8008fd6:	460d      	mov	r5, r1
 8008fd8:	462e      	mov	r6, r5
 8008fda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fde:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008fe2:	f017 0708 	ands.w	r7, r7, #8
 8008fe6:	d1f7      	bne.n	8008fd8 <_strtol_l.constprop.0+0x20>
 8008fe8:	2c2d      	cmp	r4, #45	; 0x2d
 8008fea:	d132      	bne.n	8009052 <_strtol_l.constprop.0+0x9a>
 8008fec:	782c      	ldrb	r4, [r5, #0]
 8008fee:	2701      	movs	r7, #1
 8008ff0:	1cb5      	adds	r5, r6, #2
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d05b      	beq.n	80090ae <_strtol_l.constprop.0+0xf6>
 8008ff6:	2b10      	cmp	r3, #16
 8008ff8:	d109      	bne.n	800900e <_strtol_l.constprop.0+0x56>
 8008ffa:	2c30      	cmp	r4, #48	; 0x30
 8008ffc:	d107      	bne.n	800900e <_strtol_l.constprop.0+0x56>
 8008ffe:	782c      	ldrb	r4, [r5, #0]
 8009000:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009004:	2c58      	cmp	r4, #88	; 0x58
 8009006:	d14d      	bne.n	80090a4 <_strtol_l.constprop.0+0xec>
 8009008:	786c      	ldrb	r4, [r5, #1]
 800900a:	2310      	movs	r3, #16
 800900c:	3502      	adds	r5, #2
 800900e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009012:	f108 38ff 	add.w	r8, r8, #4294967295
 8009016:	f04f 0c00 	mov.w	ip, #0
 800901a:	fbb8 f9f3 	udiv	r9, r8, r3
 800901e:	4666      	mov	r6, ip
 8009020:	fb03 8a19 	mls	sl, r3, r9, r8
 8009024:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009028:	f1be 0f09 	cmp.w	lr, #9
 800902c:	d816      	bhi.n	800905c <_strtol_l.constprop.0+0xa4>
 800902e:	4674      	mov	r4, lr
 8009030:	42a3      	cmp	r3, r4
 8009032:	dd24      	ble.n	800907e <_strtol_l.constprop.0+0xc6>
 8009034:	f1bc 0f00 	cmp.w	ip, #0
 8009038:	db1e      	blt.n	8009078 <_strtol_l.constprop.0+0xc0>
 800903a:	45b1      	cmp	r9, r6
 800903c:	d31c      	bcc.n	8009078 <_strtol_l.constprop.0+0xc0>
 800903e:	d101      	bne.n	8009044 <_strtol_l.constprop.0+0x8c>
 8009040:	45a2      	cmp	sl, r4
 8009042:	db19      	blt.n	8009078 <_strtol_l.constprop.0+0xc0>
 8009044:	fb06 4603 	mla	r6, r6, r3, r4
 8009048:	f04f 0c01 	mov.w	ip, #1
 800904c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009050:	e7e8      	b.n	8009024 <_strtol_l.constprop.0+0x6c>
 8009052:	2c2b      	cmp	r4, #43	; 0x2b
 8009054:	bf04      	itt	eq
 8009056:	782c      	ldrbeq	r4, [r5, #0]
 8009058:	1cb5      	addeq	r5, r6, #2
 800905a:	e7ca      	b.n	8008ff2 <_strtol_l.constprop.0+0x3a>
 800905c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009060:	f1be 0f19 	cmp.w	lr, #25
 8009064:	d801      	bhi.n	800906a <_strtol_l.constprop.0+0xb2>
 8009066:	3c37      	subs	r4, #55	; 0x37
 8009068:	e7e2      	b.n	8009030 <_strtol_l.constprop.0+0x78>
 800906a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800906e:	f1be 0f19 	cmp.w	lr, #25
 8009072:	d804      	bhi.n	800907e <_strtol_l.constprop.0+0xc6>
 8009074:	3c57      	subs	r4, #87	; 0x57
 8009076:	e7db      	b.n	8009030 <_strtol_l.constprop.0+0x78>
 8009078:	f04f 3cff 	mov.w	ip, #4294967295
 800907c:	e7e6      	b.n	800904c <_strtol_l.constprop.0+0x94>
 800907e:	f1bc 0f00 	cmp.w	ip, #0
 8009082:	da05      	bge.n	8009090 <_strtol_l.constprop.0+0xd8>
 8009084:	2322      	movs	r3, #34	; 0x22
 8009086:	6003      	str	r3, [r0, #0]
 8009088:	4646      	mov	r6, r8
 800908a:	b942      	cbnz	r2, 800909e <_strtol_l.constprop.0+0xe6>
 800908c:	4630      	mov	r0, r6
 800908e:	e79e      	b.n	8008fce <_strtol_l.constprop.0+0x16>
 8009090:	b107      	cbz	r7, 8009094 <_strtol_l.constprop.0+0xdc>
 8009092:	4276      	negs	r6, r6
 8009094:	2a00      	cmp	r2, #0
 8009096:	d0f9      	beq.n	800908c <_strtol_l.constprop.0+0xd4>
 8009098:	f1bc 0f00 	cmp.w	ip, #0
 800909c:	d000      	beq.n	80090a0 <_strtol_l.constprop.0+0xe8>
 800909e:	1e69      	subs	r1, r5, #1
 80090a0:	6011      	str	r1, [r2, #0]
 80090a2:	e7f3      	b.n	800908c <_strtol_l.constprop.0+0xd4>
 80090a4:	2430      	movs	r4, #48	; 0x30
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1b1      	bne.n	800900e <_strtol_l.constprop.0+0x56>
 80090aa:	2308      	movs	r3, #8
 80090ac:	e7af      	b.n	800900e <_strtol_l.constprop.0+0x56>
 80090ae:	2c30      	cmp	r4, #48	; 0x30
 80090b0:	d0a5      	beq.n	8008ffe <_strtol_l.constprop.0+0x46>
 80090b2:	230a      	movs	r3, #10
 80090b4:	e7ab      	b.n	800900e <_strtol_l.constprop.0+0x56>
 80090b6:	bf00      	nop
 80090b8:	0800bf31 	.word	0x0800bf31

080090bc <_strtol_r>:
 80090bc:	f7ff bf7c 	b.w	8008fb8 <_strtol_l.constprop.0>

080090c0 <quorem>:
 80090c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	6903      	ldr	r3, [r0, #16]
 80090c6:	690c      	ldr	r4, [r1, #16]
 80090c8:	42a3      	cmp	r3, r4
 80090ca:	4607      	mov	r7, r0
 80090cc:	f2c0 8081 	blt.w	80091d2 <quorem+0x112>
 80090d0:	3c01      	subs	r4, #1
 80090d2:	f101 0814 	add.w	r8, r1, #20
 80090d6:	f100 0514 	add.w	r5, r0, #20
 80090da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090de:	9301      	str	r3, [sp, #4]
 80090e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80090e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090e8:	3301      	adds	r3, #1
 80090ea:	429a      	cmp	r2, r3
 80090ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80090f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80090f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80090f8:	d331      	bcc.n	800915e <quorem+0x9e>
 80090fa:	f04f 0e00 	mov.w	lr, #0
 80090fe:	4640      	mov	r0, r8
 8009100:	46ac      	mov	ip, r5
 8009102:	46f2      	mov	sl, lr
 8009104:	f850 2b04 	ldr.w	r2, [r0], #4
 8009108:	b293      	uxth	r3, r2
 800910a:	fb06 e303 	mla	r3, r6, r3, lr
 800910e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009112:	b29b      	uxth	r3, r3
 8009114:	ebaa 0303 	sub.w	r3, sl, r3
 8009118:	f8dc a000 	ldr.w	sl, [ip]
 800911c:	0c12      	lsrs	r2, r2, #16
 800911e:	fa13 f38a 	uxtah	r3, r3, sl
 8009122:	fb06 e202 	mla	r2, r6, r2, lr
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	9b00      	ldr	r3, [sp, #0]
 800912a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800912e:	b292      	uxth	r2, r2
 8009130:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009138:	f8bd 3000 	ldrh.w	r3, [sp]
 800913c:	4581      	cmp	r9, r0
 800913e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009142:	f84c 3b04 	str.w	r3, [ip], #4
 8009146:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800914a:	d2db      	bcs.n	8009104 <quorem+0x44>
 800914c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009150:	b92b      	cbnz	r3, 800915e <quorem+0x9e>
 8009152:	9b01      	ldr	r3, [sp, #4]
 8009154:	3b04      	subs	r3, #4
 8009156:	429d      	cmp	r5, r3
 8009158:	461a      	mov	r2, r3
 800915a:	d32e      	bcc.n	80091ba <quorem+0xfa>
 800915c:	613c      	str	r4, [r7, #16]
 800915e:	4638      	mov	r0, r7
 8009160:	f001 fc10 	bl	800a984 <__mcmp>
 8009164:	2800      	cmp	r0, #0
 8009166:	db24      	blt.n	80091b2 <quorem+0xf2>
 8009168:	3601      	adds	r6, #1
 800916a:	4628      	mov	r0, r5
 800916c:	f04f 0c00 	mov.w	ip, #0
 8009170:	f858 2b04 	ldr.w	r2, [r8], #4
 8009174:	f8d0 e000 	ldr.w	lr, [r0]
 8009178:	b293      	uxth	r3, r2
 800917a:	ebac 0303 	sub.w	r3, ip, r3
 800917e:	0c12      	lsrs	r2, r2, #16
 8009180:	fa13 f38e 	uxtah	r3, r3, lr
 8009184:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800918c:	b29b      	uxth	r3, r3
 800918e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009192:	45c1      	cmp	r9, r8
 8009194:	f840 3b04 	str.w	r3, [r0], #4
 8009198:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800919c:	d2e8      	bcs.n	8009170 <quorem+0xb0>
 800919e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091a6:	b922      	cbnz	r2, 80091b2 <quorem+0xf2>
 80091a8:	3b04      	subs	r3, #4
 80091aa:	429d      	cmp	r5, r3
 80091ac:	461a      	mov	r2, r3
 80091ae:	d30a      	bcc.n	80091c6 <quorem+0x106>
 80091b0:	613c      	str	r4, [r7, #16]
 80091b2:	4630      	mov	r0, r6
 80091b4:	b003      	add	sp, #12
 80091b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ba:	6812      	ldr	r2, [r2, #0]
 80091bc:	3b04      	subs	r3, #4
 80091be:	2a00      	cmp	r2, #0
 80091c0:	d1cc      	bne.n	800915c <quorem+0x9c>
 80091c2:	3c01      	subs	r4, #1
 80091c4:	e7c7      	b.n	8009156 <quorem+0x96>
 80091c6:	6812      	ldr	r2, [r2, #0]
 80091c8:	3b04      	subs	r3, #4
 80091ca:	2a00      	cmp	r2, #0
 80091cc:	d1f0      	bne.n	80091b0 <quorem+0xf0>
 80091ce:	3c01      	subs	r4, #1
 80091d0:	e7eb      	b.n	80091aa <quorem+0xea>
 80091d2:	2000      	movs	r0, #0
 80091d4:	e7ee      	b.n	80091b4 <quorem+0xf4>
	...

080091d8 <_dtoa_r>:
 80091d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091dc:	ed2d 8b02 	vpush	{d8}
 80091e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80091e2:	b091      	sub	sp, #68	; 0x44
 80091e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80091e8:	ec59 8b10 	vmov	r8, r9, d0
 80091ec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80091ee:	9106      	str	r1, [sp, #24]
 80091f0:	4606      	mov	r6, r0
 80091f2:	9208      	str	r2, [sp, #32]
 80091f4:	930c      	str	r3, [sp, #48]	; 0x30
 80091f6:	b975      	cbnz	r5, 8009216 <_dtoa_r+0x3e>
 80091f8:	2010      	movs	r0, #16
 80091fa:	f001 f8cf 	bl	800a39c <malloc>
 80091fe:	4602      	mov	r2, r0
 8009200:	6270      	str	r0, [r6, #36]	; 0x24
 8009202:	b920      	cbnz	r0, 800920e <_dtoa_r+0x36>
 8009204:	4baa      	ldr	r3, [pc, #680]	; (80094b0 <_dtoa_r+0x2d8>)
 8009206:	21ea      	movs	r1, #234	; 0xea
 8009208:	48aa      	ldr	r0, [pc, #680]	; (80094b4 <_dtoa_r+0x2dc>)
 800920a:	f002 f83b 	bl	800b284 <__assert_func>
 800920e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009212:	6005      	str	r5, [r0, #0]
 8009214:	60c5      	str	r5, [r0, #12]
 8009216:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009218:	6819      	ldr	r1, [r3, #0]
 800921a:	b151      	cbz	r1, 8009232 <_dtoa_r+0x5a>
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	604a      	str	r2, [r1, #4]
 8009220:	2301      	movs	r3, #1
 8009222:	4093      	lsls	r3, r2
 8009224:	608b      	str	r3, [r1, #8]
 8009226:	4630      	mov	r0, r6
 8009228:	f001 f920 	bl	800a46c <_Bfree>
 800922c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800922e:	2200      	movs	r2, #0
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	f1b9 0300 	subs.w	r3, r9, #0
 8009236:	bfbb      	ittet	lt
 8009238:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800923c:	9303      	strlt	r3, [sp, #12]
 800923e:	2300      	movge	r3, #0
 8009240:	2201      	movlt	r2, #1
 8009242:	bfac      	ite	ge
 8009244:	6023      	strge	r3, [r4, #0]
 8009246:	6022      	strlt	r2, [r4, #0]
 8009248:	4b9b      	ldr	r3, [pc, #620]	; (80094b8 <_dtoa_r+0x2e0>)
 800924a:	9c03      	ldr	r4, [sp, #12]
 800924c:	43a3      	bics	r3, r4
 800924e:	d11c      	bne.n	800928a <_dtoa_r+0xb2>
 8009250:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009252:	f242 730f 	movw	r3, #9999	; 0x270f
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800925c:	ea53 0308 	orrs.w	r3, r3, r8
 8009260:	f000 84fd 	beq.w	8009c5e <_dtoa_r+0xa86>
 8009264:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009266:	b963      	cbnz	r3, 8009282 <_dtoa_r+0xaa>
 8009268:	4b94      	ldr	r3, [pc, #592]	; (80094bc <_dtoa_r+0x2e4>)
 800926a:	e01f      	b.n	80092ac <_dtoa_r+0xd4>
 800926c:	4b94      	ldr	r3, [pc, #592]	; (80094c0 <_dtoa_r+0x2e8>)
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	3308      	adds	r3, #8
 8009272:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009274:	6013      	str	r3, [r2, #0]
 8009276:	9801      	ldr	r0, [sp, #4]
 8009278:	b011      	add	sp, #68	; 0x44
 800927a:	ecbd 8b02 	vpop	{d8}
 800927e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009282:	4b8e      	ldr	r3, [pc, #568]	; (80094bc <_dtoa_r+0x2e4>)
 8009284:	9301      	str	r3, [sp, #4]
 8009286:	3303      	adds	r3, #3
 8009288:	e7f3      	b.n	8009272 <_dtoa_r+0x9a>
 800928a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800928e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009296:	d10b      	bne.n	80092b0 <_dtoa_r+0xd8>
 8009298:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800929a:	2301      	movs	r3, #1
 800929c:	6013      	str	r3, [r2, #0]
 800929e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 84d9 	beq.w	8009c58 <_dtoa_r+0xa80>
 80092a6:	4887      	ldr	r0, [pc, #540]	; (80094c4 <_dtoa_r+0x2ec>)
 80092a8:	6018      	str	r0, [r3, #0]
 80092aa:	1e43      	subs	r3, r0, #1
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	e7e2      	b.n	8009276 <_dtoa_r+0x9e>
 80092b0:	a90f      	add	r1, sp, #60	; 0x3c
 80092b2:	aa0e      	add	r2, sp, #56	; 0x38
 80092b4:	4630      	mov	r0, r6
 80092b6:	eeb0 0b48 	vmov.f64	d0, d8
 80092ba:	f001 fc85 	bl	800abc8 <__d2b>
 80092be:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80092c2:	4605      	mov	r5, r0
 80092c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80092c6:	2900      	cmp	r1, #0
 80092c8:	d046      	beq.n	8009358 <_dtoa_r+0x180>
 80092ca:	ee18 4a90 	vmov	r4, s17
 80092ce:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80092d2:	ec53 2b18 	vmov	r2, r3, d8
 80092d6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80092da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80092de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80092e2:	2400      	movs	r4, #0
 80092e4:	ec43 2b16 	vmov	d6, r2, r3
 80092e8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80092ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009498 <_dtoa_r+0x2c0>
 80092f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80092f4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80094a0 <_dtoa_r+0x2c8>
 80092f8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80092fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80094a8 <_dtoa_r+0x2d0>
 8009300:	ee07 1a90 	vmov	s15, r1
 8009304:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009308:	eeb0 7b46 	vmov.f64	d7, d6
 800930c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009310:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009314:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800931c:	ee16 ba90 	vmov	fp, s13
 8009320:	940a      	str	r4, [sp, #40]	; 0x28
 8009322:	d508      	bpl.n	8009336 <_dtoa_r+0x15e>
 8009324:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009328:	eeb4 6b47 	vcmp.f64	d6, d7
 800932c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009330:	bf18      	it	ne
 8009332:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009336:	f1bb 0f16 	cmp.w	fp, #22
 800933a:	d82f      	bhi.n	800939c <_dtoa_r+0x1c4>
 800933c:	4b62      	ldr	r3, [pc, #392]	; (80094c8 <_dtoa_r+0x2f0>)
 800933e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009342:	ed93 7b00 	vldr	d7, [r3]
 8009346:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800934a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934e:	d501      	bpl.n	8009354 <_dtoa_r+0x17c>
 8009350:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009354:	2300      	movs	r3, #0
 8009356:	e022      	b.n	800939e <_dtoa_r+0x1c6>
 8009358:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800935a:	4401      	add	r1, r0
 800935c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009360:	2b20      	cmp	r3, #32
 8009362:	bfc1      	itttt	gt
 8009364:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009368:	fa04 f303 	lslgt.w	r3, r4, r3
 800936c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009370:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009374:	bfd6      	itet	le
 8009376:	f1c3 0320 	rsble	r3, r3, #32
 800937a:	ea43 0808 	orrgt.w	r8, r3, r8
 800937e:	fa08 f803 	lslle.w	r8, r8, r3
 8009382:	ee07 8a90 	vmov	s15, r8
 8009386:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800938a:	3901      	subs	r1, #1
 800938c:	ee17 4a90 	vmov	r4, s15
 8009390:	ec53 2b17 	vmov	r2, r3, d7
 8009394:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009398:	2401      	movs	r4, #1
 800939a:	e7a3      	b.n	80092e4 <_dtoa_r+0x10c>
 800939c:	2301      	movs	r3, #1
 800939e:	930b      	str	r3, [sp, #44]	; 0x2c
 80093a0:	1a43      	subs	r3, r0, r1
 80093a2:	1e5a      	subs	r2, r3, #1
 80093a4:	bf45      	ittet	mi
 80093a6:	f1c3 0301 	rsbmi	r3, r3, #1
 80093aa:	9304      	strmi	r3, [sp, #16]
 80093ac:	2300      	movpl	r3, #0
 80093ae:	2300      	movmi	r3, #0
 80093b0:	9205      	str	r2, [sp, #20]
 80093b2:	bf54      	ite	pl
 80093b4:	9304      	strpl	r3, [sp, #16]
 80093b6:	9305      	strmi	r3, [sp, #20]
 80093b8:	f1bb 0f00 	cmp.w	fp, #0
 80093bc:	db18      	blt.n	80093f0 <_dtoa_r+0x218>
 80093be:	9b05      	ldr	r3, [sp, #20]
 80093c0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80093c4:	445b      	add	r3, fp
 80093c6:	9305      	str	r3, [sp, #20]
 80093c8:	2300      	movs	r3, #0
 80093ca:	9a06      	ldr	r2, [sp, #24]
 80093cc:	2a09      	cmp	r2, #9
 80093ce:	d849      	bhi.n	8009464 <_dtoa_r+0x28c>
 80093d0:	2a05      	cmp	r2, #5
 80093d2:	bfc4      	itt	gt
 80093d4:	3a04      	subgt	r2, #4
 80093d6:	9206      	strgt	r2, [sp, #24]
 80093d8:	9a06      	ldr	r2, [sp, #24]
 80093da:	f1a2 0202 	sub.w	r2, r2, #2
 80093de:	bfcc      	ite	gt
 80093e0:	2400      	movgt	r4, #0
 80093e2:	2401      	movle	r4, #1
 80093e4:	2a03      	cmp	r2, #3
 80093e6:	d848      	bhi.n	800947a <_dtoa_r+0x2a2>
 80093e8:	e8df f002 	tbb	[pc, r2]
 80093ec:	3a2c2e0b 	.word	0x3a2c2e0b
 80093f0:	9b04      	ldr	r3, [sp, #16]
 80093f2:	2200      	movs	r2, #0
 80093f4:	eba3 030b 	sub.w	r3, r3, fp
 80093f8:	9304      	str	r3, [sp, #16]
 80093fa:	9209      	str	r2, [sp, #36]	; 0x24
 80093fc:	f1cb 0300 	rsb	r3, fp, #0
 8009400:	e7e3      	b.n	80093ca <_dtoa_r+0x1f2>
 8009402:	2200      	movs	r2, #0
 8009404:	9207      	str	r2, [sp, #28]
 8009406:	9a08      	ldr	r2, [sp, #32]
 8009408:	2a00      	cmp	r2, #0
 800940a:	dc39      	bgt.n	8009480 <_dtoa_r+0x2a8>
 800940c:	f04f 0a01 	mov.w	sl, #1
 8009410:	46d1      	mov	r9, sl
 8009412:	4652      	mov	r2, sl
 8009414:	f8cd a020 	str.w	sl, [sp, #32]
 8009418:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800941a:	2100      	movs	r1, #0
 800941c:	6079      	str	r1, [r7, #4]
 800941e:	2004      	movs	r0, #4
 8009420:	f100 0c14 	add.w	ip, r0, #20
 8009424:	4594      	cmp	ip, r2
 8009426:	6879      	ldr	r1, [r7, #4]
 8009428:	d92f      	bls.n	800948a <_dtoa_r+0x2b2>
 800942a:	4630      	mov	r0, r6
 800942c:	930d      	str	r3, [sp, #52]	; 0x34
 800942e:	f000 ffdd 	bl	800a3ec <_Balloc>
 8009432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009434:	9001      	str	r0, [sp, #4]
 8009436:	4602      	mov	r2, r0
 8009438:	2800      	cmp	r0, #0
 800943a:	d149      	bne.n	80094d0 <_dtoa_r+0x2f8>
 800943c:	4b23      	ldr	r3, [pc, #140]	; (80094cc <_dtoa_r+0x2f4>)
 800943e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009442:	e6e1      	b.n	8009208 <_dtoa_r+0x30>
 8009444:	2201      	movs	r2, #1
 8009446:	e7dd      	b.n	8009404 <_dtoa_r+0x22c>
 8009448:	2200      	movs	r2, #0
 800944a:	9207      	str	r2, [sp, #28]
 800944c:	9a08      	ldr	r2, [sp, #32]
 800944e:	eb0b 0a02 	add.w	sl, fp, r2
 8009452:	f10a 0901 	add.w	r9, sl, #1
 8009456:	464a      	mov	r2, r9
 8009458:	2a01      	cmp	r2, #1
 800945a:	bfb8      	it	lt
 800945c:	2201      	movlt	r2, #1
 800945e:	e7db      	b.n	8009418 <_dtoa_r+0x240>
 8009460:	2201      	movs	r2, #1
 8009462:	e7f2      	b.n	800944a <_dtoa_r+0x272>
 8009464:	2401      	movs	r4, #1
 8009466:	2200      	movs	r2, #0
 8009468:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800946c:	f04f 3aff 	mov.w	sl, #4294967295
 8009470:	2100      	movs	r1, #0
 8009472:	46d1      	mov	r9, sl
 8009474:	2212      	movs	r2, #18
 8009476:	9108      	str	r1, [sp, #32]
 8009478:	e7ce      	b.n	8009418 <_dtoa_r+0x240>
 800947a:	2201      	movs	r2, #1
 800947c:	9207      	str	r2, [sp, #28]
 800947e:	e7f5      	b.n	800946c <_dtoa_r+0x294>
 8009480:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009484:	46d1      	mov	r9, sl
 8009486:	4652      	mov	r2, sl
 8009488:	e7c6      	b.n	8009418 <_dtoa_r+0x240>
 800948a:	3101      	adds	r1, #1
 800948c:	6079      	str	r1, [r7, #4]
 800948e:	0040      	lsls	r0, r0, #1
 8009490:	e7c6      	b.n	8009420 <_dtoa_r+0x248>
 8009492:	bf00      	nop
 8009494:	f3af 8000 	nop.w
 8009498:	636f4361 	.word	0x636f4361
 800949c:	3fd287a7 	.word	0x3fd287a7
 80094a0:	8b60c8b3 	.word	0x8b60c8b3
 80094a4:	3fc68a28 	.word	0x3fc68a28
 80094a8:	509f79fb 	.word	0x509f79fb
 80094ac:	3fd34413 	.word	0x3fd34413
 80094b0:	0800c03e 	.word	0x0800c03e
 80094b4:	0800c055 	.word	0x0800c055
 80094b8:	7ff00000 	.word	0x7ff00000
 80094bc:	0800c03a 	.word	0x0800c03a
 80094c0:	0800c031 	.word	0x0800c031
 80094c4:	0800beb1 	.word	0x0800beb1
 80094c8:	0800c1c0 	.word	0x0800c1c0
 80094cc:	0800c0b0 	.word	0x0800c0b0
 80094d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80094d2:	9901      	ldr	r1, [sp, #4]
 80094d4:	6011      	str	r1, [r2, #0]
 80094d6:	f1b9 0f0e 	cmp.w	r9, #14
 80094da:	d86c      	bhi.n	80095b6 <_dtoa_r+0x3de>
 80094dc:	2c00      	cmp	r4, #0
 80094de:	d06a      	beq.n	80095b6 <_dtoa_r+0x3de>
 80094e0:	f1bb 0f00 	cmp.w	fp, #0
 80094e4:	f340 80a0 	ble.w	8009628 <_dtoa_r+0x450>
 80094e8:	49c1      	ldr	r1, [pc, #772]	; (80097f0 <_dtoa_r+0x618>)
 80094ea:	f00b 020f 	and.w	r2, fp, #15
 80094ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80094f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80094f6:	ed92 7b00 	vldr	d7, [r2]
 80094fa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80094fe:	f000 8087 	beq.w	8009610 <_dtoa_r+0x438>
 8009502:	4abc      	ldr	r2, [pc, #752]	; (80097f4 <_dtoa_r+0x61c>)
 8009504:	ed92 6b08 	vldr	d6, [r2, #32]
 8009508:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800950c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009510:	f001 010f 	and.w	r1, r1, #15
 8009514:	2203      	movs	r2, #3
 8009516:	48b7      	ldr	r0, [pc, #732]	; (80097f4 <_dtoa_r+0x61c>)
 8009518:	2900      	cmp	r1, #0
 800951a:	d17b      	bne.n	8009614 <_dtoa_r+0x43c>
 800951c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009520:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009524:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009528:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800952a:	2900      	cmp	r1, #0
 800952c:	f000 80a2 	beq.w	8009674 <_dtoa_r+0x49c>
 8009530:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009534:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009538:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800953c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009540:	f140 8098 	bpl.w	8009674 <_dtoa_r+0x49c>
 8009544:	f1b9 0f00 	cmp.w	r9, #0
 8009548:	f000 8094 	beq.w	8009674 <_dtoa_r+0x49c>
 800954c:	f1ba 0f00 	cmp.w	sl, #0
 8009550:	dd2f      	ble.n	80095b2 <_dtoa_r+0x3da>
 8009552:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009556:	ee27 7b06 	vmul.f64	d7, d7, d6
 800955a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800955e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009562:	3201      	adds	r2, #1
 8009564:	4650      	mov	r0, sl
 8009566:	ed9d 6b02 	vldr	d6, [sp, #8]
 800956a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800956e:	ee07 2a90 	vmov	s15, r2
 8009572:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009576:	eea7 5b06 	vfma.f64	d5, d7, d6
 800957a:	ee15 4a90 	vmov	r4, s11
 800957e:	ec52 1b15 	vmov	r1, r2, d5
 8009582:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009586:	2800      	cmp	r0, #0
 8009588:	d177      	bne.n	800967a <_dtoa_r+0x4a2>
 800958a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800958e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009592:	ec42 1b17 	vmov	d7, r1, r2
 8009596:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800959a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800959e:	f300 8263 	bgt.w	8009a68 <_dtoa_r+0x890>
 80095a2:	eeb1 7b47 	vneg.f64	d7, d7
 80095a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80095aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ae:	f100 8258 	bmi.w	8009a62 <_dtoa_r+0x88a>
 80095b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80095b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095b8:	2a00      	cmp	r2, #0
 80095ba:	f2c0 811d 	blt.w	80097f8 <_dtoa_r+0x620>
 80095be:	f1bb 0f0e 	cmp.w	fp, #14
 80095c2:	f300 8119 	bgt.w	80097f8 <_dtoa_r+0x620>
 80095c6:	4b8a      	ldr	r3, [pc, #552]	; (80097f0 <_dtoa_r+0x618>)
 80095c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80095cc:	ed93 6b00 	vldr	d6, [r3]
 80095d0:	9b08      	ldr	r3, [sp, #32]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f280 80b7 	bge.w	8009746 <_dtoa_r+0x56e>
 80095d8:	f1b9 0f00 	cmp.w	r9, #0
 80095dc:	f300 80b3 	bgt.w	8009746 <_dtoa_r+0x56e>
 80095e0:	f040 823f 	bne.w	8009a62 <_dtoa_r+0x88a>
 80095e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80095e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80095ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80095f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f8:	464c      	mov	r4, r9
 80095fa:	464f      	mov	r7, r9
 80095fc:	f280 8215 	bge.w	8009a2a <_dtoa_r+0x852>
 8009600:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009604:	2331      	movs	r3, #49	; 0x31
 8009606:	f808 3b01 	strb.w	r3, [r8], #1
 800960a:	f10b 0b01 	add.w	fp, fp, #1
 800960e:	e211      	b.n	8009a34 <_dtoa_r+0x85c>
 8009610:	2202      	movs	r2, #2
 8009612:	e780      	b.n	8009516 <_dtoa_r+0x33e>
 8009614:	07cc      	lsls	r4, r1, #31
 8009616:	d504      	bpl.n	8009622 <_dtoa_r+0x44a>
 8009618:	ed90 6b00 	vldr	d6, [r0]
 800961c:	3201      	adds	r2, #1
 800961e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009622:	1049      	asrs	r1, r1, #1
 8009624:	3008      	adds	r0, #8
 8009626:	e777      	b.n	8009518 <_dtoa_r+0x340>
 8009628:	d022      	beq.n	8009670 <_dtoa_r+0x498>
 800962a:	f1cb 0100 	rsb	r1, fp, #0
 800962e:	4a70      	ldr	r2, [pc, #448]	; (80097f0 <_dtoa_r+0x618>)
 8009630:	f001 000f 	and.w	r0, r1, #15
 8009634:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009638:	ed92 7b00 	vldr	d7, [r2]
 800963c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009640:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009644:	486b      	ldr	r0, [pc, #428]	; (80097f4 <_dtoa_r+0x61c>)
 8009646:	1109      	asrs	r1, r1, #4
 8009648:	2400      	movs	r4, #0
 800964a:	2202      	movs	r2, #2
 800964c:	b929      	cbnz	r1, 800965a <_dtoa_r+0x482>
 800964e:	2c00      	cmp	r4, #0
 8009650:	f43f af6a 	beq.w	8009528 <_dtoa_r+0x350>
 8009654:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009658:	e766      	b.n	8009528 <_dtoa_r+0x350>
 800965a:	07cf      	lsls	r7, r1, #31
 800965c:	d505      	bpl.n	800966a <_dtoa_r+0x492>
 800965e:	ed90 6b00 	vldr	d6, [r0]
 8009662:	3201      	adds	r2, #1
 8009664:	2401      	movs	r4, #1
 8009666:	ee27 7b06 	vmul.f64	d7, d7, d6
 800966a:	1049      	asrs	r1, r1, #1
 800966c:	3008      	adds	r0, #8
 800966e:	e7ed      	b.n	800964c <_dtoa_r+0x474>
 8009670:	2202      	movs	r2, #2
 8009672:	e759      	b.n	8009528 <_dtoa_r+0x350>
 8009674:	465f      	mov	r7, fp
 8009676:	4648      	mov	r0, r9
 8009678:	e775      	b.n	8009566 <_dtoa_r+0x38e>
 800967a:	ec42 1b17 	vmov	d7, r1, r2
 800967e:	4a5c      	ldr	r2, [pc, #368]	; (80097f0 <_dtoa_r+0x618>)
 8009680:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009684:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009688:	9a01      	ldr	r2, [sp, #4]
 800968a:	1814      	adds	r4, r2, r0
 800968c:	9a07      	ldr	r2, [sp, #28]
 800968e:	b352      	cbz	r2, 80096e6 <_dtoa_r+0x50e>
 8009690:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009694:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009698:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800969c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80096a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80096a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80096a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80096ac:	ee14 2a90 	vmov	r2, s9
 80096b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80096b4:	3230      	adds	r2, #48	; 0x30
 80096b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80096ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c2:	f808 2b01 	strb.w	r2, [r8], #1
 80096c6:	d439      	bmi.n	800973c <_dtoa_r+0x564>
 80096c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80096cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80096d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d4:	d472      	bmi.n	80097bc <_dtoa_r+0x5e4>
 80096d6:	45a0      	cmp	r8, r4
 80096d8:	f43f af6b 	beq.w	80095b2 <_dtoa_r+0x3da>
 80096dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80096e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80096e4:	e7e0      	b.n	80096a8 <_dtoa_r+0x4d0>
 80096e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80096ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80096ee:	4621      	mov	r1, r4
 80096f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80096f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80096f8:	ee14 2a90 	vmov	r2, s9
 80096fc:	3230      	adds	r2, #48	; 0x30
 80096fe:	f808 2b01 	strb.w	r2, [r8], #1
 8009702:	45a0      	cmp	r8, r4
 8009704:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009708:	ee36 6b45 	vsub.f64	d6, d6, d5
 800970c:	d118      	bne.n	8009740 <_dtoa_r+0x568>
 800970e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009712:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009716:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800971a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971e:	dc4d      	bgt.n	80097bc <_dtoa_r+0x5e4>
 8009720:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009724:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800972c:	f57f af41 	bpl.w	80095b2 <_dtoa_r+0x3da>
 8009730:	4688      	mov	r8, r1
 8009732:	3901      	subs	r1, #1
 8009734:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009738:	2b30      	cmp	r3, #48	; 0x30
 800973a:	d0f9      	beq.n	8009730 <_dtoa_r+0x558>
 800973c:	46bb      	mov	fp, r7
 800973e:	e02a      	b.n	8009796 <_dtoa_r+0x5be>
 8009740:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009744:	e7d6      	b.n	80096f4 <_dtoa_r+0x51c>
 8009746:	ed9d 7b02 	vldr	d7, [sp, #8]
 800974a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800974e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009752:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009756:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800975a:	ee15 3a10 	vmov	r3, s10
 800975e:	3330      	adds	r3, #48	; 0x30
 8009760:	f808 3b01 	strb.w	r3, [r8], #1
 8009764:	9b01      	ldr	r3, [sp, #4]
 8009766:	eba8 0303 	sub.w	r3, r8, r3
 800976a:	4599      	cmp	r9, r3
 800976c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009770:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009774:	d133      	bne.n	80097de <_dtoa_r+0x606>
 8009776:	ee37 7b07 	vadd.f64	d7, d7, d7
 800977a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800977e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009782:	dc1a      	bgt.n	80097ba <_dtoa_r+0x5e2>
 8009784:	eeb4 7b46 	vcmp.f64	d7, d6
 8009788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800978c:	d103      	bne.n	8009796 <_dtoa_r+0x5be>
 800978e:	ee15 3a10 	vmov	r3, s10
 8009792:	07d9      	lsls	r1, r3, #31
 8009794:	d411      	bmi.n	80097ba <_dtoa_r+0x5e2>
 8009796:	4629      	mov	r1, r5
 8009798:	4630      	mov	r0, r6
 800979a:	f000 fe67 	bl	800a46c <_Bfree>
 800979e:	2300      	movs	r3, #0
 80097a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097a2:	f888 3000 	strb.w	r3, [r8]
 80097a6:	f10b 0301 	add.w	r3, fp, #1
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f43f ad61 	beq.w	8009276 <_dtoa_r+0x9e>
 80097b4:	f8c3 8000 	str.w	r8, [r3]
 80097b8:	e55d      	b.n	8009276 <_dtoa_r+0x9e>
 80097ba:	465f      	mov	r7, fp
 80097bc:	4643      	mov	r3, r8
 80097be:	4698      	mov	r8, r3
 80097c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097c4:	2a39      	cmp	r2, #57	; 0x39
 80097c6:	d106      	bne.n	80097d6 <_dtoa_r+0x5fe>
 80097c8:	9a01      	ldr	r2, [sp, #4]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d1f7      	bne.n	80097be <_dtoa_r+0x5e6>
 80097ce:	9901      	ldr	r1, [sp, #4]
 80097d0:	2230      	movs	r2, #48	; 0x30
 80097d2:	3701      	adds	r7, #1
 80097d4:	700a      	strb	r2, [r1, #0]
 80097d6:	781a      	ldrb	r2, [r3, #0]
 80097d8:	3201      	adds	r2, #1
 80097da:	701a      	strb	r2, [r3, #0]
 80097dc:	e7ae      	b.n	800973c <_dtoa_r+0x564>
 80097de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80097e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80097e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ea:	d1b2      	bne.n	8009752 <_dtoa_r+0x57a>
 80097ec:	e7d3      	b.n	8009796 <_dtoa_r+0x5be>
 80097ee:	bf00      	nop
 80097f0:	0800c1c0 	.word	0x0800c1c0
 80097f4:	0800c198 	.word	0x0800c198
 80097f8:	9907      	ldr	r1, [sp, #28]
 80097fa:	2900      	cmp	r1, #0
 80097fc:	f000 80d0 	beq.w	80099a0 <_dtoa_r+0x7c8>
 8009800:	9906      	ldr	r1, [sp, #24]
 8009802:	2901      	cmp	r1, #1
 8009804:	f300 80b4 	bgt.w	8009970 <_dtoa_r+0x798>
 8009808:	990a      	ldr	r1, [sp, #40]	; 0x28
 800980a:	2900      	cmp	r1, #0
 800980c:	f000 80ac 	beq.w	8009968 <_dtoa_r+0x790>
 8009810:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009814:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009818:	461c      	mov	r4, r3
 800981a:	930a      	str	r3, [sp, #40]	; 0x28
 800981c:	9b04      	ldr	r3, [sp, #16]
 800981e:	4413      	add	r3, r2
 8009820:	9304      	str	r3, [sp, #16]
 8009822:	9b05      	ldr	r3, [sp, #20]
 8009824:	2101      	movs	r1, #1
 8009826:	4413      	add	r3, r2
 8009828:	4630      	mov	r0, r6
 800982a:	9305      	str	r3, [sp, #20]
 800982c:	f000 ff20 	bl	800a670 <__i2b>
 8009830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009832:	4607      	mov	r7, r0
 8009834:	f1b8 0f00 	cmp.w	r8, #0
 8009838:	dd0d      	ble.n	8009856 <_dtoa_r+0x67e>
 800983a:	9a05      	ldr	r2, [sp, #20]
 800983c:	2a00      	cmp	r2, #0
 800983e:	dd0a      	ble.n	8009856 <_dtoa_r+0x67e>
 8009840:	4542      	cmp	r2, r8
 8009842:	9904      	ldr	r1, [sp, #16]
 8009844:	bfa8      	it	ge
 8009846:	4642      	movge	r2, r8
 8009848:	1a89      	subs	r1, r1, r2
 800984a:	9104      	str	r1, [sp, #16]
 800984c:	9905      	ldr	r1, [sp, #20]
 800984e:	eba8 0802 	sub.w	r8, r8, r2
 8009852:	1a8a      	subs	r2, r1, r2
 8009854:	9205      	str	r2, [sp, #20]
 8009856:	b303      	cbz	r3, 800989a <_dtoa_r+0x6c2>
 8009858:	9a07      	ldr	r2, [sp, #28]
 800985a:	2a00      	cmp	r2, #0
 800985c:	f000 80a5 	beq.w	80099aa <_dtoa_r+0x7d2>
 8009860:	2c00      	cmp	r4, #0
 8009862:	dd13      	ble.n	800988c <_dtoa_r+0x6b4>
 8009864:	4639      	mov	r1, r7
 8009866:	4622      	mov	r2, r4
 8009868:	4630      	mov	r0, r6
 800986a:	930d      	str	r3, [sp, #52]	; 0x34
 800986c:	f000 ffc0 	bl	800a7f0 <__pow5mult>
 8009870:	462a      	mov	r2, r5
 8009872:	4601      	mov	r1, r0
 8009874:	4607      	mov	r7, r0
 8009876:	4630      	mov	r0, r6
 8009878:	f000 ff10 	bl	800a69c <__multiply>
 800987c:	4629      	mov	r1, r5
 800987e:	900a      	str	r0, [sp, #40]	; 0x28
 8009880:	4630      	mov	r0, r6
 8009882:	f000 fdf3 	bl	800a46c <_Bfree>
 8009886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800988a:	4615      	mov	r5, r2
 800988c:	1b1a      	subs	r2, r3, r4
 800988e:	d004      	beq.n	800989a <_dtoa_r+0x6c2>
 8009890:	4629      	mov	r1, r5
 8009892:	4630      	mov	r0, r6
 8009894:	f000 ffac 	bl	800a7f0 <__pow5mult>
 8009898:	4605      	mov	r5, r0
 800989a:	2101      	movs	r1, #1
 800989c:	4630      	mov	r0, r6
 800989e:	f000 fee7 	bl	800a670 <__i2b>
 80098a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	4604      	mov	r4, r0
 80098a8:	f340 8081 	ble.w	80099ae <_dtoa_r+0x7d6>
 80098ac:	461a      	mov	r2, r3
 80098ae:	4601      	mov	r1, r0
 80098b0:	4630      	mov	r0, r6
 80098b2:	f000 ff9d 	bl	800a7f0 <__pow5mult>
 80098b6:	9b06      	ldr	r3, [sp, #24]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	4604      	mov	r4, r0
 80098bc:	dd7a      	ble.n	80099b4 <_dtoa_r+0x7dc>
 80098be:	2300      	movs	r3, #0
 80098c0:	930a      	str	r3, [sp, #40]	; 0x28
 80098c2:	6922      	ldr	r2, [r4, #16]
 80098c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80098c8:	6910      	ldr	r0, [r2, #16]
 80098ca:	f000 fe81 	bl	800a5d0 <__hi0bits>
 80098ce:	f1c0 0020 	rsb	r0, r0, #32
 80098d2:	9b05      	ldr	r3, [sp, #20]
 80098d4:	4418      	add	r0, r3
 80098d6:	f010 001f 	ands.w	r0, r0, #31
 80098da:	f000 808c 	beq.w	80099f6 <_dtoa_r+0x81e>
 80098de:	f1c0 0220 	rsb	r2, r0, #32
 80098e2:	2a04      	cmp	r2, #4
 80098e4:	f340 8085 	ble.w	80099f2 <_dtoa_r+0x81a>
 80098e8:	f1c0 001c 	rsb	r0, r0, #28
 80098ec:	9b04      	ldr	r3, [sp, #16]
 80098ee:	4403      	add	r3, r0
 80098f0:	9304      	str	r3, [sp, #16]
 80098f2:	9b05      	ldr	r3, [sp, #20]
 80098f4:	4403      	add	r3, r0
 80098f6:	4480      	add	r8, r0
 80098f8:	9305      	str	r3, [sp, #20]
 80098fa:	9b04      	ldr	r3, [sp, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	dd05      	ble.n	800990c <_dtoa_r+0x734>
 8009900:	4629      	mov	r1, r5
 8009902:	461a      	mov	r2, r3
 8009904:	4630      	mov	r0, r6
 8009906:	f000 ffcd 	bl	800a8a4 <__lshift>
 800990a:	4605      	mov	r5, r0
 800990c:	9b05      	ldr	r3, [sp, #20]
 800990e:	2b00      	cmp	r3, #0
 8009910:	dd05      	ble.n	800991e <_dtoa_r+0x746>
 8009912:	4621      	mov	r1, r4
 8009914:	461a      	mov	r2, r3
 8009916:	4630      	mov	r0, r6
 8009918:	f000 ffc4 	bl	800a8a4 <__lshift>
 800991c:	4604      	mov	r4, r0
 800991e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009920:	2b00      	cmp	r3, #0
 8009922:	d06a      	beq.n	80099fa <_dtoa_r+0x822>
 8009924:	4621      	mov	r1, r4
 8009926:	4628      	mov	r0, r5
 8009928:	f001 f82c 	bl	800a984 <__mcmp>
 800992c:	2800      	cmp	r0, #0
 800992e:	da64      	bge.n	80099fa <_dtoa_r+0x822>
 8009930:	2300      	movs	r3, #0
 8009932:	4629      	mov	r1, r5
 8009934:	220a      	movs	r2, #10
 8009936:	4630      	mov	r0, r6
 8009938:	f000 fdba 	bl	800a4b0 <__multadd>
 800993c:	9b07      	ldr	r3, [sp, #28]
 800993e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009942:	4605      	mov	r5, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 8191 	beq.w	8009c6c <_dtoa_r+0xa94>
 800994a:	4639      	mov	r1, r7
 800994c:	2300      	movs	r3, #0
 800994e:	220a      	movs	r2, #10
 8009950:	4630      	mov	r0, r6
 8009952:	f000 fdad 	bl	800a4b0 <__multadd>
 8009956:	f1ba 0f00 	cmp.w	sl, #0
 800995a:	4607      	mov	r7, r0
 800995c:	f300 808d 	bgt.w	8009a7a <_dtoa_r+0x8a2>
 8009960:	9b06      	ldr	r3, [sp, #24]
 8009962:	2b02      	cmp	r3, #2
 8009964:	dc50      	bgt.n	8009a08 <_dtoa_r+0x830>
 8009966:	e088      	b.n	8009a7a <_dtoa_r+0x8a2>
 8009968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800996a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800996e:	e751      	b.n	8009814 <_dtoa_r+0x63c>
 8009970:	f109 34ff 	add.w	r4, r9, #4294967295
 8009974:	42a3      	cmp	r3, r4
 8009976:	bfbf      	itttt	lt
 8009978:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800997a:	1ae3      	sublt	r3, r4, r3
 800997c:	18d2      	addlt	r2, r2, r3
 800997e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009980:	bfb6      	itet	lt
 8009982:	4623      	movlt	r3, r4
 8009984:	1b1c      	subge	r4, r3, r4
 8009986:	2400      	movlt	r4, #0
 8009988:	f1b9 0f00 	cmp.w	r9, #0
 800998c:	bfb5      	itete	lt
 800998e:	9a04      	ldrlt	r2, [sp, #16]
 8009990:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009994:	eba2 0809 	sublt.w	r8, r2, r9
 8009998:	464a      	movge	r2, r9
 800999a:	bfb8      	it	lt
 800999c:	2200      	movlt	r2, #0
 800999e:	e73c      	b.n	800981a <_dtoa_r+0x642>
 80099a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80099a4:	9f07      	ldr	r7, [sp, #28]
 80099a6:	461c      	mov	r4, r3
 80099a8:	e744      	b.n	8009834 <_dtoa_r+0x65c>
 80099aa:	461a      	mov	r2, r3
 80099ac:	e770      	b.n	8009890 <_dtoa_r+0x6b8>
 80099ae:	9b06      	ldr	r3, [sp, #24]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	dc18      	bgt.n	80099e6 <_dtoa_r+0x80e>
 80099b4:	9b02      	ldr	r3, [sp, #8]
 80099b6:	b9b3      	cbnz	r3, 80099e6 <_dtoa_r+0x80e>
 80099b8:	9b03      	ldr	r3, [sp, #12]
 80099ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80099be:	b9a2      	cbnz	r2, 80099ea <_dtoa_r+0x812>
 80099c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80099c4:	0d12      	lsrs	r2, r2, #20
 80099c6:	0512      	lsls	r2, r2, #20
 80099c8:	b18a      	cbz	r2, 80099ee <_dtoa_r+0x816>
 80099ca:	9b04      	ldr	r3, [sp, #16]
 80099cc:	3301      	adds	r3, #1
 80099ce:	9304      	str	r3, [sp, #16]
 80099d0:	9b05      	ldr	r3, [sp, #20]
 80099d2:	3301      	adds	r3, #1
 80099d4:	9305      	str	r3, [sp, #20]
 80099d6:	2301      	movs	r3, #1
 80099d8:	930a      	str	r3, [sp, #40]	; 0x28
 80099da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f47f af70 	bne.w	80098c2 <_dtoa_r+0x6ea>
 80099e2:	2001      	movs	r0, #1
 80099e4:	e775      	b.n	80098d2 <_dtoa_r+0x6fa>
 80099e6:	2300      	movs	r3, #0
 80099e8:	e7f6      	b.n	80099d8 <_dtoa_r+0x800>
 80099ea:	9b02      	ldr	r3, [sp, #8]
 80099ec:	e7f4      	b.n	80099d8 <_dtoa_r+0x800>
 80099ee:	920a      	str	r2, [sp, #40]	; 0x28
 80099f0:	e7f3      	b.n	80099da <_dtoa_r+0x802>
 80099f2:	d082      	beq.n	80098fa <_dtoa_r+0x722>
 80099f4:	4610      	mov	r0, r2
 80099f6:	301c      	adds	r0, #28
 80099f8:	e778      	b.n	80098ec <_dtoa_r+0x714>
 80099fa:	f1b9 0f00 	cmp.w	r9, #0
 80099fe:	dc37      	bgt.n	8009a70 <_dtoa_r+0x898>
 8009a00:	9b06      	ldr	r3, [sp, #24]
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	dd34      	ble.n	8009a70 <_dtoa_r+0x898>
 8009a06:	46ca      	mov	sl, r9
 8009a08:	f1ba 0f00 	cmp.w	sl, #0
 8009a0c:	d10d      	bne.n	8009a2a <_dtoa_r+0x852>
 8009a0e:	4621      	mov	r1, r4
 8009a10:	4653      	mov	r3, sl
 8009a12:	2205      	movs	r2, #5
 8009a14:	4630      	mov	r0, r6
 8009a16:	f000 fd4b 	bl	800a4b0 <__multadd>
 8009a1a:	4601      	mov	r1, r0
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f000 ffb0 	bl	800a984 <__mcmp>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	f73f adeb 	bgt.w	8009600 <_dtoa_r+0x428>
 8009a2a:	9b08      	ldr	r3, [sp, #32]
 8009a2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009a30:	ea6f 0b03 	mvn.w	fp, r3
 8009a34:	f04f 0900 	mov.w	r9, #0
 8009a38:	4621      	mov	r1, r4
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f000 fd16 	bl	800a46c <_Bfree>
 8009a40:	2f00      	cmp	r7, #0
 8009a42:	f43f aea8 	beq.w	8009796 <_dtoa_r+0x5be>
 8009a46:	f1b9 0f00 	cmp.w	r9, #0
 8009a4a:	d005      	beq.n	8009a58 <_dtoa_r+0x880>
 8009a4c:	45b9      	cmp	r9, r7
 8009a4e:	d003      	beq.n	8009a58 <_dtoa_r+0x880>
 8009a50:	4649      	mov	r1, r9
 8009a52:	4630      	mov	r0, r6
 8009a54:	f000 fd0a 	bl	800a46c <_Bfree>
 8009a58:	4639      	mov	r1, r7
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	f000 fd06 	bl	800a46c <_Bfree>
 8009a60:	e699      	b.n	8009796 <_dtoa_r+0x5be>
 8009a62:	2400      	movs	r4, #0
 8009a64:	4627      	mov	r7, r4
 8009a66:	e7e0      	b.n	8009a2a <_dtoa_r+0x852>
 8009a68:	46bb      	mov	fp, r7
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	4607      	mov	r7, r0
 8009a6e:	e5c7      	b.n	8009600 <_dtoa_r+0x428>
 8009a70:	9b07      	ldr	r3, [sp, #28]
 8009a72:	46ca      	mov	sl, r9
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f000 8100 	beq.w	8009c7a <_dtoa_r+0xaa2>
 8009a7a:	f1b8 0f00 	cmp.w	r8, #0
 8009a7e:	dd05      	ble.n	8009a8c <_dtoa_r+0x8b4>
 8009a80:	4639      	mov	r1, r7
 8009a82:	4642      	mov	r2, r8
 8009a84:	4630      	mov	r0, r6
 8009a86:	f000 ff0d 	bl	800a8a4 <__lshift>
 8009a8a:	4607      	mov	r7, r0
 8009a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d05d      	beq.n	8009b4e <_dtoa_r+0x976>
 8009a92:	6879      	ldr	r1, [r7, #4]
 8009a94:	4630      	mov	r0, r6
 8009a96:	f000 fca9 	bl	800a3ec <_Balloc>
 8009a9a:	4680      	mov	r8, r0
 8009a9c:	b928      	cbnz	r0, 8009aaa <_dtoa_r+0x8d2>
 8009a9e:	4b82      	ldr	r3, [pc, #520]	; (8009ca8 <_dtoa_r+0xad0>)
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009aa6:	f7ff bbaf 	b.w	8009208 <_dtoa_r+0x30>
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	3202      	adds	r2, #2
 8009aae:	0092      	lsls	r2, r2, #2
 8009ab0:	f107 010c 	add.w	r1, r7, #12
 8009ab4:	300c      	adds	r0, #12
 8009ab6:	f000 fc8b 	bl	800a3d0 <memcpy>
 8009aba:	2201      	movs	r2, #1
 8009abc:	4641      	mov	r1, r8
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f000 fef0 	bl	800a8a4 <__lshift>
 8009ac4:	9b01      	ldr	r3, [sp, #4]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	9304      	str	r3, [sp, #16]
 8009aca:	9b01      	ldr	r3, [sp, #4]
 8009acc:	4453      	add	r3, sl
 8009ace:	9308      	str	r3, [sp, #32]
 8009ad0:	9b02      	ldr	r3, [sp, #8]
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	46b9      	mov	r9, r7
 8009ad8:	9307      	str	r3, [sp, #28]
 8009ada:	4607      	mov	r7, r0
 8009adc:	9b04      	ldr	r3, [sp, #16]
 8009ade:	4621      	mov	r1, r4
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	9302      	str	r3, [sp, #8]
 8009ae6:	f7ff faeb 	bl	80090c0 <quorem>
 8009aea:	4603      	mov	r3, r0
 8009aec:	3330      	adds	r3, #48	; 0x30
 8009aee:	9005      	str	r0, [sp, #20]
 8009af0:	4649      	mov	r1, r9
 8009af2:	4628      	mov	r0, r5
 8009af4:	9309      	str	r3, [sp, #36]	; 0x24
 8009af6:	f000 ff45 	bl	800a984 <__mcmp>
 8009afa:	463a      	mov	r2, r7
 8009afc:	4682      	mov	sl, r0
 8009afe:	4621      	mov	r1, r4
 8009b00:	4630      	mov	r0, r6
 8009b02:	f000 ff5b 	bl	800a9bc <__mdiff>
 8009b06:	68c2      	ldr	r2, [r0, #12]
 8009b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0a:	4680      	mov	r8, r0
 8009b0c:	bb0a      	cbnz	r2, 8009b52 <_dtoa_r+0x97a>
 8009b0e:	4601      	mov	r1, r0
 8009b10:	4628      	mov	r0, r5
 8009b12:	f000 ff37 	bl	800a984 <__mcmp>
 8009b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b18:	4602      	mov	r2, r0
 8009b1a:	4641      	mov	r1, r8
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009b22:	f000 fca3 	bl	800a46c <_Bfree>
 8009b26:	9b06      	ldr	r3, [sp, #24]
 8009b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b2a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009b2e:	ea43 0102 	orr.w	r1, r3, r2
 8009b32:	9b07      	ldr	r3, [sp, #28]
 8009b34:	430b      	orrs	r3, r1
 8009b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b38:	d10d      	bne.n	8009b56 <_dtoa_r+0x97e>
 8009b3a:	2b39      	cmp	r3, #57	; 0x39
 8009b3c:	d029      	beq.n	8009b92 <_dtoa_r+0x9ba>
 8009b3e:	f1ba 0f00 	cmp.w	sl, #0
 8009b42:	dd01      	ble.n	8009b48 <_dtoa_r+0x970>
 8009b44:	9b05      	ldr	r3, [sp, #20]
 8009b46:	3331      	adds	r3, #49	; 0x31
 8009b48:	9a02      	ldr	r2, [sp, #8]
 8009b4a:	7013      	strb	r3, [r2, #0]
 8009b4c:	e774      	b.n	8009a38 <_dtoa_r+0x860>
 8009b4e:	4638      	mov	r0, r7
 8009b50:	e7b8      	b.n	8009ac4 <_dtoa_r+0x8ec>
 8009b52:	2201      	movs	r2, #1
 8009b54:	e7e1      	b.n	8009b1a <_dtoa_r+0x942>
 8009b56:	f1ba 0f00 	cmp.w	sl, #0
 8009b5a:	db06      	blt.n	8009b6a <_dtoa_r+0x992>
 8009b5c:	9906      	ldr	r1, [sp, #24]
 8009b5e:	ea41 0a0a 	orr.w	sl, r1, sl
 8009b62:	9907      	ldr	r1, [sp, #28]
 8009b64:	ea5a 0101 	orrs.w	r1, sl, r1
 8009b68:	d120      	bne.n	8009bac <_dtoa_r+0x9d4>
 8009b6a:	2a00      	cmp	r2, #0
 8009b6c:	ddec      	ble.n	8009b48 <_dtoa_r+0x970>
 8009b6e:	4629      	mov	r1, r5
 8009b70:	2201      	movs	r2, #1
 8009b72:	4630      	mov	r0, r6
 8009b74:	9304      	str	r3, [sp, #16]
 8009b76:	f000 fe95 	bl	800a8a4 <__lshift>
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	f000 ff01 	bl	800a984 <__mcmp>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	9b04      	ldr	r3, [sp, #16]
 8009b86:	dc02      	bgt.n	8009b8e <_dtoa_r+0x9b6>
 8009b88:	d1de      	bne.n	8009b48 <_dtoa_r+0x970>
 8009b8a:	07da      	lsls	r2, r3, #31
 8009b8c:	d5dc      	bpl.n	8009b48 <_dtoa_r+0x970>
 8009b8e:	2b39      	cmp	r3, #57	; 0x39
 8009b90:	d1d8      	bne.n	8009b44 <_dtoa_r+0x96c>
 8009b92:	9a02      	ldr	r2, [sp, #8]
 8009b94:	2339      	movs	r3, #57	; 0x39
 8009b96:	7013      	strb	r3, [r2, #0]
 8009b98:	4643      	mov	r3, r8
 8009b9a:	4698      	mov	r8, r3
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009ba2:	2a39      	cmp	r2, #57	; 0x39
 8009ba4:	d051      	beq.n	8009c4a <_dtoa_r+0xa72>
 8009ba6:	3201      	adds	r2, #1
 8009ba8:	701a      	strb	r2, [r3, #0]
 8009baa:	e745      	b.n	8009a38 <_dtoa_r+0x860>
 8009bac:	2a00      	cmp	r2, #0
 8009bae:	dd03      	ble.n	8009bb8 <_dtoa_r+0x9e0>
 8009bb0:	2b39      	cmp	r3, #57	; 0x39
 8009bb2:	d0ee      	beq.n	8009b92 <_dtoa_r+0x9ba>
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	e7c7      	b.n	8009b48 <_dtoa_r+0x970>
 8009bb8:	9a04      	ldr	r2, [sp, #16]
 8009bba:	9908      	ldr	r1, [sp, #32]
 8009bbc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009bc0:	428a      	cmp	r2, r1
 8009bc2:	d02b      	beq.n	8009c1c <_dtoa_r+0xa44>
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	220a      	movs	r2, #10
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f000 fc70 	bl	800a4b0 <__multadd>
 8009bd0:	45b9      	cmp	r9, r7
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	f04f 0300 	mov.w	r3, #0
 8009bd8:	f04f 020a 	mov.w	r2, #10
 8009bdc:	4649      	mov	r1, r9
 8009bde:	4630      	mov	r0, r6
 8009be0:	d107      	bne.n	8009bf2 <_dtoa_r+0xa1a>
 8009be2:	f000 fc65 	bl	800a4b0 <__multadd>
 8009be6:	4681      	mov	r9, r0
 8009be8:	4607      	mov	r7, r0
 8009bea:	9b04      	ldr	r3, [sp, #16]
 8009bec:	3301      	adds	r3, #1
 8009bee:	9304      	str	r3, [sp, #16]
 8009bf0:	e774      	b.n	8009adc <_dtoa_r+0x904>
 8009bf2:	f000 fc5d 	bl	800a4b0 <__multadd>
 8009bf6:	4639      	mov	r1, r7
 8009bf8:	4681      	mov	r9, r0
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	220a      	movs	r2, #10
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f000 fc56 	bl	800a4b0 <__multadd>
 8009c04:	4607      	mov	r7, r0
 8009c06:	e7f0      	b.n	8009bea <_dtoa_r+0xa12>
 8009c08:	f1ba 0f00 	cmp.w	sl, #0
 8009c0c:	9a01      	ldr	r2, [sp, #4]
 8009c0e:	bfcc      	ite	gt
 8009c10:	46d0      	movgt	r8, sl
 8009c12:	f04f 0801 	movle.w	r8, #1
 8009c16:	4490      	add	r8, r2
 8009c18:	f04f 0900 	mov.w	r9, #0
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	2201      	movs	r2, #1
 8009c20:	4630      	mov	r0, r6
 8009c22:	9302      	str	r3, [sp, #8]
 8009c24:	f000 fe3e 	bl	800a8a4 <__lshift>
 8009c28:	4621      	mov	r1, r4
 8009c2a:	4605      	mov	r5, r0
 8009c2c:	f000 feaa 	bl	800a984 <__mcmp>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	dcb1      	bgt.n	8009b98 <_dtoa_r+0x9c0>
 8009c34:	d102      	bne.n	8009c3c <_dtoa_r+0xa64>
 8009c36:	9b02      	ldr	r3, [sp, #8]
 8009c38:	07db      	lsls	r3, r3, #31
 8009c3a:	d4ad      	bmi.n	8009b98 <_dtoa_r+0x9c0>
 8009c3c:	4643      	mov	r3, r8
 8009c3e:	4698      	mov	r8, r3
 8009c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c44:	2a30      	cmp	r2, #48	; 0x30
 8009c46:	d0fa      	beq.n	8009c3e <_dtoa_r+0xa66>
 8009c48:	e6f6      	b.n	8009a38 <_dtoa_r+0x860>
 8009c4a:	9a01      	ldr	r2, [sp, #4]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d1a4      	bne.n	8009b9a <_dtoa_r+0x9c2>
 8009c50:	f10b 0b01 	add.w	fp, fp, #1
 8009c54:	2331      	movs	r3, #49	; 0x31
 8009c56:	e778      	b.n	8009b4a <_dtoa_r+0x972>
 8009c58:	4b14      	ldr	r3, [pc, #80]	; (8009cac <_dtoa_r+0xad4>)
 8009c5a:	f7ff bb27 	b.w	80092ac <_dtoa_r+0xd4>
 8009c5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f47f ab03 	bne.w	800926c <_dtoa_r+0x94>
 8009c66:	4b12      	ldr	r3, [pc, #72]	; (8009cb0 <_dtoa_r+0xad8>)
 8009c68:	f7ff bb20 	b.w	80092ac <_dtoa_r+0xd4>
 8009c6c:	f1ba 0f00 	cmp.w	sl, #0
 8009c70:	dc03      	bgt.n	8009c7a <_dtoa_r+0xaa2>
 8009c72:	9b06      	ldr	r3, [sp, #24]
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	f73f aec7 	bgt.w	8009a08 <_dtoa_r+0x830>
 8009c7a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c7e:	4621      	mov	r1, r4
 8009c80:	4628      	mov	r0, r5
 8009c82:	f7ff fa1d 	bl	80090c0 <quorem>
 8009c86:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009c8a:	f808 3b01 	strb.w	r3, [r8], #1
 8009c8e:	9a01      	ldr	r2, [sp, #4]
 8009c90:	eba8 0202 	sub.w	r2, r8, r2
 8009c94:	4592      	cmp	sl, r2
 8009c96:	ddb7      	ble.n	8009c08 <_dtoa_r+0xa30>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	220a      	movs	r2, #10
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f000 fc06 	bl	800a4b0 <__multadd>
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	e7ea      	b.n	8009c7e <_dtoa_r+0xaa6>
 8009ca8:	0800c0b0 	.word	0x0800c0b0
 8009cac:	0800beb0 	.word	0x0800beb0
 8009cb0:	0800c031 	.word	0x0800c031

08009cb4 <rshift>:
 8009cb4:	6903      	ldr	r3, [r0, #16]
 8009cb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009cba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009cc2:	f100 0414 	add.w	r4, r0, #20
 8009cc6:	dd45      	ble.n	8009d54 <rshift+0xa0>
 8009cc8:	f011 011f 	ands.w	r1, r1, #31
 8009ccc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009cd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009cd4:	d10c      	bne.n	8009cf0 <rshift+0x3c>
 8009cd6:	f100 0710 	add.w	r7, r0, #16
 8009cda:	4629      	mov	r1, r5
 8009cdc:	42b1      	cmp	r1, r6
 8009cde:	d334      	bcc.n	8009d4a <rshift+0x96>
 8009ce0:	1a9b      	subs	r3, r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	1eea      	subs	r2, r5, #3
 8009ce6:	4296      	cmp	r6, r2
 8009ce8:	bf38      	it	cc
 8009cea:	2300      	movcc	r3, #0
 8009cec:	4423      	add	r3, r4
 8009cee:	e015      	b.n	8009d1c <rshift+0x68>
 8009cf0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009cf4:	f1c1 0820 	rsb	r8, r1, #32
 8009cf8:	40cf      	lsrs	r7, r1
 8009cfa:	f105 0e04 	add.w	lr, r5, #4
 8009cfe:	46a1      	mov	r9, r4
 8009d00:	4576      	cmp	r6, lr
 8009d02:	46f4      	mov	ip, lr
 8009d04:	d815      	bhi.n	8009d32 <rshift+0x7e>
 8009d06:	1a9a      	subs	r2, r3, r2
 8009d08:	0092      	lsls	r2, r2, #2
 8009d0a:	3a04      	subs	r2, #4
 8009d0c:	3501      	adds	r5, #1
 8009d0e:	42ae      	cmp	r6, r5
 8009d10:	bf38      	it	cc
 8009d12:	2200      	movcc	r2, #0
 8009d14:	18a3      	adds	r3, r4, r2
 8009d16:	50a7      	str	r7, [r4, r2]
 8009d18:	b107      	cbz	r7, 8009d1c <rshift+0x68>
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	1b1a      	subs	r2, r3, r4
 8009d1e:	42a3      	cmp	r3, r4
 8009d20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d24:	bf08      	it	eq
 8009d26:	2300      	moveq	r3, #0
 8009d28:	6102      	str	r2, [r0, #16]
 8009d2a:	bf08      	it	eq
 8009d2c:	6143      	streq	r3, [r0, #20]
 8009d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d32:	f8dc c000 	ldr.w	ip, [ip]
 8009d36:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d3a:	ea4c 0707 	orr.w	r7, ip, r7
 8009d3e:	f849 7b04 	str.w	r7, [r9], #4
 8009d42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d46:	40cf      	lsrs	r7, r1
 8009d48:	e7da      	b.n	8009d00 <rshift+0x4c>
 8009d4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d52:	e7c3      	b.n	8009cdc <rshift+0x28>
 8009d54:	4623      	mov	r3, r4
 8009d56:	e7e1      	b.n	8009d1c <rshift+0x68>

08009d58 <__hexdig_fun>:
 8009d58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009d5c:	2b09      	cmp	r3, #9
 8009d5e:	d802      	bhi.n	8009d66 <__hexdig_fun+0xe>
 8009d60:	3820      	subs	r0, #32
 8009d62:	b2c0      	uxtb	r0, r0
 8009d64:	4770      	bx	lr
 8009d66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009d6a:	2b05      	cmp	r3, #5
 8009d6c:	d801      	bhi.n	8009d72 <__hexdig_fun+0x1a>
 8009d6e:	3847      	subs	r0, #71	; 0x47
 8009d70:	e7f7      	b.n	8009d62 <__hexdig_fun+0xa>
 8009d72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009d76:	2b05      	cmp	r3, #5
 8009d78:	d801      	bhi.n	8009d7e <__hexdig_fun+0x26>
 8009d7a:	3827      	subs	r0, #39	; 0x27
 8009d7c:	e7f1      	b.n	8009d62 <__hexdig_fun+0xa>
 8009d7e:	2000      	movs	r0, #0
 8009d80:	4770      	bx	lr
	...

08009d84 <__gethex>:
 8009d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d88:	ed2d 8b02 	vpush	{d8}
 8009d8c:	b089      	sub	sp, #36	; 0x24
 8009d8e:	ee08 0a10 	vmov	s16, r0
 8009d92:	9304      	str	r3, [sp, #16]
 8009d94:	4bb4      	ldr	r3, [pc, #720]	; (800a068 <__gethex+0x2e4>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	468b      	mov	fp, r1
 8009d9e:	4690      	mov	r8, r2
 8009da0:	f7f6 fa4e 	bl	8000240 <strlen>
 8009da4:	9b01      	ldr	r3, [sp, #4]
 8009da6:	f8db 2000 	ldr.w	r2, [fp]
 8009daa:	4403      	add	r3, r0
 8009dac:	4682      	mov	sl, r0
 8009dae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009db2:	9305      	str	r3, [sp, #20]
 8009db4:	1c93      	adds	r3, r2, #2
 8009db6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009dba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009dbe:	32fe      	adds	r2, #254	; 0xfe
 8009dc0:	18d1      	adds	r1, r2, r3
 8009dc2:	461f      	mov	r7, r3
 8009dc4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009dc8:	9100      	str	r1, [sp, #0]
 8009dca:	2830      	cmp	r0, #48	; 0x30
 8009dcc:	d0f8      	beq.n	8009dc0 <__gethex+0x3c>
 8009dce:	f7ff ffc3 	bl	8009d58 <__hexdig_fun>
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d13a      	bne.n	8009e4e <__gethex+0xca>
 8009dd8:	9901      	ldr	r1, [sp, #4]
 8009dda:	4652      	mov	r2, sl
 8009ddc:	4638      	mov	r0, r7
 8009dde:	f001 fa2f 	bl	800b240 <strncmp>
 8009de2:	4605      	mov	r5, r0
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d168      	bne.n	8009eba <__gethex+0x136>
 8009de8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009dec:	eb07 060a 	add.w	r6, r7, sl
 8009df0:	f7ff ffb2 	bl	8009d58 <__hexdig_fun>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	d062      	beq.n	8009ebe <__gethex+0x13a>
 8009df8:	4633      	mov	r3, r6
 8009dfa:	7818      	ldrb	r0, [r3, #0]
 8009dfc:	2830      	cmp	r0, #48	; 0x30
 8009dfe:	461f      	mov	r7, r3
 8009e00:	f103 0301 	add.w	r3, r3, #1
 8009e04:	d0f9      	beq.n	8009dfa <__gethex+0x76>
 8009e06:	f7ff ffa7 	bl	8009d58 <__hexdig_fun>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	fab0 f480 	clz	r4, r0
 8009e10:	0964      	lsrs	r4, r4, #5
 8009e12:	4635      	mov	r5, r6
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	463a      	mov	r2, r7
 8009e18:	4616      	mov	r6, r2
 8009e1a:	3201      	adds	r2, #1
 8009e1c:	7830      	ldrb	r0, [r6, #0]
 8009e1e:	f7ff ff9b 	bl	8009d58 <__hexdig_fun>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d1f8      	bne.n	8009e18 <__gethex+0x94>
 8009e26:	9901      	ldr	r1, [sp, #4]
 8009e28:	4652      	mov	r2, sl
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f001 fa08 	bl	800b240 <strncmp>
 8009e30:	b980      	cbnz	r0, 8009e54 <__gethex+0xd0>
 8009e32:	b94d      	cbnz	r5, 8009e48 <__gethex+0xc4>
 8009e34:	eb06 050a 	add.w	r5, r6, sl
 8009e38:	462a      	mov	r2, r5
 8009e3a:	4616      	mov	r6, r2
 8009e3c:	3201      	adds	r2, #1
 8009e3e:	7830      	ldrb	r0, [r6, #0]
 8009e40:	f7ff ff8a 	bl	8009d58 <__hexdig_fun>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d1f8      	bne.n	8009e3a <__gethex+0xb6>
 8009e48:	1bad      	subs	r5, r5, r6
 8009e4a:	00ad      	lsls	r5, r5, #2
 8009e4c:	e004      	b.n	8009e58 <__gethex+0xd4>
 8009e4e:	2400      	movs	r4, #0
 8009e50:	4625      	mov	r5, r4
 8009e52:	e7e0      	b.n	8009e16 <__gethex+0x92>
 8009e54:	2d00      	cmp	r5, #0
 8009e56:	d1f7      	bne.n	8009e48 <__gethex+0xc4>
 8009e58:	7833      	ldrb	r3, [r6, #0]
 8009e5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e5e:	2b50      	cmp	r3, #80	; 0x50
 8009e60:	d13b      	bne.n	8009eda <__gethex+0x156>
 8009e62:	7873      	ldrb	r3, [r6, #1]
 8009e64:	2b2b      	cmp	r3, #43	; 0x2b
 8009e66:	d02c      	beq.n	8009ec2 <__gethex+0x13e>
 8009e68:	2b2d      	cmp	r3, #45	; 0x2d
 8009e6a:	d02e      	beq.n	8009eca <__gethex+0x146>
 8009e6c:	1c71      	adds	r1, r6, #1
 8009e6e:	f04f 0900 	mov.w	r9, #0
 8009e72:	7808      	ldrb	r0, [r1, #0]
 8009e74:	f7ff ff70 	bl	8009d58 <__hexdig_fun>
 8009e78:	1e43      	subs	r3, r0, #1
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b18      	cmp	r3, #24
 8009e7e:	d82c      	bhi.n	8009eda <__gethex+0x156>
 8009e80:	f1a0 0210 	sub.w	r2, r0, #16
 8009e84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e88:	f7ff ff66 	bl	8009d58 <__hexdig_fun>
 8009e8c:	1e43      	subs	r3, r0, #1
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b18      	cmp	r3, #24
 8009e92:	d91d      	bls.n	8009ed0 <__gethex+0x14c>
 8009e94:	f1b9 0f00 	cmp.w	r9, #0
 8009e98:	d000      	beq.n	8009e9c <__gethex+0x118>
 8009e9a:	4252      	negs	r2, r2
 8009e9c:	4415      	add	r5, r2
 8009e9e:	f8cb 1000 	str.w	r1, [fp]
 8009ea2:	b1e4      	cbz	r4, 8009ede <__gethex+0x15a>
 8009ea4:	9b00      	ldr	r3, [sp, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bf14      	ite	ne
 8009eaa:	2700      	movne	r7, #0
 8009eac:	2706      	moveq	r7, #6
 8009eae:	4638      	mov	r0, r7
 8009eb0:	b009      	add	sp, #36	; 0x24
 8009eb2:	ecbd 8b02 	vpop	{d8}
 8009eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eba:	463e      	mov	r6, r7
 8009ebc:	4625      	mov	r5, r4
 8009ebe:	2401      	movs	r4, #1
 8009ec0:	e7ca      	b.n	8009e58 <__gethex+0xd4>
 8009ec2:	f04f 0900 	mov.w	r9, #0
 8009ec6:	1cb1      	adds	r1, r6, #2
 8009ec8:	e7d3      	b.n	8009e72 <__gethex+0xee>
 8009eca:	f04f 0901 	mov.w	r9, #1
 8009ece:	e7fa      	b.n	8009ec6 <__gethex+0x142>
 8009ed0:	230a      	movs	r3, #10
 8009ed2:	fb03 0202 	mla	r2, r3, r2, r0
 8009ed6:	3a10      	subs	r2, #16
 8009ed8:	e7d4      	b.n	8009e84 <__gethex+0x100>
 8009eda:	4631      	mov	r1, r6
 8009edc:	e7df      	b.n	8009e9e <__gethex+0x11a>
 8009ede:	1bf3      	subs	r3, r6, r7
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	2b07      	cmp	r3, #7
 8009ee6:	dc0b      	bgt.n	8009f00 <__gethex+0x17c>
 8009ee8:	ee18 0a10 	vmov	r0, s16
 8009eec:	f000 fa7e 	bl	800a3ec <_Balloc>
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	b940      	cbnz	r0, 8009f06 <__gethex+0x182>
 8009ef4:	4b5d      	ldr	r3, [pc, #372]	; (800a06c <__gethex+0x2e8>)
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	21de      	movs	r1, #222	; 0xde
 8009efa:	485d      	ldr	r0, [pc, #372]	; (800a070 <__gethex+0x2ec>)
 8009efc:	f001 f9c2 	bl	800b284 <__assert_func>
 8009f00:	3101      	adds	r1, #1
 8009f02:	105b      	asrs	r3, r3, #1
 8009f04:	e7ee      	b.n	8009ee4 <__gethex+0x160>
 8009f06:	f100 0914 	add.w	r9, r0, #20
 8009f0a:	f04f 0b00 	mov.w	fp, #0
 8009f0e:	f1ca 0301 	rsb	r3, sl, #1
 8009f12:	f8cd 9008 	str.w	r9, [sp, #8]
 8009f16:	f8cd b000 	str.w	fp, [sp]
 8009f1a:	9306      	str	r3, [sp, #24]
 8009f1c:	42b7      	cmp	r7, r6
 8009f1e:	d340      	bcc.n	8009fa2 <__gethex+0x21e>
 8009f20:	9802      	ldr	r0, [sp, #8]
 8009f22:	9b00      	ldr	r3, [sp, #0]
 8009f24:	f840 3b04 	str.w	r3, [r0], #4
 8009f28:	eba0 0009 	sub.w	r0, r0, r9
 8009f2c:	1080      	asrs	r0, r0, #2
 8009f2e:	0146      	lsls	r6, r0, #5
 8009f30:	6120      	str	r0, [r4, #16]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 fb4c 	bl	800a5d0 <__hi0bits>
 8009f38:	1a30      	subs	r0, r6, r0
 8009f3a:	f8d8 6000 	ldr.w	r6, [r8]
 8009f3e:	42b0      	cmp	r0, r6
 8009f40:	dd63      	ble.n	800a00a <__gethex+0x286>
 8009f42:	1b87      	subs	r7, r0, r6
 8009f44:	4639      	mov	r1, r7
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 feed 	bl	800ad26 <__any_on>
 8009f4c:	4682      	mov	sl, r0
 8009f4e:	b1a8      	cbz	r0, 8009f7c <__gethex+0x1f8>
 8009f50:	1e7b      	subs	r3, r7, #1
 8009f52:	1159      	asrs	r1, r3, #5
 8009f54:	f003 021f 	and.w	r2, r3, #31
 8009f58:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009f5c:	f04f 0a01 	mov.w	sl, #1
 8009f60:	fa0a f202 	lsl.w	r2, sl, r2
 8009f64:	420a      	tst	r2, r1
 8009f66:	d009      	beq.n	8009f7c <__gethex+0x1f8>
 8009f68:	4553      	cmp	r3, sl
 8009f6a:	dd05      	ble.n	8009f78 <__gethex+0x1f4>
 8009f6c:	1eb9      	subs	r1, r7, #2
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f000 fed9 	bl	800ad26 <__any_on>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d145      	bne.n	800a004 <__gethex+0x280>
 8009f78:	f04f 0a02 	mov.w	sl, #2
 8009f7c:	4639      	mov	r1, r7
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f7ff fe98 	bl	8009cb4 <rshift>
 8009f84:	443d      	add	r5, r7
 8009f86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f8a:	42ab      	cmp	r3, r5
 8009f8c:	da4c      	bge.n	800a028 <__gethex+0x2a4>
 8009f8e:	ee18 0a10 	vmov	r0, s16
 8009f92:	4621      	mov	r1, r4
 8009f94:	f000 fa6a 	bl	800a46c <_Bfree>
 8009f98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	6013      	str	r3, [r2, #0]
 8009f9e:	27a3      	movs	r7, #163	; 0xa3
 8009fa0:	e785      	b.n	8009eae <__gethex+0x12a>
 8009fa2:	1e73      	subs	r3, r6, #1
 8009fa4:	9a05      	ldr	r2, [sp, #20]
 8009fa6:	9303      	str	r3, [sp, #12]
 8009fa8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d019      	beq.n	8009fe4 <__gethex+0x260>
 8009fb0:	f1bb 0f20 	cmp.w	fp, #32
 8009fb4:	d107      	bne.n	8009fc6 <__gethex+0x242>
 8009fb6:	9b02      	ldr	r3, [sp, #8]
 8009fb8:	9a00      	ldr	r2, [sp, #0]
 8009fba:	f843 2b04 	str.w	r2, [r3], #4
 8009fbe:	9302      	str	r3, [sp, #8]
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	469b      	mov	fp, r3
 8009fc6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009fca:	f7ff fec5 	bl	8009d58 <__hexdig_fun>
 8009fce:	9b00      	ldr	r3, [sp, #0]
 8009fd0:	f000 000f 	and.w	r0, r0, #15
 8009fd4:	fa00 f00b 	lsl.w	r0, r0, fp
 8009fd8:	4303      	orrs	r3, r0
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	f10b 0b04 	add.w	fp, fp, #4
 8009fe0:	9b03      	ldr	r3, [sp, #12]
 8009fe2:	e00d      	b.n	800a000 <__gethex+0x27c>
 8009fe4:	9b03      	ldr	r3, [sp, #12]
 8009fe6:	9a06      	ldr	r2, [sp, #24]
 8009fe8:	4413      	add	r3, r2
 8009fea:	42bb      	cmp	r3, r7
 8009fec:	d3e0      	bcc.n	8009fb0 <__gethex+0x22c>
 8009fee:	4618      	mov	r0, r3
 8009ff0:	9901      	ldr	r1, [sp, #4]
 8009ff2:	9307      	str	r3, [sp, #28]
 8009ff4:	4652      	mov	r2, sl
 8009ff6:	f001 f923 	bl	800b240 <strncmp>
 8009ffa:	9b07      	ldr	r3, [sp, #28]
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d1d7      	bne.n	8009fb0 <__gethex+0x22c>
 800a000:	461e      	mov	r6, r3
 800a002:	e78b      	b.n	8009f1c <__gethex+0x198>
 800a004:	f04f 0a03 	mov.w	sl, #3
 800a008:	e7b8      	b.n	8009f7c <__gethex+0x1f8>
 800a00a:	da0a      	bge.n	800a022 <__gethex+0x29e>
 800a00c:	1a37      	subs	r7, r6, r0
 800a00e:	4621      	mov	r1, r4
 800a010:	ee18 0a10 	vmov	r0, s16
 800a014:	463a      	mov	r2, r7
 800a016:	f000 fc45 	bl	800a8a4 <__lshift>
 800a01a:	1bed      	subs	r5, r5, r7
 800a01c:	4604      	mov	r4, r0
 800a01e:	f100 0914 	add.w	r9, r0, #20
 800a022:	f04f 0a00 	mov.w	sl, #0
 800a026:	e7ae      	b.n	8009f86 <__gethex+0x202>
 800a028:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a02c:	42a8      	cmp	r0, r5
 800a02e:	dd72      	ble.n	800a116 <__gethex+0x392>
 800a030:	1b45      	subs	r5, r0, r5
 800a032:	42ae      	cmp	r6, r5
 800a034:	dc36      	bgt.n	800a0a4 <__gethex+0x320>
 800a036:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d02a      	beq.n	800a094 <__gethex+0x310>
 800a03e:	2b03      	cmp	r3, #3
 800a040:	d02c      	beq.n	800a09c <__gethex+0x318>
 800a042:	2b01      	cmp	r3, #1
 800a044:	d11c      	bne.n	800a080 <__gethex+0x2fc>
 800a046:	42ae      	cmp	r6, r5
 800a048:	d11a      	bne.n	800a080 <__gethex+0x2fc>
 800a04a:	2e01      	cmp	r6, #1
 800a04c:	d112      	bne.n	800a074 <__gethex+0x2f0>
 800a04e:	9a04      	ldr	r2, [sp, #16]
 800a050:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a054:	6013      	str	r3, [r2, #0]
 800a056:	2301      	movs	r3, #1
 800a058:	6123      	str	r3, [r4, #16]
 800a05a:	f8c9 3000 	str.w	r3, [r9]
 800a05e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a060:	2762      	movs	r7, #98	; 0x62
 800a062:	601c      	str	r4, [r3, #0]
 800a064:	e723      	b.n	8009eae <__gethex+0x12a>
 800a066:	bf00      	nop
 800a068:	0800c128 	.word	0x0800c128
 800a06c:	0800c0b0 	.word	0x0800c0b0
 800a070:	0800c0c1 	.word	0x0800c0c1
 800a074:	1e71      	subs	r1, r6, #1
 800a076:	4620      	mov	r0, r4
 800a078:	f000 fe55 	bl	800ad26 <__any_on>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	d1e6      	bne.n	800a04e <__gethex+0x2ca>
 800a080:	ee18 0a10 	vmov	r0, s16
 800a084:	4621      	mov	r1, r4
 800a086:	f000 f9f1 	bl	800a46c <_Bfree>
 800a08a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a08c:	2300      	movs	r3, #0
 800a08e:	6013      	str	r3, [r2, #0]
 800a090:	2750      	movs	r7, #80	; 0x50
 800a092:	e70c      	b.n	8009eae <__gethex+0x12a>
 800a094:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1f2      	bne.n	800a080 <__gethex+0x2fc>
 800a09a:	e7d8      	b.n	800a04e <__gethex+0x2ca>
 800a09c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1d5      	bne.n	800a04e <__gethex+0x2ca>
 800a0a2:	e7ed      	b.n	800a080 <__gethex+0x2fc>
 800a0a4:	1e6f      	subs	r7, r5, #1
 800a0a6:	f1ba 0f00 	cmp.w	sl, #0
 800a0aa:	d131      	bne.n	800a110 <__gethex+0x38c>
 800a0ac:	b127      	cbz	r7, 800a0b8 <__gethex+0x334>
 800a0ae:	4639      	mov	r1, r7
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f000 fe38 	bl	800ad26 <__any_on>
 800a0b6:	4682      	mov	sl, r0
 800a0b8:	117b      	asrs	r3, r7, #5
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a0c0:	f007 071f 	and.w	r7, r7, #31
 800a0c4:	fa01 f707 	lsl.w	r7, r1, r7
 800a0c8:	421f      	tst	r7, r3
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	bf18      	it	ne
 800a0d0:	f04a 0a02 	orrne.w	sl, sl, #2
 800a0d4:	1b76      	subs	r6, r6, r5
 800a0d6:	f7ff fded 	bl	8009cb4 <rshift>
 800a0da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a0de:	2702      	movs	r7, #2
 800a0e0:	f1ba 0f00 	cmp.w	sl, #0
 800a0e4:	d048      	beq.n	800a178 <__gethex+0x3f4>
 800a0e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d015      	beq.n	800a11a <__gethex+0x396>
 800a0ee:	2b03      	cmp	r3, #3
 800a0f0:	d017      	beq.n	800a122 <__gethex+0x39e>
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d109      	bne.n	800a10a <__gethex+0x386>
 800a0f6:	f01a 0f02 	tst.w	sl, #2
 800a0fa:	d006      	beq.n	800a10a <__gethex+0x386>
 800a0fc:	f8d9 0000 	ldr.w	r0, [r9]
 800a100:	ea4a 0a00 	orr.w	sl, sl, r0
 800a104:	f01a 0f01 	tst.w	sl, #1
 800a108:	d10e      	bne.n	800a128 <__gethex+0x3a4>
 800a10a:	f047 0710 	orr.w	r7, r7, #16
 800a10e:	e033      	b.n	800a178 <__gethex+0x3f4>
 800a110:	f04f 0a01 	mov.w	sl, #1
 800a114:	e7d0      	b.n	800a0b8 <__gethex+0x334>
 800a116:	2701      	movs	r7, #1
 800a118:	e7e2      	b.n	800a0e0 <__gethex+0x35c>
 800a11a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a11c:	f1c3 0301 	rsb	r3, r3, #1
 800a120:	9315      	str	r3, [sp, #84]	; 0x54
 800a122:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a124:	2b00      	cmp	r3, #0
 800a126:	d0f0      	beq.n	800a10a <__gethex+0x386>
 800a128:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a12c:	f104 0314 	add.w	r3, r4, #20
 800a130:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a134:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a138:	f04f 0c00 	mov.w	ip, #0
 800a13c:	4618      	mov	r0, r3
 800a13e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a142:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a146:	d01c      	beq.n	800a182 <__gethex+0x3fe>
 800a148:	3201      	adds	r2, #1
 800a14a:	6002      	str	r2, [r0, #0]
 800a14c:	2f02      	cmp	r7, #2
 800a14e:	f104 0314 	add.w	r3, r4, #20
 800a152:	d13f      	bne.n	800a1d4 <__gethex+0x450>
 800a154:	f8d8 2000 	ldr.w	r2, [r8]
 800a158:	3a01      	subs	r2, #1
 800a15a:	42b2      	cmp	r2, r6
 800a15c:	d10a      	bne.n	800a174 <__gethex+0x3f0>
 800a15e:	1171      	asrs	r1, r6, #5
 800a160:	2201      	movs	r2, #1
 800a162:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a166:	f006 061f 	and.w	r6, r6, #31
 800a16a:	fa02 f606 	lsl.w	r6, r2, r6
 800a16e:	421e      	tst	r6, r3
 800a170:	bf18      	it	ne
 800a172:	4617      	movne	r7, r2
 800a174:	f047 0720 	orr.w	r7, r7, #32
 800a178:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a17a:	601c      	str	r4, [r3, #0]
 800a17c:	9b04      	ldr	r3, [sp, #16]
 800a17e:	601d      	str	r5, [r3, #0]
 800a180:	e695      	b.n	8009eae <__gethex+0x12a>
 800a182:	4299      	cmp	r1, r3
 800a184:	f843 cc04 	str.w	ip, [r3, #-4]
 800a188:	d8d8      	bhi.n	800a13c <__gethex+0x3b8>
 800a18a:	68a3      	ldr	r3, [r4, #8]
 800a18c:	459b      	cmp	fp, r3
 800a18e:	db19      	blt.n	800a1c4 <__gethex+0x440>
 800a190:	6861      	ldr	r1, [r4, #4]
 800a192:	ee18 0a10 	vmov	r0, s16
 800a196:	3101      	adds	r1, #1
 800a198:	f000 f928 	bl	800a3ec <_Balloc>
 800a19c:	4681      	mov	r9, r0
 800a19e:	b918      	cbnz	r0, 800a1a8 <__gethex+0x424>
 800a1a0:	4b1a      	ldr	r3, [pc, #104]	; (800a20c <__gethex+0x488>)
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	2184      	movs	r1, #132	; 0x84
 800a1a6:	e6a8      	b.n	8009efa <__gethex+0x176>
 800a1a8:	6922      	ldr	r2, [r4, #16]
 800a1aa:	3202      	adds	r2, #2
 800a1ac:	f104 010c 	add.w	r1, r4, #12
 800a1b0:	0092      	lsls	r2, r2, #2
 800a1b2:	300c      	adds	r0, #12
 800a1b4:	f000 f90c 	bl	800a3d0 <memcpy>
 800a1b8:	4621      	mov	r1, r4
 800a1ba:	ee18 0a10 	vmov	r0, s16
 800a1be:	f000 f955 	bl	800a46c <_Bfree>
 800a1c2:	464c      	mov	r4, r9
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	1c5a      	adds	r2, r3, #1
 800a1c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1cc:	6122      	str	r2, [r4, #16]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	615a      	str	r2, [r3, #20]
 800a1d2:	e7bb      	b.n	800a14c <__gethex+0x3c8>
 800a1d4:	6922      	ldr	r2, [r4, #16]
 800a1d6:	455a      	cmp	r2, fp
 800a1d8:	dd0b      	ble.n	800a1f2 <__gethex+0x46e>
 800a1da:	2101      	movs	r1, #1
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f7ff fd69 	bl	8009cb4 <rshift>
 800a1e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1e6:	3501      	adds	r5, #1
 800a1e8:	42ab      	cmp	r3, r5
 800a1ea:	f6ff aed0 	blt.w	8009f8e <__gethex+0x20a>
 800a1ee:	2701      	movs	r7, #1
 800a1f0:	e7c0      	b.n	800a174 <__gethex+0x3f0>
 800a1f2:	f016 061f 	ands.w	r6, r6, #31
 800a1f6:	d0fa      	beq.n	800a1ee <__gethex+0x46a>
 800a1f8:	4453      	add	r3, sl
 800a1fa:	f1c6 0620 	rsb	r6, r6, #32
 800a1fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a202:	f000 f9e5 	bl	800a5d0 <__hi0bits>
 800a206:	42b0      	cmp	r0, r6
 800a208:	dbe7      	blt.n	800a1da <__gethex+0x456>
 800a20a:	e7f0      	b.n	800a1ee <__gethex+0x46a>
 800a20c:	0800c0b0 	.word	0x0800c0b0

0800a210 <L_shift>:
 800a210:	f1c2 0208 	rsb	r2, r2, #8
 800a214:	0092      	lsls	r2, r2, #2
 800a216:	b570      	push	{r4, r5, r6, lr}
 800a218:	f1c2 0620 	rsb	r6, r2, #32
 800a21c:	6843      	ldr	r3, [r0, #4]
 800a21e:	6804      	ldr	r4, [r0, #0]
 800a220:	fa03 f506 	lsl.w	r5, r3, r6
 800a224:	432c      	orrs	r4, r5
 800a226:	40d3      	lsrs	r3, r2
 800a228:	6004      	str	r4, [r0, #0]
 800a22a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a22e:	4288      	cmp	r0, r1
 800a230:	d3f4      	bcc.n	800a21c <L_shift+0xc>
 800a232:	bd70      	pop	{r4, r5, r6, pc}

0800a234 <__match>:
 800a234:	b530      	push	{r4, r5, lr}
 800a236:	6803      	ldr	r3, [r0, #0]
 800a238:	3301      	adds	r3, #1
 800a23a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a23e:	b914      	cbnz	r4, 800a246 <__match+0x12>
 800a240:	6003      	str	r3, [r0, #0]
 800a242:	2001      	movs	r0, #1
 800a244:	bd30      	pop	{r4, r5, pc}
 800a246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a24a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a24e:	2d19      	cmp	r5, #25
 800a250:	bf98      	it	ls
 800a252:	3220      	addls	r2, #32
 800a254:	42a2      	cmp	r2, r4
 800a256:	d0f0      	beq.n	800a23a <__match+0x6>
 800a258:	2000      	movs	r0, #0
 800a25a:	e7f3      	b.n	800a244 <__match+0x10>

0800a25c <__hexnan>:
 800a25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a260:	680b      	ldr	r3, [r1, #0]
 800a262:	115e      	asrs	r6, r3, #5
 800a264:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a268:	f013 031f 	ands.w	r3, r3, #31
 800a26c:	b087      	sub	sp, #28
 800a26e:	bf18      	it	ne
 800a270:	3604      	addne	r6, #4
 800a272:	2500      	movs	r5, #0
 800a274:	1f37      	subs	r7, r6, #4
 800a276:	4690      	mov	r8, r2
 800a278:	6802      	ldr	r2, [r0, #0]
 800a27a:	9301      	str	r3, [sp, #4]
 800a27c:	4682      	mov	sl, r0
 800a27e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a282:	46b9      	mov	r9, r7
 800a284:	463c      	mov	r4, r7
 800a286:	9502      	str	r5, [sp, #8]
 800a288:	46ab      	mov	fp, r5
 800a28a:	7851      	ldrb	r1, [r2, #1]
 800a28c:	1c53      	adds	r3, r2, #1
 800a28e:	9303      	str	r3, [sp, #12]
 800a290:	b341      	cbz	r1, 800a2e4 <__hexnan+0x88>
 800a292:	4608      	mov	r0, r1
 800a294:	9205      	str	r2, [sp, #20]
 800a296:	9104      	str	r1, [sp, #16]
 800a298:	f7ff fd5e 	bl	8009d58 <__hexdig_fun>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d14f      	bne.n	800a340 <__hexnan+0xe4>
 800a2a0:	9904      	ldr	r1, [sp, #16]
 800a2a2:	9a05      	ldr	r2, [sp, #20]
 800a2a4:	2920      	cmp	r1, #32
 800a2a6:	d818      	bhi.n	800a2da <__hexnan+0x7e>
 800a2a8:	9b02      	ldr	r3, [sp, #8]
 800a2aa:	459b      	cmp	fp, r3
 800a2ac:	dd13      	ble.n	800a2d6 <__hexnan+0x7a>
 800a2ae:	454c      	cmp	r4, r9
 800a2b0:	d206      	bcs.n	800a2c0 <__hexnan+0x64>
 800a2b2:	2d07      	cmp	r5, #7
 800a2b4:	dc04      	bgt.n	800a2c0 <__hexnan+0x64>
 800a2b6:	462a      	mov	r2, r5
 800a2b8:	4649      	mov	r1, r9
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f7ff ffa8 	bl	800a210 <L_shift>
 800a2c0:	4544      	cmp	r4, r8
 800a2c2:	d950      	bls.n	800a366 <__hexnan+0x10a>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f1a4 0904 	sub.w	r9, r4, #4
 800a2ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2ce:	f8cd b008 	str.w	fp, [sp, #8]
 800a2d2:	464c      	mov	r4, r9
 800a2d4:	461d      	mov	r5, r3
 800a2d6:	9a03      	ldr	r2, [sp, #12]
 800a2d8:	e7d7      	b.n	800a28a <__hexnan+0x2e>
 800a2da:	2929      	cmp	r1, #41	; 0x29
 800a2dc:	d156      	bne.n	800a38c <__hexnan+0x130>
 800a2de:	3202      	adds	r2, #2
 800a2e0:	f8ca 2000 	str.w	r2, [sl]
 800a2e4:	f1bb 0f00 	cmp.w	fp, #0
 800a2e8:	d050      	beq.n	800a38c <__hexnan+0x130>
 800a2ea:	454c      	cmp	r4, r9
 800a2ec:	d206      	bcs.n	800a2fc <__hexnan+0xa0>
 800a2ee:	2d07      	cmp	r5, #7
 800a2f0:	dc04      	bgt.n	800a2fc <__hexnan+0xa0>
 800a2f2:	462a      	mov	r2, r5
 800a2f4:	4649      	mov	r1, r9
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f7ff ff8a 	bl	800a210 <L_shift>
 800a2fc:	4544      	cmp	r4, r8
 800a2fe:	d934      	bls.n	800a36a <__hexnan+0x10e>
 800a300:	f1a8 0204 	sub.w	r2, r8, #4
 800a304:	4623      	mov	r3, r4
 800a306:	f853 1b04 	ldr.w	r1, [r3], #4
 800a30a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a30e:	429f      	cmp	r7, r3
 800a310:	d2f9      	bcs.n	800a306 <__hexnan+0xaa>
 800a312:	1b3b      	subs	r3, r7, r4
 800a314:	f023 0303 	bic.w	r3, r3, #3
 800a318:	3304      	adds	r3, #4
 800a31a:	3401      	adds	r4, #1
 800a31c:	3e03      	subs	r6, #3
 800a31e:	42b4      	cmp	r4, r6
 800a320:	bf88      	it	hi
 800a322:	2304      	movhi	r3, #4
 800a324:	4443      	add	r3, r8
 800a326:	2200      	movs	r2, #0
 800a328:	f843 2b04 	str.w	r2, [r3], #4
 800a32c:	429f      	cmp	r7, r3
 800a32e:	d2fb      	bcs.n	800a328 <__hexnan+0xcc>
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	b91b      	cbnz	r3, 800a33c <__hexnan+0xe0>
 800a334:	4547      	cmp	r7, r8
 800a336:	d127      	bne.n	800a388 <__hexnan+0x12c>
 800a338:	2301      	movs	r3, #1
 800a33a:	603b      	str	r3, [r7, #0]
 800a33c:	2005      	movs	r0, #5
 800a33e:	e026      	b.n	800a38e <__hexnan+0x132>
 800a340:	3501      	adds	r5, #1
 800a342:	2d08      	cmp	r5, #8
 800a344:	f10b 0b01 	add.w	fp, fp, #1
 800a348:	dd06      	ble.n	800a358 <__hexnan+0xfc>
 800a34a:	4544      	cmp	r4, r8
 800a34c:	d9c3      	bls.n	800a2d6 <__hexnan+0x7a>
 800a34e:	2300      	movs	r3, #0
 800a350:	f844 3c04 	str.w	r3, [r4, #-4]
 800a354:	2501      	movs	r5, #1
 800a356:	3c04      	subs	r4, #4
 800a358:	6822      	ldr	r2, [r4, #0]
 800a35a:	f000 000f 	and.w	r0, r0, #15
 800a35e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a362:	6022      	str	r2, [r4, #0]
 800a364:	e7b7      	b.n	800a2d6 <__hexnan+0x7a>
 800a366:	2508      	movs	r5, #8
 800a368:	e7b5      	b.n	800a2d6 <__hexnan+0x7a>
 800a36a:	9b01      	ldr	r3, [sp, #4]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d0df      	beq.n	800a330 <__hexnan+0xd4>
 800a370:	f04f 32ff 	mov.w	r2, #4294967295
 800a374:	f1c3 0320 	rsb	r3, r3, #32
 800a378:	fa22 f303 	lsr.w	r3, r2, r3
 800a37c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a380:	401a      	ands	r2, r3
 800a382:	f846 2c04 	str.w	r2, [r6, #-4]
 800a386:	e7d3      	b.n	800a330 <__hexnan+0xd4>
 800a388:	3f04      	subs	r7, #4
 800a38a:	e7d1      	b.n	800a330 <__hexnan+0xd4>
 800a38c:	2004      	movs	r0, #4
 800a38e:	b007      	add	sp, #28
 800a390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a394 <_localeconv_r>:
 800a394:	4800      	ldr	r0, [pc, #0]	; (800a398 <_localeconv_r+0x4>)
 800a396:	4770      	bx	lr
 800a398:	20000190 	.word	0x20000190

0800a39c <malloc>:
 800a39c:	4b02      	ldr	r3, [pc, #8]	; (800a3a8 <malloc+0xc>)
 800a39e:	4601      	mov	r1, r0
 800a3a0:	6818      	ldr	r0, [r3, #0]
 800a3a2:	f000 bd63 	b.w	800ae6c <_malloc_r>
 800a3a6:	bf00      	nop
 800a3a8:	20000038 	.word	0x20000038

0800a3ac <__ascii_mbtowc>:
 800a3ac:	b082      	sub	sp, #8
 800a3ae:	b901      	cbnz	r1, 800a3b2 <__ascii_mbtowc+0x6>
 800a3b0:	a901      	add	r1, sp, #4
 800a3b2:	b142      	cbz	r2, 800a3c6 <__ascii_mbtowc+0x1a>
 800a3b4:	b14b      	cbz	r3, 800a3ca <__ascii_mbtowc+0x1e>
 800a3b6:	7813      	ldrb	r3, [r2, #0]
 800a3b8:	600b      	str	r3, [r1, #0]
 800a3ba:	7812      	ldrb	r2, [r2, #0]
 800a3bc:	1e10      	subs	r0, r2, #0
 800a3be:	bf18      	it	ne
 800a3c0:	2001      	movne	r0, #1
 800a3c2:	b002      	add	sp, #8
 800a3c4:	4770      	bx	lr
 800a3c6:	4610      	mov	r0, r2
 800a3c8:	e7fb      	b.n	800a3c2 <__ascii_mbtowc+0x16>
 800a3ca:	f06f 0001 	mvn.w	r0, #1
 800a3ce:	e7f8      	b.n	800a3c2 <__ascii_mbtowc+0x16>

0800a3d0 <memcpy>:
 800a3d0:	440a      	add	r2, r1
 800a3d2:	4291      	cmp	r1, r2
 800a3d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3d8:	d100      	bne.n	800a3dc <memcpy+0xc>
 800a3da:	4770      	bx	lr
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3e6:	4291      	cmp	r1, r2
 800a3e8:	d1f9      	bne.n	800a3de <memcpy+0xe>
 800a3ea:	bd10      	pop	{r4, pc}

0800a3ec <_Balloc>:
 800a3ec:	b570      	push	{r4, r5, r6, lr}
 800a3ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	460d      	mov	r5, r1
 800a3f4:	b976      	cbnz	r6, 800a414 <_Balloc+0x28>
 800a3f6:	2010      	movs	r0, #16
 800a3f8:	f7ff ffd0 	bl	800a39c <malloc>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	6260      	str	r0, [r4, #36]	; 0x24
 800a400:	b920      	cbnz	r0, 800a40c <_Balloc+0x20>
 800a402:	4b18      	ldr	r3, [pc, #96]	; (800a464 <_Balloc+0x78>)
 800a404:	4818      	ldr	r0, [pc, #96]	; (800a468 <_Balloc+0x7c>)
 800a406:	2166      	movs	r1, #102	; 0x66
 800a408:	f000 ff3c 	bl	800b284 <__assert_func>
 800a40c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a410:	6006      	str	r6, [r0, #0]
 800a412:	60c6      	str	r6, [r0, #12]
 800a414:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a416:	68f3      	ldr	r3, [r6, #12]
 800a418:	b183      	cbz	r3, 800a43c <_Balloc+0x50>
 800a41a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a422:	b9b8      	cbnz	r0, 800a454 <_Balloc+0x68>
 800a424:	2101      	movs	r1, #1
 800a426:	fa01 f605 	lsl.w	r6, r1, r5
 800a42a:	1d72      	adds	r2, r6, #5
 800a42c:	0092      	lsls	r2, r2, #2
 800a42e:	4620      	mov	r0, r4
 800a430:	f000 fc9a 	bl	800ad68 <_calloc_r>
 800a434:	b160      	cbz	r0, 800a450 <_Balloc+0x64>
 800a436:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a43a:	e00e      	b.n	800a45a <_Balloc+0x6e>
 800a43c:	2221      	movs	r2, #33	; 0x21
 800a43e:	2104      	movs	r1, #4
 800a440:	4620      	mov	r0, r4
 800a442:	f000 fc91 	bl	800ad68 <_calloc_r>
 800a446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a448:	60f0      	str	r0, [r6, #12]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1e4      	bne.n	800a41a <_Balloc+0x2e>
 800a450:	2000      	movs	r0, #0
 800a452:	bd70      	pop	{r4, r5, r6, pc}
 800a454:	6802      	ldr	r2, [r0, #0]
 800a456:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a45a:	2300      	movs	r3, #0
 800a45c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a460:	e7f7      	b.n	800a452 <_Balloc+0x66>
 800a462:	bf00      	nop
 800a464:	0800c03e 	.word	0x0800c03e
 800a468:	0800c13c 	.word	0x0800c13c

0800a46c <_Bfree>:
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a470:	4605      	mov	r5, r0
 800a472:	460c      	mov	r4, r1
 800a474:	b976      	cbnz	r6, 800a494 <_Bfree+0x28>
 800a476:	2010      	movs	r0, #16
 800a478:	f7ff ff90 	bl	800a39c <malloc>
 800a47c:	4602      	mov	r2, r0
 800a47e:	6268      	str	r0, [r5, #36]	; 0x24
 800a480:	b920      	cbnz	r0, 800a48c <_Bfree+0x20>
 800a482:	4b09      	ldr	r3, [pc, #36]	; (800a4a8 <_Bfree+0x3c>)
 800a484:	4809      	ldr	r0, [pc, #36]	; (800a4ac <_Bfree+0x40>)
 800a486:	218a      	movs	r1, #138	; 0x8a
 800a488:	f000 fefc 	bl	800b284 <__assert_func>
 800a48c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a490:	6006      	str	r6, [r0, #0]
 800a492:	60c6      	str	r6, [r0, #12]
 800a494:	b13c      	cbz	r4, 800a4a6 <_Bfree+0x3a>
 800a496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a498:	6862      	ldr	r2, [r4, #4]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4a0:	6021      	str	r1, [r4, #0]
 800a4a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
 800a4a8:	0800c03e 	.word	0x0800c03e
 800a4ac:	0800c13c 	.word	0x0800c13c

0800a4b0 <__multadd>:
 800a4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b4:	690d      	ldr	r5, [r1, #16]
 800a4b6:	4607      	mov	r7, r0
 800a4b8:	460c      	mov	r4, r1
 800a4ba:	461e      	mov	r6, r3
 800a4bc:	f101 0c14 	add.w	ip, r1, #20
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	f8dc 3000 	ldr.w	r3, [ip]
 800a4c6:	b299      	uxth	r1, r3
 800a4c8:	fb02 6101 	mla	r1, r2, r1, r6
 800a4cc:	0c1e      	lsrs	r6, r3, #16
 800a4ce:	0c0b      	lsrs	r3, r1, #16
 800a4d0:	fb02 3306 	mla	r3, r2, r6, r3
 800a4d4:	b289      	uxth	r1, r1
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4dc:	4285      	cmp	r5, r0
 800a4de:	f84c 1b04 	str.w	r1, [ip], #4
 800a4e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4e6:	dcec      	bgt.n	800a4c2 <__multadd+0x12>
 800a4e8:	b30e      	cbz	r6, 800a52e <__multadd+0x7e>
 800a4ea:	68a3      	ldr	r3, [r4, #8]
 800a4ec:	42ab      	cmp	r3, r5
 800a4ee:	dc19      	bgt.n	800a524 <__multadd+0x74>
 800a4f0:	6861      	ldr	r1, [r4, #4]
 800a4f2:	4638      	mov	r0, r7
 800a4f4:	3101      	adds	r1, #1
 800a4f6:	f7ff ff79 	bl	800a3ec <_Balloc>
 800a4fa:	4680      	mov	r8, r0
 800a4fc:	b928      	cbnz	r0, 800a50a <__multadd+0x5a>
 800a4fe:	4602      	mov	r2, r0
 800a500:	4b0c      	ldr	r3, [pc, #48]	; (800a534 <__multadd+0x84>)
 800a502:	480d      	ldr	r0, [pc, #52]	; (800a538 <__multadd+0x88>)
 800a504:	21b5      	movs	r1, #181	; 0xb5
 800a506:	f000 febd 	bl	800b284 <__assert_func>
 800a50a:	6922      	ldr	r2, [r4, #16]
 800a50c:	3202      	adds	r2, #2
 800a50e:	f104 010c 	add.w	r1, r4, #12
 800a512:	0092      	lsls	r2, r2, #2
 800a514:	300c      	adds	r0, #12
 800a516:	f7ff ff5b 	bl	800a3d0 <memcpy>
 800a51a:	4621      	mov	r1, r4
 800a51c:	4638      	mov	r0, r7
 800a51e:	f7ff ffa5 	bl	800a46c <_Bfree>
 800a522:	4644      	mov	r4, r8
 800a524:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a528:	3501      	adds	r5, #1
 800a52a:	615e      	str	r6, [r3, #20]
 800a52c:	6125      	str	r5, [r4, #16]
 800a52e:	4620      	mov	r0, r4
 800a530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a534:	0800c0b0 	.word	0x0800c0b0
 800a538:	0800c13c 	.word	0x0800c13c

0800a53c <__s2b>:
 800a53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a540:	460c      	mov	r4, r1
 800a542:	4615      	mov	r5, r2
 800a544:	461f      	mov	r7, r3
 800a546:	2209      	movs	r2, #9
 800a548:	3308      	adds	r3, #8
 800a54a:	4606      	mov	r6, r0
 800a54c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a550:	2100      	movs	r1, #0
 800a552:	2201      	movs	r2, #1
 800a554:	429a      	cmp	r2, r3
 800a556:	db09      	blt.n	800a56c <__s2b+0x30>
 800a558:	4630      	mov	r0, r6
 800a55a:	f7ff ff47 	bl	800a3ec <_Balloc>
 800a55e:	b940      	cbnz	r0, 800a572 <__s2b+0x36>
 800a560:	4602      	mov	r2, r0
 800a562:	4b19      	ldr	r3, [pc, #100]	; (800a5c8 <__s2b+0x8c>)
 800a564:	4819      	ldr	r0, [pc, #100]	; (800a5cc <__s2b+0x90>)
 800a566:	21ce      	movs	r1, #206	; 0xce
 800a568:	f000 fe8c 	bl	800b284 <__assert_func>
 800a56c:	0052      	lsls	r2, r2, #1
 800a56e:	3101      	adds	r1, #1
 800a570:	e7f0      	b.n	800a554 <__s2b+0x18>
 800a572:	9b08      	ldr	r3, [sp, #32]
 800a574:	6143      	str	r3, [r0, #20]
 800a576:	2d09      	cmp	r5, #9
 800a578:	f04f 0301 	mov.w	r3, #1
 800a57c:	6103      	str	r3, [r0, #16]
 800a57e:	dd16      	ble.n	800a5ae <__s2b+0x72>
 800a580:	f104 0909 	add.w	r9, r4, #9
 800a584:	46c8      	mov	r8, r9
 800a586:	442c      	add	r4, r5
 800a588:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a58c:	4601      	mov	r1, r0
 800a58e:	3b30      	subs	r3, #48	; 0x30
 800a590:	220a      	movs	r2, #10
 800a592:	4630      	mov	r0, r6
 800a594:	f7ff ff8c 	bl	800a4b0 <__multadd>
 800a598:	45a0      	cmp	r8, r4
 800a59a:	d1f5      	bne.n	800a588 <__s2b+0x4c>
 800a59c:	f1a5 0408 	sub.w	r4, r5, #8
 800a5a0:	444c      	add	r4, r9
 800a5a2:	1b2d      	subs	r5, r5, r4
 800a5a4:	1963      	adds	r3, r4, r5
 800a5a6:	42bb      	cmp	r3, r7
 800a5a8:	db04      	blt.n	800a5b4 <__s2b+0x78>
 800a5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ae:	340a      	adds	r4, #10
 800a5b0:	2509      	movs	r5, #9
 800a5b2:	e7f6      	b.n	800a5a2 <__s2b+0x66>
 800a5b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5b8:	4601      	mov	r1, r0
 800a5ba:	3b30      	subs	r3, #48	; 0x30
 800a5bc:	220a      	movs	r2, #10
 800a5be:	4630      	mov	r0, r6
 800a5c0:	f7ff ff76 	bl	800a4b0 <__multadd>
 800a5c4:	e7ee      	b.n	800a5a4 <__s2b+0x68>
 800a5c6:	bf00      	nop
 800a5c8:	0800c0b0 	.word	0x0800c0b0
 800a5cc:	0800c13c 	.word	0x0800c13c

0800a5d0 <__hi0bits>:
 800a5d0:	0c03      	lsrs	r3, r0, #16
 800a5d2:	041b      	lsls	r3, r3, #16
 800a5d4:	b9d3      	cbnz	r3, 800a60c <__hi0bits+0x3c>
 800a5d6:	0400      	lsls	r0, r0, #16
 800a5d8:	2310      	movs	r3, #16
 800a5da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a5de:	bf04      	itt	eq
 800a5e0:	0200      	lsleq	r0, r0, #8
 800a5e2:	3308      	addeq	r3, #8
 800a5e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a5e8:	bf04      	itt	eq
 800a5ea:	0100      	lsleq	r0, r0, #4
 800a5ec:	3304      	addeq	r3, #4
 800a5ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5f2:	bf04      	itt	eq
 800a5f4:	0080      	lsleq	r0, r0, #2
 800a5f6:	3302      	addeq	r3, #2
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	db05      	blt.n	800a608 <__hi0bits+0x38>
 800a5fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a600:	f103 0301 	add.w	r3, r3, #1
 800a604:	bf08      	it	eq
 800a606:	2320      	moveq	r3, #32
 800a608:	4618      	mov	r0, r3
 800a60a:	4770      	bx	lr
 800a60c:	2300      	movs	r3, #0
 800a60e:	e7e4      	b.n	800a5da <__hi0bits+0xa>

0800a610 <__lo0bits>:
 800a610:	6803      	ldr	r3, [r0, #0]
 800a612:	f013 0207 	ands.w	r2, r3, #7
 800a616:	4601      	mov	r1, r0
 800a618:	d00b      	beq.n	800a632 <__lo0bits+0x22>
 800a61a:	07da      	lsls	r2, r3, #31
 800a61c:	d423      	bmi.n	800a666 <__lo0bits+0x56>
 800a61e:	0798      	lsls	r0, r3, #30
 800a620:	bf49      	itett	mi
 800a622:	085b      	lsrmi	r3, r3, #1
 800a624:	089b      	lsrpl	r3, r3, #2
 800a626:	2001      	movmi	r0, #1
 800a628:	600b      	strmi	r3, [r1, #0]
 800a62a:	bf5c      	itt	pl
 800a62c:	600b      	strpl	r3, [r1, #0]
 800a62e:	2002      	movpl	r0, #2
 800a630:	4770      	bx	lr
 800a632:	b298      	uxth	r0, r3
 800a634:	b9a8      	cbnz	r0, 800a662 <__lo0bits+0x52>
 800a636:	0c1b      	lsrs	r3, r3, #16
 800a638:	2010      	movs	r0, #16
 800a63a:	b2da      	uxtb	r2, r3
 800a63c:	b90a      	cbnz	r2, 800a642 <__lo0bits+0x32>
 800a63e:	3008      	adds	r0, #8
 800a640:	0a1b      	lsrs	r3, r3, #8
 800a642:	071a      	lsls	r2, r3, #28
 800a644:	bf04      	itt	eq
 800a646:	091b      	lsreq	r3, r3, #4
 800a648:	3004      	addeq	r0, #4
 800a64a:	079a      	lsls	r2, r3, #30
 800a64c:	bf04      	itt	eq
 800a64e:	089b      	lsreq	r3, r3, #2
 800a650:	3002      	addeq	r0, #2
 800a652:	07da      	lsls	r2, r3, #31
 800a654:	d403      	bmi.n	800a65e <__lo0bits+0x4e>
 800a656:	085b      	lsrs	r3, r3, #1
 800a658:	f100 0001 	add.w	r0, r0, #1
 800a65c:	d005      	beq.n	800a66a <__lo0bits+0x5a>
 800a65e:	600b      	str	r3, [r1, #0]
 800a660:	4770      	bx	lr
 800a662:	4610      	mov	r0, r2
 800a664:	e7e9      	b.n	800a63a <__lo0bits+0x2a>
 800a666:	2000      	movs	r0, #0
 800a668:	4770      	bx	lr
 800a66a:	2020      	movs	r0, #32
 800a66c:	4770      	bx	lr
	...

0800a670 <__i2b>:
 800a670:	b510      	push	{r4, lr}
 800a672:	460c      	mov	r4, r1
 800a674:	2101      	movs	r1, #1
 800a676:	f7ff feb9 	bl	800a3ec <_Balloc>
 800a67a:	4602      	mov	r2, r0
 800a67c:	b928      	cbnz	r0, 800a68a <__i2b+0x1a>
 800a67e:	4b05      	ldr	r3, [pc, #20]	; (800a694 <__i2b+0x24>)
 800a680:	4805      	ldr	r0, [pc, #20]	; (800a698 <__i2b+0x28>)
 800a682:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a686:	f000 fdfd 	bl	800b284 <__assert_func>
 800a68a:	2301      	movs	r3, #1
 800a68c:	6144      	str	r4, [r0, #20]
 800a68e:	6103      	str	r3, [r0, #16]
 800a690:	bd10      	pop	{r4, pc}
 800a692:	bf00      	nop
 800a694:	0800c0b0 	.word	0x0800c0b0
 800a698:	0800c13c 	.word	0x0800c13c

0800a69c <__multiply>:
 800a69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	4691      	mov	r9, r2
 800a6a2:	690a      	ldr	r2, [r1, #16]
 800a6a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	bfb8      	it	lt
 800a6ac:	460b      	movlt	r3, r1
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	bfbc      	itt	lt
 800a6b2:	464c      	movlt	r4, r9
 800a6b4:	4699      	movlt	r9, r3
 800a6b6:	6927      	ldr	r7, [r4, #16]
 800a6b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6bc:	68a3      	ldr	r3, [r4, #8]
 800a6be:	6861      	ldr	r1, [r4, #4]
 800a6c0:	eb07 060a 	add.w	r6, r7, sl
 800a6c4:	42b3      	cmp	r3, r6
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	bfb8      	it	lt
 800a6ca:	3101      	addlt	r1, #1
 800a6cc:	f7ff fe8e 	bl	800a3ec <_Balloc>
 800a6d0:	b930      	cbnz	r0, 800a6e0 <__multiply+0x44>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	4b44      	ldr	r3, [pc, #272]	; (800a7e8 <__multiply+0x14c>)
 800a6d6:	4845      	ldr	r0, [pc, #276]	; (800a7ec <__multiply+0x150>)
 800a6d8:	f240 115d 	movw	r1, #349	; 0x15d
 800a6dc:	f000 fdd2 	bl	800b284 <__assert_func>
 800a6e0:	f100 0514 	add.w	r5, r0, #20
 800a6e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6e8:	462b      	mov	r3, r5
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	4543      	cmp	r3, r8
 800a6ee:	d321      	bcc.n	800a734 <__multiply+0x98>
 800a6f0:	f104 0314 	add.w	r3, r4, #20
 800a6f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a6f8:	f109 0314 	add.w	r3, r9, #20
 800a6fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a700:	9202      	str	r2, [sp, #8]
 800a702:	1b3a      	subs	r2, r7, r4
 800a704:	3a15      	subs	r2, #21
 800a706:	f022 0203 	bic.w	r2, r2, #3
 800a70a:	3204      	adds	r2, #4
 800a70c:	f104 0115 	add.w	r1, r4, #21
 800a710:	428f      	cmp	r7, r1
 800a712:	bf38      	it	cc
 800a714:	2204      	movcc	r2, #4
 800a716:	9201      	str	r2, [sp, #4]
 800a718:	9a02      	ldr	r2, [sp, #8]
 800a71a:	9303      	str	r3, [sp, #12]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d80c      	bhi.n	800a73a <__multiply+0x9e>
 800a720:	2e00      	cmp	r6, #0
 800a722:	dd03      	ble.n	800a72c <__multiply+0x90>
 800a724:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d05a      	beq.n	800a7e2 <__multiply+0x146>
 800a72c:	6106      	str	r6, [r0, #16]
 800a72e:	b005      	add	sp, #20
 800a730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a734:	f843 2b04 	str.w	r2, [r3], #4
 800a738:	e7d8      	b.n	800a6ec <__multiply+0x50>
 800a73a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a73e:	f1ba 0f00 	cmp.w	sl, #0
 800a742:	d024      	beq.n	800a78e <__multiply+0xf2>
 800a744:	f104 0e14 	add.w	lr, r4, #20
 800a748:	46a9      	mov	r9, r5
 800a74a:	f04f 0c00 	mov.w	ip, #0
 800a74e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a752:	f8d9 1000 	ldr.w	r1, [r9]
 800a756:	fa1f fb82 	uxth.w	fp, r2
 800a75a:	b289      	uxth	r1, r1
 800a75c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a760:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a764:	f8d9 2000 	ldr.w	r2, [r9]
 800a768:	4461      	add	r1, ip
 800a76a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a76e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a772:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a776:	b289      	uxth	r1, r1
 800a778:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a77c:	4577      	cmp	r7, lr
 800a77e:	f849 1b04 	str.w	r1, [r9], #4
 800a782:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a786:	d8e2      	bhi.n	800a74e <__multiply+0xb2>
 800a788:	9a01      	ldr	r2, [sp, #4]
 800a78a:	f845 c002 	str.w	ip, [r5, r2]
 800a78e:	9a03      	ldr	r2, [sp, #12]
 800a790:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a794:	3304      	adds	r3, #4
 800a796:	f1b9 0f00 	cmp.w	r9, #0
 800a79a:	d020      	beq.n	800a7de <__multiply+0x142>
 800a79c:	6829      	ldr	r1, [r5, #0]
 800a79e:	f104 0c14 	add.w	ip, r4, #20
 800a7a2:	46ae      	mov	lr, r5
 800a7a4:	f04f 0a00 	mov.w	sl, #0
 800a7a8:	f8bc b000 	ldrh.w	fp, [ip]
 800a7ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a7b0:	fb09 220b 	mla	r2, r9, fp, r2
 800a7b4:	4492      	add	sl, r2
 800a7b6:	b289      	uxth	r1, r1
 800a7b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a7bc:	f84e 1b04 	str.w	r1, [lr], #4
 800a7c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a7c4:	f8be 1000 	ldrh.w	r1, [lr]
 800a7c8:	0c12      	lsrs	r2, r2, #16
 800a7ca:	fb09 1102 	mla	r1, r9, r2, r1
 800a7ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a7d2:	4567      	cmp	r7, ip
 800a7d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7d8:	d8e6      	bhi.n	800a7a8 <__multiply+0x10c>
 800a7da:	9a01      	ldr	r2, [sp, #4]
 800a7dc:	50a9      	str	r1, [r5, r2]
 800a7de:	3504      	adds	r5, #4
 800a7e0:	e79a      	b.n	800a718 <__multiply+0x7c>
 800a7e2:	3e01      	subs	r6, #1
 800a7e4:	e79c      	b.n	800a720 <__multiply+0x84>
 800a7e6:	bf00      	nop
 800a7e8:	0800c0b0 	.word	0x0800c0b0
 800a7ec:	0800c13c 	.word	0x0800c13c

0800a7f0 <__pow5mult>:
 800a7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f4:	4615      	mov	r5, r2
 800a7f6:	f012 0203 	ands.w	r2, r2, #3
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	460f      	mov	r7, r1
 800a7fe:	d007      	beq.n	800a810 <__pow5mult+0x20>
 800a800:	4c25      	ldr	r4, [pc, #148]	; (800a898 <__pow5mult+0xa8>)
 800a802:	3a01      	subs	r2, #1
 800a804:	2300      	movs	r3, #0
 800a806:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a80a:	f7ff fe51 	bl	800a4b0 <__multadd>
 800a80e:	4607      	mov	r7, r0
 800a810:	10ad      	asrs	r5, r5, #2
 800a812:	d03d      	beq.n	800a890 <__pow5mult+0xa0>
 800a814:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a816:	b97c      	cbnz	r4, 800a838 <__pow5mult+0x48>
 800a818:	2010      	movs	r0, #16
 800a81a:	f7ff fdbf 	bl	800a39c <malloc>
 800a81e:	4602      	mov	r2, r0
 800a820:	6270      	str	r0, [r6, #36]	; 0x24
 800a822:	b928      	cbnz	r0, 800a830 <__pow5mult+0x40>
 800a824:	4b1d      	ldr	r3, [pc, #116]	; (800a89c <__pow5mult+0xac>)
 800a826:	481e      	ldr	r0, [pc, #120]	; (800a8a0 <__pow5mult+0xb0>)
 800a828:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a82c:	f000 fd2a 	bl	800b284 <__assert_func>
 800a830:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a834:	6004      	str	r4, [r0, #0]
 800a836:	60c4      	str	r4, [r0, #12]
 800a838:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a83c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a840:	b94c      	cbnz	r4, 800a856 <__pow5mult+0x66>
 800a842:	f240 2171 	movw	r1, #625	; 0x271
 800a846:	4630      	mov	r0, r6
 800a848:	f7ff ff12 	bl	800a670 <__i2b>
 800a84c:	2300      	movs	r3, #0
 800a84e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a852:	4604      	mov	r4, r0
 800a854:	6003      	str	r3, [r0, #0]
 800a856:	f04f 0900 	mov.w	r9, #0
 800a85a:	07eb      	lsls	r3, r5, #31
 800a85c:	d50a      	bpl.n	800a874 <__pow5mult+0x84>
 800a85e:	4639      	mov	r1, r7
 800a860:	4622      	mov	r2, r4
 800a862:	4630      	mov	r0, r6
 800a864:	f7ff ff1a 	bl	800a69c <__multiply>
 800a868:	4639      	mov	r1, r7
 800a86a:	4680      	mov	r8, r0
 800a86c:	4630      	mov	r0, r6
 800a86e:	f7ff fdfd 	bl	800a46c <_Bfree>
 800a872:	4647      	mov	r7, r8
 800a874:	106d      	asrs	r5, r5, #1
 800a876:	d00b      	beq.n	800a890 <__pow5mult+0xa0>
 800a878:	6820      	ldr	r0, [r4, #0]
 800a87a:	b938      	cbnz	r0, 800a88c <__pow5mult+0x9c>
 800a87c:	4622      	mov	r2, r4
 800a87e:	4621      	mov	r1, r4
 800a880:	4630      	mov	r0, r6
 800a882:	f7ff ff0b 	bl	800a69c <__multiply>
 800a886:	6020      	str	r0, [r4, #0]
 800a888:	f8c0 9000 	str.w	r9, [r0]
 800a88c:	4604      	mov	r4, r0
 800a88e:	e7e4      	b.n	800a85a <__pow5mult+0x6a>
 800a890:	4638      	mov	r0, r7
 800a892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a896:	bf00      	nop
 800a898:	0800c288 	.word	0x0800c288
 800a89c:	0800c03e 	.word	0x0800c03e
 800a8a0:	0800c13c 	.word	0x0800c13c

0800a8a4 <__lshift>:
 800a8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	6849      	ldr	r1, [r1, #4]
 800a8ac:	6923      	ldr	r3, [r4, #16]
 800a8ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8b2:	68a3      	ldr	r3, [r4, #8]
 800a8b4:	4607      	mov	r7, r0
 800a8b6:	4691      	mov	r9, r2
 800a8b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8bc:	f108 0601 	add.w	r6, r8, #1
 800a8c0:	42b3      	cmp	r3, r6
 800a8c2:	db0b      	blt.n	800a8dc <__lshift+0x38>
 800a8c4:	4638      	mov	r0, r7
 800a8c6:	f7ff fd91 	bl	800a3ec <_Balloc>
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	b948      	cbnz	r0, 800a8e2 <__lshift+0x3e>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	4b2a      	ldr	r3, [pc, #168]	; (800a97c <__lshift+0xd8>)
 800a8d2:	482b      	ldr	r0, [pc, #172]	; (800a980 <__lshift+0xdc>)
 800a8d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a8d8:	f000 fcd4 	bl	800b284 <__assert_func>
 800a8dc:	3101      	adds	r1, #1
 800a8de:	005b      	lsls	r3, r3, #1
 800a8e0:	e7ee      	b.n	800a8c0 <__lshift+0x1c>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	f100 0114 	add.w	r1, r0, #20
 800a8e8:	f100 0210 	add.w	r2, r0, #16
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	4553      	cmp	r3, sl
 800a8f0:	db37      	blt.n	800a962 <__lshift+0xbe>
 800a8f2:	6920      	ldr	r0, [r4, #16]
 800a8f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8f8:	f104 0314 	add.w	r3, r4, #20
 800a8fc:	f019 091f 	ands.w	r9, r9, #31
 800a900:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a904:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a908:	d02f      	beq.n	800a96a <__lshift+0xc6>
 800a90a:	f1c9 0e20 	rsb	lr, r9, #32
 800a90e:	468a      	mov	sl, r1
 800a910:	f04f 0c00 	mov.w	ip, #0
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	fa02 f209 	lsl.w	r2, r2, r9
 800a91a:	ea42 020c 	orr.w	r2, r2, ip
 800a91e:	f84a 2b04 	str.w	r2, [sl], #4
 800a922:	f853 2b04 	ldr.w	r2, [r3], #4
 800a926:	4298      	cmp	r0, r3
 800a928:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a92c:	d8f2      	bhi.n	800a914 <__lshift+0x70>
 800a92e:	1b03      	subs	r3, r0, r4
 800a930:	3b15      	subs	r3, #21
 800a932:	f023 0303 	bic.w	r3, r3, #3
 800a936:	3304      	adds	r3, #4
 800a938:	f104 0215 	add.w	r2, r4, #21
 800a93c:	4290      	cmp	r0, r2
 800a93e:	bf38      	it	cc
 800a940:	2304      	movcc	r3, #4
 800a942:	f841 c003 	str.w	ip, [r1, r3]
 800a946:	f1bc 0f00 	cmp.w	ip, #0
 800a94a:	d001      	beq.n	800a950 <__lshift+0xac>
 800a94c:	f108 0602 	add.w	r6, r8, #2
 800a950:	3e01      	subs	r6, #1
 800a952:	4638      	mov	r0, r7
 800a954:	612e      	str	r6, [r5, #16]
 800a956:	4621      	mov	r1, r4
 800a958:	f7ff fd88 	bl	800a46c <_Bfree>
 800a95c:	4628      	mov	r0, r5
 800a95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a962:	f842 0f04 	str.w	r0, [r2, #4]!
 800a966:	3301      	adds	r3, #1
 800a968:	e7c1      	b.n	800a8ee <__lshift+0x4a>
 800a96a:	3904      	subs	r1, #4
 800a96c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a970:	f841 2f04 	str.w	r2, [r1, #4]!
 800a974:	4298      	cmp	r0, r3
 800a976:	d8f9      	bhi.n	800a96c <__lshift+0xc8>
 800a978:	e7ea      	b.n	800a950 <__lshift+0xac>
 800a97a:	bf00      	nop
 800a97c:	0800c0b0 	.word	0x0800c0b0
 800a980:	0800c13c 	.word	0x0800c13c

0800a984 <__mcmp>:
 800a984:	b530      	push	{r4, r5, lr}
 800a986:	6902      	ldr	r2, [r0, #16]
 800a988:	690c      	ldr	r4, [r1, #16]
 800a98a:	1b12      	subs	r2, r2, r4
 800a98c:	d10e      	bne.n	800a9ac <__mcmp+0x28>
 800a98e:	f100 0314 	add.w	r3, r0, #20
 800a992:	3114      	adds	r1, #20
 800a994:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a998:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a99c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a9a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a9a4:	42a5      	cmp	r5, r4
 800a9a6:	d003      	beq.n	800a9b0 <__mcmp+0x2c>
 800a9a8:	d305      	bcc.n	800a9b6 <__mcmp+0x32>
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	bd30      	pop	{r4, r5, pc}
 800a9b0:	4283      	cmp	r3, r0
 800a9b2:	d3f3      	bcc.n	800a99c <__mcmp+0x18>
 800a9b4:	e7fa      	b.n	800a9ac <__mcmp+0x28>
 800a9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ba:	e7f7      	b.n	800a9ac <__mcmp+0x28>

0800a9bc <__mdiff>:
 800a9bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c0:	460c      	mov	r4, r1
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	4690      	mov	r8, r2
 800a9ca:	f7ff ffdb 	bl	800a984 <__mcmp>
 800a9ce:	1e05      	subs	r5, r0, #0
 800a9d0:	d110      	bne.n	800a9f4 <__mdiff+0x38>
 800a9d2:	4629      	mov	r1, r5
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	f7ff fd09 	bl	800a3ec <_Balloc>
 800a9da:	b930      	cbnz	r0, 800a9ea <__mdiff+0x2e>
 800a9dc:	4b3a      	ldr	r3, [pc, #232]	; (800aac8 <__mdiff+0x10c>)
 800a9de:	4602      	mov	r2, r0
 800a9e0:	f240 2132 	movw	r1, #562	; 0x232
 800a9e4:	4839      	ldr	r0, [pc, #228]	; (800aacc <__mdiff+0x110>)
 800a9e6:	f000 fc4d 	bl	800b284 <__assert_func>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f4:	bfa4      	itt	ge
 800a9f6:	4643      	movge	r3, r8
 800a9f8:	46a0      	movge	r8, r4
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aa00:	bfa6      	itte	ge
 800aa02:	461c      	movge	r4, r3
 800aa04:	2500      	movge	r5, #0
 800aa06:	2501      	movlt	r5, #1
 800aa08:	f7ff fcf0 	bl	800a3ec <_Balloc>
 800aa0c:	b920      	cbnz	r0, 800aa18 <__mdiff+0x5c>
 800aa0e:	4b2e      	ldr	r3, [pc, #184]	; (800aac8 <__mdiff+0x10c>)
 800aa10:	4602      	mov	r2, r0
 800aa12:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aa16:	e7e5      	b.n	800a9e4 <__mdiff+0x28>
 800aa18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa1c:	6926      	ldr	r6, [r4, #16]
 800aa1e:	60c5      	str	r5, [r0, #12]
 800aa20:	f104 0914 	add.w	r9, r4, #20
 800aa24:	f108 0514 	add.w	r5, r8, #20
 800aa28:	f100 0e14 	add.w	lr, r0, #20
 800aa2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aa30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa34:	f108 0210 	add.w	r2, r8, #16
 800aa38:	46f2      	mov	sl, lr
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa44:	fa1f f883 	uxth.w	r8, r3
 800aa48:	fa11 f18b 	uxtah	r1, r1, fp
 800aa4c:	0c1b      	lsrs	r3, r3, #16
 800aa4e:	eba1 0808 	sub.w	r8, r1, r8
 800aa52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa5a:	fa1f f888 	uxth.w	r8, r8
 800aa5e:	1419      	asrs	r1, r3, #16
 800aa60:	454e      	cmp	r6, r9
 800aa62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa66:	f84a 3b04 	str.w	r3, [sl], #4
 800aa6a:	d8e7      	bhi.n	800aa3c <__mdiff+0x80>
 800aa6c:	1b33      	subs	r3, r6, r4
 800aa6e:	3b15      	subs	r3, #21
 800aa70:	f023 0303 	bic.w	r3, r3, #3
 800aa74:	3304      	adds	r3, #4
 800aa76:	3415      	adds	r4, #21
 800aa78:	42a6      	cmp	r6, r4
 800aa7a:	bf38      	it	cc
 800aa7c:	2304      	movcc	r3, #4
 800aa7e:	441d      	add	r5, r3
 800aa80:	4473      	add	r3, lr
 800aa82:	469e      	mov	lr, r3
 800aa84:	462e      	mov	r6, r5
 800aa86:	4566      	cmp	r6, ip
 800aa88:	d30e      	bcc.n	800aaa8 <__mdiff+0xec>
 800aa8a:	f10c 0203 	add.w	r2, ip, #3
 800aa8e:	1b52      	subs	r2, r2, r5
 800aa90:	f022 0203 	bic.w	r2, r2, #3
 800aa94:	3d03      	subs	r5, #3
 800aa96:	45ac      	cmp	ip, r5
 800aa98:	bf38      	it	cc
 800aa9a:	2200      	movcc	r2, #0
 800aa9c:	441a      	add	r2, r3
 800aa9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aaa2:	b17b      	cbz	r3, 800aac4 <__mdiff+0x108>
 800aaa4:	6107      	str	r7, [r0, #16]
 800aaa6:	e7a3      	b.n	800a9f0 <__mdiff+0x34>
 800aaa8:	f856 8b04 	ldr.w	r8, [r6], #4
 800aaac:	fa11 f288 	uxtah	r2, r1, r8
 800aab0:	1414      	asrs	r4, r2, #16
 800aab2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aab6:	b292      	uxth	r2, r2
 800aab8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aabc:	f84e 2b04 	str.w	r2, [lr], #4
 800aac0:	1421      	asrs	r1, r4, #16
 800aac2:	e7e0      	b.n	800aa86 <__mdiff+0xca>
 800aac4:	3f01      	subs	r7, #1
 800aac6:	e7ea      	b.n	800aa9e <__mdiff+0xe2>
 800aac8:	0800c0b0 	.word	0x0800c0b0
 800aacc:	0800c13c 	.word	0x0800c13c

0800aad0 <__ulp>:
 800aad0:	b082      	sub	sp, #8
 800aad2:	ed8d 0b00 	vstr	d0, [sp]
 800aad6:	9b01      	ldr	r3, [sp, #4]
 800aad8:	4912      	ldr	r1, [pc, #72]	; (800ab24 <__ulp+0x54>)
 800aada:	4019      	ands	r1, r3
 800aadc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800aae0:	2900      	cmp	r1, #0
 800aae2:	dd05      	ble.n	800aaf0 <__ulp+0x20>
 800aae4:	2200      	movs	r2, #0
 800aae6:	460b      	mov	r3, r1
 800aae8:	ec43 2b10 	vmov	d0, r2, r3
 800aaec:	b002      	add	sp, #8
 800aaee:	4770      	bx	lr
 800aaf0:	4249      	negs	r1, r1
 800aaf2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800aaf6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aafa:	f04f 0200 	mov.w	r2, #0
 800aafe:	f04f 0300 	mov.w	r3, #0
 800ab02:	da04      	bge.n	800ab0e <__ulp+0x3e>
 800ab04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ab08:	fa41 f300 	asr.w	r3, r1, r0
 800ab0c:	e7ec      	b.n	800aae8 <__ulp+0x18>
 800ab0e:	f1a0 0114 	sub.w	r1, r0, #20
 800ab12:	291e      	cmp	r1, #30
 800ab14:	bfda      	itte	le
 800ab16:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ab1a:	fa20 f101 	lsrle.w	r1, r0, r1
 800ab1e:	2101      	movgt	r1, #1
 800ab20:	460a      	mov	r2, r1
 800ab22:	e7e1      	b.n	800aae8 <__ulp+0x18>
 800ab24:	7ff00000 	.word	0x7ff00000

0800ab28 <__b2d>:
 800ab28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2a:	6905      	ldr	r5, [r0, #16]
 800ab2c:	f100 0714 	add.w	r7, r0, #20
 800ab30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ab34:	1f2e      	subs	r6, r5, #4
 800ab36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f7ff fd48 	bl	800a5d0 <__hi0bits>
 800ab40:	f1c0 0320 	rsb	r3, r0, #32
 800ab44:	280a      	cmp	r0, #10
 800ab46:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800abc4 <__b2d+0x9c>
 800ab4a:	600b      	str	r3, [r1, #0]
 800ab4c:	dc14      	bgt.n	800ab78 <__b2d+0x50>
 800ab4e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ab52:	fa24 f10e 	lsr.w	r1, r4, lr
 800ab56:	42b7      	cmp	r7, r6
 800ab58:	ea41 030c 	orr.w	r3, r1, ip
 800ab5c:	bf34      	ite	cc
 800ab5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ab62:	2100      	movcs	r1, #0
 800ab64:	3015      	adds	r0, #21
 800ab66:	fa04 f000 	lsl.w	r0, r4, r0
 800ab6a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ab6e:	ea40 0201 	orr.w	r2, r0, r1
 800ab72:	ec43 2b10 	vmov	d0, r2, r3
 800ab76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab78:	42b7      	cmp	r7, r6
 800ab7a:	bf3a      	itte	cc
 800ab7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ab80:	f1a5 0608 	subcc.w	r6, r5, #8
 800ab84:	2100      	movcs	r1, #0
 800ab86:	380b      	subs	r0, #11
 800ab88:	d017      	beq.n	800abba <__b2d+0x92>
 800ab8a:	f1c0 0c20 	rsb	ip, r0, #32
 800ab8e:	fa04 f500 	lsl.w	r5, r4, r0
 800ab92:	42be      	cmp	r6, r7
 800ab94:	fa21 f40c 	lsr.w	r4, r1, ip
 800ab98:	ea45 0504 	orr.w	r5, r5, r4
 800ab9c:	bf8c      	ite	hi
 800ab9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aba2:	2400      	movls	r4, #0
 800aba4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800aba8:	fa01 f000 	lsl.w	r0, r1, r0
 800abac:	fa24 f40c 	lsr.w	r4, r4, ip
 800abb0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800abb4:	ea40 0204 	orr.w	r2, r0, r4
 800abb8:	e7db      	b.n	800ab72 <__b2d+0x4a>
 800abba:	ea44 030c 	orr.w	r3, r4, ip
 800abbe:	460a      	mov	r2, r1
 800abc0:	e7d7      	b.n	800ab72 <__b2d+0x4a>
 800abc2:	bf00      	nop
 800abc4:	3ff00000 	.word	0x3ff00000

0800abc8 <__d2b>:
 800abc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800abcc:	4689      	mov	r9, r1
 800abce:	2101      	movs	r1, #1
 800abd0:	ec57 6b10 	vmov	r6, r7, d0
 800abd4:	4690      	mov	r8, r2
 800abd6:	f7ff fc09 	bl	800a3ec <_Balloc>
 800abda:	4604      	mov	r4, r0
 800abdc:	b930      	cbnz	r0, 800abec <__d2b+0x24>
 800abde:	4602      	mov	r2, r0
 800abe0:	4b25      	ldr	r3, [pc, #148]	; (800ac78 <__d2b+0xb0>)
 800abe2:	4826      	ldr	r0, [pc, #152]	; (800ac7c <__d2b+0xb4>)
 800abe4:	f240 310a 	movw	r1, #778	; 0x30a
 800abe8:	f000 fb4c 	bl	800b284 <__assert_func>
 800abec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800abf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800abf4:	bb35      	cbnz	r5, 800ac44 <__d2b+0x7c>
 800abf6:	2e00      	cmp	r6, #0
 800abf8:	9301      	str	r3, [sp, #4]
 800abfa:	d028      	beq.n	800ac4e <__d2b+0x86>
 800abfc:	4668      	mov	r0, sp
 800abfe:	9600      	str	r6, [sp, #0]
 800ac00:	f7ff fd06 	bl	800a610 <__lo0bits>
 800ac04:	9900      	ldr	r1, [sp, #0]
 800ac06:	b300      	cbz	r0, 800ac4a <__d2b+0x82>
 800ac08:	9a01      	ldr	r2, [sp, #4]
 800ac0a:	f1c0 0320 	rsb	r3, r0, #32
 800ac0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac12:	430b      	orrs	r3, r1
 800ac14:	40c2      	lsrs	r2, r0
 800ac16:	6163      	str	r3, [r4, #20]
 800ac18:	9201      	str	r2, [sp, #4]
 800ac1a:	9b01      	ldr	r3, [sp, #4]
 800ac1c:	61a3      	str	r3, [r4, #24]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	bf14      	ite	ne
 800ac22:	2202      	movne	r2, #2
 800ac24:	2201      	moveq	r2, #1
 800ac26:	6122      	str	r2, [r4, #16]
 800ac28:	b1d5      	cbz	r5, 800ac60 <__d2b+0x98>
 800ac2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac2e:	4405      	add	r5, r0
 800ac30:	f8c9 5000 	str.w	r5, [r9]
 800ac34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac38:	f8c8 0000 	str.w	r0, [r8]
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	b003      	add	sp, #12
 800ac40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac48:	e7d5      	b.n	800abf6 <__d2b+0x2e>
 800ac4a:	6161      	str	r1, [r4, #20]
 800ac4c:	e7e5      	b.n	800ac1a <__d2b+0x52>
 800ac4e:	a801      	add	r0, sp, #4
 800ac50:	f7ff fcde 	bl	800a610 <__lo0bits>
 800ac54:	9b01      	ldr	r3, [sp, #4]
 800ac56:	6163      	str	r3, [r4, #20]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	6122      	str	r2, [r4, #16]
 800ac5c:	3020      	adds	r0, #32
 800ac5e:	e7e3      	b.n	800ac28 <__d2b+0x60>
 800ac60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac68:	f8c9 0000 	str.w	r0, [r9]
 800ac6c:	6918      	ldr	r0, [r3, #16]
 800ac6e:	f7ff fcaf 	bl	800a5d0 <__hi0bits>
 800ac72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac76:	e7df      	b.n	800ac38 <__d2b+0x70>
 800ac78:	0800c0b0 	.word	0x0800c0b0
 800ac7c:	0800c13c 	.word	0x0800c13c

0800ac80 <__ratio>:
 800ac80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac84:	4688      	mov	r8, r1
 800ac86:	4669      	mov	r1, sp
 800ac88:	4681      	mov	r9, r0
 800ac8a:	f7ff ff4d 	bl	800ab28 <__b2d>
 800ac8e:	a901      	add	r1, sp, #4
 800ac90:	4640      	mov	r0, r8
 800ac92:	ec55 4b10 	vmov	r4, r5, d0
 800ac96:	ee10 aa10 	vmov	sl, s0
 800ac9a:	f7ff ff45 	bl	800ab28 <__b2d>
 800ac9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aca2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800aca6:	1a59      	subs	r1, r3, r1
 800aca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800acb2:	ec57 6b10 	vmov	r6, r7, d0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	bfd6      	itet	le
 800acba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800acbe:	462a      	movgt	r2, r5
 800acc0:	463a      	movle	r2, r7
 800acc2:	46ab      	mov	fp, r5
 800acc4:	bfd6      	itet	le
 800acc6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800acca:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800acce:	ee00 3a90 	vmovle	s1, r3
 800acd2:	ec4b ab17 	vmov	d7, sl, fp
 800acd6:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800acda:	b003      	add	sp, #12
 800acdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ace0 <__copybits>:
 800ace0:	3901      	subs	r1, #1
 800ace2:	b570      	push	{r4, r5, r6, lr}
 800ace4:	1149      	asrs	r1, r1, #5
 800ace6:	6914      	ldr	r4, [r2, #16]
 800ace8:	3101      	adds	r1, #1
 800acea:	f102 0314 	add.w	r3, r2, #20
 800acee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800acf2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800acf6:	1f05      	subs	r5, r0, #4
 800acf8:	42a3      	cmp	r3, r4
 800acfa:	d30c      	bcc.n	800ad16 <__copybits+0x36>
 800acfc:	1aa3      	subs	r3, r4, r2
 800acfe:	3b11      	subs	r3, #17
 800ad00:	f023 0303 	bic.w	r3, r3, #3
 800ad04:	3211      	adds	r2, #17
 800ad06:	42a2      	cmp	r2, r4
 800ad08:	bf88      	it	hi
 800ad0a:	2300      	movhi	r3, #0
 800ad0c:	4418      	add	r0, r3
 800ad0e:	2300      	movs	r3, #0
 800ad10:	4288      	cmp	r0, r1
 800ad12:	d305      	bcc.n	800ad20 <__copybits+0x40>
 800ad14:	bd70      	pop	{r4, r5, r6, pc}
 800ad16:	f853 6b04 	ldr.w	r6, [r3], #4
 800ad1a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ad1e:	e7eb      	b.n	800acf8 <__copybits+0x18>
 800ad20:	f840 3b04 	str.w	r3, [r0], #4
 800ad24:	e7f4      	b.n	800ad10 <__copybits+0x30>

0800ad26 <__any_on>:
 800ad26:	f100 0214 	add.w	r2, r0, #20
 800ad2a:	6900      	ldr	r0, [r0, #16]
 800ad2c:	114b      	asrs	r3, r1, #5
 800ad2e:	4298      	cmp	r0, r3
 800ad30:	b510      	push	{r4, lr}
 800ad32:	db11      	blt.n	800ad58 <__any_on+0x32>
 800ad34:	dd0a      	ble.n	800ad4c <__any_on+0x26>
 800ad36:	f011 011f 	ands.w	r1, r1, #31
 800ad3a:	d007      	beq.n	800ad4c <__any_on+0x26>
 800ad3c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ad40:	fa24 f001 	lsr.w	r0, r4, r1
 800ad44:	fa00 f101 	lsl.w	r1, r0, r1
 800ad48:	428c      	cmp	r4, r1
 800ad4a:	d10b      	bne.n	800ad64 <__any_on+0x3e>
 800ad4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d803      	bhi.n	800ad5c <__any_on+0x36>
 800ad54:	2000      	movs	r0, #0
 800ad56:	bd10      	pop	{r4, pc}
 800ad58:	4603      	mov	r3, r0
 800ad5a:	e7f7      	b.n	800ad4c <__any_on+0x26>
 800ad5c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad60:	2900      	cmp	r1, #0
 800ad62:	d0f5      	beq.n	800ad50 <__any_on+0x2a>
 800ad64:	2001      	movs	r0, #1
 800ad66:	e7f6      	b.n	800ad56 <__any_on+0x30>

0800ad68 <_calloc_r>:
 800ad68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad6a:	fba1 2402 	umull	r2, r4, r1, r2
 800ad6e:	b94c      	cbnz	r4, 800ad84 <_calloc_r+0x1c>
 800ad70:	4611      	mov	r1, r2
 800ad72:	9201      	str	r2, [sp, #4]
 800ad74:	f000 f87a 	bl	800ae6c <_malloc_r>
 800ad78:	9a01      	ldr	r2, [sp, #4]
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	b930      	cbnz	r0, 800ad8c <_calloc_r+0x24>
 800ad7e:	4628      	mov	r0, r5
 800ad80:	b003      	add	sp, #12
 800ad82:	bd30      	pop	{r4, r5, pc}
 800ad84:	220c      	movs	r2, #12
 800ad86:	6002      	str	r2, [r0, #0]
 800ad88:	2500      	movs	r5, #0
 800ad8a:	e7f8      	b.n	800ad7e <_calloc_r+0x16>
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	f7fc fcb1 	bl	80076f4 <memset>
 800ad92:	e7f4      	b.n	800ad7e <_calloc_r+0x16>

0800ad94 <_free_r>:
 800ad94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad96:	2900      	cmp	r1, #0
 800ad98:	d044      	beq.n	800ae24 <_free_r+0x90>
 800ad9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad9e:	9001      	str	r0, [sp, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f1a1 0404 	sub.w	r4, r1, #4
 800ada6:	bfb8      	it	lt
 800ada8:	18e4      	addlt	r4, r4, r3
 800adaa:	f000 fab5 	bl	800b318 <__malloc_lock>
 800adae:	4a1e      	ldr	r2, [pc, #120]	; (800ae28 <_free_r+0x94>)
 800adb0:	9801      	ldr	r0, [sp, #4]
 800adb2:	6813      	ldr	r3, [r2, #0]
 800adb4:	b933      	cbnz	r3, 800adc4 <_free_r+0x30>
 800adb6:	6063      	str	r3, [r4, #4]
 800adb8:	6014      	str	r4, [r2, #0]
 800adba:	b003      	add	sp, #12
 800adbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adc0:	f000 bab0 	b.w	800b324 <__malloc_unlock>
 800adc4:	42a3      	cmp	r3, r4
 800adc6:	d908      	bls.n	800adda <_free_r+0x46>
 800adc8:	6825      	ldr	r5, [r4, #0]
 800adca:	1961      	adds	r1, r4, r5
 800adcc:	428b      	cmp	r3, r1
 800adce:	bf01      	itttt	eq
 800add0:	6819      	ldreq	r1, [r3, #0]
 800add2:	685b      	ldreq	r3, [r3, #4]
 800add4:	1949      	addeq	r1, r1, r5
 800add6:	6021      	streq	r1, [r4, #0]
 800add8:	e7ed      	b.n	800adb6 <_free_r+0x22>
 800adda:	461a      	mov	r2, r3
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	b10b      	cbz	r3, 800ade4 <_free_r+0x50>
 800ade0:	42a3      	cmp	r3, r4
 800ade2:	d9fa      	bls.n	800adda <_free_r+0x46>
 800ade4:	6811      	ldr	r1, [r2, #0]
 800ade6:	1855      	adds	r5, r2, r1
 800ade8:	42a5      	cmp	r5, r4
 800adea:	d10b      	bne.n	800ae04 <_free_r+0x70>
 800adec:	6824      	ldr	r4, [r4, #0]
 800adee:	4421      	add	r1, r4
 800adf0:	1854      	adds	r4, r2, r1
 800adf2:	42a3      	cmp	r3, r4
 800adf4:	6011      	str	r1, [r2, #0]
 800adf6:	d1e0      	bne.n	800adba <_free_r+0x26>
 800adf8:	681c      	ldr	r4, [r3, #0]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	6053      	str	r3, [r2, #4]
 800adfe:	4421      	add	r1, r4
 800ae00:	6011      	str	r1, [r2, #0]
 800ae02:	e7da      	b.n	800adba <_free_r+0x26>
 800ae04:	d902      	bls.n	800ae0c <_free_r+0x78>
 800ae06:	230c      	movs	r3, #12
 800ae08:	6003      	str	r3, [r0, #0]
 800ae0a:	e7d6      	b.n	800adba <_free_r+0x26>
 800ae0c:	6825      	ldr	r5, [r4, #0]
 800ae0e:	1961      	adds	r1, r4, r5
 800ae10:	428b      	cmp	r3, r1
 800ae12:	bf04      	itt	eq
 800ae14:	6819      	ldreq	r1, [r3, #0]
 800ae16:	685b      	ldreq	r3, [r3, #4]
 800ae18:	6063      	str	r3, [r4, #4]
 800ae1a:	bf04      	itt	eq
 800ae1c:	1949      	addeq	r1, r1, r5
 800ae1e:	6021      	streq	r1, [r4, #0]
 800ae20:	6054      	str	r4, [r2, #4]
 800ae22:	e7ca      	b.n	800adba <_free_r+0x26>
 800ae24:	b003      	add	sp, #12
 800ae26:	bd30      	pop	{r4, r5, pc}
 800ae28:	200008e0 	.word	0x200008e0

0800ae2c <sbrk_aligned>:
 800ae2c:	b570      	push	{r4, r5, r6, lr}
 800ae2e:	4e0e      	ldr	r6, [pc, #56]	; (800ae68 <sbrk_aligned+0x3c>)
 800ae30:	460c      	mov	r4, r1
 800ae32:	6831      	ldr	r1, [r6, #0]
 800ae34:	4605      	mov	r5, r0
 800ae36:	b911      	cbnz	r1, 800ae3e <sbrk_aligned+0x12>
 800ae38:	f000 f9f2 	bl	800b220 <_sbrk_r>
 800ae3c:	6030      	str	r0, [r6, #0]
 800ae3e:	4621      	mov	r1, r4
 800ae40:	4628      	mov	r0, r5
 800ae42:	f000 f9ed 	bl	800b220 <_sbrk_r>
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	d00a      	beq.n	800ae60 <sbrk_aligned+0x34>
 800ae4a:	1cc4      	adds	r4, r0, #3
 800ae4c:	f024 0403 	bic.w	r4, r4, #3
 800ae50:	42a0      	cmp	r0, r4
 800ae52:	d007      	beq.n	800ae64 <sbrk_aligned+0x38>
 800ae54:	1a21      	subs	r1, r4, r0
 800ae56:	4628      	mov	r0, r5
 800ae58:	f000 f9e2 	bl	800b220 <_sbrk_r>
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	d101      	bne.n	800ae64 <sbrk_aligned+0x38>
 800ae60:	f04f 34ff 	mov.w	r4, #4294967295
 800ae64:	4620      	mov	r0, r4
 800ae66:	bd70      	pop	{r4, r5, r6, pc}
 800ae68:	200008e4 	.word	0x200008e4

0800ae6c <_malloc_r>:
 800ae6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae70:	1ccd      	adds	r5, r1, #3
 800ae72:	f025 0503 	bic.w	r5, r5, #3
 800ae76:	3508      	adds	r5, #8
 800ae78:	2d0c      	cmp	r5, #12
 800ae7a:	bf38      	it	cc
 800ae7c:	250c      	movcc	r5, #12
 800ae7e:	2d00      	cmp	r5, #0
 800ae80:	4607      	mov	r7, r0
 800ae82:	db01      	blt.n	800ae88 <_malloc_r+0x1c>
 800ae84:	42a9      	cmp	r1, r5
 800ae86:	d905      	bls.n	800ae94 <_malloc_r+0x28>
 800ae88:	230c      	movs	r3, #12
 800ae8a:	603b      	str	r3, [r7, #0]
 800ae8c:	2600      	movs	r6, #0
 800ae8e:	4630      	mov	r0, r6
 800ae90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae94:	4e2e      	ldr	r6, [pc, #184]	; (800af50 <_malloc_r+0xe4>)
 800ae96:	f000 fa3f 	bl	800b318 <__malloc_lock>
 800ae9a:	6833      	ldr	r3, [r6, #0]
 800ae9c:	461c      	mov	r4, r3
 800ae9e:	bb34      	cbnz	r4, 800aeee <_malloc_r+0x82>
 800aea0:	4629      	mov	r1, r5
 800aea2:	4638      	mov	r0, r7
 800aea4:	f7ff ffc2 	bl	800ae2c <sbrk_aligned>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	4604      	mov	r4, r0
 800aeac:	d14d      	bne.n	800af4a <_malloc_r+0xde>
 800aeae:	6834      	ldr	r4, [r6, #0]
 800aeb0:	4626      	mov	r6, r4
 800aeb2:	2e00      	cmp	r6, #0
 800aeb4:	d140      	bne.n	800af38 <_malloc_r+0xcc>
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4638      	mov	r0, r7
 800aebc:	eb04 0803 	add.w	r8, r4, r3
 800aec0:	f000 f9ae 	bl	800b220 <_sbrk_r>
 800aec4:	4580      	cmp	r8, r0
 800aec6:	d13a      	bne.n	800af3e <_malloc_r+0xd2>
 800aec8:	6821      	ldr	r1, [r4, #0]
 800aeca:	3503      	adds	r5, #3
 800aecc:	1a6d      	subs	r5, r5, r1
 800aece:	f025 0503 	bic.w	r5, r5, #3
 800aed2:	3508      	adds	r5, #8
 800aed4:	2d0c      	cmp	r5, #12
 800aed6:	bf38      	it	cc
 800aed8:	250c      	movcc	r5, #12
 800aeda:	4629      	mov	r1, r5
 800aedc:	4638      	mov	r0, r7
 800aede:	f7ff ffa5 	bl	800ae2c <sbrk_aligned>
 800aee2:	3001      	adds	r0, #1
 800aee4:	d02b      	beq.n	800af3e <_malloc_r+0xd2>
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	442b      	add	r3, r5
 800aeea:	6023      	str	r3, [r4, #0]
 800aeec:	e00e      	b.n	800af0c <_malloc_r+0xa0>
 800aeee:	6822      	ldr	r2, [r4, #0]
 800aef0:	1b52      	subs	r2, r2, r5
 800aef2:	d41e      	bmi.n	800af32 <_malloc_r+0xc6>
 800aef4:	2a0b      	cmp	r2, #11
 800aef6:	d916      	bls.n	800af26 <_malloc_r+0xba>
 800aef8:	1961      	adds	r1, r4, r5
 800aefa:	42a3      	cmp	r3, r4
 800aefc:	6025      	str	r5, [r4, #0]
 800aefe:	bf18      	it	ne
 800af00:	6059      	strne	r1, [r3, #4]
 800af02:	6863      	ldr	r3, [r4, #4]
 800af04:	bf08      	it	eq
 800af06:	6031      	streq	r1, [r6, #0]
 800af08:	5162      	str	r2, [r4, r5]
 800af0a:	604b      	str	r3, [r1, #4]
 800af0c:	4638      	mov	r0, r7
 800af0e:	f104 060b 	add.w	r6, r4, #11
 800af12:	f000 fa07 	bl	800b324 <__malloc_unlock>
 800af16:	f026 0607 	bic.w	r6, r6, #7
 800af1a:	1d23      	adds	r3, r4, #4
 800af1c:	1af2      	subs	r2, r6, r3
 800af1e:	d0b6      	beq.n	800ae8e <_malloc_r+0x22>
 800af20:	1b9b      	subs	r3, r3, r6
 800af22:	50a3      	str	r3, [r4, r2]
 800af24:	e7b3      	b.n	800ae8e <_malloc_r+0x22>
 800af26:	6862      	ldr	r2, [r4, #4]
 800af28:	42a3      	cmp	r3, r4
 800af2a:	bf0c      	ite	eq
 800af2c:	6032      	streq	r2, [r6, #0]
 800af2e:	605a      	strne	r2, [r3, #4]
 800af30:	e7ec      	b.n	800af0c <_malloc_r+0xa0>
 800af32:	4623      	mov	r3, r4
 800af34:	6864      	ldr	r4, [r4, #4]
 800af36:	e7b2      	b.n	800ae9e <_malloc_r+0x32>
 800af38:	4634      	mov	r4, r6
 800af3a:	6876      	ldr	r6, [r6, #4]
 800af3c:	e7b9      	b.n	800aeb2 <_malloc_r+0x46>
 800af3e:	230c      	movs	r3, #12
 800af40:	603b      	str	r3, [r7, #0]
 800af42:	4638      	mov	r0, r7
 800af44:	f000 f9ee 	bl	800b324 <__malloc_unlock>
 800af48:	e7a1      	b.n	800ae8e <_malloc_r+0x22>
 800af4a:	6025      	str	r5, [r4, #0]
 800af4c:	e7de      	b.n	800af0c <_malloc_r+0xa0>
 800af4e:	bf00      	nop
 800af50:	200008e0 	.word	0x200008e0

0800af54 <__ssputs_r>:
 800af54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af58:	688e      	ldr	r6, [r1, #8]
 800af5a:	429e      	cmp	r6, r3
 800af5c:	4682      	mov	sl, r0
 800af5e:	460c      	mov	r4, r1
 800af60:	4690      	mov	r8, r2
 800af62:	461f      	mov	r7, r3
 800af64:	d838      	bhi.n	800afd8 <__ssputs_r+0x84>
 800af66:	898a      	ldrh	r2, [r1, #12]
 800af68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af6c:	d032      	beq.n	800afd4 <__ssputs_r+0x80>
 800af6e:	6825      	ldr	r5, [r4, #0]
 800af70:	6909      	ldr	r1, [r1, #16]
 800af72:	eba5 0901 	sub.w	r9, r5, r1
 800af76:	6965      	ldr	r5, [r4, #20]
 800af78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af80:	3301      	adds	r3, #1
 800af82:	444b      	add	r3, r9
 800af84:	106d      	asrs	r5, r5, #1
 800af86:	429d      	cmp	r5, r3
 800af88:	bf38      	it	cc
 800af8a:	461d      	movcc	r5, r3
 800af8c:	0553      	lsls	r3, r2, #21
 800af8e:	d531      	bpl.n	800aff4 <__ssputs_r+0xa0>
 800af90:	4629      	mov	r1, r5
 800af92:	f7ff ff6b 	bl	800ae6c <_malloc_r>
 800af96:	4606      	mov	r6, r0
 800af98:	b950      	cbnz	r0, 800afb0 <__ssputs_r+0x5c>
 800af9a:	230c      	movs	r3, #12
 800af9c:	f8ca 3000 	str.w	r3, [sl]
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afa6:	81a3      	strh	r3, [r4, #12]
 800afa8:	f04f 30ff 	mov.w	r0, #4294967295
 800afac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb0:	6921      	ldr	r1, [r4, #16]
 800afb2:	464a      	mov	r2, r9
 800afb4:	f7ff fa0c 	bl	800a3d0 <memcpy>
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc2:	81a3      	strh	r3, [r4, #12]
 800afc4:	6126      	str	r6, [r4, #16]
 800afc6:	6165      	str	r5, [r4, #20]
 800afc8:	444e      	add	r6, r9
 800afca:	eba5 0509 	sub.w	r5, r5, r9
 800afce:	6026      	str	r6, [r4, #0]
 800afd0:	60a5      	str	r5, [r4, #8]
 800afd2:	463e      	mov	r6, r7
 800afd4:	42be      	cmp	r6, r7
 800afd6:	d900      	bls.n	800afda <__ssputs_r+0x86>
 800afd8:	463e      	mov	r6, r7
 800afda:	6820      	ldr	r0, [r4, #0]
 800afdc:	4632      	mov	r2, r6
 800afde:	4641      	mov	r1, r8
 800afe0:	f000 f980 	bl	800b2e4 <memmove>
 800afe4:	68a3      	ldr	r3, [r4, #8]
 800afe6:	1b9b      	subs	r3, r3, r6
 800afe8:	60a3      	str	r3, [r4, #8]
 800afea:	6823      	ldr	r3, [r4, #0]
 800afec:	4433      	add	r3, r6
 800afee:	6023      	str	r3, [r4, #0]
 800aff0:	2000      	movs	r0, #0
 800aff2:	e7db      	b.n	800afac <__ssputs_r+0x58>
 800aff4:	462a      	mov	r2, r5
 800aff6:	f000 f99b 	bl	800b330 <_realloc_r>
 800affa:	4606      	mov	r6, r0
 800affc:	2800      	cmp	r0, #0
 800affe:	d1e1      	bne.n	800afc4 <__ssputs_r+0x70>
 800b000:	6921      	ldr	r1, [r4, #16]
 800b002:	4650      	mov	r0, sl
 800b004:	f7ff fec6 	bl	800ad94 <_free_r>
 800b008:	e7c7      	b.n	800af9a <__ssputs_r+0x46>
	...

0800b00c <_svfiprintf_r>:
 800b00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b010:	4698      	mov	r8, r3
 800b012:	898b      	ldrh	r3, [r1, #12]
 800b014:	061b      	lsls	r3, r3, #24
 800b016:	b09d      	sub	sp, #116	; 0x74
 800b018:	4607      	mov	r7, r0
 800b01a:	460d      	mov	r5, r1
 800b01c:	4614      	mov	r4, r2
 800b01e:	d50e      	bpl.n	800b03e <_svfiprintf_r+0x32>
 800b020:	690b      	ldr	r3, [r1, #16]
 800b022:	b963      	cbnz	r3, 800b03e <_svfiprintf_r+0x32>
 800b024:	2140      	movs	r1, #64	; 0x40
 800b026:	f7ff ff21 	bl	800ae6c <_malloc_r>
 800b02a:	6028      	str	r0, [r5, #0]
 800b02c:	6128      	str	r0, [r5, #16]
 800b02e:	b920      	cbnz	r0, 800b03a <_svfiprintf_r+0x2e>
 800b030:	230c      	movs	r3, #12
 800b032:	603b      	str	r3, [r7, #0]
 800b034:	f04f 30ff 	mov.w	r0, #4294967295
 800b038:	e0d1      	b.n	800b1de <_svfiprintf_r+0x1d2>
 800b03a:	2340      	movs	r3, #64	; 0x40
 800b03c:	616b      	str	r3, [r5, #20]
 800b03e:	2300      	movs	r3, #0
 800b040:	9309      	str	r3, [sp, #36]	; 0x24
 800b042:	2320      	movs	r3, #32
 800b044:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b048:	f8cd 800c 	str.w	r8, [sp, #12]
 800b04c:	2330      	movs	r3, #48	; 0x30
 800b04e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b1f8 <_svfiprintf_r+0x1ec>
 800b052:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b056:	f04f 0901 	mov.w	r9, #1
 800b05a:	4623      	mov	r3, r4
 800b05c:	469a      	mov	sl, r3
 800b05e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b062:	b10a      	cbz	r2, 800b068 <_svfiprintf_r+0x5c>
 800b064:	2a25      	cmp	r2, #37	; 0x25
 800b066:	d1f9      	bne.n	800b05c <_svfiprintf_r+0x50>
 800b068:	ebba 0b04 	subs.w	fp, sl, r4
 800b06c:	d00b      	beq.n	800b086 <_svfiprintf_r+0x7a>
 800b06e:	465b      	mov	r3, fp
 800b070:	4622      	mov	r2, r4
 800b072:	4629      	mov	r1, r5
 800b074:	4638      	mov	r0, r7
 800b076:	f7ff ff6d 	bl	800af54 <__ssputs_r>
 800b07a:	3001      	adds	r0, #1
 800b07c:	f000 80aa 	beq.w	800b1d4 <_svfiprintf_r+0x1c8>
 800b080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b082:	445a      	add	r2, fp
 800b084:	9209      	str	r2, [sp, #36]	; 0x24
 800b086:	f89a 3000 	ldrb.w	r3, [sl]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f000 80a2 	beq.w	800b1d4 <_svfiprintf_r+0x1c8>
 800b090:	2300      	movs	r3, #0
 800b092:	f04f 32ff 	mov.w	r2, #4294967295
 800b096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b09a:	f10a 0a01 	add.w	sl, sl, #1
 800b09e:	9304      	str	r3, [sp, #16]
 800b0a0:	9307      	str	r3, [sp, #28]
 800b0a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0a6:	931a      	str	r3, [sp, #104]	; 0x68
 800b0a8:	4654      	mov	r4, sl
 800b0aa:	2205      	movs	r2, #5
 800b0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b0:	4851      	ldr	r0, [pc, #324]	; (800b1f8 <_svfiprintf_r+0x1ec>)
 800b0b2:	f7f5 f8cd 	bl	8000250 <memchr>
 800b0b6:	9a04      	ldr	r2, [sp, #16]
 800b0b8:	b9d8      	cbnz	r0, 800b0f2 <_svfiprintf_r+0xe6>
 800b0ba:	06d0      	lsls	r0, r2, #27
 800b0bc:	bf44      	itt	mi
 800b0be:	2320      	movmi	r3, #32
 800b0c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0c4:	0711      	lsls	r1, r2, #28
 800b0c6:	bf44      	itt	mi
 800b0c8:	232b      	movmi	r3, #43	; 0x2b
 800b0ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b0d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b0d4:	d015      	beq.n	800b102 <_svfiprintf_r+0xf6>
 800b0d6:	9a07      	ldr	r2, [sp, #28]
 800b0d8:	4654      	mov	r4, sl
 800b0da:	2000      	movs	r0, #0
 800b0dc:	f04f 0c0a 	mov.w	ip, #10
 800b0e0:	4621      	mov	r1, r4
 800b0e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0e6:	3b30      	subs	r3, #48	; 0x30
 800b0e8:	2b09      	cmp	r3, #9
 800b0ea:	d94e      	bls.n	800b18a <_svfiprintf_r+0x17e>
 800b0ec:	b1b0      	cbz	r0, 800b11c <_svfiprintf_r+0x110>
 800b0ee:	9207      	str	r2, [sp, #28]
 800b0f0:	e014      	b.n	800b11c <_svfiprintf_r+0x110>
 800b0f2:	eba0 0308 	sub.w	r3, r0, r8
 800b0f6:	fa09 f303 	lsl.w	r3, r9, r3
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	9304      	str	r3, [sp, #16]
 800b0fe:	46a2      	mov	sl, r4
 800b100:	e7d2      	b.n	800b0a8 <_svfiprintf_r+0x9c>
 800b102:	9b03      	ldr	r3, [sp, #12]
 800b104:	1d19      	adds	r1, r3, #4
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	9103      	str	r1, [sp, #12]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	bfbb      	ittet	lt
 800b10e:	425b      	neglt	r3, r3
 800b110:	f042 0202 	orrlt.w	r2, r2, #2
 800b114:	9307      	strge	r3, [sp, #28]
 800b116:	9307      	strlt	r3, [sp, #28]
 800b118:	bfb8      	it	lt
 800b11a:	9204      	strlt	r2, [sp, #16]
 800b11c:	7823      	ldrb	r3, [r4, #0]
 800b11e:	2b2e      	cmp	r3, #46	; 0x2e
 800b120:	d10c      	bne.n	800b13c <_svfiprintf_r+0x130>
 800b122:	7863      	ldrb	r3, [r4, #1]
 800b124:	2b2a      	cmp	r3, #42	; 0x2a
 800b126:	d135      	bne.n	800b194 <_svfiprintf_r+0x188>
 800b128:	9b03      	ldr	r3, [sp, #12]
 800b12a:	1d1a      	adds	r2, r3, #4
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	9203      	str	r2, [sp, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	bfb8      	it	lt
 800b134:	f04f 33ff 	movlt.w	r3, #4294967295
 800b138:	3402      	adds	r4, #2
 800b13a:	9305      	str	r3, [sp, #20]
 800b13c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b208 <_svfiprintf_r+0x1fc>
 800b140:	7821      	ldrb	r1, [r4, #0]
 800b142:	2203      	movs	r2, #3
 800b144:	4650      	mov	r0, sl
 800b146:	f7f5 f883 	bl	8000250 <memchr>
 800b14a:	b140      	cbz	r0, 800b15e <_svfiprintf_r+0x152>
 800b14c:	2340      	movs	r3, #64	; 0x40
 800b14e:	eba0 000a 	sub.w	r0, r0, sl
 800b152:	fa03 f000 	lsl.w	r0, r3, r0
 800b156:	9b04      	ldr	r3, [sp, #16]
 800b158:	4303      	orrs	r3, r0
 800b15a:	3401      	adds	r4, #1
 800b15c:	9304      	str	r3, [sp, #16]
 800b15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b162:	4826      	ldr	r0, [pc, #152]	; (800b1fc <_svfiprintf_r+0x1f0>)
 800b164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b168:	2206      	movs	r2, #6
 800b16a:	f7f5 f871 	bl	8000250 <memchr>
 800b16e:	2800      	cmp	r0, #0
 800b170:	d038      	beq.n	800b1e4 <_svfiprintf_r+0x1d8>
 800b172:	4b23      	ldr	r3, [pc, #140]	; (800b200 <_svfiprintf_r+0x1f4>)
 800b174:	bb1b      	cbnz	r3, 800b1be <_svfiprintf_r+0x1b2>
 800b176:	9b03      	ldr	r3, [sp, #12]
 800b178:	3307      	adds	r3, #7
 800b17a:	f023 0307 	bic.w	r3, r3, #7
 800b17e:	3308      	adds	r3, #8
 800b180:	9303      	str	r3, [sp, #12]
 800b182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b184:	4433      	add	r3, r6
 800b186:	9309      	str	r3, [sp, #36]	; 0x24
 800b188:	e767      	b.n	800b05a <_svfiprintf_r+0x4e>
 800b18a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b18e:	460c      	mov	r4, r1
 800b190:	2001      	movs	r0, #1
 800b192:	e7a5      	b.n	800b0e0 <_svfiprintf_r+0xd4>
 800b194:	2300      	movs	r3, #0
 800b196:	3401      	adds	r4, #1
 800b198:	9305      	str	r3, [sp, #20]
 800b19a:	4619      	mov	r1, r3
 800b19c:	f04f 0c0a 	mov.w	ip, #10
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1a6:	3a30      	subs	r2, #48	; 0x30
 800b1a8:	2a09      	cmp	r2, #9
 800b1aa:	d903      	bls.n	800b1b4 <_svfiprintf_r+0x1a8>
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d0c5      	beq.n	800b13c <_svfiprintf_r+0x130>
 800b1b0:	9105      	str	r1, [sp, #20]
 800b1b2:	e7c3      	b.n	800b13c <_svfiprintf_r+0x130>
 800b1b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e7f0      	b.n	800b1a0 <_svfiprintf_r+0x194>
 800b1be:	ab03      	add	r3, sp, #12
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	462a      	mov	r2, r5
 800b1c4:	4b0f      	ldr	r3, [pc, #60]	; (800b204 <_svfiprintf_r+0x1f8>)
 800b1c6:	a904      	add	r1, sp, #16
 800b1c8:	4638      	mov	r0, r7
 800b1ca:	f7fc fb2d 	bl	8007828 <_printf_float>
 800b1ce:	1c42      	adds	r2, r0, #1
 800b1d0:	4606      	mov	r6, r0
 800b1d2:	d1d6      	bne.n	800b182 <_svfiprintf_r+0x176>
 800b1d4:	89ab      	ldrh	r3, [r5, #12]
 800b1d6:	065b      	lsls	r3, r3, #25
 800b1d8:	f53f af2c 	bmi.w	800b034 <_svfiprintf_r+0x28>
 800b1dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1de:	b01d      	add	sp, #116	; 0x74
 800b1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e4:	ab03      	add	r3, sp, #12
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	462a      	mov	r2, r5
 800b1ea:	4b06      	ldr	r3, [pc, #24]	; (800b204 <_svfiprintf_r+0x1f8>)
 800b1ec:	a904      	add	r1, sp, #16
 800b1ee:	4638      	mov	r0, r7
 800b1f0:	f7fc fda6 	bl	8007d40 <_printf_i>
 800b1f4:	e7eb      	b.n	800b1ce <_svfiprintf_r+0x1c2>
 800b1f6:	bf00      	nop
 800b1f8:	0800c294 	.word	0x0800c294
 800b1fc:	0800c29e 	.word	0x0800c29e
 800b200:	08007829 	.word	0x08007829
 800b204:	0800af55 	.word	0x0800af55
 800b208:	0800c29a 	.word	0x0800c29a
 800b20c:	00000000 	.word	0x00000000

0800b210 <nan>:
 800b210:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b218 <nan+0x8>
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	00000000 	.word	0x00000000
 800b21c:	7ff80000 	.word	0x7ff80000

0800b220 <_sbrk_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d06      	ldr	r5, [pc, #24]	; (800b23c <_sbrk_r+0x1c>)
 800b224:	2300      	movs	r3, #0
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	602b      	str	r3, [r5, #0]
 800b22c:	f7f6 fe7c 	bl	8001f28 <_sbrk>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_sbrk_r+0x1a>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_sbrk_r+0x1a>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	200008e8 	.word	0x200008e8

0800b240 <strncmp>:
 800b240:	b510      	push	{r4, lr}
 800b242:	b17a      	cbz	r2, 800b264 <strncmp+0x24>
 800b244:	4603      	mov	r3, r0
 800b246:	3901      	subs	r1, #1
 800b248:	1884      	adds	r4, r0, r2
 800b24a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b24e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b252:	4290      	cmp	r0, r2
 800b254:	d101      	bne.n	800b25a <strncmp+0x1a>
 800b256:	42a3      	cmp	r3, r4
 800b258:	d101      	bne.n	800b25e <strncmp+0x1e>
 800b25a:	1a80      	subs	r0, r0, r2
 800b25c:	bd10      	pop	{r4, pc}
 800b25e:	2800      	cmp	r0, #0
 800b260:	d1f3      	bne.n	800b24a <strncmp+0xa>
 800b262:	e7fa      	b.n	800b25a <strncmp+0x1a>
 800b264:	4610      	mov	r0, r2
 800b266:	e7f9      	b.n	800b25c <strncmp+0x1c>

0800b268 <__ascii_wctomb>:
 800b268:	b149      	cbz	r1, 800b27e <__ascii_wctomb+0x16>
 800b26a:	2aff      	cmp	r2, #255	; 0xff
 800b26c:	bf85      	ittet	hi
 800b26e:	238a      	movhi	r3, #138	; 0x8a
 800b270:	6003      	strhi	r3, [r0, #0]
 800b272:	700a      	strbls	r2, [r1, #0]
 800b274:	f04f 30ff 	movhi.w	r0, #4294967295
 800b278:	bf98      	it	ls
 800b27a:	2001      	movls	r0, #1
 800b27c:	4770      	bx	lr
 800b27e:	4608      	mov	r0, r1
 800b280:	4770      	bx	lr
	...

0800b284 <__assert_func>:
 800b284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b286:	4614      	mov	r4, r2
 800b288:	461a      	mov	r2, r3
 800b28a:	4b09      	ldr	r3, [pc, #36]	; (800b2b0 <__assert_func+0x2c>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4605      	mov	r5, r0
 800b290:	68d8      	ldr	r0, [r3, #12]
 800b292:	b14c      	cbz	r4, 800b2a8 <__assert_func+0x24>
 800b294:	4b07      	ldr	r3, [pc, #28]	; (800b2b4 <__assert_func+0x30>)
 800b296:	9100      	str	r1, [sp, #0]
 800b298:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b29c:	4906      	ldr	r1, [pc, #24]	; (800b2b8 <__assert_func+0x34>)
 800b29e:	462b      	mov	r3, r5
 800b2a0:	f000 f80e 	bl	800b2c0 <fiprintf>
 800b2a4:	f000 fa8c 	bl	800b7c0 <abort>
 800b2a8:	4b04      	ldr	r3, [pc, #16]	; (800b2bc <__assert_func+0x38>)
 800b2aa:	461c      	mov	r4, r3
 800b2ac:	e7f3      	b.n	800b296 <__assert_func+0x12>
 800b2ae:	bf00      	nop
 800b2b0:	20000038 	.word	0x20000038
 800b2b4:	0800c2a5 	.word	0x0800c2a5
 800b2b8:	0800c2b2 	.word	0x0800c2b2
 800b2bc:	0800c2e0 	.word	0x0800c2e0

0800b2c0 <fiprintf>:
 800b2c0:	b40e      	push	{r1, r2, r3}
 800b2c2:	b503      	push	{r0, r1, lr}
 800b2c4:	4601      	mov	r1, r0
 800b2c6:	ab03      	add	r3, sp, #12
 800b2c8:	4805      	ldr	r0, [pc, #20]	; (800b2e0 <fiprintf+0x20>)
 800b2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ce:	6800      	ldr	r0, [r0, #0]
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	f000 f885 	bl	800b3e0 <_vfiprintf_r>
 800b2d6:	b002      	add	sp, #8
 800b2d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2dc:	b003      	add	sp, #12
 800b2de:	4770      	bx	lr
 800b2e0:	20000038 	.word	0x20000038

0800b2e4 <memmove>:
 800b2e4:	4288      	cmp	r0, r1
 800b2e6:	b510      	push	{r4, lr}
 800b2e8:	eb01 0402 	add.w	r4, r1, r2
 800b2ec:	d902      	bls.n	800b2f4 <memmove+0x10>
 800b2ee:	4284      	cmp	r4, r0
 800b2f0:	4623      	mov	r3, r4
 800b2f2:	d807      	bhi.n	800b304 <memmove+0x20>
 800b2f4:	1e43      	subs	r3, r0, #1
 800b2f6:	42a1      	cmp	r1, r4
 800b2f8:	d008      	beq.n	800b30c <memmove+0x28>
 800b2fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b302:	e7f8      	b.n	800b2f6 <memmove+0x12>
 800b304:	4402      	add	r2, r0
 800b306:	4601      	mov	r1, r0
 800b308:	428a      	cmp	r2, r1
 800b30a:	d100      	bne.n	800b30e <memmove+0x2a>
 800b30c:	bd10      	pop	{r4, pc}
 800b30e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b316:	e7f7      	b.n	800b308 <memmove+0x24>

0800b318 <__malloc_lock>:
 800b318:	4801      	ldr	r0, [pc, #4]	; (800b320 <__malloc_lock+0x8>)
 800b31a:	f000 bc11 	b.w	800bb40 <__retarget_lock_acquire_recursive>
 800b31e:	bf00      	nop
 800b320:	200008ec 	.word	0x200008ec

0800b324 <__malloc_unlock>:
 800b324:	4801      	ldr	r0, [pc, #4]	; (800b32c <__malloc_unlock+0x8>)
 800b326:	f000 bc0c 	b.w	800bb42 <__retarget_lock_release_recursive>
 800b32a:	bf00      	nop
 800b32c:	200008ec 	.word	0x200008ec

0800b330 <_realloc_r>:
 800b330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b334:	4680      	mov	r8, r0
 800b336:	4614      	mov	r4, r2
 800b338:	460e      	mov	r6, r1
 800b33a:	b921      	cbnz	r1, 800b346 <_realloc_r+0x16>
 800b33c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b340:	4611      	mov	r1, r2
 800b342:	f7ff bd93 	b.w	800ae6c <_malloc_r>
 800b346:	b92a      	cbnz	r2, 800b354 <_realloc_r+0x24>
 800b348:	f7ff fd24 	bl	800ad94 <_free_r>
 800b34c:	4625      	mov	r5, r4
 800b34e:	4628      	mov	r0, r5
 800b350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b354:	f000 fc5c 	bl	800bc10 <_malloc_usable_size_r>
 800b358:	4284      	cmp	r4, r0
 800b35a:	4607      	mov	r7, r0
 800b35c:	d802      	bhi.n	800b364 <_realloc_r+0x34>
 800b35e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b362:	d812      	bhi.n	800b38a <_realloc_r+0x5a>
 800b364:	4621      	mov	r1, r4
 800b366:	4640      	mov	r0, r8
 800b368:	f7ff fd80 	bl	800ae6c <_malloc_r>
 800b36c:	4605      	mov	r5, r0
 800b36e:	2800      	cmp	r0, #0
 800b370:	d0ed      	beq.n	800b34e <_realloc_r+0x1e>
 800b372:	42bc      	cmp	r4, r7
 800b374:	4622      	mov	r2, r4
 800b376:	4631      	mov	r1, r6
 800b378:	bf28      	it	cs
 800b37a:	463a      	movcs	r2, r7
 800b37c:	f7ff f828 	bl	800a3d0 <memcpy>
 800b380:	4631      	mov	r1, r6
 800b382:	4640      	mov	r0, r8
 800b384:	f7ff fd06 	bl	800ad94 <_free_r>
 800b388:	e7e1      	b.n	800b34e <_realloc_r+0x1e>
 800b38a:	4635      	mov	r5, r6
 800b38c:	e7df      	b.n	800b34e <_realloc_r+0x1e>

0800b38e <__sfputc_r>:
 800b38e:	6893      	ldr	r3, [r2, #8]
 800b390:	3b01      	subs	r3, #1
 800b392:	2b00      	cmp	r3, #0
 800b394:	b410      	push	{r4}
 800b396:	6093      	str	r3, [r2, #8]
 800b398:	da08      	bge.n	800b3ac <__sfputc_r+0x1e>
 800b39a:	6994      	ldr	r4, [r2, #24]
 800b39c:	42a3      	cmp	r3, r4
 800b39e:	db01      	blt.n	800b3a4 <__sfputc_r+0x16>
 800b3a0:	290a      	cmp	r1, #10
 800b3a2:	d103      	bne.n	800b3ac <__sfputc_r+0x1e>
 800b3a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3a8:	f000 b94a 	b.w	800b640 <__swbuf_r>
 800b3ac:	6813      	ldr	r3, [r2, #0]
 800b3ae:	1c58      	adds	r0, r3, #1
 800b3b0:	6010      	str	r0, [r2, #0]
 800b3b2:	7019      	strb	r1, [r3, #0]
 800b3b4:	4608      	mov	r0, r1
 800b3b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <__sfputs_r>:
 800b3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3be:	4606      	mov	r6, r0
 800b3c0:	460f      	mov	r7, r1
 800b3c2:	4614      	mov	r4, r2
 800b3c4:	18d5      	adds	r5, r2, r3
 800b3c6:	42ac      	cmp	r4, r5
 800b3c8:	d101      	bne.n	800b3ce <__sfputs_r+0x12>
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	e007      	b.n	800b3de <__sfputs_r+0x22>
 800b3ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d2:	463a      	mov	r2, r7
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	f7ff ffda 	bl	800b38e <__sfputc_r>
 800b3da:	1c43      	adds	r3, r0, #1
 800b3dc:	d1f3      	bne.n	800b3c6 <__sfputs_r+0xa>
 800b3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3e0 <_vfiprintf_r>:
 800b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e4:	460d      	mov	r5, r1
 800b3e6:	b09d      	sub	sp, #116	; 0x74
 800b3e8:	4614      	mov	r4, r2
 800b3ea:	4698      	mov	r8, r3
 800b3ec:	4606      	mov	r6, r0
 800b3ee:	b118      	cbz	r0, 800b3f8 <_vfiprintf_r+0x18>
 800b3f0:	6983      	ldr	r3, [r0, #24]
 800b3f2:	b90b      	cbnz	r3, 800b3f8 <_vfiprintf_r+0x18>
 800b3f4:	f000 fb06 	bl	800ba04 <__sinit>
 800b3f8:	4b89      	ldr	r3, [pc, #548]	; (800b620 <_vfiprintf_r+0x240>)
 800b3fa:	429d      	cmp	r5, r3
 800b3fc:	d11b      	bne.n	800b436 <_vfiprintf_r+0x56>
 800b3fe:	6875      	ldr	r5, [r6, #4]
 800b400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b402:	07d9      	lsls	r1, r3, #31
 800b404:	d405      	bmi.n	800b412 <_vfiprintf_r+0x32>
 800b406:	89ab      	ldrh	r3, [r5, #12]
 800b408:	059a      	lsls	r2, r3, #22
 800b40a:	d402      	bmi.n	800b412 <_vfiprintf_r+0x32>
 800b40c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b40e:	f000 fb97 	bl	800bb40 <__retarget_lock_acquire_recursive>
 800b412:	89ab      	ldrh	r3, [r5, #12]
 800b414:	071b      	lsls	r3, r3, #28
 800b416:	d501      	bpl.n	800b41c <_vfiprintf_r+0x3c>
 800b418:	692b      	ldr	r3, [r5, #16]
 800b41a:	b9eb      	cbnz	r3, 800b458 <_vfiprintf_r+0x78>
 800b41c:	4629      	mov	r1, r5
 800b41e:	4630      	mov	r0, r6
 800b420:	f000 f960 	bl	800b6e4 <__swsetup_r>
 800b424:	b1c0      	cbz	r0, 800b458 <_vfiprintf_r+0x78>
 800b426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b428:	07dc      	lsls	r4, r3, #31
 800b42a:	d50e      	bpl.n	800b44a <_vfiprintf_r+0x6a>
 800b42c:	f04f 30ff 	mov.w	r0, #4294967295
 800b430:	b01d      	add	sp, #116	; 0x74
 800b432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b436:	4b7b      	ldr	r3, [pc, #492]	; (800b624 <_vfiprintf_r+0x244>)
 800b438:	429d      	cmp	r5, r3
 800b43a:	d101      	bne.n	800b440 <_vfiprintf_r+0x60>
 800b43c:	68b5      	ldr	r5, [r6, #8]
 800b43e:	e7df      	b.n	800b400 <_vfiprintf_r+0x20>
 800b440:	4b79      	ldr	r3, [pc, #484]	; (800b628 <_vfiprintf_r+0x248>)
 800b442:	429d      	cmp	r5, r3
 800b444:	bf08      	it	eq
 800b446:	68f5      	ldreq	r5, [r6, #12]
 800b448:	e7da      	b.n	800b400 <_vfiprintf_r+0x20>
 800b44a:	89ab      	ldrh	r3, [r5, #12]
 800b44c:	0598      	lsls	r0, r3, #22
 800b44e:	d4ed      	bmi.n	800b42c <_vfiprintf_r+0x4c>
 800b450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b452:	f000 fb76 	bl	800bb42 <__retarget_lock_release_recursive>
 800b456:	e7e9      	b.n	800b42c <_vfiprintf_r+0x4c>
 800b458:	2300      	movs	r3, #0
 800b45a:	9309      	str	r3, [sp, #36]	; 0x24
 800b45c:	2320      	movs	r3, #32
 800b45e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b462:	f8cd 800c 	str.w	r8, [sp, #12]
 800b466:	2330      	movs	r3, #48	; 0x30
 800b468:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b62c <_vfiprintf_r+0x24c>
 800b46c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b470:	f04f 0901 	mov.w	r9, #1
 800b474:	4623      	mov	r3, r4
 800b476:	469a      	mov	sl, r3
 800b478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b47c:	b10a      	cbz	r2, 800b482 <_vfiprintf_r+0xa2>
 800b47e:	2a25      	cmp	r2, #37	; 0x25
 800b480:	d1f9      	bne.n	800b476 <_vfiprintf_r+0x96>
 800b482:	ebba 0b04 	subs.w	fp, sl, r4
 800b486:	d00b      	beq.n	800b4a0 <_vfiprintf_r+0xc0>
 800b488:	465b      	mov	r3, fp
 800b48a:	4622      	mov	r2, r4
 800b48c:	4629      	mov	r1, r5
 800b48e:	4630      	mov	r0, r6
 800b490:	f7ff ff94 	bl	800b3bc <__sfputs_r>
 800b494:	3001      	adds	r0, #1
 800b496:	f000 80aa 	beq.w	800b5ee <_vfiprintf_r+0x20e>
 800b49a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b49c:	445a      	add	r2, fp
 800b49e:	9209      	str	r2, [sp, #36]	; 0x24
 800b4a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 80a2 	beq.w	800b5ee <_vfiprintf_r+0x20e>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4b4:	f10a 0a01 	add.w	sl, sl, #1
 800b4b8:	9304      	str	r3, [sp, #16]
 800b4ba:	9307      	str	r3, [sp, #28]
 800b4bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4c0:	931a      	str	r3, [sp, #104]	; 0x68
 800b4c2:	4654      	mov	r4, sl
 800b4c4:	2205      	movs	r2, #5
 800b4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ca:	4858      	ldr	r0, [pc, #352]	; (800b62c <_vfiprintf_r+0x24c>)
 800b4cc:	f7f4 fec0 	bl	8000250 <memchr>
 800b4d0:	9a04      	ldr	r2, [sp, #16]
 800b4d2:	b9d8      	cbnz	r0, 800b50c <_vfiprintf_r+0x12c>
 800b4d4:	06d1      	lsls	r1, r2, #27
 800b4d6:	bf44      	itt	mi
 800b4d8:	2320      	movmi	r3, #32
 800b4da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4de:	0713      	lsls	r3, r2, #28
 800b4e0:	bf44      	itt	mi
 800b4e2:	232b      	movmi	r3, #43	; 0x2b
 800b4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ec:	2b2a      	cmp	r3, #42	; 0x2a
 800b4ee:	d015      	beq.n	800b51c <_vfiprintf_r+0x13c>
 800b4f0:	9a07      	ldr	r2, [sp, #28]
 800b4f2:	4654      	mov	r4, sl
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	f04f 0c0a 	mov.w	ip, #10
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b500:	3b30      	subs	r3, #48	; 0x30
 800b502:	2b09      	cmp	r3, #9
 800b504:	d94e      	bls.n	800b5a4 <_vfiprintf_r+0x1c4>
 800b506:	b1b0      	cbz	r0, 800b536 <_vfiprintf_r+0x156>
 800b508:	9207      	str	r2, [sp, #28]
 800b50a:	e014      	b.n	800b536 <_vfiprintf_r+0x156>
 800b50c:	eba0 0308 	sub.w	r3, r0, r8
 800b510:	fa09 f303 	lsl.w	r3, r9, r3
 800b514:	4313      	orrs	r3, r2
 800b516:	9304      	str	r3, [sp, #16]
 800b518:	46a2      	mov	sl, r4
 800b51a:	e7d2      	b.n	800b4c2 <_vfiprintf_r+0xe2>
 800b51c:	9b03      	ldr	r3, [sp, #12]
 800b51e:	1d19      	adds	r1, r3, #4
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	9103      	str	r1, [sp, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	bfbb      	ittet	lt
 800b528:	425b      	neglt	r3, r3
 800b52a:	f042 0202 	orrlt.w	r2, r2, #2
 800b52e:	9307      	strge	r3, [sp, #28]
 800b530:	9307      	strlt	r3, [sp, #28]
 800b532:	bfb8      	it	lt
 800b534:	9204      	strlt	r2, [sp, #16]
 800b536:	7823      	ldrb	r3, [r4, #0]
 800b538:	2b2e      	cmp	r3, #46	; 0x2e
 800b53a:	d10c      	bne.n	800b556 <_vfiprintf_r+0x176>
 800b53c:	7863      	ldrb	r3, [r4, #1]
 800b53e:	2b2a      	cmp	r3, #42	; 0x2a
 800b540:	d135      	bne.n	800b5ae <_vfiprintf_r+0x1ce>
 800b542:	9b03      	ldr	r3, [sp, #12]
 800b544:	1d1a      	adds	r2, r3, #4
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	9203      	str	r2, [sp, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	bfb8      	it	lt
 800b54e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b552:	3402      	adds	r4, #2
 800b554:	9305      	str	r3, [sp, #20]
 800b556:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b63c <_vfiprintf_r+0x25c>
 800b55a:	7821      	ldrb	r1, [r4, #0]
 800b55c:	2203      	movs	r2, #3
 800b55e:	4650      	mov	r0, sl
 800b560:	f7f4 fe76 	bl	8000250 <memchr>
 800b564:	b140      	cbz	r0, 800b578 <_vfiprintf_r+0x198>
 800b566:	2340      	movs	r3, #64	; 0x40
 800b568:	eba0 000a 	sub.w	r0, r0, sl
 800b56c:	fa03 f000 	lsl.w	r0, r3, r0
 800b570:	9b04      	ldr	r3, [sp, #16]
 800b572:	4303      	orrs	r3, r0
 800b574:	3401      	adds	r4, #1
 800b576:	9304      	str	r3, [sp, #16]
 800b578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b57c:	482c      	ldr	r0, [pc, #176]	; (800b630 <_vfiprintf_r+0x250>)
 800b57e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b582:	2206      	movs	r2, #6
 800b584:	f7f4 fe64 	bl	8000250 <memchr>
 800b588:	2800      	cmp	r0, #0
 800b58a:	d03f      	beq.n	800b60c <_vfiprintf_r+0x22c>
 800b58c:	4b29      	ldr	r3, [pc, #164]	; (800b634 <_vfiprintf_r+0x254>)
 800b58e:	bb1b      	cbnz	r3, 800b5d8 <_vfiprintf_r+0x1f8>
 800b590:	9b03      	ldr	r3, [sp, #12]
 800b592:	3307      	adds	r3, #7
 800b594:	f023 0307 	bic.w	r3, r3, #7
 800b598:	3308      	adds	r3, #8
 800b59a:	9303      	str	r3, [sp, #12]
 800b59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b59e:	443b      	add	r3, r7
 800b5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a2:	e767      	b.n	800b474 <_vfiprintf_r+0x94>
 800b5a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	2001      	movs	r0, #1
 800b5ac:	e7a5      	b.n	800b4fa <_vfiprintf_r+0x11a>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	3401      	adds	r4, #1
 800b5b2:	9305      	str	r3, [sp, #20]
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	f04f 0c0a 	mov.w	ip, #10
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5c0:	3a30      	subs	r2, #48	; 0x30
 800b5c2:	2a09      	cmp	r2, #9
 800b5c4:	d903      	bls.n	800b5ce <_vfiprintf_r+0x1ee>
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d0c5      	beq.n	800b556 <_vfiprintf_r+0x176>
 800b5ca:	9105      	str	r1, [sp, #20]
 800b5cc:	e7c3      	b.n	800b556 <_vfiprintf_r+0x176>
 800b5ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e7f0      	b.n	800b5ba <_vfiprintf_r+0x1da>
 800b5d8:	ab03      	add	r3, sp, #12
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	462a      	mov	r2, r5
 800b5de:	4b16      	ldr	r3, [pc, #88]	; (800b638 <_vfiprintf_r+0x258>)
 800b5e0:	a904      	add	r1, sp, #16
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f7fc f920 	bl	8007828 <_printf_float>
 800b5e8:	4607      	mov	r7, r0
 800b5ea:	1c78      	adds	r0, r7, #1
 800b5ec:	d1d6      	bne.n	800b59c <_vfiprintf_r+0x1bc>
 800b5ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5f0:	07d9      	lsls	r1, r3, #31
 800b5f2:	d405      	bmi.n	800b600 <_vfiprintf_r+0x220>
 800b5f4:	89ab      	ldrh	r3, [r5, #12]
 800b5f6:	059a      	lsls	r2, r3, #22
 800b5f8:	d402      	bmi.n	800b600 <_vfiprintf_r+0x220>
 800b5fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5fc:	f000 faa1 	bl	800bb42 <__retarget_lock_release_recursive>
 800b600:	89ab      	ldrh	r3, [r5, #12]
 800b602:	065b      	lsls	r3, r3, #25
 800b604:	f53f af12 	bmi.w	800b42c <_vfiprintf_r+0x4c>
 800b608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b60a:	e711      	b.n	800b430 <_vfiprintf_r+0x50>
 800b60c:	ab03      	add	r3, sp, #12
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	462a      	mov	r2, r5
 800b612:	4b09      	ldr	r3, [pc, #36]	; (800b638 <_vfiprintf_r+0x258>)
 800b614:	a904      	add	r1, sp, #16
 800b616:	4630      	mov	r0, r6
 800b618:	f7fc fb92 	bl	8007d40 <_printf_i>
 800b61c:	e7e4      	b.n	800b5e8 <_vfiprintf_r+0x208>
 800b61e:	bf00      	nop
 800b620:	0800c304 	.word	0x0800c304
 800b624:	0800c324 	.word	0x0800c324
 800b628:	0800c2e4 	.word	0x0800c2e4
 800b62c:	0800c294 	.word	0x0800c294
 800b630:	0800c29e 	.word	0x0800c29e
 800b634:	08007829 	.word	0x08007829
 800b638:	0800b3bd 	.word	0x0800b3bd
 800b63c:	0800c29a 	.word	0x0800c29a

0800b640 <__swbuf_r>:
 800b640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b642:	460e      	mov	r6, r1
 800b644:	4614      	mov	r4, r2
 800b646:	4605      	mov	r5, r0
 800b648:	b118      	cbz	r0, 800b652 <__swbuf_r+0x12>
 800b64a:	6983      	ldr	r3, [r0, #24]
 800b64c:	b90b      	cbnz	r3, 800b652 <__swbuf_r+0x12>
 800b64e:	f000 f9d9 	bl	800ba04 <__sinit>
 800b652:	4b21      	ldr	r3, [pc, #132]	; (800b6d8 <__swbuf_r+0x98>)
 800b654:	429c      	cmp	r4, r3
 800b656:	d12b      	bne.n	800b6b0 <__swbuf_r+0x70>
 800b658:	686c      	ldr	r4, [r5, #4]
 800b65a:	69a3      	ldr	r3, [r4, #24]
 800b65c:	60a3      	str	r3, [r4, #8]
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	071a      	lsls	r2, r3, #28
 800b662:	d52f      	bpl.n	800b6c4 <__swbuf_r+0x84>
 800b664:	6923      	ldr	r3, [r4, #16]
 800b666:	b36b      	cbz	r3, 800b6c4 <__swbuf_r+0x84>
 800b668:	6923      	ldr	r3, [r4, #16]
 800b66a:	6820      	ldr	r0, [r4, #0]
 800b66c:	1ac0      	subs	r0, r0, r3
 800b66e:	6963      	ldr	r3, [r4, #20]
 800b670:	b2f6      	uxtb	r6, r6
 800b672:	4283      	cmp	r3, r0
 800b674:	4637      	mov	r7, r6
 800b676:	dc04      	bgt.n	800b682 <__swbuf_r+0x42>
 800b678:	4621      	mov	r1, r4
 800b67a:	4628      	mov	r0, r5
 800b67c:	f000 f92e 	bl	800b8dc <_fflush_r>
 800b680:	bb30      	cbnz	r0, 800b6d0 <__swbuf_r+0x90>
 800b682:	68a3      	ldr	r3, [r4, #8]
 800b684:	3b01      	subs	r3, #1
 800b686:	60a3      	str	r3, [r4, #8]
 800b688:	6823      	ldr	r3, [r4, #0]
 800b68a:	1c5a      	adds	r2, r3, #1
 800b68c:	6022      	str	r2, [r4, #0]
 800b68e:	701e      	strb	r6, [r3, #0]
 800b690:	6963      	ldr	r3, [r4, #20]
 800b692:	3001      	adds	r0, #1
 800b694:	4283      	cmp	r3, r0
 800b696:	d004      	beq.n	800b6a2 <__swbuf_r+0x62>
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	07db      	lsls	r3, r3, #31
 800b69c:	d506      	bpl.n	800b6ac <__swbuf_r+0x6c>
 800b69e:	2e0a      	cmp	r6, #10
 800b6a0:	d104      	bne.n	800b6ac <__swbuf_r+0x6c>
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	f000 f919 	bl	800b8dc <_fflush_r>
 800b6aa:	b988      	cbnz	r0, 800b6d0 <__swbuf_r+0x90>
 800b6ac:	4638      	mov	r0, r7
 800b6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6b0:	4b0a      	ldr	r3, [pc, #40]	; (800b6dc <__swbuf_r+0x9c>)
 800b6b2:	429c      	cmp	r4, r3
 800b6b4:	d101      	bne.n	800b6ba <__swbuf_r+0x7a>
 800b6b6:	68ac      	ldr	r4, [r5, #8]
 800b6b8:	e7cf      	b.n	800b65a <__swbuf_r+0x1a>
 800b6ba:	4b09      	ldr	r3, [pc, #36]	; (800b6e0 <__swbuf_r+0xa0>)
 800b6bc:	429c      	cmp	r4, r3
 800b6be:	bf08      	it	eq
 800b6c0:	68ec      	ldreq	r4, [r5, #12]
 800b6c2:	e7ca      	b.n	800b65a <__swbuf_r+0x1a>
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	f000 f80c 	bl	800b6e4 <__swsetup_r>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d0cb      	beq.n	800b668 <__swbuf_r+0x28>
 800b6d0:	f04f 37ff 	mov.w	r7, #4294967295
 800b6d4:	e7ea      	b.n	800b6ac <__swbuf_r+0x6c>
 800b6d6:	bf00      	nop
 800b6d8:	0800c304 	.word	0x0800c304
 800b6dc:	0800c324 	.word	0x0800c324
 800b6e0:	0800c2e4 	.word	0x0800c2e4

0800b6e4 <__swsetup_r>:
 800b6e4:	4b32      	ldr	r3, [pc, #200]	; (800b7b0 <__swsetup_r+0xcc>)
 800b6e6:	b570      	push	{r4, r5, r6, lr}
 800b6e8:	681d      	ldr	r5, [r3, #0]
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	460c      	mov	r4, r1
 800b6ee:	b125      	cbz	r5, 800b6fa <__swsetup_r+0x16>
 800b6f0:	69ab      	ldr	r3, [r5, #24]
 800b6f2:	b913      	cbnz	r3, 800b6fa <__swsetup_r+0x16>
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	f000 f985 	bl	800ba04 <__sinit>
 800b6fa:	4b2e      	ldr	r3, [pc, #184]	; (800b7b4 <__swsetup_r+0xd0>)
 800b6fc:	429c      	cmp	r4, r3
 800b6fe:	d10f      	bne.n	800b720 <__swsetup_r+0x3c>
 800b700:	686c      	ldr	r4, [r5, #4]
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b708:	0719      	lsls	r1, r3, #28
 800b70a:	d42c      	bmi.n	800b766 <__swsetup_r+0x82>
 800b70c:	06dd      	lsls	r5, r3, #27
 800b70e:	d411      	bmi.n	800b734 <__swsetup_r+0x50>
 800b710:	2309      	movs	r3, #9
 800b712:	6033      	str	r3, [r6, #0]
 800b714:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b718:	81a3      	strh	r3, [r4, #12]
 800b71a:	f04f 30ff 	mov.w	r0, #4294967295
 800b71e:	e03e      	b.n	800b79e <__swsetup_r+0xba>
 800b720:	4b25      	ldr	r3, [pc, #148]	; (800b7b8 <__swsetup_r+0xd4>)
 800b722:	429c      	cmp	r4, r3
 800b724:	d101      	bne.n	800b72a <__swsetup_r+0x46>
 800b726:	68ac      	ldr	r4, [r5, #8]
 800b728:	e7eb      	b.n	800b702 <__swsetup_r+0x1e>
 800b72a:	4b24      	ldr	r3, [pc, #144]	; (800b7bc <__swsetup_r+0xd8>)
 800b72c:	429c      	cmp	r4, r3
 800b72e:	bf08      	it	eq
 800b730:	68ec      	ldreq	r4, [r5, #12]
 800b732:	e7e6      	b.n	800b702 <__swsetup_r+0x1e>
 800b734:	0758      	lsls	r0, r3, #29
 800b736:	d512      	bpl.n	800b75e <__swsetup_r+0x7a>
 800b738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b73a:	b141      	cbz	r1, 800b74e <__swsetup_r+0x6a>
 800b73c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b740:	4299      	cmp	r1, r3
 800b742:	d002      	beq.n	800b74a <__swsetup_r+0x66>
 800b744:	4630      	mov	r0, r6
 800b746:	f7ff fb25 	bl	800ad94 <_free_r>
 800b74a:	2300      	movs	r3, #0
 800b74c:	6363      	str	r3, [r4, #52]	; 0x34
 800b74e:	89a3      	ldrh	r3, [r4, #12]
 800b750:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b754:	81a3      	strh	r3, [r4, #12]
 800b756:	2300      	movs	r3, #0
 800b758:	6063      	str	r3, [r4, #4]
 800b75a:	6923      	ldr	r3, [r4, #16]
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	f043 0308 	orr.w	r3, r3, #8
 800b764:	81a3      	strh	r3, [r4, #12]
 800b766:	6923      	ldr	r3, [r4, #16]
 800b768:	b94b      	cbnz	r3, 800b77e <__swsetup_r+0x9a>
 800b76a:	89a3      	ldrh	r3, [r4, #12]
 800b76c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b774:	d003      	beq.n	800b77e <__swsetup_r+0x9a>
 800b776:	4621      	mov	r1, r4
 800b778:	4630      	mov	r0, r6
 800b77a:	f000 fa09 	bl	800bb90 <__smakebuf_r>
 800b77e:	89a0      	ldrh	r0, [r4, #12]
 800b780:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b784:	f010 0301 	ands.w	r3, r0, #1
 800b788:	d00a      	beq.n	800b7a0 <__swsetup_r+0xbc>
 800b78a:	2300      	movs	r3, #0
 800b78c:	60a3      	str	r3, [r4, #8]
 800b78e:	6963      	ldr	r3, [r4, #20]
 800b790:	425b      	negs	r3, r3
 800b792:	61a3      	str	r3, [r4, #24]
 800b794:	6923      	ldr	r3, [r4, #16]
 800b796:	b943      	cbnz	r3, 800b7aa <__swsetup_r+0xc6>
 800b798:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b79c:	d1ba      	bne.n	800b714 <__swsetup_r+0x30>
 800b79e:	bd70      	pop	{r4, r5, r6, pc}
 800b7a0:	0781      	lsls	r1, r0, #30
 800b7a2:	bf58      	it	pl
 800b7a4:	6963      	ldrpl	r3, [r4, #20]
 800b7a6:	60a3      	str	r3, [r4, #8]
 800b7a8:	e7f4      	b.n	800b794 <__swsetup_r+0xb0>
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	e7f7      	b.n	800b79e <__swsetup_r+0xba>
 800b7ae:	bf00      	nop
 800b7b0:	20000038 	.word	0x20000038
 800b7b4:	0800c304 	.word	0x0800c304
 800b7b8:	0800c324 	.word	0x0800c324
 800b7bc:	0800c2e4 	.word	0x0800c2e4

0800b7c0 <abort>:
 800b7c0:	b508      	push	{r3, lr}
 800b7c2:	2006      	movs	r0, #6
 800b7c4:	f000 fa54 	bl	800bc70 <raise>
 800b7c8:	2001      	movs	r0, #1
 800b7ca:	f7f6 fb35 	bl	8001e38 <_exit>
	...

0800b7d0 <__sflush_r>:
 800b7d0:	898a      	ldrh	r2, [r1, #12]
 800b7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	0710      	lsls	r0, r2, #28
 800b7da:	460c      	mov	r4, r1
 800b7dc:	d458      	bmi.n	800b890 <__sflush_r+0xc0>
 800b7de:	684b      	ldr	r3, [r1, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	dc05      	bgt.n	800b7f0 <__sflush_r+0x20>
 800b7e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	dc02      	bgt.n	800b7f0 <__sflush_r+0x20>
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7f2:	2e00      	cmp	r6, #0
 800b7f4:	d0f9      	beq.n	800b7ea <__sflush_r+0x1a>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7fc:	682f      	ldr	r7, [r5, #0]
 800b7fe:	602b      	str	r3, [r5, #0]
 800b800:	d032      	beq.n	800b868 <__sflush_r+0x98>
 800b802:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b804:	89a3      	ldrh	r3, [r4, #12]
 800b806:	075a      	lsls	r2, r3, #29
 800b808:	d505      	bpl.n	800b816 <__sflush_r+0x46>
 800b80a:	6863      	ldr	r3, [r4, #4]
 800b80c:	1ac0      	subs	r0, r0, r3
 800b80e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b810:	b10b      	cbz	r3, 800b816 <__sflush_r+0x46>
 800b812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b814:	1ac0      	subs	r0, r0, r3
 800b816:	2300      	movs	r3, #0
 800b818:	4602      	mov	r2, r0
 800b81a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b81c:	6a21      	ldr	r1, [r4, #32]
 800b81e:	4628      	mov	r0, r5
 800b820:	47b0      	blx	r6
 800b822:	1c43      	adds	r3, r0, #1
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	d106      	bne.n	800b836 <__sflush_r+0x66>
 800b828:	6829      	ldr	r1, [r5, #0]
 800b82a:	291d      	cmp	r1, #29
 800b82c:	d82c      	bhi.n	800b888 <__sflush_r+0xb8>
 800b82e:	4a2a      	ldr	r2, [pc, #168]	; (800b8d8 <__sflush_r+0x108>)
 800b830:	40ca      	lsrs	r2, r1
 800b832:	07d6      	lsls	r6, r2, #31
 800b834:	d528      	bpl.n	800b888 <__sflush_r+0xb8>
 800b836:	2200      	movs	r2, #0
 800b838:	6062      	str	r2, [r4, #4]
 800b83a:	04d9      	lsls	r1, r3, #19
 800b83c:	6922      	ldr	r2, [r4, #16]
 800b83e:	6022      	str	r2, [r4, #0]
 800b840:	d504      	bpl.n	800b84c <__sflush_r+0x7c>
 800b842:	1c42      	adds	r2, r0, #1
 800b844:	d101      	bne.n	800b84a <__sflush_r+0x7a>
 800b846:	682b      	ldr	r3, [r5, #0]
 800b848:	b903      	cbnz	r3, 800b84c <__sflush_r+0x7c>
 800b84a:	6560      	str	r0, [r4, #84]	; 0x54
 800b84c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b84e:	602f      	str	r7, [r5, #0]
 800b850:	2900      	cmp	r1, #0
 800b852:	d0ca      	beq.n	800b7ea <__sflush_r+0x1a>
 800b854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b858:	4299      	cmp	r1, r3
 800b85a:	d002      	beq.n	800b862 <__sflush_r+0x92>
 800b85c:	4628      	mov	r0, r5
 800b85e:	f7ff fa99 	bl	800ad94 <_free_r>
 800b862:	2000      	movs	r0, #0
 800b864:	6360      	str	r0, [r4, #52]	; 0x34
 800b866:	e7c1      	b.n	800b7ec <__sflush_r+0x1c>
 800b868:	6a21      	ldr	r1, [r4, #32]
 800b86a:	2301      	movs	r3, #1
 800b86c:	4628      	mov	r0, r5
 800b86e:	47b0      	blx	r6
 800b870:	1c41      	adds	r1, r0, #1
 800b872:	d1c7      	bne.n	800b804 <__sflush_r+0x34>
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d0c4      	beq.n	800b804 <__sflush_r+0x34>
 800b87a:	2b1d      	cmp	r3, #29
 800b87c:	d001      	beq.n	800b882 <__sflush_r+0xb2>
 800b87e:	2b16      	cmp	r3, #22
 800b880:	d101      	bne.n	800b886 <__sflush_r+0xb6>
 800b882:	602f      	str	r7, [r5, #0]
 800b884:	e7b1      	b.n	800b7ea <__sflush_r+0x1a>
 800b886:	89a3      	ldrh	r3, [r4, #12]
 800b888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b88c:	81a3      	strh	r3, [r4, #12]
 800b88e:	e7ad      	b.n	800b7ec <__sflush_r+0x1c>
 800b890:	690f      	ldr	r7, [r1, #16]
 800b892:	2f00      	cmp	r7, #0
 800b894:	d0a9      	beq.n	800b7ea <__sflush_r+0x1a>
 800b896:	0793      	lsls	r3, r2, #30
 800b898:	680e      	ldr	r6, [r1, #0]
 800b89a:	bf08      	it	eq
 800b89c:	694b      	ldreq	r3, [r1, #20]
 800b89e:	600f      	str	r7, [r1, #0]
 800b8a0:	bf18      	it	ne
 800b8a2:	2300      	movne	r3, #0
 800b8a4:	eba6 0807 	sub.w	r8, r6, r7
 800b8a8:	608b      	str	r3, [r1, #8]
 800b8aa:	f1b8 0f00 	cmp.w	r8, #0
 800b8ae:	dd9c      	ble.n	800b7ea <__sflush_r+0x1a>
 800b8b0:	6a21      	ldr	r1, [r4, #32]
 800b8b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8b4:	4643      	mov	r3, r8
 800b8b6:	463a      	mov	r2, r7
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	47b0      	blx	r6
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	dc06      	bgt.n	800b8ce <__sflush_r+0xfe>
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8cc:	e78e      	b.n	800b7ec <__sflush_r+0x1c>
 800b8ce:	4407      	add	r7, r0
 800b8d0:	eba8 0800 	sub.w	r8, r8, r0
 800b8d4:	e7e9      	b.n	800b8aa <__sflush_r+0xda>
 800b8d6:	bf00      	nop
 800b8d8:	20400001 	.word	0x20400001

0800b8dc <_fflush_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	690b      	ldr	r3, [r1, #16]
 800b8e0:	4605      	mov	r5, r0
 800b8e2:	460c      	mov	r4, r1
 800b8e4:	b913      	cbnz	r3, 800b8ec <_fflush_r+0x10>
 800b8e6:	2500      	movs	r5, #0
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	bd38      	pop	{r3, r4, r5, pc}
 800b8ec:	b118      	cbz	r0, 800b8f6 <_fflush_r+0x1a>
 800b8ee:	6983      	ldr	r3, [r0, #24]
 800b8f0:	b90b      	cbnz	r3, 800b8f6 <_fflush_r+0x1a>
 800b8f2:	f000 f887 	bl	800ba04 <__sinit>
 800b8f6:	4b14      	ldr	r3, [pc, #80]	; (800b948 <_fflush_r+0x6c>)
 800b8f8:	429c      	cmp	r4, r3
 800b8fa:	d11b      	bne.n	800b934 <_fflush_r+0x58>
 800b8fc:	686c      	ldr	r4, [r5, #4]
 800b8fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d0ef      	beq.n	800b8e6 <_fflush_r+0xa>
 800b906:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b908:	07d0      	lsls	r0, r2, #31
 800b90a:	d404      	bmi.n	800b916 <_fflush_r+0x3a>
 800b90c:	0599      	lsls	r1, r3, #22
 800b90e:	d402      	bmi.n	800b916 <_fflush_r+0x3a>
 800b910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b912:	f000 f915 	bl	800bb40 <__retarget_lock_acquire_recursive>
 800b916:	4628      	mov	r0, r5
 800b918:	4621      	mov	r1, r4
 800b91a:	f7ff ff59 	bl	800b7d0 <__sflush_r>
 800b91e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b920:	07da      	lsls	r2, r3, #31
 800b922:	4605      	mov	r5, r0
 800b924:	d4e0      	bmi.n	800b8e8 <_fflush_r+0xc>
 800b926:	89a3      	ldrh	r3, [r4, #12]
 800b928:	059b      	lsls	r3, r3, #22
 800b92a:	d4dd      	bmi.n	800b8e8 <_fflush_r+0xc>
 800b92c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b92e:	f000 f908 	bl	800bb42 <__retarget_lock_release_recursive>
 800b932:	e7d9      	b.n	800b8e8 <_fflush_r+0xc>
 800b934:	4b05      	ldr	r3, [pc, #20]	; (800b94c <_fflush_r+0x70>)
 800b936:	429c      	cmp	r4, r3
 800b938:	d101      	bne.n	800b93e <_fflush_r+0x62>
 800b93a:	68ac      	ldr	r4, [r5, #8]
 800b93c:	e7df      	b.n	800b8fe <_fflush_r+0x22>
 800b93e:	4b04      	ldr	r3, [pc, #16]	; (800b950 <_fflush_r+0x74>)
 800b940:	429c      	cmp	r4, r3
 800b942:	bf08      	it	eq
 800b944:	68ec      	ldreq	r4, [r5, #12]
 800b946:	e7da      	b.n	800b8fe <_fflush_r+0x22>
 800b948:	0800c304 	.word	0x0800c304
 800b94c:	0800c324 	.word	0x0800c324
 800b950:	0800c2e4 	.word	0x0800c2e4

0800b954 <std>:
 800b954:	2300      	movs	r3, #0
 800b956:	b510      	push	{r4, lr}
 800b958:	4604      	mov	r4, r0
 800b95a:	e9c0 3300 	strd	r3, r3, [r0]
 800b95e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b962:	6083      	str	r3, [r0, #8]
 800b964:	8181      	strh	r1, [r0, #12]
 800b966:	6643      	str	r3, [r0, #100]	; 0x64
 800b968:	81c2      	strh	r2, [r0, #14]
 800b96a:	6183      	str	r3, [r0, #24]
 800b96c:	4619      	mov	r1, r3
 800b96e:	2208      	movs	r2, #8
 800b970:	305c      	adds	r0, #92	; 0x5c
 800b972:	f7fb febf 	bl	80076f4 <memset>
 800b976:	4b05      	ldr	r3, [pc, #20]	; (800b98c <std+0x38>)
 800b978:	6263      	str	r3, [r4, #36]	; 0x24
 800b97a:	4b05      	ldr	r3, [pc, #20]	; (800b990 <std+0x3c>)
 800b97c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b97e:	4b05      	ldr	r3, [pc, #20]	; (800b994 <std+0x40>)
 800b980:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b982:	4b05      	ldr	r3, [pc, #20]	; (800b998 <std+0x44>)
 800b984:	6224      	str	r4, [r4, #32]
 800b986:	6323      	str	r3, [r4, #48]	; 0x30
 800b988:	bd10      	pop	{r4, pc}
 800b98a:	bf00      	nop
 800b98c:	0800bca9 	.word	0x0800bca9
 800b990:	0800bccb 	.word	0x0800bccb
 800b994:	0800bd03 	.word	0x0800bd03
 800b998:	0800bd27 	.word	0x0800bd27

0800b99c <_cleanup_r>:
 800b99c:	4901      	ldr	r1, [pc, #4]	; (800b9a4 <_cleanup_r+0x8>)
 800b99e:	f000 b8af 	b.w	800bb00 <_fwalk_reent>
 800b9a2:	bf00      	nop
 800b9a4:	0800b8dd 	.word	0x0800b8dd

0800b9a8 <__sfmoreglue>:
 800b9a8:	b570      	push	{r4, r5, r6, lr}
 800b9aa:	2268      	movs	r2, #104	; 0x68
 800b9ac:	1e4d      	subs	r5, r1, #1
 800b9ae:	4355      	muls	r5, r2
 800b9b0:	460e      	mov	r6, r1
 800b9b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b9b6:	f7ff fa59 	bl	800ae6c <_malloc_r>
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	b140      	cbz	r0, 800b9d0 <__sfmoreglue+0x28>
 800b9be:	2100      	movs	r1, #0
 800b9c0:	e9c0 1600 	strd	r1, r6, [r0]
 800b9c4:	300c      	adds	r0, #12
 800b9c6:	60a0      	str	r0, [r4, #8]
 800b9c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b9cc:	f7fb fe92 	bl	80076f4 <memset>
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	bd70      	pop	{r4, r5, r6, pc}

0800b9d4 <__sfp_lock_acquire>:
 800b9d4:	4801      	ldr	r0, [pc, #4]	; (800b9dc <__sfp_lock_acquire+0x8>)
 800b9d6:	f000 b8b3 	b.w	800bb40 <__retarget_lock_acquire_recursive>
 800b9da:	bf00      	nop
 800b9dc:	200008ed 	.word	0x200008ed

0800b9e0 <__sfp_lock_release>:
 800b9e0:	4801      	ldr	r0, [pc, #4]	; (800b9e8 <__sfp_lock_release+0x8>)
 800b9e2:	f000 b8ae 	b.w	800bb42 <__retarget_lock_release_recursive>
 800b9e6:	bf00      	nop
 800b9e8:	200008ed 	.word	0x200008ed

0800b9ec <__sinit_lock_acquire>:
 800b9ec:	4801      	ldr	r0, [pc, #4]	; (800b9f4 <__sinit_lock_acquire+0x8>)
 800b9ee:	f000 b8a7 	b.w	800bb40 <__retarget_lock_acquire_recursive>
 800b9f2:	bf00      	nop
 800b9f4:	200008ee 	.word	0x200008ee

0800b9f8 <__sinit_lock_release>:
 800b9f8:	4801      	ldr	r0, [pc, #4]	; (800ba00 <__sinit_lock_release+0x8>)
 800b9fa:	f000 b8a2 	b.w	800bb42 <__retarget_lock_release_recursive>
 800b9fe:	bf00      	nop
 800ba00:	200008ee 	.word	0x200008ee

0800ba04 <__sinit>:
 800ba04:	b510      	push	{r4, lr}
 800ba06:	4604      	mov	r4, r0
 800ba08:	f7ff fff0 	bl	800b9ec <__sinit_lock_acquire>
 800ba0c:	69a3      	ldr	r3, [r4, #24]
 800ba0e:	b11b      	cbz	r3, 800ba18 <__sinit+0x14>
 800ba10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba14:	f7ff bff0 	b.w	800b9f8 <__sinit_lock_release>
 800ba18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba1c:	6523      	str	r3, [r4, #80]	; 0x50
 800ba1e:	4b13      	ldr	r3, [pc, #76]	; (800ba6c <__sinit+0x68>)
 800ba20:	4a13      	ldr	r2, [pc, #76]	; (800ba70 <__sinit+0x6c>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba26:	42a3      	cmp	r3, r4
 800ba28:	bf04      	itt	eq
 800ba2a:	2301      	moveq	r3, #1
 800ba2c:	61a3      	streq	r3, [r4, #24]
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f000 f820 	bl	800ba74 <__sfp>
 800ba34:	6060      	str	r0, [r4, #4]
 800ba36:	4620      	mov	r0, r4
 800ba38:	f000 f81c 	bl	800ba74 <__sfp>
 800ba3c:	60a0      	str	r0, [r4, #8]
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f000 f818 	bl	800ba74 <__sfp>
 800ba44:	2200      	movs	r2, #0
 800ba46:	60e0      	str	r0, [r4, #12]
 800ba48:	2104      	movs	r1, #4
 800ba4a:	6860      	ldr	r0, [r4, #4]
 800ba4c:	f7ff ff82 	bl	800b954 <std>
 800ba50:	68a0      	ldr	r0, [r4, #8]
 800ba52:	2201      	movs	r2, #1
 800ba54:	2109      	movs	r1, #9
 800ba56:	f7ff ff7d 	bl	800b954 <std>
 800ba5a:	68e0      	ldr	r0, [r4, #12]
 800ba5c:	2202      	movs	r2, #2
 800ba5e:	2112      	movs	r1, #18
 800ba60:	f7ff ff78 	bl	800b954 <std>
 800ba64:	2301      	movs	r3, #1
 800ba66:	61a3      	str	r3, [r4, #24]
 800ba68:	e7d2      	b.n	800ba10 <__sinit+0xc>
 800ba6a:	bf00      	nop
 800ba6c:	0800be9c 	.word	0x0800be9c
 800ba70:	0800b99d 	.word	0x0800b99d

0800ba74 <__sfp>:
 800ba74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba76:	4607      	mov	r7, r0
 800ba78:	f7ff ffac 	bl	800b9d4 <__sfp_lock_acquire>
 800ba7c:	4b1e      	ldr	r3, [pc, #120]	; (800baf8 <__sfp+0x84>)
 800ba7e:	681e      	ldr	r6, [r3, #0]
 800ba80:	69b3      	ldr	r3, [r6, #24]
 800ba82:	b913      	cbnz	r3, 800ba8a <__sfp+0x16>
 800ba84:	4630      	mov	r0, r6
 800ba86:	f7ff ffbd 	bl	800ba04 <__sinit>
 800ba8a:	3648      	adds	r6, #72	; 0x48
 800ba8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba90:	3b01      	subs	r3, #1
 800ba92:	d503      	bpl.n	800ba9c <__sfp+0x28>
 800ba94:	6833      	ldr	r3, [r6, #0]
 800ba96:	b30b      	cbz	r3, 800badc <__sfp+0x68>
 800ba98:	6836      	ldr	r6, [r6, #0]
 800ba9a:	e7f7      	b.n	800ba8c <__sfp+0x18>
 800ba9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800baa0:	b9d5      	cbnz	r5, 800bad8 <__sfp+0x64>
 800baa2:	4b16      	ldr	r3, [pc, #88]	; (800bafc <__sfp+0x88>)
 800baa4:	60e3      	str	r3, [r4, #12]
 800baa6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800baaa:	6665      	str	r5, [r4, #100]	; 0x64
 800baac:	f000 f847 	bl	800bb3e <__retarget_lock_init_recursive>
 800bab0:	f7ff ff96 	bl	800b9e0 <__sfp_lock_release>
 800bab4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bab8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800babc:	6025      	str	r5, [r4, #0]
 800babe:	61a5      	str	r5, [r4, #24]
 800bac0:	2208      	movs	r2, #8
 800bac2:	4629      	mov	r1, r5
 800bac4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bac8:	f7fb fe14 	bl	80076f4 <memset>
 800bacc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bad0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bad4:	4620      	mov	r0, r4
 800bad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bad8:	3468      	adds	r4, #104	; 0x68
 800bada:	e7d9      	b.n	800ba90 <__sfp+0x1c>
 800badc:	2104      	movs	r1, #4
 800bade:	4638      	mov	r0, r7
 800bae0:	f7ff ff62 	bl	800b9a8 <__sfmoreglue>
 800bae4:	4604      	mov	r4, r0
 800bae6:	6030      	str	r0, [r6, #0]
 800bae8:	2800      	cmp	r0, #0
 800baea:	d1d5      	bne.n	800ba98 <__sfp+0x24>
 800baec:	f7ff ff78 	bl	800b9e0 <__sfp_lock_release>
 800baf0:	230c      	movs	r3, #12
 800baf2:	603b      	str	r3, [r7, #0]
 800baf4:	e7ee      	b.n	800bad4 <__sfp+0x60>
 800baf6:	bf00      	nop
 800baf8:	0800be9c 	.word	0x0800be9c
 800bafc:	ffff0001 	.word	0xffff0001

0800bb00 <_fwalk_reent>:
 800bb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb04:	4606      	mov	r6, r0
 800bb06:	4688      	mov	r8, r1
 800bb08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb0c:	2700      	movs	r7, #0
 800bb0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb12:	f1b9 0901 	subs.w	r9, r9, #1
 800bb16:	d505      	bpl.n	800bb24 <_fwalk_reent+0x24>
 800bb18:	6824      	ldr	r4, [r4, #0]
 800bb1a:	2c00      	cmp	r4, #0
 800bb1c:	d1f7      	bne.n	800bb0e <_fwalk_reent+0xe>
 800bb1e:	4638      	mov	r0, r7
 800bb20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb24:	89ab      	ldrh	r3, [r5, #12]
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d907      	bls.n	800bb3a <_fwalk_reent+0x3a>
 800bb2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	d003      	beq.n	800bb3a <_fwalk_reent+0x3a>
 800bb32:	4629      	mov	r1, r5
 800bb34:	4630      	mov	r0, r6
 800bb36:	47c0      	blx	r8
 800bb38:	4307      	orrs	r7, r0
 800bb3a:	3568      	adds	r5, #104	; 0x68
 800bb3c:	e7e9      	b.n	800bb12 <_fwalk_reent+0x12>

0800bb3e <__retarget_lock_init_recursive>:
 800bb3e:	4770      	bx	lr

0800bb40 <__retarget_lock_acquire_recursive>:
 800bb40:	4770      	bx	lr

0800bb42 <__retarget_lock_release_recursive>:
 800bb42:	4770      	bx	lr

0800bb44 <__swhatbuf_r>:
 800bb44:	b570      	push	{r4, r5, r6, lr}
 800bb46:	460e      	mov	r6, r1
 800bb48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb4c:	2900      	cmp	r1, #0
 800bb4e:	b096      	sub	sp, #88	; 0x58
 800bb50:	4614      	mov	r4, r2
 800bb52:	461d      	mov	r5, r3
 800bb54:	da08      	bge.n	800bb68 <__swhatbuf_r+0x24>
 800bb56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	602a      	str	r2, [r5, #0]
 800bb5e:	061a      	lsls	r2, r3, #24
 800bb60:	d410      	bmi.n	800bb84 <__swhatbuf_r+0x40>
 800bb62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb66:	e00e      	b.n	800bb86 <__swhatbuf_r+0x42>
 800bb68:	466a      	mov	r2, sp
 800bb6a:	f000 f903 	bl	800bd74 <_fstat_r>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	dbf1      	blt.n	800bb56 <__swhatbuf_r+0x12>
 800bb72:	9a01      	ldr	r2, [sp, #4]
 800bb74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb7c:	425a      	negs	r2, r3
 800bb7e:	415a      	adcs	r2, r3
 800bb80:	602a      	str	r2, [r5, #0]
 800bb82:	e7ee      	b.n	800bb62 <__swhatbuf_r+0x1e>
 800bb84:	2340      	movs	r3, #64	; 0x40
 800bb86:	2000      	movs	r0, #0
 800bb88:	6023      	str	r3, [r4, #0]
 800bb8a:	b016      	add	sp, #88	; 0x58
 800bb8c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb90 <__smakebuf_r>:
 800bb90:	898b      	ldrh	r3, [r1, #12]
 800bb92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb94:	079d      	lsls	r5, r3, #30
 800bb96:	4606      	mov	r6, r0
 800bb98:	460c      	mov	r4, r1
 800bb9a:	d507      	bpl.n	800bbac <__smakebuf_r+0x1c>
 800bb9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bba0:	6023      	str	r3, [r4, #0]
 800bba2:	6123      	str	r3, [r4, #16]
 800bba4:	2301      	movs	r3, #1
 800bba6:	6163      	str	r3, [r4, #20]
 800bba8:	b002      	add	sp, #8
 800bbaa:	bd70      	pop	{r4, r5, r6, pc}
 800bbac:	ab01      	add	r3, sp, #4
 800bbae:	466a      	mov	r2, sp
 800bbb0:	f7ff ffc8 	bl	800bb44 <__swhatbuf_r>
 800bbb4:	9900      	ldr	r1, [sp, #0]
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f7ff f957 	bl	800ae6c <_malloc_r>
 800bbbe:	b948      	cbnz	r0, 800bbd4 <__smakebuf_r+0x44>
 800bbc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbc4:	059a      	lsls	r2, r3, #22
 800bbc6:	d4ef      	bmi.n	800bba8 <__smakebuf_r+0x18>
 800bbc8:	f023 0303 	bic.w	r3, r3, #3
 800bbcc:	f043 0302 	orr.w	r3, r3, #2
 800bbd0:	81a3      	strh	r3, [r4, #12]
 800bbd2:	e7e3      	b.n	800bb9c <__smakebuf_r+0xc>
 800bbd4:	4b0d      	ldr	r3, [pc, #52]	; (800bc0c <__smakebuf_r+0x7c>)
 800bbd6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bbd8:	89a3      	ldrh	r3, [r4, #12]
 800bbda:	6020      	str	r0, [r4, #0]
 800bbdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbe0:	81a3      	strh	r3, [r4, #12]
 800bbe2:	9b00      	ldr	r3, [sp, #0]
 800bbe4:	6163      	str	r3, [r4, #20]
 800bbe6:	9b01      	ldr	r3, [sp, #4]
 800bbe8:	6120      	str	r0, [r4, #16]
 800bbea:	b15b      	cbz	r3, 800bc04 <__smakebuf_r+0x74>
 800bbec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	f000 f8d1 	bl	800bd98 <_isatty_r>
 800bbf6:	b128      	cbz	r0, 800bc04 <__smakebuf_r+0x74>
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	f023 0303 	bic.w	r3, r3, #3
 800bbfe:	f043 0301 	orr.w	r3, r3, #1
 800bc02:	81a3      	strh	r3, [r4, #12]
 800bc04:	89a0      	ldrh	r0, [r4, #12]
 800bc06:	4305      	orrs	r5, r0
 800bc08:	81a5      	strh	r5, [r4, #12]
 800bc0a:	e7cd      	b.n	800bba8 <__smakebuf_r+0x18>
 800bc0c:	0800b99d 	.word	0x0800b99d

0800bc10 <_malloc_usable_size_r>:
 800bc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc14:	1f18      	subs	r0, r3, #4
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	bfbc      	itt	lt
 800bc1a:	580b      	ldrlt	r3, [r1, r0]
 800bc1c:	18c0      	addlt	r0, r0, r3
 800bc1e:	4770      	bx	lr

0800bc20 <_raise_r>:
 800bc20:	291f      	cmp	r1, #31
 800bc22:	b538      	push	{r3, r4, r5, lr}
 800bc24:	4604      	mov	r4, r0
 800bc26:	460d      	mov	r5, r1
 800bc28:	d904      	bls.n	800bc34 <_raise_r+0x14>
 800bc2a:	2316      	movs	r3, #22
 800bc2c:	6003      	str	r3, [r0, #0]
 800bc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc32:	bd38      	pop	{r3, r4, r5, pc}
 800bc34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc36:	b112      	cbz	r2, 800bc3e <_raise_r+0x1e>
 800bc38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc3c:	b94b      	cbnz	r3, 800bc52 <_raise_r+0x32>
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f000 f830 	bl	800bca4 <_getpid_r>
 800bc44:	462a      	mov	r2, r5
 800bc46:	4601      	mov	r1, r0
 800bc48:	4620      	mov	r0, r4
 800bc4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc4e:	f000 b817 	b.w	800bc80 <_kill_r>
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d00a      	beq.n	800bc6c <_raise_r+0x4c>
 800bc56:	1c59      	adds	r1, r3, #1
 800bc58:	d103      	bne.n	800bc62 <_raise_r+0x42>
 800bc5a:	2316      	movs	r3, #22
 800bc5c:	6003      	str	r3, [r0, #0]
 800bc5e:	2001      	movs	r0, #1
 800bc60:	e7e7      	b.n	800bc32 <_raise_r+0x12>
 800bc62:	2400      	movs	r4, #0
 800bc64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc68:	4628      	mov	r0, r5
 800bc6a:	4798      	blx	r3
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	e7e0      	b.n	800bc32 <_raise_r+0x12>

0800bc70 <raise>:
 800bc70:	4b02      	ldr	r3, [pc, #8]	; (800bc7c <raise+0xc>)
 800bc72:	4601      	mov	r1, r0
 800bc74:	6818      	ldr	r0, [r3, #0]
 800bc76:	f7ff bfd3 	b.w	800bc20 <_raise_r>
 800bc7a:	bf00      	nop
 800bc7c:	20000038 	.word	0x20000038

0800bc80 <_kill_r>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	4d07      	ldr	r5, [pc, #28]	; (800bca0 <_kill_r+0x20>)
 800bc84:	2300      	movs	r3, #0
 800bc86:	4604      	mov	r4, r0
 800bc88:	4608      	mov	r0, r1
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	602b      	str	r3, [r5, #0]
 800bc8e:	f7f6 f8c3 	bl	8001e18 <_kill>
 800bc92:	1c43      	adds	r3, r0, #1
 800bc94:	d102      	bne.n	800bc9c <_kill_r+0x1c>
 800bc96:	682b      	ldr	r3, [r5, #0]
 800bc98:	b103      	cbz	r3, 800bc9c <_kill_r+0x1c>
 800bc9a:	6023      	str	r3, [r4, #0]
 800bc9c:	bd38      	pop	{r3, r4, r5, pc}
 800bc9e:	bf00      	nop
 800bca0:	200008e8 	.word	0x200008e8

0800bca4 <_getpid_r>:
 800bca4:	f7f6 b8b0 	b.w	8001e08 <_getpid>

0800bca8 <__sread>:
 800bca8:	b510      	push	{r4, lr}
 800bcaa:	460c      	mov	r4, r1
 800bcac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb0:	f000 f894 	bl	800bddc <_read_r>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	bfab      	itete	ge
 800bcb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcba:	89a3      	ldrhlt	r3, [r4, #12]
 800bcbc:	181b      	addge	r3, r3, r0
 800bcbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcc2:	bfac      	ite	ge
 800bcc4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcc6:	81a3      	strhlt	r3, [r4, #12]
 800bcc8:	bd10      	pop	{r4, pc}

0800bcca <__swrite>:
 800bcca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcce:	461f      	mov	r7, r3
 800bcd0:	898b      	ldrh	r3, [r1, #12]
 800bcd2:	05db      	lsls	r3, r3, #23
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	4616      	mov	r6, r2
 800bcda:	d505      	bpl.n	800bce8 <__swrite+0x1e>
 800bcdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bce0:	2302      	movs	r3, #2
 800bce2:	2200      	movs	r2, #0
 800bce4:	f000 f868 	bl	800bdb8 <_lseek_r>
 800bce8:	89a3      	ldrh	r3, [r4, #12]
 800bcea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcf2:	81a3      	strh	r3, [r4, #12]
 800bcf4:	4632      	mov	r2, r6
 800bcf6:	463b      	mov	r3, r7
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfe:	f000 b817 	b.w	800bd30 <_write_r>

0800bd02 <__sseek>:
 800bd02:	b510      	push	{r4, lr}
 800bd04:	460c      	mov	r4, r1
 800bd06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd0a:	f000 f855 	bl	800bdb8 <_lseek_r>
 800bd0e:	1c43      	adds	r3, r0, #1
 800bd10:	89a3      	ldrh	r3, [r4, #12]
 800bd12:	bf15      	itete	ne
 800bd14:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd1e:	81a3      	strheq	r3, [r4, #12]
 800bd20:	bf18      	it	ne
 800bd22:	81a3      	strhne	r3, [r4, #12]
 800bd24:	bd10      	pop	{r4, pc}

0800bd26 <__sclose>:
 800bd26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd2a:	f000 b813 	b.w	800bd54 <_close_r>
	...

0800bd30 <_write_r>:
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	4d07      	ldr	r5, [pc, #28]	; (800bd50 <_write_r+0x20>)
 800bd34:	4604      	mov	r4, r0
 800bd36:	4608      	mov	r0, r1
 800bd38:	4611      	mov	r1, r2
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	602a      	str	r2, [r5, #0]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	f7f6 f8a1 	bl	8001e86 <_write>
 800bd44:	1c43      	adds	r3, r0, #1
 800bd46:	d102      	bne.n	800bd4e <_write_r+0x1e>
 800bd48:	682b      	ldr	r3, [r5, #0]
 800bd4a:	b103      	cbz	r3, 800bd4e <_write_r+0x1e>
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
 800bd50:	200008e8 	.word	0x200008e8

0800bd54 <_close_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4d06      	ldr	r5, [pc, #24]	; (800bd70 <_close_r+0x1c>)
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	4608      	mov	r0, r1
 800bd5e:	602b      	str	r3, [r5, #0]
 800bd60:	f7f6 f8ad 	bl	8001ebe <_close>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_close_r+0x1a>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_close_r+0x1a>
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	200008e8 	.word	0x200008e8

0800bd74 <_fstat_r>:
 800bd74:	b538      	push	{r3, r4, r5, lr}
 800bd76:	4d07      	ldr	r5, [pc, #28]	; (800bd94 <_fstat_r+0x20>)
 800bd78:	2300      	movs	r3, #0
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	4608      	mov	r0, r1
 800bd7e:	4611      	mov	r1, r2
 800bd80:	602b      	str	r3, [r5, #0]
 800bd82:	f7f6 f8a8 	bl	8001ed6 <_fstat>
 800bd86:	1c43      	adds	r3, r0, #1
 800bd88:	d102      	bne.n	800bd90 <_fstat_r+0x1c>
 800bd8a:	682b      	ldr	r3, [r5, #0]
 800bd8c:	b103      	cbz	r3, 800bd90 <_fstat_r+0x1c>
 800bd8e:	6023      	str	r3, [r4, #0]
 800bd90:	bd38      	pop	{r3, r4, r5, pc}
 800bd92:	bf00      	nop
 800bd94:	200008e8 	.word	0x200008e8

0800bd98 <_isatty_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	4d06      	ldr	r5, [pc, #24]	; (800bdb4 <_isatty_r+0x1c>)
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	4604      	mov	r4, r0
 800bda0:	4608      	mov	r0, r1
 800bda2:	602b      	str	r3, [r5, #0]
 800bda4:	f7f6 f8a7 	bl	8001ef6 <_isatty>
 800bda8:	1c43      	adds	r3, r0, #1
 800bdaa:	d102      	bne.n	800bdb2 <_isatty_r+0x1a>
 800bdac:	682b      	ldr	r3, [r5, #0]
 800bdae:	b103      	cbz	r3, 800bdb2 <_isatty_r+0x1a>
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	bd38      	pop	{r3, r4, r5, pc}
 800bdb4:	200008e8 	.word	0x200008e8

0800bdb8 <_lseek_r>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	4d07      	ldr	r5, [pc, #28]	; (800bdd8 <_lseek_r+0x20>)
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	4608      	mov	r0, r1
 800bdc0:	4611      	mov	r1, r2
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	602a      	str	r2, [r5, #0]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	f7f6 f8a0 	bl	8001f0c <_lseek>
 800bdcc:	1c43      	adds	r3, r0, #1
 800bdce:	d102      	bne.n	800bdd6 <_lseek_r+0x1e>
 800bdd0:	682b      	ldr	r3, [r5, #0]
 800bdd2:	b103      	cbz	r3, 800bdd6 <_lseek_r+0x1e>
 800bdd4:	6023      	str	r3, [r4, #0]
 800bdd6:	bd38      	pop	{r3, r4, r5, pc}
 800bdd8:	200008e8 	.word	0x200008e8

0800bddc <_read_r>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	4d07      	ldr	r5, [pc, #28]	; (800bdfc <_read_r+0x20>)
 800bde0:	4604      	mov	r4, r0
 800bde2:	4608      	mov	r0, r1
 800bde4:	4611      	mov	r1, r2
 800bde6:	2200      	movs	r2, #0
 800bde8:	602a      	str	r2, [r5, #0]
 800bdea:	461a      	mov	r2, r3
 800bdec:	f7f6 f82e 	bl	8001e4c <_read>
 800bdf0:	1c43      	adds	r3, r0, #1
 800bdf2:	d102      	bne.n	800bdfa <_read_r+0x1e>
 800bdf4:	682b      	ldr	r3, [r5, #0]
 800bdf6:	b103      	cbz	r3, 800bdfa <_read_r+0x1e>
 800bdf8:	6023      	str	r3, [r4, #0]
 800bdfa:	bd38      	pop	{r3, r4, r5, pc}
 800bdfc:	200008e8 	.word	0x200008e8

0800be00 <_init>:
 800be00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be02:	bf00      	nop
 800be04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be06:	bc08      	pop	{r3}
 800be08:	469e      	mov	lr, r3
 800be0a:	4770      	bx	lr

0800be0c <_fini>:
 800be0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0e:	bf00      	nop
 800be10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be12:	bc08      	pop	{r3}
 800be14:	469e      	mov	lr, r3
 800be16:	4770      	bx	lr
