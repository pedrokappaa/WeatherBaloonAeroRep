
Balloon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb18  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800bd18  0800bd18  0001bd18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c214  0800c214  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c214  0800c214  0001c214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c21c  0800c21c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c21c  0800c21c  0001c21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c220  0800c220  0001c220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  200001f8  0800c41c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ac  0800c41c  000208ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001697d  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ce  00000000  00000000  00036ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  0003a078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  0003b360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad93  00000000  00000000  0003c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019edd  00000000  00000000  00067253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010525c  00000000  00000000  00081130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018638c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006134  00000000  00000000  001863dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bd00 	.word	0x0800bd00

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800bd00 	.word	0x0800bd00

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ee:	4b3e      	ldr	r3, [pc, #248]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 80009f0:	4a3e      	ldr	r2, [pc, #248]	; (8000aec <MX_ADC1_Init+0x110>)
 80009f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009f4:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a00:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a06:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0c:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000a1c:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a1e:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a2c:	2205      	movs	r2, #5
 8000a2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a30:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a38:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3e:	482a      	ldr	r0, [pc, #168]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a40:	f001 fd36 	bl	80024b0 <HAL_ADC_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000a4a:	f000 ffc3 	bl	80019d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_ADC1_Init+0x114>)
 8000a50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a60:	f001 fd6a 	bl	8002538 <HAL_ADC_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a6a:	f000 ffb3 	bl	80019d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a7c:	f001 fd5c 	bl	8002538 <HAL_ADC_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000a86:	f000 ffa5 	bl	80019d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a98:	f001 fd4e 	bl	8002538 <HAL_ADC_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000aa2:	f000 ff97 	bl	80019d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aae:	463b      	mov	r3, r7
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000ab4:	f001 fd40 	bl	8002538 <HAL_ADC_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000abe:	f000 ff89 	bl	80019d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ac2:	230d      	movs	r3, #13
 8000ac4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aca:	463b      	mov	r3, r7
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000ad0:	f001 fd32 	bl	8002538 <HAL_ADC_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000ada:	f000 ff7b 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000214 	.word	0x20000214
 8000aec:	40012000 	.word	0x40012000
 8000af0:	10000012 	.word	0x10000012

08000af4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a39      	ldr	r2, [pc, #228]	; (8000bf8 <HAL_ADC_MspInit+0x104>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d16b      	bne.n	8000bee <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b16:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a38      	ldr	r2, [pc, #224]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a32      	ldr	r2, [pc, #200]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a2c      	ldr	r2, [pc, #176]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000b5e:	2309      	movs	r3, #9
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b62:	2303      	movs	r3, #3
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4823      	ldr	r0, [pc, #140]	; (8000c00 <HAL_ADC_MspInit+0x10c>)
 8000b72:	f002 fbbf 	bl	80032f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000b76:	2309      	movs	r3, #9
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	481e      	ldr	r0, [pc, #120]	; (8000c04 <HAL_ADC_MspInit+0x110>)
 8000b8a:	f002 fbb3 	bl	80032f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000b90:	4a1e      	ldr	r2, [pc, #120]	; (8000c0c <HAL_ADC_MspInit+0x118>)
 8000b92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bc4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bd4:	f002 f812 	bl	8002bfc <HAL_DMA_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8000bde:	f000 fef9 	bl	80019d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000be6:	639a      	str	r2, [r3, #56]	; 0x38
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40012000 	.word	0x40012000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	2000025c 	.word	0x2000025c
 8000c0c:	40026410 	.word	0x40026410

08000c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2038      	movs	r0, #56	; 0x38
 8000c34:	f001 ffab 	bl	8002b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c38:	2038      	movs	r0, #56	; 0x38
 8000c3a:	f001 ffc4 	bl	8002bc6 <HAL_NVIC_EnableIRQ>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c56:	4804      	ldr	r0, [pc, #16]	; (8000c68 <SELECT+0x1c>)
 8000c58:	f002 fcf8 	bl	800364c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f001 fc03 	bl	8002468 <HAL_Delay>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <DESELECT+0x1c>)
 8000c78:	f002 fce8 	bl	800364c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f001 fbf3 	bl	8002468 <HAL_Delay>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40020c00 	.word	0x40020c00

08000c8c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c96:	bf00      	nop
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <SPI_TxByte+0x30>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d1f8      	bne.n	8000c98 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000ca6:	1df9      	adds	r1, r7, #7
 8000ca8:	2364      	movs	r3, #100	; 0x64
 8000caa:	2201      	movs	r2, #1
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <SPI_TxByte+0x30>)
 8000cae:	f003 febe 	bl	8004a2e <HAL_SPI_Transmit>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200002d0 	.word	0x200002d0

08000cc0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ccc:	bf00      	nop
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <SPI_TxBuffer+0x30>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d1f8      	bne.n	8000cce <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000cdc:	887a      	ldrh	r2, [r7, #2]
 8000cde:	2364      	movs	r3, #100	; 0x64
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <SPI_TxBuffer+0x30>)
 8000ce4:	f003 fea3 	bl	8004a2e <HAL_SPI_Transmit>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	200002d0 	.word	0x200002d0

08000cf4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000cfa:	23ff      	movs	r3, #255	; 0xff
 8000cfc:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000cfe:	bf00      	nop
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <SPI_RxByte+0x34>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d1f8      	bne.n	8000d00 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000d0e:	1dba      	adds	r2, r7, #6
 8000d10:	1df9      	adds	r1, r7, #7
 8000d12:	2364      	movs	r3, #100	; 0x64
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2301      	movs	r3, #1
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <SPI_RxByte+0x34>)
 8000d1a:	f003 fff6 	bl	8004d0a <HAL_SPI_TransmitReceive>

	return data;
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200002d0 	.word	0x200002d0

08000d2c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000d34:	f7ff ffde 	bl	8000cf4 <SPI_RxByte>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	701a      	strb	r2, [r3, #0]
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <SD_ReadyWait+0x30>)
 8000d50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d54:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000d56:	f7ff ffcd 	bl	8000cf4 <SPI_RxByte>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2bff      	cmp	r3, #255	; 0xff
 8000d62:	d003      	beq.n	8000d6c <SD_ReadyWait+0x24>
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SD_ReadyWait+0x30>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f4      	bne.n	8000d56 <SD_ReadyWait+0xe>

	return res;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000039c 	.word	0x2000039c

08000d7c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000d82:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d86:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000d88:	f7ff ff70 	bl	8000c6c <DESELECT>
	for(int i = 0; i < 10; i++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	e005      	b.n	8000d9e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000d92:	20ff      	movs	r0, #255	; 0xff
 8000d94:	f7ff ff7a 	bl	8000c8c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	2b09      	cmp	r3, #9
 8000da2:	ddf6      	ble.n	8000d92 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000da4:	f7ff ff52 	bl	8000c4c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000da8:	2340      	movs	r3, #64	; 0x40
 8000daa:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000dbc:	2395      	movs	r3, #149	; 0x95
 8000dbe:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2106      	movs	r1, #6
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff7b 	bl	8000cc0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000dca:	e002      	b.n	8000dd2 <SD_PowerOn+0x56>
	{
		cnt--;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000dd2:	f7ff ff8f 	bl	8000cf4 <SPI_RxByte>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d002      	beq.n	8000de2 <SD_PowerOn+0x66>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f4      	bne.n	8000dcc <SD_PowerOn+0x50>
	}

	DESELECT();
 8000de2:	f7ff ff43 	bl	8000c6c <DESELECT>
	SPI_TxByte(0XFF);
 8000de6:	20ff      	movs	r0, #255	; 0xff
 8000de8:	f7ff ff50 	bl	8000c8c <SPI_TxByte>

	PowerFlag = 1;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <SD_PowerOn+0x80>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200002bd 	.word	0x200002bd

08000e00 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <SD_PowerOff+0x14>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	200002bd 	.word	0x200002bd

08000e18 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <SD_CheckPower+0x14>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	200002bd 	.word	0x200002bd

08000e30 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <SD_RxDataBlock+0x58>)
 8000e3c:	22c8      	movs	r2, #200	; 0xc8
 8000e3e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000e40:	f7ff ff58 	bl	8000cf4 <SPI_RxByte>
 8000e44:	4603      	mov	r3, r0
 8000e46:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	2bff      	cmp	r3, #255	; 0xff
 8000e4c:	d103      	bne.n	8000e56 <SD_RxDataBlock+0x26>
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <SD_RxDataBlock+0x58>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f4      	bne.n	8000e40 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	2bfe      	cmp	r3, #254	; 0xfe
 8000e5a:	d001      	beq.n	8000e60 <SD_RxDataBlock+0x30>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e00f      	b.n	8000e80 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff60 	bl	8000d2c <SPI_RxBytePtr>
	} while(len--);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	1e5a      	subs	r2, r3, #1
 8000e70:	603a      	str	r2, [r7, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f4      	bne.n	8000e60 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000e76:	f7ff ff3d 	bl	8000cf4 <SPI_RxByte>
	SPI_RxByte();
 8000e7a:	f7ff ff3b 	bl	8000cf4 <SPI_RxByte>

	return TRUE;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	2000039a 	.word	0x2000039a

08000e8c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000e9c:	f7ff ff54 	bl	8000d48 <SD_ReadyWait>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2bff      	cmp	r3, #255	; 0xff
 8000ea4:	d001      	beq.n	8000eaa <SD_TxDataBlock+0x1e>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e02f      	b.n	8000f0a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff feed 	bl	8000c8c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	2bfd      	cmp	r3, #253	; 0xfd
 8000eb6:	d020      	beq.n	8000efa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff feff 	bl	8000cc0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000ec2:	f7ff ff17 	bl	8000cf4 <SPI_RxByte>
		SPI_RxByte();
 8000ec6:	f7ff ff15 	bl	8000cf4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000eca:	e00b      	b.n	8000ee4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000ecc:	f7ff ff12 	bl	8000cf4 <SPI_RxByte>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	2b05      	cmp	r3, #5
 8000edc:	d006      	beq.n	8000eec <SD_TxDataBlock+0x60>
			i++;
 8000ede:	7bbb      	ldrb	r3, [r7, #14]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	2b40      	cmp	r3, #64	; 0x40
 8000ee8:	d9f0      	bls.n	8000ecc <SD_TxDataBlock+0x40>
 8000eea:	e000      	b.n	8000eee <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000eec:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000eee:	bf00      	nop
 8000ef0:	f7ff ff00 	bl	8000cf4 <SPI_RxByte>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0fa      	beq.n	8000ef0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	f003 031f 	and.w	r3, r3, #31
 8000f00:	2b05      	cmp	r3, #5
 8000f02:	d101      	bne.n	8000f08 <SD_TxDataBlock+0x7c>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <SD_TxDataBlock+0x7e>

	return FALSE;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	6039      	str	r1, [r7, #0]
 8000f1c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000f1e:	f7ff ff13 	bl	8000d48 <SD_ReadyWait>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2bff      	cmp	r3, #255	; 0xff
 8000f26:	d001      	beq.n	8000f2c <SD_SendCmd+0x1a>
 8000f28:	23ff      	movs	r3, #255	; 0xff
 8000f2a:	e042      	b.n	8000fb2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff feac 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	0e1b      	lsrs	r3, r3, #24
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fea6 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	0c1b      	lsrs	r3, r3, #16
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fea0 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fe9a 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fe95 	bl	8000c8c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b40      	cmp	r3, #64	; 0x40
 8000f66:	d102      	bne.n	8000f6e <SD_SendCmd+0x5c>
 8000f68:	2395      	movs	r3, #149	; 0x95
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	e007      	b.n	8000f7e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b48      	cmp	r3, #72	; 0x48
 8000f72:	d102      	bne.n	8000f7a <SD_SendCmd+0x68>
 8000f74:	2387      	movs	r3, #135	; 0x87
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e001      	b.n	8000f7e <SD_SendCmd+0x6c>
	else crc = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fe83 	bl	8000c8c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b4c      	cmp	r3, #76	; 0x4c
 8000f8a:	d101      	bne.n	8000f90 <SD_SendCmd+0x7e>
 8000f8c:	f7ff feb2 	bl	8000cf4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000f90:	230a      	movs	r3, #10
 8000f92:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000f94:	f7ff feae 	bl	8000cf4 <SPI_RxByte>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000f9c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	da05      	bge.n	8000fb0 <SD_SendCmd+0x9e>
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	73bb      	strb	r3, [r7, #14]
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f1      	bne.n	8000f94 <SD_SendCmd+0x82>

	return res;
 8000fb0:	7b7b      	ldrb	r3, [r7, #13]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SD_disk_initialize+0x14>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e0d1      	b.n	8001174 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000fd0:	4b6a      	ldr	r3, [pc, #424]	; (800117c <SD_disk_initialize+0x1c0>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <SD_disk_initialize+0x2a>
 8000fde:	4b67      	ldr	r3, [pc, #412]	; (800117c <SD_disk_initialize+0x1c0>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	e0c6      	b.n	8001174 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000fe6:	f7ff fec9 	bl	8000d7c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000fea:	f7ff fe2f 	bl	8000c4c <SELECT>

	/* check disk type */
	type = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2040      	movs	r0, #64	; 0x40
 8000ff6:	f7ff ff8c 	bl	8000f12 <SD_SendCmd>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	f040 80a1 	bne.w	8001144 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001002:	4b5f      	ldr	r3, [pc, #380]	; (8001180 <SD_disk_initialize+0x1c4>)
 8001004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001008:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800100a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800100e:	2048      	movs	r0, #72	; 0x48
 8001010:	f7ff ff7f 	bl	8000f12 <SD_SendCmd>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d155      	bne.n	80010c6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e00c      	b.n	800103a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001020:	7bfc      	ldrb	r4, [r7, #15]
 8001022:	f7ff fe67 	bl	8000cf4 <SPI_RxByte>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	f104 0310 	add.w	r3, r4, #16
 800102e:	443b      	add	r3, r7
 8001030:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	3301      	adds	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b03      	cmp	r3, #3
 800103e:	d9ef      	bls.n	8001020 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001040:	7abb      	ldrb	r3, [r7, #10]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d17e      	bne.n	8001144 <SD_disk_initialize+0x188>
 8001046:	7afb      	ldrb	r3, [r7, #11]
 8001048:	2baa      	cmp	r3, #170	; 0xaa
 800104a:	d17b      	bne.n	8001144 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800104c:	2100      	movs	r1, #0
 800104e:	2077      	movs	r0, #119	; 0x77
 8001050:	f7ff ff5f 	bl	8000f12 <SD_SendCmd>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d807      	bhi.n	800106a <SD_disk_initialize+0xae>
 800105a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800105e:	2069      	movs	r0, #105	; 0x69
 8001060:	f7ff ff57 	bl	8000f12 <SD_SendCmd>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800106a:	4b45      	ldr	r3, [pc, #276]	; (8001180 <SD_disk_initialize+0x1c4>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1ec      	bne.n	800104c <SD_disk_initialize+0x90>
 8001072:	e000      	b.n	8001076 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001074:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001076:	4b42      	ldr	r3, [pc, #264]	; (8001180 <SD_disk_initialize+0x1c4>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d062      	beq.n	8001144 <SD_disk_initialize+0x188>
 800107e:	2100      	movs	r1, #0
 8001080:	207a      	movs	r0, #122	; 0x7a
 8001082:	f7ff ff46 	bl	8000f12 <SD_SendCmd>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d15b      	bne.n	8001144 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e00c      	b.n	80010ac <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001092:	7bfc      	ldrb	r4, [r7, #15]
 8001094:	f7ff fe2e 	bl	8000cf4 <SPI_RxByte>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	f104 0310 	add.w	r3, r4, #16
 80010a0:	443b      	add	r3, r7
 80010a2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	3301      	adds	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d9ef      	bls.n	8001092 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80010b2:	7a3b      	ldrb	r3, [r7, #8]
 80010b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SD_disk_initialize+0x104>
 80010bc:	230c      	movs	r3, #12
 80010be:	e000      	b.n	80010c2 <SD_disk_initialize+0x106>
 80010c0:	2304      	movs	r3, #4
 80010c2:	73bb      	strb	r3, [r7, #14]
 80010c4:	e03e      	b.n	8001144 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80010c6:	2100      	movs	r1, #0
 80010c8:	2077      	movs	r0, #119	; 0x77
 80010ca:	f7ff ff22 	bl	8000f12 <SD_SendCmd>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d808      	bhi.n	80010e6 <SD_disk_initialize+0x12a>
 80010d4:	2100      	movs	r1, #0
 80010d6:	2069      	movs	r0, #105	; 0x69
 80010d8:	f7ff ff1b 	bl	8000f12 <SD_SendCmd>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d801      	bhi.n	80010e6 <SD_disk_initialize+0x12a>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e000      	b.n	80010e8 <SD_disk_initialize+0x12c>
 80010e6:	2301      	movs	r3, #1
 80010e8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80010ea:	7bbb      	ldrb	r3, [r7, #14]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d10e      	bne.n	800110e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80010f0:	2100      	movs	r1, #0
 80010f2:	2077      	movs	r0, #119	; 0x77
 80010f4:	f7ff ff0d 	bl	8000f12 <SD_SendCmd>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d80e      	bhi.n	800111c <SD_disk_initialize+0x160>
 80010fe:	2100      	movs	r1, #0
 8001100:	2069      	movs	r0, #105	; 0x69
 8001102:	f7ff ff06 	bl	8000f12 <SD_SendCmd>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d107      	bne.n	800111c <SD_disk_initialize+0x160>
 800110c:	e00c      	b.n	8001128 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800110e:	2100      	movs	r1, #0
 8001110:	2041      	movs	r0, #65	; 0x41
 8001112:	f7ff fefe 	bl	8000f12 <SD_SendCmd>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <SD_disk_initialize+0x1c4>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e2      	bne.n	80010ea <SD_disk_initialize+0x12e>
 8001124:	e000      	b.n	8001128 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001126:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <SD_disk_initialize+0x1c4>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d007      	beq.n	8001140 <SD_disk_initialize+0x184>
 8001130:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001134:	2050      	movs	r0, #80	; 0x50
 8001136:	f7ff feec 	bl	8000f12 <SD_SendCmd>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SD_disk_initialize+0x188>
 8001140:	2300      	movs	r3, #0
 8001142:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001144:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <SD_disk_initialize+0x1c8>)
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800114a:	f7ff fd8f 	bl	8000c6c <DESELECT>
	SPI_RxByte();
 800114e:	f7ff fdd1 	bl	8000cf4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001152:	7bbb      	ldrb	r3, [r7, #14]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d008      	beq.n	800116a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <SD_disk_initialize+0x1c0>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SD_disk_initialize+0x1c0>)
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e001      	b.n	800116e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800116a:	f7ff fe49 	bl	8000e00 <SD_PowerOff>
	}

	return Stat;
 800116e:	4b03      	ldr	r3, [pc, #12]	; (800117c <SD_disk_initialize+0x1c0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bd90      	pop	{r4, r7, pc}
 800117c:	20000000 	.word	0x20000000
 8001180:	2000039a 	.word	0x2000039a
 8001184:	200002bc 	.word	0x200002bc

08001188 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SD_disk_status+0x14>
 8001198:	2301      	movs	r3, #1
 800119a:	e002      	b.n	80011a2 <SD_disk_status+0x1a>
	return Stat;
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <SD_disk_status+0x28>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000000 	.word	0x20000000

080011b4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d102      	bne.n	80011d0 <SD_disk_read+0x1c>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <SD_disk_read+0x20>
 80011d0:	2304      	movs	r3, #4
 80011d2:	e051      	b.n	8001278 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <SD_disk_read+0xcc>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SD_disk_read+0x32>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e048      	b.n	8001278 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80011e6:	4b27      	ldr	r3, [pc, #156]	; (8001284 <SD_disk_read+0xd0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <SD_disk_read+0x44>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	025b      	lsls	r3, r3, #9
 80011f6:	607b      	str	r3, [r7, #4]

	SELECT();
 80011f8:	f7ff fd28 	bl	8000c4c <SELECT>

	if (count == 1)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d111      	bne.n	8001226 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	2051      	movs	r0, #81	; 0x51
 8001206:	f7ff fe84 	bl	8000f12 <SD_SendCmd>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d129      	bne.n	8001264 <SD_disk_read+0xb0>
 8001210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001214:	68b8      	ldr	r0, [r7, #8]
 8001216:	f7ff fe0b 	bl	8000e30 <SD_RxDataBlock>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d021      	beq.n	8001264 <SD_disk_read+0xb0>
 8001220:	2300      	movs	r3, #0
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	e01e      	b.n	8001264 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	2052      	movs	r0, #82	; 0x52
 800122a:	f7ff fe72 	bl	8000f12 <SD_SendCmd>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d117      	bne.n	8001264 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001234:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001238:	68b8      	ldr	r0, [r7, #8]
 800123a:	f7ff fdf9 	bl	8000e30 <SD_RxDataBlock>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00a      	beq.n	800125a <SD_disk_read+0xa6>
				buff += 512;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800124a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	3b01      	subs	r3, #1
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1ed      	bne.n	8001234 <SD_disk_read+0x80>
 8001258:	e000      	b.n	800125c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800125a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800125c:	2100      	movs	r1, #0
 800125e:	204c      	movs	r0, #76	; 0x4c
 8001260:	f7ff fe57 	bl	8000f12 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001264:	f7ff fd02 	bl	8000c6c <DESELECT>
	SPI_RxByte();
 8001268:	f7ff fd44 	bl	8000cf4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	bf14      	ite	ne
 8001272:	2301      	movne	r3, #1
 8001274:	2300      	moveq	r3, #0
 8001276:	b2db      	uxtb	r3, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000000 	.word	0x20000000
 8001284:	200002bc 	.word	0x200002bc

08001288 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <SD_disk_write+0x1c>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <SD_disk_write+0x20>
 80012a4:	2304      	movs	r3, #4
 80012a6:	e06b      	b.n	8001380 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012a8:	4b37      	ldr	r3, [pc, #220]	; (8001388 <SD_disk_write+0x100>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SD_disk_write+0x32>
 80012b6:	2303      	movs	r3, #3
 80012b8:	e062      	b.n	8001380 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80012ba:	4b33      	ldr	r3, [pc, #204]	; (8001388 <SD_disk_write+0x100>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SD_disk_write+0x44>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e059      	b.n	8001380 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <SD_disk_write+0x104>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <SD_disk_write+0x56>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	025b      	lsls	r3, r3, #9
 80012dc:	607b      	str	r3, [r7, #4]

	SELECT();
 80012de:	f7ff fcb5 	bl	8000c4c <SELECT>

	if (count == 1)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d110      	bne.n	800130a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	2058      	movs	r0, #88	; 0x58
 80012ec:	f7ff fe11 	bl	8000f12 <SD_SendCmd>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d13a      	bne.n	800136c <SD_disk_write+0xe4>
 80012f6:	21fe      	movs	r1, #254	; 0xfe
 80012f8:	68b8      	ldr	r0, [r7, #8]
 80012fa:	f7ff fdc7 	bl	8000e8c <SD_TxDataBlock>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d033      	beq.n	800136c <SD_disk_write+0xe4>
			count = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	e030      	b.n	800136c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <SD_disk_write+0x104>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001316:	2100      	movs	r1, #0
 8001318:	2077      	movs	r0, #119	; 0x77
 800131a:	f7ff fdfa 	bl	8000f12 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	2057      	movs	r0, #87	; 0x57
 8001322:	f7ff fdf6 	bl	8000f12 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	2059      	movs	r0, #89	; 0x59
 800132a:	f7ff fdf2 	bl	8000f12 <SD_SendCmd>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d11b      	bne.n	800136c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001334:	21fc      	movs	r1, #252	; 0xfc
 8001336:	68b8      	ldr	r0, [r7, #8]
 8001338:	f7ff fda8 	bl	8000e8c <SD_TxDataBlock>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00a      	beq.n	8001358 <SD_disk_write+0xd0>
				buff += 512;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001348:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1ee      	bne.n	8001334 <SD_disk_write+0xac>
 8001356:	e000      	b.n	800135a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001358:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800135a:	21fd      	movs	r1, #253	; 0xfd
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff fd95 	bl	8000e8c <SD_TxDataBlock>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <SD_disk_write+0xe4>
			{
				count = 1;
 8001368:	2301      	movs	r3, #1
 800136a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800136c:	f7ff fc7e 	bl	8000c6c <DESELECT>
	SPI_RxByte();
 8001370:	f7ff fcc0 	bl	8000cf4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf14      	ite	ne
 800137a:	2301      	movne	r3, #1
 800137c:	2300      	moveq	r3, #0
 800137e:	b2db      	uxtb	r3, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000000 	.word	0x20000000
 800138c:	200002bc 	.word	0x200002bc

08001390 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b08b      	sub	sp, #44	; 0x2c
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	603a      	str	r2, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	460b      	mov	r3, r1
 800139e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SD_disk_ioctl+0x1e>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e115      	b.n	80015da <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	d124      	bne.n	8001404 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d012      	beq.n	80013e8 <SD_disk_ioctl+0x58>
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	dc1a      	bgt.n	80013fc <SD_disk_ioctl+0x6c>
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <SD_disk_ioctl+0x40>
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d006      	beq.n	80013dc <SD_disk_ioctl+0x4c>
 80013ce:	e015      	b.n	80013fc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80013d0:	f7ff fd16 	bl	8000e00 <SD_PowerOff>
			res = RES_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013da:	e0fc      	b.n	80015d6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80013dc:	f7ff fcce 	bl	8000d7c <SD_PowerOn>
			res = RES_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013e6:	e0f6      	b.n	80015d6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	1c5c      	adds	r4, r3, #1
 80013ec:	f7ff fd14 	bl	8000e18 <SD_CheckPower>
 80013f0:	4603      	mov	r3, r0
 80013f2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013fa:	e0ec      	b.n	80015d6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80013fc:	2304      	movs	r3, #4
 80013fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001402:	e0e8      	b.n	80015d6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001404:	4b77      	ldr	r3, [pc, #476]	; (80015e4 <SD_disk_ioctl+0x254>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SD_disk_ioctl+0x86>
 8001412:	2303      	movs	r3, #3
 8001414:	e0e1      	b.n	80015da <SD_disk_ioctl+0x24a>

		SELECT();
 8001416:	f7ff fc19 	bl	8000c4c <SELECT>

		switch (ctrl)
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	2b0d      	cmp	r3, #13
 800141e:	f200 80cb 	bhi.w	80015b8 <SD_disk_ioctl+0x228>
 8001422:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <SD_disk_ioctl+0x98>)
 8001424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001428:	08001523 	.word	0x08001523
 800142c:	08001461 	.word	0x08001461
 8001430:	08001513 	.word	0x08001513
 8001434:	080015b9 	.word	0x080015b9
 8001438:	080015b9 	.word	0x080015b9
 800143c:	080015b9 	.word	0x080015b9
 8001440:	080015b9 	.word	0x080015b9
 8001444:	080015b9 	.word	0x080015b9
 8001448:	080015b9 	.word	0x080015b9
 800144c:	080015b9 	.word	0x080015b9
 8001450:	080015b9 	.word	0x080015b9
 8001454:	08001535 	.word	0x08001535
 8001458:	08001559 	.word	0x08001559
 800145c:	0800157d 	.word	0x0800157d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001460:	2100      	movs	r1, #0
 8001462:	2049      	movs	r0, #73	; 0x49
 8001464:	f7ff fd55 	bl	8000f12 <SD_SendCmd>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	f040 80a8 	bne.w	80015c0 <SD_disk_ioctl+0x230>
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	2110      	movs	r1, #16
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fcda 	bl	8000e30 <SD_RxDataBlock>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 809e 	beq.w	80015c0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	099b      	lsrs	r3, r3, #6
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d10e      	bne.n	80014ac <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800148e:	7d7b      	ldrb	r3, [r7, #21]
 8001490:	b29a      	uxth	r2, r3
 8001492:	7d3b      	ldrb	r3, [r7, #20]
 8001494:	b29b      	uxth	r3, r3
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	4413      	add	r3, r2
 800149c:	b29b      	uxth	r3, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80014a2:	8bfb      	ldrh	r3, [r7, #30]
 80014a4:	029a      	lsls	r2, r3, #10
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	e02e      	b.n	800150a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80014ac:	7c7b      	ldrb	r3, [r7, #17]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	7dbb      	ldrb	r3, [r7, #22]
 80014b6:	09db      	lsrs	r3, r3, #7
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	7d7b      	ldrb	r3, [r7, #21]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f003 0306 	and.w	r3, r3, #6
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	3302      	adds	r3, #2
 80014d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80014d4:	7d3b      	ldrb	r3, [r7, #20]
 80014d6:	099b      	lsrs	r3, r3, #6
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	b29a      	uxth	r2, r3
 80014dc:	7cfb      	ldrb	r3, [r7, #19]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	7cbb      	ldrb	r3, [r7, #18]
 80014ea:	029b      	lsls	r3, r3, #10
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	4413      	add	r3, r2
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80014fc:	8bfa      	ldrh	r2, [r7, #30]
 80014fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001502:	3b09      	subs	r3, #9
 8001504:	409a      	lsls	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001510:	e056      	b.n	80015c0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001518:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001520:	e055      	b.n	80015ce <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001522:	f7ff fc11 	bl	8000d48 <SD_ReadyWait>
 8001526:	4603      	mov	r3, r0
 8001528:	2bff      	cmp	r3, #255	; 0xff
 800152a:	d14b      	bne.n	80015c4 <SD_disk_ioctl+0x234>
 800152c:	2300      	movs	r3, #0
 800152e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001532:	e047      	b.n	80015c4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001534:	2100      	movs	r1, #0
 8001536:	2049      	movs	r0, #73	; 0x49
 8001538:	f7ff fceb 	bl	8000f12 <SD_SendCmd>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d142      	bne.n	80015c8 <SD_disk_ioctl+0x238>
 8001542:	2110      	movs	r1, #16
 8001544:	6a38      	ldr	r0, [r7, #32]
 8001546:	f7ff fc73 	bl	8000e30 <SD_RxDataBlock>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d03b      	beq.n	80015c8 <SD_disk_ioctl+0x238>
 8001550:	2300      	movs	r3, #0
 8001552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001556:	e037      	b.n	80015c8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001558:	2100      	movs	r1, #0
 800155a:	204a      	movs	r0, #74	; 0x4a
 800155c:	f7ff fcd9 	bl	8000f12 <SD_SendCmd>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d132      	bne.n	80015cc <SD_disk_ioctl+0x23c>
 8001566:	2110      	movs	r1, #16
 8001568:	6a38      	ldr	r0, [r7, #32]
 800156a:	f7ff fc61 	bl	8000e30 <SD_RxDataBlock>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d02b      	beq.n	80015cc <SD_disk_ioctl+0x23c>
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800157a:	e027      	b.n	80015cc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800157c:	2100      	movs	r1, #0
 800157e:	207a      	movs	r0, #122	; 0x7a
 8001580:	f7ff fcc7 	bl	8000f12 <SD_SendCmd>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d116      	bne.n	80015b8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800158a:	2300      	movs	r3, #0
 800158c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001590:	e00b      	b.n	80015aa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001592:	6a3c      	ldr	r4, [r7, #32]
 8001594:	1c63      	adds	r3, r4, #1
 8001596:	623b      	str	r3, [r7, #32]
 8001598:	f7ff fbac 	bl	8000cf4 <SPI_RxByte>
 800159c:	4603      	mov	r3, r0
 800159e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80015a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015a4:	3301      	adds	r3, #1
 80015a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d9ef      	bls.n	8001592 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80015b8:	2304      	movs	r3, #4
 80015ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015be:	e006      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015c0:	bf00      	nop
 80015c2:	e004      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015c4:	bf00      	nop
 80015c6:	e002      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015c8:	bf00      	nop
 80015ca:	e000      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015cc:	bf00      	nop
		}

		DESELECT();
 80015ce:	f7ff fb4d 	bl	8000c6c <DESELECT>
		SPI_RxByte();
 80015d2:	f7ff fb8f 	bl	8000cf4 <SPI_RxByte>
	}

	return res;
 80015d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015da:	4618      	mov	r0, r3
 80015dc:	372c      	adds	r7, #44	; 0x2c
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd90      	pop	{r4, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000000 	.word	0x20000000

080015e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	; 0x30
 80015ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fe:	4b4f      	ldr	r3, [pc, #316]	; (800173c <MX_GPIO_Init+0x154>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a4e      	ldr	r2, [pc, #312]	; (800173c <MX_GPIO_Init+0x154>)
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b4c      	ldr	r3, [pc, #304]	; (800173c <MX_GPIO_Init+0x154>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b49      	ldr	r3, [pc, #292]	; (800173c <MX_GPIO_Init+0x154>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a48      	ldr	r2, [pc, #288]	; (800173c <MX_GPIO_Init+0x154>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b46      	ldr	r3, [pc, #280]	; (800173c <MX_GPIO_Init+0x154>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800162e:	4b43      	ldr	r3, [pc, #268]	; (800173c <MX_GPIO_Init+0x154>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a42      	ldr	r2, [pc, #264]	; (800173c <MX_GPIO_Init+0x154>)
 8001634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b40      	ldr	r3, [pc, #256]	; (800173c <MX_GPIO_Init+0x154>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	4b3d      	ldr	r3, [pc, #244]	; (800173c <MX_GPIO_Init+0x154>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a3c      	ldr	r2, [pc, #240]	; (800173c <MX_GPIO_Init+0x154>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b3a      	ldr	r3, [pc, #232]	; (800173c <MX_GPIO_Init+0x154>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <MX_GPIO_Init+0x154>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a36      	ldr	r2, [pc, #216]	; (800173c <MX_GPIO_Init+0x154>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b34      	ldr	r3, [pc, #208]	; (800173c <MX_GPIO_Init+0x154>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <MX_GPIO_Init+0x154>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a30      	ldr	r2, [pc, #192]	; (800173c <MX_GPIO_Init+0x154>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <MX_GPIO_Init+0x154>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2110      	movs	r1, #16
 8001692:	482b      	ldr	r0, [pc, #172]	; (8001740 <MX_GPIO_Init+0x158>)
 8001694:	f001 ffda 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f244 0181 	movw	r1, #16513	; 0x4081
 800169e:	4829      	ldr	r0, [pc, #164]	; (8001744 <MX_GPIO_Init+0x15c>)
 80016a0:	f001 ffd4 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016aa:	4827      	ldr	r0, [pc, #156]	; (8001748 <MX_GPIO_Init+0x160>)
 80016ac:	f001 ffce 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80016b0:	2310      	movs	r3, #16
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	481e      	ldr	r0, [pc, #120]	; (8001740 <MX_GPIO_Init+0x158>)
 80016c8:	f001 fe14 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4619      	mov	r1, r3
 80016e2:	481a      	ldr	r0, [pc, #104]	; (800174c <MX_GPIO_Init+0x164>)
 80016e4:	f001 fe06 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80016e8:	f244 0381 	movw	r3, #16513	; 0x4081
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	4810      	ldr	r0, [pc, #64]	; (8001744 <MX_GPIO_Init+0x15c>)
 8001702:	f001 fdf7 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001706:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800170a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170c:	2301      	movs	r3, #1
 800170e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	4619      	mov	r1, r3
 800171e:	480a      	ldr	r0, [pc, #40]	; (8001748 <MX_GPIO_Init+0x160>)
 8001720:	f001 fde8 	bl	80032f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2028      	movs	r0, #40	; 0x28
 800172a:	f001 fa30 	bl	8002b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800172e:	2028      	movs	r0, #40	; 0x28
 8001730:	f001 fa49 	bl	8002bc6 <HAL_NVIC_EnableIRQ>

}
 8001734:	bf00      	nop
 8001736:	3730      	adds	r7, #48	; 0x30
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	40021000 	.word	0x40021000
 8001744:	40020400 	.word	0x40020400
 8001748:	40020c00 	.word	0x40020c00
 800174c:	40020800 	.word	0x40020800

08001750 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */
float volts = 0;
int butPressed = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001760:	d102      	bne.n	8001768 <HAL_GPIO_EXTI_Callback+0x18>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		send_UART("{to:'Log',from:'Mst',reci:'headerValsCsv',dir:'g',rc:''}\r");
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		*/

		butPressed = 1;
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <HAL_GPIO_EXTI_Callback+0x24>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]
	}
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	200002c0 	.word	0x200002c0

08001778 <isButPressed>:

int isButPressed()
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
	return butPressed;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <isButPressed+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	200002c0 	.word	0x200002c0

08001790 <butClear>:

void butClear()
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
	butPressed = 0;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <butClear+0x14>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	200002c0 	.word	0x200002c0

080017a8 <print_adc>:
/* USER CODE BEGIN 0 */

uint16_t ADC_results[5];

void print_adc()
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80017ae:	af08      	add	r7, sp, #32
	char message[1024];
	sprintf((char*) message, "%d, %.2fV, %.2fV, %.2fV, %.2fV", ADC_results[0],
 80017b0:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <print_adc+0xc0>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
			ADC_results[1]*3.33/4096, ADC_results[2]*3.33/4096,
 80017b6:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <print_adc+0xc0>)
 80017b8:	885b      	ldrh	r3, [r3, #2]
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017c2:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8001858 <print_adc+0xb0>
 80017c6:	ee27 6b06 	vmul.f64	d6, d7, d6
	sprintf((char*) message, "%d, %.2fV, %.2fV, %.2fV, %.2fV", ADC_results[0],
 80017ca:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8001860 <print_adc+0xb8>
 80017ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
			ADC_results[1]*3.33/4096, ADC_results[2]*3.33/4096,
 80017d2:	4b25      	ldr	r3, [pc, #148]	; (8001868 <print_adc+0xc0>)
 80017d4:	889b      	ldrh	r3, [r3, #4]
 80017d6:	ee06 3a90 	vmov	s13, r3
 80017da:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80017de:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8001858 <print_adc+0xb0>
 80017e2:	ee26 5b05 	vmul.f64	d5, d6, d5
	sprintf((char*) message, "%d, %.2fV, %.2fV, %.2fV, %.2fV", ADC_results[0],
 80017e6:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8001860 <print_adc+0xb8>
 80017ea:	ee85 6b04 	vdiv.f64	d6, d5, d4
			ADC_results[3]*3.33/4096, ADC_results[4]*3.33/4096);
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <print_adc+0xc0>)
 80017f0:	88db      	ldrh	r3, [r3, #6]
 80017f2:	ee05 3a90 	vmov	s11, r3
 80017f6:	eeb8 5be5 	vcvt.f64.s32	d5, s11
 80017fa:	ed9f 4b17 	vldr	d4, [pc, #92]	; 8001858 <print_adc+0xb0>
 80017fe:	ee25 4b04 	vmul.f64	d4, d5, d4
	sprintf((char*) message, "%d, %.2fV, %.2fV, %.2fV, %.2fV", ADC_results[0],
 8001802:	ed9f 3b17 	vldr	d3, [pc, #92]	; 8001860 <print_adc+0xb8>
 8001806:	ee84 5b03 	vdiv.f64	d5, d4, d3
			ADC_results[3]*3.33/4096, ADC_results[4]*3.33/4096);
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <print_adc+0xc0>)
 800180c:	891b      	ldrh	r3, [r3, #8]
 800180e:	ee04 3a90 	vmov	s9, r3
 8001812:	eeb8 4be4 	vcvt.f64.s32	d4, s9
 8001816:	ed9f 3b10 	vldr	d3, [pc, #64]	; 8001858 <print_adc+0xb0>
 800181a:	ee24 3b03 	vmul.f64	d3, d4, d3
	sprintf((char*) message, "%d, %.2fV, %.2fV, %.2fV, %.2fV", ADC_results[0],
 800181e:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8001860 <print_adc+0xb8>
 8001822:	ee83 4b02 	vdiv.f64	d4, d3, d2
 8001826:	463b      	mov	r3, r7
 8001828:	ed8d 4b06 	vstr	d4, [sp, #24]
 800182c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001830:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001834:	ed8d 7b00 	vstr	d7, [sp]
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <print_adc+0xc4>)
 800183a:	4618      	mov	r0, r3
 800183c:	f006 fd32 	bl	80082a4 <siprintf>
	send_UART(message);
 8001840:	463b      	mov	r3, r7
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fcac 	bl	80021a0 <send_UART>
}
 8001848:	bf00      	nop
 800184a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	f3af 8000 	nop.w
 8001858:	0a3d70a4 	.word	0x0a3d70a4
 800185c:	400aa3d7 	.word	0x400aa3d7
 8001860:	00000000 	.word	0x00000000
 8001864:	40b00000 	.word	0x40b00000
 8001868:	200002c4 	.word	0x200002c4
 800186c:	0800bd18 	.word	0x0800bd18

08001870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001878:	f000 fd99 	bl	80023ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800187c:	f000 f842 	bl	8001904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001880:	f7ff feb2 	bl	80015e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001884:	f7ff f9c4 	bl	8000c10 <MX_DMA_Init>
  MX_FATFS_Init();
 8001888:	f005 fdc6 	bl	8007418 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 800188c:	f000 fba8 	bl	8001fe0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001890:	f7ff f8a4 	bl	80009dc <MX_ADC1_Init>
  MX_TIM1_Init();
 8001894:	f000 fb1a 	bl	8001ecc <MX_TIM1_Init>
  MX_SPI1_Init();
 8001898:	f000 f8a2 	bl	80019e0 <MX_SPI1_Init>
  MX_SPI4_Init();
 800189c:	f000 f8de 	bl	8001a5c <MX_SPI4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
	{
		if(has_message_from_UART())
 80018a0:	f000 fc4e 	bl	8002140 <has_message_from_UART>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d016      	beq.n	80018d8 <main+0x68>
		{
		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 80018aa:	463b      	mov	r3, r7
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 fca1 	bl	80021f4 <read_UART>

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80018b2:	2101      	movs	r1, #1
 80018b4:	4810      	ldr	r0, [pc, #64]	; (80018f8 <main+0x88>)
 80018b6:	f001 fee2 	bl	800367e <HAL_GPIO_TogglePin>

		  send_UART((char*) message);
 80018ba:	463b      	mov	r3, r7
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fc6f 	bl	80021a0 <send_UART>

		  while(is_transmitting_to_UART());
 80018c2:	bf00      	nop
 80018c4:	f000 fc48 	bl	8002158 <is_transmitting_to_UART>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1fa      	bne.n	80018c4 <main+0x54>

		  reset_UART();
 80018ce:	f000 fc4f 	bl	8002170 <reset_UART>
		  send_UART(PROMPT);
 80018d2:	480a      	ldr	r0, [pc, #40]	; (80018fc <main+0x8c>)
 80018d4:	f000 fc64 	bl	80021a0 <send_UART>
		}

		if(isButPressed())
 80018d8:	f7ff ff4e 	bl	8001778 <isButPressed>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0de      	beq.n	80018a0 <main+0x30>
		{
			butClear();
 80018e2:	f7ff ff55 	bl	8001790 <butClear>
			send_UART("Button pressed");
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <main+0x90>)
 80018e8:	f000 fc5a 	bl	80021a0 <send_UART>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	4802      	ldr	r0, [pc, #8]	; (80018f8 <main+0x88>)
 80018f0:	f001 fec5 	bl	800367e <HAL_GPIO_TogglePin>
		if(has_message_from_UART())
 80018f4:	e7d4      	b.n	80018a0 <main+0x30>
 80018f6:	bf00      	nop
 80018f8:	40020400 	.word	0x40020400
 80018fc:	0800bd38 	.word	0x0800bd38
 8001900:	0800bd3c 	.word	0x0800bd3c

08001904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b094      	sub	sp, #80	; 0x50
 8001908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	2234      	movs	r2, #52	; 0x34
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f005 fe6e 	bl	80075f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001918:	f107 0308 	add.w	r3, r7, #8
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001928:	4b28      	ldr	r3, [pc, #160]	; (80019cc <SystemClock_Config+0xc8>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	4a27      	ldr	r2, [pc, #156]	; (80019cc <SystemClock_Config+0xc8>)
 800192e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001932:	6413      	str	r3, [r2, #64]	; 0x40
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <SystemClock_Config+0xc8>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <SystemClock_Config+0xcc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001948:	4a21      	ldr	r2, [pc, #132]	; (80019d0 <SystemClock_Config+0xcc>)
 800194a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <SystemClock_Config+0xcc>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800195c:	2302      	movs	r3, #2
 800195e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001960:	2301      	movs	r3, #1
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001964:	2310      	movs	r3, #16
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001968:	2302      	movs	r3, #2
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800196c:	2300      	movs	r3, #0
 800196e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001970:	2308      	movs	r3, #8
 8001972:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001974:	2360      	movs	r3, #96	; 0x60
 8001976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001978:	2306      	movs	r3, #6
 800197a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800197c:	2307      	movs	r3, #7
 800197e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001980:	2302      	movs	r3, #2
 8001982:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4618      	mov	r0, r3
 800198a:	f001 feab 	bl	80036e4 <HAL_RCC_OscConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001994:	f000 f81e 	bl	80019d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001998:	230f      	movs	r3, #15
 800199a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800199c:	2302      	movs	r3, #2
 800199e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 f944 	bl	8003c40 <HAL_RCC_ClockConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80019be:	f000 f809 	bl	80019d4 <Error_Handler>
  }
}
 80019c2:	bf00      	nop
 80019c4:	3750      	adds	r7, #80	; 0x50
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40007000 	.word	0x40007000

080019d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d8:	b672      	cpsid	i
}
 80019da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019dc:	e7fe      	b.n	80019dc <Error_Handler+0x8>
	...

080019e0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <MX_SPI1_Init+0x74>)
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <MX_SPI1_Init+0x78>)
 80019e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <MX_SPI1_Init+0x74>)
 80019ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <MX_SPI1_Init+0x74>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <MX_SPI1_Init+0x74>)
 80019fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a2e:	2207      	movs	r2, #7
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a40:	f002 ff4a 	bl	80048d8 <HAL_SPI_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a4a:	f7ff ffc3 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200002d0 	.word	0x200002d0
 8001a58:	40013000 	.word	0x40013000

08001a5c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <MX_SPI4_Init+0x74>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <MX_SPI4_Init+0x78>)
 8001a64:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_SPI4_Init+0x74>)
 8001a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a6c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <MX_SPI4_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <MX_SPI4_Init+0x74>)
 8001a76:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a7a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_SPI4_Init+0x74>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <MX_SPI4_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_SPI4_Init+0x74>)
 8001a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_SPI4_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_SPI4_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_SPI4_Init+0x74>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <MX_SPI4_Init+0x74>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_SPI4_Init+0x74>)
 8001aaa:	2207      	movs	r2, #7
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <MX_SPI4_Init+0x74>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_SPI4_Init+0x74>)
 8001ab6:	2208      	movs	r2, #8
 8001ab8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_SPI4_Init+0x74>)
 8001abc:	f002 ff0c 	bl	80048d8 <HAL_SPI_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001ac6:	f7ff ff85 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000334 	.word	0x20000334
 8001ad4:	40013400 	.word	0x40013400

08001ad8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	; 0x30
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2e      	ldr	r2, [pc, #184]	; (8001bb0 <HAL_SPI_MspInit+0xd8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d128      	bne.n	8001b4c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001afa:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <HAL_SPI_MspInit+0xdc>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	4a2d      	ldr	r2, [pc, #180]	; (8001bb4 <HAL_SPI_MspInit+0xdc>)
 8001b00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b04:	6453      	str	r3, [r2, #68]	; 0x44
 8001b06:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_SPI_MspInit+0xdc>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <HAL_SPI_MspInit+0xdc>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a27      	ldr	r2, [pc, #156]	; (8001bb4 <HAL_SPI_MspInit+0xdc>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_SPI_MspInit+0xdc>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b2a:	23e0      	movs	r3, #224	; 0xe0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <HAL_SPI_MspInit+0xe0>)
 8001b46:	f001 fbd5 	bl	80032f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001b4a:	e02c      	b.n	8001ba6 <HAL_SPI_MspInit+0xce>
  else if(spiHandle->Instance==SPI4)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1a      	ldr	r2, [pc, #104]	; (8001bbc <HAL_SPI_MspInit+0xe4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d127      	bne.n	8001ba6 <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <HAL_SPI_MspInit+0xdc>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	4a16      	ldr	r2, [pc, #88]	; (8001bb4 <HAL_SPI_MspInit+0xdc>)
 8001b5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b60:	6453      	str	r3, [r2, #68]	; 0x44
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_SPI_MspInit+0xdc>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_SPI_MspInit+0xdc>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <HAL_SPI_MspInit+0xdc>)
 8001b74:	f043 0310 	orr.w	r3, r3, #16
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_SPI_MspInit+0xdc>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001b86:	2364      	movs	r3, #100	; 0x64
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001b96:	2305      	movs	r3, #5
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b9a:	f107 031c 	add.w	r3, r7, #28
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <HAL_SPI_MspInit+0xe8>)
 8001ba2:	f001 fba7 	bl	80032f4 <HAL_GPIO_Init>
}
 8001ba6:	bf00      	nop
 8001ba8:	3730      	adds	r7, #48	; 0x30
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40013000 	.word	0x40013000
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40013400 	.word	0x40013400
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_MspInit+0x44>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <HAL_MspInit+0x44>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <HAL_MspInit+0x44>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_MspInit+0x44>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <HAL_MspInit+0x44>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bec:	6453      	str	r3, [r2, #68]	; 0x44
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_MspInit+0x44>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800

08001c0c <SDTimer_Handler>:

volatile uint8_t FatFSCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <SDTimer_Handler+0x40>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d006      	beq.n	8001c28 <SDTimer_Handler+0x1c>
		Timer1--;
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <SDTimer_Handler+0x40>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <SDTimer_Handler+0x40>)
 8001c26:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <SDTimer_Handler+0x44>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <SDTimer_Handler+0x34>
		Timer2--;
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <SDTimer_Handler+0x44>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SDTimer_Handler+0x44>)
 8001c3e:	801a      	strh	r2, [r3, #0]
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	2000039a 	.word	0x2000039a
 8001c50:	2000039c 	.word	0x2000039c

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <NMI_Handler+0x4>

08001c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <MemManage_Handler+0x4>

08001c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <BusFault_Handler+0x4>

08001c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <UsageFault_Handler+0x4>

08001c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFSCnt++;
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <SysTick_Handler+0x30>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <SysTick_Handler+0x30>)
 8001cac:	701a      	strb	r2, [r3, #0]
	if(FatFSCnt >= 10)
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <SysTick_Handler+0x30>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b09      	cmp	r3, #9
 8001cb6:	d904      	bls.n	8001cc2 <SysTick_Handler+0x26>
	{
		FatFSCnt = 0;
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <SysTick_Handler+0x30>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001cbe:	f7ff ffa5 	bl	8001c0c <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc2:	f000 fbb1 	bl	8002428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000398 	.word	0x20000398

08001cd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001cd6:	f003 fc0a 	bl	80054ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200003a4 	.word	0x200003a4

08001ce4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <USART3_IRQHandler+0x10>)
 8001cea:	f004 f8e7 	bl	8005ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200007fc 	.word	0x200007fc

08001cf8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001cfc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d00:	f001 fcd8 	bl	80036b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <DMA2_Stream0_IRQHandler+0x10>)
 8001d0e:	f001 f8b5 	bl	8002e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2000025c 	.word	0x2000025c

08001d1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return 1;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_kill>:

int _kill(int pid, int sig)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d36:	f005 fc33 	bl	80075a0 <__errno>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2216      	movs	r2, #22
 8001d3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_exit>:

void _exit (int status)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ffe7 	bl	8001d2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d5e:	e7fe      	b.n	8001d5e <_exit+0x12>

08001d60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	e00a      	b.n	8001d88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d72:	f3af 8000 	nop.w
 8001d76:	4601      	mov	r1, r0
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	60ba      	str	r2, [r7, #8]
 8001d7e:	b2ca      	uxtb	r2, r1
 8001d80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3301      	adds	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	dbf0      	blt.n	8001d72 <_read+0x12>
  }

  return len;
 8001d90:	687b      	ldr	r3, [r7, #4]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e009      	b.n	8001dc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	60ba      	str	r2, [r7, #8]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dbf1      	blt.n	8001dac <_write+0x12>
  }
  return len;
 8001dc8:	687b      	ldr	r3, [r7, #4]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_close>:

int _close(int file)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dfa:	605a      	str	r2, [r3, #4]
  return 0;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_isatty>:

int _isatty(int file)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e44:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <_sbrk+0x5c>)
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <_sbrk+0x60>)
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <_sbrk+0x64>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <_sbrk+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d207      	bcs.n	8001e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e6c:	f005 fb98 	bl	80075a0 <__errno>
 8001e70:	4603      	mov	r3, r0
 8001e72:	220c      	movs	r2, #12
 8001e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e009      	b.n	8001e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e82:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <_sbrk+0x64>)
 8001e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20080000 	.word	0x20080000
 8001e9c:	00000400 	.word	0x00000400
 8001ea0:	200003a0 	.word	0x200003a0
 8001ea4:	200008b0 	.word	0x200008b0

08001ea8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <SystemInit+0x20>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <SystemInit+0x20>)
 8001eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed2:	f107 0310 	add.w	r3, r7, #16
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <MX_TIM1_Init+0xa0>)
 8001eec:	4a20      	ldr	r2, [pc, #128]	; (8001f70 <MX_TIM1_Init+0xa4>)
 8001eee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3000-1;
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <MX_TIM1_Init+0xa0>)
 8001ef2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001ef6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <MX_TIM1_Init+0xa0>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16000-1;
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <MX_TIM1_Init+0xa0>)
 8001f00:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001f04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <MX_TIM1_Init+0xa0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f0c:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <MX_TIM1_Init+0xa0>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <MX_TIM1_Init+0xa0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f18:	4814      	ldr	r0, [pc, #80]	; (8001f6c <MX_TIM1_Init+0xa0>)
 8001f1a:	f003 fa91 	bl	8005440 <HAL_TIM_Base_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001f24:	f7ff fd56 	bl	80019d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	4619      	mov	r1, r3
 8001f34:	480d      	ldr	r0, [pc, #52]	; (8001f6c <MX_TIM1_Init+0xa0>)
 8001f36:	f003 fbf9 	bl	800572c <HAL_TIM_ConfigClockSource>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001f40:	f7ff fd48 	bl	80019d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f44:	2320      	movs	r3, #32
 8001f46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	4619      	mov	r1, r3
 8001f54:	4805      	ldr	r0, [pc, #20]	; (8001f6c <MX_TIM1_Init+0xa0>)
 8001f56:	f003 fe15 	bl	8005b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001f60:	f7ff fd38 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200003a4 	.word	0x200003a4
 8001f70:	40010000 	.word	0x40010000

08001f74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <HAL_TIM_Base_MspInit+0x44>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d113      	bne.n	8001fae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_TIM_Base_MspInit+0x48>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <HAL_TIM_Base_MspInit+0x48>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_TIM_Base_MspInit+0x48>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2019      	movs	r0, #25
 8001fa4:	f000 fdf3 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fa8:	2019      	movs	r0, #25
 8001faa:	f000 fe0c 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 1 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4804      	ldr	r0, [pc, #16]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001fcc:	f001 fb57 	bl	800367e <HAL_GPIO_TogglePin>
	print_adc();
 8001fd0:	f7ff fbea 	bl	80017a8 <print_adc>
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40020400 	.word	0x40020400

08001fe0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <MX_USART3_UART_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 8001fea:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <MX_USART3_UART_Init+0x78>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <MX_USART3_UART_Init+0x7c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <MX_USART3_UART_Init+0x80>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <MX_USART3_UART_Init+0x84>)
 8001ffe:	220d      	movs	r2, #13
 8002000:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <MX_USART3_UART_Init+0x88>)
 8002004:	4a19      	ldr	r2, [pc, #100]	; (800206c <MX_USART3_UART_Init+0x8c>)
 8002006:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002008:	4b17      	ldr	r3, [pc, #92]	; (8002068 <MX_USART3_UART_Init+0x88>)
 800200a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800200e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <MX_USART3_UART_Init+0x88>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <MX_USART3_UART_Init+0x88>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <MX_USART3_UART_Init+0x88>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <MX_USART3_UART_Init+0x88>)
 8002024:	220c      	movs	r2, #12
 8002026:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002028:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <MX_USART3_UART_Init+0x88>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <MX_USART3_UART_Init+0x88>)
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <MX_USART3_UART_Init+0x88>)
 8002036:	2200      	movs	r2, #0
 8002038:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <MX_USART3_UART_Init+0x88>)
 800203c:	2200      	movs	r2, #0
 800203e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <MX_USART3_UART_Init+0x88>)
 8002042:	f003 fe4b 	bl	8005cdc <HAL_UART_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 800204c:	f7ff fcc2 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200007f8 	.word	0x200007f8
 8002058:	200007f9 	.word	0x200007f9
 800205c:	200005f0 	.word	0x200005f0
 8002060:	200007f4 	.word	0x200007f4
 8002064:	200005f4 	.word	0x200005f4
 8002068:	200007fc 	.word	0x200007fc
 800206c:	40004800 	.word	0x40004800

08002070 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b0ae      	sub	sp, #184	; 0xb8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	2290      	movs	r2, #144	; 0x90
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f005 faaf 	bl	80075f4 <memset>
  if(uartHandle->Instance==USART3)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a26      	ldr	r2, [pc, #152]	; (8002134 <HAL_UART_MspInit+0xc4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d144      	bne.n	800212a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020a6:	2300      	movs	r3, #0
 80020a8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 ffea 	bl	8004088 <HAL_RCCEx_PeriphCLKConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020ba:	f7ff fc8b 	bl	80019d4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020be:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <HAL_UART_MspInit+0xc8>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <HAL_UART_MspInit+0xc8>)
 80020c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_UART_MspInit+0xc8>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_UART_MspInit+0xc8>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_UART_MspInit+0xc8>)
 80020dc:	f043 0308 	orr.w	r3, r3, #8
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_UART_MspInit+0xc8>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002108:	2307      	movs	r3, #7
 800210a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800210e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002112:	4619      	mov	r1, r3
 8002114:	4809      	ldr	r0, [pc, #36]	; (800213c <HAL_UART_MspInit+0xcc>)
 8002116:	f001 f8ed 	bl	80032f4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2027      	movs	r0, #39	; 0x27
 8002120:	f000 fd35 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002124:	2027      	movs	r0, #39	; 0x27
 8002126:	f000 fd4e 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800212a:	bf00      	nop
 800212c:	37b8      	adds	r7, #184	; 0xb8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40004800 	.word	0x40004800
 8002138:	40023800 	.word	0x40023800
 800213c:	40020c00 	.word	0x40020c00

08002140 <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
	return flagCPP;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <has_message_from_UART+0x14>)
 8002146:	781b      	ldrb	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	200007f8 	.word	0x200007f8

08002158 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
	return flagCPE;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <is_transmitting_to_UART+0x14>)
 800215e:	781b      	ldrb	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	200007f9 	.word	0x200007f9

08002170 <reset_UART>:

void reset_UART()
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 8002174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002178:	2100      	movs	r1, #0
 800217a:	4806      	ldr	r0, [pc, #24]	; (8002194 <reset_UART+0x24>)
 800217c:	f005 fa3a 	bl	80075f4 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8002180:	2201      	movs	r2, #1
 8002182:	4904      	ldr	r1, [pc, #16]	; (8002194 <reset_UART+0x24>)
 8002184:	4804      	ldr	r0, [pc, #16]	; (8002198 <reset_UART+0x28>)
 8002186:	f003 fe55 	bl	8005e34 <HAL_UART_Receive_IT>
	flagCPP = false;
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <reset_UART+0x2c>)
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}
 8002194:	200003f0 	.word	0x200003f0
 8002198:	200007fc 	.word	0x200007fc
 800219c:	200007f8 	.word	0x200007f8

080021a0 <send_UART>:

void send_UART(const char* msg_to_send)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 80021a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	480d      	ldr	r0, [pc, #52]	; (80021e4 <send_UART+0x44>)
 80021b0:	f006 f898 	bl	80082e4 <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 80021b4:	480b      	ldr	r0, [pc, #44]	; (80021e4 <send_UART+0x44>)
 80021b6:	f7fe f843 	bl	8000240 <strlen>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <send_UART+0x44>)
 80021c0:	4413      	add	r3, r2
 80021c2:	4909      	ldr	r1, [pc, #36]	; (80021e8 <send_UART+0x48>)
 80021c4:	461a      	mov	r2, r3
 80021c6:	460b      	mov	r3, r1
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <send_UART+0x4c>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 80021d2:	2201      	movs	r2, #1
 80021d4:	4903      	ldr	r1, [pc, #12]	; (80021e4 <send_UART+0x44>)
 80021d6:	4806      	ldr	r0, [pc, #24]	; (80021f0 <send_UART+0x50>)
 80021d8:	f003 fdce 	bl	8005d78 <HAL_UART_Transmit_IT>
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200005f4 	.word	0x200005f4
 80021e8:	0800bd4c 	.word	0x0800bd4c
 80021ec:	200007f9 	.word	0x200007f9
 80021f0:	200007fc 	.word	0x200007fc

080021f4 <read_UART>:

void read_UART(char* msg_to_read)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 80021fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002200:	4903      	ldr	r1, [pc, #12]	; (8002210 <read_UART+0x1c>)
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f006 f86e 	bl	80082e4 <strncpy>
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	200003f0 	.word	0x200003f0

08002214 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 800221c:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <HAL_UART_RxCpltCallback+0xc4>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d154      	bne.n	80022ce <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 8002224:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2d      	ldr	r2, [pc, #180]	; (80022e0 <HAL_UART_RxCpltCallback+0xcc>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	2b0d      	cmp	r3, #13
 800222e:	d00b      	beq.n	8002248 <HAL_UART_RxCpltCallback+0x34>
 8002230:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a2a      	ldr	r2, [pc, #168]	; (80022e0 <HAL_UART_RxCpltCallback+0xcc>)
 8002236:	5cd3      	ldrb	r3, [r2, r3]
 8002238:	2b5c      	cmp	r3, #92	; 0x5c
 800223a:	d005      	beq.n	8002248 <HAL_UART_RxCpltCallback+0x34>
 800223c:	4b27      	ldr	r3, [pc, #156]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a27      	ldr	r2, [pc, #156]	; (80022e0 <HAL_UART_RxCpltCallback+0xcc>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	2b2f      	cmp	r3, #47	; 0x2f
 8002246:	d106      	bne.n	8002256 <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 8002248:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 800224e:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <HAL_UART_RxCpltCallback+0xc4>)
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e03c      	b.n	80022d0 <HAL_UART_RxCpltCallback+0xbc>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 8002256:	4b21      	ldr	r3, [pc, #132]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <HAL_UART_RxCpltCallback+0xcc>)
 800225c:	5cd3      	ldrb	r3, [r2, r3]
 800225e:	2b08      	cmp	r3, #8
 8002260:	d10f      	bne.n	8002282 <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 800226a:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3b01      	subs	r3, #1
 8002270:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	e01c      	b.n	80022b0 <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	3b02      	subs	r3, #2
 800227c:	4a17      	ldr	r2, [pc, #92]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e016      	b.n	80022b0 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 8002282:	4b16      	ldr	r3, [pc, #88]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <HAL_UART_RxCpltCallback+0xcc>)
 8002288:	5cd3      	ldrb	r3, [r2, r3]
 800228a:	2b1b      	cmp	r3, #27
 800228c:	d104      	bne.n	8002298 <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e00b      	b.n	80022b0 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8002298:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <HAL_UART_RxCpltCallback+0xcc>)
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	2b24      	cmp	r3, #36	; 0x24
 80022a2:	d105      	bne.n	80022b0 <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <HAL_UART_RxCpltCallback+0xcc>)
 80022ac:	2224      	movs	r2, #36	; 0x24
 80022ae:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	4a09      	ldr	r2, [pc, #36]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_UART_RxCpltCallback+0xc8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <HAL_UART_RxCpltCallback+0xcc>)
 80022c0:	4413      	add	r3, r2
 80022c2:	2201      	movs	r2, #1
 80022c4:	4619      	mov	r1, r3
 80022c6:	4807      	ldr	r0, [pc, #28]	; (80022e4 <HAL_UART_RxCpltCallback+0xd0>)
 80022c8:	f003 fdb4 	bl	8005e34 <HAL_UART_Receive_IT>
 80022cc:	e000      	b.n	80022d0 <HAL_UART_RxCpltCallback+0xbc>
		return;
 80022ce:	bf00      	nop
	}
}
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200007f8 	.word	0x200007f8
 80022dc:	200005f0 	.word	0x200005f0
 80022e0:	200003f0 	.word	0x200003f0
 80022e4:	200007fc 	.word	0x200007fc

080022e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_UART_TxCpltCallback+0x64>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	f083 0301 	eor.w	r3, r3, #1
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d122      	bne.n	8002344 <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_UART_TxCpltCallback+0x68>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a14      	ldr	r2, [pc, #80]	; (8002354 <HAL_UART_TxCpltCallback+0x6c>)
 8002304:	5cd3      	ldrb	r3, [r2, r3]
 8002306:	2b0d      	cmp	r3, #13
 8002308:	d10d      	bne.n	8002326 <HAL_UART_TxCpltCallback+0x3e>
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_UART_TxCpltCallback+0x68>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3b01      	subs	r3, #1
 8002310:	4a10      	ldr	r2, [pc, #64]	; (8002354 <HAL_UART_TxCpltCallback+0x6c>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	2b0a      	cmp	r3, #10
 8002316:	d006      	beq.n	8002326 <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_UART_TxCpltCallback+0x68>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_UART_TxCpltCallback+0x64>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
 8002324:	e00f      	b.n	8002346 <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <HAL_UART_TxCpltCallback+0x68>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3301      	adds	r3, #1
 800232c:	4a08      	ldr	r2, [pc, #32]	; (8002350 <HAL_UART_TxCpltCallback+0x68>)
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_UART_TxCpltCallback+0x68>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a07      	ldr	r2, [pc, #28]	; (8002354 <HAL_UART_TxCpltCallback+0x6c>)
 8002336:	4413      	add	r3, r2
 8002338:	2201      	movs	r2, #1
 800233a:	4619      	mov	r1, r3
 800233c:	4806      	ldr	r0, [pc, #24]	; (8002358 <HAL_UART_TxCpltCallback+0x70>)
 800233e:	f003 fd1b 	bl	8005d78 <HAL_UART_Transmit_IT>
 8002342:	e000      	b.n	8002346 <HAL_UART_TxCpltCallback+0x5e>
		return;
 8002344:	bf00      	nop
}
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	200007f9 	.word	0x200007f9
 8002350:	200007f4 	.word	0x200007f4
 8002354:	200005f4 	.word	0x200005f4
 8002358:	200007fc 	.word	0x200007fc

0800235c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800235c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002394 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002360:	480d      	ldr	r0, [pc, #52]	; (8002398 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002362:	490e      	ldr	r1, [pc, #56]	; (800239c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002364:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002368:	e002      	b.n	8002370 <LoopCopyDataInit>

0800236a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800236a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800236c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236e:	3304      	adds	r3, #4

08002370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002374:	d3f9      	bcc.n	800236a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002376:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002378:	4c0b      	ldr	r4, [pc, #44]	; (80023a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800237c:	e001      	b.n	8002382 <LoopFillZerobss>

0800237e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002380:	3204      	adds	r2, #4

08002382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002384:	d3fb      	bcc.n	800237e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002386:	f7ff fd8f 	bl	8001ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800238a:	f005 f90f 	bl	80075ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800238e:	f7ff fa6f 	bl	8001870 <main>
  bx  lr    
 8002392:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002394:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800239c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80023a0:	0800c224 	.word	0x0800c224
  ldr r2, =_sbss
 80023a4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80023a8:	200008ac 	.word	0x200008ac

080023ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023ac:	e7fe      	b.n	80023ac <ADC_IRQHandler>

080023ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b2:	2003      	movs	r0, #3
 80023b4:	f000 fbe0 	bl	8002b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023b8:	2000      	movs	r0, #0
 80023ba:	f000 f805 	bl	80023c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023be:	f7ff fc01 	bl	8001bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_InitTick+0x54>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_InitTick+0x58>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023de:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fbfb 	bl	8002be2 <HAL_SYSTICK_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00e      	b.n	8002414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b0f      	cmp	r3, #15
 80023fa:	d80a      	bhi.n	8002412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023fc:	2200      	movs	r2, #0
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	f000 fbc3 	bl	8002b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002408:	4a06      	ldr	r2, [pc, #24]	; (8002424 <HAL_InitTick+0x5c>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	e000      	b.n	8002414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000004 	.word	0x20000004
 8002420:	2000000c 	.word	0x2000000c
 8002424:	20000008 	.word	0x20000008

08002428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_IncTick+0x20>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_IncTick+0x24>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4413      	add	r3, r2
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_IncTick+0x24>)
 800243a:	6013      	str	r3, [r2, #0]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	2000000c 	.word	0x2000000c
 800244c:	20000884 	.word	0x20000884

08002450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return uwTick;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_GetTick+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000884 	.word	0x20000884

08002468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff ffee 	bl	8002450 <HAL_GetTick>
 8002474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002480:	d005      	beq.n	800248e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_Delay+0x44>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4413      	add	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800248e:	bf00      	nop
 8002490:	f7ff ffde 	bl	8002450 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	429a      	cmp	r2, r3
 800249e:	d8f7      	bhi.n	8002490 <HAL_Delay+0x28>
  {
  }
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2000000c 	.word	0x2000000c

080024b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e031      	b.n	800252a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fe fb10 	bl	8000af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d116      	bne.n	800251c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_ADC_Init+0x84>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	f043 0202 	orr.w	r2, r3, #2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f970 	bl	80027e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f023 0303 	bic.w	r3, r3, #3
 8002512:	f043 0201 	orr.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
 800251a:	e001      	b.n	8002520 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	ffffeefd 	.word	0xffffeefd

08002538 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x1c>
 8002550:	2302      	movs	r3, #2
 8002552:	e136      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x28a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b09      	cmp	r3, #9
 8002562:	d93a      	bls.n	80025da <HAL_ADC_ConfigChannel+0xa2>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800256c:	d035      	beq.n	80025da <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68d9      	ldr	r1, [r3, #12]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	b29b      	uxth	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	3b1e      	subs	r3, #30
 8002584:	2207      	movs	r2, #7
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	400a      	ands	r2, r1
 8002592:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a8d      	ldr	r2, [pc, #564]	; (80027d0 <HAL_ADC_ConfigChannel+0x298>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10a      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68d9      	ldr	r1, [r3, #12]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	061a      	lsls	r2, r3, #24
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025b2:	e035      	b.n	8002620 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68d9      	ldr	r1, [r3, #12]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4618      	mov	r0, r3
 80025c6:	4603      	mov	r3, r0
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4403      	add	r3, r0
 80025cc:	3b1e      	subs	r3, #30
 80025ce:	409a      	lsls	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025d8:	e022      	b.n	8002620 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6919      	ldr	r1, [r3, #16]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	2207      	movs	r2, #7
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43da      	mvns	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	400a      	ands	r2, r1
 80025fc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6919      	ldr	r1, [r3, #16]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	4618      	mov	r0, r3
 8002610:	4603      	mov	r3, r0
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4403      	add	r3, r0
 8002616:	409a      	lsls	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b06      	cmp	r3, #6
 8002626:	d824      	bhi.n	8002672 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	3b05      	subs	r3, #5
 800263a:	221f      	movs	r2, #31
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43da      	mvns	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	400a      	ands	r2, r1
 8002648:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	4618      	mov	r0, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	3b05      	subs	r3, #5
 8002664:	fa00 f203 	lsl.w	r2, r0, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	635a      	str	r2, [r3, #52]	; 0x34
 8002670:	e04c      	b.n	800270c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d824      	bhi.n	80026c4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	3b23      	subs	r3, #35	; 0x23
 800268c:	221f      	movs	r2, #31
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	400a      	ands	r2, r1
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4618      	mov	r0, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	3b23      	subs	r3, #35	; 0x23
 80026b6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
 80026c2:	e023      	b.n	800270c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	3b41      	subs	r3, #65	; 0x41
 80026d6:	221f      	movs	r2, #31
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43da      	mvns	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	400a      	ands	r2, r1
 80026e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	4618      	mov	r0, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	3b41      	subs	r3, #65	; 0x41
 8002700:	fa00 f203 	lsl.w	r2, r0, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a30      	ldr	r2, [pc, #192]	; (80027d4 <HAL_ADC_ConfigChannel+0x29c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d10a      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1f4>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800271e:	d105      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002720:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4a2c      	ldr	r2, [pc, #176]	; (80027d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002726:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800272a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a28      	ldr	r2, [pc, #160]	; (80027d4 <HAL_ADC_ConfigChannel+0x29c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10f      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x21e>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b12      	cmp	r3, #18
 800273c:	d10b      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800273e:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4a25      	ldr	r2, [pc, #148]	; (80027d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002744:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002748:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800274a:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <HAL_ADC_ConfigChannel+0x2a0>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002750:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002754:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1e      	ldr	r2, [pc, #120]	; (80027d4 <HAL_ADC_ConfigChannel+0x29c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d12b      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x280>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1a      	ldr	r2, [pc, #104]	; (80027d0 <HAL_ADC_ConfigChannel+0x298>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d003      	beq.n	8002772 <HAL_ADC_ConfigChannel+0x23a>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b11      	cmp	r3, #17
 8002770:	d122      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002772:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002778:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800277c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800277e:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4a15      	ldr	r2, [pc, #84]	; (80027d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002784:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002788:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <HAL_ADC_ConfigChannel+0x298>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d111      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_ADC_ConfigChannel+0x2a4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <HAL_ADC_ConfigChannel+0x2a8>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0c9a      	lsrs	r2, r3, #18
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027aa:	e002      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f9      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	10000012 	.word	0x10000012
 80027d4:	40012000 	.word	0x40012000
 80027d8:	40012300 	.word	0x40012300
 80027dc:	20000004 	.word	0x20000004
 80027e0:	431bde83 	.word	0x431bde83

080027e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80027ec:	4b78      	ldr	r3, [pc, #480]	; (80029d0 <ADC_Init+0x1ec>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4a77      	ldr	r2, [pc, #476]	; (80029d0 <ADC_Init+0x1ec>)
 80027f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80027f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80027f8:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <ADC_Init+0x1ec>)
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4973      	ldr	r1, [pc, #460]	; (80029d0 <ADC_Init+0x1ec>)
 8002802:	4313      	orrs	r3, r2
 8002804:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002814:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	021a      	lsls	r2, r3, #8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002838:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6859      	ldr	r1, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800285a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6899      	ldr	r1, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002872:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <ADC_Init+0x1f0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d022      	beq.n	80028be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002886:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6899      	ldr	r1, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6899      	ldr	r1, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	e00f      	b.n	80028de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0202 	bic.w	r2, r2, #2
 80028ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6899      	ldr	r1, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	005a      	lsls	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01b      	beq.n	8002944 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800291a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800292a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6859      	ldr	r1, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	3b01      	subs	r3, #1
 8002938:	035a      	lsls	r2, r3, #13
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	e007      	b.n	8002954 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002952:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002962:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	3b01      	subs	r3, #1
 8002970:	051a      	lsls	r2, r3, #20
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002988:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002996:	025a      	lsls	r2, r3, #9
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6899      	ldr	r1, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	029a      	lsls	r2, r3, #10
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	609a      	str	r2, [r3, #8]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	40012300 	.word	0x40012300
 80029d4:	0f000001 	.word	0x0f000001

080029d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <__NVIC_SetPriorityGrouping+0x40>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029f4:	4013      	ands	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <__NVIC_SetPriorityGrouping+0x44>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a06:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <__NVIC_SetPriorityGrouping+0x40>)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	60d3      	str	r3, [r2, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00
 8002a1c:	05fa0000 	.word	0x05fa0000

08002a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a24:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <__NVIC_GetPriorityGrouping+0x18>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	f003 0307 	and.w	r3, r3, #7
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	db0b      	blt.n	8002a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	f003 021f 	and.w	r2, r3, #31
 8002a54:	4907      	ldr	r1, [pc, #28]	; (8002a74 <__NVIC_EnableIRQ+0x38>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000e100 	.word	0xe000e100

08002a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	6039      	str	r1, [r7, #0]
 8002a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	db0a      	blt.n	8002aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	490c      	ldr	r1, [pc, #48]	; (8002ac4 <__NVIC_SetPriority+0x4c>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	0112      	lsls	r2, r2, #4
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa0:	e00a      	b.n	8002ab8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4908      	ldr	r1, [pc, #32]	; (8002ac8 <__NVIC_SetPriority+0x50>)
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	3b04      	subs	r3, #4
 8002ab0:	0112      	lsls	r2, r2, #4
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	761a      	strb	r2, [r3, #24]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000e100 	.word	0xe000e100
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f1c3 0307 	rsb	r3, r3, #7
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	bf28      	it	cs
 8002aea:	2304      	movcs	r3, #4
 8002aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3304      	adds	r3, #4
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d902      	bls.n	8002afc <NVIC_EncodePriority+0x30>
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3b03      	subs	r3, #3
 8002afa:	e000      	b.n	8002afe <NVIC_EncodePriority+0x32>
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	401a      	ands	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b14:	f04f 31ff 	mov.w	r1, #4294967295
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	43d9      	mvns	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b24:	4313      	orrs	r3, r2
         );
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3724      	adds	r7, #36	; 0x24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b44:	d301      	bcc.n	8002b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b46:	2301      	movs	r3, #1
 8002b48:	e00f      	b.n	8002b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	; (8002b74 <SysTick_Config+0x40>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b52:	210f      	movs	r1, #15
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	f7ff ff8e 	bl	8002a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <SysTick_Config+0x40>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b62:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <SysTick_Config+0x40>)
 8002b64:	2207      	movs	r2, #7
 8002b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	e000e010 	.word	0xe000e010

08002b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ff29 	bl	80029d8 <__NVIC_SetPriorityGrouping>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba0:	f7ff ff3e 	bl	8002a20 <__NVIC_GetPriorityGrouping>
 8002ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	6978      	ldr	r0, [r7, #20]
 8002bac:	f7ff ff8e 	bl	8002acc <NVIC_EncodePriority>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff5d 	bl	8002a78 <__NVIC_SetPriority>
}
 8002bbe:	bf00      	nop
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff31 	bl	8002a3c <__NVIC_EnableIRQ>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ffa2 	bl	8002b34 <SysTick_Config>
 8002bf0:	4603      	mov	r3, r0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c08:	f7ff fc22 	bl	8002450 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e099      	b.n	8002d4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c38:	e00f      	b.n	8002c5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c3a:	f7ff fc09 	bl	8002450 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d908      	bls.n	8002c5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2203      	movs	r2, #3
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e078      	b.n	8002d4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1e8      	bne.n	8002c3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4b38      	ldr	r3, [pc, #224]	; (8002d54 <HAL_DMA_Init+0x158>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d107      	bne.n	8002cc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f023 0307 	bic.w	r3, r3, #7
 8002cda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d117      	bne.n	8002d1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00e      	beq.n	8002d1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fa7b 	bl	80031fc <DMA_CheckFifoParam>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2240      	movs	r2, #64	; 0x40
 8002d10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e016      	b.n	8002d4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fa32 	bl	8003190 <DMA_CalcBaseAndBitshift>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d34:	223f      	movs	r2, #63	; 0x3f
 8002d36:	409a      	lsls	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	e010803f 	.word	0xe010803f

08002d58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d66:	f7ff fb73 	bl	8002450 <HAL_GetTick>
 8002d6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d008      	beq.n	8002d8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e052      	b.n	8002e30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0216 	bic.w	r2, r2, #22
 8002d98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002da8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d103      	bne.n	8002dba <HAL_DMA_Abort+0x62>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0208 	bic.w	r2, r2, #8
 8002dc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0201 	bic.w	r2, r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dda:	e013      	b.n	8002e04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ddc:	f7ff fb38 	bl	8002450 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d90c      	bls.n	8002e04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2203      	movs	r2, #3
 8002df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e015      	b.n	8002e30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1e4      	bne.n	8002ddc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e16:	223f      	movs	r2, #63	; 0x3f
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d004      	beq.n	8002e56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2280      	movs	r2, #128	; 0x80
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e00c      	b.n	8002e70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2205      	movs	r2, #5
 8002e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002e88:	4b8e      	ldr	r3, [pc, #568]	; (80030c4 <HAL_DMA_IRQHandler+0x248>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a8e      	ldr	r2, [pc, #568]	; (80030c8 <HAL_DMA_IRQHandler+0x24c>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	0a9b      	lsrs	r3, r3, #10
 8002e94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01a      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d013      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0204 	bic.w	r2, r2, #4
 8002ece:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eec:	2201      	movs	r2, #1
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d012      	beq.n	8002f1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	f043 0202 	orr.w	r2, r3, #2
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	2204      	movs	r2, #4
 8002f24:	409a      	lsls	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d012      	beq.n	8002f54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f40:	2204      	movs	r2, #4
 8002f42:	409a      	lsls	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	f043 0204 	orr.w	r2, r3, #4
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f58:	2210      	movs	r2, #16
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d043      	beq.n	8002fec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d03c      	beq.n	8002fec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f76:	2210      	movs	r2, #16
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d018      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d108      	bne.n	8002fac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d024      	beq.n	8002fec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
 8002faa:	e01f      	b.n	8002fec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01b      	beq.n	8002fec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	4798      	blx	r3
 8002fbc:	e016      	b.n	8002fec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d107      	bne.n	8002fdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0208 	bic.w	r2, r2, #8
 8002fda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 808f 	beq.w	800311c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8087 	beq.w	800311c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	2220      	movs	r2, #32
 8003014:	409a      	lsls	r2, r3
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b05      	cmp	r3, #5
 8003024:	d136      	bne.n	8003094 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0216 	bic.w	r2, r2, #22
 8003034:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003044:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d103      	bne.n	8003056 <HAL_DMA_IRQHandler+0x1da>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0208 	bic.w	r2, r2, #8
 8003064:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306a:	223f      	movs	r2, #63	; 0x3f
 800306c:	409a      	lsls	r2, r3
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003086:	2b00      	cmp	r3, #0
 8003088:	d07e      	beq.n	8003188 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	4798      	blx	r3
        }
        return;
 8003092:	e079      	b.n	8003188 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d01d      	beq.n	80030de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10d      	bne.n	80030cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d031      	beq.n	800311c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	4798      	blx	r3
 80030c0:	e02c      	b.n	800311c <HAL_DMA_IRQHandler+0x2a0>
 80030c2:	bf00      	nop
 80030c4:	20000004 	.word	0x20000004
 80030c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d023      	beq.n	800311c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
 80030dc:	e01e      	b.n	800311c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10f      	bne.n	800310c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0210 	bic.w	r2, r2, #16
 80030fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003120:	2b00      	cmp	r3, #0
 8003122:	d032      	beq.n	800318a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d022      	beq.n	8003176 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2205      	movs	r2, #5
 8003134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	3301      	adds	r3, #1
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	429a      	cmp	r2, r3
 8003152:	d307      	bcc.n	8003164 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f2      	bne.n	8003148 <HAL_DMA_IRQHandler+0x2cc>
 8003162:	e000      	b.n	8003166 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003164:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	4798      	blx	r3
 8003186:	e000      	b.n	800318a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003188:	bf00      	nop
    }
  }
}
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	3b10      	subs	r3, #16
 80031a0:	4a13      	ldr	r2, [pc, #76]	; (80031f0 <DMA_CalcBaseAndBitshift+0x60>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031aa:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <DMA_CalcBaseAndBitshift+0x64>)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d908      	bls.n	80031d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <DMA_CalcBaseAndBitshift+0x68>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	1d1a      	adds	r2, r3, #4
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	659a      	str	r2, [r3, #88]	; 0x58
 80031ce:	e006      	b.n	80031de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <DMA_CalcBaseAndBitshift+0x68>)
 80031d8:	4013      	ands	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	aaaaaaab 	.word	0xaaaaaaab
 80031f4:	0800bd68 	.word	0x0800bd68
 80031f8:	fffffc00 	.word	0xfffffc00

080031fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d11f      	bne.n	8003256 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d856      	bhi.n	80032ca <DMA_CheckFifoParam+0xce>
 800321c:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <DMA_CheckFifoParam+0x28>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	08003235 	.word	0x08003235
 8003228:	08003247 	.word	0x08003247
 800322c:	08003235 	.word	0x08003235
 8003230:	080032cb 	.word	0x080032cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d046      	beq.n	80032ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003244:	e043      	b.n	80032ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800324e:	d140      	bne.n	80032d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003254:	e03d      	b.n	80032d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325e:	d121      	bne.n	80032a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d837      	bhi.n	80032d6 <DMA_CheckFifoParam+0xda>
 8003266:	a201      	add	r2, pc, #4	; (adr r2, 800326c <DMA_CheckFifoParam+0x70>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	0800327d 	.word	0x0800327d
 8003270:	08003283 	.word	0x08003283
 8003274:	0800327d 	.word	0x0800327d
 8003278:	08003295 	.word	0x08003295
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
      break;
 8003280:	e030      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d025      	beq.n	80032da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003292:	e022      	b.n	80032da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800329c:	d11f      	bne.n	80032de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032a2:	e01c      	b.n	80032de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d903      	bls.n	80032b2 <DMA_CheckFifoParam+0xb6>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d003      	beq.n	80032b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032b0:	e018      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
      break;
 80032b6:	e015      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00e      	beq.n	80032e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
      break;
 80032c8:	e00b      	b.n	80032e2 <DMA_CheckFifoParam+0xe6>
      break;
 80032ca:	bf00      	nop
 80032cc:	e00a      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;
 80032ce:	bf00      	nop
 80032d0:	e008      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;
 80032d2:	bf00      	nop
 80032d4:	e006      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;
 80032d6:	bf00      	nop
 80032d8:	e004      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;
 80032da:	bf00      	nop
 80032dc:	e002      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80032de:	bf00      	nop
 80032e0:	e000      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;
 80032e2:	bf00      	nop
    }
  } 
  
  return status; 
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop

080032f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b089      	sub	sp, #36	; 0x24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	e175      	b.n	8003600 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003314:	2201      	movs	r2, #1
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	429a      	cmp	r2, r3
 800332e:	f040 8164 	bne.w	80035fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b01      	cmp	r3, #1
 800333c:	d005      	beq.n	800334a <HAL_GPIO_Init+0x56>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d130      	bne.n	80033ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	2203      	movs	r2, #3
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003380:	2201      	movs	r2, #1
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 0201 	and.w	r2, r3, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d017      	beq.n	80033e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d123      	bne.n	800343c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	08da      	lsrs	r2, r3, #3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3208      	adds	r2, #8
 80033fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	220f      	movs	r2, #15
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	08da      	lsrs	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3208      	adds	r2, #8
 8003436:	69b9      	ldr	r1, [r7, #24]
 8003438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0203 	and.w	r2, r3, #3
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80be 	beq.w	80035fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347e:	4b66      	ldr	r3, [pc, #408]	; (8003618 <HAL_GPIO_Init+0x324>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	4a65      	ldr	r2, [pc, #404]	; (8003618 <HAL_GPIO_Init+0x324>)
 8003484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003488:	6453      	str	r3, [r2, #68]	; 0x44
 800348a:	4b63      	ldr	r3, [pc, #396]	; (8003618 <HAL_GPIO_Init+0x324>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003496:	4a61      	ldr	r2, [pc, #388]	; (800361c <HAL_GPIO_Init+0x328>)
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	089b      	lsrs	r3, r3, #2
 800349c:	3302      	adds	r3, #2
 800349e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	220f      	movs	r2, #15
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a58      	ldr	r2, [pc, #352]	; (8003620 <HAL_GPIO_Init+0x32c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d037      	beq.n	8003532 <HAL_GPIO_Init+0x23e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a57      	ldr	r2, [pc, #348]	; (8003624 <HAL_GPIO_Init+0x330>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d031      	beq.n	800352e <HAL_GPIO_Init+0x23a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a56      	ldr	r2, [pc, #344]	; (8003628 <HAL_GPIO_Init+0x334>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d02b      	beq.n	800352a <HAL_GPIO_Init+0x236>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a55      	ldr	r2, [pc, #340]	; (800362c <HAL_GPIO_Init+0x338>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d025      	beq.n	8003526 <HAL_GPIO_Init+0x232>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a54      	ldr	r2, [pc, #336]	; (8003630 <HAL_GPIO_Init+0x33c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01f      	beq.n	8003522 <HAL_GPIO_Init+0x22e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a53      	ldr	r2, [pc, #332]	; (8003634 <HAL_GPIO_Init+0x340>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d019      	beq.n	800351e <HAL_GPIO_Init+0x22a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a52      	ldr	r2, [pc, #328]	; (8003638 <HAL_GPIO_Init+0x344>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_GPIO_Init+0x226>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a51      	ldr	r2, [pc, #324]	; (800363c <HAL_GPIO_Init+0x348>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00d      	beq.n	8003516 <HAL_GPIO_Init+0x222>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a50      	ldr	r2, [pc, #320]	; (8003640 <HAL_GPIO_Init+0x34c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d007      	beq.n	8003512 <HAL_GPIO_Init+0x21e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4f      	ldr	r2, [pc, #316]	; (8003644 <HAL_GPIO_Init+0x350>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <HAL_GPIO_Init+0x21a>
 800350a:	2309      	movs	r3, #9
 800350c:	e012      	b.n	8003534 <HAL_GPIO_Init+0x240>
 800350e:	230a      	movs	r3, #10
 8003510:	e010      	b.n	8003534 <HAL_GPIO_Init+0x240>
 8003512:	2308      	movs	r3, #8
 8003514:	e00e      	b.n	8003534 <HAL_GPIO_Init+0x240>
 8003516:	2307      	movs	r3, #7
 8003518:	e00c      	b.n	8003534 <HAL_GPIO_Init+0x240>
 800351a:	2306      	movs	r3, #6
 800351c:	e00a      	b.n	8003534 <HAL_GPIO_Init+0x240>
 800351e:	2305      	movs	r3, #5
 8003520:	e008      	b.n	8003534 <HAL_GPIO_Init+0x240>
 8003522:	2304      	movs	r3, #4
 8003524:	e006      	b.n	8003534 <HAL_GPIO_Init+0x240>
 8003526:	2303      	movs	r3, #3
 8003528:	e004      	b.n	8003534 <HAL_GPIO_Init+0x240>
 800352a:	2302      	movs	r3, #2
 800352c:	e002      	b.n	8003534 <HAL_GPIO_Init+0x240>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <HAL_GPIO_Init+0x240>
 8003532:	2300      	movs	r3, #0
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	f002 0203 	and.w	r2, r2, #3
 800353a:	0092      	lsls	r2, r2, #2
 800353c:	4093      	lsls	r3, r2
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003544:	4935      	ldr	r1, [pc, #212]	; (800361c <HAL_GPIO_Init+0x328>)
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	089b      	lsrs	r3, r3, #2
 800354a:	3302      	adds	r3, #2
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003552:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <HAL_GPIO_Init+0x354>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003576:	4a34      	ldr	r2, [pc, #208]	; (8003648 <HAL_GPIO_Init+0x354>)
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800357c:	4b32      	ldr	r3, [pc, #200]	; (8003648 <HAL_GPIO_Init+0x354>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035a0:	4a29      	ldr	r2, [pc, #164]	; (8003648 <HAL_GPIO_Init+0x354>)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035a6:	4b28      	ldr	r3, [pc, #160]	; (8003648 <HAL_GPIO_Init+0x354>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ca:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <HAL_GPIO_Init+0x354>)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035d0:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <HAL_GPIO_Init+0x354>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <HAL_GPIO_Init+0x354>)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3301      	adds	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2b0f      	cmp	r3, #15
 8003604:	f67f ae86 	bls.w	8003314 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	3724      	adds	r7, #36	; 0x24
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800
 800361c:	40013800 	.word	0x40013800
 8003620:	40020000 	.word	0x40020000
 8003624:	40020400 	.word	0x40020400
 8003628:	40020800 	.word	0x40020800
 800362c:	40020c00 	.word	0x40020c00
 8003630:	40021000 	.word	0x40021000
 8003634:	40021400 	.word	0x40021400
 8003638:	40021800 	.word	0x40021800
 800363c:	40021c00 	.word	0x40021c00
 8003640:	40022000 	.word	0x40022000
 8003644:	40022400 	.word	0x40022400
 8003648:	40013c00 	.word	0x40013c00

0800364c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	807b      	strh	r3, [r7, #2]
 8003658:	4613      	mov	r3, r2
 800365a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800365c:	787b      	ldrb	r3, [r7, #1]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003668:	e003      	b.n	8003672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800366a:	887b      	ldrh	r3, [r7, #2]
 800366c:	041a      	lsls	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	619a      	str	r2, [r3, #24]
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800367e:	b480      	push	{r7}
 8003680:	b085      	sub	sp, #20
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003690:	887a      	ldrh	r2, [r7, #2]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4013      	ands	r3, r2
 8003696:	041a      	lsls	r2, r3, #16
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	43d9      	mvns	r1, r3
 800369c:	887b      	ldrh	r3, [r7, #2]
 800369e:	400b      	ands	r3, r1
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	619a      	str	r2, [r3, #24]
}
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036be:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ca:	4a05      	ldr	r2, [pc, #20]	; (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe f83c 	bl	8001750 <HAL_GPIO_EXTI_Callback>
  }
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40013c00 	.word	0x40013c00

080036e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80036ec:	2300      	movs	r3, #0
 80036ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e29b      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8087 	beq.w	8003816 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003708:	4b96      	ldr	r3, [pc, #600]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 030c 	and.w	r3, r3, #12
 8003710:	2b04      	cmp	r3, #4
 8003712:	d00c      	beq.n	800372e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003714:	4b93      	ldr	r3, [pc, #588]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	2b08      	cmp	r3, #8
 800371e:	d112      	bne.n	8003746 <HAL_RCC_OscConfig+0x62>
 8003720:	4b90      	ldr	r3, [pc, #576]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800372c:	d10b      	bne.n	8003746 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372e:	4b8d      	ldr	r3, [pc, #564]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d06c      	beq.n	8003814 <HAL_RCC_OscConfig+0x130>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d168      	bne.n	8003814 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e275      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374e:	d106      	bne.n	800375e <HAL_RCC_OscConfig+0x7a>
 8003750:	4b84      	ldr	r3, [pc, #528]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a83      	ldr	r2, [pc, #524]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	e02e      	b.n	80037bc <HAL_RCC_OscConfig+0xd8>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0x9c>
 8003766:	4b7f      	ldr	r3, [pc, #508]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a7e      	ldr	r2, [pc, #504]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 800376c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b7c      	ldr	r3, [pc, #496]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a7b      	ldr	r2, [pc, #492]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e01d      	b.n	80037bc <HAL_RCC_OscConfig+0xd8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0xc0>
 800378a:	4b76      	ldr	r3, [pc, #472]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a75      	ldr	r2, [pc, #468]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	4b73      	ldr	r3, [pc, #460]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a72      	ldr	r2, [pc, #456]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 800379c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0xd8>
 80037a4:	4b6f      	ldr	r3, [pc, #444]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a6e      	ldr	r2, [pc, #440]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80037aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b6c      	ldr	r3, [pc, #432]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a6b      	ldr	r2, [pc, #428]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80037b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d013      	beq.n	80037ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fe fe44 	bl	8002450 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fe fe40 	bl	8002450 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	; 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e229      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b61      	ldr	r3, [pc, #388]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0xe8>
 80037ea:	e014      	b.n	8003816 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe fe30 	bl	8002450 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fe fe2c 	bl	8002450 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e215      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	4b57      	ldr	r3, [pc, #348]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x110>
 8003812:	e000      	b.n	8003816 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d069      	beq.n	80038f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003822:	4b50      	ldr	r3, [pc, #320]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382e:	4b4d      	ldr	r3, [pc, #308]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b08      	cmp	r3, #8
 8003838:	d11c      	bne.n	8003874 <HAL_RCC_OscConfig+0x190>
 800383a:	4b4a      	ldr	r3, [pc, #296]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d116      	bne.n	8003874 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	4b47      	ldr	r3, [pc, #284]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_RCC_OscConfig+0x17a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e1e9      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385e:	4b41      	ldr	r3, [pc, #260]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	493d      	ldr	r1, [pc, #244]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	e040      	b.n	80038f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d023      	beq.n	80038c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387c:	4b39      	ldr	r3, [pc, #228]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a38      	ldr	r2, [pc, #224]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7fe fde2 	bl	8002450 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003890:	f7fe fdde 	bl	8002450 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e1c7      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4b30      	ldr	r3, [pc, #192]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ae:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4929      	ldr	r1, [pc, #164]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]
 80038c2:	e018      	b.n	80038f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c4:	4b27      	ldr	r3, [pc, #156]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a26      	ldr	r2, [pc, #152]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80038ca:	f023 0301 	bic.w	r3, r3, #1
 80038ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7fe fdbe 	bl	8002450 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d8:	f7fe fdba 	bl	8002450 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e1a3      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d038      	beq.n	8003974 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d019      	beq.n	800393e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390a:	4b16      	ldr	r3, [pc, #88]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 800390c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390e:	4a15      	ldr	r2, [pc, #84]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003916:	f7fe fd9b 	bl	8002450 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391e:	f7fe fd97 	bl	8002450 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e180      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x23a>
 800393c:	e01a      	b.n	8003974 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003942:	4a08      	ldr	r2, [pc, #32]	; (8003964 <HAL_RCC_OscConfig+0x280>)
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394a:	f7fe fd81 	bl	8002450 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003950:	e00a      	b.n	8003968 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003952:	f7fe fd7d 	bl	8002450 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d903      	bls.n	8003968 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e166      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>
 8003964:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003968:	4b92      	ldr	r3, [pc, #584]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 800396a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1ee      	bne.n	8003952 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80a4 	beq.w	8003aca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003982:	4b8c      	ldr	r3, [pc, #560]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10d      	bne.n	80039aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	4b89      	ldr	r3, [pc, #548]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	4a88      	ldr	r2, [pc, #544]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003998:	6413      	str	r3, [r2, #64]	; 0x40
 800399a:	4b86      	ldr	r3, [pc, #536]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a6:	2301      	movs	r3, #1
 80039a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039aa:	4b83      	ldr	r3, [pc, #524]	; (8003bb8 <HAL_RCC_OscConfig+0x4d4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d118      	bne.n	80039e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039b6:	4b80      	ldr	r3, [pc, #512]	; (8003bb8 <HAL_RCC_OscConfig+0x4d4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a7f      	ldr	r2, [pc, #508]	; (8003bb8 <HAL_RCC_OscConfig+0x4d4>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c2:	f7fe fd45 	bl	8002450 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ca:	f7fe fd41 	bl	8002450 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	; 0x64
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e12a      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039dc:	4b76      	ldr	r3, [pc, #472]	; (8003bb8 <HAL_RCC_OscConfig+0x4d4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d106      	bne.n	80039fe <HAL_RCC_OscConfig+0x31a>
 80039f0:	4b70      	ldr	r3, [pc, #448]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	4a6f      	ldr	r2, [pc, #444]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6713      	str	r3, [r2, #112]	; 0x70
 80039fc:	e02d      	b.n	8003a5a <HAL_RCC_OscConfig+0x376>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x33c>
 8003a06:	4b6b      	ldr	r3, [pc, #428]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	4a6a      	ldr	r2, [pc, #424]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	6713      	str	r3, [r2, #112]	; 0x70
 8003a12:	4b68      	ldr	r3, [pc, #416]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	4a67      	ldr	r2, [pc, #412]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a18:	f023 0304 	bic.w	r3, r3, #4
 8003a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1e:	e01c      	b.n	8003a5a <HAL_RCC_OscConfig+0x376>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b05      	cmp	r3, #5
 8003a26:	d10c      	bne.n	8003a42 <HAL_RCC_OscConfig+0x35e>
 8003a28:	4b62      	ldr	r3, [pc, #392]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2c:	4a61      	ldr	r2, [pc, #388]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a2e:	f043 0304 	orr.w	r3, r3, #4
 8003a32:	6713      	str	r3, [r2, #112]	; 0x70
 8003a34:	4b5f      	ldr	r3, [pc, #380]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	4a5e      	ldr	r2, [pc, #376]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a40:	e00b      	b.n	8003a5a <HAL_RCC_OscConfig+0x376>
 8003a42:	4b5c      	ldr	r3, [pc, #368]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	4a5b      	ldr	r2, [pc, #364]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4e:	4b59      	ldr	r3, [pc, #356]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	4a58      	ldr	r2, [pc, #352]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a54:	f023 0304 	bic.w	r3, r3, #4
 8003a58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d015      	beq.n	8003a8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a62:	f7fe fcf5 	bl	8002450 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a68:	e00a      	b.n	8003a80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7fe fcf1 	bl	8002450 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e0d8      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a80:	4b4c      	ldr	r3, [pc, #304]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0ee      	beq.n	8003a6a <HAL_RCC_OscConfig+0x386>
 8003a8c:	e014      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8e:	f7fe fcdf 	bl	8002450 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7fe fcdb 	bl	8002450 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e0c2      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aac:	4b41      	ldr	r3, [pc, #260]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1ee      	bne.n	8003a96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ab8:	7dfb      	ldrb	r3, [r7, #23]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d105      	bne.n	8003aca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003abe:	4b3d      	ldr	r3, [pc, #244]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	4a3c      	ldr	r2, [pc, #240]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 80ae 	beq.w	8003c30 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ad4:	4b37      	ldr	r3, [pc, #220]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d06d      	beq.n	8003bbc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d14b      	bne.n	8003b80 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae8:	4b32      	ldr	r3, [pc, #200]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a31      	ldr	r2, [pc, #196]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fe fcac 	bl	8002450 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fe fca8 	bl	8002450 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e091      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0e:	4b29      	ldr	r3, [pc, #164]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	019b      	lsls	r3, r3, #6
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	3b01      	subs	r3, #1
 8003b34:	041b      	lsls	r3, r3, #16
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	071b      	lsls	r3, r3, #28
 8003b46:	491b      	ldr	r1, [pc, #108]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b4c:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a18      	ldr	r2, [pc, #96]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fe fc7a 	bl	8002450 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fe fc76 	bl	8002450 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e05f      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x47c>
 8003b7e:	e057      	b.n	8003c30 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a0b      	ldr	r2, [pc, #44]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fe fc60 	bl	8002450 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fe fc5c 	bl	8002450 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e045      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba6:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <HAL_RCC_OscConfig+0x4d0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4b0>
 8003bb2:	e03d      	b.n	8003c30 <HAL_RCC_OscConfig+0x54c>
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003bbc:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <HAL_RCC_OscConfig+0x558>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d030      	beq.n	8003c2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d129      	bne.n	8003c2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d122      	bne.n	8003c2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bec:	4013      	ands	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bf2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d119      	bne.n	8003c2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	3b01      	subs	r3, #1
 8003c06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d10f      	bne.n	8003c2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d107      	bne.n	8003c2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40023800 	.word	0x40023800

08003c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0d0      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c58:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d910      	bls.n	8003c88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	4b67      	ldr	r3, [pc, #412]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 020f 	bic.w	r2, r3, #15
 8003c6e:	4965      	ldr	r1, [pc, #404]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	4b63      	ldr	r3, [pc, #396]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0b8      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d020      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ca0:	4b59      	ldr	r3, [pc, #356]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	4a58      	ldr	r2, [pc, #352]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003caa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cb8:	4b53      	ldr	r3, [pc, #332]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	4a52      	ldr	r2, [pc, #328]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003cbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc4:	4b50      	ldr	r3, [pc, #320]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	494d      	ldr	r1, [pc, #308]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d040      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d107      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cea:	4b47      	ldr	r3, [pc, #284]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d115      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e07f      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d107      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d02:	4b41      	ldr	r3, [pc, #260]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e073      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d12:	4b3d      	ldr	r3, [pc, #244]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e06b      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d22:	4b39      	ldr	r3, [pc, #228]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f023 0203 	bic.w	r2, r3, #3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4936      	ldr	r1, [pc, #216]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d34:	f7fe fb8c 	bl	8002450 <HAL_GetTick>
 8003d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d3c:	f7fe fb88 	bl	8002450 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e053      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	4b2d      	ldr	r3, [pc, #180]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 020c 	and.w	r2, r3, #12
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d1eb      	bne.n	8003d3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d210      	bcs.n	8003d94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d72:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f023 020f 	bic.w	r2, r3, #15
 8003d7a:	4922      	ldr	r1, [pc, #136]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	4b20      	ldr	r3, [pc, #128]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e032      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da0:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4916      	ldr	r1, [pc, #88]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dbe:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	490e      	ldr	r1, [pc, #56]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dd2:	f000 f821 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	490a      	ldr	r1, [pc, #40]	; (8003e0c <HAL_RCC_ClockConfig+0x1cc>)
 8003de4:	5ccb      	ldrb	r3, [r1, r3]
 8003de6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dea:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <HAL_RCC_ClockConfig+0x1d0>)
 8003dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <HAL_RCC_ClockConfig+0x1d4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe fae8 	bl	80023c8 <HAL_InitTick>

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40023c00 	.word	0x40023c00
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	0800bd50 	.word	0x0800bd50
 8003e10:	20000004 	.word	0x20000004
 8003e14:	20000008 	.word	0x20000008

08003e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e1c:	b094      	sub	sp, #80	; 0x50
 8003e1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	647b      	str	r3, [r7, #68]	; 0x44
 8003e24:	2300      	movs	r3, #0
 8003e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e28:	2300      	movs	r3, #0
 8003e2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e30:	4b79      	ldr	r3, [pc, #484]	; (8004018 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 030c 	and.w	r3, r3, #12
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d00d      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x40>
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	f200 80e1 	bhi.w	8004004 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <HAL_RCC_GetSysClockFreq+0x34>
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d003      	beq.n	8003e52 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e4a:	e0db      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e4c:	4b73      	ldr	r3, [pc, #460]	; (800401c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e50:	e0db      	b.n	800400a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e52:	4b72      	ldr	r3, [pc, #456]	; (800401c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e56:	e0d8      	b.n	800400a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e58:	4b6f      	ldr	r3, [pc, #444]	; (8004018 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e60:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e62:	4b6d      	ldr	r3, [pc, #436]	; (8004018 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d063      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e6e:	4b6a      	ldr	r3, [pc, #424]	; (8004018 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	099b      	lsrs	r3, r3, #6
 8003e74:	2200      	movs	r2, #0
 8003e76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e80:	633b      	str	r3, [r7, #48]	; 0x30
 8003e82:	2300      	movs	r3, #0
 8003e84:	637b      	str	r3, [r7, #52]	; 0x34
 8003e86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	462b      	mov	r3, r5
 8003e8e:	f04f 0000 	mov.w	r0, #0
 8003e92:	f04f 0100 	mov.w	r1, #0
 8003e96:	0159      	lsls	r1, r3, #5
 8003e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e9c:	0150      	lsls	r0, r2, #5
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	1a51      	subs	r1, r2, r1
 8003ea6:	6139      	str	r1, [r7, #16]
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ebc:	4659      	mov	r1, fp
 8003ebe:	018b      	lsls	r3, r1, #6
 8003ec0:	4651      	mov	r1, sl
 8003ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ec6:	4651      	mov	r1, sl
 8003ec8:	018a      	lsls	r2, r1, #6
 8003eca:	4651      	mov	r1, sl
 8003ecc:	ebb2 0801 	subs.w	r8, r2, r1
 8003ed0:	4659      	mov	r1, fp
 8003ed2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eea:	4690      	mov	r8, r2
 8003eec:	4699      	mov	r9, r3
 8003eee:	4623      	mov	r3, r4
 8003ef0:	eb18 0303 	adds.w	r3, r8, r3
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	462b      	mov	r3, r5
 8003ef8:	eb49 0303 	adc.w	r3, r9, r3
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	028b      	lsls	r3, r1, #10
 8003f0e:	4621      	mov	r1, r4
 8003f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f14:	4621      	mov	r1, r4
 8003f16:	028a      	lsls	r2, r1, #10
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f1e:	2200      	movs	r2, #0
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f28:	f7fc fb9e 	bl	8000668 <__aeabi_uldivmod>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4613      	mov	r3, r2
 8003f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f34:	e058      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f36:	4b38      	ldr	r3, [pc, #224]	; (8004018 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	099b      	lsrs	r3, r3, #6
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	4618      	mov	r0, r3
 8003f40:	4611      	mov	r1, r2
 8003f42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f46:	623b      	str	r3, [r7, #32]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f50:	4642      	mov	r2, r8
 8003f52:	464b      	mov	r3, r9
 8003f54:	f04f 0000 	mov.w	r0, #0
 8003f58:	f04f 0100 	mov.w	r1, #0
 8003f5c:	0159      	lsls	r1, r3, #5
 8003f5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f62:	0150      	lsls	r0, r2, #5
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4641      	mov	r1, r8
 8003f6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f6e:	4649      	mov	r1, r9
 8003f70:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f88:	ebb2 040a 	subs.w	r4, r2, sl
 8003f8c:	eb63 050b 	sbc.w	r5, r3, fp
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	00eb      	lsls	r3, r5, #3
 8003f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f9e:	00e2      	lsls	r2, r4, #3
 8003fa0:	4614      	mov	r4, r2
 8003fa2:	461d      	mov	r5, r3
 8003fa4:	4643      	mov	r3, r8
 8003fa6:	18e3      	adds	r3, r4, r3
 8003fa8:	603b      	str	r3, [r7, #0]
 8003faa:	464b      	mov	r3, r9
 8003fac:	eb45 0303 	adc.w	r3, r5, r3
 8003fb0:	607b      	str	r3, [r7, #4]
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	028b      	lsls	r3, r1, #10
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fc8:	4621      	mov	r1, r4
 8003fca:	028a      	lsls	r2, r1, #10
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	61bb      	str	r3, [r7, #24]
 8003fd6:	61fa      	str	r2, [r7, #28]
 8003fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fdc:	f7fc fb44 	bl	8000668 <__aeabi_uldivmod>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003ff8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004002:	e002      	b.n	800400a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <HAL_RCC_GetSysClockFreq+0x204>)
 8004006:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800400a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800400c:	4618      	mov	r0, r3
 800400e:	3750      	adds	r7, #80	; 0x50
 8004010:	46bd      	mov	sp, r7
 8004012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800
 800401c:	00f42400 	.word	0x00f42400

08004020 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004024:	4b03      	ldr	r3, [pc, #12]	; (8004034 <HAL_RCC_GetHCLKFreq+0x14>)
 8004026:	681b      	ldr	r3, [r3, #0]
}
 8004028:	4618      	mov	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	20000004 	.word	0x20000004

08004038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800403c:	f7ff fff0 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	0a9b      	lsrs	r3, r3, #10
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	4903      	ldr	r1, [pc, #12]	; (800405c <HAL_RCC_GetPCLK1Freq+0x24>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40023800 	.word	0x40023800
 800405c:	0800bd60 	.word	0x0800bd60

08004060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004064:	f7ff ffdc 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004068:	4602      	mov	r2, r0
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	0b5b      	lsrs	r3, r3, #13
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	4903      	ldr	r1, [pc, #12]	; (8004084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004076:	5ccb      	ldrb	r3, [r1, r3]
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40023800 	.word	0x40023800
 8004084:	0800bd60 	.word	0x0800bd60

08004088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d012      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040b0:	4b69      	ldr	r3, [pc, #420]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a68      	ldr	r2, [pc, #416]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040ba:	6093      	str	r3, [r2, #8]
 80040bc:	4b66      	ldr	r3, [pc, #408]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c4:	4964      	ldr	r1, [pc, #400]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80040d2:	2301      	movs	r3, #1
 80040d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d017      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040e2:	4b5d      	ldr	r3, [pc, #372]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f0:	4959      	ldr	r1, [pc, #356]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004100:	d101      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004102:	2301      	movs	r3, #1
 8004104:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800410e:	2301      	movs	r3, #1
 8004110:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d017      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800411e:	4b4e      	ldr	r3, [pc, #312]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004124:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	494a      	ldr	r1, [pc, #296]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800413c:	d101      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800413e:	2301      	movs	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800414a:	2301      	movs	r3, #1
 800414c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800415a:	2301      	movs	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 808b 	beq.w	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800416c:	4b3a      	ldr	r3, [pc, #232]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	4a39      	ldr	r2, [pc, #228]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004176:	6413      	str	r3, [r2, #64]	; 0x40
 8004178:	4b37      	ldr	r3, [pc, #220]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004184:	4b35      	ldr	r3, [pc, #212]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a34      	ldr	r2, [pc, #208]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800418a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004190:	f7fe f95e 	bl	8002450 <HAL_GetTick>
 8004194:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004198:	f7fe f95a 	bl	8002450 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	; 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e38f      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041aa:	4b2c      	ldr	r3, [pc, #176]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041b6:	4b28      	ldr	r3, [pc, #160]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d035      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d02e      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041d4:	4b20      	ldr	r3, [pc, #128]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041de:	4b1e      	ldr	r3, [pc, #120]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	4a1d      	ldr	r2, [pc, #116]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041ea:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	4a1a      	ldr	r2, [pc, #104]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041fc:	4b16      	ldr	r3, [pc, #88]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d114      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fe f922 	bl	8002450 <HAL_GetTick>
 800420c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420e:	e00a      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004210:	f7fe f91e 	bl	8002450 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e351      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004226:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0ee      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800423e:	d111      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800424c:	4b04      	ldr	r3, [pc, #16]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800424e:	400b      	ands	r3, r1
 8004250:	4901      	ldr	r1, [pc, #4]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
 8004256:	e00b      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004258:	40023800 	.word	0x40023800
 800425c:	40007000 	.word	0x40007000
 8004260:	0ffffcff 	.word	0x0ffffcff
 8004264:	4bac      	ldr	r3, [pc, #688]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4aab      	ldr	r2, [pc, #684]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800426a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800426e:	6093      	str	r3, [r2, #8]
 8004270:	4ba9      	ldr	r3, [pc, #676]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004272:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800427c:	49a6      	ldr	r1, [pc, #664]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427e:	4313      	orrs	r3, r2
 8004280:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b00      	cmp	r3, #0
 800428c:	d010      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800428e:	4ba2      	ldr	r3, [pc, #648]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004294:	4aa0      	ldr	r2, [pc, #640]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800429a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800429e:	4b9e      	ldr	r3, [pc, #632]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	499b      	ldr	r1, [pc, #620]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042bc:	4b96      	ldr	r3, [pc, #600]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ca:	4993      	ldr	r1, [pc, #588]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042de:	4b8e      	ldr	r3, [pc, #568]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ec:	498a      	ldr	r1, [pc, #552]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004300:	4b85      	ldr	r3, [pc, #532]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800430e:	4982      	ldr	r1, [pc, #520]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004322:	4b7d      	ldr	r3, [pc, #500]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	4979      	ldr	r1, [pc, #484]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004344:	4b74      	ldr	r3, [pc, #464]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434a:	f023 0203 	bic.w	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	4971      	ldr	r1, [pc, #452]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004366:	4b6c      	ldr	r3, [pc, #432]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	f023 020c 	bic.w	r2, r3, #12
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004374:	4968      	ldr	r1, [pc, #416]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004388:	4b63      	ldr	r3, [pc, #396]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004396:	4960      	ldr	r1, [pc, #384]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043aa:	4b5b      	ldr	r3, [pc, #364]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b8:	4957      	ldr	r1, [pc, #348]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043cc:	4b52      	ldr	r3, [pc, #328]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	494f      	ldr	r1, [pc, #316]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80043ee:	4b4a      	ldr	r3, [pc, #296]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fc:	4946      	ldr	r1, [pc, #280]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004410:	4b41      	ldr	r3, [pc, #260]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004416:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441e:	493e      	ldr	r1, [pc, #248]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004432:	4b39      	ldr	r3, [pc, #228]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004438:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004440:	4935      	ldr	r1, [pc, #212]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004454:	4b30      	ldr	r3, [pc, #192]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004462:	492d      	ldr	r1, [pc, #180]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d011      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004476:	4b28      	ldr	r3, [pc, #160]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004484:	4924      	ldr	r1, [pc, #144]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004494:	d101      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004496:	2301      	movs	r3, #1
 8004498:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044b6:	4b18      	ldr	r3, [pc, #96]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c4:	4914      	ldr	r1, [pc, #80]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00b      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044d8:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044e8:	490b      	ldr	r1, [pc, #44]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00f      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450c:	4902      	ldr	r1, [pc, #8]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004514:	e002      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00b      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004528:	4b8a      	ldr	r3, [pc, #552]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800452a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800452e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	4986      	ldr	r1, [pc, #536]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00b      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800454c:	4b81      	ldr	r3, [pc, #516]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800454e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004552:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800455c:	497d      	ldr	r1, [pc, #500]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d006      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 80d6 	beq.w	8004724 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004578:	4b76      	ldr	r3, [pc, #472]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a75      	ldr	r2, [pc, #468]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004584:	f7fd ff64 	bl	8002450 <HAL_GetTick>
 8004588:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800458c:	f7fd ff60 	bl	8002450 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e195      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800459e:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d021      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d11d      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045be:	4b65      	ldr	r3, [pc, #404]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c4:	0c1b      	lsrs	r3, r3, #16
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045cc:	4b61      	ldr	r3, [pc, #388]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d2:	0e1b      	lsrs	r3, r3, #24
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	019a      	lsls	r2, r3, #6
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	041b      	lsls	r3, r3, #16
 80045e4:	431a      	orrs	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	061b      	lsls	r3, r3, #24
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	071b      	lsls	r3, r3, #28
 80045f2:	4958      	ldr	r1, [pc, #352]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d004      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800460e:	d00a      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004618:	2b00      	cmp	r3, #0
 800461a:	d02e      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004624:	d129      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004626:	4b4b      	ldr	r3, [pc, #300]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800462c:	0c1b      	lsrs	r3, r3, #16
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004634:	4b47      	ldr	r3, [pc, #284]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800463a:	0f1b      	lsrs	r3, r3, #28
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	019a      	lsls	r2, r3, #6
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	041b      	lsls	r3, r3, #16
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	061b      	lsls	r3, r3, #24
 8004654:	431a      	orrs	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	071b      	lsls	r3, r3, #28
 800465a:	493e      	ldr	r1, [pc, #248]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004662:	4b3c      	ldr	r3, [pc, #240]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004668:	f023 021f 	bic.w	r2, r3, #31
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	3b01      	subs	r3, #1
 8004672:	4938      	ldr	r1, [pc, #224]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01d      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004686:	4b33      	ldr	r3, [pc, #204]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468c:	0e1b      	lsrs	r3, r3, #24
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004694:	4b2f      	ldr	r3, [pc, #188]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800469a:	0f1b      	lsrs	r3, r3, #28
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	019a      	lsls	r2, r3, #6
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	431a      	orrs	r2, r3
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	061b      	lsls	r3, r3, #24
 80046b4:	431a      	orrs	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	071b      	lsls	r3, r3, #28
 80046ba:	4926      	ldr	r1, [pc, #152]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d011      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	019a      	lsls	r2, r3, #6
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	041b      	lsls	r3, r3, #16
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	061b      	lsls	r3, r3, #24
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	071b      	lsls	r3, r3, #28
 80046ea:	491a      	ldr	r1, [pc, #104]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046f2:	4b18      	ldr	r3, [pc, #96]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a17      	ldr	r2, [pc, #92]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fe:	f7fd fea7 	bl	8002450 <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004706:	f7fd fea3 	bl	8002450 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b64      	cmp	r3, #100	; 0x64
 8004712:	d901      	bls.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e0d8      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004718:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b01      	cmp	r3, #1
 8004728:	f040 80ce 	bne.w	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800472c:	4b09      	ldr	r3, [pc, #36]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a08      	ldr	r2, [pc, #32]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004738:	f7fd fe8a 	bl	8002450 <HAL_GetTick>
 800473c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800473e:	e00b      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004740:	f7fd fe86 	bl	8002450 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	; 0x64
 800474c:	d904      	bls.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e0bb      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004752:	bf00      	nop
 8004754:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004758:	4b5e      	ldr	r3, [pc, #376]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004764:	d0ec      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004782:	2b00      	cmp	r3, #0
 8004784:	d02e      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d12a      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800478e:	4b51      	ldr	r3, [pc, #324]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800479c:	4b4d      	ldr	r3, [pc, #308]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	0f1b      	lsrs	r3, r3, #28
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	019a      	lsls	r2, r3, #6
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	041b      	lsls	r3, r3, #16
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	061b      	lsls	r3, r3, #24
 80047bc:	431a      	orrs	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	071b      	lsls	r3, r3, #28
 80047c2:	4944      	ldr	r1, [pc, #272]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80047ca:	4b42      	ldr	r3, [pc, #264]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	3b01      	subs	r3, #1
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	493d      	ldr	r1, [pc, #244]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d022      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047f8:	d11d      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047fa:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004800:	0e1b      	lsrs	r3, r3, #24
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004808:	4b32      	ldr	r3, [pc, #200]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	0f1b      	lsrs	r3, r3, #28
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	019a      	lsls	r2, r3, #6
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	041b      	lsls	r3, r3, #16
 8004822:	431a      	orrs	r2, r3
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	061b      	lsls	r3, r3, #24
 8004828:	431a      	orrs	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	071b      	lsls	r3, r3, #28
 800482e:	4929      	ldr	r1, [pc, #164]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d028      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004842:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004848:	0e1b      	lsrs	r3, r3, #24
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004850:	4b20      	ldr	r3, [pc, #128]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	0c1b      	lsrs	r3, r3, #16
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	019a      	lsls	r2, r3, #6
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	041b      	lsls	r3, r3, #16
 8004868:	431a      	orrs	r2, r3
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	061b      	lsls	r3, r3, #24
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	071b      	lsls	r3, r3, #28
 8004876:	4917      	ldr	r1, [pc, #92]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800487e:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	4911      	ldr	r1, [pc, #68]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004894:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a0e      	ldr	r2, [pc, #56]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800489a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a0:	f7fd fdd6 	bl	8002450 <HAL_GetTick>
 80048a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048a8:	f7fd fdd2 	bl	8002450 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b64      	cmp	r3, #100	; 0x64
 80048b4:	d901      	bls.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e007      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048c6:	d1ef      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3720      	adds	r7, #32
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800

080048d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e09d      	b.n	8004a26 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d108      	bne.n	8004904 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048fa:	d009      	beq.n	8004910 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	61da      	str	r2, [r3, #28]
 8004902:	e005      	b.n	8004910 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fd f8d4 	bl	8001ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004946:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004950:	d902      	bls.n	8004958 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	e002      	b.n	800495e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800495c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004966:	d007      	beq.n	8004978 <HAL_SPI_Init+0xa0>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004970:	d002      	beq.n	8004978 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ba:	ea42 0103 	orr.w	r1, r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	0c1b      	lsrs	r3, r3, #16
 80049d4:	f003 0204 	and.w	r2, r3, #4
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049f4:	ea42 0103 	orr.w	r1, r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b088      	sub	sp, #32
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	603b      	str	r3, [r7, #0]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_SPI_Transmit+0x22>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e158      	b.n	8004d02 <HAL_SPI_Transmit+0x2d4>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a58:	f7fd fcfa 	bl	8002450 <HAL_GetTick>
 8004a5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d002      	beq.n	8004a74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a72:	e13d      	b.n	8004cf0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_SPI_Transmit+0x52>
 8004a7a:	88fb      	ldrh	r3, [r7, #6]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d102      	bne.n	8004a86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a84:	e134      	b.n	8004cf0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2203      	movs	r2, #3
 8004a8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	88fa      	ldrh	r2, [r7, #6]
 8004a9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	88fa      	ldrh	r2, [r7, #6]
 8004aa4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad0:	d10f      	bne.n	8004af2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004af0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d007      	beq.n	8004b10 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b18:	d94b      	bls.n	8004bb2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_SPI_Transmit+0xfa>
 8004b22:	8afb      	ldrh	r3, [r7, #22]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d13e      	bne.n	8004ba6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	881a      	ldrh	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	1c9a      	adds	r2, r3, #2
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b4c:	e02b      	b.n	8004ba6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d112      	bne.n	8004b82 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	881a      	ldrh	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	1c9a      	adds	r2, r3, #2
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b80:	e011      	b.n	8004ba6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b82:	f7fd fc65 	bl	8002450 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d803      	bhi.n	8004b9a <HAL_SPI_Transmit+0x16c>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b98:	d102      	bne.n	8004ba0 <HAL_SPI_Transmit+0x172>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d102      	bne.n	8004ba6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ba4:	e0a4      	b.n	8004cf0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1ce      	bne.n	8004b4e <HAL_SPI_Transmit+0x120>
 8004bb0:	e07c      	b.n	8004cac <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_SPI_Transmit+0x192>
 8004bba:	8afb      	ldrh	r3, [r7, #22]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d170      	bne.n	8004ca2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d912      	bls.n	8004bf0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	881a      	ldrh	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	1c9a      	adds	r2, r3, #2
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b02      	subs	r3, #2
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bee:	e058      	b.n	8004ca2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	330c      	adds	r3, #12
 8004bfa:	7812      	ldrb	r2, [r2, #0]
 8004bfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004c16:	e044      	b.n	8004ca2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d12b      	bne.n	8004c7e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d912      	bls.n	8004c56 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	881a      	ldrh	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	1c9a      	adds	r2, r3, #2
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b02      	subs	r3, #2
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c54:	e025      	b.n	8004ca2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	330c      	adds	r3, #12
 8004c60:	7812      	ldrb	r2, [r2, #0]
 8004c62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c7c:	e011      	b.n	8004ca2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c7e:	f7fd fbe7 	bl	8002450 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d803      	bhi.n	8004c96 <HAL_SPI_Transmit+0x268>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d102      	bne.n	8004c9c <HAL_SPI_Transmit+0x26e>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d102      	bne.n	8004ca2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ca0:	e026      	b.n	8004cf0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1b5      	bne.n	8004c18 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	6839      	ldr	r1, [r7, #0]
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 fb5b 	bl	800536c <SPI_EndRxTxTransaction>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e000      	b.n	8004cf0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004cee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d00:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b08a      	sub	sp, #40	; 0x28
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_SPI_TransmitReceive+0x26>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e1fb      	b.n	8005128 <HAL_SPI_TransmitReceive+0x41e>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d38:	f7fd fb8a 	bl	8002450 <HAL_GetTick>
 8004d3c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d44:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004d4c:	887b      	ldrh	r3, [r7, #2]
 8004d4e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004d50:	887b      	ldrh	r3, [r7, #2]
 8004d52:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d54:	7efb      	ldrb	r3, [r7, #27]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d00e      	beq.n	8004d78 <HAL_SPI_TransmitReceive+0x6e>
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d60:	d106      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d102      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x66>
 8004d6a:	7efb      	ldrb	r3, [r7, #27]
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d003      	beq.n	8004d78 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004d70:	2302      	movs	r3, #2
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004d76:	e1cd      	b.n	8005114 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <HAL_SPI_TransmitReceive+0x80>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_SPI_TransmitReceive+0x80>
 8004d84:	887b      	ldrh	r3, [r7, #2]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d103      	bne.n	8004d92 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004d90:	e1c0      	b.n	8005114 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d003      	beq.n	8004da6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2205      	movs	r2, #5
 8004da2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	887a      	ldrh	r2, [r7, #2]
 8004db6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	887a      	ldrh	r2, [r7, #2]
 8004dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	887a      	ldrh	r2, [r7, #2]
 8004dcc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	887a      	ldrh	r2, [r7, #2]
 8004dd2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004de8:	d802      	bhi.n	8004df0 <HAL_SPI_TransmitReceive+0xe6>
 8004dea:	8a3b      	ldrh	r3, [r7, #16]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d908      	bls.n	8004e02 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dfe:	605a      	str	r2, [r3, #4]
 8004e00:	e007      	b.n	8004e12 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e10:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d007      	beq.n	8004e30 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e38:	d97c      	bls.n	8004f34 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_SPI_TransmitReceive+0x13e>
 8004e42:	8a7b      	ldrh	r3, [r7, #18]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d169      	bne.n	8004f1c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	881a      	ldrh	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	1c9a      	adds	r2, r3, #2
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e6c:	e056      	b.n	8004f1c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_SPI_TransmitReceive+0x1aa>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d016      	beq.n	8004eb4 <HAL_SPI_TransmitReceive+0x1aa>
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d113      	bne.n	8004eb4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	881a      	ldrh	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	1c9a      	adds	r2, r3, #2
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d11c      	bne.n	8004efc <HAL_SPI_TransmitReceive+0x1f2>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d016      	beq.n	8004efc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	b292      	uxth	r2, r2
 8004eda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	1c9a      	adds	r2, r3, #2
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004efc:	f7fd faa8 	bl	8002450 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d807      	bhi.n	8004f1c <HAL_SPI_TransmitReceive+0x212>
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	d003      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f1a:	e0fb      	b.n	8005114 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1a3      	bne.n	8004e6e <HAL_SPI_TransmitReceive+0x164>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d19d      	bne.n	8004e6e <HAL_SPI_TransmitReceive+0x164>
 8004f32:	e0df      	b.n	80050f4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_SPI_TransmitReceive+0x23a>
 8004f3c:	8a7b      	ldrh	r3, [r7, #18]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	f040 80cb 	bne.w	80050da <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d912      	bls.n	8004f74 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	881a      	ldrh	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	1c9a      	adds	r2, r3, #2
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b02      	subs	r3, #2
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f72:	e0b2      	b.n	80050da <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	7812      	ldrb	r2, [r2, #0]
 8004f80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f9a:	e09e      	b.n	80050da <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d134      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x30a>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d02f      	beq.n	8005014 <HAL_SPI_TransmitReceive+0x30a>
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d12c      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d912      	bls.n	8004fea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	881a      	ldrh	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	1c9a      	adds	r2, r3, #2
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b02      	subs	r3, #2
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fe8:	e012      	b.n	8005010 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	330c      	adds	r3, #12
 8004ff4:	7812      	ldrb	r2, [r2, #0]
 8004ff6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b01      	cmp	r3, #1
 8005020:	d148      	bne.n	80050b4 <HAL_SPI_TransmitReceive+0x3aa>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d042      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b01      	cmp	r3, #1
 8005038:	d923      	bls.n	8005082 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	b292      	uxth	r2, r2
 8005046:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	1c9a      	adds	r2, r3, #2
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005058:	b29b      	uxth	r3, r3
 800505a:	3b02      	subs	r3, #2
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b01      	cmp	r3, #1
 800506e:	d81f      	bhi.n	80050b0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800507e:	605a      	str	r2, [r3, #4]
 8005080:	e016      	b.n	80050b0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f103 020c 	add.w	r2, r3, #12
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	7812      	ldrb	r2, [r2, #0]
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050b0:	2301      	movs	r3, #1
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050b4:	f7fd f9cc 	bl	8002450 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d803      	bhi.n	80050cc <HAL_SPI_TransmitReceive+0x3c2>
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ca:	d102      	bne.n	80050d2 <HAL_SPI_TransmitReceive+0x3c8>
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d103      	bne.n	80050da <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80050d8:	e01c      	b.n	8005114 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f47f af5b 	bne.w	8004f9c <HAL_SPI_TransmitReceive+0x292>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f47f af54 	bne.w	8004f9c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f937 	bl	800536c <SPI_EndRxTxTransaction>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d006      	beq.n	8005112 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2220      	movs	r2, #32
 800510e:	661a      	str	r2, [r3, #96]	; 0x60
 8005110:	e000      	b.n	8005114 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005112:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005128:	4618      	mov	r0, r3
 800512a:	3728      	adds	r7, #40	; 0x28
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	4613      	mov	r3, r2
 800513e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005140:	f7fd f986 	bl	8002450 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	4413      	add	r3, r2
 800514e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005150:	f7fd f97e 	bl	8002450 <HAL_GetTick>
 8005154:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005156:	4b39      	ldr	r3, [pc, #228]	; (800523c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	015b      	lsls	r3, r3, #5
 800515c:	0d1b      	lsrs	r3, r3, #20
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	fb02 f303 	mul.w	r3, r2, r3
 8005164:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005166:	e054      	b.n	8005212 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516e:	d050      	beq.n	8005212 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005170:	f7fd f96e 	bl	8002450 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	429a      	cmp	r2, r3
 800517e:	d902      	bls.n	8005186 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d13d      	bne.n	8005202 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005194:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800519e:	d111      	bne.n	80051c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a8:	d004      	beq.n	80051b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b2:	d107      	bne.n	80051c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051cc:	d10f      	bne.n	80051ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e017      	b.n	8005232 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	3b01      	subs	r3, #1
 8005210:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4013      	ands	r3, r2
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	429a      	cmp	r2, r3
 8005220:	bf0c      	ite	eq
 8005222:	2301      	moveq	r3, #1
 8005224:	2300      	movne	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	461a      	mov	r2, r3
 800522a:	79fb      	ldrb	r3, [r7, #7]
 800522c:	429a      	cmp	r2, r3
 800522e:	d19b      	bne.n	8005168 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000004 	.word	0x20000004

08005240 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	; 0x28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800524e:	2300      	movs	r3, #0
 8005250:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005252:	f7fd f8fd 	bl	8002450 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	4413      	add	r3, r2
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005262:	f7fd f8f5 	bl	8002450 <HAL_GetTick>
 8005266:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005270:	4b3d      	ldr	r3, [pc, #244]	; (8005368 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	00da      	lsls	r2, r3, #3
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	0d1b      	lsrs	r3, r3, #20
 8005280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005282:	fb02 f303 	mul.w	r3, r2, r3
 8005286:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005288:	e060      	b.n	800534c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005290:	d107      	bne.n	80052a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d104      	bne.n	80052a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	b2db      	uxtb	r3, r3
 800529e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a8:	d050      	beq.n	800534c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052aa:	f7fd f8d1 	bl	8002450 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d902      	bls.n	80052c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d13d      	bne.n	800533c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052d8:	d111      	bne.n	80052fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e2:	d004      	beq.n	80052ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ec:	d107      	bne.n	80052fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005306:	d10f      	bne.n	8005328 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005326:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e010      	b.n	800535e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	3b01      	subs	r3, #1
 800534a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	4013      	ands	r3, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	429a      	cmp	r2, r3
 800535a:	d196      	bne.n	800528a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3728      	adds	r7, #40	; 0x28
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20000004 	.word	0x20000004

0800536c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af02      	add	r7, sp, #8
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2200      	movs	r2, #0
 8005380:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f7ff ff5b 	bl	8005240 <SPI_WaitFifoStateUntilTimeout>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005394:	f043 0220 	orr.w	r2, r3, #32
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e046      	b.n	800542e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053a0:	4b25      	ldr	r3, [pc, #148]	; (8005438 <SPI_EndRxTxTransaction+0xcc>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a25      	ldr	r2, [pc, #148]	; (800543c <SPI_EndRxTxTransaction+0xd0>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	0d5b      	lsrs	r3, r3, #21
 80053ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053b0:	fb02 f303 	mul.w	r3, r2, r3
 80053b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053be:	d112      	bne.n	80053e6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2200      	movs	r2, #0
 80053c8:	2180      	movs	r1, #128	; 0x80
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7ff feb0 	bl	8005130 <SPI_WaitFlagStateUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d016      	beq.n	8005404 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e023      	b.n	800542e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fc:	2b80      	cmp	r3, #128	; 0x80
 80053fe:	d0f2      	beq.n	80053e6 <SPI_EndRxTxTransaction+0x7a>
 8005400:	e000      	b.n	8005404 <SPI_EndRxTxTransaction+0x98>
        break;
 8005402:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2200      	movs	r2, #0
 800540c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7ff ff15 	bl	8005240 <SPI_WaitFifoStateUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005420:	f043 0220 	orr.w	r2, r3, #32
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e000      	b.n	800542e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20000004 	.word	0x20000004
 800543c:	165e9f81 	.word	0x165e9f81

08005440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e049      	b.n	80054e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fc fd84 	bl	8001f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3304      	adds	r3, #4
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f000 fa46 	bl	8005910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b02      	cmp	r3, #2
 8005502:	d122      	bne.n	800554a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b02      	cmp	r3, #2
 8005510:	d11b      	bne.n	800554a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f06f 0202 	mvn.w	r2, #2
 800551a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f003 0303 	and.w	r3, r3, #3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f9cf 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 8005536:	e005      	b.n	8005544 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f9c1 	bl	80058c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f9d2 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b04      	cmp	r3, #4
 8005556:	d122      	bne.n	800559e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b04      	cmp	r3, #4
 8005564:	d11b      	bne.n	800559e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f06f 0204 	mvn.w	r2, #4
 800556e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f9a5 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 800558a:	e005      	b.n	8005598 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f997 	bl	80058c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f9a8 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d122      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d11b      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f06f 0208 	mvn.w	r2, #8
 80055c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2204      	movs	r2, #4
 80055c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	f003 0303 	and.w	r3, r3, #3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f97b 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 80055de:	e005      	b.n	80055ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f96d 	bl	80058c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f97e 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b10      	cmp	r3, #16
 80055fe:	d122      	bne.n	8005646 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b10      	cmp	r3, #16
 800560c:	d11b      	bne.n	8005646 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f06f 0210 	mvn.w	r2, #16
 8005616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2208      	movs	r2, #8
 800561c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f951 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 8005632:	e005      	b.n	8005640 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f943 	bl	80058c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f954 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b01      	cmp	r3, #1
 8005652:	d10e      	bne.n	8005672 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b01      	cmp	r3, #1
 8005660:	d107      	bne.n	8005672 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f06f 0201 	mvn.w	r2, #1
 800566a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7fc fca7 	bl	8001fc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567c:	2b80      	cmp	r3, #128	; 0x80
 800567e:	d10e      	bne.n	800569e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568a:	2b80      	cmp	r3, #128	; 0x80
 800568c:	d107      	bne.n	800569e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fb0b 	bl	8005cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ac:	d10e      	bne.n	80056cc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b8:	2b80      	cmp	r3, #128	; 0x80
 80056ba:	d107      	bne.n	80056cc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fafe 	bl	8005cc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d6:	2b40      	cmp	r3, #64	; 0x40
 80056d8:	d10e      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e4:	2b40      	cmp	r3, #64	; 0x40
 80056e6:	d107      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f902 	bl	80058fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b20      	cmp	r3, #32
 8005704:	d10e      	bne.n	8005724 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b20      	cmp	r3, #32
 8005712:	d107      	bne.n	8005724 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0220 	mvn.w	r2, #32
 800571c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fabe 	bl	8005ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005724:	bf00      	nop
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_TIM_ConfigClockSource+0x1c>
 8005744:	2302      	movs	r3, #2
 8005746:	e0b4      	b.n	80058b2 <HAL_TIM_ConfigClockSource+0x186>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	4b56      	ldr	r3, [pc, #344]	; (80058bc <HAL_TIM_ConfigClockSource+0x190>)
 8005764:	4013      	ands	r3, r2
 8005766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800576e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005780:	d03e      	beq.n	8005800 <HAL_TIM_ConfigClockSource+0xd4>
 8005782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005786:	f200 8087 	bhi.w	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 800578a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578e:	f000 8086 	beq.w	800589e <HAL_TIM_ConfigClockSource+0x172>
 8005792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005796:	d87f      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 8005798:	2b70      	cmp	r3, #112	; 0x70
 800579a:	d01a      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0xa6>
 800579c:	2b70      	cmp	r3, #112	; 0x70
 800579e:	d87b      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 80057a0:	2b60      	cmp	r3, #96	; 0x60
 80057a2:	d050      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x11a>
 80057a4:	2b60      	cmp	r3, #96	; 0x60
 80057a6:	d877      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 80057a8:	2b50      	cmp	r3, #80	; 0x50
 80057aa:	d03c      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0xfa>
 80057ac:	2b50      	cmp	r3, #80	; 0x50
 80057ae:	d873      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d058      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x13a>
 80057b4:	2b40      	cmp	r3, #64	; 0x40
 80057b6:	d86f      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 80057b8:	2b30      	cmp	r3, #48	; 0x30
 80057ba:	d064      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x15a>
 80057bc:	2b30      	cmp	r3, #48	; 0x30
 80057be:	d86b      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d060      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x15a>
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d867      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d05c      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x15a>
 80057cc:	2b10      	cmp	r3, #16
 80057ce:	d05a      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x15a>
 80057d0:	e062      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6899      	ldr	r1, [r3, #8]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f000 f9af 	bl	8005b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	609a      	str	r2, [r3, #8]
      break;
 80057fe:	e04f      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6818      	ldr	r0, [r3, #0]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	6899      	ldr	r1, [r3, #8]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f000 f998 	bl	8005b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005822:	609a      	str	r2, [r3, #8]
      break;
 8005824:	e03c      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6859      	ldr	r1, [r3, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	461a      	mov	r2, r3
 8005834:	f000 f90c 	bl	8005a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2150      	movs	r1, #80	; 0x50
 800583e:	4618      	mov	r0, r3
 8005840:	f000 f965 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 8005844:	e02c      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6859      	ldr	r1, [r3, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	461a      	mov	r2, r3
 8005854:	f000 f92b 	bl	8005aae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2160      	movs	r1, #96	; 0x60
 800585e:	4618      	mov	r0, r3
 8005860:	f000 f955 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 8005864:	e01c      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6859      	ldr	r1, [r3, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	461a      	mov	r2, r3
 8005874:	f000 f8ec 	bl	8005a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2140      	movs	r1, #64	; 0x40
 800587e:	4618      	mov	r0, r3
 8005880:	f000 f945 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 8005884:	e00c      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4619      	mov	r1, r3
 8005890:	4610      	mov	r0, r2
 8005892:	f000 f93c 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 8005896:	e003      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	73fb      	strb	r3, [r7, #15]
      break;
 800589c:	e000      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800589e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	fffeff88 	.word	0xfffeff88

080058c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a40      	ldr	r2, [pc, #256]	; (8005a24 <TIM_Base_SetConfig+0x114>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d013      	beq.n	8005950 <TIM_Base_SetConfig+0x40>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592e:	d00f      	beq.n	8005950 <TIM_Base_SetConfig+0x40>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a3d      	ldr	r2, [pc, #244]	; (8005a28 <TIM_Base_SetConfig+0x118>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00b      	beq.n	8005950 <TIM_Base_SetConfig+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a3c      	ldr	r2, [pc, #240]	; (8005a2c <TIM_Base_SetConfig+0x11c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d007      	beq.n	8005950 <TIM_Base_SetConfig+0x40>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a3b      	ldr	r2, [pc, #236]	; (8005a30 <TIM_Base_SetConfig+0x120>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_Base_SetConfig+0x40>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a3a      	ldr	r2, [pc, #232]	; (8005a34 <TIM_Base_SetConfig+0x124>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d108      	bne.n	8005962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a2f      	ldr	r2, [pc, #188]	; (8005a24 <TIM_Base_SetConfig+0x114>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d02b      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005970:	d027      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a2c      	ldr	r2, [pc, #176]	; (8005a28 <TIM_Base_SetConfig+0x118>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d023      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a2b      	ldr	r2, [pc, #172]	; (8005a2c <TIM_Base_SetConfig+0x11c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d01f      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a2a      	ldr	r2, [pc, #168]	; (8005a30 <TIM_Base_SetConfig+0x120>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d01b      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a29      	ldr	r2, [pc, #164]	; (8005a34 <TIM_Base_SetConfig+0x124>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d017      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a28      	ldr	r2, [pc, #160]	; (8005a38 <TIM_Base_SetConfig+0x128>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a27      	ldr	r2, [pc, #156]	; (8005a3c <TIM_Base_SetConfig+0x12c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00f      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a26      	ldr	r2, [pc, #152]	; (8005a40 <TIM_Base_SetConfig+0x130>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00b      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a25      	ldr	r2, [pc, #148]	; (8005a44 <TIM_Base_SetConfig+0x134>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d007      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a24      	ldr	r2, [pc, #144]	; (8005a48 <TIM_Base_SetConfig+0x138>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d003      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a23      	ldr	r2, [pc, #140]	; (8005a4c <TIM_Base_SetConfig+0x13c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d108      	bne.n	80059d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a0a      	ldr	r2, [pc, #40]	; (8005a24 <TIM_Base_SetConfig+0x114>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d003      	beq.n	8005a08 <TIM_Base_SetConfig+0xf8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a0c      	ldr	r2, [pc, #48]	; (8005a34 <TIM_Base_SetConfig+0x124>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d103      	bne.n	8005a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	615a      	str	r2, [r3, #20]
}
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40010000 	.word	0x40010000
 8005a28:	40000400 	.word	0x40000400
 8005a2c:	40000800 	.word	0x40000800
 8005a30:	40000c00 	.word	0x40000c00
 8005a34:	40010400 	.word	0x40010400
 8005a38:	40014000 	.word	0x40014000
 8005a3c:	40014400 	.word	0x40014400
 8005a40:	40014800 	.word	0x40014800
 8005a44:	40001800 	.word	0x40001800
 8005a48:	40001c00 	.word	0x40001c00
 8005a4c:	40002000 	.word	0x40002000

08005a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f023 0201 	bic.w	r2, r3, #1
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f023 030a 	bic.w	r3, r3, #10
 8005a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	621a      	str	r2, [r3, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b087      	sub	sp, #28
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f023 0210 	bic.w	r2, r3, #16
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	031b      	lsls	r3, r3, #12
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005aea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b085      	sub	sp, #20
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f043 0307 	orr.w	r3, r3, #7
 8005b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	609a      	str	r2, [r3, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	021a      	lsls	r2, r3, #8
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	609a      	str	r2, [r3, #8]
}
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d101      	bne.n	8005b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	e06d      	b.n	8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a30      	ldr	r2, [pc, #192]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d004      	beq.n	8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a2f      	ldr	r2, [pc, #188]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d108      	bne.n	8005be2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005bd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a20      	ldr	r2, [pc, #128]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d022      	beq.n	8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0e:	d01d      	beq.n	8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1d      	ldr	r2, [pc, #116]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d018      	beq.n	8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a1c      	ldr	r2, [pc, #112]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d013      	beq.n	8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a1a      	ldr	r2, [pc, #104]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00e      	beq.n	8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a15      	ldr	r2, [pc, #84]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d009      	beq.n	8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a16      	ldr	r2, [pc, #88]	; (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d004      	beq.n	8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d10c      	bne.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	40010000 	.word	0x40010000
 8005c88:	40010400 	.word	0x40010400
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40001800 	.word	0x40001800

08005ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e040      	b.n	8005d70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fc f9b6 	bl	8002070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2224      	movs	r2, #36	; 0x24
 8005d08:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0201 	bic.w	r2, r2, #1
 8005d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fbd6 	bl	80064cc <UART_SetConfig>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e022      	b.n	8005d70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fe2e 	bl	8006994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 feb5 	bl	8006ad8 <UART_CheckIdleState>
 8005d6e:	4603      	mov	r3, r0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b08b      	sub	sp, #44	; 0x2c
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	4613      	mov	r3, r2
 8005d84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	d147      	bne.n	8005e1e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <HAL_UART_Transmit_IT+0x22>
 8005d94:	88fb      	ldrh	r3, [r7, #6]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e040      	b.n	8005e20 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	88fa      	ldrh	r2, [r7, #6]
 8005da8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	88fa      	ldrh	r2, [r7, #6]
 8005db0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2221      	movs	r2, #33	; 0x21
 8005dc6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd0:	d107      	bne.n	8005de2 <HAL_UART_Transmit_IT+0x6a>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d103      	bne.n	8005de2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a13      	ldr	r2, [pc, #76]	; (8005e2c <HAL_UART_Transmit_IT+0xb4>)
 8005dde:	66da      	str	r2, [r3, #108]	; 0x6c
 8005de0:	e002      	b.n	8005de8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4a12      	ldr	r2, [pc, #72]	; (8005e30 <HAL_UART_Transmit_IT+0xb8>)
 8005de6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	613b      	str	r3, [r7, #16]
   return(result);
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	623b      	str	r3, [r7, #32]
 8005e08:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0a:	69f9      	ldr	r1, [r7, #28]
 8005e0c:	6a3a      	ldr	r2, [r7, #32]
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e6      	bne.n	8005de8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e000      	b.n	8005e20 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005e1e:	2302      	movs	r3, #2
  }
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	372c      	adds	r7, #44	; 0x2c
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	08007037 	.word	0x08007037
 8005e30:	08006f81 	.word	0x08006f81

08005e34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08a      	sub	sp, #40	; 0x28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d132      	bne.n	8005eb2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <HAL_UART_Receive_IT+0x24>
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e02b      	b.n	8005eb4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d018      	beq.n	8005ea2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	623b      	str	r3, [r7, #32]
 8005e90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	69f9      	ldr	r1, [r7, #28]
 8005e94:	6a3a      	ldr	r2, [r7, #32]
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e6      	bne.n	8005e70 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ea2:	88fb      	ldrh	r3, [r7, #6]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 ff29 	bl	8006d00 <UART_Start_Receive_IT>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	e000      	b.n	8005eb4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005eb2:	2302      	movs	r3, #2
  }
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3728      	adds	r7, #40	; 0x28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b0ba      	sub	sp, #232	; 0xe8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ee2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ee6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005eea:	4013      	ands	r3, r2
 8005eec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ef0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d115      	bne.n	8005f24 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00f      	beq.n	8005f24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f08:	f003 0320 	and.w	r3, r3, #32
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d009      	beq.n	8005f24 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 82ac 	beq.w	8006472 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	4798      	blx	r3
      }
      return;
 8005f22:	e2a6      	b.n	8006472 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 8117 	beq.w	800615c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005f3e:	4b85      	ldr	r3, [pc, #532]	; (8006154 <HAL_UART_IRQHandler+0x298>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 810a 	beq.w	800615c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d011      	beq.n	8005f78 <HAL_UART_IRQHandler+0xbc>
 8005f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2201      	movs	r2, #1
 8005f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f6e:	f043 0201 	orr.w	r2, r3, #1
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d011      	beq.n	8005fa8 <HAL_UART_IRQHandler+0xec>
 8005f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2202      	movs	r2, #2
 8005f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f9e:	f043 0204 	orr.w	r2, r3, #4
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d011      	beq.n	8005fd8 <HAL_UART_IRQHandler+0x11c>
 8005fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2204      	movs	r2, #4
 8005fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fce:	f043 0202 	orr.w	r2, r3, #2
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d017      	beq.n	8006014 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d105      	bne.n	8005ffc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00b      	beq.n	8006014 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2208      	movs	r2, #8
 8006002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800600a:	f043 0208 	orr.w	r2, r3, #8
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800601c:	2b00      	cmp	r3, #0
 800601e:	d012      	beq.n	8006046 <HAL_UART_IRQHandler+0x18a>
 8006020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006024:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00c      	beq.n	8006046 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006034:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800603c:	f043 0220 	orr.w	r2, r3, #32
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 8212 	beq.w	8006476 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00d      	beq.n	800607a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800605e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d007      	beq.n	800607a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006080:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608e:	2b40      	cmp	r3, #64	; 0x40
 8006090:	d005      	beq.n	800609e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006096:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800609a:	2b00      	cmp	r3, #0
 800609c:	d04f      	beq.n	800613e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fef4 	bl	8006e8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ae:	2b40      	cmp	r3, #64	; 0x40
 80060b0:	d141      	bne.n	8006136 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3308      	adds	r3, #8
 80060b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060c0:	e853 3f00 	ldrex	r3, [r3]
 80060c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80060c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3308      	adds	r3, #8
 80060da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1d9      	bne.n	80060b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006102:	2b00      	cmp	r3, #0
 8006104:	d013      	beq.n	800612e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800610a:	4a13      	ldr	r2, [pc, #76]	; (8006158 <HAL_UART_IRQHandler+0x29c>)
 800610c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006112:	4618      	mov	r0, r3
 8006114:	f7fc fe90 	bl	8002e38 <HAL_DMA_Abort_IT>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d017      	beq.n	800614e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006128:	4610      	mov	r0, r2
 800612a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612c:	e00f      	b.n	800614e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f9ac 	bl	800648c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006134:	e00b      	b.n	800614e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f9a8 	bl	800648c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800613c:	e007      	b.n	800614e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f9a4 	bl	800648c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800614c:	e193      	b.n	8006476 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800614e:	bf00      	nop
    return;
 8006150:	e191      	b.n	8006476 <HAL_UART_IRQHandler+0x5ba>
 8006152:	bf00      	nop
 8006154:	04000120 	.word	0x04000120
 8006158:	08006f55 	.word	0x08006f55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006160:	2b01      	cmp	r3, #1
 8006162:	f040 814c 	bne.w	80063fe <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616a:	f003 0310 	and.w	r3, r3, #16
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 8145 	beq.w	80063fe <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006178:	f003 0310 	and.w	r3, r3, #16
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 813e 	beq.w	80063fe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2210      	movs	r2, #16
 8006188:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006194:	2b40      	cmp	r3, #64	; 0x40
 8006196:	f040 80b6 	bne.w	8006306 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 8165 	beq.w	800647a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061ba:	429a      	cmp	r2, r3
 80061bc:	f080 815d 	bcs.w	800647a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061d4:	f000 8086 	beq.w	80062e4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	461a      	mov	r2, r3
 80061fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006206:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800620e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800621a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1da      	bne.n	80061d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3308      	adds	r3, #8
 8006228:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006234:	f023 0301 	bic.w	r3, r3, #1
 8006238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3308      	adds	r3, #8
 8006242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006246:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800624a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800624e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e1      	bne.n	8006222 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3308      	adds	r3, #8
 8006264:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800626e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3308      	adds	r3, #8
 800627e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006282:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006284:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006288:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e3      	bne.n	800625e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b4:	f023 0310 	bic.w	r3, r3, #16
 80062b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80062c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e4      	bne.n	80062a4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fc fd3a 	bl	8002d58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f8ce 	bl	80064a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006304:	e0b9      	b.n	800647a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006312:	b29b      	uxth	r3, r3
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 80ab 	beq.w	800647e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 80a6 	beq.w	800647e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633a:	e853 3f00 	ldrex	r3, [r3]
 800633e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006342:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006346:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006354:	647b      	str	r3, [r7, #68]	; 0x44
 8006356:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800635a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e4      	bne.n	8006332 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3308      	adds	r3, #8
 800636e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	e853 3f00 	ldrex	r3, [r3]
 8006376:	623b      	str	r3, [r7, #32]
   return(result);
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	f023 0301 	bic.w	r3, r3, #1
 800637e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3308      	adds	r3, #8
 8006388:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800638c:	633a      	str	r2, [r7, #48]	; 0x30
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e3      	bne.n	8006368 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f023 0310 	bic.w	r3, r3, #16
 80063c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063d6:	61fb      	str	r3, [r7, #28]
 80063d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	69b9      	ldr	r1, [r7, #24]
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	617b      	str	r3, [r7, #20]
   return(result);
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e4      	bne.n	80063b4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2202      	movs	r2, #2
 80063ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f852 	bl	80064a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063fc:	e03f      	b.n	800647e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00e      	beq.n	8006428 <HAL_UART_IRQHandler+0x56c>
 800640a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800640e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d008      	beq.n	8006428 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800641e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f849 	bl	80064b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006426:	e02d      	b.n	8006484 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800642c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00e      	beq.n	8006452 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01c      	beq.n	8006482 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	4798      	blx	r3
    }
    return;
 8006450:	e017      	b.n	8006482 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645a:	2b00      	cmp	r3, #0
 800645c:	d012      	beq.n	8006484 <HAL_UART_IRQHandler+0x5c8>
 800645e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00c      	beq.n	8006484 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fe43 	bl	80070f6 <UART_EndTransmit_IT>
    return;
 8006470:	e008      	b.n	8006484 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006472:	bf00      	nop
 8006474:	e006      	b.n	8006484 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006476:	bf00      	nop
 8006478:	e004      	b.n	8006484 <HAL_UART_IRQHandler+0x5c8>
      return;
 800647a:	bf00      	nop
 800647c:	e002      	b.n	8006484 <HAL_UART_IRQHandler+0x5c8>
      return;
 800647e:	bf00      	nop
 8006480:	e000      	b.n	8006484 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006482:	bf00      	nop
  }

}
 8006484:	37e8      	adds	r7, #232	; 0xe8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop

0800648c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4ba6      	ldr	r3, [pc, #664]	; (8006790 <UART_SetConfig+0x2c4>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6812      	ldr	r2, [r2, #0]
 80064fe:	6979      	ldr	r1, [r7, #20]
 8006500:	430b      	orrs	r3, r1
 8006502:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	430a      	orrs	r2, r1
 800653c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a94      	ldr	r2, [pc, #592]	; (8006794 <UART_SetConfig+0x2c8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d120      	bne.n	800658a <UART_SetConfig+0xbe>
 8006548:	4b93      	ldr	r3, [pc, #588]	; (8006798 <UART_SetConfig+0x2cc>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b03      	cmp	r3, #3
 8006554:	d816      	bhi.n	8006584 <UART_SetConfig+0xb8>
 8006556:	a201      	add	r2, pc, #4	; (adr r2, 800655c <UART_SetConfig+0x90>)
 8006558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655c:	0800656d 	.word	0x0800656d
 8006560:	08006579 	.word	0x08006579
 8006564:	08006573 	.word	0x08006573
 8006568:	0800657f 	.word	0x0800657f
 800656c:	2301      	movs	r3, #1
 800656e:	77fb      	strb	r3, [r7, #31]
 8006570:	e150      	b.n	8006814 <UART_SetConfig+0x348>
 8006572:	2302      	movs	r3, #2
 8006574:	77fb      	strb	r3, [r7, #31]
 8006576:	e14d      	b.n	8006814 <UART_SetConfig+0x348>
 8006578:	2304      	movs	r3, #4
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e14a      	b.n	8006814 <UART_SetConfig+0x348>
 800657e:	2308      	movs	r3, #8
 8006580:	77fb      	strb	r3, [r7, #31]
 8006582:	e147      	b.n	8006814 <UART_SetConfig+0x348>
 8006584:	2310      	movs	r3, #16
 8006586:	77fb      	strb	r3, [r7, #31]
 8006588:	e144      	b.n	8006814 <UART_SetConfig+0x348>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a83      	ldr	r2, [pc, #524]	; (800679c <UART_SetConfig+0x2d0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d132      	bne.n	80065fa <UART_SetConfig+0x12e>
 8006594:	4b80      	ldr	r3, [pc, #512]	; (8006798 <UART_SetConfig+0x2cc>)
 8006596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659a:	f003 030c 	and.w	r3, r3, #12
 800659e:	2b0c      	cmp	r3, #12
 80065a0:	d828      	bhi.n	80065f4 <UART_SetConfig+0x128>
 80065a2:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <UART_SetConfig+0xdc>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	080065dd 	.word	0x080065dd
 80065ac:	080065f5 	.word	0x080065f5
 80065b0:	080065f5 	.word	0x080065f5
 80065b4:	080065f5 	.word	0x080065f5
 80065b8:	080065e9 	.word	0x080065e9
 80065bc:	080065f5 	.word	0x080065f5
 80065c0:	080065f5 	.word	0x080065f5
 80065c4:	080065f5 	.word	0x080065f5
 80065c8:	080065e3 	.word	0x080065e3
 80065cc:	080065f5 	.word	0x080065f5
 80065d0:	080065f5 	.word	0x080065f5
 80065d4:	080065f5 	.word	0x080065f5
 80065d8:	080065ef 	.word	0x080065ef
 80065dc:	2300      	movs	r3, #0
 80065de:	77fb      	strb	r3, [r7, #31]
 80065e0:	e118      	b.n	8006814 <UART_SetConfig+0x348>
 80065e2:	2302      	movs	r3, #2
 80065e4:	77fb      	strb	r3, [r7, #31]
 80065e6:	e115      	b.n	8006814 <UART_SetConfig+0x348>
 80065e8:	2304      	movs	r3, #4
 80065ea:	77fb      	strb	r3, [r7, #31]
 80065ec:	e112      	b.n	8006814 <UART_SetConfig+0x348>
 80065ee:	2308      	movs	r3, #8
 80065f0:	77fb      	strb	r3, [r7, #31]
 80065f2:	e10f      	b.n	8006814 <UART_SetConfig+0x348>
 80065f4:	2310      	movs	r3, #16
 80065f6:	77fb      	strb	r3, [r7, #31]
 80065f8:	e10c      	b.n	8006814 <UART_SetConfig+0x348>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a68      	ldr	r2, [pc, #416]	; (80067a0 <UART_SetConfig+0x2d4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d120      	bne.n	8006646 <UART_SetConfig+0x17a>
 8006604:	4b64      	ldr	r3, [pc, #400]	; (8006798 <UART_SetConfig+0x2cc>)
 8006606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800660e:	2b30      	cmp	r3, #48	; 0x30
 8006610:	d013      	beq.n	800663a <UART_SetConfig+0x16e>
 8006612:	2b30      	cmp	r3, #48	; 0x30
 8006614:	d814      	bhi.n	8006640 <UART_SetConfig+0x174>
 8006616:	2b20      	cmp	r3, #32
 8006618:	d009      	beq.n	800662e <UART_SetConfig+0x162>
 800661a:	2b20      	cmp	r3, #32
 800661c:	d810      	bhi.n	8006640 <UART_SetConfig+0x174>
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <UART_SetConfig+0x15c>
 8006622:	2b10      	cmp	r3, #16
 8006624:	d006      	beq.n	8006634 <UART_SetConfig+0x168>
 8006626:	e00b      	b.n	8006640 <UART_SetConfig+0x174>
 8006628:	2300      	movs	r3, #0
 800662a:	77fb      	strb	r3, [r7, #31]
 800662c:	e0f2      	b.n	8006814 <UART_SetConfig+0x348>
 800662e:	2302      	movs	r3, #2
 8006630:	77fb      	strb	r3, [r7, #31]
 8006632:	e0ef      	b.n	8006814 <UART_SetConfig+0x348>
 8006634:	2304      	movs	r3, #4
 8006636:	77fb      	strb	r3, [r7, #31]
 8006638:	e0ec      	b.n	8006814 <UART_SetConfig+0x348>
 800663a:	2308      	movs	r3, #8
 800663c:	77fb      	strb	r3, [r7, #31]
 800663e:	e0e9      	b.n	8006814 <UART_SetConfig+0x348>
 8006640:	2310      	movs	r3, #16
 8006642:	77fb      	strb	r3, [r7, #31]
 8006644:	e0e6      	b.n	8006814 <UART_SetConfig+0x348>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a56      	ldr	r2, [pc, #344]	; (80067a4 <UART_SetConfig+0x2d8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d120      	bne.n	8006692 <UART_SetConfig+0x1c6>
 8006650:	4b51      	ldr	r3, [pc, #324]	; (8006798 <UART_SetConfig+0x2cc>)
 8006652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006656:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800665a:	2bc0      	cmp	r3, #192	; 0xc0
 800665c:	d013      	beq.n	8006686 <UART_SetConfig+0x1ba>
 800665e:	2bc0      	cmp	r3, #192	; 0xc0
 8006660:	d814      	bhi.n	800668c <UART_SetConfig+0x1c0>
 8006662:	2b80      	cmp	r3, #128	; 0x80
 8006664:	d009      	beq.n	800667a <UART_SetConfig+0x1ae>
 8006666:	2b80      	cmp	r3, #128	; 0x80
 8006668:	d810      	bhi.n	800668c <UART_SetConfig+0x1c0>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <UART_SetConfig+0x1a8>
 800666e:	2b40      	cmp	r3, #64	; 0x40
 8006670:	d006      	beq.n	8006680 <UART_SetConfig+0x1b4>
 8006672:	e00b      	b.n	800668c <UART_SetConfig+0x1c0>
 8006674:	2300      	movs	r3, #0
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	e0cc      	b.n	8006814 <UART_SetConfig+0x348>
 800667a:	2302      	movs	r3, #2
 800667c:	77fb      	strb	r3, [r7, #31]
 800667e:	e0c9      	b.n	8006814 <UART_SetConfig+0x348>
 8006680:	2304      	movs	r3, #4
 8006682:	77fb      	strb	r3, [r7, #31]
 8006684:	e0c6      	b.n	8006814 <UART_SetConfig+0x348>
 8006686:	2308      	movs	r3, #8
 8006688:	77fb      	strb	r3, [r7, #31]
 800668a:	e0c3      	b.n	8006814 <UART_SetConfig+0x348>
 800668c:	2310      	movs	r3, #16
 800668e:	77fb      	strb	r3, [r7, #31]
 8006690:	e0c0      	b.n	8006814 <UART_SetConfig+0x348>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a44      	ldr	r2, [pc, #272]	; (80067a8 <UART_SetConfig+0x2dc>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d125      	bne.n	80066e8 <UART_SetConfig+0x21c>
 800669c:	4b3e      	ldr	r3, [pc, #248]	; (8006798 <UART_SetConfig+0x2cc>)
 800669e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066aa:	d017      	beq.n	80066dc <UART_SetConfig+0x210>
 80066ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b0:	d817      	bhi.n	80066e2 <UART_SetConfig+0x216>
 80066b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066b6:	d00b      	beq.n	80066d0 <UART_SetConfig+0x204>
 80066b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066bc:	d811      	bhi.n	80066e2 <UART_SetConfig+0x216>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <UART_SetConfig+0x1fe>
 80066c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c6:	d006      	beq.n	80066d6 <UART_SetConfig+0x20a>
 80066c8:	e00b      	b.n	80066e2 <UART_SetConfig+0x216>
 80066ca:	2300      	movs	r3, #0
 80066cc:	77fb      	strb	r3, [r7, #31]
 80066ce:	e0a1      	b.n	8006814 <UART_SetConfig+0x348>
 80066d0:	2302      	movs	r3, #2
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	e09e      	b.n	8006814 <UART_SetConfig+0x348>
 80066d6:	2304      	movs	r3, #4
 80066d8:	77fb      	strb	r3, [r7, #31]
 80066da:	e09b      	b.n	8006814 <UART_SetConfig+0x348>
 80066dc:	2308      	movs	r3, #8
 80066de:	77fb      	strb	r3, [r7, #31]
 80066e0:	e098      	b.n	8006814 <UART_SetConfig+0x348>
 80066e2:	2310      	movs	r3, #16
 80066e4:	77fb      	strb	r3, [r7, #31]
 80066e6:	e095      	b.n	8006814 <UART_SetConfig+0x348>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a2f      	ldr	r2, [pc, #188]	; (80067ac <UART_SetConfig+0x2e0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d125      	bne.n	800673e <UART_SetConfig+0x272>
 80066f2:	4b29      	ldr	r3, [pc, #164]	; (8006798 <UART_SetConfig+0x2cc>)
 80066f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006700:	d017      	beq.n	8006732 <UART_SetConfig+0x266>
 8006702:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006706:	d817      	bhi.n	8006738 <UART_SetConfig+0x26c>
 8006708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800670c:	d00b      	beq.n	8006726 <UART_SetConfig+0x25a>
 800670e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006712:	d811      	bhi.n	8006738 <UART_SetConfig+0x26c>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <UART_SetConfig+0x254>
 8006718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800671c:	d006      	beq.n	800672c <UART_SetConfig+0x260>
 800671e:	e00b      	b.n	8006738 <UART_SetConfig+0x26c>
 8006720:	2301      	movs	r3, #1
 8006722:	77fb      	strb	r3, [r7, #31]
 8006724:	e076      	b.n	8006814 <UART_SetConfig+0x348>
 8006726:	2302      	movs	r3, #2
 8006728:	77fb      	strb	r3, [r7, #31]
 800672a:	e073      	b.n	8006814 <UART_SetConfig+0x348>
 800672c:	2304      	movs	r3, #4
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e070      	b.n	8006814 <UART_SetConfig+0x348>
 8006732:	2308      	movs	r3, #8
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e06d      	b.n	8006814 <UART_SetConfig+0x348>
 8006738:	2310      	movs	r3, #16
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e06a      	b.n	8006814 <UART_SetConfig+0x348>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a1b      	ldr	r2, [pc, #108]	; (80067b0 <UART_SetConfig+0x2e4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d138      	bne.n	80067ba <UART_SetConfig+0x2ee>
 8006748:	4b13      	ldr	r3, [pc, #76]	; (8006798 <UART_SetConfig+0x2cc>)
 800674a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006752:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006756:	d017      	beq.n	8006788 <UART_SetConfig+0x2bc>
 8006758:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800675c:	d82a      	bhi.n	80067b4 <UART_SetConfig+0x2e8>
 800675e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006762:	d00b      	beq.n	800677c <UART_SetConfig+0x2b0>
 8006764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006768:	d824      	bhi.n	80067b4 <UART_SetConfig+0x2e8>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <UART_SetConfig+0x2aa>
 800676e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006772:	d006      	beq.n	8006782 <UART_SetConfig+0x2b6>
 8006774:	e01e      	b.n	80067b4 <UART_SetConfig+0x2e8>
 8006776:	2300      	movs	r3, #0
 8006778:	77fb      	strb	r3, [r7, #31]
 800677a:	e04b      	b.n	8006814 <UART_SetConfig+0x348>
 800677c:	2302      	movs	r3, #2
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	e048      	b.n	8006814 <UART_SetConfig+0x348>
 8006782:	2304      	movs	r3, #4
 8006784:	77fb      	strb	r3, [r7, #31]
 8006786:	e045      	b.n	8006814 <UART_SetConfig+0x348>
 8006788:	2308      	movs	r3, #8
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e042      	b.n	8006814 <UART_SetConfig+0x348>
 800678e:	bf00      	nop
 8006790:	efff69f3 	.word	0xefff69f3
 8006794:	40011000 	.word	0x40011000
 8006798:	40023800 	.word	0x40023800
 800679c:	40004400 	.word	0x40004400
 80067a0:	40004800 	.word	0x40004800
 80067a4:	40004c00 	.word	0x40004c00
 80067a8:	40005000 	.word	0x40005000
 80067ac:	40011400 	.word	0x40011400
 80067b0:	40007800 	.word	0x40007800
 80067b4:	2310      	movs	r3, #16
 80067b6:	77fb      	strb	r3, [r7, #31]
 80067b8:	e02c      	b.n	8006814 <UART_SetConfig+0x348>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a72      	ldr	r2, [pc, #456]	; (8006988 <UART_SetConfig+0x4bc>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d125      	bne.n	8006810 <UART_SetConfig+0x344>
 80067c4:	4b71      	ldr	r3, [pc, #452]	; (800698c <UART_SetConfig+0x4c0>)
 80067c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067d2:	d017      	beq.n	8006804 <UART_SetConfig+0x338>
 80067d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067d8:	d817      	bhi.n	800680a <UART_SetConfig+0x33e>
 80067da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067de:	d00b      	beq.n	80067f8 <UART_SetConfig+0x32c>
 80067e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e4:	d811      	bhi.n	800680a <UART_SetConfig+0x33e>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <UART_SetConfig+0x326>
 80067ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067ee:	d006      	beq.n	80067fe <UART_SetConfig+0x332>
 80067f0:	e00b      	b.n	800680a <UART_SetConfig+0x33e>
 80067f2:	2300      	movs	r3, #0
 80067f4:	77fb      	strb	r3, [r7, #31]
 80067f6:	e00d      	b.n	8006814 <UART_SetConfig+0x348>
 80067f8:	2302      	movs	r3, #2
 80067fa:	77fb      	strb	r3, [r7, #31]
 80067fc:	e00a      	b.n	8006814 <UART_SetConfig+0x348>
 80067fe:	2304      	movs	r3, #4
 8006800:	77fb      	strb	r3, [r7, #31]
 8006802:	e007      	b.n	8006814 <UART_SetConfig+0x348>
 8006804:	2308      	movs	r3, #8
 8006806:	77fb      	strb	r3, [r7, #31]
 8006808:	e004      	b.n	8006814 <UART_SetConfig+0x348>
 800680a:	2310      	movs	r3, #16
 800680c:	77fb      	strb	r3, [r7, #31]
 800680e:	e001      	b.n	8006814 <UART_SetConfig+0x348>
 8006810:	2310      	movs	r3, #16
 8006812:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800681c:	d15b      	bne.n	80068d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800681e:	7ffb      	ldrb	r3, [r7, #31]
 8006820:	2b08      	cmp	r3, #8
 8006822:	d828      	bhi.n	8006876 <UART_SetConfig+0x3aa>
 8006824:	a201      	add	r2, pc, #4	; (adr r2, 800682c <UART_SetConfig+0x360>)
 8006826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682a:	bf00      	nop
 800682c:	08006851 	.word	0x08006851
 8006830:	08006859 	.word	0x08006859
 8006834:	08006861 	.word	0x08006861
 8006838:	08006877 	.word	0x08006877
 800683c:	08006867 	.word	0x08006867
 8006840:	08006877 	.word	0x08006877
 8006844:	08006877 	.word	0x08006877
 8006848:	08006877 	.word	0x08006877
 800684c:	0800686f 	.word	0x0800686f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006850:	f7fd fbf2 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 8006854:	61b8      	str	r0, [r7, #24]
        break;
 8006856:	e013      	b.n	8006880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006858:	f7fd fc02 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 800685c:	61b8      	str	r0, [r7, #24]
        break;
 800685e:	e00f      	b.n	8006880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006860:	4b4b      	ldr	r3, [pc, #300]	; (8006990 <UART_SetConfig+0x4c4>)
 8006862:	61bb      	str	r3, [r7, #24]
        break;
 8006864:	e00c      	b.n	8006880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006866:	f7fd fad7 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 800686a:	61b8      	str	r0, [r7, #24]
        break;
 800686c:	e008      	b.n	8006880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800686e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006872:	61bb      	str	r3, [r7, #24]
        break;
 8006874:	e004      	b.n	8006880 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	77bb      	strb	r3, [r7, #30]
        break;
 800687e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d074      	beq.n	8006970 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	005a      	lsls	r2, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	085b      	lsrs	r3, r3, #1
 8006890:	441a      	add	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	fbb2 f3f3 	udiv	r3, r2, r3
 800689a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2b0f      	cmp	r3, #15
 80068a0:	d916      	bls.n	80068d0 <UART_SetConfig+0x404>
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a8:	d212      	bcs.n	80068d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f023 030f 	bic.w	r3, r3, #15
 80068b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	085b      	lsrs	r3, r3, #1
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f003 0307 	and.w	r3, r3, #7
 80068be:	b29a      	uxth	r2, r3
 80068c0:	89fb      	ldrh	r3, [r7, #14]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	89fa      	ldrh	r2, [r7, #14]
 80068cc:	60da      	str	r2, [r3, #12]
 80068ce:	e04f      	b.n	8006970 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	77bb      	strb	r3, [r7, #30]
 80068d4:	e04c      	b.n	8006970 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068d6:	7ffb      	ldrb	r3, [r7, #31]
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d828      	bhi.n	800692e <UART_SetConfig+0x462>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <UART_SetConfig+0x418>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	08006909 	.word	0x08006909
 80068e8:	08006911 	.word	0x08006911
 80068ec:	08006919 	.word	0x08006919
 80068f0:	0800692f 	.word	0x0800692f
 80068f4:	0800691f 	.word	0x0800691f
 80068f8:	0800692f 	.word	0x0800692f
 80068fc:	0800692f 	.word	0x0800692f
 8006900:	0800692f 	.word	0x0800692f
 8006904:	08006927 	.word	0x08006927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006908:	f7fd fb96 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 800690c:	61b8      	str	r0, [r7, #24]
        break;
 800690e:	e013      	b.n	8006938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006910:	f7fd fba6 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 8006914:	61b8      	str	r0, [r7, #24]
        break;
 8006916:	e00f      	b.n	8006938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006918:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <UART_SetConfig+0x4c4>)
 800691a:	61bb      	str	r3, [r7, #24]
        break;
 800691c:	e00c      	b.n	8006938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800691e:	f7fd fa7b 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 8006922:	61b8      	str	r0, [r7, #24]
        break;
 8006924:	e008      	b.n	8006938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800692a:	61bb      	str	r3, [r7, #24]
        break;
 800692c:	e004      	b.n	8006938 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	77bb      	strb	r3, [r7, #30]
        break;
 8006936:	bf00      	nop
    }

    if (pclk != 0U)
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d018      	beq.n	8006970 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	085a      	lsrs	r2, r3, #1
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	441a      	add	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006950:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b0f      	cmp	r3, #15
 8006956:	d909      	bls.n	800696c <UART_SetConfig+0x4a0>
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800695e:	d205      	bcs.n	800696c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	b29a      	uxth	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60da      	str	r2, [r3, #12]
 800696a:	e001      	b.n	8006970 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800697c:	7fbb      	ldrb	r3, [r7, #30]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	40007c00 	.word	0x40007c00
 800698c:	40023800 	.word	0x40023800
 8006990:	00f42400 	.word	0x00f42400

08006994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00a      	beq.n	80069be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00a      	beq.n	8006a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00a      	beq.n	8006a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	f003 0310 	and.w	r3, r3, #16
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00a      	beq.n	8006a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01a      	beq.n	8006aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a92:	d10a      	bne.n	8006aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00a      	beq.n	8006acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	605a      	str	r2, [r3, #4]
  }
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ae8:	f7fb fcb2 	bl	8002450 <HAL_GetTick>
 8006aec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0308 	and.w	r3, r3, #8
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d10e      	bne.n	8006b1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f831 	bl	8006b72 <UART_WaitOnFlagUntilTimeout>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e027      	b.n	8006b6a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0304 	and.w	r3, r3, #4
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	d10e      	bne.n	8006b46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f81b 	bl	8006b72 <UART_WaitOnFlagUntilTimeout>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e011      	b.n	8006b6a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b09c      	sub	sp, #112	; 0x70
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	603b      	str	r3, [r7, #0]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b82:	e0a7      	b.n	8006cd4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8a:	f000 80a3 	beq.w	8006cd4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b8e:	f7fb fc5f 	bl	8002450 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d302      	bcc.n	8006ba4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d13f      	bne.n	8006c24 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bac:	e853 3f00 	ldrex	r3, [r3]
 8006bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bb8:	667b      	str	r3, [r7, #100]	; 0x64
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bc4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e6      	bne.n	8006ba4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3308      	adds	r3, #8
 8006bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be0:	e853 3f00 	ldrex	r3, [r3]
 8006be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	f023 0301 	bic.w	r3, r3, #1
 8006bec:	663b      	str	r3, [r7, #96]	; 0x60
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bf6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bf8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1e5      	bne.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e068      	b.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d050      	beq.n	8006cd4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c40:	d148      	bne.n	8006cd4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c4a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c6c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e6      	bne.n	8006c4c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c9e:	623a      	str	r2, [r7, #32]
 8006ca0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	69f9      	ldr	r1, [r7, #28]
 8006ca4:	6a3a      	ldr	r2, [r7, #32]
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e5      	bne.n	8006c7e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e010      	b.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	69da      	ldr	r2, [r3, #28]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	bf0c      	ite	eq
 8006ce4:	2301      	moveq	r3, #1
 8006ce6:	2300      	movne	r3, #0
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	461a      	mov	r2, r3
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	f43f af48 	beq.w	8006b84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3770      	adds	r7, #112	; 0x70
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
	...

08006d00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b097      	sub	sp, #92	; 0x5c
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	88fa      	ldrh	r2, [r7, #6]
 8006d18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	88fa      	ldrh	r2, [r7, #6]
 8006d20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d32:	d10e      	bne.n	8006d52 <UART_Start_Receive_IT+0x52>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d105      	bne.n	8006d48 <UART_Start_Receive_IT+0x48>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d46:	e02d      	b.n	8006da4 <UART_Start_Receive_IT+0xa4>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	22ff      	movs	r2, #255	; 0xff
 8006d4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d50:	e028      	b.n	8006da4 <UART_Start_Receive_IT+0xa4>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10d      	bne.n	8006d76 <UART_Start_Receive_IT+0x76>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d104      	bne.n	8006d6c <UART_Start_Receive_IT+0x6c>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	22ff      	movs	r2, #255	; 0xff
 8006d66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d6a:	e01b      	b.n	8006da4 <UART_Start_Receive_IT+0xa4>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	227f      	movs	r2, #127	; 0x7f
 8006d70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d74:	e016      	b.n	8006da4 <UART_Start_Receive_IT+0xa4>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d7e:	d10d      	bne.n	8006d9c <UART_Start_Receive_IT+0x9c>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d104      	bne.n	8006d92 <UART_Start_Receive_IT+0x92>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	227f      	movs	r2, #127	; 0x7f
 8006d8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d90:	e008      	b.n	8006da4 <UART_Start_Receive_IT+0xa4>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	223f      	movs	r2, #63	; 0x3f
 8006d96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d9a:	e003      	b.n	8006da4 <UART_Start_Receive_IT+0xa4>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2222      	movs	r2, #34	; 0x22
 8006db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3308      	adds	r3, #8
 8006dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dbe:	e853 3f00 	ldrex	r3, [r3]
 8006dc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	f043 0301 	orr.w	r3, r3, #1
 8006dca:	657b      	str	r3, [r7, #84]	; 0x54
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dd4:	64ba      	str	r2, [r7, #72]	; 0x48
 8006dd6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ddc:	e841 2300 	strex	r3, r2, [r1]
 8006de0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e5      	bne.n	8006db4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df0:	d107      	bne.n	8006e02 <UART_Start_Receive_IT+0x102>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d103      	bne.n	8006e02 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4a21      	ldr	r2, [pc, #132]	; (8006e84 <UART_Start_Receive_IT+0x184>)
 8006dfe:	669a      	str	r2, [r3, #104]	; 0x68
 8006e00:	e002      	b.n	8006e08 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4a20      	ldr	r2, [pc, #128]	; (8006e88 <UART_Start_Receive_IT+0x188>)
 8006e06:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d019      	beq.n	8006e44 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006e24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e30:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e6      	bne.n	8006e10 <UART_Start_Receive_IT+0x110>
 8006e42:	e018      	b.n	8006e76 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	613b      	str	r3, [r7, #16]
   return(result);
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f043 0320 	orr.w	r3, r3, #32
 8006e58:	653b      	str	r3, [r7, #80]	; 0x50
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e62:	623b      	str	r3, [r7, #32]
 8006e64:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	69f9      	ldr	r1, [r7, #28]
 8006e68:	6a3a      	ldr	r2, [r7, #32]
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e6      	bne.n	8006e44 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	375c      	adds	r7, #92	; 0x5c
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	080072b1 	.word	0x080072b1
 8006e88:	0800714b 	.word	0x0800714b

08006e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b095      	sub	sp, #84	; 0x54
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb2:	643b      	str	r3, [r7, #64]	; 0x40
 8006eb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e6      	bne.n	8006e94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	f023 0301 	bic.w	r3, r3, #1
 8006edc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ee8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e5      	bne.n	8006ec6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d118      	bne.n	8006f34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	e853 3f00 	ldrex	r3, [r3]
 8006f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f023 0310 	bic.w	r3, r3, #16
 8006f16:	647b      	str	r3, [r7, #68]	; 0x44
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f20:	61bb      	str	r3, [r7, #24]
 8006f22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f24:	6979      	ldr	r1, [r7, #20]
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	e841 2300 	strex	r3, r2, [r1]
 8006f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1e6      	bne.n	8006f02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f48:	bf00      	nop
 8006f4a:	3754      	adds	r7, #84	; 0x54
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f7ff fa8a 	bl	800648c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f78:	bf00      	nop
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b08f      	sub	sp, #60	; 0x3c
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f8c:	2b21      	cmp	r3, #33	; 0x21
 8006f8e:	d14c      	bne.n	800702a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d132      	bne.n	8007002 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	e853 3f00 	ldrex	r3, [r3]
 8006fa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fbc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e6      	bne.n	8006f9c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	e853 3f00 	ldrex	r3, [r3]
 8006fda:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	61bb      	str	r3, [r7, #24]
 8006fee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	6979      	ldr	r1, [r7, #20]
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e6      	bne.n	8006fce <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007000:	e013      	b.n	800702a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007006:	781a      	ldrb	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800702a:	bf00      	nop
 800702c:	373c      	adds	r7, #60	; 0x3c
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007036:	b480      	push	{r7}
 8007038:	b091      	sub	sp, #68	; 0x44
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007042:	2b21      	cmp	r3, #33	; 0x21
 8007044:	d151      	bne.n	80070ea <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800704c:	b29b      	uxth	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d132      	bne.n	80070b8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	623b      	str	r3, [r7, #32]
   return(result);
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007066:	63bb      	str	r3, [r7, #56]	; 0x38
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	633b      	str	r3, [r7, #48]	; 0x30
 8007072:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e6      	bne.n	8007052 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	60fb      	str	r3, [r7, #12]
   return(result);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007098:	637b      	str	r3, [r7, #52]	; 0x34
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a2:	61fb      	str	r3, [r7, #28]
 80070a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	69b9      	ldr	r1, [r7, #24]
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	617b      	str	r3, [r7, #20]
   return(result);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e6      	bne.n	8007084 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80070b6:	e018      	b.n	80070ea <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80070be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070cc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d2:	1c9a      	adds	r2, r3, #2
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070de:	b29b      	uxth	r3, r3
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80070ea:	bf00      	nop
 80070ec:	3744      	adds	r7, #68	; 0x44
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b088      	sub	sp, #32
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	e853 3f00 	ldrex	r3, [r3]
 800710a:	60bb      	str	r3, [r7, #8]
   return(result);
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007112:	61fb      	str	r3, [r7, #28]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	461a      	mov	r2, r3
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	61bb      	str	r3, [r7, #24]
 800711e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007120:	6979      	ldr	r1, [r7, #20]
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	e841 2300 	strex	r3, r2, [r1]
 8007128:	613b      	str	r3, [r7, #16]
   return(result);
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1e6      	bne.n	80070fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2220      	movs	r2, #32
 8007134:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7fb f8d3 	bl	80022e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007142:	bf00      	nop
 8007144:	3720      	adds	r7, #32
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b096      	sub	sp, #88	; 0x58
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007158:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007162:	2b22      	cmp	r3, #34	; 0x22
 8007164:	f040 8098 	bne.w	8007298 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007172:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007176:	b2d9      	uxtb	r1, r3
 8007178:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800717c:	b2da      	uxtb	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007182:	400a      	ands	r2, r1
 8007184:	b2d2      	uxtb	r2, r2
 8007186:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007198:	b29b      	uxth	r3, r3
 800719a:	3b01      	subs	r3, #1
 800719c:	b29a      	uxth	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d17b      	bne.n	80072a8 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071c4:	653b      	str	r3, [r7, #80]	; 0x50
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ce:	647b      	str	r3, [r7, #68]	; 0x44
 80071d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e6      	bne.n	80071b0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	623b      	str	r3, [r7, #32]
   return(result);
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	f023 0301 	bic.w	r3, r3, #1
 80071f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3308      	adds	r3, #8
 8007200:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007202:	633a      	str	r2, [r7, #48]	; 0x30
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e5      	bne.n	80071e2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2220      	movs	r2, #32
 800721a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800722e:	2b01      	cmp	r3, #1
 8007230:	d12e      	bne.n	8007290 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	e853 3f00 	ldrex	r3, [r3]
 8007244:	60fb      	str	r3, [r7, #12]
   return(result);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f023 0310 	bic.w	r3, r3, #16
 800724c:	64bb      	str	r3, [r7, #72]	; 0x48
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007256:	61fb      	str	r3, [r7, #28]
 8007258:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	69b9      	ldr	r1, [r7, #24]
 800725c:	69fa      	ldr	r2, [r7, #28]
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	617b      	str	r3, [r7, #20]
   return(result);
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e6      	bne.n	8007238 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	f003 0310 	and.w	r3, r3, #16
 8007274:	2b10      	cmp	r3, #16
 8007276:	d103      	bne.n	8007280 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2210      	movs	r2, #16
 800727e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff f909 	bl	80064a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800728e:	e00b      	b.n	80072a8 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7fa ffbf 	bl	8002214 <HAL_UART_RxCpltCallback>
}
 8007296:	e007      	b.n	80072a8 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0208 	orr.w	r2, r2, #8
 80072a6:	619a      	str	r2, [r3, #24]
}
 80072a8:	bf00      	nop
 80072aa:	3758      	adds	r7, #88	; 0x58
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b096      	sub	sp, #88	; 0x58
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072be:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072c8:	2b22      	cmp	r3, #34	; 0x22
 80072ca:	f040 8098 	bne.w	80073fe <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072dc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80072de:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80072e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80072e6:	4013      	ands	r3, r2
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	1c9a      	adds	r2, r3, #2
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d17b      	bne.n	800740e <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731e:	e853 3f00 	ldrex	r3, [r3]
 8007322:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800732a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	461a      	mov	r2, r3
 8007332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007334:	643b      	str	r3, [r7, #64]	; 0x40
 8007336:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007338:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800733a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800733c:	e841 2300 	strex	r3, r2, [r1]
 8007340:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e6      	bne.n	8007316 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3308      	adds	r3, #8
 800734e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	e853 3f00 	ldrex	r3, [r3]
 8007356:	61fb      	str	r3, [r7, #28]
   return(result);
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	f023 0301 	bic.w	r3, r3, #1
 800735e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3308      	adds	r3, #8
 8007366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007368:	62fa      	str	r2, [r7, #44]	; 0x2c
 800736a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800736e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007370:	e841 2300 	strex	r3, r2, [r1]
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e5      	bne.n	8007348 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2220      	movs	r2, #32
 8007380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007394:	2b01      	cmp	r3, #1
 8007396:	d12e      	bne.n	80073f6 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	e853 3f00 	ldrex	r3, [r3]
 80073aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f023 0310 	bic.w	r3, r3, #16
 80073b2:	647b      	str	r3, [r7, #68]	; 0x44
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073bc:	61bb      	str	r3, [r7, #24]
 80073be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	6979      	ldr	r1, [r7, #20]
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	613b      	str	r3, [r7, #16]
   return(result);
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e6      	bne.n	800739e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f003 0310 	and.w	r3, r3, #16
 80073da:	2b10      	cmp	r3, #16
 80073dc:	d103      	bne.n	80073e6 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2210      	movs	r2, #16
 80073e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073ec:	4619      	mov	r1, r3
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7ff f856 	bl	80064a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073f4:	e00b      	b.n	800740e <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7fa ff0c 	bl	8002214 <HAL_UART_RxCpltCallback>
}
 80073fc:	e007      	b.n	800740e <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	699a      	ldr	r2, [r3, #24]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 0208 	orr.w	r2, r2, #8
 800740c:	619a      	str	r2, [r3, #24]
}
 800740e:	bf00      	nop
 8007410:	3758      	adds	r7, #88	; 0x58
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800741c:	4904      	ldr	r1, [pc, #16]	; (8007430 <MX_FATFS_Init+0x18>)
 800741e:	4805      	ldr	r0, [pc, #20]	; (8007434 <MX_FATFS_Init+0x1c>)
 8007420:	f000 f8ae 	bl	8007580 <FATFS_LinkDriver>
 8007424:	4603      	mov	r3, r0
 8007426:	461a      	mov	r2, r3
 8007428:	4b03      	ldr	r3, [pc, #12]	; (8007438 <MX_FATFS_Init+0x20>)
 800742a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800742c:	bf00      	nop
 800742e:	bd80      	pop	{r7, pc}
 8007430:	2000088c 	.word	0x2000088c
 8007434:	20000010 	.word	0x20000010
 8007438:	20000888 	.word	0x20000888

0800743c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	4618      	mov	r0, r3
 800744a:	f7f9 fdb7 	bl	8000fbc <SD_disk_initialize>
 800744e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007450:	4618      	mov	r0, r3
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	4618      	mov	r0, r3
 8007466:	f7f9 fe8f 	bl	8001188 <SD_disk_status>
 800746a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	607a      	str	r2, [r7, #4]
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	4603      	mov	r3, r0
 8007482:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007484:	7bf8      	ldrb	r0, [r7, #15]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	f7f9 fe92 	bl	80011b4 <SD_disk_read>
 8007490:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
 80074a6:	4603      	mov	r3, r0
 80074a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80074aa:	7bf8      	ldrb	r0, [r7, #15]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	f7f9 fee9 	bl	8001288 <SD_disk_write>
 80074b6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	4603      	mov	r3, r0
 80074c8:	603a      	str	r2, [r7, #0]
 80074ca:	71fb      	strb	r3, [r7, #7]
 80074cc:	460b      	mov	r3, r1
 80074ce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80074d0:	79b9      	ldrb	r1, [r7, #6]
 80074d2:	79fb      	ldrb	r3, [r7, #7]
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7f9 ff5a 	bl	8001390 <SD_disk_ioctl>
 80074dc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	4613      	mov	r3, r2
 80074f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80074f6:	2301      	movs	r3, #1
 80074f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80074fe:	4b1f      	ldr	r3, [pc, #124]	; (800757c <FATFS_LinkDriverEx+0x94>)
 8007500:	7a5b      	ldrb	r3, [r3, #9]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b00      	cmp	r3, #0
 8007506:	d131      	bne.n	800756c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007508:	4b1c      	ldr	r3, [pc, #112]	; (800757c <FATFS_LinkDriverEx+0x94>)
 800750a:	7a5b      	ldrb	r3, [r3, #9]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	461a      	mov	r2, r3
 8007510:	4b1a      	ldr	r3, [pc, #104]	; (800757c <FATFS_LinkDriverEx+0x94>)
 8007512:	2100      	movs	r1, #0
 8007514:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007516:	4b19      	ldr	r3, [pc, #100]	; (800757c <FATFS_LinkDriverEx+0x94>)
 8007518:	7a5b      	ldrb	r3, [r3, #9]
 800751a:	b2db      	uxtb	r3, r3
 800751c:	4a17      	ldr	r2, [pc, #92]	; (800757c <FATFS_LinkDriverEx+0x94>)
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007526:	4b15      	ldr	r3, [pc, #84]	; (800757c <FATFS_LinkDriverEx+0x94>)
 8007528:	7a5b      	ldrb	r3, [r3, #9]
 800752a:	b2db      	uxtb	r3, r3
 800752c:	461a      	mov	r2, r3
 800752e:	4b13      	ldr	r3, [pc, #76]	; (800757c <FATFS_LinkDriverEx+0x94>)
 8007530:	4413      	add	r3, r2
 8007532:	79fa      	ldrb	r2, [r7, #7]
 8007534:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007536:	4b11      	ldr	r3, [pc, #68]	; (800757c <FATFS_LinkDriverEx+0x94>)
 8007538:	7a5b      	ldrb	r3, [r3, #9]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	b2d1      	uxtb	r1, r2
 8007540:	4a0e      	ldr	r2, [pc, #56]	; (800757c <FATFS_LinkDriverEx+0x94>)
 8007542:	7251      	strb	r1, [r2, #9]
 8007544:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007546:	7dbb      	ldrb	r3, [r7, #22]
 8007548:	3330      	adds	r3, #48	; 0x30
 800754a:	b2da      	uxtb	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	3301      	adds	r3, #1
 8007554:	223a      	movs	r2, #58	; 0x3a
 8007556:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	3302      	adds	r3, #2
 800755c:	222f      	movs	r2, #47	; 0x2f
 800755e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	3303      	adds	r3, #3
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007568:	2300      	movs	r3, #0
 800756a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800756c:	7dfb      	ldrb	r3, [r7, #23]
}
 800756e:	4618      	mov	r0, r3
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	20000890 	.word	0x20000890

08007580 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800758a:	2200      	movs	r2, #0
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff ffaa 	bl	80074e8 <FATFS_LinkDriverEx>
 8007594:	4603      	mov	r3, r0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
	...

080075a0 <__errno>:
 80075a0:	4b01      	ldr	r3, [pc, #4]	; (80075a8 <__errno+0x8>)
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20000024 	.word	0x20000024

080075ac <__libc_init_array>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	4d0d      	ldr	r5, [pc, #52]	; (80075e4 <__libc_init_array+0x38>)
 80075b0:	4c0d      	ldr	r4, [pc, #52]	; (80075e8 <__libc_init_array+0x3c>)
 80075b2:	1b64      	subs	r4, r4, r5
 80075b4:	10a4      	asrs	r4, r4, #2
 80075b6:	2600      	movs	r6, #0
 80075b8:	42a6      	cmp	r6, r4
 80075ba:	d109      	bne.n	80075d0 <__libc_init_array+0x24>
 80075bc:	4d0b      	ldr	r5, [pc, #44]	; (80075ec <__libc_init_array+0x40>)
 80075be:	4c0c      	ldr	r4, [pc, #48]	; (80075f0 <__libc_init_array+0x44>)
 80075c0:	f004 fb9e 	bl	800bd00 <_init>
 80075c4:	1b64      	subs	r4, r4, r5
 80075c6:	10a4      	asrs	r4, r4, #2
 80075c8:	2600      	movs	r6, #0
 80075ca:	42a6      	cmp	r6, r4
 80075cc:	d105      	bne.n	80075da <__libc_init_array+0x2e>
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d4:	4798      	blx	r3
 80075d6:	3601      	adds	r6, #1
 80075d8:	e7ee      	b.n	80075b8 <__libc_init_array+0xc>
 80075da:	f855 3b04 	ldr.w	r3, [r5], #4
 80075de:	4798      	blx	r3
 80075e0:	3601      	adds	r6, #1
 80075e2:	e7f2      	b.n	80075ca <__libc_init_array+0x1e>
 80075e4:	0800c21c 	.word	0x0800c21c
 80075e8:	0800c21c 	.word	0x0800c21c
 80075ec:	0800c21c 	.word	0x0800c21c
 80075f0:	0800c220 	.word	0x0800c220

080075f4 <memset>:
 80075f4:	4402      	add	r2, r0
 80075f6:	4603      	mov	r3, r0
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d100      	bne.n	80075fe <memset+0xa>
 80075fc:	4770      	bx	lr
 80075fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007602:	e7f9      	b.n	80075f8 <memset+0x4>

08007604 <__cvt>:
 8007604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007606:	ed2d 8b02 	vpush	{d8}
 800760a:	eeb0 8b40 	vmov.f64	d8, d0
 800760e:	b085      	sub	sp, #20
 8007610:	4617      	mov	r7, r2
 8007612:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007614:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007616:	ee18 2a90 	vmov	r2, s17
 800761a:	f025 0520 	bic.w	r5, r5, #32
 800761e:	2a00      	cmp	r2, #0
 8007620:	bfb6      	itet	lt
 8007622:	222d      	movlt	r2, #45	; 0x2d
 8007624:	2200      	movge	r2, #0
 8007626:	eeb1 8b40 	vneglt.f64	d8, d0
 800762a:	2d46      	cmp	r5, #70	; 0x46
 800762c:	460c      	mov	r4, r1
 800762e:	701a      	strb	r2, [r3, #0]
 8007630:	d004      	beq.n	800763c <__cvt+0x38>
 8007632:	2d45      	cmp	r5, #69	; 0x45
 8007634:	d100      	bne.n	8007638 <__cvt+0x34>
 8007636:	3401      	adds	r4, #1
 8007638:	2102      	movs	r1, #2
 800763a:	e000      	b.n	800763e <__cvt+0x3a>
 800763c:	2103      	movs	r1, #3
 800763e:	ab03      	add	r3, sp, #12
 8007640:	9301      	str	r3, [sp, #4]
 8007642:	ab02      	add	r3, sp, #8
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	4622      	mov	r2, r4
 8007648:	4633      	mov	r3, r6
 800764a:	eeb0 0b48 	vmov.f64	d0, d8
 800764e:	f001 fd43 	bl	80090d8 <_dtoa_r>
 8007652:	2d47      	cmp	r5, #71	; 0x47
 8007654:	d101      	bne.n	800765a <__cvt+0x56>
 8007656:	07fb      	lsls	r3, r7, #31
 8007658:	d51a      	bpl.n	8007690 <__cvt+0x8c>
 800765a:	2d46      	cmp	r5, #70	; 0x46
 800765c:	eb00 0204 	add.w	r2, r0, r4
 8007660:	d10c      	bne.n	800767c <__cvt+0x78>
 8007662:	7803      	ldrb	r3, [r0, #0]
 8007664:	2b30      	cmp	r3, #48	; 0x30
 8007666:	d107      	bne.n	8007678 <__cvt+0x74>
 8007668:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800766c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007670:	bf1c      	itt	ne
 8007672:	f1c4 0401 	rsbne	r4, r4, #1
 8007676:	6034      	strne	r4, [r6, #0]
 8007678:	6833      	ldr	r3, [r6, #0]
 800767a:	441a      	add	r2, r3
 800767c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007684:	bf08      	it	eq
 8007686:	9203      	streq	r2, [sp, #12]
 8007688:	2130      	movs	r1, #48	; 0x30
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	4293      	cmp	r3, r2
 800768e:	d307      	bcc.n	80076a0 <__cvt+0x9c>
 8007690:	9b03      	ldr	r3, [sp, #12]
 8007692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007694:	1a1b      	subs	r3, r3, r0
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	b005      	add	sp, #20
 800769a:	ecbd 8b02 	vpop	{d8}
 800769e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076a0:	1c5c      	adds	r4, r3, #1
 80076a2:	9403      	str	r4, [sp, #12]
 80076a4:	7019      	strb	r1, [r3, #0]
 80076a6:	e7f0      	b.n	800768a <__cvt+0x86>

080076a8 <__exponent>:
 80076a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076aa:	4603      	mov	r3, r0
 80076ac:	2900      	cmp	r1, #0
 80076ae:	bfb8      	it	lt
 80076b0:	4249      	neglt	r1, r1
 80076b2:	f803 2b02 	strb.w	r2, [r3], #2
 80076b6:	bfb4      	ite	lt
 80076b8:	222d      	movlt	r2, #45	; 0x2d
 80076ba:	222b      	movge	r2, #43	; 0x2b
 80076bc:	2909      	cmp	r1, #9
 80076be:	7042      	strb	r2, [r0, #1]
 80076c0:	dd2a      	ble.n	8007718 <__exponent+0x70>
 80076c2:	f10d 0407 	add.w	r4, sp, #7
 80076c6:	46a4      	mov	ip, r4
 80076c8:	270a      	movs	r7, #10
 80076ca:	46a6      	mov	lr, r4
 80076cc:	460a      	mov	r2, r1
 80076ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80076d2:	fb07 1516 	mls	r5, r7, r6, r1
 80076d6:	3530      	adds	r5, #48	; 0x30
 80076d8:	2a63      	cmp	r2, #99	; 0x63
 80076da:	f104 34ff 	add.w	r4, r4, #4294967295
 80076de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80076e2:	4631      	mov	r1, r6
 80076e4:	dcf1      	bgt.n	80076ca <__exponent+0x22>
 80076e6:	3130      	adds	r1, #48	; 0x30
 80076e8:	f1ae 0502 	sub.w	r5, lr, #2
 80076ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80076f0:	1c44      	adds	r4, r0, #1
 80076f2:	4629      	mov	r1, r5
 80076f4:	4561      	cmp	r1, ip
 80076f6:	d30a      	bcc.n	800770e <__exponent+0x66>
 80076f8:	f10d 0209 	add.w	r2, sp, #9
 80076fc:	eba2 020e 	sub.w	r2, r2, lr
 8007700:	4565      	cmp	r5, ip
 8007702:	bf88      	it	hi
 8007704:	2200      	movhi	r2, #0
 8007706:	4413      	add	r3, r2
 8007708:	1a18      	subs	r0, r3, r0
 800770a:	b003      	add	sp, #12
 800770c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800770e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007712:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007716:	e7ed      	b.n	80076f4 <__exponent+0x4c>
 8007718:	2330      	movs	r3, #48	; 0x30
 800771a:	3130      	adds	r1, #48	; 0x30
 800771c:	7083      	strb	r3, [r0, #2]
 800771e:	70c1      	strb	r1, [r0, #3]
 8007720:	1d03      	adds	r3, r0, #4
 8007722:	e7f1      	b.n	8007708 <__exponent+0x60>
 8007724:	0000      	movs	r0, r0
	...

08007728 <_printf_float>:
 8007728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	b08b      	sub	sp, #44	; 0x2c
 800772e:	460c      	mov	r4, r1
 8007730:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007734:	4616      	mov	r6, r2
 8007736:	461f      	mov	r7, r3
 8007738:	4605      	mov	r5, r0
 800773a:	f002 fdab 	bl	800a294 <_localeconv_r>
 800773e:	f8d0 b000 	ldr.w	fp, [r0]
 8007742:	4658      	mov	r0, fp
 8007744:	f7f8 fd7c 	bl	8000240 <strlen>
 8007748:	2300      	movs	r3, #0
 800774a:	9308      	str	r3, [sp, #32]
 800774c:	f8d8 3000 	ldr.w	r3, [r8]
 8007750:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007754:	6822      	ldr	r2, [r4, #0]
 8007756:	3307      	adds	r3, #7
 8007758:	f023 0307 	bic.w	r3, r3, #7
 800775c:	f103 0108 	add.w	r1, r3, #8
 8007760:	f8c8 1000 	str.w	r1, [r8]
 8007764:	4682      	mov	sl, r0
 8007766:	e9d3 0100 	ldrd	r0, r1, [r3]
 800776a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800776e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80079d0 <_printf_float+0x2a8>
 8007772:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007776:	eeb0 6bc0 	vabs.f64	d6, d0
 800777a:	eeb4 6b47 	vcmp.f64	d6, d7
 800777e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007782:	dd24      	ble.n	80077ce <_printf_float+0xa6>
 8007784:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800778c:	d502      	bpl.n	8007794 <_printf_float+0x6c>
 800778e:	232d      	movs	r3, #45	; 0x2d
 8007790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007794:	4b90      	ldr	r3, [pc, #576]	; (80079d8 <_printf_float+0x2b0>)
 8007796:	4891      	ldr	r0, [pc, #580]	; (80079dc <_printf_float+0x2b4>)
 8007798:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800779c:	bf94      	ite	ls
 800779e:	4698      	movls	r8, r3
 80077a0:	4680      	movhi	r8, r0
 80077a2:	2303      	movs	r3, #3
 80077a4:	6123      	str	r3, [r4, #16]
 80077a6:	f022 0204 	bic.w	r2, r2, #4
 80077aa:	2300      	movs	r3, #0
 80077ac:	6022      	str	r2, [r4, #0]
 80077ae:	9304      	str	r3, [sp, #16]
 80077b0:	9700      	str	r7, [sp, #0]
 80077b2:	4633      	mov	r3, r6
 80077b4:	aa09      	add	r2, sp, #36	; 0x24
 80077b6:	4621      	mov	r1, r4
 80077b8:	4628      	mov	r0, r5
 80077ba:	f000 f9d3 	bl	8007b64 <_printf_common>
 80077be:	3001      	adds	r0, #1
 80077c0:	f040 808a 	bne.w	80078d8 <_printf_float+0x1b0>
 80077c4:	f04f 30ff 	mov.w	r0, #4294967295
 80077c8:	b00b      	add	sp, #44	; 0x2c
 80077ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ce:	eeb4 0b40 	vcmp.f64	d0, d0
 80077d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d6:	d709      	bvc.n	80077ec <_printf_float+0xc4>
 80077d8:	ee10 3a90 	vmov	r3, s1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	bfbc      	itt	lt
 80077e0:	232d      	movlt	r3, #45	; 0x2d
 80077e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80077e6:	487e      	ldr	r0, [pc, #504]	; (80079e0 <_printf_float+0x2b8>)
 80077e8:	4b7e      	ldr	r3, [pc, #504]	; (80079e4 <_printf_float+0x2bc>)
 80077ea:	e7d5      	b.n	8007798 <_printf_float+0x70>
 80077ec:	6863      	ldr	r3, [r4, #4]
 80077ee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80077f2:	9104      	str	r1, [sp, #16]
 80077f4:	1c59      	adds	r1, r3, #1
 80077f6:	d13c      	bne.n	8007872 <_printf_float+0x14a>
 80077f8:	2306      	movs	r3, #6
 80077fa:	6063      	str	r3, [r4, #4]
 80077fc:	2300      	movs	r3, #0
 80077fe:	9303      	str	r3, [sp, #12]
 8007800:	ab08      	add	r3, sp, #32
 8007802:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007806:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800780a:	ab07      	add	r3, sp, #28
 800780c:	6861      	ldr	r1, [r4, #4]
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	6022      	str	r2, [r4, #0]
 8007812:	f10d 031b 	add.w	r3, sp, #27
 8007816:	4628      	mov	r0, r5
 8007818:	f7ff fef4 	bl	8007604 <__cvt>
 800781c:	9b04      	ldr	r3, [sp, #16]
 800781e:	9907      	ldr	r1, [sp, #28]
 8007820:	2b47      	cmp	r3, #71	; 0x47
 8007822:	4680      	mov	r8, r0
 8007824:	d108      	bne.n	8007838 <_printf_float+0x110>
 8007826:	1cc8      	adds	r0, r1, #3
 8007828:	db02      	blt.n	8007830 <_printf_float+0x108>
 800782a:	6863      	ldr	r3, [r4, #4]
 800782c:	4299      	cmp	r1, r3
 800782e:	dd41      	ble.n	80078b4 <_printf_float+0x18c>
 8007830:	f1a9 0902 	sub.w	r9, r9, #2
 8007834:	fa5f f989 	uxtb.w	r9, r9
 8007838:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800783c:	d820      	bhi.n	8007880 <_printf_float+0x158>
 800783e:	3901      	subs	r1, #1
 8007840:	464a      	mov	r2, r9
 8007842:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007846:	9107      	str	r1, [sp, #28]
 8007848:	f7ff ff2e 	bl	80076a8 <__exponent>
 800784c:	9a08      	ldr	r2, [sp, #32]
 800784e:	9004      	str	r0, [sp, #16]
 8007850:	1813      	adds	r3, r2, r0
 8007852:	2a01      	cmp	r2, #1
 8007854:	6123      	str	r3, [r4, #16]
 8007856:	dc02      	bgt.n	800785e <_printf_float+0x136>
 8007858:	6822      	ldr	r2, [r4, #0]
 800785a:	07d2      	lsls	r2, r2, #31
 800785c:	d501      	bpl.n	8007862 <_printf_float+0x13a>
 800785e:	3301      	adds	r3, #1
 8007860:	6123      	str	r3, [r4, #16]
 8007862:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0a2      	beq.n	80077b0 <_printf_float+0x88>
 800786a:	232d      	movs	r3, #45	; 0x2d
 800786c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007870:	e79e      	b.n	80077b0 <_printf_float+0x88>
 8007872:	9904      	ldr	r1, [sp, #16]
 8007874:	2947      	cmp	r1, #71	; 0x47
 8007876:	d1c1      	bne.n	80077fc <_printf_float+0xd4>
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1bf      	bne.n	80077fc <_printf_float+0xd4>
 800787c:	2301      	movs	r3, #1
 800787e:	e7bc      	b.n	80077fa <_printf_float+0xd2>
 8007880:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007884:	d118      	bne.n	80078b8 <_printf_float+0x190>
 8007886:	2900      	cmp	r1, #0
 8007888:	6863      	ldr	r3, [r4, #4]
 800788a:	dd0b      	ble.n	80078a4 <_printf_float+0x17c>
 800788c:	6121      	str	r1, [r4, #16]
 800788e:	b913      	cbnz	r3, 8007896 <_printf_float+0x16e>
 8007890:	6822      	ldr	r2, [r4, #0]
 8007892:	07d0      	lsls	r0, r2, #31
 8007894:	d502      	bpl.n	800789c <_printf_float+0x174>
 8007896:	3301      	adds	r3, #1
 8007898:	440b      	add	r3, r1
 800789a:	6123      	str	r3, [r4, #16]
 800789c:	2300      	movs	r3, #0
 800789e:	65a1      	str	r1, [r4, #88]	; 0x58
 80078a0:	9304      	str	r3, [sp, #16]
 80078a2:	e7de      	b.n	8007862 <_printf_float+0x13a>
 80078a4:	b913      	cbnz	r3, 80078ac <_printf_float+0x184>
 80078a6:	6822      	ldr	r2, [r4, #0]
 80078a8:	07d2      	lsls	r2, r2, #31
 80078aa:	d501      	bpl.n	80078b0 <_printf_float+0x188>
 80078ac:	3302      	adds	r3, #2
 80078ae:	e7f4      	b.n	800789a <_printf_float+0x172>
 80078b0:	2301      	movs	r3, #1
 80078b2:	e7f2      	b.n	800789a <_printf_float+0x172>
 80078b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80078b8:	9b08      	ldr	r3, [sp, #32]
 80078ba:	4299      	cmp	r1, r3
 80078bc:	db05      	blt.n	80078ca <_printf_float+0x1a2>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	6121      	str	r1, [r4, #16]
 80078c2:	07d8      	lsls	r0, r3, #31
 80078c4:	d5ea      	bpl.n	800789c <_printf_float+0x174>
 80078c6:	1c4b      	adds	r3, r1, #1
 80078c8:	e7e7      	b.n	800789a <_printf_float+0x172>
 80078ca:	2900      	cmp	r1, #0
 80078cc:	bfd4      	ite	le
 80078ce:	f1c1 0202 	rsble	r2, r1, #2
 80078d2:	2201      	movgt	r2, #1
 80078d4:	4413      	add	r3, r2
 80078d6:	e7e0      	b.n	800789a <_printf_float+0x172>
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	055a      	lsls	r2, r3, #21
 80078dc:	d407      	bmi.n	80078ee <_printf_float+0x1c6>
 80078de:	6923      	ldr	r3, [r4, #16]
 80078e0:	4642      	mov	r2, r8
 80078e2:	4631      	mov	r1, r6
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b8      	blx	r7
 80078e8:	3001      	adds	r0, #1
 80078ea:	d12a      	bne.n	8007942 <_printf_float+0x21a>
 80078ec:	e76a      	b.n	80077c4 <_printf_float+0x9c>
 80078ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80078f2:	f240 80e2 	bls.w	8007aba <_printf_float+0x392>
 80078f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80078fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80078fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007902:	d133      	bne.n	800796c <_printf_float+0x244>
 8007904:	4a38      	ldr	r2, [pc, #224]	; (80079e8 <_printf_float+0x2c0>)
 8007906:	2301      	movs	r3, #1
 8007908:	4631      	mov	r1, r6
 800790a:	4628      	mov	r0, r5
 800790c:	47b8      	blx	r7
 800790e:	3001      	adds	r0, #1
 8007910:	f43f af58 	beq.w	80077c4 <_printf_float+0x9c>
 8007914:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007918:	429a      	cmp	r2, r3
 800791a:	db02      	blt.n	8007922 <_printf_float+0x1fa>
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	07d8      	lsls	r0, r3, #31
 8007920:	d50f      	bpl.n	8007942 <_printf_float+0x21a>
 8007922:	4653      	mov	r3, sl
 8007924:	465a      	mov	r2, fp
 8007926:	4631      	mov	r1, r6
 8007928:	4628      	mov	r0, r5
 800792a:	47b8      	blx	r7
 800792c:	3001      	adds	r0, #1
 800792e:	f43f af49 	beq.w	80077c4 <_printf_float+0x9c>
 8007932:	f04f 0800 	mov.w	r8, #0
 8007936:	f104 091a 	add.w	r9, r4, #26
 800793a:	9b08      	ldr	r3, [sp, #32]
 800793c:	3b01      	subs	r3, #1
 800793e:	4543      	cmp	r3, r8
 8007940:	dc09      	bgt.n	8007956 <_printf_float+0x22e>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	079b      	lsls	r3, r3, #30
 8007946:	f100 8108 	bmi.w	8007b5a <_printf_float+0x432>
 800794a:	68e0      	ldr	r0, [r4, #12]
 800794c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800794e:	4298      	cmp	r0, r3
 8007950:	bfb8      	it	lt
 8007952:	4618      	movlt	r0, r3
 8007954:	e738      	b.n	80077c8 <_printf_float+0xa0>
 8007956:	2301      	movs	r3, #1
 8007958:	464a      	mov	r2, r9
 800795a:	4631      	mov	r1, r6
 800795c:	4628      	mov	r0, r5
 800795e:	47b8      	blx	r7
 8007960:	3001      	adds	r0, #1
 8007962:	f43f af2f 	beq.w	80077c4 <_printf_float+0x9c>
 8007966:	f108 0801 	add.w	r8, r8, #1
 800796a:	e7e6      	b.n	800793a <_printf_float+0x212>
 800796c:	9b07      	ldr	r3, [sp, #28]
 800796e:	2b00      	cmp	r3, #0
 8007970:	dc3c      	bgt.n	80079ec <_printf_float+0x2c4>
 8007972:	4a1d      	ldr	r2, [pc, #116]	; (80079e8 <_printf_float+0x2c0>)
 8007974:	2301      	movs	r3, #1
 8007976:	4631      	mov	r1, r6
 8007978:	4628      	mov	r0, r5
 800797a:	47b8      	blx	r7
 800797c:	3001      	adds	r0, #1
 800797e:	f43f af21 	beq.w	80077c4 <_printf_float+0x9c>
 8007982:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007986:	4313      	orrs	r3, r2
 8007988:	d102      	bne.n	8007990 <_printf_float+0x268>
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	07d9      	lsls	r1, r3, #31
 800798e:	d5d8      	bpl.n	8007942 <_printf_float+0x21a>
 8007990:	4653      	mov	r3, sl
 8007992:	465a      	mov	r2, fp
 8007994:	4631      	mov	r1, r6
 8007996:	4628      	mov	r0, r5
 8007998:	47b8      	blx	r7
 800799a:	3001      	adds	r0, #1
 800799c:	f43f af12 	beq.w	80077c4 <_printf_float+0x9c>
 80079a0:	f04f 0900 	mov.w	r9, #0
 80079a4:	f104 0a1a 	add.w	sl, r4, #26
 80079a8:	9b07      	ldr	r3, [sp, #28]
 80079aa:	425b      	negs	r3, r3
 80079ac:	454b      	cmp	r3, r9
 80079ae:	dc01      	bgt.n	80079b4 <_printf_float+0x28c>
 80079b0:	9b08      	ldr	r3, [sp, #32]
 80079b2:	e795      	b.n	80078e0 <_printf_float+0x1b8>
 80079b4:	2301      	movs	r3, #1
 80079b6:	4652      	mov	r2, sl
 80079b8:	4631      	mov	r1, r6
 80079ba:	4628      	mov	r0, r5
 80079bc:	47b8      	blx	r7
 80079be:	3001      	adds	r0, #1
 80079c0:	f43f af00 	beq.w	80077c4 <_printf_float+0x9c>
 80079c4:	f109 0901 	add.w	r9, r9, #1
 80079c8:	e7ee      	b.n	80079a8 <_printf_float+0x280>
 80079ca:	bf00      	nop
 80079cc:	f3af 8000 	nop.w
 80079d0:	ffffffff 	.word	0xffffffff
 80079d4:	7fefffff 	.word	0x7fefffff
 80079d8:	0800bd74 	.word	0x0800bd74
 80079dc:	0800bd78 	.word	0x0800bd78
 80079e0:	0800bd80 	.word	0x0800bd80
 80079e4:	0800bd7c 	.word	0x0800bd7c
 80079e8:	0800bd84 	.word	0x0800bd84
 80079ec:	9a08      	ldr	r2, [sp, #32]
 80079ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079f0:	429a      	cmp	r2, r3
 80079f2:	bfa8      	it	ge
 80079f4:	461a      	movge	r2, r3
 80079f6:	2a00      	cmp	r2, #0
 80079f8:	4691      	mov	r9, r2
 80079fa:	dc38      	bgt.n	8007a6e <_printf_float+0x346>
 80079fc:	2300      	movs	r3, #0
 80079fe:	9305      	str	r3, [sp, #20]
 8007a00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a04:	f104 021a 	add.w	r2, r4, #26
 8007a08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a0a:	9905      	ldr	r1, [sp, #20]
 8007a0c:	9304      	str	r3, [sp, #16]
 8007a0e:	eba3 0309 	sub.w	r3, r3, r9
 8007a12:	428b      	cmp	r3, r1
 8007a14:	dc33      	bgt.n	8007a7e <_printf_float+0x356>
 8007a16:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	db3c      	blt.n	8007a98 <_printf_float+0x370>
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	07da      	lsls	r2, r3, #31
 8007a22:	d439      	bmi.n	8007a98 <_printf_float+0x370>
 8007a24:	9b08      	ldr	r3, [sp, #32]
 8007a26:	9a04      	ldr	r2, [sp, #16]
 8007a28:	9907      	ldr	r1, [sp, #28]
 8007a2a:	1a9a      	subs	r2, r3, r2
 8007a2c:	eba3 0901 	sub.w	r9, r3, r1
 8007a30:	4591      	cmp	r9, r2
 8007a32:	bfa8      	it	ge
 8007a34:	4691      	movge	r9, r2
 8007a36:	f1b9 0f00 	cmp.w	r9, #0
 8007a3a:	dc35      	bgt.n	8007aa8 <_printf_float+0x380>
 8007a3c:	f04f 0800 	mov.w	r8, #0
 8007a40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a44:	f104 0a1a 	add.w	sl, r4, #26
 8007a48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a4c:	1a9b      	subs	r3, r3, r2
 8007a4e:	eba3 0309 	sub.w	r3, r3, r9
 8007a52:	4543      	cmp	r3, r8
 8007a54:	f77f af75 	ble.w	8007942 <_printf_float+0x21a>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	4652      	mov	r2, sl
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4628      	mov	r0, r5
 8007a60:	47b8      	blx	r7
 8007a62:	3001      	adds	r0, #1
 8007a64:	f43f aeae 	beq.w	80077c4 <_printf_float+0x9c>
 8007a68:	f108 0801 	add.w	r8, r8, #1
 8007a6c:	e7ec      	b.n	8007a48 <_printf_float+0x320>
 8007a6e:	4613      	mov	r3, r2
 8007a70:	4631      	mov	r1, r6
 8007a72:	4642      	mov	r2, r8
 8007a74:	4628      	mov	r0, r5
 8007a76:	47b8      	blx	r7
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d1bf      	bne.n	80079fc <_printf_float+0x2d4>
 8007a7c:	e6a2      	b.n	80077c4 <_printf_float+0x9c>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	4631      	mov	r1, r6
 8007a82:	4628      	mov	r0, r5
 8007a84:	9204      	str	r2, [sp, #16]
 8007a86:	47b8      	blx	r7
 8007a88:	3001      	adds	r0, #1
 8007a8a:	f43f ae9b 	beq.w	80077c4 <_printf_float+0x9c>
 8007a8e:	9b05      	ldr	r3, [sp, #20]
 8007a90:	9a04      	ldr	r2, [sp, #16]
 8007a92:	3301      	adds	r3, #1
 8007a94:	9305      	str	r3, [sp, #20]
 8007a96:	e7b7      	b.n	8007a08 <_printf_float+0x2e0>
 8007a98:	4653      	mov	r3, sl
 8007a9a:	465a      	mov	r2, fp
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	47b8      	blx	r7
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	d1be      	bne.n	8007a24 <_printf_float+0x2fc>
 8007aa6:	e68d      	b.n	80077c4 <_printf_float+0x9c>
 8007aa8:	9a04      	ldr	r2, [sp, #16]
 8007aaa:	464b      	mov	r3, r9
 8007aac:	4442      	add	r2, r8
 8007aae:	4631      	mov	r1, r6
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	47b8      	blx	r7
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d1c1      	bne.n	8007a3c <_printf_float+0x314>
 8007ab8:	e684      	b.n	80077c4 <_printf_float+0x9c>
 8007aba:	9a08      	ldr	r2, [sp, #32]
 8007abc:	2a01      	cmp	r2, #1
 8007abe:	dc01      	bgt.n	8007ac4 <_printf_float+0x39c>
 8007ac0:	07db      	lsls	r3, r3, #31
 8007ac2:	d537      	bpl.n	8007b34 <_printf_float+0x40c>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	4642      	mov	r2, r8
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4628      	mov	r0, r5
 8007acc:	47b8      	blx	r7
 8007ace:	3001      	adds	r0, #1
 8007ad0:	f43f ae78 	beq.w	80077c4 <_printf_float+0x9c>
 8007ad4:	4653      	mov	r3, sl
 8007ad6:	465a      	mov	r2, fp
 8007ad8:	4631      	mov	r1, r6
 8007ada:	4628      	mov	r0, r5
 8007adc:	47b8      	blx	r7
 8007ade:	3001      	adds	r0, #1
 8007ae0:	f43f ae70 	beq.w	80077c4 <_printf_float+0x9c>
 8007ae4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007ae8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af0:	d01b      	beq.n	8007b2a <_printf_float+0x402>
 8007af2:	9b08      	ldr	r3, [sp, #32]
 8007af4:	f108 0201 	add.w	r2, r8, #1
 8007af8:	3b01      	subs	r3, #1
 8007afa:	4631      	mov	r1, r6
 8007afc:	4628      	mov	r0, r5
 8007afe:	47b8      	blx	r7
 8007b00:	3001      	adds	r0, #1
 8007b02:	d10e      	bne.n	8007b22 <_printf_float+0x3fa>
 8007b04:	e65e      	b.n	80077c4 <_printf_float+0x9c>
 8007b06:	2301      	movs	r3, #1
 8007b08:	464a      	mov	r2, r9
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	47b8      	blx	r7
 8007b10:	3001      	adds	r0, #1
 8007b12:	f43f ae57 	beq.w	80077c4 <_printf_float+0x9c>
 8007b16:	f108 0801 	add.w	r8, r8, #1
 8007b1a:	9b08      	ldr	r3, [sp, #32]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	4543      	cmp	r3, r8
 8007b20:	dcf1      	bgt.n	8007b06 <_printf_float+0x3de>
 8007b22:	9b04      	ldr	r3, [sp, #16]
 8007b24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b28:	e6db      	b.n	80078e2 <_printf_float+0x1ba>
 8007b2a:	f04f 0800 	mov.w	r8, #0
 8007b2e:	f104 091a 	add.w	r9, r4, #26
 8007b32:	e7f2      	b.n	8007b1a <_printf_float+0x3f2>
 8007b34:	2301      	movs	r3, #1
 8007b36:	4642      	mov	r2, r8
 8007b38:	e7df      	b.n	8007afa <_printf_float+0x3d2>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	464a      	mov	r2, r9
 8007b3e:	4631      	mov	r1, r6
 8007b40:	4628      	mov	r0, r5
 8007b42:	47b8      	blx	r7
 8007b44:	3001      	adds	r0, #1
 8007b46:	f43f ae3d 	beq.w	80077c4 <_printf_float+0x9c>
 8007b4a:	f108 0801 	add.w	r8, r8, #1
 8007b4e:	68e3      	ldr	r3, [r4, #12]
 8007b50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b52:	1a5b      	subs	r3, r3, r1
 8007b54:	4543      	cmp	r3, r8
 8007b56:	dcf0      	bgt.n	8007b3a <_printf_float+0x412>
 8007b58:	e6f7      	b.n	800794a <_printf_float+0x222>
 8007b5a:	f04f 0800 	mov.w	r8, #0
 8007b5e:	f104 0919 	add.w	r9, r4, #25
 8007b62:	e7f4      	b.n	8007b4e <_printf_float+0x426>

08007b64 <_printf_common>:
 8007b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b68:	4616      	mov	r6, r2
 8007b6a:	4699      	mov	r9, r3
 8007b6c:	688a      	ldr	r2, [r1, #8]
 8007b6e:	690b      	ldr	r3, [r1, #16]
 8007b70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b74:	4293      	cmp	r3, r2
 8007b76:	bfb8      	it	lt
 8007b78:	4613      	movlt	r3, r2
 8007b7a:	6033      	str	r3, [r6, #0]
 8007b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b80:	4607      	mov	r7, r0
 8007b82:	460c      	mov	r4, r1
 8007b84:	b10a      	cbz	r2, 8007b8a <_printf_common+0x26>
 8007b86:	3301      	adds	r3, #1
 8007b88:	6033      	str	r3, [r6, #0]
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	0699      	lsls	r1, r3, #26
 8007b8e:	bf42      	ittt	mi
 8007b90:	6833      	ldrmi	r3, [r6, #0]
 8007b92:	3302      	addmi	r3, #2
 8007b94:	6033      	strmi	r3, [r6, #0]
 8007b96:	6825      	ldr	r5, [r4, #0]
 8007b98:	f015 0506 	ands.w	r5, r5, #6
 8007b9c:	d106      	bne.n	8007bac <_printf_common+0x48>
 8007b9e:	f104 0a19 	add.w	sl, r4, #25
 8007ba2:	68e3      	ldr	r3, [r4, #12]
 8007ba4:	6832      	ldr	r2, [r6, #0]
 8007ba6:	1a9b      	subs	r3, r3, r2
 8007ba8:	42ab      	cmp	r3, r5
 8007baa:	dc26      	bgt.n	8007bfa <_printf_common+0x96>
 8007bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bb0:	1e13      	subs	r3, r2, #0
 8007bb2:	6822      	ldr	r2, [r4, #0]
 8007bb4:	bf18      	it	ne
 8007bb6:	2301      	movne	r3, #1
 8007bb8:	0692      	lsls	r2, r2, #26
 8007bba:	d42b      	bmi.n	8007c14 <_printf_common+0xb0>
 8007bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	47c0      	blx	r8
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	d01e      	beq.n	8007c08 <_printf_common+0xa4>
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	68e5      	ldr	r5, [r4, #12]
 8007bce:	6832      	ldr	r2, [r6, #0]
 8007bd0:	f003 0306 	and.w	r3, r3, #6
 8007bd4:	2b04      	cmp	r3, #4
 8007bd6:	bf08      	it	eq
 8007bd8:	1aad      	subeq	r5, r5, r2
 8007bda:	68a3      	ldr	r3, [r4, #8]
 8007bdc:	6922      	ldr	r2, [r4, #16]
 8007bde:	bf0c      	ite	eq
 8007be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007be4:	2500      	movne	r5, #0
 8007be6:	4293      	cmp	r3, r2
 8007be8:	bfc4      	itt	gt
 8007bea:	1a9b      	subgt	r3, r3, r2
 8007bec:	18ed      	addgt	r5, r5, r3
 8007bee:	2600      	movs	r6, #0
 8007bf0:	341a      	adds	r4, #26
 8007bf2:	42b5      	cmp	r5, r6
 8007bf4:	d11a      	bne.n	8007c2c <_printf_common+0xc8>
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	e008      	b.n	8007c0c <_printf_common+0xa8>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4652      	mov	r2, sl
 8007bfe:	4649      	mov	r1, r9
 8007c00:	4638      	mov	r0, r7
 8007c02:	47c0      	blx	r8
 8007c04:	3001      	adds	r0, #1
 8007c06:	d103      	bne.n	8007c10 <_printf_common+0xac>
 8007c08:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c10:	3501      	adds	r5, #1
 8007c12:	e7c6      	b.n	8007ba2 <_printf_common+0x3e>
 8007c14:	18e1      	adds	r1, r4, r3
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	2030      	movs	r0, #48	; 0x30
 8007c1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c1e:	4422      	add	r2, r4
 8007c20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c28:	3302      	adds	r3, #2
 8007c2a:	e7c7      	b.n	8007bbc <_printf_common+0x58>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	4622      	mov	r2, r4
 8007c30:	4649      	mov	r1, r9
 8007c32:	4638      	mov	r0, r7
 8007c34:	47c0      	blx	r8
 8007c36:	3001      	adds	r0, #1
 8007c38:	d0e6      	beq.n	8007c08 <_printf_common+0xa4>
 8007c3a:	3601      	adds	r6, #1
 8007c3c:	e7d9      	b.n	8007bf2 <_printf_common+0x8e>
	...

08007c40 <_printf_i>:
 8007c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c44:	7e0f      	ldrb	r7, [r1, #24]
 8007c46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c48:	2f78      	cmp	r7, #120	; 0x78
 8007c4a:	4691      	mov	r9, r2
 8007c4c:	4680      	mov	r8, r0
 8007c4e:	460c      	mov	r4, r1
 8007c50:	469a      	mov	sl, r3
 8007c52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c56:	d807      	bhi.n	8007c68 <_printf_i+0x28>
 8007c58:	2f62      	cmp	r7, #98	; 0x62
 8007c5a:	d80a      	bhi.n	8007c72 <_printf_i+0x32>
 8007c5c:	2f00      	cmp	r7, #0
 8007c5e:	f000 80d8 	beq.w	8007e12 <_printf_i+0x1d2>
 8007c62:	2f58      	cmp	r7, #88	; 0x58
 8007c64:	f000 80a3 	beq.w	8007dae <_printf_i+0x16e>
 8007c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c70:	e03a      	b.n	8007ce8 <_printf_i+0xa8>
 8007c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c76:	2b15      	cmp	r3, #21
 8007c78:	d8f6      	bhi.n	8007c68 <_printf_i+0x28>
 8007c7a:	a101      	add	r1, pc, #4	; (adr r1, 8007c80 <_printf_i+0x40>)
 8007c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c80:	08007cd9 	.word	0x08007cd9
 8007c84:	08007ced 	.word	0x08007ced
 8007c88:	08007c69 	.word	0x08007c69
 8007c8c:	08007c69 	.word	0x08007c69
 8007c90:	08007c69 	.word	0x08007c69
 8007c94:	08007c69 	.word	0x08007c69
 8007c98:	08007ced 	.word	0x08007ced
 8007c9c:	08007c69 	.word	0x08007c69
 8007ca0:	08007c69 	.word	0x08007c69
 8007ca4:	08007c69 	.word	0x08007c69
 8007ca8:	08007c69 	.word	0x08007c69
 8007cac:	08007df9 	.word	0x08007df9
 8007cb0:	08007d1d 	.word	0x08007d1d
 8007cb4:	08007ddb 	.word	0x08007ddb
 8007cb8:	08007c69 	.word	0x08007c69
 8007cbc:	08007c69 	.word	0x08007c69
 8007cc0:	08007e1b 	.word	0x08007e1b
 8007cc4:	08007c69 	.word	0x08007c69
 8007cc8:	08007d1d 	.word	0x08007d1d
 8007ccc:	08007c69 	.word	0x08007c69
 8007cd0:	08007c69 	.word	0x08007c69
 8007cd4:	08007de3 	.word	0x08007de3
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	1d1a      	adds	r2, r3, #4
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	602a      	str	r2, [r5, #0]
 8007ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e0a3      	b.n	8007e34 <_printf_i+0x1f4>
 8007cec:	6820      	ldr	r0, [r4, #0]
 8007cee:	6829      	ldr	r1, [r5, #0]
 8007cf0:	0606      	lsls	r6, r0, #24
 8007cf2:	f101 0304 	add.w	r3, r1, #4
 8007cf6:	d50a      	bpl.n	8007d0e <_printf_i+0xce>
 8007cf8:	680e      	ldr	r6, [r1, #0]
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	2e00      	cmp	r6, #0
 8007cfe:	da03      	bge.n	8007d08 <_printf_i+0xc8>
 8007d00:	232d      	movs	r3, #45	; 0x2d
 8007d02:	4276      	negs	r6, r6
 8007d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d08:	485e      	ldr	r0, [pc, #376]	; (8007e84 <_printf_i+0x244>)
 8007d0a:	230a      	movs	r3, #10
 8007d0c:	e019      	b.n	8007d42 <_printf_i+0x102>
 8007d0e:	680e      	ldr	r6, [r1, #0]
 8007d10:	602b      	str	r3, [r5, #0]
 8007d12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d16:	bf18      	it	ne
 8007d18:	b236      	sxthne	r6, r6
 8007d1a:	e7ef      	b.n	8007cfc <_printf_i+0xbc>
 8007d1c:	682b      	ldr	r3, [r5, #0]
 8007d1e:	6820      	ldr	r0, [r4, #0]
 8007d20:	1d19      	adds	r1, r3, #4
 8007d22:	6029      	str	r1, [r5, #0]
 8007d24:	0601      	lsls	r1, r0, #24
 8007d26:	d501      	bpl.n	8007d2c <_printf_i+0xec>
 8007d28:	681e      	ldr	r6, [r3, #0]
 8007d2a:	e002      	b.n	8007d32 <_printf_i+0xf2>
 8007d2c:	0646      	lsls	r6, r0, #25
 8007d2e:	d5fb      	bpl.n	8007d28 <_printf_i+0xe8>
 8007d30:	881e      	ldrh	r6, [r3, #0]
 8007d32:	4854      	ldr	r0, [pc, #336]	; (8007e84 <_printf_i+0x244>)
 8007d34:	2f6f      	cmp	r7, #111	; 0x6f
 8007d36:	bf0c      	ite	eq
 8007d38:	2308      	moveq	r3, #8
 8007d3a:	230a      	movne	r3, #10
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d42:	6865      	ldr	r5, [r4, #4]
 8007d44:	60a5      	str	r5, [r4, #8]
 8007d46:	2d00      	cmp	r5, #0
 8007d48:	bfa2      	ittt	ge
 8007d4a:	6821      	ldrge	r1, [r4, #0]
 8007d4c:	f021 0104 	bicge.w	r1, r1, #4
 8007d50:	6021      	strge	r1, [r4, #0]
 8007d52:	b90e      	cbnz	r6, 8007d58 <_printf_i+0x118>
 8007d54:	2d00      	cmp	r5, #0
 8007d56:	d04d      	beq.n	8007df4 <_printf_i+0x1b4>
 8007d58:	4615      	mov	r5, r2
 8007d5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d5e:	fb03 6711 	mls	r7, r3, r1, r6
 8007d62:	5dc7      	ldrb	r7, [r0, r7]
 8007d64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d68:	4637      	mov	r7, r6
 8007d6a:	42bb      	cmp	r3, r7
 8007d6c:	460e      	mov	r6, r1
 8007d6e:	d9f4      	bls.n	8007d5a <_printf_i+0x11a>
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d10b      	bne.n	8007d8c <_printf_i+0x14c>
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	07de      	lsls	r6, r3, #31
 8007d78:	d508      	bpl.n	8007d8c <_printf_i+0x14c>
 8007d7a:	6923      	ldr	r3, [r4, #16]
 8007d7c:	6861      	ldr	r1, [r4, #4]
 8007d7e:	4299      	cmp	r1, r3
 8007d80:	bfde      	ittt	le
 8007d82:	2330      	movle	r3, #48	; 0x30
 8007d84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d8c:	1b52      	subs	r2, r2, r5
 8007d8e:	6122      	str	r2, [r4, #16]
 8007d90:	f8cd a000 	str.w	sl, [sp]
 8007d94:	464b      	mov	r3, r9
 8007d96:	aa03      	add	r2, sp, #12
 8007d98:	4621      	mov	r1, r4
 8007d9a:	4640      	mov	r0, r8
 8007d9c:	f7ff fee2 	bl	8007b64 <_printf_common>
 8007da0:	3001      	adds	r0, #1
 8007da2:	d14c      	bne.n	8007e3e <_printf_i+0x1fe>
 8007da4:	f04f 30ff 	mov.w	r0, #4294967295
 8007da8:	b004      	add	sp, #16
 8007daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dae:	4835      	ldr	r0, [pc, #212]	; (8007e84 <_printf_i+0x244>)
 8007db0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007db4:	6829      	ldr	r1, [r5, #0]
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007dbc:	6029      	str	r1, [r5, #0]
 8007dbe:	061d      	lsls	r5, r3, #24
 8007dc0:	d514      	bpl.n	8007dec <_printf_i+0x1ac>
 8007dc2:	07df      	lsls	r7, r3, #31
 8007dc4:	bf44      	itt	mi
 8007dc6:	f043 0320 	orrmi.w	r3, r3, #32
 8007dca:	6023      	strmi	r3, [r4, #0]
 8007dcc:	b91e      	cbnz	r6, 8007dd6 <_printf_i+0x196>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	f023 0320 	bic.w	r3, r3, #32
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	2310      	movs	r3, #16
 8007dd8:	e7b0      	b.n	8007d3c <_printf_i+0xfc>
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	f043 0320 	orr.w	r3, r3, #32
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	2378      	movs	r3, #120	; 0x78
 8007de4:	4828      	ldr	r0, [pc, #160]	; (8007e88 <_printf_i+0x248>)
 8007de6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dea:	e7e3      	b.n	8007db4 <_printf_i+0x174>
 8007dec:	0659      	lsls	r1, r3, #25
 8007dee:	bf48      	it	mi
 8007df0:	b2b6      	uxthmi	r6, r6
 8007df2:	e7e6      	b.n	8007dc2 <_printf_i+0x182>
 8007df4:	4615      	mov	r5, r2
 8007df6:	e7bb      	b.n	8007d70 <_printf_i+0x130>
 8007df8:	682b      	ldr	r3, [r5, #0]
 8007dfa:	6826      	ldr	r6, [r4, #0]
 8007dfc:	6961      	ldr	r1, [r4, #20]
 8007dfe:	1d18      	adds	r0, r3, #4
 8007e00:	6028      	str	r0, [r5, #0]
 8007e02:	0635      	lsls	r5, r6, #24
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	d501      	bpl.n	8007e0c <_printf_i+0x1cc>
 8007e08:	6019      	str	r1, [r3, #0]
 8007e0a:	e002      	b.n	8007e12 <_printf_i+0x1d2>
 8007e0c:	0670      	lsls	r0, r6, #25
 8007e0e:	d5fb      	bpl.n	8007e08 <_printf_i+0x1c8>
 8007e10:	8019      	strh	r1, [r3, #0]
 8007e12:	2300      	movs	r3, #0
 8007e14:	6123      	str	r3, [r4, #16]
 8007e16:	4615      	mov	r5, r2
 8007e18:	e7ba      	b.n	8007d90 <_printf_i+0x150>
 8007e1a:	682b      	ldr	r3, [r5, #0]
 8007e1c:	1d1a      	adds	r2, r3, #4
 8007e1e:	602a      	str	r2, [r5, #0]
 8007e20:	681d      	ldr	r5, [r3, #0]
 8007e22:	6862      	ldr	r2, [r4, #4]
 8007e24:	2100      	movs	r1, #0
 8007e26:	4628      	mov	r0, r5
 8007e28:	f7f8 fa12 	bl	8000250 <memchr>
 8007e2c:	b108      	cbz	r0, 8007e32 <_printf_i+0x1f2>
 8007e2e:	1b40      	subs	r0, r0, r5
 8007e30:	6060      	str	r0, [r4, #4]
 8007e32:	6863      	ldr	r3, [r4, #4]
 8007e34:	6123      	str	r3, [r4, #16]
 8007e36:	2300      	movs	r3, #0
 8007e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e3c:	e7a8      	b.n	8007d90 <_printf_i+0x150>
 8007e3e:	6923      	ldr	r3, [r4, #16]
 8007e40:	462a      	mov	r2, r5
 8007e42:	4649      	mov	r1, r9
 8007e44:	4640      	mov	r0, r8
 8007e46:	47d0      	blx	sl
 8007e48:	3001      	adds	r0, #1
 8007e4a:	d0ab      	beq.n	8007da4 <_printf_i+0x164>
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	079b      	lsls	r3, r3, #30
 8007e50:	d413      	bmi.n	8007e7a <_printf_i+0x23a>
 8007e52:	68e0      	ldr	r0, [r4, #12]
 8007e54:	9b03      	ldr	r3, [sp, #12]
 8007e56:	4298      	cmp	r0, r3
 8007e58:	bfb8      	it	lt
 8007e5a:	4618      	movlt	r0, r3
 8007e5c:	e7a4      	b.n	8007da8 <_printf_i+0x168>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	4632      	mov	r2, r6
 8007e62:	4649      	mov	r1, r9
 8007e64:	4640      	mov	r0, r8
 8007e66:	47d0      	blx	sl
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d09b      	beq.n	8007da4 <_printf_i+0x164>
 8007e6c:	3501      	adds	r5, #1
 8007e6e:	68e3      	ldr	r3, [r4, #12]
 8007e70:	9903      	ldr	r1, [sp, #12]
 8007e72:	1a5b      	subs	r3, r3, r1
 8007e74:	42ab      	cmp	r3, r5
 8007e76:	dcf2      	bgt.n	8007e5e <_printf_i+0x21e>
 8007e78:	e7eb      	b.n	8007e52 <_printf_i+0x212>
 8007e7a:	2500      	movs	r5, #0
 8007e7c:	f104 0619 	add.w	r6, r4, #25
 8007e80:	e7f5      	b.n	8007e6e <_printf_i+0x22e>
 8007e82:	bf00      	nop
 8007e84:	0800bd86 	.word	0x0800bd86
 8007e88:	0800bd97 	.word	0x0800bd97

08007e8c <_scanf_float>:
 8007e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e90:	b087      	sub	sp, #28
 8007e92:	4617      	mov	r7, r2
 8007e94:	9303      	str	r3, [sp, #12]
 8007e96:	688b      	ldr	r3, [r1, #8]
 8007e98:	1e5a      	subs	r2, r3, #1
 8007e9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007e9e:	bf83      	ittte	hi
 8007ea0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007ea4:	195b      	addhi	r3, r3, r5
 8007ea6:	9302      	strhi	r3, [sp, #8]
 8007ea8:	2300      	movls	r3, #0
 8007eaa:	bf86      	itte	hi
 8007eac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007eb0:	608b      	strhi	r3, [r1, #8]
 8007eb2:	9302      	strls	r3, [sp, #8]
 8007eb4:	680b      	ldr	r3, [r1, #0]
 8007eb6:	468b      	mov	fp, r1
 8007eb8:	2500      	movs	r5, #0
 8007eba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007ebe:	f84b 3b1c 	str.w	r3, [fp], #28
 8007ec2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007ec6:	4680      	mov	r8, r0
 8007ec8:	460c      	mov	r4, r1
 8007eca:	465e      	mov	r6, fp
 8007ecc:	46aa      	mov	sl, r5
 8007ece:	46a9      	mov	r9, r5
 8007ed0:	9501      	str	r5, [sp, #4]
 8007ed2:	68a2      	ldr	r2, [r4, #8]
 8007ed4:	b152      	cbz	r2, 8007eec <_scanf_float+0x60>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b4e      	cmp	r3, #78	; 0x4e
 8007edc:	d864      	bhi.n	8007fa8 <_scanf_float+0x11c>
 8007ede:	2b40      	cmp	r3, #64	; 0x40
 8007ee0:	d83c      	bhi.n	8007f5c <_scanf_float+0xd0>
 8007ee2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007ee6:	b2c8      	uxtb	r0, r1
 8007ee8:	280e      	cmp	r0, #14
 8007eea:	d93a      	bls.n	8007f62 <_scanf_float+0xd6>
 8007eec:	f1b9 0f00 	cmp.w	r9, #0
 8007ef0:	d003      	beq.n	8007efa <_scanf_float+0x6e>
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007efe:	f1ba 0f01 	cmp.w	sl, #1
 8007f02:	f200 8113 	bhi.w	800812c <_scanf_float+0x2a0>
 8007f06:	455e      	cmp	r6, fp
 8007f08:	f200 8105 	bhi.w	8008116 <_scanf_float+0x28a>
 8007f0c:	2501      	movs	r5, #1
 8007f0e:	4628      	mov	r0, r5
 8007f10:	b007      	add	sp, #28
 8007f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f16:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007f1a:	2a0d      	cmp	r2, #13
 8007f1c:	d8e6      	bhi.n	8007eec <_scanf_float+0x60>
 8007f1e:	a101      	add	r1, pc, #4	; (adr r1, 8007f24 <_scanf_float+0x98>)
 8007f20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007f24:	08008063 	.word	0x08008063
 8007f28:	08007eed 	.word	0x08007eed
 8007f2c:	08007eed 	.word	0x08007eed
 8007f30:	08007eed 	.word	0x08007eed
 8007f34:	080080c3 	.word	0x080080c3
 8007f38:	0800809b 	.word	0x0800809b
 8007f3c:	08007eed 	.word	0x08007eed
 8007f40:	08007eed 	.word	0x08007eed
 8007f44:	08008071 	.word	0x08008071
 8007f48:	08007eed 	.word	0x08007eed
 8007f4c:	08007eed 	.word	0x08007eed
 8007f50:	08007eed 	.word	0x08007eed
 8007f54:	08007eed 	.word	0x08007eed
 8007f58:	08008029 	.word	0x08008029
 8007f5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007f60:	e7db      	b.n	8007f1a <_scanf_float+0x8e>
 8007f62:	290e      	cmp	r1, #14
 8007f64:	d8c2      	bhi.n	8007eec <_scanf_float+0x60>
 8007f66:	a001      	add	r0, pc, #4	; (adr r0, 8007f6c <_scanf_float+0xe0>)
 8007f68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007f6c:	0800801b 	.word	0x0800801b
 8007f70:	08007eed 	.word	0x08007eed
 8007f74:	0800801b 	.word	0x0800801b
 8007f78:	080080af 	.word	0x080080af
 8007f7c:	08007eed 	.word	0x08007eed
 8007f80:	08007fc9 	.word	0x08007fc9
 8007f84:	08008005 	.word	0x08008005
 8007f88:	08008005 	.word	0x08008005
 8007f8c:	08008005 	.word	0x08008005
 8007f90:	08008005 	.word	0x08008005
 8007f94:	08008005 	.word	0x08008005
 8007f98:	08008005 	.word	0x08008005
 8007f9c:	08008005 	.word	0x08008005
 8007fa0:	08008005 	.word	0x08008005
 8007fa4:	08008005 	.word	0x08008005
 8007fa8:	2b6e      	cmp	r3, #110	; 0x6e
 8007faa:	d809      	bhi.n	8007fc0 <_scanf_float+0x134>
 8007fac:	2b60      	cmp	r3, #96	; 0x60
 8007fae:	d8b2      	bhi.n	8007f16 <_scanf_float+0x8a>
 8007fb0:	2b54      	cmp	r3, #84	; 0x54
 8007fb2:	d077      	beq.n	80080a4 <_scanf_float+0x218>
 8007fb4:	2b59      	cmp	r3, #89	; 0x59
 8007fb6:	d199      	bne.n	8007eec <_scanf_float+0x60>
 8007fb8:	2d07      	cmp	r5, #7
 8007fba:	d197      	bne.n	8007eec <_scanf_float+0x60>
 8007fbc:	2508      	movs	r5, #8
 8007fbe:	e029      	b.n	8008014 <_scanf_float+0x188>
 8007fc0:	2b74      	cmp	r3, #116	; 0x74
 8007fc2:	d06f      	beq.n	80080a4 <_scanf_float+0x218>
 8007fc4:	2b79      	cmp	r3, #121	; 0x79
 8007fc6:	e7f6      	b.n	8007fb6 <_scanf_float+0x12a>
 8007fc8:	6821      	ldr	r1, [r4, #0]
 8007fca:	05c8      	lsls	r0, r1, #23
 8007fcc:	d51a      	bpl.n	8008004 <_scanf_float+0x178>
 8007fce:	9b02      	ldr	r3, [sp, #8]
 8007fd0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007fd4:	6021      	str	r1, [r4, #0]
 8007fd6:	f109 0901 	add.w	r9, r9, #1
 8007fda:	b11b      	cbz	r3, 8007fe4 <_scanf_float+0x158>
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	3201      	adds	r2, #1
 8007fe0:	9302      	str	r3, [sp, #8]
 8007fe2:	60a2      	str	r2, [r4, #8]
 8007fe4:	68a3      	ldr	r3, [r4, #8]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	60a3      	str	r3, [r4, #8]
 8007fea:	6923      	ldr	r3, [r4, #16]
 8007fec:	3301      	adds	r3, #1
 8007fee:	6123      	str	r3, [r4, #16]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	607b      	str	r3, [r7, #4]
 8007ff8:	f340 8084 	ble.w	8008104 <_scanf_float+0x278>
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	3301      	adds	r3, #1
 8008000:	603b      	str	r3, [r7, #0]
 8008002:	e766      	b.n	8007ed2 <_scanf_float+0x46>
 8008004:	eb1a 0f05 	cmn.w	sl, r5
 8008008:	f47f af70 	bne.w	8007eec <_scanf_float+0x60>
 800800c:	6822      	ldr	r2, [r4, #0]
 800800e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008012:	6022      	str	r2, [r4, #0]
 8008014:	f806 3b01 	strb.w	r3, [r6], #1
 8008018:	e7e4      	b.n	8007fe4 <_scanf_float+0x158>
 800801a:	6822      	ldr	r2, [r4, #0]
 800801c:	0610      	lsls	r0, r2, #24
 800801e:	f57f af65 	bpl.w	8007eec <_scanf_float+0x60>
 8008022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008026:	e7f4      	b.n	8008012 <_scanf_float+0x186>
 8008028:	f1ba 0f00 	cmp.w	sl, #0
 800802c:	d10e      	bne.n	800804c <_scanf_float+0x1c0>
 800802e:	f1b9 0f00 	cmp.w	r9, #0
 8008032:	d10e      	bne.n	8008052 <_scanf_float+0x1c6>
 8008034:	6822      	ldr	r2, [r4, #0]
 8008036:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800803a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800803e:	d108      	bne.n	8008052 <_scanf_float+0x1c6>
 8008040:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008044:	6022      	str	r2, [r4, #0]
 8008046:	f04f 0a01 	mov.w	sl, #1
 800804a:	e7e3      	b.n	8008014 <_scanf_float+0x188>
 800804c:	f1ba 0f02 	cmp.w	sl, #2
 8008050:	d055      	beq.n	80080fe <_scanf_float+0x272>
 8008052:	2d01      	cmp	r5, #1
 8008054:	d002      	beq.n	800805c <_scanf_float+0x1d0>
 8008056:	2d04      	cmp	r5, #4
 8008058:	f47f af48 	bne.w	8007eec <_scanf_float+0x60>
 800805c:	3501      	adds	r5, #1
 800805e:	b2ed      	uxtb	r5, r5
 8008060:	e7d8      	b.n	8008014 <_scanf_float+0x188>
 8008062:	f1ba 0f01 	cmp.w	sl, #1
 8008066:	f47f af41 	bne.w	8007eec <_scanf_float+0x60>
 800806a:	f04f 0a02 	mov.w	sl, #2
 800806e:	e7d1      	b.n	8008014 <_scanf_float+0x188>
 8008070:	b97d      	cbnz	r5, 8008092 <_scanf_float+0x206>
 8008072:	f1b9 0f00 	cmp.w	r9, #0
 8008076:	f47f af3c 	bne.w	8007ef2 <_scanf_float+0x66>
 800807a:	6822      	ldr	r2, [r4, #0]
 800807c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008080:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008084:	f47f af39 	bne.w	8007efa <_scanf_float+0x6e>
 8008088:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800808c:	6022      	str	r2, [r4, #0]
 800808e:	2501      	movs	r5, #1
 8008090:	e7c0      	b.n	8008014 <_scanf_float+0x188>
 8008092:	2d03      	cmp	r5, #3
 8008094:	d0e2      	beq.n	800805c <_scanf_float+0x1d0>
 8008096:	2d05      	cmp	r5, #5
 8008098:	e7de      	b.n	8008058 <_scanf_float+0x1cc>
 800809a:	2d02      	cmp	r5, #2
 800809c:	f47f af26 	bne.w	8007eec <_scanf_float+0x60>
 80080a0:	2503      	movs	r5, #3
 80080a2:	e7b7      	b.n	8008014 <_scanf_float+0x188>
 80080a4:	2d06      	cmp	r5, #6
 80080a6:	f47f af21 	bne.w	8007eec <_scanf_float+0x60>
 80080aa:	2507      	movs	r5, #7
 80080ac:	e7b2      	b.n	8008014 <_scanf_float+0x188>
 80080ae:	6822      	ldr	r2, [r4, #0]
 80080b0:	0591      	lsls	r1, r2, #22
 80080b2:	f57f af1b 	bpl.w	8007eec <_scanf_float+0x60>
 80080b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80080ba:	6022      	str	r2, [r4, #0]
 80080bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80080c0:	e7a8      	b.n	8008014 <_scanf_float+0x188>
 80080c2:	6822      	ldr	r2, [r4, #0]
 80080c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80080c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80080cc:	d006      	beq.n	80080dc <_scanf_float+0x250>
 80080ce:	0550      	lsls	r0, r2, #21
 80080d0:	f57f af0c 	bpl.w	8007eec <_scanf_float+0x60>
 80080d4:	f1b9 0f00 	cmp.w	r9, #0
 80080d8:	f43f af0f 	beq.w	8007efa <_scanf_float+0x6e>
 80080dc:	0591      	lsls	r1, r2, #22
 80080de:	bf58      	it	pl
 80080e0:	9901      	ldrpl	r1, [sp, #4]
 80080e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80080e6:	bf58      	it	pl
 80080e8:	eba9 0101 	subpl.w	r1, r9, r1
 80080ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80080f0:	bf58      	it	pl
 80080f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80080f6:	6022      	str	r2, [r4, #0]
 80080f8:	f04f 0900 	mov.w	r9, #0
 80080fc:	e78a      	b.n	8008014 <_scanf_float+0x188>
 80080fe:	f04f 0a03 	mov.w	sl, #3
 8008102:	e787      	b.n	8008014 <_scanf_float+0x188>
 8008104:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008108:	4639      	mov	r1, r7
 800810a:	4640      	mov	r0, r8
 800810c:	4798      	blx	r3
 800810e:	2800      	cmp	r0, #0
 8008110:	f43f aedf 	beq.w	8007ed2 <_scanf_float+0x46>
 8008114:	e6ea      	b.n	8007eec <_scanf_float+0x60>
 8008116:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800811a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800811e:	463a      	mov	r2, r7
 8008120:	4640      	mov	r0, r8
 8008122:	4798      	blx	r3
 8008124:	6923      	ldr	r3, [r4, #16]
 8008126:	3b01      	subs	r3, #1
 8008128:	6123      	str	r3, [r4, #16]
 800812a:	e6ec      	b.n	8007f06 <_scanf_float+0x7a>
 800812c:	1e6b      	subs	r3, r5, #1
 800812e:	2b06      	cmp	r3, #6
 8008130:	d825      	bhi.n	800817e <_scanf_float+0x2f2>
 8008132:	2d02      	cmp	r5, #2
 8008134:	d836      	bhi.n	80081a4 <_scanf_float+0x318>
 8008136:	455e      	cmp	r6, fp
 8008138:	f67f aee8 	bls.w	8007f0c <_scanf_float+0x80>
 800813c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008140:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008144:	463a      	mov	r2, r7
 8008146:	4640      	mov	r0, r8
 8008148:	4798      	blx	r3
 800814a:	6923      	ldr	r3, [r4, #16]
 800814c:	3b01      	subs	r3, #1
 800814e:	6123      	str	r3, [r4, #16]
 8008150:	e7f1      	b.n	8008136 <_scanf_float+0x2aa>
 8008152:	9802      	ldr	r0, [sp, #8]
 8008154:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008158:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800815c:	9002      	str	r0, [sp, #8]
 800815e:	463a      	mov	r2, r7
 8008160:	4640      	mov	r0, r8
 8008162:	4798      	blx	r3
 8008164:	6923      	ldr	r3, [r4, #16]
 8008166:	3b01      	subs	r3, #1
 8008168:	6123      	str	r3, [r4, #16]
 800816a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800816e:	fa5f fa8a 	uxtb.w	sl, sl
 8008172:	f1ba 0f02 	cmp.w	sl, #2
 8008176:	d1ec      	bne.n	8008152 <_scanf_float+0x2c6>
 8008178:	3d03      	subs	r5, #3
 800817a:	b2ed      	uxtb	r5, r5
 800817c:	1b76      	subs	r6, r6, r5
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	05da      	lsls	r2, r3, #23
 8008182:	d52f      	bpl.n	80081e4 <_scanf_float+0x358>
 8008184:	055b      	lsls	r3, r3, #21
 8008186:	d510      	bpl.n	80081aa <_scanf_float+0x31e>
 8008188:	455e      	cmp	r6, fp
 800818a:	f67f aebf 	bls.w	8007f0c <_scanf_float+0x80>
 800818e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008192:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008196:	463a      	mov	r2, r7
 8008198:	4640      	mov	r0, r8
 800819a:	4798      	blx	r3
 800819c:	6923      	ldr	r3, [r4, #16]
 800819e:	3b01      	subs	r3, #1
 80081a0:	6123      	str	r3, [r4, #16]
 80081a2:	e7f1      	b.n	8008188 <_scanf_float+0x2fc>
 80081a4:	46aa      	mov	sl, r5
 80081a6:	9602      	str	r6, [sp, #8]
 80081a8:	e7df      	b.n	800816a <_scanf_float+0x2de>
 80081aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80081ae:	6923      	ldr	r3, [r4, #16]
 80081b0:	2965      	cmp	r1, #101	; 0x65
 80081b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80081b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80081ba:	6123      	str	r3, [r4, #16]
 80081bc:	d00c      	beq.n	80081d8 <_scanf_float+0x34c>
 80081be:	2945      	cmp	r1, #69	; 0x45
 80081c0:	d00a      	beq.n	80081d8 <_scanf_float+0x34c>
 80081c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081c6:	463a      	mov	r2, r7
 80081c8:	4640      	mov	r0, r8
 80081ca:	4798      	blx	r3
 80081cc:	6923      	ldr	r3, [r4, #16]
 80081ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	1eb5      	subs	r5, r6, #2
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081dc:	463a      	mov	r2, r7
 80081de:	4640      	mov	r0, r8
 80081e0:	4798      	blx	r3
 80081e2:	462e      	mov	r6, r5
 80081e4:	6825      	ldr	r5, [r4, #0]
 80081e6:	f015 0510 	ands.w	r5, r5, #16
 80081ea:	d14e      	bne.n	800828a <_scanf_float+0x3fe>
 80081ec:	7035      	strb	r5, [r6, #0]
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80081f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081f8:	d119      	bne.n	800822e <_scanf_float+0x3a2>
 80081fa:	9b01      	ldr	r3, [sp, #4]
 80081fc:	454b      	cmp	r3, r9
 80081fe:	eba3 0209 	sub.w	r2, r3, r9
 8008202:	d121      	bne.n	8008248 <_scanf_float+0x3bc>
 8008204:	2200      	movs	r2, #0
 8008206:	4659      	mov	r1, fp
 8008208:	4640      	mov	r0, r8
 800820a:	f000 fe4f 	bl	8008eac <_strtod_r>
 800820e:	6822      	ldr	r2, [r4, #0]
 8008210:	9b03      	ldr	r3, [sp, #12]
 8008212:	f012 0f02 	tst.w	r2, #2
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	d021      	beq.n	800825e <_scanf_float+0x3d2>
 800821a:	9903      	ldr	r1, [sp, #12]
 800821c:	1d1a      	adds	r2, r3, #4
 800821e:	600a      	str	r2, [r1, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	ed83 0b00 	vstr	d0, [r3]
 8008226:	68e3      	ldr	r3, [r4, #12]
 8008228:	3301      	adds	r3, #1
 800822a:	60e3      	str	r3, [r4, #12]
 800822c:	e66f      	b.n	8007f0e <_scanf_float+0x82>
 800822e:	9b04      	ldr	r3, [sp, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d0e7      	beq.n	8008204 <_scanf_float+0x378>
 8008234:	9905      	ldr	r1, [sp, #20]
 8008236:	230a      	movs	r3, #10
 8008238:	462a      	mov	r2, r5
 800823a:	3101      	adds	r1, #1
 800823c:	4640      	mov	r0, r8
 800823e:	f000 febd 	bl	8008fbc <_strtol_r>
 8008242:	9b04      	ldr	r3, [sp, #16]
 8008244:	9e05      	ldr	r6, [sp, #20]
 8008246:	1ac2      	subs	r2, r0, r3
 8008248:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800824c:	429e      	cmp	r6, r3
 800824e:	bf28      	it	cs
 8008250:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008254:	490e      	ldr	r1, [pc, #56]	; (8008290 <_scanf_float+0x404>)
 8008256:	4630      	mov	r0, r6
 8008258:	f000 f824 	bl	80082a4 <siprintf>
 800825c:	e7d2      	b.n	8008204 <_scanf_float+0x378>
 800825e:	9903      	ldr	r1, [sp, #12]
 8008260:	f012 0f04 	tst.w	r2, #4
 8008264:	f103 0204 	add.w	r2, r3, #4
 8008268:	600a      	str	r2, [r1, #0]
 800826a:	d1d9      	bne.n	8008220 <_scanf_float+0x394>
 800826c:	eeb4 0b40 	vcmp.f64	d0, d0
 8008270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008274:	681e      	ldr	r6, [r3, #0]
 8008276:	d705      	bvc.n	8008284 <_scanf_float+0x3f8>
 8008278:	4806      	ldr	r0, [pc, #24]	; (8008294 <_scanf_float+0x408>)
 800827a:	f000 f80d 	bl	8008298 <nanf>
 800827e:	ed86 0a00 	vstr	s0, [r6]
 8008282:	e7d0      	b.n	8008226 <_scanf_float+0x39a>
 8008284:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008288:	e7f9      	b.n	800827e <_scanf_float+0x3f2>
 800828a:	2500      	movs	r5, #0
 800828c:	e63f      	b.n	8007f0e <_scanf_float+0x82>
 800828e:	bf00      	nop
 8008290:	0800bda8 	.word	0x0800bda8
 8008294:	0800c1b0 	.word	0x0800c1b0

08008298 <nanf>:
 8008298:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80082a0 <nanf+0x8>
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	7fc00000 	.word	0x7fc00000

080082a4 <siprintf>:
 80082a4:	b40e      	push	{r1, r2, r3}
 80082a6:	b500      	push	{lr}
 80082a8:	b09c      	sub	sp, #112	; 0x70
 80082aa:	ab1d      	add	r3, sp, #116	; 0x74
 80082ac:	9002      	str	r0, [sp, #8]
 80082ae:	9006      	str	r0, [sp, #24]
 80082b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082b4:	4809      	ldr	r0, [pc, #36]	; (80082dc <siprintf+0x38>)
 80082b6:	9107      	str	r1, [sp, #28]
 80082b8:	9104      	str	r1, [sp, #16]
 80082ba:	4909      	ldr	r1, [pc, #36]	; (80082e0 <siprintf+0x3c>)
 80082bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80082c0:	9105      	str	r1, [sp, #20]
 80082c2:	6800      	ldr	r0, [r0, #0]
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	a902      	add	r1, sp, #8
 80082c8:	f002 fe20 	bl	800af0c <_svfiprintf_r>
 80082cc:	9b02      	ldr	r3, [sp, #8]
 80082ce:	2200      	movs	r2, #0
 80082d0:	701a      	strb	r2, [r3, #0]
 80082d2:	b01c      	add	sp, #112	; 0x70
 80082d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082d8:	b003      	add	sp, #12
 80082da:	4770      	bx	lr
 80082dc:	20000024 	.word	0x20000024
 80082e0:	ffff0208 	.word	0xffff0208

080082e4 <strncpy>:
 80082e4:	b510      	push	{r4, lr}
 80082e6:	3901      	subs	r1, #1
 80082e8:	4603      	mov	r3, r0
 80082ea:	b132      	cbz	r2, 80082fa <strncpy+0x16>
 80082ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80082f0:	f803 4b01 	strb.w	r4, [r3], #1
 80082f4:	3a01      	subs	r2, #1
 80082f6:	2c00      	cmp	r4, #0
 80082f8:	d1f7      	bne.n	80082ea <strncpy+0x6>
 80082fa:	441a      	add	r2, r3
 80082fc:	2100      	movs	r1, #0
 80082fe:	4293      	cmp	r3, r2
 8008300:	d100      	bne.n	8008304 <strncpy+0x20>
 8008302:	bd10      	pop	{r4, pc}
 8008304:	f803 1b01 	strb.w	r1, [r3], #1
 8008308:	e7f9      	b.n	80082fe <strncpy+0x1a>

0800830a <sulp>:
 800830a:	b570      	push	{r4, r5, r6, lr}
 800830c:	4604      	mov	r4, r0
 800830e:	460d      	mov	r5, r1
 8008310:	4616      	mov	r6, r2
 8008312:	ec45 4b10 	vmov	d0, r4, r5
 8008316:	f002 fb5b 	bl	800a9d0 <__ulp>
 800831a:	b17e      	cbz	r6, 800833c <sulp+0x32>
 800831c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008320:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008324:	2b00      	cmp	r3, #0
 8008326:	dd09      	ble.n	800833c <sulp+0x32>
 8008328:	051b      	lsls	r3, r3, #20
 800832a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800832e:	2000      	movs	r0, #0
 8008330:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008334:	ec41 0b17 	vmov	d7, r0, r1
 8008338:	ee20 0b07 	vmul.f64	d0, d0, d7
 800833c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008340 <_strtod_l>:
 8008340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008344:	ed2d 8b0e 	vpush	{d8-d14}
 8008348:	b097      	sub	sp, #92	; 0x5c
 800834a:	461f      	mov	r7, r3
 800834c:	2300      	movs	r3, #0
 800834e:	9312      	str	r3, [sp, #72]	; 0x48
 8008350:	4ba1      	ldr	r3, [pc, #644]	; (80085d8 <_strtod_l+0x298>)
 8008352:	920d      	str	r2, [sp, #52]	; 0x34
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	9307      	str	r3, [sp, #28]
 8008358:	4604      	mov	r4, r0
 800835a:	4618      	mov	r0, r3
 800835c:	468b      	mov	fp, r1
 800835e:	f7f7 ff6f 	bl	8000240 <strlen>
 8008362:	f04f 0800 	mov.w	r8, #0
 8008366:	4605      	mov	r5, r0
 8008368:	f04f 0900 	mov.w	r9, #0
 800836c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008370:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008372:	7813      	ldrb	r3, [r2, #0]
 8008374:	2b2b      	cmp	r3, #43	; 0x2b
 8008376:	d04d      	beq.n	8008414 <_strtod_l+0xd4>
 8008378:	d83a      	bhi.n	80083f0 <_strtod_l+0xb0>
 800837a:	2b0d      	cmp	r3, #13
 800837c:	d833      	bhi.n	80083e6 <_strtod_l+0xa6>
 800837e:	2b08      	cmp	r3, #8
 8008380:	d833      	bhi.n	80083ea <_strtod_l+0xaa>
 8008382:	2b00      	cmp	r3, #0
 8008384:	d03d      	beq.n	8008402 <_strtod_l+0xc2>
 8008386:	2300      	movs	r3, #0
 8008388:	9308      	str	r3, [sp, #32]
 800838a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800838c:	7833      	ldrb	r3, [r6, #0]
 800838e:	2b30      	cmp	r3, #48	; 0x30
 8008390:	f040 80b0 	bne.w	80084f4 <_strtod_l+0x1b4>
 8008394:	7873      	ldrb	r3, [r6, #1]
 8008396:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800839a:	2b58      	cmp	r3, #88	; 0x58
 800839c:	d167      	bne.n	800846e <_strtod_l+0x12e>
 800839e:	9b08      	ldr	r3, [sp, #32]
 80083a0:	9301      	str	r3, [sp, #4]
 80083a2:	ab12      	add	r3, sp, #72	; 0x48
 80083a4:	9702      	str	r7, [sp, #8]
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	4a8c      	ldr	r2, [pc, #560]	; (80085dc <_strtod_l+0x29c>)
 80083aa:	ab13      	add	r3, sp, #76	; 0x4c
 80083ac:	a911      	add	r1, sp, #68	; 0x44
 80083ae:	4620      	mov	r0, r4
 80083b0:	f001 fc68 	bl	8009c84 <__gethex>
 80083b4:	f010 0507 	ands.w	r5, r0, #7
 80083b8:	4607      	mov	r7, r0
 80083ba:	d005      	beq.n	80083c8 <_strtod_l+0x88>
 80083bc:	2d06      	cmp	r5, #6
 80083be:	d12b      	bne.n	8008418 <_strtod_l+0xd8>
 80083c0:	3601      	adds	r6, #1
 80083c2:	2300      	movs	r3, #0
 80083c4:	9611      	str	r6, [sp, #68]	; 0x44
 80083c6:	9308      	str	r3, [sp, #32]
 80083c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f040 854e 	bne.w	8008e6c <_strtod_l+0xb2c>
 80083d0:	9b08      	ldr	r3, [sp, #32]
 80083d2:	b1e3      	cbz	r3, 800840e <_strtod_l+0xce>
 80083d4:	ec49 8b17 	vmov	d7, r8, r9
 80083d8:	eeb1 0b47 	vneg.f64	d0, d7
 80083dc:	b017      	add	sp, #92	; 0x5c
 80083de:	ecbd 8b0e 	vpop	{d8-d14}
 80083e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e6:	2b20      	cmp	r3, #32
 80083e8:	d1cd      	bne.n	8008386 <_strtod_l+0x46>
 80083ea:	3201      	adds	r2, #1
 80083ec:	9211      	str	r2, [sp, #68]	; 0x44
 80083ee:	e7bf      	b.n	8008370 <_strtod_l+0x30>
 80083f0:	2b2d      	cmp	r3, #45	; 0x2d
 80083f2:	d1c8      	bne.n	8008386 <_strtod_l+0x46>
 80083f4:	2301      	movs	r3, #1
 80083f6:	9308      	str	r3, [sp, #32]
 80083f8:	1c53      	adds	r3, r2, #1
 80083fa:	9311      	str	r3, [sp, #68]	; 0x44
 80083fc:	7853      	ldrb	r3, [r2, #1]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1c3      	bne.n	800838a <_strtod_l+0x4a>
 8008402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008404:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008408:	2b00      	cmp	r3, #0
 800840a:	f040 852d 	bne.w	8008e68 <_strtod_l+0xb28>
 800840e:	ec49 8b10 	vmov	d0, r8, r9
 8008412:	e7e3      	b.n	80083dc <_strtod_l+0x9c>
 8008414:	2300      	movs	r3, #0
 8008416:	e7ee      	b.n	80083f6 <_strtod_l+0xb6>
 8008418:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800841a:	b13a      	cbz	r2, 800842c <_strtod_l+0xec>
 800841c:	2135      	movs	r1, #53	; 0x35
 800841e:	a814      	add	r0, sp, #80	; 0x50
 8008420:	f002 fbde 	bl	800abe0 <__copybits>
 8008424:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008426:	4620      	mov	r0, r4
 8008428:	f001 ffa0 	bl	800a36c <_Bfree>
 800842c:	3d01      	subs	r5, #1
 800842e:	2d04      	cmp	r5, #4
 8008430:	d806      	bhi.n	8008440 <_strtod_l+0x100>
 8008432:	e8df f005 	tbb	[pc, r5]
 8008436:	030a      	.short	0x030a
 8008438:	1714      	.short	0x1714
 800843a:	0a          	.byte	0x0a
 800843b:	00          	.byte	0x00
 800843c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8008440:	073f      	lsls	r7, r7, #28
 8008442:	d5c1      	bpl.n	80083c8 <_strtod_l+0x88>
 8008444:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008448:	e7be      	b.n	80083c8 <_strtod_l+0x88>
 800844a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800844e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008450:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008454:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008458:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800845c:	e7f0      	b.n	8008440 <_strtod_l+0x100>
 800845e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80085e0 <_strtod_l+0x2a0>
 8008462:	e7ed      	b.n	8008440 <_strtod_l+0x100>
 8008464:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008468:	f04f 38ff 	mov.w	r8, #4294967295
 800846c:	e7e8      	b.n	8008440 <_strtod_l+0x100>
 800846e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008470:	1c5a      	adds	r2, r3, #1
 8008472:	9211      	str	r2, [sp, #68]	; 0x44
 8008474:	785b      	ldrb	r3, [r3, #1]
 8008476:	2b30      	cmp	r3, #48	; 0x30
 8008478:	d0f9      	beq.n	800846e <_strtod_l+0x12e>
 800847a:	2b00      	cmp	r3, #0
 800847c:	d0a4      	beq.n	80083c8 <_strtod_l+0x88>
 800847e:	2301      	movs	r3, #1
 8008480:	f04f 0a00 	mov.w	sl, #0
 8008484:	9304      	str	r3, [sp, #16]
 8008486:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008488:	930a      	str	r3, [sp, #40]	; 0x28
 800848a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800848e:	f8cd a018 	str.w	sl, [sp, #24]
 8008492:	220a      	movs	r2, #10
 8008494:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008496:	7807      	ldrb	r7, [r0, #0]
 8008498:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800849c:	b2d9      	uxtb	r1, r3
 800849e:	2909      	cmp	r1, #9
 80084a0:	d92a      	bls.n	80084f8 <_strtod_l+0x1b8>
 80084a2:	9907      	ldr	r1, [sp, #28]
 80084a4:	462a      	mov	r2, r5
 80084a6:	f002 fe4b 	bl	800b140 <strncmp>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d033      	beq.n	8008516 <_strtod_l+0x1d6>
 80084ae:	2000      	movs	r0, #0
 80084b0:	9b06      	ldr	r3, [sp, #24]
 80084b2:	463a      	mov	r2, r7
 80084b4:	4601      	mov	r1, r0
 80084b6:	4607      	mov	r7, r0
 80084b8:	2a65      	cmp	r2, #101	; 0x65
 80084ba:	d001      	beq.n	80084c0 <_strtod_l+0x180>
 80084bc:	2a45      	cmp	r2, #69	; 0x45
 80084be:	d117      	bne.n	80084f0 <_strtod_l+0x1b0>
 80084c0:	b91b      	cbnz	r3, 80084ca <_strtod_l+0x18a>
 80084c2:	9b04      	ldr	r3, [sp, #16]
 80084c4:	4303      	orrs	r3, r0
 80084c6:	d09c      	beq.n	8008402 <_strtod_l+0xc2>
 80084c8:	2300      	movs	r3, #0
 80084ca:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80084ce:	f10b 0201 	add.w	r2, fp, #1
 80084d2:	9211      	str	r2, [sp, #68]	; 0x44
 80084d4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80084d8:	2a2b      	cmp	r2, #43	; 0x2b
 80084da:	d071      	beq.n	80085c0 <_strtod_l+0x280>
 80084dc:	2a2d      	cmp	r2, #45	; 0x2d
 80084de:	d077      	beq.n	80085d0 <_strtod_l+0x290>
 80084e0:	f04f 0e00 	mov.w	lr, #0
 80084e4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80084e8:	2d09      	cmp	r5, #9
 80084ea:	d97f      	bls.n	80085ec <_strtod_l+0x2ac>
 80084ec:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80084f0:	2500      	movs	r5, #0
 80084f2:	e09b      	b.n	800862c <_strtod_l+0x2ec>
 80084f4:	2300      	movs	r3, #0
 80084f6:	e7c3      	b.n	8008480 <_strtod_l+0x140>
 80084f8:	9906      	ldr	r1, [sp, #24]
 80084fa:	2908      	cmp	r1, #8
 80084fc:	bfdd      	ittte	le
 80084fe:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008500:	fb02 3301 	mlale	r3, r2, r1, r3
 8008504:	9309      	strle	r3, [sp, #36]	; 0x24
 8008506:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800850a:	9b06      	ldr	r3, [sp, #24]
 800850c:	3001      	adds	r0, #1
 800850e:	3301      	adds	r3, #1
 8008510:	9306      	str	r3, [sp, #24]
 8008512:	9011      	str	r0, [sp, #68]	; 0x44
 8008514:	e7be      	b.n	8008494 <_strtod_l+0x154>
 8008516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008518:	195a      	adds	r2, r3, r5
 800851a:	9211      	str	r2, [sp, #68]	; 0x44
 800851c:	5d5a      	ldrb	r2, [r3, r5]
 800851e:	9b06      	ldr	r3, [sp, #24]
 8008520:	b3a3      	cbz	r3, 800858c <_strtod_l+0x24c>
 8008522:	4607      	mov	r7, r0
 8008524:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008528:	2909      	cmp	r1, #9
 800852a:	d912      	bls.n	8008552 <_strtod_l+0x212>
 800852c:	2101      	movs	r1, #1
 800852e:	e7c3      	b.n	80084b8 <_strtod_l+0x178>
 8008530:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	9211      	str	r2, [sp, #68]	; 0x44
 8008536:	785a      	ldrb	r2, [r3, #1]
 8008538:	3001      	adds	r0, #1
 800853a:	2a30      	cmp	r2, #48	; 0x30
 800853c:	d0f8      	beq.n	8008530 <_strtod_l+0x1f0>
 800853e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008542:	2b08      	cmp	r3, #8
 8008544:	f200 8497 	bhi.w	8008e76 <_strtod_l+0xb36>
 8008548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800854a:	930a      	str	r3, [sp, #40]	; 0x28
 800854c:	4607      	mov	r7, r0
 800854e:	2000      	movs	r0, #0
 8008550:	4603      	mov	r3, r0
 8008552:	3a30      	subs	r2, #48	; 0x30
 8008554:	f100 0101 	add.w	r1, r0, #1
 8008558:	d012      	beq.n	8008580 <_strtod_l+0x240>
 800855a:	440f      	add	r7, r1
 800855c:	eb00 0c03 	add.w	ip, r0, r3
 8008560:	4619      	mov	r1, r3
 8008562:	250a      	movs	r5, #10
 8008564:	4561      	cmp	r1, ip
 8008566:	d113      	bne.n	8008590 <_strtod_l+0x250>
 8008568:	1819      	adds	r1, r3, r0
 800856a:	2908      	cmp	r1, #8
 800856c:	f103 0301 	add.w	r3, r3, #1
 8008570:	4403      	add	r3, r0
 8008572:	dc1c      	bgt.n	80085ae <_strtod_l+0x26e>
 8008574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008576:	210a      	movs	r1, #10
 8008578:	fb01 2200 	mla	r2, r1, r0, r2
 800857c:	9209      	str	r2, [sp, #36]	; 0x24
 800857e:	2100      	movs	r1, #0
 8008580:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008582:	1c50      	adds	r0, r2, #1
 8008584:	9011      	str	r0, [sp, #68]	; 0x44
 8008586:	7852      	ldrb	r2, [r2, #1]
 8008588:	4608      	mov	r0, r1
 800858a:	e7cb      	b.n	8008524 <_strtod_l+0x1e4>
 800858c:	9806      	ldr	r0, [sp, #24]
 800858e:	e7d4      	b.n	800853a <_strtod_l+0x1fa>
 8008590:	2908      	cmp	r1, #8
 8008592:	dc04      	bgt.n	800859e <_strtod_l+0x25e>
 8008594:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008596:	436e      	muls	r6, r5
 8008598:	9609      	str	r6, [sp, #36]	; 0x24
 800859a:	3101      	adds	r1, #1
 800859c:	e7e2      	b.n	8008564 <_strtod_l+0x224>
 800859e:	f101 0e01 	add.w	lr, r1, #1
 80085a2:	f1be 0f10 	cmp.w	lr, #16
 80085a6:	bfd8      	it	le
 80085a8:	fb05 fa0a 	mulle.w	sl, r5, sl
 80085ac:	e7f5      	b.n	800859a <_strtod_l+0x25a>
 80085ae:	2b10      	cmp	r3, #16
 80085b0:	bfdc      	itt	le
 80085b2:	210a      	movle	r1, #10
 80085b4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80085b8:	e7e1      	b.n	800857e <_strtod_l+0x23e>
 80085ba:	2700      	movs	r7, #0
 80085bc:	2101      	movs	r1, #1
 80085be:	e780      	b.n	80084c2 <_strtod_l+0x182>
 80085c0:	f04f 0e00 	mov.w	lr, #0
 80085c4:	f10b 0202 	add.w	r2, fp, #2
 80085c8:	9211      	str	r2, [sp, #68]	; 0x44
 80085ca:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80085ce:	e789      	b.n	80084e4 <_strtod_l+0x1a4>
 80085d0:	f04f 0e01 	mov.w	lr, #1
 80085d4:	e7f6      	b.n	80085c4 <_strtod_l+0x284>
 80085d6:	bf00      	nop
 80085d8:	0800bff8 	.word	0x0800bff8
 80085dc:	0800bdb0 	.word	0x0800bdb0
 80085e0:	7ff00000 	.word	0x7ff00000
 80085e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80085e6:	1c55      	adds	r5, r2, #1
 80085e8:	9511      	str	r5, [sp, #68]	; 0x44
 80085ea:	7852      	ldrb	r2, [r2, #1]
 80085ec:	2a30      	cmp	r2, #48	; 0x30
 80085ee:	d0f9      	beq.n	80085e4 <_strtod_l+0x2a4>
 80085f0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80085f4:	2d08      	cmp	r5, #8
 80085f6:	f63f af7b 	bhi.w	80084f0 <_strtod_l+0x1b0>
 80085fa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80085fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008600:	9207      	str	r2, [sp, #28]
 8008602:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008604:	1c55      	adds	r5, r2, #1
 8008606:	9511      	str	r5, [sp, #68]	; 0x44
 8008608:	7852      	ldrb	r2, [r2, #1]
 800860a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800860e:	2e09      	cmp	r6, #9
 8008610:	d937      	bls.n	8008682 <_strtod_l+0x342>
 8008612:	9e07      	ldr	r6, [sp, #28]
 8008614:	1bad      	subs	r5, r5, r6
 8008616:	2d08      	cmp	r5, #8
 8008618:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800861c:	dc02      	bgt.n	8008624 <_strtod_l+0x2e4>
 800861e:	4565      	cmp	r5, ip
 8008620:	bfa8      	it	ge
 8008622:	4665      	movge	r5, ip
 8008624:	f1be 0f00 	cmp.w	lr, #0
 8008628:	d000      	beq.n	800862c <_strtod_l+0x2ec>
 800862a:	426d      	negs	r5, r5
 800862c:	2b00      	cmp	r3, #0
 800862e:	d14d      	bne.n	80086cc <_strtod_l+0x38c>
 8008630:	9b04      	ldr	r3, [sp, #16]
 8008632:	4303      	orrs	r3, r0
 8008634:	f47f aec8 	bne.w	80083c8 <_strtod_l+0x88>
 8008638:	2900      	cmp	r1, #0
 800863a:	f47f aee2 	bne.w	8008402 <_strtod_l+0xc2>
 800863e:	2a69      	cmp	r2, #105	; 0x69
 8008640:	d027      	beq.n	8008692 <_strtod_l+0x352>
 8008642:	dc24      	bgt.n	800868e <_strtod_l+0x34e>
 8008644:	2a49      	cmp	r2, #73	; 0x49
 8008646:	d024      	beq.n	8008692 <_strtod_l+0x352>
 8008648:	2a4e      	cmp	r2, #78	; 0x4e
 800864a:	f47f aeda 	bne.w	8008402 <_strtod_l+0xc2>
 800864e:	4996      	ldr	r1, [pc, #600]	; (80088a8 <_strtod_l+0x568>)
 8008650:	a811      	add	r0, sp, #68	; 0x44
 8008652:	f001 fd6f 	bl	800a134 <__match>
 8008656:	2800      	cmp	r0, #0
 8008658:	f43f aed3 	beq.w	8008402 <_strtod_l+0xc2>
 800865c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b28      	cmp	r3, #40	; 0x28
 8008662:	d12d      	bne.n	80086c0 <_strtod_l+0x380>
 8008664:	4991      	ldr	r1, [pc, #580]	; (80088ac <_strtod_l+0x56c>)
 8008666:	aa14      	add	r2, sp, #80	; 0x50
 8008668:	a811      	add	r0, sp, #68	; 0x44
 800866a:	f001 fd77 	bl	800a15c <__hexnan>
 800866e:	2805      	cmp	r0, #5
 8008670:	d126      	bne.n	80086c0 <_strtod_l+0x380>
 8008672:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008674:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008678:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800867c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008680:	e6a2      	b.n	80083c8 <_strtod_l+0x88>
 8008682:	250a      	movs	r5, #10
 8008684:	fb05 250c 	mla	r5, r5, ip, r2
 8008688:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800868c:	e7b9      	b.n	8008602 <_strtod_l+0x2c2>
 800868e:	2a6e      	cmp	r2, #110	; 0x6e
 8008690:	e7db      	b.n	800864a <_strtod_l+0x30a>
 8008692:	4987      	ldr	r1, [pc, #540]	; (80088b0 <_strtod_l+0x570>)
 8008694:	a811      	add	r0, sp, #68	; 0x44
 8008696:	f001 fd4d 	bl	800a134 <__match>
 800869a:	2800      	cmp	r0, #0
 800869c:	f43f aeb1 	beq.w	8008402 <_strtod_l+0xc2>
 80086a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086a2:	4984      	ldr	r1, [pc, #528]	; (80088b4 <_strtod_l+0x574>)
 80086a4:	3b01      	subs	r3, #1
 80086a6:	a811      	add	r0, sp, #68	; 0x44
 80086a8:	9311      	str	r3, [sp, #68]	; 0x44
 80086aa:	f001 fd43 	bl	800a134 <__match>
 80086ae:	b910      	cbnz	r0, 80086b6 <_strtod_l+0x376>
 80086b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086b2:	3301      	adds	r3, #1
 80086b4:	9311      	str	r3, [sp, #68]	; 0x44
 80086b6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80088c8 <_strtod_l+0x588>
 80086ba:	f04f 0800 	mov.w	r8, #0
 80086be:	e683      	b.n	80083c8 <_strtod_l+0x88>
 80086c0:	487d      	ldr	r0, [pc, #500]	; (80088b8 <_strtod_l+0x578>)
 80086c2:	f002 fd25 	bl	800b110 <nan>
 80086c6:	ec59 8b10 	vmov	r8, r9, d0
 80086ca:	e67d      	b.n	80083c8 <_strtod_l+0x88>
 80086cc:	1bea      	subs	r2, r5, r7
 80086ce:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80086d2:	9207      	str	r2, [sp, #28]
 80086d4:	9a06      	ldr	r2, [sp, #24]
 80086d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80086da:	2a00      	cmp	r2, #0
 80086dc:	bf08      	it	eq
 80086de:	461a      	moveq	r2, r3
 80086e0:	2b10      	cmp	r3, #16
 80086e2:	9206      	str	r2, [sp, #24]
 80086e4:	461a      	mov	r2, r3
 80086e6:	bfa8      	it	ge
 80086e8:	2210      	movge	r2, #16
 80086ea:	2b09      	cmp	r3, #9
 80086ec:	ec59 8b17 	vmov	r8, r9, d7
 80086f0:	dd0c      	ble.n	800870c <_strtod_l+0x3cc>
 80086f2:	4972      	ldr	r1, [pc, #456]	; (80088bc <_strtod_l+0x57c>)
 80086f4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80086f8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80086fc:	ee06 aa90 	vmov	s13, sl
 8008700:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008704:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008708:	ec59 8b16 	vmov	r8, r9, d6
 800870c:	2b0f      	cmp	r3, #15
 800870e:	dc36      	bgt.n	800877e <_strtod_l+0x43e>
 8008710:	9907      	ldr	r1, [sp, #28]
 8008712:	2900      	cmp	r1, #0
 8008714:	f43f ae58 	beq.w	80083c8 <_strtod_l+0x88>
 8008718:	dd23      	ble.n	8008762 <_strtod_l+0x422>
 800871a:	2916      	cmp	r1, #22
 800871c:	dc0b      	bgt.n	8008736 <_strtod_l+0x3f6>
 800871e:	4b67      	ldr	r3, [pc, #412]	; (80088bc <_strtod_l+0x57c>)
 8008720:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008724:	ed93 7b00 	vldr	d7, [r3]
 8008728:	ec49 8b16 	vmov	d6, r8, r9
 800872c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008730:	ec59 8b17 	vmov	r8, r9, d7
 8008734:	e648      	b.n	80083c8 <_strtod_l+0x88>
 8008736:	9807      	ldr	r0, [sp, #28]
 8008738:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800873c:	4281      	cmp	r1, r0
 800873e:	db1e      	blt.n	800877e <_strtod_l+0x43e>
 8008740:	4a5e      	ldr	r2, [pc, #376]	; (80088bc <_strtod_l+0x57c>)
 8008742:	f1c3 030f 	rsb	r3, r3, #15
 8008746:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800874a:	ed91 7b00 	vldr	d7, [r1]
 800874e:	ec49 8b16 	vmov	d6, r8, r9
 8008752:	1ac3      	subs	r3, r0, r3
 8008754:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008758:	ee27 7b06 	vmul.f64	d7, d7, d6
 800875c:	ed92 6b00 	vldr	d6, [r2]
 8008760:	e7e4      	b.n	800872c <_strtod_l+0x3ec>
 8008762:	9907      	ldr	r1, [sp, #28]
 8008764:	3116      	adds	r1, #22
 8008766:	db0a      	blt.n	800877e <_strtod_l+0x43e>
 8008768:	4b54      	ldr	r3, [pc, #336]	; (80088bc <_strtod_l+0x57c>)
 800876a:	1b7d      	subs	r5, r7, r5
 800876c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008770:	ed95 7b00 	vldr	d7, [r5]
 8008774:	ec49 8b16 	vmov	d6, r8, r9
 8008778:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800877c:	e7d8      	b.n	8008730 <_strtod_l+0x3f0>
 800877e:	9907      	ldr	r1, [sp, #28]
 8008780:	1a9a      	subs	r2, r3, r2
 8008782:	440a      	add	r2, r1
 8008784:	2a00      	cmp	r2, #0
 8008786:	dd6f      	ble.n	8008868 <_strtod_l+0x528>
 8008788:	f012 000f 	ands.w	r0, r2, #15
 800878c:	d00a      	beq.n	80087a4 <_strtod_l+0x464>
 800878e:	494b      	ldr	r1, [pc, #300]	; (80088bc <_strtod_l+0x57c>)
 8008790:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008794:	ed91 7b00 	vldr	d7, [r1]
 8008798:	ec49 8b16 	vmov	d6, r8, r9
 800879c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80087a0:	ec59 8b17 	vmov	r8, r9, d7
 80087a4:	f032 020f 	bics.w	r2, r2, #15
 80087a8:	d04f      	beq.n	800884a <_strtod_l+0x50a>
 80087aa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80087ae:	dd22      	ble.n	80087f6 <_strtod_l+0x4b6>
 80087b0:	2500      	movs	r5, #0
 80087b2:	462e      	mov	r6, r5
 80087b4:	9506      	str	r5, [sp, #24]
 80087b6:	462f      	mov	r7, r5
 80087b8:	2322      	movs	r3, #34	; 0x22
 80087ba:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80088c8 <_strtod_l+0x588>
 80087be:	6023      	str	r3, [r4, #0]
 80087c0:	f04f 0800 	mov.w	r8, #0
 80087c4:	9b06      	ldr	r3, [sp, #24]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f43f adfe 	beq.w	80083c8 <_strtod_l+0x88>
 80087cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80087ce:	4620      	mov	r0, r4
 80087d0:	f001 fdcc 	bl	800a36c <_Bfree>
 80087d4:	4639      	mov	r1, r7
 80087d6:	4620      	mov	r0, r4
 80087d8:	f001 fdc8 	bl	800a36c <_Bfree>
 80087dc:	4631      	mov	r1, r6
 80087de:	4620      	mov	r0, r4
 80087e0:	f001 fdc4 	bl	800a36c <_Bfree>
 80087e4:	9906      	ldr	r1, [sp, #24]
 80087e6:	4620      	mov	r0, r4
 80087e8:	f001 fdc0 	bl	800a36c <_Bfree>
 80087ec:	4629      	mov	r1, r5
 80087ee:	4620      	mov	r0, r4
 80087f0:	f001 fdbc 	bl	800a36c <_Bfree>
 80087f4:	e5e8      	b.n	80083c8 <_strtod_l+0x88>
 80087f6:	2000      	movs	r0, #0
 80087f8:	ec49 8b17 	vmov	d7, r8, r9
 80087fc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80088c0 <_strtod_l+0x580>
 8008800:	1112      	asrs	r2, r2, #4
 8008802:	4601      	mov	r1, r0
 8008804:	2a01      	cmp	r2, #1
 8008806:	dc23      	bgt.n	8008850 <_strtod_l+0x510>
 8008808:	b108      	cbz	r0, 800880e <_strtod_l+0x4ce>
 800880a:	ec59 8b17 	vmov	r8, r9, d7
 800880e:	4a2c      	ldr	r2, [pc, #176]	; (80088c0 <_strtod_l+0x580>)
 8008810:	482c      	ldr	r0, [pc, #176]	; (80088c4 <_strtod_l+0x584>)
 8008812:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008816:	ed92 7b00 	vldr	d7, [r2]
 800881a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800881e:	ec49 8b16 	vmov	d6, r8, r9
 8008822:	4a29      	ldr	r2, [pc, #164]	; (80088c8 <_strtod_l+0x588>)
 8008824:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008828:	ee17 1a90 	vmov	r1, s15
 800882c:	400a      	ands	r2, r1
 800882e:	4282      	cmp	r2, r0
 8008830:	ec59 8b17 	vmov	r8, r9, d7
 8008834:	d8bc      	bhi.n	80087b0 <_strtod_l+0x470>
 8008836:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800883a:	4282      	cmp	r2, r0
 800883c:	bf86      	itte	hi
 800883e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80088cc <_strtod_l+0x58c>
 8008842:	f04f 38ff 	movhi.w	r8, #4294967295
 8008846:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800884a:	2200      	movs	r2, #0
 800884c:	9204      	str	r2, [sp, #16]
 800884e:	e078      	b.n	8008942 <_strtod_l+0x602>
 8008850:	07d6      	lsls	r6, r2, #31
 8008852:	d504      	bpl.n	800885e <_strtod_l+0x51e>
 8008854:	ed9c 6b00 	vldr	d6, [ip]
 8008858:	2001      	movs	r0, #1
 800885a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800885e:	3101      	adds	r1, #1
 8008860:	1052      	asrs	r2, r2, #1
 8008862:	f10c 0c08 	add.w	ip, ip, #8
 8008866:	e7cd      	b.n	8008804 <_strtod_l+0x4c4>
 8008868:	d0ef      	beq.n	800884a <_strtod_l+0x50a>
 800886a:	4252      	negs	r2, r2
 800886c:	f012 000f 	ands.w	r0, r2, #15
 8008870:	d00a      	beq.n	8008888 <_strtod_l+0x548>
 8008872:	4912      	ldr	r1, [pc, #72]	; (80088bc <_strtod_l+0x57c>)
 8008874:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008878:	ed91 7b00 	vldr	d7, [r1]
 800887c:	ec49 8b16 	vmov	d6, r8, r9
 8008880:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008884:	ec59 8b17 	vmov	r8, r9, d7
 8008888:	1112      	asrs	r2, r2, #4
 800888a:	d0de      	beq.n	800884a <_strtod_l+0x50a>
 800888c:	2a1f      	cmp	r2, #31
 800888e:	dd1f      	ble.n	80088d0 <_strtod_l+0x590>
 8008890:	2500      	movs	r5, #0
 8008892:	462e      	mov	r6, r5
 8008894:	9506      	str	r5, [sp, #24]
 8008896:	462f      	mov	r7, r5
 8008898:	2322      	movs	r3, #34	; 0x22
 800889a:	f04f 0800 	mov.w	r8, #0
 800889e:	f04f 0900 	mov.w	r9, #0
 80088a2:	6023      	str	r3, [r4, #0]
 80088a4:	e78e      	b.n	80087c4 <_strtod_l+0x484>
 80088a6:	bf00      	nop
 80088a8:	0800bd81 	.word	0x0800bd81
 80088ac:	0800bdc4 	.word	0x0800bdc4
 80088b0:	0800bd79 	.word	0x0800bd79
 80088b4:	0800bf04 	.word	0x0800bf04
 80088b8:	0800c1b0 	.word	0x0800c1b0
 80088bc:	0800c090 	.word	0x0800c090
 80088c0:	0800c068 	.word	0x0800c068
 80088c4:	7ca00000 	.word	0x7ca00000
 80088c8:	7ff00000 	.word	0x7ff00000
 80088cc:	7fefffff 	.word	0x7fefffff
 80088d0:	f012 0110 	ands.w	r1, r2, #16
 80088d4:	bf18      	it	ne
 80088d6:	216a      	movne	r1, #106	; 0x6a
 80088d8:	9104      	str	r1, [sp, #16]
 80088da:	ec49 8b17 	vmov	d7, r8, r9
 80088de:	49be      	ldr	r1, [pc, #760]	; (8008bd8 <_strtod_l+0x898>)
 80088e0:	2000      	movs	r0, #0
 80088e2:	07d6      	lsls	r6, r2, #31
 80088e4:	d504      	bpl.n	80088f0 <_strtod_l+0x5b0>
 80088e6:	ed91 6b00 	vldr	d6, [r1]
 80088ea:	2001      	movs	r0, #1
 80088ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80088f0:	1052      	asrs	r2, r2, #1
 80088f2:	f101 0108 	add.w	r1, r1, #8
 80088f6:	d1f4      	bne.n	80088e2 <_strtod_l+0x5a2>
 80088f8:	b108      	cbz	r0, 80088fe <_strtod_l+0x5be>
 80088fa:	ec59 8b17 	vmov	r8, r9, d7
 80088fe:	9a04      	ldr	r2, [sp, #16]
 8008900:	b1c2      	cbz	r2, 8008934 <_strtod_l+0x5f4>
 8008902:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8008906:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800890a:	2a00      	cmp	r2, #0
 800890c:	4648      	mov	r0, r9
 800890e:	dd11      	ble.n	8008934 <_strtod_l+0x5f4>
 8008910:	2a1f      	cmp	r2, #31
 8008912:	f340 812e 	ble.w	8008b72 <_strtod_l+0x832>
 8008916:	2a34      	cmp	r2, #52	; 0x34
 8008918:	bfde      	ittt	le
 800891a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800891e:	f04f 32ff 	movle.w	r2, #4294967295
 8008922:	fa02 f101 	lslle.w	r1, r2, r1
 8008926:	f04f 0800 	mov.w	r8, #0
 800892a:	bfcc      	ite	gt
 800892c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008930:	ea01 0900 	andle.w	r9, r1, r0
 8008934:	ec49 8b17 	vmov	d7, r8, r9
 8008938:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800893c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008940:	d0a6      	beq.n	8008890 <_strtod_l+0x550>
 8008942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008944:	9200      	str	r2, [sp, #0]
 8008946:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008948:	9a06      	ldr	r2, [sp, #24]
 800894a:	4620      	mov	r0, r4
 800894c:	f001 fd76 	bl	800a43c <__s2b>
 8008950:	9006      	str	r0, [sp, #24]
 8008952:	2800      	cmp	r0, #0
 8008954:	f43f af2c 	beq.w	80087b0 <_strtod_l+0x470>
 8008958:	9b07      	ldr	r3, [sp, #28]
 800895a:	1b7d      	subs	r5, r7, r5
 800895c:	2b00      	cmp	r3, #0
 800895e:	bfb4      	ite	lt
 8008960:	462b      	movlt	r3, r5
 8008962:	2300      	movge	r3, #0
 8008964:	9309      	str	r3, [sp, #36]	; 0x24
 8008966:	9b07      	ldr	r3, [sp, #28]
 8008968:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8008bb8 <_strtod_l+0x878>
 800896c:	ed9f ab94 	vldr	d10, [pc, #592]	; 8008bc0 <_strtod_l+0x880>
 8008970:	ed9f bb95 	vldr	d11, [pc, #596]	; 8008bc8 <_strtod_l+0x888>
 8008974:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008978:	2500      	movs	r5, #0
 800897a:	930c      	str	r3, [sp, #48]	; 0x30
 800897c:	462e      	mov	r6, r5
 800897e:	9b06      	ldr	r3, [sp, #24]
 8008980:	4620      	mov	r0, r4
 8008982:	6859      	ldr	r1, [r3, #4]
 8008984:	f001 fcb2 	bl	800a2ec <_Balloc>
 8008988:	4607      	mov	r7, r0
 800898a:	2800      	cmp	r0, #0
 800898c:	f43f af14 	beq.w	80087b8 <_strtod_l+0x478>
 8008990:	9b06      	ldr	r3, [sp, #24]
 8008992:	691a      	ldr	r2, [r3, #16]
 8008994:	3202      	adds	r2, #2
 8008996:	f103 010c 	add.w	r1, r3, #12
 800899a:	0092      	lsls	r2, r2, #2
 800899c:	300c      	adds	r0, #12
 800899e:	f001 fc97 	bl	800a2d0 <memcpy>
 80089a2:	ec49 8b10 	vmov	d0, r8, r9
 80089a6:	aa14      	add	r2, sp, #80	; 0x50
 80089a8:	a913      	add	r1, sp, #76	; 0x4c
 80089aa:	4620      	mov	r0, r4
 80089ac:	f002 f88c 	bl	800aac8 <__d2b>
 80089b0:	ec49 8b18 	vmov	d8, r8, r9
 80089b4:	9012      	str	r0, [sp, #72]	; 0x48
 80089b6:	2800      	cmp	r0, #0
 80089b8:	f43f aefe 	beq.w	80087b8 <_strtod_l+0x478>
 80089bc:	2101      	movs	r1, #1
 80089be:	4620      	mov	r0, r4
 80089c0:	f001 fdd6 	bl	800a570 <__i2b>
 80089c4:	4606      	mov	r6, r0
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f43f aef6 	beq.w	80087b8 <_strtod_l+0x478>
 80089cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089ce:	9914      	ldr	r1, [sp, #80]	; 0x50
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfab      	itete	ge
 80089d4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80089d6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80089d8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80089dc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80089e0:	bfac      	ite	ge
 80089e2:	eb03 0b02 	addge.w	fp, r3, r2
 80089e6:	eba2 0a03 	sublt.w	sl, r2, r3
 80089ea:	9a04      	ldr	r2, [sp, #16]
 80089ec:	1a9b      	subs	r3, r3, r2
 80089ee:	440b      	add	r3, r1
 80089f0:	4a7a      	ldr	r2, [pc, #488]	; (8008bdc <_strtod_l+0x89c>)
 80089f2:	3b01      	subs	r3, #1
 80089f4:	4293      	cmp	r3, r2
 80089f6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80089fa:	f280 80cd 	bge.w	8008b98 <_strtod_l+0x858>
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	2a1f      	cmp	r2, #31
 8008a02:	eba1 0102 	sub.w	r1, r1, r2
 8008a06:	f04f 0001 	mov.w	r0, #1
 8008a0a:	f300 80b9 	bgt.w	8008b80 <_strtod_l+0x840>
 8008a0e:	fa00 f302 	lsl.w	r3, r0, r2
 8008a12:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a14:	2300      	movs	r3, #0
 8008a16:	930a      	str	r3, [sp, #40]	; 0x28
 8008a18:	eb0b 0301 	add.w	r3, fp, r1
 8008a1c:	9a04      	ldr	r2, [sp, #16]
 8008a1e:	459b      	cmp	fp, r3
 8008a20:	448a      	add	sl, r1
 8008a22:	4492      	add	sl, r2
 8008a24:	465a      	mov	r2, fp
 8008a26:	bfa8      	it	ge
 8008a28:	461a      	movge	r2, r3
 8008a2a:	4552      	cmp	r2, sl
 8008a2c:	bfa8      	it	ge
 8008a2e:	4652      	movge	r2, sl
 8008a30:	2a00      	cmp	r2, #0
 8008a32:	bfc2      	ittt	gt
 8008a34:	1a9b      	subgt	r3, r3, r2
 8008a36:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008a3a:	ebab 0b02 	subgt.w	fp, fp, r2
 8008a3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a40:	2a00      	cmp	r2, #0
 8008a42:	dd18      	ble.n	8008a76 <_strtod_l+0x736>
 8008a44:	4631      	mov	r1, r6
 8008a46:	4620      	mov	r0, r4
 8008a48:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a4a:	f001 fe51 	bl	800a6f0 <__pow5mult>
 8008a4e:	4606      	mov	r6, r0
 8008a50:	2800      	cmp	r0, #0
 8008a52:	f43f aeb1 	beq.w	80087b8 <_strtod_l+0x478>
 8008a56:	4601      	mov	r1, r0
 8008a58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f001 fd9e 	bl	800a59c <__multiply>
 8008a60:	900e      	str	r0, [sp, #56]	; 0x38
 8008a62:	2800      	cmp	r0, #0
 8008a64:	f43f aea8 	beq.w	80087b8 <_strtod_l+0x478>
 8008a68:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f001 fc7e 	bl	800a36c <_Bfree>
 8008a70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a74:	9212      	str	r2, [sp, #72]	; 0x48
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f300 8093 	bgt.w	8008ba2 <_strtod_l+0x862>
 8008a7c:	9b07      	ldr	r3, [sp, #28]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	dd08      	ble.n	8008a94 <_strtod_l+0x754>
 8008a82:	4639      	mov	r1, r7
 8008a84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a86:	4620      	mov	r0, r4
 8008a88:	f001 fe32 	bl	800a6f0 <__pow5mult>
 8008a8c:	4607      	mov	r7, r0
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	f43f ae92 	beq.w	80087b8 <_strtod_l+0x478>
 8008a94:	f1ba 0f00 	cmp.w	sl, #0
 8008a98:	dd08      	ble.n	8008aac <_strtod_l+0x76c>
 8008a9a:	4639      	mov	r1, r7
 8008a9c:	4652      	mov	r2, sl
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f001 fe80 	bl	800a7a4 <__lshift>
 8008aa4:	4607      	mov	r7, r0
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	f43f ae86 	beq.w	80087b8 <_strtod_l+0x478>
 8008aac:	f1bb 0f00 	cmp.w	fp, #0
 8008ab0:	dd08      	ble.n	8008ac4 <_strtod_l+0x784>
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	465a      	mov	r2, fp
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f001 fe74 	bl	800a7a4 <__lshift>
 8008abc:	4606      	mov	r6, r0
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	f43f ae7a 	beq.w	80087b8 <_strtod_l+0x478>
 8008ac4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008ac6:	463a      	mov	r2, r7
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f001 fef7 	bl	800a8bc <__mdiff>
 8008ace:	4605      	mov	r5, r0
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	f43f ae71 	beq.w	80087b8 <_strtod_l+0x478>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008adc:	60c3      	str	r3, [r0, #12]
 8008ade:	4631      	mov	r1, r6
 8008ae0:	f001 fed0 	bl	800a884 <__mcmp>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	da7d      	bge.n	8008be4 <_strtod_l+0x8a4>
 8008ae8:	ea5a 0308 	orrs.w	r3, sl, r8
 8008aec:	f040 80a3 	bne.w	8008c36 <_strtod_l+0x8f6>
 8008af0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f040 809e 	bne.w	8008c36 <_strtod_l+0x8f6>
 8008afa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008afe:	0d1b      	lsrs	r3, r3, #20
 8008b00:	051b      	lsls	r3, r3, #20
 8008b02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008b06:	f240 8096 	bls.w	8008c36 <_strtod_l+0x8f6>
 8008b0a:	696b      	ldr	r3, [r5, #20]
 8008b0c:	b91b      	cbnz	r3, 8008b16 <_strtod_l+0x7d6>
 8008b0e:	692b      	ldr	r3, [r5, #16]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	f340 8090 	ble.w	8008c36 <_strtod_l+0x8f6>
 8008b16:	4629      	mov	r1, r5
 8008b18:	2201      	movs	r2, #1
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f001 fe42 	bl	800a7a4 <__lshift>
 8008b20:	4631      	mov	r1, r6
 8008b22:	4605      	mov	r5, r0
 8008b24:	f001 feae 	bl	800a884 <__mcmp>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	f340 8084 	ble.w	8008c36 <_strtod_l+0x8f6>
 8008b2e:	9904      	ldr	r1, [sp, #16]
 8008b30:	4a2b      	ldr	r2, [pc, #172]	; (8008be0 <_strtod_l+0x8a0>)
 8008b32:	464b      	mov	r3, r9
 8008b34:	2900      	cmp	r1, #0
 8008b36:	f000 809d 	beq.w	8008c74 <_strtod_l+0x934>
 8008b3a:	ea02 0109 	and.w	r1, r2, r9
 8008b3e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008b42:	f300 8097 	bgt.w	8008c74 <_strtod_l+0x934>
 8008b46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008b4a:	f77f aea5 	ble.w	8008898 <_strtod_l+0x558>
 8008b4e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008bd0 <_strtod_l+0x890>
 8008b52:	ec49 8b16 	vmov	d6, r8, r9
 8008b56:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008b5a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b5e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	bf08      	it	eq
 8008b66:	2322      	moveq	r3, #34	; 0x22
 8008b68:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008b6c:	bf08      	it	eq
 8008b6e:	6023      	streq	r3, [r4, #0]
 8008b70:	e62c      	b.n	80087cc <_strtod_l+0x48c>
 8008b72:	f04f 31ff 	mov.w	r1, #4294967295
 8008b76:	fa01 f202 	lsl.w	r2, r1, r2
 8008b7a:	ea02 0808 	and.w	r8, r2, r8
 8008b7e:	e6d9      	b.n	8008934 <_strtod_l+0x5f4>
 8008b80:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008b84:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008b88:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008b8c:	33e2      	adds	r3, #226	; 0xe2
 8008b8e:	fa00 f303 	lsl.w	r3, r0, r3
 8008b92:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8008b96:	e73f      	b.n	8008a18 <_strtod_l+0x6d8>
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008ba0:	e73a      	b.n	8008a18 <_strtod_l+0x6d8>
 8008ba2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f001 fdfc 	bl	800a7a4 <__lshift>
 8008bac:	9012      	str	r0, [sp, #72]	; 0x48
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	f47f af64 	bne.w	8008a7c <_strtod_l+0x73c>
 8008bb4:	e600      	b.n	80087b8 <_strtod_l+0x478>
 8008bb6:	bf00      	nop
 8008bb8:	94a03595 	.word	0x94a03595
 8008bbc:	3fcfffff 	.word	0x3fcfffff
 8008bc0:	94a03595 	.word	0x94a03595
 8008bc4:	3fdfffff 	.word	0x3fdfffff
 8008bc8:	35afe535 	.word	0x35afe535
 8008bcc:	3fe00000 	.word	0x3fe00000
 8008bd0:	00000000 	.word	0x00000000
 8008bd4:	39500000 	.word	0x39500000
 8008bd8:	0800bdd8 	.word	0x0800bdd8
 8008bdc:	fffffc02 	.word	0xfffffc02
 8008be0:	7ff00000 	.word	0x7ff00000
 8008be4:	46cb      	mov	fp, r9
 8008be6:	d15f      	bne.n	8008ca8 <_strtod_l+0x968>
 8008be8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bec:	f1ba 0f00 	cmp.w	sl, #0
 8008bf0:	d02a      	beq.n	8008c48 <_strtod_l+0x908>
 8008bf2:	4aa7      	ldr	r2, [pc, #668]	; (8008e90 <_strtod_l+0xb50>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d12b      	bne.n	8008c50 <_strtod_l+0x910>
 8008bf8:	9b04      	ldr	r3, [sp, #16]
 8008bfa:	4642      	mov	r2, r8
 8008bfc:	b1fb      	cbz	r3, 8008c3e <_strtod_l+0x8fe>
 8008bfe:	4ba5      	ldr	r3, [pc, #660]	; (8008e94 <_strtod_l+0xb54>)
 8008c00:	ea09 0303 	and.w	r3, r9, r3
 8008c04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c08:	f04f 31ff 	mov.w	r1, #4294967295
 8008c0c:	d81a      	bhi.n	8008c44 <_strtod_l+0x904>
 8008c0e:	0d1b      	lsrs	r3, r3, #20
 8008c10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c14:	fa01 f303 	lsl.w	r3, r1, r3
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d119      	bne.n	8008c50 <_strtod_l+0x910>
 8008c1c:	4b9e      	ldr	r3, [pc, #632]	; (8008e98 <_strtod_l+0xb58>)
 8008c1e:	459b      	cmp	fp, r3
 8008c20:	d102      	bne.n	8008c28 <_strtod_l+0x8e8>
 8008c22:	3201      	adds	r2, #1
 8008c24:	f43f adc8 	beq.w	80087b8 <_strtod_l+0x478>
 8008c28:	4b9a      	ldr	r3, [pc, #616]	; (8008e94 <_strtod_l+0xb54>)
 8008c2a:	ea0b 0303 	and.w	r3, fp, r3
 8008c2e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008c32:	f04f 0800 	mov.w	r8, #0
 8008c36:	9b04      	ldr	r3, [sp, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d188      	bne.n	8008b4e <_strtod_l+0x80e>
 8008c3c:	e5c6      	b.n	80087cc <_strtod_l+0x48c>
 8008c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c42:	e7e9      	b.n	8008c18 <_strtod_l+0x8d8>
 8008c44:	460b      	mov	r3, r1
 8008c46:	e7e7      	b.n	8008c18 <_strtod_l+0x8d8>
 8008c48:	ea53 0308 	orrs.w	r3, r3, r8
 8008c4c:	f43f af6f 	beq.w	8008b2e <_strtod_l+0x7ee>
 8008c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c52:	b1cb      	cbz	r3, 8008c88 <_strtod_l+0x948>
 8008c54:	ea13 0f0b 	tst.w	r3, fp
 8008c58:	d0ed      	beq.n	8008c36 <_strtod_l+0x8f6>
 8008c5a:	9a04      	ldr	r2, [sp, #16]
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	4649      	mov	r1, r9
 8008c60:	f1ba 0f00 	cmp.w	sl, #0
 8008c64:	d014      	beq.n	8008c90 <_strtod_l+0x950>
 8008c66:	f7ff fb50 	bl	800830a <sulp>
 8008c6a:	ee38 7b00 	vadd.f64	d7, d8, d0
 8008c6e:	ec59 8b17 	vmov	r8, r9, d7
 8008c72:	e7e0      	b.n	8008c36 <_strtod_l+0x8f6>
 8008c74:	4013      	ands	r3, r2
 8008c76:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c7a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008c7e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008c82:	f04f 38ff 	mov.w	r8, #4294967295
 8008c86:	e7d6      	b.n	8008c36 <_strtod_l+0x8f6>
 8008c88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c8a:	ea13 0f08 	tst.w	r3, r8
 8008c8e:	e7e3      	b.n	8008c58 <_strtod_l+0x918>
 8008c90:	f7ff fb3b 	bl	800830a <sulp>
 8008c94:	ee38 0b40 	vsub.f64	d0, d8, d0
 8008c98:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca0:	ec59 8b10 	vmov	r8, r9, d0
 8008ca4:	d1c7      	bne.n	8008c36 <_strtod_l+0x8f6>
 8008ca6:	e5f7      	b.n	8008898 <_strtod_l+0x558>
 8008ca8:	4631      	mov	r1, r6
 8008caa:	4628      	mov	r0, r5
 8008cac:	f001 ff68 	bl	800ab80 <__ratio>
 8008cb0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008cb4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cbc:	d865      	bhi.n	8008d8a <_strtod_l+0xa4a>
 8008cbe:	f1ba 0f00 	cmp.w	sl, #0
 8008cc2:	d042      	beq.n	8008d4a <_strtod_l+0xa0a>
 8008cc4:	4b75      	ldr	r3, [pc, #468]	; (8008e9c <_strtod_l+0xb5c>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8008ccc:	4871      	ldr	r0, [pc, #452]	; (8008e94 <_strtod_l+0xb54>)
 8008cce:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8008ea8 <_strtod_l+0xb68>
 8008cd2:	ea0b 0100 	and.w	r1, fp, r0
 8008cd6:	4561      	cmp	r1, ip
 8008cd8:	f040 808e 	bne.w	8008df8 <_strtod_l+0xab8>
 8008cdc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008ce0:	ec49 8b10 	vmov	d0, r8, r9
 8008ce4:	ec43 2b1c 	vmov	d12, r2, r3
 8008ce8:	910a      	str	r1, [sp, #40]	; 0x28
 8008cea:	f001 fe71 	bl	800a9d0 <__ulp>
 8008cee:	ec49 8b1e 	vmov	d14, r8, r9
 8008cf2:	4868      	ldr	r0, [pc, #416]	; (8008e94 <_strtod_l+0xb54>)
 8008cf4:	eeac eb00 	vfma.f64	d14, d12, d0
 8008cf8:	ee1e 3a90 	vmov	r3, s29
 8008cfc:	4a68      	ldr	r2, [pc, #416]	; (8008ea0 <_strtod_l+0xb60>)
 8008cfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d00:	4018      	ands	r0, r3
 8008d02:	4290      	cmp	r0, r2
 8008d04:	ec59 8b1e 	vmov	r8, r9, d14
 8008d08:	d94e      	bls.n	8008da8 <_strtod_l+0xa68>
 8008d0a:	ee18 3a90 	vmov	r3, s17
 8008d0e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d104      	bne.n	8008d20 <_strtod_l+0x9e0>
 8008d16:	ee18 3a10 	vmov	r3, s16
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	f43f ad4c 	beq.w	80087b8 <_strtod_l+0x478>
 8008d20:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008e98 <_strtod_l+0xb58>
 8008d24:	f04f 38ff 	mov.w	r8, #4294967295
 8008d28:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f001 fb1e 	bl	800a36c <_Bfree>
 8008d30:	4639      	mov	r1, r7
 8008d32:	4620      	mov	r0, r4
 8008d34:	f001 fb1a 	bl	800a36c <_Bfree>
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f001 fb16 	bl	800a36c <_Bfree>
 8008d40:	4629      	mov	r1, r5
 8008d42:	4620      	mov	r0, r4
 8008d44:	f001 fb12 	bl	800a36c <_Bfree>
 8008d48:	e619      	b.n	800897e <_strtod_l+0x63e>
 8008d4a:	f1b8 0f00 	cmp.w	r8, #0
 8008d4e:	d112      	bne.n	8008d76 <_strtod_l+0xa36>
 8008d50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d54:	b9b3      	cbnz	r3, 8008d84 <_strtod_l+0xa44>
 8008d56:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008d5a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d62:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008d66:	bf58      	it	pl
 8008d68:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8008d6c:	eeb1 7b4d 	vneg.f64	d7, d13
 8008d70:	ec53 2b17 	vmov	r2, r3, d7
 8008d74:	e7aa      	b.n	8008ccc <_strtod_l+0x98c>
 8008d76:	f1b8 0f01 	cmp.w	r8, #1
 8008d7a:	d103      	bne.n	8008d84 <_strtod_l+0xa44>
 8008d7c:	f1b9 0f00 	cmp.w	r9, #0
 8008d80:	f43f ad8a 	beq.w	8008898 <_strtod_l+0x558>
 8008d84:	4b47      	ldr	r3, [pc, #284]	; (8008ea4 <_strtod_l+0xb64>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	e79e      	b.n	8008cc8 <_strtod_l+0x988>
 8008d8a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008d8e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8008d92:	f1ba 0f00 	cmp.w	sl, #0
 8008d96:	d104      	bne.n	8008da2 <_strtod_l+0xa62>
 8008d98:	eeb1 7b4d 	vneg.f64	d7, d13
 8008d9c:	ec53 2b17 	vmov	r2, r3, d7
 8008da0:	e794      	b.n	8008ccc <_strtod_l+0x98c>
 8008da2:	eeb0 7b4d 	vmov.f64	d7, d13
 8008da6:	e7f9      	b.n	8008d9c <_strtod_l+0xa5c>
 8008da8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008dac:	9b04      	ldr	r3, [sp, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1ba      	bne.n	8008d28 <_strtod_l+0x9e8>
 8008db2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008db6:	0d1b      	lsrs	r3, r3, #20
 8008db8:	051b      	lsls	r3, r3, #20
 8008dba:	4299      	cmp	r1, r3
 8008dbc:	d1b4      	bne.n	8008d28 <_strtod_l+0x9e8>
 8008dbe:	ec51 0b1d 	vmov	r0, r1, d13
 8008dc2:	f7f7 fc69 	bl	8000698 <__aeabi_d2lz>
 8008dc6:	f7f7 fc21 	bl	800060c <__aeabi_l2d>
 8008dca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008dce:	ec41 0b17 	vmov	d7, r0, r1
 8008dd2:	ea43 0308 	orr.w	r3, r3, r8
 8008dd6:	ea53 030a 	orrs.w	r3, r3, sl
 8008dda:	ee3d db47 	vsub.f64	d13, d13, d7
 8008dde:	d03c      	beq.n	8008e5a <_strtod_l+0xb1a>
 8008de0:	eeb4 dbca 	vcmpe.f64	d13, d10
 8008de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de8:	f53f acf0 	bmi.w	80087cc <_strtod_l+0x48c>
 8008dec:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8008df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008df4:	dd98      	ble.n	8008d28 <_strtod_l+0x9e8>
 8008df6:	e4e9      	b.n	80087cc <_strtod_l+0x48c>
 8008df8:	9804      	ldr	r0, [sp, #16]
 8008dfa:	b1f0      	cbz	r0, 8008e3a <_strtod_l+0xafa>
 8008dfc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8008e00:	d81b      	bhi.n	8008e3a <_strtod_l+0xafa>
 8008e02:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008e88 <_strtod_l+0xb48>
 8008e06:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8008e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e0e:	d811      	bhi.n	8008e34 <_strtod_l+0xaf4>
 8008e10:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8008e14:	ee1d 3a10 	vmov	r3, s26
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	bf38      	it	cc
 8008e1c:	2301      	movcc	r3, #1
 8008e1e:	ee0d 3a10 	vmov	s26, r3
 8008e22:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8008e26:	f1ba 0f00 	cmp.w	sl, #0
 8008e2a:	d113      	bne.n	8008e54 <_strtod_l+0xb14>
 8008e2c:	eeb1 7b4d 	vneg.f64	d7, d13
 8008e30:	ec53 2b17 	vmov	r2, r3, d7
 8008e34:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8008e38:	1a43      	subs	r3, r0, r1
 8008e3a:	eeb0 0b48 	vmov.f64	d0, d8
 8008e3e:	ec43 2b1c 	vmov	d12, r2, r3
 8008e42:	910a      	str	r1, [sp, #40]	; 0x28
 8008e44:	f001 fdc4 	bl	800a9d0 <__ulp>
 8008e48:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e4a:	eeac 8b00 	vfma.f64	d8, d12, d0
 8008e4e:	ec59 8b18 	vmov	r8, r9, d8
 8008e52:	e7ab      	b.n	8008dac <_strtod_l+0xa6c>
 8008e54:	eeb0 7b4d 	vmov.f64	d7, d13
 8008e58:	e7ea      	b.n	8008e30 <_strtod_l+0xaf0>
 8008e5a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8008e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e62:	f57f af61 	bpl.w	8008d28 <_strtod_l+0x9e8>
 8008e66:	e4b1      	b.n	80087cc <_strtod_l+0x48c>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	9308      	str	r3, [sp, #32]
 8008e6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	f7ff baad 	b.w	80083d0 <_strtod_l+0x90>
 8008e76:	2a65      	cmp	r2, #101	; 0x65
 8008e78:	f43f ab9f 	beq.w	80085ba <_strtod_l+0x27a>
 8008e7c:	2a45      	cmp	r2, #69	; 0x45
 8008e7e:	f43f ab9c 	beq.w	80085ba <_strtod_l+0x27a>
 8008e82:	2101      	movs	r1, #1
 8008e84:	f7ff bbd4 	b.w	8008630 <_strtod_l+0x2f0>
 8008e88:	ffc00000 	.word	0xffc00000
 8008e8c:	41dfffff 	.word	0x41dfffff
 8008e90:	000fffff 	.word	0x000fffff
 8008e94:	7ff00000 	.word	0x7ff00000
 8008e98:	7fefffff 	.word	0x7fefffff
 8008e9c:	3ff00000 	.word	0x3ff00000
 8008ea0:	7c9fffff 	.word	0x7c9fffff
 8008ea4:	bff00000 	.word	0xbff00000
 8008ea8:	7fe00000 	.word	0x7fe00000

08008eac <_strtod_r>:
 8008eac:	4b01      	ldr	r3, [pc, #4]	; (8008eb4 <_strtod_r+0x8>)
 8008eae:	f7ff ba47 	b.w	8008340 <_strtod_l>
 8008eb2:	bf00      	nop
 8008eb4:	2000008c 	.word	0x2000008c

08008eb8 <_strtol_l.constprop.0>:
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ebe:	d001      	beq.n	8008ec4 <_strtol_l.constprop.0+0xc>
 8008ec0:	2b24      	cmp	r3, #36	; 0x24
 8008ec2:	d906      	bls.n	8008ed2 <_strtol_l.constprop.0+0x1a>
 8008ec4:	f7fe fb6c 	bl	80075a0 <__errno>
 8008ec8:	2316      	movs	r3, #22
 8008eca:	6003      	str	r3, [r0, #0]
 8008ecc:	2000      	movs	r0, #0
 8008ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008fb8 <_strtol_l.constprop.0+0x100>
 8008ed6:	460d      	mov	r5, r1
 8008ed8:	462e      	mov	r6, r5
 8008eda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ede:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008ee2:	f017 0708 	ands.w	r7, r7, #8
 8008ee6:	d1f7      	bne.n	8008ed8 <_strtol_l.constprop.0+0x20>
 8008ee8:	2c2d      	cmp	r4, #45	; 0x2d
 8008eea:	d132      	bne.n	8008f52 <_strtol_l.constprop.0+0x9a>
 8008eec:	782c      	ldrb	r4, [r5, #0]
 8008eee:	2701      	movs	r7, #1
 8008ef0:	1cb5      	adds	r5, r6, #2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d05b      	beq.n	8008fae <_strtol_l.constprop.0+0xf6>
 8008ef6:	2b10      	cmp	r3, #16
 8008ef8:	d109      	bne.n	8008f0e <_strtol_l.constprop.0+0x56>
 8008efa:	2c30      	cmp	r4, #48	; 0x30
 8008efc:	d107      	bne.n	8008f0e <_strtol_l.constprop.0+0x56>
 8008efe:	782c      	ldrb	r4, [r5, #0]
 8008f00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008f04:	2c58      	cmp	r4, #88	; 0x58
 8008f06:	d14d      	bne.n	8008fa4 <_strtol_l.constprop.0+0xec>
 8008f08:	786c      	ldrb	r4, [r5, #1]
 8008f0a:	2310      	movs	r3, #16
 8008f0c:	3502      	adds	r5, #2
 8008f0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008f12:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f16:	f04f 0c00 	mov.w	ip, #0
 8008f1a:	fbb8 f9f3 	udiv	r9, r8, r3
 8008f1e:	4666      	mov	r6, ip
 8008f20:	fb03 8a19 	mls	sl, r3, r9, r8
 8008f24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008f28:	f1be 0f09 	cmp.w	lr, #9
 8008f2c:	d816      	bhi.n	8008f5c <_strtol_l.constprop.0+0xa4>
 8008f2e:	4674      	mov	r4, lr
 8008f30:	42a3      	cmp	r3, r4
 8008f32:	dd24      	ble.n	8008f7e <_strtol_l.constprop.0+0xc6>
 8008f34:	f1bc 0f00 	cmp.w	ip, #0
 8008f38:	db1e      	blt.n	8008f78 <_strtol_l.constprop.0+0xc0>
 8008f3a:	45b1      	cmp	r9, r6
 8008f3c:	d31c      	bcc.n	8008f78 <_strtol_l.constprop.0+0xc0>
 8008f3e:	d101      	bne.n	8008f44 <_strtol_l.constprop.0+0x8c>
 8008f40:	45a2      	cmp	sl, r4
 8008f42:	db19      	blt.n	8008f78 <_strtol_l.constprop.0+0xc0>
 8008f44:	fb06 4603 	mla	r6, r6, r3, r4
 8008f48:	f04f 0c01 	mov.w	ip, #1
 8008f4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f50:	e7e8      	b.n	8008f24 <_strtol_l.constprop.0+0x6c>
 8008f52:	2c2b      	cmp	r4, #43	; 0x2b
 8008f54:	bf04      	itt	eq
 8008f56:	782c      	ldrbeq	r4, [r5, #0]
 8008f58:	1cb5      	addeq	r5, r6, #2
 8008f5a:	e7ca      	b.n	8008ef2 <_strtol_l.constprop.0+0x3a>
 8008f5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008f60:	f1be 0f19 	cmp.w	lr, #25
 8008f64:	d801      	bhi.n	8008f6a <_strtol_l.constprop.0+0xb2>
 8008f66:	3c37      	subs	r4, #55	; 0x37
 8008f68:	e7e2      	b.n	8008f30 <_strtol_l.constprop.0+0x78>
 8008f6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008f6e:	f1be 0f19 	cmp.w	lr, #25
 8008f72:	d804      	bhi.n	8008f7e <_strtol_l.constprop.0+0xc6>
 8008f74:	3c57      	subs	r4, #87	; 0x57
 8008f76:	e7db      	b.n	8008f30 <_strtol_l.constprop.0+0x78>
 8008f78:	f04f 3cff 	mov.w	ip, #4294967295
 8008f7c:	e7e6      	b.n	8008f4c <_strtol_l.constprop.0+0x94>
 8008f7e:	f1bc 0f00 	cmp.w	ip, #0
 8008f82:	da05      	bge.n	8008f90 <_strtol_l.constprop.0+0xd8>
 8008f84:	2322      	movs	r3, #34	; 0x22
 8008f86:	6003      	str	r3, [r0, #0]
 8008f88:	4646      	mov	r6, r8
 8008f8a:	b942      	cbnz	r2, 8008f9e <_strtol_l.constprop.0+0xe6>
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	e79e      	b.n	8008ece <_strtol_l.constprop.0+0x16>
 8008f90:	b107      	cbz	r7, 8008f94 <_strtol_l.constprop.0+0xdc>
 8008f92:	4276      	negs	r6, r6
 8008f94:	2a00      	cmp	r2, #0
 8008f96:	d0f9      	beq.n	8008f8c <_strtol_l.constprop.0+0xd4>
 8008f98:	f1bc 0f00 	cmp.w	ip, #0
 8008f9c:	d000      	beq.n	8008fa0 <_strtol_l.constprop.0+0xe8>
 8008f9e:	1e69      	subs	r1, r5, #1
 8008fa0:	6011      	str	r1, [r2, #0]
 8008fa2:	e7f3      	b.n	8008f8c <_strtol_l.constprop.0+0xd4>
 8008fa4:	2430      	movs	r4, #48	; 0x30
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1b1      	bne.n	8008f0e <_strtol_l.constprop.0+0x56>
 8008faa:	2308      	movs	r3, #8
 8008fac:	e7af      	b.n	8008f0e <_strtol_l.constprop.0+0x56>
 8008fae:	2c30      	cmp	r4, #48	; 0x30
 8008fb0:	d0a5      	beq.n	8008efe <_strtol_l.constprop.0+0x46>
 8008fb2:	230a      	movs	r3, #10
 8008fb4:	e7ab      	b.n	8008f0e <_strtol_l.constprop.0+0x56>
 8008fb6:	bf00      	nop
 8008fb8:	0800be01 	.word	0x0800be01

08008fbc <_strtol_r>:
 8008fbc:	f7ff bf7c 	b.w	8008eb8 <_strtol_l.constprop.0>

08008fc0 <quorem>:
 8008fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc4:	6903      	ldr	r3, [r0, #16]
 8008fc6:	690c      	ldr	r4, [r1, #16]
 8008fc8:	42a3      	cmp	r3, r4
 8008fca:	4607      	mov	r7, r0
 8008fcc:	f2c0 8081 	blt.w	80090d2 <quorem+0x112>
 8008fd0:	3c01      	subs	r4, #1
 8008fd2:	f101 0814 	add.w	r8, r1, #20
 8008fd6:	f100 0514 	add.w	r5, r0, #20
 8008fda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fde:	9301      	str	r3, [sp, #4]
 8008fe0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fe4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	429a      	cmp	r2, r3
 8008fec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ff0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ff4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ff8:	d331      	bcc.n	800905e <quorem+0x9e>
 8008ffa:	f04f 0e00 	mov.w	lr, #0
 8008ffe:	4640      	mov	r0, r8
 8009000:	46ac      	mov	ip, r5
 8009002:	46f2      	mov	sl, lr
 8009004:	f850 2b04 	ldr.w	r2, [r0], #4
 8009008:	b293      	uxth	r3, r2
 800900a:	fb06 e303 	mla	r3, r6, r3, lr
 800900e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009012:	b29b      	uxth	r3, r3
 8009014:	ebaa 0303 	sub.w	r3, sl, r3
 8009018:	f8dc a000 	ldr.w	sl, [ip]
 800901c:	0c12      	lsrs	r2, r2, #16
 800901e:	fa13 f38a 	uxtah	r3, r3, sl
 8009022:	fb06 e202 	mla	r2, r6, r2, lr
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	9b00      	ldr	r3, [sp, #0]
 800902a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800902e:	b292      	uxth	r2, r2
 8009030:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009034:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009038:	f8bd 3000 	ldrh.w	r3, [sp]
 800903c:	4581      	cmp	r9, r0
 800903e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009042:	f84c 3b04 	str.w	r3, [ip], #4
 8009046:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800904a:	d2db      	bcs.n	8009004 <quorem+0x44>
 800904c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009050:	b92b      	cbnz	r3, 800905e <quorem+0x9e>
 8009052:	9b01      	ldr	r3, [sp, #4]
 8009054:	3b04      	subs	r3, #4
 8009056:	429d      	cmp	r5, r3
 8009058:	461a      	mov	r2, r3
 800905a:	d32e      	bcc.n	80090ba <quorem+0xfa>
 800905c:	613c      	str	r4, [r7, #16]
 800905e:	4638      	mov	r0, r7
 8009060:	f001 fc10 	bl	800a884 <__mcmp>
 8009064:	2800      	cmp	r0, #0
 8009066:	db24      	blt.n	80090b2 <quorem+0xf2>
 8009068:	3601      	adds	r6, #1
 800906a:	4628      	mov	r0, r5
 800906c:	f04f 0c00 	mov.w	ip, #0
 8009070:	f858 2b04 	ldr.w	r2, [r8], #4
 8009074:	f8d0 e000 	ldr.w	lr, [r0]
 8009078:	b293      	uxth	r3, r2
 800907a:	ebac 0303 	sub.w	r3, ip, r3
 800907e:	0c12      	lsrs	r2, r2, #16
 8009080:	fa13 f38e 	uxtah	r3, r3, lr
 8009084:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009088:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800908c:	b29b      	uxth	r3, r3
 800908e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009092:	45c1      	cmp	r9, r8
 8009094:	f840 3b04 	str.w	r3, [r0], #4
 8009098:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800909c:	d2e8      	bcs.n	8009070 <quorem+0xb0>
 800909e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090a6:	b922      	cbnz	r2, 80090b2 <quorem+0xf2>
 80090a8:	3b04      	subs	r3, #4
 80090aa:	429d      	cmp	r5, r3
 80090ac:	461a      	mov	r2, r3
 80090ae:	d30a      	bcc.n	80090c6 <quorem+0x106>
 80090b0:	613c      	str	r4, [r7, #16]
 80090b2:	4630      	mov	r0, r6
 80090b4:	b003      	add	sp, #12
 80090b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ba:	6812      	ldr	r2, [r2, #0]
 80090bc:	3b04      	subs	r3, #4
 80090be:	2a00      	cmp	r2, #0
 80090c0:	d1cc      	bne.n	800905c <quorem+0x9c>
 80090c2:	3c01      	subs	r4, #1
 80090c4:	e7c7      	b.n	8009056 <quorem+0x96>
 80090c6:	6812      	ldr	r2, [r2, #0]
 80090c8:	3b04      	subs	r3, #4
 80090ca:	2a00      	cmp	r2, #0
 80090cc:	d1f0      	bne.n	80090b0 <quorem+0xf0>
 80090ce:	3c01      	subs	r4, #1
 80090d0:	e7eb      	b.n	80090aa <quorem+0xea>
 80090d2:	2000      	movs	r0, #0
 80090d4:	e7ee      	b.n	80090b4 <quorem+0xf4>
	...

080090d8 <_dtoa_r>:
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	ed2d 8b02 	vpush	{d8}
 80090e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80090e2:	b091      	sub	sp, #68	; 0x44
 80090e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090e8:	ec59 8b10 	vmov	r8, r9, d0
 80090ec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80090ee:	9106      	str	r1, [sp, #24]
 80090f0:	4606      	mov	r6, r0
 80090f2:	9208      	str	r2, [sp, #32]
 80090f4:	930c      	str	r3, [sp, #48]	; 0x30
 80090f6:	b975      	cbnz	r5, 8009116 <_dtoa_r+0x3e>
 80090f8:	2010      	movs	r0, #16
 80090fa:	f001 f8cf 	bl	800a29c <malloc>
 80090fe:	4602      	mov	r2, r0
 8009100:	6270      	str	r0, [r6, #36]	; 0x24
 8009102:	b920      	cbnz	r0, 800910e <_dtoa_r+0x36>
 8009104:	4baa      	ldr	r3, [pc, #680]	; (80093b0 <_dtoa_r+0x2d8>)
 8009106:	21ea      	movs	r1, #234	; 0xea
 8009108:	48aa      	ldr	r0, [pc, #680]	; (80093b4 <_dtoa_r+0x2dc>)
 800910a:	f002 f83b 	bl	800b184 <__assert_func>
 800910e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009112:	6005      	str	r5, [r0, #0]
 8009114:	60c5      	str	r5, [r0, #12]
 8009116:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009118:	6819      	ldr	r1, [r3, #0]
 800911a:	b151      	cbz	r1, 8009132 <_dtoa_r+0x5a>
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	604a      	str	r2, [r1, #4]
 8009120:	2301      	movs	r3, #1
 8009122:	4093      	lsls	r3, r2
 8009124:	608b      	str	r3, [r1, #8]
 8009126:	4630      	mov	r0, r6
 8009128:	f001 f920 	bl	800a36c <_Bfree>
 800912c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800912e:	2200      	movs	r2, #0
 8009130:	601a      	str	r2, [r3, #0]
 8009132:	f1b9 0300 	subs.w	r3, r9, #0
 8009136:	bfbb      	ittet	lt
 8009138:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800913c:	9303      	strlt	r3, [sp, #12]
 800913e:	2300      	movge	r3, #0
 8009140:	2201      	movlt	r2, #1
 8009142:	bfac      	ite	ge
 8009144:	6023      	strge	r3, [r4, #0]
 8009146:	6022      	strlt	r2, [r4, #0]
 8009148:	4b9b      	ldr	r3, [pc, #620]	; (80093b8 <_dtoa_r+0x2e0>)
 800914a:	9c03      	ldr	r4, [sp, #12]
 800914c:	43a3      	bics	r3, r4
 800914e:	d11c      	bne.n	800918a <_dtoa_r+0xb2>
 8009150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009152:	f242 730f 	movw	r3, #9999	; 0x270f
 8009156:	6013      	str	r3, [r2, #0]
 8009158:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800915c:	ea53 0308 	orrs.w	r3, r3, r8
 8009160:	f000 84fd 	beq.w	8009b5e <_dtoa_r+0xa86>
 8009164:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009166:	b963      	cbnz	r3, 8009182 <_dtoa_r+0xaa>
 8009168:	4b94      	ldr	r3, [pc, #592]	; (80093bc <_dtoa_r+0x2e4>)
 800916a:	e01f      	b.n	80091ac <_dtoa_r+0xd4>
 800916c:	4b94      	ldr	r3, [pc, #592]	; (80093c0 <_dtoa_r+0x2e8>)
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	3308      	adds	r3, #8
 8009172:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009174:	6013      	str	r3, [r2, #0]
 8009176:	9801      	ldr	r0, [sp, #4]
 8009178:	b011      	add	sp, #68	; 0x44
 800917a:	ecbd 8b02 	vpop	{d8}
 800917e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009182:	4b8e      	ldr	r3, [pc, #568]	; (80093bc <_dtoa_r+0x2e4>)
 8009184:	9301      	str	r3, [sp, #4]
 8009186:	3303      	adds	r3, #3
 8009188:	e7f3      	b.n	8009172 <_dtoa_r+0x9a>
 800918a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800918e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009196:	d10b      	bne.n	80091b0 <_dtoa_r+0xd8>
 8009198:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800919a:	2301      	movs	r3, #1
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 84d9 	beq.w	8009b58 <_dtoa_r+0xa80>
 80091a6:	4887      	ldr	r0, [pc, #540]	; (80093c4 <_dtoa_r+0x2ec>)
 80091a8:	6018      	str	r0, [r3, #0]
 80091aa:	1e43      	subs	r3, r0, #1
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	e7e2      	b.n	8009176 <_dtoa_r+0x9e>
 80091b0:	a90f      	add	r1, sp, #60	; 0x3c
 80091b2:	aa0e      	add	r2, sp, #56	; 0x38
 80091b4:	4630      	mov	r0, r6
 80091b6:	eeb0 0b48 	vmov.f64	d0, d8
 80091ba:	f001 fc85 	bl	800aac8 <__d2b>
 80091be:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80091c2:	4605      	mov	r5, r0
 80091c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80091c6:	2900      	cmp	r1, #0
 80091c8:	d046      	beq.n	8009258 <_dtoa_r+0x180>
 80091ca:	ee18 4a90 	vmov	r4, s17
 80091ce:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80091d2:	ec53 2b18 	vmov	r2, r3, d8
 80091d6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80091da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80091de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80091e2:	2400      	movs	r4, #0
 80091e4:	ec43 2b16 	vmov	d6, r2, r3
 80091e8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80091ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009398 <_dtoa_r+0x2c0>
 80091f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80091f4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80093a0 <_dtoa_r+0x2c8>
 80091f8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80091fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80093a8 <_dtoa_r+0x2d0>
 8009200:	ee07 1a90 	vmov	s15, r1
 8009204:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009208:	eeb0 7b46 	vmov.f64	d7, d6
 800920c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009210:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009214:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800921c:	ee16 ba90 	vmov	fp, s13
 8009220:	940a      	str	r4, [sp, #40]	; 0x28
 8009222:	d508      	bpl.n	8009236 <_dtoa_r+0x15e>
 8009224:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009228:	eeb4 6b47 	vcmp.f64	d6, d7
 800922c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009230:	bf18      	it	ne
 8009232:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009236:	f1bb 0f16 	cmp.w	fp, #22
 800923a:	d82f      	bhi.n	800929c <_dtoa_r+0x1c4>
 800923c:	4b62      	ldr	r3, [pc, #392]	; (80093c8 <_dtoa_r+0x2f0>)
 800923e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009242:	ed93 7b00 	vldr	d7, [r3]
 8009246:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800924a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800924e:	d501      	bpl.n	8009254 <_dtoa_r+0x17c>
 8009250:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009254:	2300      	movs	r3, #0
 8009256:	e022      	b.n	800929e <_dtoa_r+0x1c6>
 8009258:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800925a:	4401      	add	r1, r0
 800925c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009260:	2b20      	cmp	r3, #32
 8009262:	bfc1      	itttt	gt
 8009264:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009268:	fa04 f303 	lslgt.w	r3, r4, r3
 800926c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009270:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009274:	bfd6      	itet	le
 8009276:	f1c3 0320 	rsble	r3, r3, #32
 800927a:	ea43 0808 	orrgt.w	r8, r3, r8
 800927e:	fa08 f803 	lslle.w	r8, r8, r3
 8009282:	ee07 8a90 	vmov	s15, r8
 8009286:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800928a:	3901      	subs	r1, #1
 800928c:	ee17 4a90 	vmov	r4, s15
 8009290:	ec53 2b17 	vmov	r2, r3, d7
 8009294:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009298:	2401      	movs	r4, #1
 800929a:	e7a3      	b.n	80091e4 <_dtoa_r+0x10c>
 800929c:	2301      	movs	r3, #1
 800929e:	930b      	str	r3, [sp, #44]	; 0x2c
 80092a0:	1a43      	subs	r3, r0, r1
 80092a2:	1e5a      	subs	r2, r3, #1
 80092a4:	bf45      	ittet	mi
 80092a6:	f1c3 0301 	rsbmi	r3, r3, #1
 80092aa:	9304      	strmi	r3, [sp, #16]
 80092ac:	2300      	movpl	r3, #0
 80092ae:	2300      	movmi	r3, #0
 80092b0:	9205      	str	r2, [sp, #20]
 80092b2:	bf54      	ite	pl
 80092b4:	9304      	strpl	r3, [sp, #16]
 80092b6:	9305      	strmi	r3, [sp, #20]
 80092b8:	f1bb 0f00 	cmp.w	fp, #0
 80092bc:	db18      	blt.n	80092f0 <_dtoa_r+0x218>
 80092be:	9b05      	ldr	r3, [sp, #20]
 80092c0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80092c4:	445b      	add	r3, fp
 80092c6:	9305      	str	r3, [sp, #20]
 80092c8:	2300      	movs	r3, #0
 80092ca:	9a06      	ldr	r2, [sp, #24]
 80092cc:	2a09      	cmp	r2, #9
 80092ce:	d849      	bhi.n	8009364 <_dtoa_r+0x28c>
 80092d0:	2a05      	cmp	r2, #5
 80092d2:	bfc4      	itt	gt
 80092d4:	3a04      	subgt	r2, #4
 80092d6:	9206      	strgt	r2, [sp, #24]
 80092d8:	9a06      	ldr	r2, [sp, #24]
 80092da:	f1a2 0202 	sub.w	r2, r2, #2
 80092de:	bfcc      	ite	gt
 80092e0:	2400      	movgt	r4, #0
 80092e2:	2401      	movle	r4, #1
 80092e4:	2a03      	cmp	r2, #3
 80092e6:	d848      	bhi.n	800937a <_dtoa_r+0x2a2>
 80092e8:	e8df f002 	tbb	[pc, r2]
 80092ec:	3a2c2e0b 	.word	0x3a2c2e0b
 80092f0:	9b04      	ldr	r3, [sp, #16]
 80092f2:	2200      	movs	r2, #0
 80092f4:	eba3 030b 	sub.w	r3, r3, fp
 80092f8:	9304      	str	r3, [sp, #16]
 80092fa:	9209      	str	r2, [sp, #36]	; 0x24
 80092fc:	f1cb 0300 	rsb	r3, fp, #0
 8009300:	e7e3      	b.n	80092ca <_dtoa_r+0x1f2>
 8009302:	2200      	movs	r2, #0
 8009304:	9207      	str	r2, [sp, #28]
 8009306:	9a08      	ldr	r2, [sp, #32]
 8009308:	2a00      	cmp	r2, #0
 800930a:	dc39      	bgt.n	8009380 <_dtoa_r+0x2a8>
 800930c:	f04f 0a01 	mov.w	sl, #1
 8009310:	46d1      	mov	r9, sl
 8009312:	4652      	mov	r2, sl
 8009314:	f8cd a020 	str.w	sl, [sp, #32]
 8009318:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800931a:	2100      	movs	r1, #0
 800931c:	6079      	str	r1, [r7, #4]
 800931e:	2004      	movs	r0, #4
 8009320:	f100 0c14 	add.w	ip, r0, #20
 8009324:	4594      	cmp	ip, r2
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	d92f      	bls.n	800938a <_dtoa_r+0x2b2>
 800932a:	4630      	mov	r0, r6
 800932c:	930d      	str	r3, [sp, #52]	; 0x34
 800932e:	f000 ffdd 	bl	800a2ec <_Balloc>
 8009332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009334:	9001      	str	r0, [sp, #4]
 8009336:	4602      	mov	r2, r0
 8009338:	2800      	cmp	r0, #0
 800933a:	d149      	bne.n	80093d0 <_dtoa_r+0x2f8>
 800933c:	4b23      	ldr	r3, [pc, #140]	; (80093cc <_dtoa_r+0x2f4>)
 800933e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009342:	e6e1      	b.n	8009108 <_dtoa_r+0x30>
 8009344:	2201      	movs	r2, #1
 8009346:	e7dd      	b.n	8009304 <_dtoa_r+0x22c>
 8009348:	2200      	movs	r2, #0
 800934a:	9207      	str	r2, [sp, #28]
 800934c:	9a08      	ldr	r2, [sp, #32]
 800934e:	eb0b 0a02 	add.w	sl, fp, r2
 8009352:	f10a 0901 	add.w	r9, sl, #1
 8009356:	464a      	mov	r2, r9
 8009358:	2a01      	cmp	r2, #1
 800935a:	bfb8      	it	lt
 800935c:	2201      	movlt	r2, #1
 800935e:	e7db      	b.n	8009318 <_dtoa_r+0x240>
 8009360:	2201      	movs	r2, #1
 8009362:	e7f2      	b.n	800934a <_dtoa_r+0x272>
 8009364:	2401      	movs	r4, #1
 8009366:	2200      	movs	r2, #0
 8009368:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800936c:	f04f 3aff 	mov.w	sl, #4294967295
 8009370:	2100      	movs	r1, #0
 8009372:	46d1      	mov	r9, sl
 8009374:	2212      	movs	r2, #18
 8009376:	9108      	str	r1, [sp, #32]
 8009378:	e7ce      	b.n	8009318 <_dtoa_r+0x240>
 800937a:	2201      	movs	r2, #1
 800937c:	9207      	str	r2, [sp, #28]
 800937e:	e7f5      	b.n	800936c <_dtoa_r+0x294>
 8009380:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009384:	46d1      	mov	r9, sl
 8009386:	4652      	mov	r2, sl
 8009388:	e7c6      	b.n	8009318 <_dtoa_r+0x240>
 800938a:	3101      	adds	r1, #1
 800938c:	6079      	str	r1, [r7, #4]
 800938e:	0040      	lsls	r0, r0, #1
 8009390:	e7c6      	b.n	8009320 <_dtoa_r+0x248>
 8009392:	bf00      	nop
 8009394:	f3af 8000 	nop.w
 8009398:	636f4361 	.word	0x636f4361
 800939c:	3fd287a7 	.word	0x3fd287a7
 80093a0:	8b60c8b3 	.word	0x8b60c8b3
 80093a4:	3fc68a28 	.word	0x3fc68a28
 80093a8:	509f79fb 	.word	0x509f79fb
 80093ac:	3fd34413 	.word	0x3fd34413
 80093b0:	0800bf0e 	.word	0x0800bf0e
 80093b4:	0800bf25 	.word	0x0800bf25
 80093b8:	7ff00000 	.word	0x7ff00000
 80093bc:	0800bf0a 	.word	0x0800bf0a
 80093c0:	0800bf01 	.word	0x0800bf01
 80093c4:	0800bd85 	.word	0x0800bd85
 80093c8:	0800c090 	.word	0x0800c090
 80093cc:	0800bf80 	.word	0x0800bf80
 80093d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80093d2:	9901      	ldr	r1, [sp, #4]
 80093d4:	6011      	str	r1, [r2, #0]
 80093d6:	f1b9 0f0e 	cmp.w	r9, #14
 80093da:	d86c      	bhi.n	80094b6 <_dtoa_r+0x3de>
 80093dc:	2c00      	cmp	r4, #0
 80093de:	d06a      	beq.n	80094b6 <_dtoa_r+0x3de>
 80093e0:	f1bb 0f00 	cmp.w	fp, #0
 80093e4:	f340 80a0 	ble.w	8009528 <_dtoa_r+0x450>
 80093e8:	49c1      	ldr	r1, [pc, #772]	; (80096f0 <_dtoa_r+0x618>)
 80093ea:	f00b 020f 	and.w	r2, fp, #15
 80093ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80093f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80093f6:	ed92 7b00 	vldr	d7, [r2]
 80093fa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80093fe:	f000 8087 	beq.w	8009510 <_dtoa_r+0x438>
 8009402:	4abc      	ldr	r2, [pc, #752]	; (80096f4 <_dtoa_r+0x61c>)
 8009404:	ed92 6b08 	vldr	d6, [r2, #32]
 8009408:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800940c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009410:	f001 010f 	and.w	r1, r1, #15
 8009414:	2203      	movs	r2, #3
 8009416:	48b7      	ldr	r0, [pc, #732]	; (80096f4 <_dtoa_r+0x61c>)
 8009418:	2900      	cmp	r1, #0
 800941a:	d17b      	bne.n	8009514 <_dtoa_r+0x43c>
 800941c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009420:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009424:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009428:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800942a:	2900      	cmp	r1, #0
 800942c:	f000 80a2 	beq.w	8009574 <_dtoa_r+0x49c>
 8009430:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009434:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009438:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800943c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009440:	f140 8098 	bpl.w	8009574 <_dtoa_r+0x49c>
 8009444:	f1b9 0f00 	cmp.w	r9, #0
 8009448:	f000 8094 	beq.w	8009574 <_dtoa_r+0x49c>
 800944c:	f1ba 0f00 	cmp.w	sl, #0
 8009450:	dd2f      	ble.n	80094b2 <_dtoa_r+0x3da>
 8009452:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009456:	ee27 7b06 	vmul.f64	d7, d7, d6
 800945a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800945e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009462:	3201      	adds	r2, #1
 8009464:	4650      	mov	r0, sl
 8009466:	ed9d 6b02 	vldr	d6, [sp, #8]
 800946a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800946e:	ee07 2a90 	vmov	s15, r2
 8009472:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009476:	eea7 5b06 	vfma.f64	d5, d7, d6
 800947a:	ee15 4a90 	vmov	r4, s11
 800947e:	ec52 1b15 	vmov	r1, r2, d5
 8009482:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009486:	2800      	cmp	r0, #0
 8009488:	d177      	bne.n	800957a <_dtoa_r+0x4a2>
 800948a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800948e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009492:	ec42 1b17 	vmov	d7, r1, r2
 8009496:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800949a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800949e:	f300 8263 	bgt.w	8009968 <_dtoa_r+0x890>
 80094a2:	eeb1 7b47 	vneg.f64	d7, d7
 80094a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80094aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ae:	f100 8258 	bmi.w	8009962 <_dtoa_r+0x88a>
 80094b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80094b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094b8:	2a00      	cmp	r2, #0
 80094ba:	f2c0 811d 	blt.w	80096f8 <_dtoa_r+0x620>
 80094be:	f1bb 0f0e 	cmp.w	fp, #14
 80094c2:	f300 8119 	bgt.w	80096f8 <_dtoa_r+0x620>
 80094c6:	4b8a      	ldr	r3, [pc, #552]	; (80096f0 <_dtoa_r+0x618>)
 80094c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80094cc:	ed93 6b00 	vldr	d6, [r3]
 80094d0:	9b08      	ldr	r3, [sp, #32]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f280 80b7 	bge.w	8009646 <_dtoa_r+0x56e>
 80094d8:	f1b9 0f00 	cmp.w	r9, #0
 80094dc:	f300 80b3 	bgt.w	8009646 <_dtoa_r+0x56e>
 80094e0:	f040 823f 	bne.w	8009962 <_dtoa_r+0x88a>
 80094e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80094e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80094ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80094f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f8:	464c      	mov	r4, r9
 80094fa:	464f      	mov	r7, r9
 80094fc:	f280 8215 	bge.w	800992a <_dtoa_r+0x852>
 8009500:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009504:	2331      	movs	r3, #49	; 0x31
 8009506:	f808 3b01 	strb.w	r3, [r8], #1
 800950a:	f10b 0b01 	add.w	fp, fp, #1
 800950e:	e211      	b.n	8009934 <_dtoa_r+0x85c>
 8009510:	2202      	movs	r2, #2
 8009512:	e780      	b.n	8009416 <_dtoa_r+0x33e>
 8009514:	07cc      	lsls	r4, r1, #31
 8009516:	d504      	bpl.n	8009522 <_dtoa_r+0x44a>
 8009518:	ed90 6b00 	vldr	d6, [r0]
 800951c:	3201      	adds	r2, #1
 800951e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009522:	1049      	asrs	r1, r1, #1
 8009524:	3008      	adds	r0, #8
 8009526:	e777      	b.n	8009418 <_dtoa_r+0x340>
 8009528:	d022      	beq.n	8009570 <_dtoa_r+0x498>
 800952a:	f1cb 0100 	rsb	r1, fp, #0
 800952e:	4a70      	ldr	r2, [pc, #448]	; (80096f0 <_dtoa_r+0x618>)
 8009530:	f001 000f 	and.w	r0, r1, #15
 8009534:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009538:	ed92 7b00 	vldr	d7, [r2]
 800953c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009540:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009544:	486b      	ldr	r0, [pc, #428]	; (80096f4 <_dtoa_r+0x61c>)
 8009546:	1109      	asrs	r1, r1, #4
 8009548:	2400      	movs	r4, #0
 800954a:	2202      	movs	r2, #2
 800954c:	b929      	cbnz	r1, 800955a <_dtoa_r+0x482>
 800954e:	2c00      	cmp	r4, #0
 8009550:	f43f af6a 	beq.w	8009428 <_dtoa_r+0x350>
 8009554:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009558:	e766      	b.n	8009428 <_dtoa_r+0x350>
 800955a:	07cf      	lsls	r7, r1, #31
 800955c:	d505      	bpl.n	800956a <_dtoa_r+0x492>
 800955e:	ed90 6b00 	vldr	d6, [r0]
 8009562:	3201      	adds	r2, #1
 8009564:	2401      	movs	r4, #1
 8009566:	ee27 7b06 	vmul.f64	d7, d7, d6
 800956a:	1049      	asrs	r1, r1, #1
 800956c:	3008      	adds	r0, #8
 800956e:	e7ed      	b.n	800954c <_dtoa_r+0x474>
 8009570:	2202      	movs	r2, #2
 8009572:	e759      	b.n	8009428 <_dtoa_r+0x350>
 8009574:	465f      	mov	r7, fp
 8009576:	4648      	mov	r0, r9
 8009578:	e775      	b.n	8009466 <_dtoa_r+0x38e>
 800957a:	ec42 1b17 	vmov	d7, r1, r2
 800957e:	4a5c      	ldr	r2, [pc, #368]	; (80096f0 <_dtoa_r+0x618>)
 8009580:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009584:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009588:	9a01      	ldr	r2, [sp, #4]
 800958a:	1814      	adds	r4, r2, r0
 800958c:	9a07      	ldr	r2, [sp, #28]
 800958e:	b352      	cbz	r2, 80095e6 <_dtoa_r+0x50e>
 8009590:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009594:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009598:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800959c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80095a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80095a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80095a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80095ac:	ee14 2a90 	vmov	r2, s9
 80095b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80095b4:	3230      	adds	r2, #48	; 0x30
 80095b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80095ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80095be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c2:	f808 2b01 	strb.w	r2, [r8], #1
 80095c6:	d439      	bmi.n	800963c <_dtoa_r+0x564>
 80095c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80095cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80095d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d4:	d472      	bmi.n	80096bc <_dtoa_r+0x5e4>
 80095d6:	45a0      	cmp	r8, r4
 80095d8:	f43f af6b 	beq.w	80094b2 <_dtoa_r+0x3da>
 80095dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80095e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80095e4:	e7e0      	b.n	80095a8 <_dtoa_r+0x4d0>
 80095e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80095ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80095ee:	4621      	mov	r1, r4
 80095f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80095f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80095f8:	ee14 2a90 	vmov	r2, s9
 80095fc:	3230      	adds	r2, #48	; 0x30
 80095fe:	f808 2b01 	strb.w	r2, [r8], #1
 8009602:	45a0      	cmp	r8, r4
 8009604:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009608:	ee36 6b45 	vsub.f64	d6, d6, d5
 800960c:	d118      	bne.n	8009640 <_dtoa_r+0x568>
 800960e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009612:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009616:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800961a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800961e:	dc4d      	bgt.n	80096bc <_dtoa_r+0x5e4>
 8009620:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009624:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800962c:	f57f af41 	bpl.w	80094b2 <_dtoa_r+0x3da>
 8009630:	4688      	mov	r8, r1
 8009632:	3901      	subs	r1, #1
 8009634:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009638:	2b30      	cmp	r3, #48	; 0x30
 800963a:	d0f9      	beq.n	8009630 <_dtoa_r+0x558>
 800963c:	46bb      	mov	fp, r7
 800963e:	e02a      	b.n	8009696 <_dtoa_r+0x5be>
 8009640:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009644:	e7d6      	b.n	80095f4 <_dtoa_r+0x51c>
 8009646:	ed9d 7b02 	vldr	d7, [sp, #8]
 800964a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800964e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009652:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009656:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800965a:	ee15 3a10 	vmov	r3, s10
 800965e:	3330      	adds	r3, #48	; 0x30
 8009660:	f808 3b01 	strb.w	r3, [r8], #1
 8009664:	9b01      	ldr	r3, [sp, #4]
 8009666:	eba8 0303 	sub.w	r3, r8, r3
 800966a:	4599      	cmp	r9, r3
 800966c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009670:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009674:	d133      	bne.n	80096de <_dtoa_r+0x606>
 8009676:	ee37 7b07 	vadd.f64	d7, d7, d7
 800967a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800967e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009682:	dc1a      	bgt.n	80096ba <_dtoa_r+0x5e2>
 8009684:	eeb4 7b46 	vcmp.f64	d7, d6
 8009688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800968c:	d103      	bne.n	8009696 <_dtoa_r+0x5be>
 800968e:	ee15 3a10 	vmov	r3, s10
 8009692:	07d9      	lsls	r1, r3, #31
 8009694:	d411      	bmi.n	80096ba <_dtoa_r+0x5e2>
 8009696:	4629      	mov	r1, r5
 8009698:	4630      	mov	r0, r6
 800969a:	f000 fe67 	bl	800a36c <_Bfree>
 800969e:	2300      	movs	r3, #0
 80096a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096a2:	f888 3000 	strb.w	r3, [r8]
 80096a6:	f10b 0301 	add.w	r3, fp, #1
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f43f ad61 	beq.w	8009176 <_dtoa_r+0x9e>
 80096b4:	f8c3 8000 	str.w	r8, [r3]
 80096b8:	e55d      	b.n	8009176 <_dtoa_r+0x9e>
 80096ba:	465f      	mov	r7, fp
 80096bc:	4643      	mov	r3, r8
 80096be:	4698      	mov	r8, r3
 80096c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096c4:	2a39      	cmp	r2, #57	; 0x39
 80096c6:	d106      	bne.n	80096d6 <_dtoa_r+0x5fe>
 80096c8:	9a01      	ldr	r2, [sp, #4]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d1f7      	bne.n	80096be <_dtoa_r+0x5e6>
 80096ce:	9901      	ldr	r1, [sp, #4]
 80096d0:	2230      	movs	r2, #48	; 0x30
 80096d2:	3701      	adds	r7, #1
 80096d4:	700a      	strb	r2, [r1, #0]
 80096d6:	781a      	ldrb	r2, [r3, #0]
 80096d8:	3201      	adds	r2, #1
 80096da:	701a      	strb	r2, [r3, #0]
 80096dc:	e7ae      	b.n	800963c <_dtoa_r+0x564>
 80096de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80096e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80096e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ea:	d1b2      	bne.n	8009652 <_dtoa_r+0x57a>
 80096ec:	e7d3      	b.n	8009696 <_dtoa_r+0x5be>
 80096ee:	bf00      	nop
 80096f0:	0800c090 	.word	0x0800c090
 80096f4:	0800c068 	.word	0x0800c068
 80096f8:	9907      	ldr	r1, [sp, #28]
 80096fa:	2900      	cmp	r1, #0
 80096fc:	f000 80d0 	beq.w	80098a0 <_dtoa_r+0x7c8>
 8009700:	9906      	ldr	r1, [sp, #24]
 8009702:	2901      	cmp	r1, #1
 8009704:	f300 80b4 	bgt.w	8009870 <_dtoa_r+0x798>
 8009708:	990a      	ldr	r1, [sp, #40]	; 0x28
 800970a:	2900      	cmp	r1, #0
 800970c:	f000 80ac 	beq.w	8009868 <_dtoa_r+0x790>
 8009710:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009714:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009718:	461c      	mov	r4, r3
 800971a:	930a      	str	r3, [sp, #40]	; 0x28
 800971c:	9b04      	ldr	r3, [sp, #16]
 800971e:	4413      	add	r3, r2
 8009720:	9304      	str	r3, [sp, #16]
 8009722:	9b05      	ldr	r3, [sp, #20]
 8009724:	2101      	movs	r1, #1
 8009726:	4413      	add	r3, r2
 8009728:	4630      	mov	r0, r6
 800972a:	9305      	str	r3, [sp, #20]
 800972c:	f000 ff20 	bl	800a570 <__i2b>
 8009730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009732:	4607      	mov	r7, r0
 8009734:	f1b8 0f00 	cmp.w	r8, #0
 8009738:	dd0d      	ble.n	8009756 <_dtoa_r+0x67e>
 800973a:	9a05      	ldr	r2, [sp, #20]
 800973c:	2a00      	cmp	r2, #0
 800973e:	dd0a      	ble.n	8009756 <_dtoa_r+0x67e>
 8009740:	4542      	cmp	r2, r8
 8009742:	9904      	ldr	r1, [sp, #16]
 8009744:	bfa8      	it	ge
 8009746:	4642      	movge	r2, r8
 8009748:	1a89      	subs	r1, r1, r2
 800974a:	9104      	str	r1, [sp, #16]
 800974c:	9905      	ldr	r1, [sp, #20]
 800974e:	eba8 0802 	sub.w	r8, r8, r2
 8009752:	1a8a      	subs	r2, r1, r2
 8009754:	9205      	str	r2, [sp, #20]
 8009756:	b303      	cbz	r3, 800979a <_dtoa_r+0x6c2>
 8009758:	9a07      	ldr	r2, [sp, #28]
 800975a:	2a00      	cmp	r2, #0
 800975c:	f000 80a5 	beq.w	80098aa <_dtoa_r+0x7d2>
 8009760:	2c00      	cmp	r4, #0
 8009762:	dd13      	ble.n	800978c <_dtoa_r+0x6b4>
 8009764:	4639      	mov	r1, r7
 8009766:	4622      	mov	r2, r4
 8009768:	4630      	mov	r0, r6
 800976a:	930d      	str	r3, [sp, #52]	; 0x34
 800976c:	f000 ffc0 	bl	800a6f0 <__pow5mult>
 8009770:	462a      	mov	r2, r5
 8009772:	4601      	mov	r1, r0
 8009774:	4607      	mov	r7, r0
 8009776:	4630      	mov	r0, r6
 8009778:	f000 ff10 	bl	800a59c <__multiply>
 800977c:	4629      	mov	r1, r5
 800977e:	900a      	str	r0, [sp, #40]	; 0x28
 8009780:	4630      	mov	r0, r6
 8009782:	f000 fdf3 	bl	800a36c <_Bfree>
 8009786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009788:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800978a:	4615      	mov	r5, r2
 800978c:	1b1a      	subs	r2, r3, r4
 800978e:	d004      	beq.n	800979a <_dtoa_r+0x6c2>
 8009790:	4629      	mov	r1, r5
 8009792:	4630      	mov	r0, r6
 8009794:	f000 ffac 	bl	800a6f0 <__pow5mult>
 8009798:	4605      	mov	r5, r0
 800979a:	2101      	movs	r1, #1
 800979c:	4630      	mov	r0, r6
 800979e:	f000 fee7 	bl	800a570 <__i2b>
 80097a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	4604      	mov	r4, r0
 80097a8:	f340 8081 	ble.w	80098ae <_dtoa_r+0x7d6>
 80097ac:	461a      	mov	r2, r3
 80097ae:	4601      	mov	r1, r0
 80097b0:	4630      	mov	r0, r6
 80097b2:	f000 ff9d 	bl	800a6f0 <__pow5mult>
 80097b6:	9b06      	ldr	r3, [sp, #24]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	4604      	mov	r4, r0
 80097bc:	dd7a      	ble.n	80098b4 <_dtoa_r+0x7dc>
 80097be:	2300      	movs	r3, #0
 80097c0:	930a      	str	r3, [sp, #40]	; 0x28
 80097c2:	6922      	ldr	r2, [r4, #16]
 80097c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80097c8:	6910      	ldr	r0, [r2, #16]
 80097ca:	f000 fe81 	bl	800a4d0 <__hi0bits>
 80097ce:	f1c0 0020 	rsb	r0, r0, #32
 80097d2:	9b05      	ldr	r3, [sp, #20]
 80097d4:	4418      	add	r0, r3
 80097d6:	f010 001f 	ands.w	r0, r0, #31
 80097da:	f000 808c 	beq.w	80098f6 <_dtoa_r+0x81e>
 80097de:	f1c0 0220 	rsb	r2, r0, #32
 80097e2:	2a04      	cmp	r2, #4
 80097e4:	f340 8085 	ble.w	80098f2 <_dtoa_r+0x81a>
 80097e8:	f1c0 001c 	rsb	r0, r0, #28
 80097ec:	9b04      	ldr	r3, [sp, #16]
 80097ee:	4403      	add	r3, r0
 80097f0:	9304      	str	r3, [sp, #16]
 80097f2:	9b05      	ldr	r3, [sp, #20]
 80097f4:	4403      	add	r3, r0
 80097f6:	4480      	add	r8, r0
 80097f8:	9305      	str	r3, [sp, #20]
 80097fa:	9b04      	ldr	r3, [sp, #16]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	dd05      	ble.n	800980c <_dtoa_r+0x734>
 8009800:	4629      	mov	r1, r5
 8009802:	461a      	mov	r2, r3
 8009804:	4630      	mov	r0, r6
 8009806:	f000 ffcd 	bl	800a7a4 <__lshift>
 800980a:	4605      	mov	r5, r0
 800980c:	9b05      	ldr	r3, [sp, #20]
 800980e:	2b00      	cmp	r3, #0
 8009810:	dd05      	ble.n	800981e <_dtoa_r+0x746>
 8009812:	4621      	mov	r1, r4
 8009814:	461a      	mov	r2, r3
 8009816:	4630      	mov	r0, r6
 8009818:	f000 ffc4 	bl	800a7a4 <__lshift>
 800981c:	4604      	mov	r4, r0
 800981e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009820:	2b00      	cmp	r3, #0
 8009822:	d06a      	beq.n	80098fa <_dtoa_r+0x822>
 8009824:	4621      	mov	r1, r4
 8009826:	4628      	mov	r0, r5
 8009828:	f001 f82c 	bl	800a884 <__mcmp>
 800982c:	2800      	cmp	r0, #0
 800982e:	da64      	bge.n	80098fa <_dtoa_r+0x822>
 8009830:	2300      	movs	r3, #0
 8009832:	4629      	mov	r1, r5
 8009834:	220a      	movs	r2, #10
 8009836:	4630      	mov	r0, r6
 8009838:	f000 fdba 	bl	800a3b0 <__multadd>
 800983c:	9b07      	ldr	r3, [sp, #28]
 800983e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009842:	4605      	mov	r5, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	f000 8191 	beq.w	8009b6c <_dtoa_r+0xa94>
 800984a:	4639      	mov	r1, r7
 800984c:	2300      	movs	r3, #0
 800984e:	220a      	movs	r2, #10
 8009850:	4630      	mov	r0, r6
 8009852:	f000 fdad 	bl	800a3b0 <__multadd>
 8009856:	f1ba 0f00 	cmp.w	sl, #0
 800985a:	4607      	mov	r7, r0
 800985c:	f300 808d 	bgt.w	800997a <_dtoa_r+0x8a2>
 8009860:	9b06      	ldr	r3, [sp, #24]
 8009862:	2b02      	cmp	r3, #2
 8009864:	dc50      	bgt.n	8009908 <_dtoa_r+0x830>
 8009866:	e088      	b.n	800997a <_dtoa_r+0x8a2>
 8009868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800986a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800986e:	e751      	b.n	8009714 <_dtoa_r+0x63c>
 8009870:	f109 34ff 	add.w	r4, r9, #4294967295
 8009874:	42a3      	cmp	r3, r4
 8009876:	bfbf      	itttt	lt
 8009878:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800987a:	1ae3      	sublt	r3, r4, r3
 800987c:	18d2      	addlt	r2, r2, r3
 800987e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009880:	bfb6      	itet	lt
 8009882:	4623      	movlt	r3, r4
 8009884:	1b1c      	subge	r4, r3, r4
 8009886:	2400      	movlt	r4, #0
 8009888:	f1b9 0f00 	cmp.w	r9, #0
 800988c:	bfb5      	itete	lt
 800988e:	9a04      	ldrlt	r2, [sp, #16]
 8009890:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009894:	eba2 0809 	sublt.w	r8, r2, r9
 8009898:	464a      	movge	r2, r9
 800989a:	bfb8      	it	lt
 800989c:	2200      	movlt	r2, #0
 800989e:	e73c      	b.n	800971a <_dtoa_r+0x642>
 80098a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80098a4:	9f07      	ldr	r7, [sp, #28]
 80098a6:	461c      	mov	r4, r3
 80098a8:	e744      	b.n	8009734 <_dtoa_r+0x65c>
 80098aa:	461a      	mov	r2, r3
 80098ac:	e770      	b.n	8009790 <_dtoa_r+0x6b8>
 80098ae:	9b06      	ldr	r3, [sp, #24]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	dc18      	bgt.n	80098e6 <_dtoa_r+0x80e>
 80098b4:	9b02      	ldr	r3, [sp, #8]
 80098b6:	b9b3      	cbnz	r3, 80098e6 <_dtoa_r+0x80e>
 80098b8:	9b03      	ldr	r3, [sp, #12]
 80098ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80098be:	b9a2      	cbnz	r2, 80098ea <_dtoa_r+0x812>
 80098c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80098c4:	0d12      	lsrs	r2, r2, #20
 80098c6:	0512      	lsls	r2, r2, #20
 80098c8:	b18a      	cbz	r2, 80098ee <_dtoa_r+0x816>
 80098ca:	9b04      	ldr	r3, [sp, #16]
 80098cc:	3301      	adds	r3, #1
 80098ce:	9304      	str	r3, [sp, #16]
 80098d0:	9b05      	ldr	r3, [sp, #20]
 80098d2:	3301      	adds	r3, #1
 80098d4:	9305      	str	r3, [sp, #20]
 80098d6:	2301      	movs	r3, #1
 80098d8:	930a      	str	r3, [sp, #40]	; 0x28
 80098da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f47f af70 	bne.w	80097c2 <_dtoa_r+0x6ea>
 80098e2:	2001      	movs	r0, #1
 80098e4:	e775      	b.n	80097d2 <_dtoa_r+0x6fa>
 80098e6:	2300      	movs	r3, #0
 80098e8:	e7f6      	b.n	80098d8 <_dtoa_r+0x800>
 80098ea:	9b02      	ldr	r3, [sp, #8]
 80098ec:	e7f4      	b.n	80098d8 <_dtoa_r+0x800>
 80098ee:	920a      	str	r2, [sp, #40]	; 0x28
 80098f0:	e7f3      	b.n	80098da <_dtoa_r+0x802>
 80098f2:	d082      	beq.n	80097fa <_dtoa_r+0x722>
 80098f4:	4610      	mov	r0, r2
 80098f6:	301c      	adds	r0, #28
 80098f8:	e778      	b.n	80097ec <_dtoa_r+0x714>
 80098fa:	f1b9 0f00 	cmp.w	r9, #0
 80098fe:	dc37      	bgt.n	8009970 <_dtoa_r+0x898>
 8009900:	9b06      	ldr	r3, [sp, #24]
 8009902:	2b02      	cmp	r3, #2
 8009904:	dd34      	ble.n	8009970 <_dtoa_r+0x898>
 8009906:	46ca      	mov	sl, r9
 8009908:	f1ba 0f00 	cmp.w	sl, #0
 800990c:	d10d      	bne.n	800992a <_dtoa_r+0x852>
 800990e:	4621      	mov	r1, r4
 8009910:	4653      	mov	r3, sl
 8009912:	2205      	movs	r2, #5
 8009914:	4630      	mov	r0, r6
 8009916:	f000 fd4b 	bl	800a3b0 <__multadd>
 800991a:	4601      	mov	r1, r0
 800991c:	4604      	mov	r4, r0
 800991e:	4628      	mov	r0, r5
 8009920:	f000 ffb0 	bl	800a884 <__mcmp>
 8009924:	2800      	cmp	r0, #0
 8009926:	f73f adeb 	bgt.w	8009500 <_dtoa_r+0x428>
 800992a:	9b08      	ldr	r3, [sp, #32]
 800992c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009930:	ea6f 0b03 	mvn.w	fp, r3
 8009934:	f04f 0900 	mov.w	r9, #0
 8009938:	4621      	mov	r1, r4
 800993a:	4630      	mov	r0, r6
 800993c:	f000 fd16 	bl	800a36c <_Bfree>
 8009940:	2f00      	cmp	r7, #0
 8009942:	f43f aea8 	beq.w	8009696 <_dtoa_r+0x5be>
 8009946:	f1b9 0f00 	cmp.w	r9, #0
 800994a:	d005      	beq.n	8009958 <_dtoa_r+0x880>
 800994c:	45b9      	cmp	r9, r7
 800994e:	d003      	beq.n	8009958 <_dtoa_r+0x880>
 8009950:	4649      	mov	r1, r9
 8009952:	4630      	mov	r0, r6
 8009954:	f000 fd0a 	bl	800a36c <_Bfree>
 8009958:	4639      	mov	r1, r7
 800995a:	4630      	mov	r0, r6
 800995c:	f000 fd06 	bl	800a36c <_Bfree>
 8009960:	e699      	b.n	8009696 <_dtoa_r+0x5be>
 8009962:	2400      	movs	r4, #0
 8009964:	4627      	mov	r7, r4
 8009966:	e7e0      	b.n	800992a <_dtoa_r+0x852>
 8009968:	46bb      	mov	fp, r7
 800996a:	4604      	mov	r4, r0
 800996c:	4607      	mov	r7, r0
 800996e:	e5c7      	b.n	8009500 <_dtoa_r+0x428>
 8009970:	9b07      	ldr	r3, [sp, #28]
 8009972:	46ca      	mov	sl, r9
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 8100 	beq.w	8009b7a <_dtoa_r+0xaa2>
 800997a:	f1b8 0f00 	cmp.w	r8, #0
 800997e:	dd05      	ble.n	800998c <_dtoa_r+0x8b4>
 8009980:	4639      	mov	r1, r7
 8009982:	4642      	mov	r2, r8
 8009984:	4630      	mov	r0, r6
 8009986:	f000 ff0d 	bl	800a7a4 <__lshift>
 800998a:	4607      	mov	r7, r0
 800998c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800998e:	2b00      	cmp	r3, #0
 8009990:	d05d      	beq.n	8009a4e <_dtoa_r+0x976>
 8009992:	6879      	ldr	r1, [r7, #4]
 8009994:	4630      	mov	r0, r6
 8009996:	f000 fca9 	bl	800a2ec <_Balloc>
 800999a:	4680      	mov	r8, r0
 800999c:	b928      	cbnz	r0, 80099aa <_dtoa_r+0x8d2>
 800999e:	4b82      	ldr	r3, [pc, #520]	; (8009ba8 <_dtoa_r+0xad0>)
 80099a0:	4602      	mov	r2, r0
 80099a2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80099a6:	f7ff bbaf 	b.w	8009108 <_dtoa_r+0x30>
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	3202      	adds	r2, #2
 80099ae:	0092      	lsls	r2, r2, #2
 80099b0:	f107 010c 	add.w	r1, r7, #12
 80099b4:	300c      	adds	r0, #12
 80099b6:	f000 fc8b 	bl	800a2d0 <memcpy>
 80099ba:	2201      	movs	r2, #1
 80099bc:	4641      	mov	r1, r8
 80099be:	4630      	mov	r0, r6
 80099c0:	f000 fef0 	bl	800a7a4 <__lshift>
 80099c4:	9b01      	ldr	r3, [sp, #4]
 80099c6:	3301      	adds	r3, #1
 80099c8:	9304      	str	r3, [sp, #16]
 80099ca:	9b01      	ldr	r3, [sp, #4]
 80099cc:	4453      	add	r3, sl
 80099ce:	9308      	str	r3, [sp, #32]
 80099d0:	9b02      	ldr	r3, [sp, #8]
 80099d2:	f003 0301 	and.w	r3, r3, #1
 80099d6:	46b9      	mov	r9, r7
 80099d8:	9307      	str	r3, [sp, #28]
 80099da:	4607      	mov	r7, r0
 80099dc:	9b04      	ldr	r3, [sp, #16]
 80099de:	4621      	mov	r1, r4
 80099e0:	3b01      	subs	r3, #1
 80099e2:	4628      	mov	r0, r5
 80099e4:	9302      	str	r3, [sp, #8]
 80099e6:	f7ff faeb 	bl	8008fc0 <quorem>
 80099ea:	4603      	mov	r3, r0
 80099ec:	3330      	adds	r3, #48	; 0x30
 80099ee:	9005      	str	r0, [sp, #20]
 80099f0:	4649      	mov	r1, r9
 80099f2:	4628      	mov	r0, r5
 80099f4:	9309      	str	r3, [sp, #36]	; 0x24
 80099f6:	f000 ff45 	bl	800a884 <__mcmp>
 80099fa:	463a      	mov	r2, r7
 80099fc:	4682      	mov	sl, r0
 80099fe:	4621      	mov	r1, r4
 8009a00:	4630      	mov	r0, r6
 8009a02:	f000 ff5b 	bl	800a8bc <__mdiff>
 8009a06:	68c2      	ldr	r2, [r0, #12]
 8009a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a0a:	4680      	mov	r8, r0
 8009a0c:	bb0a      	cbnz	r2, 8009a52 <_dtoa_r+0x97a>
 8009a0e:	4601      	mov	r1, r0
 8009a10:	4628      	mov	r0, r5
 8009a12:	f000 ff37 	bl	800a884 <__mcmp>
 8009a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a18:	4602      	mov	r2, r0
 8009a1a:	4641      	mov	r1, r8
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009a22:	f000 fca3 	bl	800a36c <_Bfree>
 8009a26:	9b06      	ldr	r3, [sp, #24]
 8009a28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a2a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009a2e:	ea43 0102 	orr.w	r1, r3, r2
 8009a32:	9b07      	ldr	r3, [sp, #28]
 8009a34:	430b      	orrs	r3, r1
 8009a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a38:	d10d      	bne.n	8009a56 <_dtoa_r+0x97e>
 8009a3a:	2b39      	cmp	r3, #57	; 0x39
 8009a3c:	d029      	beq.n	8009a92 <_dtoa_r+0x9ba>
 8009a3e:	f1ba 0f00 	cmp.w	sl, #0
 8009a42:	dd01      	ble.n	8009a48 <_dtoa_r+0x970>
 8009a44:	9b05      	ldr	r3, [sp, #20]
 8009a46:	3331      	adds	r3, #49	; 0x31
 8009a48:	9a02      	ldr	r2, [sp, #8]
 8009a4a:	7013      	strb	r3, [r2, #0]
 8009a4c:	e774      	b.n	8009938 <_dtoa_r+0x860>
 8009a4e:	4638      	mov	r0, r7
 8009a50:	e7b8      	b.n	80099c4 <_dtoa_r+0x8ec>
 8009a52:	2201      	movs	r2, #1
 8009a54:	e7e1      	b.n	8009a1a <_dtoa_r+0x942>
 8009a56:	f1ba 0f00 	cmp.w	sl, #0
 8009a5a:	db06      	blt.n	8009a6a <_dtoa_r+0x992>
 8009a5c:	9906      	ldr	r1, [sp, #24]
 8009a5e:	ea41 0a0a 	orr.w	sl, r1, sl
 8009a62:	9907      	ldr	r1, [sp, #28]
 8009a64:	ea5a 0101 	orrs.w	r1, sl, r1
 8009a68:	d120      	bne.n	8009aac <_dtoa_r+0x9d4>
 8009a6a:	2a00      	cmp	r2, #0
 8009a6c:	ddec      	ble.n	8009a48 <_dtoa_r+0x970>
 8009a6e:	4629      	mov	r1, r5
 8009a70:	2201      	movs	r2, #1
 8009a72:	4630      	mov	r0, r6
 8009a74:	9304      	str	r3, [sp, #16]
 8009a76:	f000 fe95 	bl	800a7a4 <__lshift>
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	4605      	mov	r5, r0
 8009a7e:	f000 ff01 	bl	800a884 <__mcmp>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	9b04      	ldr	r3, [sp, #16]
 8009a86:	dc02      	bgt.n	8009a8e <_dtoa_r+0x9b6>
 8009a88:	d1de      	bne.n	8009a48 <_dtoa_r+0x970>
 8009a8a:	07da      	lsls	r2, r3, #31
 8009a8c:	d5dc      	bpl.n	8009a48 <_dtoa_r+0x970>
 8009a8e:	2b39      	cmp	r3, #57	; 0x39
 8009a90:	d1d8      	bne.n	8009a44 <_dtoa_r+0x96c>
 8009a92:	9a02      	ldr	r2, [sp, #8]
 8009a94:	2339      	movs	r3, #57	; 0x39
 8009a96:	7013      	strb	r3, [r2, #0]
 8009a98:	4643      	mov	r3, r8
 8009a9a:	4698      	mov	r8, r3
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009aa2:	2a39      	cmp	r2, #57	; 0x39
 8009aa4:	d051      	beq.n	8009b4a <_dtoa_r+0xa72>
 8009aa6:	3201      	adds	r2, #1
 8009aa8:	701a      	strb	r2, [r3, #0]
 8009aaa:	e745      	b.n	8009938 <_dtoa_r+0x860>
 8009aac:	2a00      	cmp	r2, #0
 8009aae:	dd03      	ble.n	8009ab8 <_dtoa_r+0x9e0>
 8009ab0:	2b39      	cmp	r3, #57	; 0x39
 8009ab2:	d0ee      	beq.n	8009a92 <_dtoa_r+0x9ba>
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	e7c7      	b.n	8009a48 <_dtoa_r+0x970>
 8009ab8:	9a04      	ldr	r2, [sp, #16]
 8009aba:	9908      	ldr	r1, [sp, #32]
 8009abc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009ac0:	428a      	cmp	r2, r1
 8009ac2:	d02b      	beq.n	8009b1c <_dtoa_r+0xa44>
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	220a      	movs	r2, #10
 8009aca:	4630      	mov	r0, r6
 8009acc:	f000 fc70 	bl	800a3b0 <__multadd>
 8009ad0:	45b9      	cmp	r9, r7
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	f04f 0300 	mov.w	r3, #0
 8009ad8:	f04f 020a 	mov.w	r2, #10
 8009adc:	4649      	mov	r1, r9
 8009ade:	4630      	mov	r0, r6
 8009ae0:	d107      	bne.n	8009af2 <_dtoa_r+0xa1a>
 8009ae2:	f000 fc65 	bl	800a3b0 <__multadd>
 8009ae6:	4681      	mov	r9, r0
 8009ae8:	4607      	mov	r7, r0
 8009aea:	9b04      	ldr	r3, [sp, #16]
 8009aec:	3301      	adds	r3, #1
 8009aee:	9304      	str	r3, [sp, #16]
 8009af0:	e774      	b.n	80099dc <_dtoa_r+0x904>
 8009af2:	f000 fc5d 	bl	800a3b0 <__multadd>
 8009af6:	4639      	mov	r1, r7
 8009af8:	4681      	mov	r9, r0
 8009afa:	2300      	movs	r3, #0
 8009afc:	220a      	movs	r2, #10
 8009afe:	4630      	mov	r0, r6
 8009b00:	f000 fc56 	bl	800a3b0 <__multadd>
 8009b04:	4607      	mov	r7, r0
 8009b06:	e7f0      	b.n	8009aea <_dtoa_r+0xa12>
 8009b08:	f1ba 0f00 	cmp.w	sl, #0
 8009b0c:	9a01      	ldr	r2, [sp, #4]
 8009b0e:	bfcc      	ite	gt
 8009b10:	46d0      	movgt	r8, sl
 8009b12:	f04f 0801 	movle.w	r8, #1
 8009b16:	4490      	add	r8, r2
 8009b18:	f04f 0900 	mov.w	r9, #0
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	2201      	movs	r2, #1
 8009b20:	4630      	mov	r0, r6
 8009b22:	9302      	str	r3, [sp, #8]
 8009b24:	f000 fe3e 	bl	800a7a4 <__lshift>
 8009b28:	4621      	mov	r1, r4
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	f000 feaa 	bl	800a884 <__mcmp>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	dcb1      	bgt.n	8009a98 <_dtoa_r+0x9c0>
 8009b34:	d102      	bne.n	8009b3c <_dtoa_r+0xa64>
 8009b36:	9b02      	ldr	r3, [sp, #8]
 8009b38:	07db      	lsls	r3, r3, #31
 8009b3a:	d4ad      	bmi.n	8009a98 <_dtoa_r+0x9c0>
 8009b3c:	4643      	mov	r3, r8
 8009b3e:	4698      	mov	r8, r3
 8009b40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b44:	2a30      	cmp	r2, #48	; 0x30
 8009b46:	d0fa      	beq.n	8009b3e <_dtoa_r+0xa66>
 8009b48:	e6f6      	b.n	8009938 <_dtoa_r+0x860>
 8009b4a:	9a01      	ldr	r2, [sp, #4]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d1a4      	bne.n	8009a9a <_dtoa_r+0x9c2>
 8009b50:	f10b 0b01 	add.w	fp, fp, #1
 8009b54:	2331      	movs	r3, #49	; 0x31
 8009b56:	e778      	b.n	8009a4a <_dtoa_r+0x972>
 8009b58:	4b14      	ldr	r3, [pc, #80]	; (8009bac <_dtoa_r+0xad4>)
 8009b5a:	f7ff bb27 	b.w	80091ac <_dtoa_r+0xd4>
 8009b5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f47f ab03 	bne.w	800916c <_dtoa_r+0x94>
 8009b66:	4b12      	ldr	r3, [pc, #72]	; (8009bb0 <_dtoa_r+0xad8>)
 8009b68:	f7ff bb20 	b.w	80091ac <_dtoa_r+0xd4>
 8009b6c:	f1ba 0f00 	cmp.w	sl, #0
 8009b70:	dc03      	bgt.n	8009b7a <_dtoa_r+0xaa2>
 8009b72:	9b06      	ldr	r3, [sp, #24]
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	f73f aec7 	bgt.w	8009908 <_dtoa_r+0x830>
 8009b7a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b7e:	4621      	mov	r1, r4
 8009b80:	4628      	mov	r0, r5
 8009b82:	f7ff fa1d 	bl	8008fc0 <quorem>
 8009b86:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009b8a:	f808 3b01 	strb.w	r3, [r8], #1
 8009b8e:	9a01      	ldr	r2, [sp, #4]
 8009b90:	eba8 0202 	sub.w	r2, r8, r2
 8009b94:	4592      	cmp	sl, r2
 8009b96:	ddb7      	ble.n	8009b08 <_dtoa_r+0xa30>
 8009b98:	4629      	mov	r1, r5
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	220a      	movs	r2, #10
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	f000 fc06 	bl	800a3b0 <__multadd>
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	e7ea      	b.n	8009b7e <_dtoa_r+0xaa6>
 8009ba8:	0800bf80 	.word	0x0800bf80
 8009bac:	0800bd84 	.word	0x0800bd84
 8009bb0:	0800bf01 	.word	0x0800bf01

08009bb4 <rshift>:
 8009bb4:	6903      	ldr	r3, [r0, #16]
 8009bb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009bba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009bc2:	f100 0414 	add.w	r4, r0, #20
 8009bc6:	dd45      	ble.n	8009c54 <rshift+0xa0>
 8009bc8:	f011 011f 	ands.w	r1, r1, #31
 8009bcc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009bd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009bd4:	d10c      	bne.n	8009bf0 <rshift+0x3c>
 8009bd6:	f100 0710 	add.w	r7, r0, #16
 8009bda:	4629      	mov	r1, r5
 8009bdc:	42b1      	cmp	r1, r6
 8009bde:	d334      	bcc.n	8009c4a <rshift+0x96>
 8009be0:	1a9b      	subs	r3, r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	1eea      	subs	r2, r5, #3
 8009be6:	4296      	cmp	r6, r2
 8009be8:	bf38      	it	cc
 8009bea:	2300      	movcc	r3, #0
 8009bec:	4423      	add	r3, r4
 8009bee:	e015      	b.n	8009c1c <rshift+0x68>
 8009bf0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009bf4:	f1c1 0820 	rsb	r8, r1, #32
 8009bf8:	40cf      	lsrs	r7, r1
 8009bfa:	f105 0e04 	add.w	lr, r5, #4
 8009bfe:	46a1      	mov	r9, r4
 8009c00:	4576      	cmp	r6, lr
 8009c02:	46f4      	mov	ip, lr
 8009c04:	d815      	bhi.n	8009c32 <rshift+0x7e>
 8009c06:	1a9a      	subs	r2, r3, r2
 8009c08:	0092      	lsls	r2, r2, #2
 8009c0a:	3a04      	subs	r2, #4
 8009c0c:	3501      	adds	r5, #1
 8009c0e:	42ae      	cmp	r6, r5
 8009c10:	bf38      	it	cc
 8009c12:	2200      	movcc	r2, #0
 8009c14:	18a3      	adds	r3, r4, r2
 8009c16:	50a7      	str	r7, [r4, r2]
 8009c18:	b107      	cbz	r7, 8009c1c <rshift+0x68>
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	1b1a      	subs	r2, r3, r4
 8009c1e:	42a3      	cmp	r3, r4
 8009c20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c24:	bf08      	it	eq
 8009c26:	2300      	moveq	r3, #0
 8009c28:	6102      	str	r2, [r0, #16]
 8009c2a:	bf08      	it	eq
 8009c2c:	6143      	streq	r3, [r0, #20]
 8009c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c32:	f8dc c000 	ldr.w	ip, [ip]
 8009c36:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c3a:	ea4c 0707 	orr.w	r7, ip, r7
 8009c3e:	f849 7b04 	str.w	r7, [r9], #4
 8009c42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c46:	40cf      	lsrs	r7, r1
 8009c48:	e7da      	b.n	8009c00 <rshift+0x4c>
 8009c4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c52:	e7c3      	b.n	8009bdc <rshift+0x28>
 8009c54:	4623      	mov	r3, r4
 8009c56:	e7e1      	b.n	8009c1c <rshift+0x68>

08009c58 <__hexdig_fun>:
 8009c58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009c5c:	2b09      	cmp	r3, #9
 8009c5e:	d802      	bhi.n	8009c66 <__hexdig_fun+0xe>
 8009c60:	3820      	subs	r0, #32
 8009c62:	b2c0      	uxtb	r0, r0
 8009c64:	4770      	bx	lr
 8009c66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009c6a:	2b05      	cmp	r3, #5
 8009c6c:	d801      	bhi.n	8009c72 <__hexdig_fun+0x1a>
 8009c6e:	3847      	subs	r0, #71	; 0x47
 8009c70:	e7f7      	b.n	8009c62 <__hexdig_fun+0xa>
 8009c72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009c76:	2b05      	cmp	r3, #5
 8009c78:	d801      	bhi.n	8009c7e <__hexdig_fun+0x26>
 8009c7a:	3827      	subs	r0, #39	; 0x27
 8009c7c:	e7f1      	b.n	8009c62 <__hexdig_fun+0xa>
 8009c7e:	2000      	movs	r0, #0
 8009c80:	4770      	bx	lr
	...

08009c84 <__gethex>:
 8009c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c88:	ed2d 8b02 	vpush	{d8}
 8009c8c:	b089      	sub	sp, #36	; 0x24
 8009c8e:	ee08 0a10 	vmov	s16, r0
 8009c92:	9304      	str	r3, [sp, #16]
 8009c94:	4bb4      	ldr	r3, [pc, #720]	; (8009f68 <__gethex+0x2e4>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	468b      	mov	fp, r1
 8009c9e:	4690      	mov	r8, r2
 8009ca0:	f7f6 face 	bl	8000240 <strlen>
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	f8db 2000 	ldr.w	r2, [fp]
 8009caa:	4403      	add	r3, r0
 8009cac:	4682      	mov	sl, r0
 8009cae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009cb2:	9305      	str	r3, [sp, #20]
 8009cb4:	1c93      	adds	r3, r2, #2
 8009cb6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009cba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009cbe:	32fe      	adds	r2, #254	; 0xfe
 8009cc0:	18d1      	adds	r1, r2, r3
 8009cc2:	461f      	mov	r7, r3
 8009cc4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009cc8:	9100      	str	r1, [sp, #0]
 8009cca:	2830      	cmp	r0, #48	; 0x30
 8009ccc:	d0f8      	beq.n	8009cc0 <__gethex+0x3c>
 8009cce:	f7ff ffc3 	bl	8009c58 <__hexdig_fun>
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d13a      	bne.n	8009d4e <__gethex+0xca>
 8009cd8:	9901      	ldr	r1, [sp, #4]
 8009cda:	4652      	mov	r2, sl
 8009cdc:	4638      	mov	r0, r7
 8009cde:	f001 fa2f 	bl	800b140 <strncmp>
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d168      	bne.n	8009dba <__gethex+0x136>
 8009ce8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009cec:	eb07 060a 	add.w	r6, r7, sl
 8009cf0:	f7ff ffb2 	bl	8009c58 <__hexdig_fun>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d062      	beq.n	8009dbe <__gethex+0x13a>
 8009cf8:	4633      	mov	r3, r6
 8009cfa:	7818      	ldrb	r0, [r3, #0]
 8009cfc:	2830      	cmp	r0, #48	; 0x30
 8009cfe:	461f      	mov	r7, r3
 8009d00:	f103 0301 	add.w	r3, r3, #1
 8009d04:	d0f9      	beq.n	8009cfa <__gethex+0x76>
 8009d06:	f7ff ffa7 	bl	8009c58 <__hexdig_fun>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	fab0 f480 	clz	r4, r0
 8009d10:	0964      	lsrs	r4, r4, #5
 8009d12:	4635      	mov	r5, r6
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	463a      	mov	r2, r7
 8009d18:	4616      	mov	r6, r2
 8009d1a:	3201      	adds	r2, #1
 8009d1c:	7830      	ldrb	r0, [r6, #0]
 8009d1e:	f7ff ff9b 	bl	8009c58 <__hexdig_fun>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	d1f8      	bne.n	8009d18 <__gethex+0x94>
 8009d26:	9901      	ldr	r1, [sp, #4]
 8009d28:	4652      	mov	r2, sl
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f001 fa08 	bl	800b140 <strncmp>
 8009d30:	b980      	cbnz	r0, 8009d54 <__gethex+0xd0>
 8009d32:	b94d      	cbnz	r5, 8009d48 <__gethex+0xc4>
 8009d34:	eb06 050a 	add.w	r5, r6, sl
 8009d38:	462a      	mov	r2, r5
 8009d3a:	4616      	mov	r6, r2
 8009d3c:	3201      	adds	r2, #1
 8009d3e:	7830      	ldrb	r0, [r6, #0]
 8009d40:	f7ff ff8a 	bl	8009c58 <__hexdig_fun>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d1f8      	bne.n	8009d3a <__gethex+0xb6>
 8009d48:	1bad      	subs	r5, r5, r6
 8009d4a:	00ad      	lsls	r5, r5, #2
 8009d4c:	e004      	b.n	8009d58 <__gethex+0xd4>
 8009d4e:	2400      	movs	r4, #0
 8009d50:	4625      	mov	r5, r4
 8009d52:	e7e0      	b.n	8009d16 <__gethex+0x92>
 8009d54:	2d00      	cmp	r5, #0
 8009d56:	d1f7      	bne.n	8009d48 <__gethex+0xc4>
 8009d58:	7833      	ldrb	r3, [r6, #0]
 8009d5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d5e:	2b50      	cmp	r3, #80	; 0x50
 8009d60:	d13b      	bne.n	8009dda <__gethex+0x156>
 8009d62:	7873      	ldrb	r3, [r6, #1]
 8009d64:	2b2b      	cmp	r3, #43	; 0x2b
 8009d66:	d02c      	beq.n	8009dc2 <__gethex+0x13e>
 8009d68:	2b2d      	cmp	r3, #45	; 0x2d
 8009d6a:	d02e      	beq.n	8009dca <__gethex+0x146>
 8009d6c:	1c71      	adds	r1, r6, #1
 8009d6e:	f04f 0900 	mov.w	r9, #0
 8009d72:	7808      	ldrb	r0, [r1, #0]
 8009d74:	f7ff ff70 	bl	8009c58 <__hexdig_fun>
 8009d78:	1e43      	subs	r3, r0, #1
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b18      	cmp	r3, #24
 8009d7e:	d82c      	bhi.n	8009dda <__gethex+0x156>
 8009d80:	f1a0 0210 	sub.w	r2, r0, #16
 8009d84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d88:	f7ff ff66 	bl	8009c58 <__hexdig_fun>
 8009d8c:	1e43      	subs	r3, r0, #1
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b18      	cmp	r3, #24
 8009d92:	d91d      	bls.n	8009dd0 <__gethex+0x14c>
 8009d94:	f1b9 0f00 	cmp.w	r9, #0
 8009d98:	d000      	beq.n	8009d9c <__gethex+0x118>
 8009d9a:	4252      	negs	r2, r2
 8009d9c:	4415      	add	r5, r2
 8009d9e:	f8cb 1000 	str.w	r1, [fp]
 8009da2:	b1e4      	cbz	r4, 8009dde <__gethex+0x15a>
 8009da4:	9b00      	ldr	r3, [sp, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	bf14      	ite	ne
 8009daa:	2700      	movne	r7, #0
 8009dac:	2706      	moveq	r7, #6
 8009dae:	4638      	mov	r0, r7
 8009db0:	b009      	add	sp, #36	; 0x24
 8009db2:	ecbd 8b02 	vpop	{d8}
 8009db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dba:	463e      	mov	r6, r7
 8009dbc:	4625      	mov	r5, r4
 8009dbe:	2401      	movs	r4, #1
 8009dc0:	e7ca      	b.n	8009d58 <__gethex+0xd4>
 8009dc2:	f04f 0900 	mov.w	r9, #0
 8009dc6:	1cb1      	adds	r1, r6, #2
 8009dc8:	e7d3      	b.n	8009d72 <__gethex+0xee>
 8009dca:	f04f 0901 	mov.w	r9, #1
 8009dce:	e7fa      	b.n	8009dc6 <__gethex+0x142>
 8009dd0:	230a      	movs	r3, #10
 8009dd2:	fb03 0202 	mla	r2, r3, r2, r0
 8009dd6:	3a10      	subs	r2, #16
 8009dd8:	e7d4      	b.n	8009d84 <__gethex+0x100>
 8009dda:	4631      	mov	r1, r6
 8009ddc:	e7df      	b.n	8009d9e <__gethex+0x11a>
 8009dde:	1bf3      	subs	r3, r6, r7
 8009de0:	3b01      	subs	r3, #1
 8009de2:	4621      	mov	r1, r4
 8009de4:	2b07      	cmp	r3, #7
 8009de6:	dc0b      	bgt.n	8009e00 <__gethex+0x17c>
 8009de8:	ee18 0a10 	vmov	r0, s16
 8009dec:	f000 fa7e 	bl	800a2ec <_Balloc>
 8009df0:	4604      	mov	r4, r0
 8009df2:	b940      	cbnz	r0, 8009e06 <__gethex+0x182>
 8009df4:	4b5d      	ldr	r3, [pc, #372]	; (8009f6c <__gethex+0x2e8>)
 8009df6:	4602      	mov	r2, r0
 8009df8:	21de      	movs	r1, #222	; 0xde
 8009dfa:	485d      	ldr	r0, [pc, #372]	; (8009f70 <__gethex+0x2ec>)
 8009dfc:	f001 f9c2 	bl	800b184 <__assert_func>
 8009e00:	3101      	adds	r1, #1
 8009e02:	105b      	asrs	r3, r3, #1
 8009e04:	e7ee      	b.n	8009de4 <__gethex+0x160>
 8009e06:	f100 0914 	add.w	r9, r0, #20
 8009e0a:	f04f 0b00 	mov.w	fp, #0
 8009e0e:	f1ca 0301 	rsb	r3, sl, #1
 8009e12:	f8cd 9008 	str.w	r9, [sp, #8]
 8009e16:	f8cd b000 	str.w	fp, [sp]
 8009e1a:	9306      	str	r3, [sp, #24]
 8009e1c:	42b7      	cmp	r7, r6
 8009e1e:	d340      	bcc.n	8009ea2 <__gethex+0x21e>
 8009e20:	9802      	ldr	r0, [sp, #8]
 8009e22:	9b00      	ldr	r3, [sp, #0]
 8009e24:	f840 3b04 	str.w	r3, [r0], #4
 8009e28:	eba0 0009 	sub.w	r0, r0, r9
 8009e2c:	1080      	asrs	r0, r0, #2
 8009e2e:	0146      	lsls	r6, r0, #5
 8009e30:	6120      	str	r0, [r4, #16]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 fb4c 	bl	800a4d0 <__hi0bits>
 8009e38:	1a30      	subs	r0, r6, r0
 8009e3a:	f8d8 6000 	ldr.w	r6, [r8]
 8009e3e:	42b0      	cmp	r0, r6
 8009e40:	dd63      	ble.n	8009f0a <__gethex+0x286>
 8009e42:	1b87      	subs	r7, r0, r6
 8009e44:	4639      	mov	r1, r7
 8009e46:	4620      	mov	r0, r4
 8009e48:	f000 feed 	bl	800ac26 <__any_on>
 8009e4c:	4682      	mov	sl, r0
 8009e4e:	b1a8      	cbz	r0, 8009e7c <__gethex+0x1f8>
 8009e50:	1e7b      	subs	r3, r7, #1
 8009e52:	1159      	asrs	r1, r3, #5
 8009e54:	f003 021f 	and.w	r2, r3, #31
 8009e58:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009e5c:	f04f 0a01 	mov.w	sl, #1
 8009e60:	fa0a f202 	lsl.w	r2, sl, r2
 8009e64:	420a      	tst	r2, r1
 8009e66:	d009      	beq.n	8009e7c <__gethex+0x1f8>
 8009e68:	4553      	cmp	r3, sl
 8009e6a:	dd05      	ble.n	8009e78 <__gethex+0x1f4>
 8009e6c:	1eb9      	subs	r1, r7, #2
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f000 fed9 	bl	800ac26 <__any_on>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d145      	bne.n	8009f04 <__gethex+0x280>
 8009e78:	f04f 0a02 	mov.w	sl, #2
 8009e7c:	4639      	mov	r1, r7
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f7ff fe98 	bl	8009bb4 <rshift>
 8009e84:	443d      	add	r5, r7
 8009e86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e8a:	42ab      	cmp	r3, r5
 8009e8c:	da4c      	bge.n	8009f28 <__gethex+0x2a4>
 8009e8e:	ee18 0a10 	vmov	r0, s16
 8009e92:	4621      	mov	r1, r4
 8009e94:	f000 fa6a 	bl	800a36c <_Bfree>
 8009e98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	27a3      	movs	r7, #163	; 0xa3
 8009ea0:	e785      	b.n	8009dae <__gethex+0x12a>
 8009ea2:	1e73      	subs	r3, r6, #1
 8009ea4:	9a05      	ldr	r2, [sp, #20]
 8009ea6:	9303      	str	r3, [sp, #12]
 8009ea8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d019      	beq.n	8009ee4 <__gethex+0x260>
 8009eb0:	f1bb 0f20 	cmp.w	fp, #32
 8009eb4:	d107      	bne.n	8009ec6 <__gethex+0x242>
 8009eb6:	9b02      	ldr	r3, [sp, #8]
 8009eb8:	9a00      	ldr	r2, [sp, #0]
 8009eba:	f843 2b04 	str.w	r2, [r3], #4
 8009ebe:	9302      	str	r3, [sp, #8]
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	469b      	mov	fp, r3
 8009ec6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009eca:	f7ff fec5 	bl	8009c58 <__hexdig_fun>
 8009ece:	9b00      	ldr	r3, [sp, #0]
 8009ed0:	f000 000f 	and.w	r0, r0, #15
 8009ed4:	fa00 f00b 	lsl.w	r0, r0, fp
 8009ed8:	4303      	orrs	r3, r0
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	f10b 0b04 	add.w	fp, fp, #4
 8009ee0:	9b03      	ldr	r3, [sp, #12]
 8009ee2:	e00d      	b.n	8009f00 <__gethex+0x27c>
 8009ee4:	9b03      	ldr	r3, [sp, #12]
 8009ee6:	9a06      	ldr	r2, [sp, #24]
 8009ee8:	4413      	add	r3, r2
 8009eea:	42bb      	cmp	r3, r7
 8009eec:	d3e0      	bcc.n	8009eb0 <__gethex+0x22c>
 8009eee:	4618      	mov	r0, r3
 8009ef0:	9901      	ldr	r1, [sp, #4]
 8009ef2:	9307      	str	r3, [sp, #28]
 8009ef4:	4652      	mov	r2, sl
 8009ef6:	f001 f923 	bl	800b140 <strncmp>
 8009efa:	9b07      	ldr	r3, [sp, #28]
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d1d7      	bne.n	8009eb0 <__gethex+0x22c>
 8009f00:	461e      	mov	r6, r3
 8009f02:	e78b      	b.n	8009e1c <__gethex+0x198>
 8009f04:	f04f 0a03 	mov.w	sl, #3
 8009f08:	e7b8      	b.n	8009e7c <__gethex+0x1f8>
 8009f0a:	da0a      	bge.n	8009f22 <__gethex+0x29e>
 8009f0c:	1a37      	subs	r7, r6, r0
 8009f0e:	4621      	mov	r1, r4
 8009f10:	ee18 0a10 	vmov	r0, s16
 8009f14:	463a      	mov	r2, r7
 8009f16:	f000 fc45 	bl	800a7a4 <__lshift>
 8009f1a:	1bed      	subs	r5, r5, r7
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	f100 0914 	add.w	r9, r0, #20
 8009f22:	f04f 0a00 	mov.w	sl, #0
 8009f26:	e7ae      	b.n	8009e86 <__gethex+0x202>
 8009f28:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009f2c:	42a8      	cmp	r0, r5
 8009f2e:	dd72      	ble.n	800a016 <__gethex+0x392>
 8009f30:	1b45      	subs	r5, r0, r5
 8009f32:	42ae      	cmp	r6, r5
 8009f34:	dc36      	bgt.n	8009fa4 <__gethex+0x320>
 8009f36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d02a      	beq.n	8009f94 <__gethex+0x310>
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	d02c      	beq.n	8009f9c <__gethex+0x318>
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d11c      	bne.n	8009f80 <__gethex+0x2fc>
 8009f46:	42ae      	cmp	r6, r5
 8009f48:	d11a      	bne.n	8009f80 <__gethex+0x2fc>
 8009f4a:	2e01      	cmp	r6, #1
 8009f4c:	d112      	bne.n	8009f74 <__gethex+0x2f0>
 8009f4e:	9a04      	ldr	r2, [sp, #16]
 8009f50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f54:	6013      	str	r3, [r2, #0]
 8009f56:	2301      	movs	r3, #1
 8009f58:	6123      	str	r3, [r4, #16]
 8009f5a:	f8c9 3000 	str.w	r3, [r9]
 8009f5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f60:	2762      	movs	r7, #98	; 0x62
 8009f62:	601c      	str	r4, [r3, #0]
 8009f64:	e723      	b.n	8009dae <__gethex+0x12a>
 8009f66:	bf00      	nop
 8009f68:	0800bff8 	.word	0x0800bff8
 8009f6c:	0800bf80 	.word	0x0800bf80
 8009f70:	0800bf91 	.word	0x0800bf91
 8009f74:	1e71      	subs	r1, r6, #1
 8009f76:	4620      	mov	r0, r4
 8009f78:	f000 fe55 	bl	800ac26 <__any_on>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d1e6      	bne.n	8009f4e <__gethex+0x2ca>
 8009f80:	ee18 0a10 	vmov	r0, s16
 8009f84:	4621      	mov	r1, r4
 8009f86:	f000 f9f1 	bl	800a36c <_Bfree>
 8009f8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	2750      	movs	r7, #80	; 0x50
 8009f92:	e70c      	b.n	8009dae <__gethex+0x12a>
 8009f94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1f2      	bne.n	8009f80 <__gethex+0x2fc>
 8009f9a:	e7d8      	b.n	8009f4e <__gethex+0x2ca>
 8009f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1d5      	bne.n	8009f4e <__gethex+0x2ca>
 8009fa2:	e7ed      	b.n	8009f80 <__gethex+0x2fc>
 8009fa4:	1e6f      	subs	r7, r5, #1
 8009fa6:	f1ba 0f00 	cmp.w	sl, #0
 8009faa:	d131      	bne.n	800a010 <__gethex+0x38c>
 8009fac:	b127      	cbz	r7, 8009fb8 <__gethex+0x334>
 8009fae:	4639      	mov	r1, r7
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f000 fe38 	bl	800ac26 <__any_on>
 8009fb6:	4682      	mov	sl, r0
 8009fb8:	117b      	asrs	r3, r7, #5
 8009fba:	2101      	movs	r1, #1
 8009fbc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009fc0:	f007 071f 	and.w	r7, r7, #31
 8009fc4:	fa01 f707 	lsl.w	r7, r1, r7
 8009fc8:	421f      	tst	r7, r3
 8009fca:	4629      	mov	r1, r5
 8009fcc:	4620      	mov	r0, r4
 8009fce:	bf18      	it	ne
 8009fd0:	f04a 0a02 	orrne.w	sl, sl, #2
 8009fd4:	1b76      	subs	r6, r6, r5
 8009fd6:	f7ff fded 	bl	8009bb4 <rshift>
 8009fda:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009fde:	2702      	movs	r7, #2
 8009fe0:	f1ba 0f00 	cmp.w	sl, #0
 8009fe4:	d048      	beq.n	800a078 <__gethex+0x3f4>
 8009fe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d015      	beq.n	800a01a <__gethex+0x396>
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	d017      	beq.n	800a022 <__gethex+0x39e>
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d109      	bne.n	800a00a <__gethex+0x386>
 8009ff6:	f01a 0f02 	tst.w	sl, #2
 8009ffa:	d006      	beq.n	800a00a <__gethex+0x386>
 8009ffc:	f8d9 0000 	ldr.w	r0, [r9]
 800a000:	ea4a 0a00 	orr.w	sl, sl, r0
 800a004:	f01a 0f01 	tst.w	sl, #1
 800a008:	d10e      	bne.n	800a028 <__gethex+0x3a4>
 800a00a:	f047 0710 	orr.w	r7, r7, #16
 800a00e:	e033      	b.n	800a078 <__gethex+0x3f4>
 800a010:	f04f 0a01 	mov.w	sl, #1
 800a014:	e7d0      	b.n	8009fb8 <__gethex+0x334>
 800a016:	2701      	movs	r7, #1
 800a018:	e7e2      	b.n	8009fe0 <__gethex+0x35c>
 800a01a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a01c:	f1c3 0301 	rsb	r3, r3, #1
 800a020:	9315      	str	r3, [sp, #84]	; 0x54
 800a022:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a024:	2b00      	cmp	r3, #0
 800a026:	d0f0      	beq.n	800a00a <__gethex+0x386>
 800a028:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a02c:	f104 0314 	add.w	r3, r4, #20
 800a030:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a034:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a038:	f04f 0c00 	mov.w	ip, #0
 800a03c:	4618      	mov	r0, r3
 800a03e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a042:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a046:	d01c      	beq.n	800a082 <__gethex+0x3fe>
 800a048:	3201      	adds	r2, #1
 800a04a:	6002      	str	r2, [r0, #0]
 800a04c:	2f02      	cmp	r7, #2
 800a04e:	f104 0314 	add.w	r3, r4, #20
 800a052:	d13f      	bne.n	800a0d4 <__gethex+0x450>
 800a054:	f8d8 2000 	ldr.w	r2, [r8]
 800a058:	3a01      	subs	r2, #1
 800a05a:	42b2      	cmp	r2, r6
 800a05c:	d10a      	bne.n	800a074 <__gethex+0x3f0>
 800a05e:	1171      	asrs	r1, r6, #5
 800a060:	2201      	movs	r2, #1
 800a062:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a066:	f006 061f 	and.w	r6, r6, #31
 800a06a:	fa02 f606 	lsl.w	r6, r2, r6
 800a06e:	421e      	tst	r6, r3
 800a070:	bf18      	it	ne
 800a072:	4617      	movne	r7, r2
 800a074:	f047 0720 	orr.w	r7, r7, #32
 800a078:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a07a:	601c      	str	r4, [r3, #0]
 800a07c:	9b04      	ldr	r3, [sp, #16]
 800a07e:	601d      	str	r5, [r3, #0]
 800a080:	e695      	b.n	8009dae <__gethex+0x12a>
 800a082:	4299      	cmp	r1, r3
 800a084:	f843 cc04 	str.w	ip, [r3, #-4]
 800a088:	d8d8      	bhi.n	800a03c <__gethex+0x3b8>
 800a08a:	68a3      	ldr	r3, [r4, #8]
 800a08c:	459b      	cmp	fp, r3
 800a08e:	db19      	blt.n	800a0c4 <__gethex+0x440>
 800a090:	6861      	ldr	r1, [r4, #4]
 800a092:	ee18 0a10 	vmov	r0, s16
 800a096:	3101      	adds	r1, #1
 800a098:	f000 f928 	bl	800a2ec <_Balloc>
 800a09c:	4681      	mov	r9, r0
 800a09e:	b918      	cbnz	r0, 800a0a8 <__gethex+0x424>
 800a0a0:	4b1a      	ldr	r3, [pc, #104]	; (800a10c <__gethex+0x488>)
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	2184      	movs	r1, #132	; 0x84
 800a0a6:	e6a8      	b.n	8009dfa <__gethex+0x176>
 800a0a8:	6922      	ldr	r2, [r4, #16]
 800a0aa:	3202      	adds	r2, #2
 800a0ac:	f104 010c 	add.w	r1, r4, #12
 800a0b0:	0092      	lsls	r2, r2, #2
 800a0b2:	300c      	adds	r0, #12
 800a0b4:	f000 f90c 	bl	800a2d0 <memcpy>
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	ee18 0a10 	vmov	r0, s16
 800a0be:	f000 f955 	bl	800a36c <_Bfree>
 800a0c2:	464c      	mov	r4, r9
 800a0c4:	6923      	ldr	r3, [r4, #16]
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0cc:	6122      	str	r2, [r4, #16]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	615a      	str	r2, [r3, #20]
 800a0d2:	e7bb      	b.n	800a04c <__gethex+0x3c8>
 800a0d4:	6922      	ldr	r2, [r4, #16]
 800a0d6:	455a      	cmp	r2, fp
 800a0d8:	dd0b      	ble.n	800a0f2 <__gethex+0x46e>
 800a0da:	2101      	movs	r1, #1
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f7ff fd69 	bl	8009bb4 <rshift>
 800a0e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0e6:	3501      	adds	r5, #1
 800a0e8:	42ab      	cmp	r3, r5
 800a0ea:	f6ff aed0 	blt.w	8009e8e <__gethex+0x20a>
 800a0ee:	2701      	movs	r7, #1
 800a0f0:	e7c0      	b.n	800a074 <__gethex+0x3f0>
 800a0f2:	f016 061f 	ands.w	r6, r6, #31
 800a0f6:	d0fa      	beq.n	800a0ee <__gethex+0x46a>
 800a0f8:	4453      	add	r3, sl
 800a0fa:	f1c6 0620 	rsb	r6, r6, #32
 800a0fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a102:	f000 f9e5 	bl	800a4d0 <__hi0bits>
 800a106:	42b0      	cmp	r0, r6
 800a108:	dbe7      	blt.n	800a0da <__gethex+0x456>
 800a10a:	e7f0      	b.n	800a0ee <__gethex+0x46a>
 800a10c:	0800bf80 	.word	0x0800bf80

0800a110 <L_shift>:
 800a110:	f1c2 0208 	rsb	r2, r2, #8
 800a114:	0092      	lsls	r2, r2, #2
 800a116:	b570      	push	{r4, r5, r6, lr}
 800a118:	f1c2 0620 	rsb	r6, r2, #32
 800a11c:	6843      	ldr	r3, [r0, #4]
 800a11e:	6804      	ldr	r4, [r0, #0]
 800a120:	fa03 f506 	lsl.w	r5, r3, r6
 800a124:	432c      	orrs	r4, r5
 800a126:	40d3      	lsrs	r3, r2
 800a128:	6004      	str	r4, [r0, #0]
 800a12a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a12e:	4288      	cmp	r0, r1
 800a130:	d3f4      	bcc.n	800a11c <L_shift+0xc>
 800a132:	bd70      	pop	{r4, r5, r6, pc}

0800a134 <__match>:
 800a134:	b530      	push	{r4, r5, lr}
 800a136:	6803      	ldr	r3, [r0, #0]
 800a138:	3301      	adds	r3, #1
 800a13a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a13e:	b914      	cbnz	r4, 800a146 <__match+0x12>
 800a140:	6003      	str	r3, [r0, #0]
 800a142:	2001      	movs	r0, #1
 800a144:	bd30      	pop	{r4, r5, pc}
 800a146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a14a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a14e:	2d19      	cmp	r5, #25
 800a150:	bf98      	it	ls
 800a152:	3220      	addls	r2, #32
 800a154:	42a2      	cmp	r2, r4
 800a156:	d0f0      	beq.n	800a13a <__match+0x6>
 800a158:	2000      	movs	r0, #0
 800a15a:	e7f3      	b.n	800a144 <__match+0x10>

0800a15c <__hexnan>:
 800a15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a160:	680b      	ldr	r3, [r1, #0]
 800a162:	115e      	asrs	r6, r3, #5
 800a164:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a168:	f013 031f 	ands.w	r3, r3, #31
 800a16c:	b087      	sub	sp, #28
 800a16e:	bf18      	it	ne
 800a170:	3604      	addne	r6, #4
 800a172:	2500      	movs	r5, #0
 800a174:	1f37      	subs	r7, r6, #4
 800a176:	4690      	mov	r8, r2
 800a178:	6802      	ldr	r2, [r0, #0]
 800a17a:	9301      	str	r3, [sp, #4]
 800a17c:	4682      	mov	sl, r0
 800a17e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a182:	46b9      	mov	r9, r7
 800a184:	463c      	mov	r4, r7
 800a186:	9502      	str	r5, [sp, #8]
 800a188:	46ab      	mov	fp, r5
 800a18a:	7851      	ldrb	r1, [r2, #1]
 800a18c:	1c53      	adds	r3, r2, #1
 800a18e:	9303      	str	r3, [sp, #12]
 800a190:	b341      	cbz	r1, 800a1e4 <__hexnan+0x88>
 800a192:	4608      	mov	r0, r1
 800a194:	9205      	str	r2, [sp, #20]
 800a196:	9104      	str	r1, [sp, #16]
 800a198:	f7ff fd5e 	bl	8009c58 <__hexdig_fun>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d14f      	bne.n	800a240 <__hexnan+0xe4>
 800a1a0:	9904      	ldr	r1, [sp, #16]
 800a1a2:	9a05      	ldr	r2, [sp, #20]
 800a1a4:	2920      	cmp	r1, #32
 800a1a6:	d818      	bhi.n	800a1da <__hexnan+0x7e>
 800a1a8:	9b02      	ldr	r3, [sp, #8]
 800a1aa:	459b      	cmp	fp, r3
 800a1ac:	dd13      	ble.n	800a1d6 <__hexnan+0x7a>
 800a1ae:	454c      	cmp	r4, r9
 800a1b0:	d206      	bcs.n	800a1c0 <__hexnan+0x64>
 800a1b2:	2d07      	cmp	r5, #7
 800a1b4:	dc04      	bgt.n	800a1c0 <__hexnan+0x64>
 800a1b6:	462a      	mov	r2, r5
 800a1b8:	4649      	mov	r1, r9
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f7ff ffa8 	bl	800a110 <L_shift>
 800a1c0:	4544      	cmp	r4, r8
 800a1c2:	d950      	bls.n	800a266 <__hexnan+0x10a>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	f1a4 0904 	sub.w	r9, r4, #4
 800a1ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1ce:	f8cd b008 	str.w	fp, [sp, #8]
 800a1d2:	464c      	mov	r4, r9
 800a1d4:	461d      	mov	r5, r3
 800a1d6:	9a03      	ldr	r2, [sp, #12]
 800a1d8:	e7d7      	b.n	800a18a <__hexnan+0x2e>
 800a1da:	2929      	cmp	r1, #41	; 0x29
 800a1dc:	d156      	bne.n	800a28c <__hexnan+0x130>
 800a1de:	3202      	adds	r2, #2
 800a1e0:	f8ca 2000 	str.w	r2, [sl]
 800a1e4:	f1bb 0f00 	cmp.w	fp, #0
 800a1e8:	d050      	beq.n	800a28c <__hexnan+0x130>
 800a1ea:	454c      	cmp	r4, r9
 800a1ec:	d206      	bcs.n	800a1fc <__hexnan+0xa0>
 800a1ee:	2d07      	cmp	r5, #7
 800a1f0:	dc04      	bgt.n	800a1fc <__hexnan+0xa0>
 800a1f2:	462a      	mov	r2, r5
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f7ff ff8a 	bl	800a110 <L_shift>
 800a1fc:	4544      	cmp	r4, r8
 800a1fe:	d934      	bls.n	800a26a <__hexnan+0x10e>
 800a200:	f1a8 0204 	sub.w	r2, r8, #4
 800a204:	4623      	mov	r3, r4
 800a206:	f853 1b04 	ldr.w	r1, [r3], #4
 800a20a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a20e:	429f      	cmp	r7, r3
 800a210:	d2f9      	bcs.n	800a206 <__hexnan+0xaa>
 800a212:	1b3b      	subs	r3, r7, r4
 800a214:	f023 0303 	bic.w	r3, r3, #3
 800a218:	3304      	adds	r3, #4
 800a21a:	3401      	adds	r4, #1
 800a21c:	3e03      	subs	r6, #3
 800a21e:	42b4      	cmp	r4, r6
 800a220:	bf88      	it	hi
 800a222:	2304      	movhi	r3, #4
 800a224:	4443      	add	r3, r8
 800a226:	2200      	movs	r2, #0
 800a228:	f843 2b04 	str.w	r2, [r3], #4
 800a22c:	429f      	cmp	r7, r3
 800a22e:	d2fb      	bcs.n	800a228 <__hexnan+0xcc>
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	b91b      	cbnz	r3, 800a23c <__hexnan+0xe0>
 800a234:	4547      	cmp	r7, r8
 800a236:	d127      	bne.n	800a288 <__hexnan+0x12c>
 800a238:	2301      	movs	r3, #1
 800a23a:	603b      	str	r3, [r7, #0]
 800a23c:	2005      	movs	r0, #5
 800a23e:	e026      	b.n	800a28e <__hexnan+0x132>
 800a240:	3501      	adds	r5, #1
 800a242:	2d08      	cmp	r5, #8
 800a244:	f10b 0b01 	add.w	fp, fp, #1
 800a248:	dd06      	ble.n	800a258 <__hexnan+0xfc>
 800a24a:	4544      	cmp	r4, r8
 800a24c:	d9c3      	bls.n	800a1d6 <__hexnan+0x7a>
 800a24e:	2300      	movs	r3, #0
 800a250:	f844 3c04 	str.w	r3, [r4, #-4]
 800a254:	2501      	movs	r5, #1
 800a256:	3c04      	subs	r4, #4
 800a258:	6822      	ldr	r2, [r4, #0]
 800a25a:	f000 000f 	and.w	r0, r0, #15
 800a25e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a262:	6022      	str	r2, [r4, #0]
 800a264:	e7b7      	b.n	800a1d6 <__hexnan+0x7a>
 800a266:	2508      	movs	r5, #8
 800a268:	e7b5      	b.n	800a1d6 <__hexnan+0x7a>
 800a26a:	9b01      	ldr	r3, [sp, #4]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d0df      	beq.n	800a230 <__hexnan+0xd4>
 800a270:	f04f 32ff 	mov.w	r2, #4294967295
 800a274:	f1c3 0320 	rsb	r3, r3, #32
 800a278:	fa22 f303 	lsr.w	r3, r2, r3
 800a27c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a280:	401a      	ands	r2, r3
 800a282:	f846 2c04 	str.w	r2, [r6, #-4]
 800a286:	e7d3      	b.n	800a230 <__hexnan+0xd4>
 800a288:	3f04      	subs	r7, #4
 800a28a:	e7d1      	b.n	800a230 <__hexnan+0xd4>
 800a28c:	2004      	movs	r0, #4
 800a28e:	b007      	add	sp, #28
 800a290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a294 <_localeconv_r>:
 800a294:	4800      	ldr	r0, [pc, #0]	; (800a298 <_localeconv_r+0x4>)
 800a296:	4770      	bx	lr
 800a298:	2000017c 	.word	0x2000017c

0800a29c <malloc>:
 800a29c:	4b02      	ldr	r3, [pc, #8]	; (800a2a8 <malloc+0xc>)
 800a29e:	4601      	mov	r1, r0
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	f000 bd63 	b.w	800ad6c <_malloc_r>
 800a2a6:	bf00      	nop
 800a2a8:	20000024 	.word	0x20000024

0800a2ac <__ascii_mbtowc>:
 800a2ac:	b082      	sub	sp, #8
 800a2ae:	b901      	cbnz	r1, 800a2b2 <__ascii_mbtowc+0x6>
 800a2b0:	a901      	add	r1, sp, #4
 800a2b2:	b142      	cbz	r2, 800a2c6 <__ascii_mbtowc+0x1a>
 800a2b4:	b14b      	cbz	r3, 800a2ca <__ascii_mbtowc+0x1e>
 800a2b6:	7813      	ldrb	r3, [r2, #0]
 800a2b8:	600b      	str	r3, [r1, #0]
 800a2ba:	7812      	ldrb	r2, [r2, #0]
 800a2bc:	1e10      	subs	r0, r2, #0
 800a2be:	bf18      	it	ne
 800a2c0:	2001      	movne	r0, #1
 800a2c2:	b002      	add	sp, #8
 800a2c4:	4770      	bx	lr
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	e7fb      	b.n	800a2c2 <__ascii_mbtowc+0x16>
 800a2ca:	f06f 0001 	mvn.w	r0, #1
 800a2ce:	e7f8      	b.n	800a2c2 <__ascii_mbtowc+0x16>

0800a2d0 <memcpy>:
 800a2d0:	440a      	add	r2, r1
 800a2d2:	4291      	cmp	r1, r2
 800a2d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2d8:	d100      	bne.n	800a2dc <memcpy+0xc>
 800a2da:	4770      	bx	lr
 800a2dc:	b510      	push	{r4, lr}
 800a2de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2e6:	4291      	cmp	r1, r2
 800a2e8:	d1f9      	bne.n	800a2de <memcpy+0xe>
 800a2ea:	bd10      	pop	{r4, pc}

0800a2ec <_Balloc>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	460d      	mov	r5, r1
 800a2f4:	b976      	cbnz	r6, 800a314 <_Balloc+0x28>
 800a2f6:	2010      	movs	r0, #16
 800a2f8:	f7ff ffd0 	bl	800a29c <malloc>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	6260      	str	r0, [r4, #36]	; 0x24
 800a300:	b920      	cbnz	r0, 800a30c <_Balloc+0x20>
 800a302:	4b18      	ldr	r3, [pc, #96]	; (800a364 <_Balloc+0x78>)
 800a304:	4818      	ldr	r0, [pc, #96]	; (800a368 <_Balloc+0x7c>)
 800a306:	2166      	movs	r1, #102	; 0x66
 800a308:	f000 ff3c 	bl	800b184 <__assert_func>
 800a30c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a310:	6006      	str	r6, [r0, #0]
 800a312:	60c6      	str	r6, [r0, #12]
 800a314:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a316:	68f3      	ldr	r3, [r6, #12]
 800a318:	b183      	cbz	r3, 800a33c <_Balloc+0x50>
 800a31a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a322:	b9b8      	cbnz	r0, 800a354 <_Balloc+0x68>
 800a324:	2101      	movs	r1, #1
 800a326:	fa01 f605 	lsl.w	r6, r1, r5
 800a32a:	1d72      	adds	r2, r6, #5
 800a32c:	0092      	lsls	r2, r2, #2
 800a32e:	4620      	mov	r0, r4
 800a330:	f000 fc9a 	bl	800ac68 <_calloc_r>
 800a334:	b160      	cbz	r0, 800a350 <_Balloc+0x64>
 800a336:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a33a:	e00e      	b.n	800a35a <_Balloc+0x6e>
 800a33c:	2221      	movs	r2, #33	; 0x21
 800a33e:	2104      	movs	r1, #4
 800a340:	4620      	mov	r0, r4
 800a342:	f000 fc91 	bl	800ac68 <_calloc_r>
 800a346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a348:	60f0      	str	r0, [r6, #12]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e4      	bne.n	800a31a <_Balloc+0x2e>
 800a350:	2000      	movs	r0, #0
 800a352:	bd70      	pop	{r4, r5, r6, pc}
 800a354:	6802      	ldr	r2, [r0, #0]
 800a356:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a35a:	2300      	movs	r3, #0
 800a35c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a360:	e7f7      	b.n	800a352 <_Balloc+0x66>
 800a362:	bf00      	nop
 800a364:	0800bf0e 	.word	0x0800bf0e
 800a368:	0800c00c 	.word	0x0800c00c

0800a36c <_Bfree>:
 800a36c:	b570      	push	{r4, r5, r6, lr}
 800a36e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a370:	4605      	mov	r5, r0
 800a372:	460c      	mov	r4, r1
 800a374:	b976      	cbnz	r6, 800a394 <_Bfree+0x28>
 800a376:	2010      	movs	r0, #16
 800a378:	f7ff ff90 	bl	800a29c <malloc>
 800a37c:	4602      	mov	r2, r0
 800a37e:	6268      	str	r0, [r5, #36]	; 0x24
 800a380:	b920      	cbnz	r0, 800a38c <_Bfree+0x20>
 800a382:	4b09      	ldr	r3, [pc, #36]	; (800a3a8 <_Bfree+0x3c>)
 800a384:	4809      	ldr	r0, [pc, #36]	; (800a3ac <_Bfree+0x40>)
 800a386:	218a      	movs	r1, #138	; 0x8a
 800a388:	f000 fefc 	bl	800b184 <__assert_func>
 800a38c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a390:	6006      	str	r6, [r0, #0]
 800a392:	60c6      	str	r6, [r0, #12]
 800a394:	b13c      	cbz	r4, 800a3a6 <_Bfree+0x3a>
 800a396:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a398:	6862      	ldr	r2, [r4, #4]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3a0:	6021      	str	r1, [r4, #0]
 800a3a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3a6:	bd70      	pop	{r4, r5, r6, pc}
 800a3a8:	0800bf0e 	.word	0x0800bf0e
 800a3ac:	0800c00c 	.word	0x0800c00c

0800a3b0 <__multadd>:
 800a3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b4:	690d      	ldr	r5, [r1, #16]
 800a3b6:	4607      	mov	r7, r0
 800a3b8:	460c      	mov	r4, r1
 800a3ba:	461e      	mov	r6, r3
 800a3bc:	f101 0c14 	add.w	ip, r1, #20
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	f8dc 3000 	ldr.w	r3, [ip]
 800a3c6:	b299      	uxth	r1, r3
 800a3c8:	fb02 6101 	mla	r1, r2, r1, r6
 800a3cc:	0c1e      	lsrs	r6, r3, #16
 800a3ce:	0c0b      	lsrs	r3, r1, #16
 800a3d0:	fb02 3306 	mla	r3, r2, r6, r3
 800a3d4:	b289      	uxth	r1, r1
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3dc:	4285      	cmp	r5, r0
 800a3de:	f84c 1b04 	str.w	r1, [ip], #4
 800a3e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3e6:	dcec      	bgt.n	800a3c2 <__multadd+0x12>
 800a3e8:	b30e      	cbz	r6, 800a42e <__multadd+0x7e>
 800a3ea:	68a3      	ldr	r3, [r4, #8]
 800a3ec:	42ab      	cmp	r3, r5
 800a3ee:	dc19      	bgt.n	800a424 <__multadd+0x74>
 800a3f0:	6861      	ldr	r1, [r4, #4]
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	3101      	adds	r1, #1
 800a3f6:	f7ff ff79 	bl	800a2ec <_Balloc>
 800a3fa:	4680      	mov	r8, r0
 800a3fc:	b928      	cbnz	r0, 800a40a <__multadd+0x5a>
 800a3fe:	4602      	mov	r2, r0
 800a400:	4b0c      	ldr	r3, [pc, #48]	; (800a434 <__multadd+0x84>)
 800a402:	480d      	ldr	r0, [pc, #52]	; (800a438 <__multadd+0x88>)
 800a404:	21b5      	movs	r1, #181	; 0xb5
 800a406:	f000 febd 	bl	800b184 <__assert_func>
 800a40a:	6922      	ldr	r2, [r4, #16]
 800a40c:	3202      	adds	r2, #2
 800a40e:	f104 010c 	add.w	r1, r4, #12
 800a412:	0092      	lsls	r2, r2, #2
 800a414:	300c      	adds	r0, #12
 800a416:	f7ff ff5b 	bl	800a2d0 <memcpy>
 800a41a:	4621      	mov	r1, r4
 800a41c:	4638      	mov	r0, r7
 800a41e:	f7ff ffa5 	bl	800a36c <_Bfree>
 800a422:	4644      	mov	r4, r8
 800a424:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a428:	3501      	adds	r5, #1
 800a42a:	615e      	str	r6, [r3, #20]
 800a42c:	6125      	str	r5, [r4, #16]
 800a42e:	4620      	mov	r0, r4
 800a430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a434:	0800bf80 	.word	0x0800bf80
 800a438:	0800c00c 	.word	0x0800c00c

0800a43c <__s2b>:
 800a43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a440:	460c      	mov	r4, r1
 800a442:	4615      	mov	r5, r2
 800a444:	461f      	mov	r7, r3
 800a446:	2209      	movs	r2, #9
 800a448:	3308      	adds	r3, #8
 800a44a:	4606      	mov	r6, r0
 800a44c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a450:	2100      	movs	r1, #0
 800a452:	2201      	movs	r2, #1
 800a454:	429a      	cmp	r2, r3
 800a456:	db09      	blt.n	800a46c <__s2b+0x30>
 800a458:	4630      	mov	r0, r6
 800a45a:	f7ff ff47 	bl	800a2ec <_Balloc>
 800a45e:	b940      	cbnz	r0, 800a472 <__s2b+0x36>
 800a460:	4602      	mov	r2, r0
 800a462:	4b19      	ldr	r3, [pc, #100]	; (800a4c8 <__s2b+0x8c>)
 800a464:	4819      	ldr	r0, [pc, #100]	; (800a4cc <__s2b+0x90>)
 800a466:	21ce      	movs	r1, #206	; 0xce
 800a468:	f000 fe8c 	bl	800b184 <__assert_func>
 800a46c:	0052      	lsls	r2, r2, #1
 800a46e:	3101      	adds	r1, #1
 800a470:	e7f0      	b.n	800a454 <__s2b+0x18>
 800a472:	9b08      	ldr	r3, [sp, #32]
 800a474:	6143      	str	r3, [r0, #20]
 800a476:	2d09      	cmp	r5, #9
 800a478:	f04f 0301 	mov.w	r3, #1
 800a47c:	6103      	str	r3, [r0, #16]
 800a47e:	dd16      	ble.n	800a4ae <__s2b+0x72>
 800a480:	f104 0909 	add.w	r9, r4, #9
 800a484:	46c8      	mov	r8, r9
 800a486:	442c      	add	r4, r5
 800a488:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a48c:	4601      	mov	r1, r0
 800a48e:	3b30      	subs	r3, #48	; 0x30
 800a490:	220a      	movs	r2, #10
 800a492:	4630      	mov	r0, r6
 800a494:	f7ff ff8c 	bl	800a3b0 <__multadd>
 800a498:	45a0      	cmp	r8, r4
 800a49a:	d1f5      	bne.n	800a488 <__s2b+0x4c>
 800a49c:	f1a5 0408 	sub.w	r4, r5, #8
 800a4a0:	444c      	add	r4, r9
 800a4a2:	1b2d      	subs	r5, r5, r4
 800a4a4:	1963      	adds	r3, r4, r5
 800a4a6:	42bb      	cmp	r3, r7
 800a4a8:	db04      	blt.n	800a4b4 <__s2b+0x78>
 800a4aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ae:	340a      	adds	r4, #10
 800a4b0:	2509      	movs	r5, #9
 800a4b2:	e7f6      	b.n	800a4a2 <__s2b+0x66>
 800a4b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a4b8:	4601      	mov	r1, r0
 800a4ba:	3b30      	subs	r3, #48	; 0x30
 800a4bc:	220a      	movs	r2, #10
 800a4be:	4630      	mov	r0, r6
 800a4c0:	f7ff ff76 	bl	800a3b0 <__multadd>
 800a4c4:	e7ee      	b.n	800a4a4 <__s2b+0x68>
 800a4c6:	bf00      	nop
 800a4c8:	0800bf80 	.word	0x0800bf80
 800a4cc:	0800c00c 	.word	0x0800c00c

0800a4d0 <__hi0bits>:
 800a4d0:	0c03      	lsrs	r3, r0, #16
 800a4d2:	041b      	lsls	r3, r3, #16
 800a4d4:	b9d3      	cbnz	r3, 800a50c <__hi0bits+0x3c>
 800a4d6:	0400      	lsls	r0, r0, #16
 800a4d8:	2310      	movs	r3, #16
 800a4da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a4de:	bf04      	itt	eq
 800a4e0:	0200      	lsleq	r0, r0, #8
 800a4e2:	3308      	addeq	r3, #8
 800a4e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a4e8:	bf04      	itt	eq
 800a4ea:	0100      	lsleq	r0, r0, #4
 800a4ec:	3304      	addeq	r3, #4
 800a4ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a4f2:	bf04      	itt	eq
 800a4f4:	0080      	lsleq	r0, r0, #2
 800a4f6:	3302      	addeq	r3, #2
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	db05      	blt.n	800a508 <__hi0bits+0x38>
 800a4fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a500:	f103 0301 	add.w	r3, r3, #1
 800a504:	bf08      	it	eq
 800a506:	2320      	moveq	r3, #32
 800a508:	4618      	mov	r0, r3
 800a50a:	4770      	bx	lr
 800a50c:	2300      	movs	r3, #0
 800a50e:	e7e4      	b.n	800a4da <__hi0bits+0xa>

0800a510 <__lo0bits>:
 800a510:	6803      	ldr	r3, [r0, #0]
 800a512:	f013 0207 	ands.w	r2, r3, #7
 800a516:	4601      	mov	r1, r0
 800a518:	d00b      	beq.n	800a532 <__lo0bits+0x22>
 800a51a:	07da      	lsls	r2, r3, #31
 800a51c:	d423      	bmi.n	800a566 <__lo0bits+0x56>
 800a51e:	0798      	lsls	r0, r3, #30
 800a520:	bf49      	itett	mi
 800a522:	085b      	lsrmi	r3, r3, #1
 800a524:	089b      	lsrpl	r3, r3, #2
 800a526:	2001      	movmi	r0, #1
 800a528:	600b      	strmi	r3, [r1, #0]
 800a52a:	bf5c      	itt	pl
 800a52c:	600b      	strpl	r3, [r1, #0]
 800a52e:	2002      	movpl	r0, #2
 800a530:	4770      	bx	lr
 800a532:	b298      	uxth	r0, r3
 800a534:	b9a8      	cbnz	r0, 800a562 <__lo0bits+0x52>
 800a536:	0c1b      	lsrs	r3, r3, #16
 800a538:	2010      	movs	r0, #16
 800a53a:	b2da      	uxtb	r2, r3
 800a53c:	b90a      	cbnz	r2, 800a542 <__lo0bits+0x32>
 800a53e:	3008      	adds	r0, #8
 800a540:	0a1b      	lsrs	r3, r3, #8
 800a542:	071a      	lsls	r2, r3, #28
 800a544:	bf04      	itt	eq
 800a546:	091b      	lsreq	r3, r3, #4
 800a548:	3004      	addeq	r0, #4
 800a54a:	079a      	lsls	r2, r3, #30
 800a54c:	bf04      	itt	eq
 800a54e:	089b      	lsreq	r3, r3, #2
 800a550:	3002      	addeq	r0, #2
 800a552:	07da      	lsls	r2, r3, #31
 800a554:	d403      	bmi.n	800a55e <__lo0bits+0x4e>
 800a556:	085b      	lsrs	r3, r3, #1
 800a558:	f100 0001 	add.w	r0, r0, #1
 800a55c:	d005      	beq.n	800a56a <__lo0bits+0x5a>
 800a55e:	600b      	str	r3, [r1, #0]
 800a560:	4770      	bx	lr
 800a562:	4610      	mov	r0, r2
 800a564:	e7e9      	b.n	800a53a <__lo0bits+0x2a>
 800a566:	2000      	movs	r0, #0
 800a568:	4770      	bx	lr
 800a56a:	2020      	movs	r0, #32
 800a56c:	4770      	bx	lr
	...

0800a570 <__i2b>:
 800a570:	b510      	push	{r4, lr}
 800a572:	460c      	mov	r4, r1
 800a574:	2101      	movs	r1, #1
 800a576:	f7ff feb9 	bl	800a2ec <_Balloc>
 800a57a:	4602      	mov	r2, r0
 800a57c:	b928      	cbnz	r0, 800a58a <__i2b+0x1a>
 800a57e:	4b05      	ldr	r3, [pc, #20]	; (800a594 <__i2b+0x24>)
 800a580:	4805      	ldr	r0, [pc, #20]	; (800a598 <__i2b+0x28>)
 800a582:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a586:	f000 fdfd 	bl	800b184 <__assert_func>
 800a58a:	2301      	movs	r3, #1
 800a58c:	6144      	str	r4, [r0, #20]
 800a58e:	6103      	str	r3, [r0, #16]
 800a590:	bd10      	pop	{r4, pc}
 800a592:	bf00      	nop
 800a594:	0800bf80 	.word	0x0800bf80
 800a598:	0800c00c 	.word	0x0800c00c

0800a59c <__multiply>:
 800a59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a0:	4691      	mov	r9, r2
 800a5a2:	690a      	ldr	r2, [r1, #16]
 800a5a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	bfb8      	it	lt
 800a5ac:	460b      	movlt	r3, r1
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	bfbc      	itt	lt
 800a5b2:	464c      	movlt	r4, r9
 800a5b4:	4699      	movlt	r9, r3
 800a5b6:	6927      	ldr	r7, [r4, #16]
 800a5b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5bc:	68a3      	ldr	r3, [r4, #8]
 800a5be:	6861      	ldr	r1, [r4, #4]
 800a5c0:	eb07 060a 	add.w	r6, r7, sl
 800a5c4:	42b3      	cmp	r3, r6
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	bfb8      	it	lt
 800a5ca:	3101      	addlt	r1, #1
 800a5cc:	f7ff fe8e 	bl	800a2ec <_Balloc>
 800a5d0:	b930      	cbnz	r0, 800a5e0 <__multiply+0x44>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	4b44      	ldr	r3, [pc, #272]	; (800a6e8 <__multiply+0x14c>)
 800a5d6:	4845      	ldr	r0, [pc, #276]	; (800a6ec <__multiply+0x150>)
 800a5d8:	f240 115d 	movw	r1, #349	; 0x15d
 800a5dc:	f000 fdd2 	bl	800b184 <__assert_func>
 800a5e0:	f100 0514 	add.w	r5, r0, #20
 800a5e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5e8:	462b      	mov	r3, r5
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	4543      	cmp	r3, r8
 800a5ee:	d321      	bcc.n	800a634 <__multiply+0x98>
 800a5f0:	f104 0314 	add.w	r3, r4, #20
 800a5f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5f8:	f109 0314 	add.w	r3, r9, #20
 800a5fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a600:	9202      	str	r2, [sp, #8]
 800a602:	1b3a      	subs	r2, r7, r4
 800a604:	3a15      	subs	r2, #21
 800a606:	f022 0203 	bic.w	r2, r2, #3
 800a60a:	3204      	adds	r2, #4
 800a60c:	f104 0115 	add.w	r1, r4, #21
 800a610:	428f      	cmp	r7, r1
 800a612:	bf38      	it	cc
 800a614:	2204      	movcc	r2, #4
 800a616:	9201      	str	r2, [sp, #4]
 800a618:	9a02      	ldr	r2, [sp, #8]
 800a61a:	9303      	str	r3, [sp, #12]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d80c      	bhi.n	800a63a <__multiply+0x9e>
 800a620:	2e00      	cmp	r6, #0
 800a622:	dd03      	ble.n	800a62c <__multiply+0x90>
 800a624:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d05a      	beq.n	800a6e2 <__multiply+0x146>
 800a62c:	6106      	str	r6, [r0, #16]
 800a62e:	b005      	add	sp, #20
 800a630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a634:	f843 2b04 	str.w	r2, [r3], #4
 800a638:	e7d8      	b.n	800a5ec <__multiply+0x50>
 800a63a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a63e:	f1ba 0f00 	cmp.w	sl, #0
 800a642:	d024      	beq.n	800a68e <__multiply+0xf2>
 800a644:	f104 0e14 	add.w	lr, r4, #20
 800a648:	46a9      	mov	r9, r5
 800a64a:	f04f 0c00 	mov.w	ip, #0
 800a64e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a652:	f8d9 1000 	ldr.w	r1, [r9]
 800a656:	fa1f fb82 	uxth.w	fp, r2
 800a65a:	b289      	uxth	r1, r1
 800a65c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a660:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a664:	f8d9 2000 	ldr.w	r2, [r9]
 800a668:	4461      	add	r1, ip
 800a66a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a66e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a672:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a676:	b289      	uxth	r1, r1
 800a678:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a67c:	4577      	cmp	r7, lr
 800a67e:	f849 1b04 	str.w	r1, [r9], #4
 800a682:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a686:	d8e2      	bhi.n	800a64e <__multiply+0xb2>
 800a688:	9a01      	ldr	r2, [sp, #4]
 800a68a:	f845 c002 	str.w	ip, [r5, r2]
 800a68e:	9a03      	ldr	r2, [sp, #12]
 800a690:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a694:	3304      	adds	r3, #4
 800a696:	f1b9 0f00 	cmp.w	r9, #0
 800a69a:	d020      	beq.n	800a6de <__multiply+0x142>
 800a69c:	6829      	ldr	r1, [r5, #0]
 800a69e:	f104 0c14 	add.w	ip, r4, #20
 800a6a2:	46ae      	mov	lr, r5
 800a6a4:	f04f 0a00 	mov.w	sl, #0
 800a6a8:	f8bc b000 	ldrh.w	fp, [ip]
 800a6ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6b0:	fb09 220b 	mla	r2, r9, fp, r2
 800a6b4:	4492      	add	sl, r2
 800a6b6:	b289      	uxth	r1, r1
 800a6b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a6bc:	f84e 1b04 	str.w	r1, [lr], #4
 800a6c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a6c4:	f8be 1000 	ldrh.w	r1, [lr]
 800a6c8:	0c12      	lsrs	r2, r2, #16
 800a6ca:	fb09 1102 	mla	r1, r9, r2, r1
 800a6ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a6d2:	4567      	cmp	r7, ip
 800a6d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6d8:	d8e6      	bhi.n	800a6a8 <__multiply+0x10c>
 800a6da:	9a01      	ldr	r2, [sp, #4]
 800a6dc:	50a9      	str	r1, [r5, r2]
 800a6de:	3504      	adds	r5, #4
 800a6e0:	e79a      	b.n	800a618 <__multiply+0x7c>
 800a6e2:	3e01      	subs	r6, #1
 800a6e4:	e79c      	b.n	800a620 <__multiply+0x84>
 800a6e6:	bf00      	nop
 800a6e8:	0800bf80 	.word	0x0800bf80
 800a6ec:	0800c00c 	.word	0x0800c00c

0800a6f0 <__pow5mult>:
 800a6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f4:	4615      	mov	r5, r2
 800a6f6:	f012 0203 	ands.w	r2, r2, #3
 800a6fa:	4606      	mov	r6, r0
 800a6fc:	460f      	mov	r7, r1
 800a6fe:	d007      	beq.n	800a710 <__pow5mult+0x20>
 800a700:	4c25      	ldr	r4, [pc, #148]	; (800a798 <__pow5mult+0xa8>)
 800a702:	3a01      	subs	r2, #1
 800a704:	2300      	movs	r3, #0
 800a706:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a70a:	f7ff fe51 	bl	800a3b0 <__multadd>
 800a70e:	4607      	mov	r7, r0
 800a710:	10ad      	asrs	r5, r5, #2
 800a712:	d03d      	beq.n	800a790 <__pow5mult+0xa0>
 800a714:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a716:	b97c      	cbnz	r4, 800a738 <__pow5mult+0x48>
 800a718:	2010      	movs	r0, #16
 800a71a:	f7ff fdbf 	bl	800a29c <malloc>
 800a71e:	4602      	mov	r2, r0
 800a720:	6270      	str	r0, [r6, #36]	; 0x24
 800a722:	b928      	cbnz	r0, 800a730 <__pow5mult+0x40>
 800a724:	4b1d      	ldr	r3, [pc, #116]	; (800a79c <__pow5mult+0xac>)
 800a726:	481e      	ldr	r0, [pc, #120]	; (800a7a0 <__pow5mult+0xb0>)
 800a728:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a72c:	f000 fd2a 	bl	800b184 <__assert_func>
 800a730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a734:	6004      	str	r4, [r0, #0]
 800a736:	60c4      	str	r4, [r0, #12]
 800a738:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a73c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a740:	b94c      	cbnz	r4, 800a756 <__pow5mult+0x66>
 800a742:	f240 2171 	movw	r1, #625	; 0x271
 800a746:	4630      	mov	r0, r6
 800a748:	f7ff ff12 	bl	800a570 <__i2b>
 800a74c:	2300      	movs	r3, #0
 800a74e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a752:	4604      	mov	r4, r0
 800a754:	6003      	str	r3, [r0, #0]
 800a756:	f04f 0900 	mov.w	r9, #0
 800a75a:	07eb      	lsls	r3, r5, #31
 800a75c:	d50a      	bpl.n	800a774 <__pow5mult+0x84>
 800a75e:	4639      	mov	r1, r7
 800a760:	4622      	mov	r2, r4
 800a762:	4630      	mov	r0, r6
 800a764:	f7ff ff1a 	bl	800a59c <__multiply>
 800a768:	4639      	mov	r1, r7
 800a76a:	4680      	mov	r8, r0
 800a76c:	4630      	mov	r0, r6
 800a76e:	f7ff fdfd 	bl	800a36c <_Bfree>
 800a772:	4647      	mov	r7, r8
 800a774:	106d      	asrs	r5, r5, #1
 800a776:	d00b      	beq.n	800a790 <__pow5mult+0xa0>
 800a778:	6820      	ldr	r0, [r4, #0]
 800a77a:	b938      	cbnz	r0, 800a78c <__pow5mult+0x9c>
 800a77c:	4622      	mov	r2, r4
 800a77e:	4621      	mov	r1, r4
 800a780:	4630      	mov	r0, r6
 800a782:	f7ff ff0b 	bl	800a59c <__multiply>
 800a786:	6020      	str	r0, [r4, #0]
 800a788:	f8c0 9000 	str.w	r9, [r0]
 800a78c:	4604      	mov	r4, r0
 800a78e:	e7e4      	b.n	800a75a <__pow5mult+0x6a>
 800a790:	4638      	mov	r0, r7
 800a792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a796:	bf00      	nop
 800a798:	0800c158 	.word	0x0800c158
 800a79c:	0800bf0e 	.word	0x0800bf0e
 800a7a0:	0800c00c 	.word	0x0800c00c

0800a7a4 <__lshift>:
 800a7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a8:	460c      	mov	r4, r1
 800a7aa:	6849      	ldr	r1, [r1, #4]
 800a7ac:	6923      	ldr	r3, [r4, #16]
 800a7ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7b2:	68a3      	ldr	r3, [r4, #8]
 800a7b4:	4607      	mov	r7, r0
 800a7b6:	4691      	mov	r9, r2
 800a7b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7bc:	f108 0601 	add.w	r6, r8, #1
 800a7c0:	42b3      	cmp	r3, r6
 800a7c2:	db0b      	blt.n	800a7dc <__lshift+0x38>
 800a7c4:	4638      	mov	r0, r7
 800a7c6:	f7ff fd91 	bl	800a2ec <_Balloc>
 800a7ca:	4605      	mov	r5, r0
 800a7cc:	b948      	cbnz	r0, 800a7e2 <__lshift+0x3e>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	4b2a      	ldr	r3, [pc, #168]	; (800a87c <__lshift+0xd8>)
 800a7d2:	482b      	ldr	r0, [pc, #172]	; (800a880 <__lshift+0xdc>)
 800a7d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a7d8:	f000 fcd4 	bl	800b184 <__assert_func>
 800a7dc:	3101      	adds	r1, #1
 800a7de:	005b      	lsls	r3, r3, #1
 800a7e0:	e7ee      	b.n	800a7c0 <__lshift+0x1c>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	f100 0114 	add.w	r1, r0, #20
 800a7e8:	f100 0210 	add.w	r2, r0, #16
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	4553      	cmp	r3, sl
 800a7f0:	db37      	blt.n	800a862 <__lshift+0xbe>
 800a7f2:	6920      	ldr	r0, [r4, #16]
 800a7f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7f8:	f104 0314 	add.w	r3, r4, #20
 800a7fc:	f019 091f 	ands.w	r9, r9, #31
 800a800:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a804:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a808:	d02f      	beq.n	800a86a <__lshift+0xc6>
 800a80a:	f1c9 0e20 	rsb	lr, r9, #32
 800a80e:	468a      	mov	sl, r1
 800a810:	f04f 0c00 	mov.w	ip, #0
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	fa02 f209 	lsl.w	r2, r2, r9
 800a81a:	ea42 020c 	orr.w	r2, r2, ip
 800a81e:	f84a 2b04 	str.w	r2, [sl], #4
 800a822:	f853 2b04 	ldr.w	r2, [r3], #4
 800a826:	4298      	cmp	r0, r3
 800a828:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a82c:	d8f2      	bhi.n	800a814 <__lshift+0x70>
 800a82e:	1b03      	subs	r3, r0, r4
 800a830:	3b15      	subs	r3, #21
 800a832:	f023 0303 	bic.w	r3, r3, #3
 800a836:	3304      	adds	r3, #4
 800a838:	f104 0215 	add.w	r2, r4, #21
 800a83c:	4290      	cmp	r0, r2
 800a83e:	bf38      	it	cc
 800a840:	2304      	movcc	r3, #4
 800a842:	f841 c003 	str.w	ip, [r1, r3]
 800a846:	f1bc 0f00 	cmp.w	ip, #0
 800a84a:	d001      	beq.n	800a850 <__lshift+0xac>
 800a84c:	f108 0602 	add.w	r6, r8, #2
 800a850:	3e01      	subs	r6, #1
 800a852:	4638      	mov	r0, r7
 800a854:	612e      	str	r6, [r5, #16]
 800a856:	4621      	mov	r1, r4
 800a858:	f7ff fd88 	bl	800a36c <_Bfree>
 800a85c:	4628      	mov	r0, r5
 800a85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a862:	f842 0f04 	str.w	r0, [r2, #4]!
 800a866:	3301      	adds	r3, #1
 800a868:	e7c1      	b.n	800a7ee <__lshift+0x4a>
 800a86a:	3904      	subs	r1, #4
 800a86c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a870:	f841 2f04 	str.w	r2, [r1, #4]!
 800a874:	4298      	cmp	r0, r3
 800a876:	d8f9      	bhi.n	800a86c <__lshift+0xc8>
 800a878:	e7ea      	b.n	800a850 <__lshift+0xac>
 800a87a:	bf00      	nop
 800a87c:	0800bf80 	.word	0x0800bf80
 800a880:	0800c00c 	.word	0x0800c00c

0800a884 <__mcmp>:
 800a884:	b530      	push	{r4, r5, lr}
 800a886:	6902      	ldr	r2, [r0, #16]
 800a888:	690c      	ldr	r4, [r1, #16]
 800a88a:	1b12      	subs	r2, r2, r4
 800a88c:	d10e      	bne.n	800a8ac <__mcmp+0x28>
 800a88e:	f100 0314 	add.w	r3, r0, #20
 800a892:	3114      	adds	r1, #20
 800a894:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a898:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a89c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8a4:	42a5      	cmp	r5, r4
 800a8a6:	d003      	beq.n	800a8b0 <__mcmp+0x2c>
 800a8a8:	d305      	bcc.n	800a8b6 <__mcmp+0x32>
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	bd30      	pop	{r4, r5, pc}
 800a8b0:	4283      	cmp	r3, r0
 800a8b2:	d3f3      	bcc.n	800a89c <__mcmp+0x18>
 800a8b4:	e7fa      	b.n	800a8ac <__mcmp+0x28>
 800a8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ba:	e7f7      	b.n	800a8ac <__mcmp+0x28>

0800a8bc <__mdiff>:
 800a8bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c0:	460c      	mov	r4, r1
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	4690      	mov	r8, r2
 800a8ca:	f7ff ffdb 	bl	800a884 <__mcmp>
 800a8ce:	1e05      	subs	r5, r0, #0
 800a8d0:	d110      	bne.n	800a8f4 <__mdiff+0x38>
 800a8d2:	4629      	mov	r1, r5
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	f7ff fd09 	bl	800a2ec <_Balloc>
 800a8da:	b930      	cbnz	r0, 800a8ea <__mdiff+0x2e>
 800a8dc:	4b3a      	ldr	r3, [pc, #232]	; (800a9c8 <__mdiff+0x10c>)
 800a8de:	4602      	mov	r2, r0
 800a8e0:	f240 2132 	movw	r1, #562	; 0x232
 800a8e4:	4839      	ldr	r0, [pc, #228]	; (800a9cc <__mdiff+0x110>)
 800a8e6:	f000 fc4d 	bl	800b184 <__assert_func>
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a8f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f4:	bfa4      	itt	ge
 800a8f6:	4643      	movge	r3, r8
 800a8f8:	46a0      	movge	r8, r4
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a900:	bfa6      	itte	ge
 800a902:	461c      	movge	r4, r3
 800a904:	2500      	movge	r5, #0
 800a906:	2501      	movlt	r5, #1
 800a908:	f7ff fcf0 	bl	800a2ec <_Balloc>
 800a90c:	b920      	cbnz	r0, 800a918 <__mdiff+0x5c>
 800a90e:	4b2e      	ldr	r3, [pc, #184]	; (800a9c8 <__mdiff+0x10c>)
 800a910:	4602      	mov	r2, r0
 800a912:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a916:	e7e5      	b.n	800a8e4 <__mdiff+0x28>
 800a918:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a91c:	6926      	ldr	r6, [r4, #16]
 800a91e:	60c5      	str	r5, [r0, #12]
 800a920:	f104 0914 	add.w	r9, r4, #20
 800a924:	f108 0514 	add.w	r5, r8, #20
 800a928:	f100 0e14 	add.w	lr, r0, #20
 800a92c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a930:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a934:	f108 0210 	add.w	r2, r8, #16
 800a938:	46f2      	mov	sl, lr
 800a93a:	2100      	movs	r1, #0
 800a93c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a940:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a944:	fa1f f883 	uxth.w	r8, r3
 800a948:	fa11 f18b 	uxtah	r1, r1, fp
 800a94c:	0c1b      	lsrs	r3, r3, #16
 800a94e:	eba1 0808 	sub.w	r8, r1, r8
 800a952:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a956:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a95a:	fa1f f888 	uxth.w	r8, r8
 800a95e:	1419      	asrs	r1, r3, #16
 800a960:	454e      	cmp	r6, r9
 800a962:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a966:	f84a 3b04 	str.w	r3, [sl], #4
 800a96a:	d8e7      	bhi.n	800a93c <__mdiff+0x80>
 800a96c:	1b33      	subs	r3, r6, r4
 800a96e:	3b15      	subs	r3, #21
 800a970:	f023 0303 	bic.w	r3, r3, #3
 800a974:	3304      	adds	r3, #4
 800a976:	3415      	adds	r4, #21
 800a978:	42a6      	cmp	r6, r4
 800a97a:	bf38      	it	cc
 800a97c:	2304      	movcc	r3, #4
 800a97e:	441d      	add	r5, r3
 800a980:	4473      	add	r3, lr
 800a982:	469e      	mov	lr, r3
 800a984:	462e      	mov	r6, r5
 800a986:	4566      	cmp	r6, ip
 800a988:	d30e      	bcc.n	800a9a8 <__mdiff+0xec>
 800a98a:	f10c 0203 	add.w	r2, ip, #3
 800a98e:	1b52      	subs	r2, r2, r5
 800a990:	f022 0203 	bic.w	r2, r2, #3
 800a994:	3d03      	subs	r5, #3
 800a996:	45ac      	cmp	ip, r5
 800a998:	bf38      	it	cc
 800a99a:	2200      	movcc	r2, #0
 800a99c:	441a      	add	r2, r3
 800a99e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a9a2:	b17b      	cbz	r3, 800a9c4 <__mdiff+0x108>
 800a9a4:	6107      	str	r7, [r0, #16]
 800a9a6:	e7a3      	b.n	800a8f0 <__mdiff+0x34>
 800a9a8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a9ac:	fa11 f288 	uxtah	r2, r1, r8
 800a9b0:	1414      	asrs	r4, r2, #16
 800a9b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a9b6:	b292      	uxth	r2, r2
 800a9b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a9bc:	f84e 2b04 	str.w	r2, [lr], #4
 800a9c0:	1421      	asrs	r1, r4, #16
 800a9c2:	e7e0      	b.n	800a986 <__mdiff+0xca>
 800a9c4:	3f01      	subs	r7, #1
 800a9c6:	e7ea      	b.n	800a99e <__mdiff+0xe2>
 800a9c8:	0800bf80 	.word	0x0800bf80
 800a9cc:	0800c00c 	.word	0x0800c00c

0800a9d0 <__ulp>:
 800a9d0:	b082      	sub	sp, #8
 800a9d2:	ed8d 0b00 	vstr	d0, [sp]
 800a9d6:	9b01      	ldr	r3, [sp, #4]
 800a9d8:	4912      	ldr	r1, [pc, #72]	; (800aa24 <__ulp+0x54>)
 800a9da:	4019      	ands	r1, r3
 800a9dc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a9e0:	2900      	cmp	r1, #0
 800a9e2:	dd05      	ble.n	800a9f0 <__ulp+0x20>
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	ec43 2b10 	vmov	d0, r2, r3
 800a9ec:	b002      	add	sp, #8
 800a9ee:	4770      	bx	lr
 800a9f0:	4249      	negs	r1, r1
 800a9f2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a9f6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a9fa:	f04f 0200 	mov.w	r2, #0
 800a9fe:	f04f 0300 	mov.w	r3, #0
 800aa02:	da04      	bge.n	800aa0e <__ulp+0x3e>
 800aa04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aa08:	fa41 f300 	asr.w	r3, r1, r0
 800aa0c:	e7ec      	b.n	800a9e8 <__ulp+0x18>
 800aa0e:	f1a0 0114 	sub.w	r1, r0, #20
 800aa12:	291e      	cmp	r1, #30
 800aa14:	bfda      	itte	le
 800aa16:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aa1a:	fa20 f101 	lsrle.w	r1, r0, r1
 800aa1e:	2101      	movgt	r1, #1
 800aa20:	460a      	mov	r2, r1
 800aa22:	e7e1      	b.n	800a9e8 <__ulp+0x18>
 800aa24:	7ff00000 	.word	0x7ff00000

0800aa28 <__b2d>:
 800aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2a:	6905      	ldr	r5, [r0, #16]
 800aa2c:	f100 0714 	add.w	r7, r0, #20
 800aa30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aa34:	1f2e      	subs	r6, r5, #4
 800aa36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f7ff fd48 	bl	800a4d0 <__hi0bits>
 800aa40:	f1c0 0320 	rsb	r3, r0, #32
 800aa44:	280a      	cmp	r0, #10
 800aa46:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aac4 <__b2d+0x9c>
 800aa4a:	600b      	str	r3, [r1, #0]
 800aa4c:	dc14      	bgt.n	800aa78 <__b2d+0x50>
 800aa4e:	f1c0 0e0b 	rsb	lr, r0, #11
 800aa52:	fa24 f10e 	lsr.w	r1, r4, lr
 800aa56:	42b7      	cmp	r7, r6
 800aa58:	ea41 030c 	orr.w	r3, r1, ip
 800aa5c:	bf34      	ite	cc
 800aa5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aa62:	2100      	movcs	r1, #0
 800aa64:	3015      	adds	r0, #21
 800aa66:	fa04 f000 	lsl.w	r0, r4, r0
 800aa6a:	fa21 f10e 	lsr.w	r1, r1, lr
 800aa6e:	ea40 0201 	orr.w	r2, r0, r1
 800aa72:	ec43 2b10 	vmov	d0, r2, r3
 800aa76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa78:	42b7      	cmp	r7, r6
 800aa7a:	bf3a      	itte	cc
 800aa7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aa80:	f1a5 0608 	subcc.w	r6, r5, #8
 800aa84:	2100      	movcs	r1, #0
 800aa86:	380b      	subs	r0, #11
 800aa88:	d017      	beq.n	800aaba <__b2d+0x92>
 800aa8a:	f1c0 0c20 	rsb	ip, r0, #32
 800aa8e:	fa04 f500 	lsl.w	r5, r4, r0
 800aa92:	42be      	cmp	r6, r7
 800aa94:	fa21 f40c 	lsr.w	r4, r1, ip
 800aa98:	ea45 0504 	orr.w	r5, r5, r4
 800aa9c:	bf8c      	ite	hi
 800aa9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aaa2:	2400      	movls	r4, #0
 800aaa4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800aaa8:	fa01 f000 	lsl.w	r0, r1, r0
 800aaac:	fa24 f40c 	lsr.w	r4, r4, ip
 800aab0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aab4:	ea40 0204 	orr.w	r2, r0, r4
 800aab8:	e7db      	b.n	800aa72 <__b2d+0x4a>
 800aaba:	ea44 030c 	orr.w	r3, r4, ip
 800aabe:	460a      	mov	r2, r1
 800aac0:	e7d7      	b.n	800aa72 <__b2d+0x4a>
 800aac2:	bf00      	nop
 800aac4:	3ff00000 	.word	0x3ff00000

0800aac8 <__d2b>:
 800aac8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aacc:	4689      	mov	r9, r1
 800aace:	2101      	movs	r1, #1
 800aad0:	ec57 6b10 	vmov	r6, r7, d0
 800aad4:	4690      	mov	r8, r2
 800aad6:	f7ff fc09 	bl	800a2ec <_Balloc>
 800aada:	4604      	mov	r4, r0
 800aadc:	b930      	cbnz	r0, 800aaec <__d2b+0x24>
 800aade:	4602      	mov	r2, r0
 800aae0:	4b25      	ldr	r3, [pc, #148]	; (800ab78 <__d2b+0xb0>)
 800aae2:	4826      	ldr	r0, [pc, #152]	; (800ab7c <__d2b+0xb4>)
 800aae4:	f240 310a 	movw	r1, #778	; 0x30a
 800aae8:	f000 fb4c 	bl	800b184 <__assert_func>
 800aaec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aaf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aaf4:	bb35      	cbnz	r5, 800ab44 <__d2b+0x7c>
 800aaf6:	2e00      	cmp	r6, #0
 800aaf8:	9301      	str	r3, [sp, #4]
 800aafa:	d028      	beq.n	800ab4e <__d2b+0x86>
 800aafc:	4668      	mov	r0, sp
 800aafe:	9600      	str	r6, [sp, #0]
 800ab00:	f7ff fd06 	bl	800a510 <__lo0bits>
 800ab04:	9900      	ldr	r1, [sp, #0]
 800ab06:	b300      	cbz	r0, 800ab4a <__d2b+0x82>
 800ab08:	9a01      	ldr	r2, [sp, #4]
 800ab0a:	f1c0 0320 	rsb	r3, r0, #32
 800ab0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab12:	430b      	orrs	r3, r1
 800ab14:	40c2      	lsrs	r2, r0
 800ab16:	6163      	str	r3, [r4, #20]
 800ab18:	9201      	str	r2, [sp, #4]
 800ab1a:	9b01      	ldr	r3, [sp, #4]
 800ab1c:	61a3      	str	r3, [r4, #24]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	bf14      	ite	ne
 800ab22:	2202      	movne	r2, #2
 800ab24:	2201      	moveq	r2, #1
 800ab26:	6122      	str	r2, [r4, #16]
 800ab28:	b1d5      	cbz	r5, 800ab60 <__d2b+0x98>
 800ab2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab2e:	4405      	add	r5, r0
 800ab30:	f8c9 5000 	str.w	r5, [r9]
 800ab34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab38:	f8c8 0000 	str.w	r0, [r8]
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	b003      	add	sp, #12
 800ab40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab48:	e7d5      	b.n	800aaf6 <__d2b+0x2e>
 800ab4a:	6161      	str	r1, [r4, #20]
 800ab4c:	e7e5      	b.n	800ab1a <__d2b+0x52>
 800ab4e:	a801      	add	r0, sp, #4
 800ab50:	f7ff fcde 	bl	800a510 <__lo0bits>
 800ab54:	9b01      	ldr	r3, [sp, #4]
 800ab56:	6163      	str	r3, [r4, #20]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	6122      	str	r2, [r4, #16]
 800ab5c:	3020      	adds	r0, #32
 800ab5e:	e7e3      	b.n	800ab28 <__d2b+0x60>
 800ab60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab68:	f8c9 0000 	str.w	r0, [r9]
 800ab6c:	6918      	ldr	r0, [r3, #16]
 800ab6e:	f7ff fcaf 	bl	800a4d0 <__hi0bits>
 800ab72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab76:	e7df      	b.n	800ab38 <__d2b+0x70>
 800ab78:	0800bf80 	.word	0x0800bf80
 800ab7c:	0800c00c 	.word	0x0800c00c

0800ab80 <__ratio>:
 800ab80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	4688      	mov	r8, r1
 800ab86:	4669      	mov	r1, sp
 800ab88:	4681      	mov	r9, r0
 800ab8a:	f7ff ff4d 	bl	800aa28 <__b2d>
 800ab8e:	a901      	add	r1, sp, #4
 800ab90:	4640      	mov	r0, r8
 800ab92:	ec55 4b10 	vmov	r4, r5, d0
 800ab96:	ee10 aa10 	vmov	sl, s0
 800ab9a:	f7ff ff45 	bl	800aa28 <__b2d>
 800ab9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aba2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800aba6:	1a59      	subs	r1, r3, r1
 800aba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800abb2:	ec57 6b10 	vmov	r6, r7, d0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	bfd6      	itet	le
 800abba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800abbe:	462a      	movgt	r2, r5
 800abc0:	463a      	movle	r2, r7
 800abc2:	46ab      	mov	fp, r5
 800abc4:	bfd6      	itet	le
 800abc6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800abca:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800abce:	ee00 3a90 	vmovle	s1, r3
 800abd2:	ec4b ab17 	vmov	d7, sl, fp
 800abd6:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800abda:	b003      	add	sp, #12
 800abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abe0 <__copybits>:
 800abe0:	3901      	subs	r1, #1
 800abe2:	b570      	push	{r4, r5, r6, lr}
 800abe4:	1149      	asrs	r1, r1, #5
 800abe6:	6914      	ldr	r4, [r2, #16]
 800abe8:	3101      	adds	r1, #1
 800abea:	f102 0314 	add.w	r3, r2, #20
 800abee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800abf2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abf6:	1f05      	subs	r5, r0, #4
 800abf8:	42a3      	cmp	r3, r4
 800abfa:	d30c      	bcc.n	800ac16 <__copybits+0x36>
 800abfc:	1aa3      	subs	r3, r4, r2
 800abfe:	3b11      	subs	r3, #17
 800ac00:	f023 0303 	bic.w	r3, r3, #3
 800ac04:	3211      	adds	r2, #17
 800ac06:	42a2      	cmp	r2, r4
 800ac08:	bf88      	it	hi
 800ac0a:	2300      	movhi	r3, #0
 800ac0c:	4418      	add	r0, r3
 800ac0e:	2300      	movs	r3, #0
 800ac10:	4288      	cmp	r0, r1
 800ac12:	d305      	bcc.n	800ac20 <__copybits+0x40>
 800ac14:	bd70      	pop	{r4, r5, r6, pc}
 800ac16:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac1a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac1e:	e7eb      	b.n	800abf8 <__copybits+0x18>
 800ac20:	f840 3b04 	str.w	r3, [r0], #4
 800ac24:	e7f4      	b.n	800ac10 <__copybits+0x30>

0800ac26 <__any_on>:
 800ac26:	f100 0214 	add.w	r2, r0, #20
 800ac2a:	6900      	ldr	r0, [r0, #16]
 800ac2c:	114b      	asrs	r3, r1, #5
 800ac2e:	4298      	cmp	r0, r3
 800ac30:	b510      	push	{r4, lr}
 800ac32:	db11      	blt.n	800ac58 <__any_on+0x32>
 800ac34:	dd0a      	ble.n	800ac4c <__any_on+0x26>
 800ac36:	f011 011f 	ands.w	r1, r1, #31
 800ac3a:	d007      	beq.n	800ac4c <__any_on+0x26>
 800ac3c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac40:	fa24 f001 	lsr.w	r0, r4, r1
 800ac44:	fa00 f101 	lsl.w	r1, r0, r1
 800ac48:	428c      	cmp	r4, r1
 800ac4a:	d10b      	bne.n	800ac64 <__any_on+0x3e>
 800ac4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d803      	bhi.n	800ac5c <__any_on+0x36>
 800ac54:	2000      	movs	r0, #0
 800ac56:	bd10      	pop	{r4, pc}
 800ac58:	4603      	mov	r3, r0
 800ac5a:	e7f7      	b.n	800ac4c <__any_on+0x26>
 800ac5c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac60:	2900      	cmp	r1, #0
 800ac62:	d0f5      	beq.n	800ac50 <__any_on+0x2a>
 800ac64:	2001      	movs	r0, #1
 800ac66:	e7f6      	b.n	800ac56 <__any_on+0x30>

0800ac68 <_calloc_r>:
 800ac68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac6a:	fba1 2402 	umull	r2, r4, r1, r2
 800ac6e:	b94c      	cbnz	r4, 800ac84 <_calloc_r+0x1c>
 800ac70:	4611      	mov	r1, r2
 800ac72:	9201      	str	r2, [sp, #4]
 800ac74:	f000 f87a 	bl	800ad6c <_malloc_r>
 800ac78:	9a01      	ldr	r2, [sp, #4]
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	b930      	cbnz	r0, 800ac8c <_calloc_r+0x24>
 800ac7e:	4628      	mov	r0, r5
 800ac80:	b003      	add	sp, #12
 800ac82:	bd30      	pop	{r4, r5, pc}
 800ac84:	220c      	movs	r2, #12
 800ac86:	6002      	str	r2, [r0, #0]
 800ac88:	2500      	movs	r5, #0
 800ac8a:	e7f8      	b.n	800ac7e <_calloc_r+0x16>
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	f7fc fcb1 	bl	80075f4 <memset>
 800ac92:	e7f4      	b.n	800ac7e <_calloc_r+0x16>

0800ac94 <_free_r>:
 800ac94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac96:	2900      	cmp	r1, #0
 800ac98:	d044      	beq.n	800ad24 <_free_r+0x90>
 800ac9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac9e:	9001      	str	r0, [sp, #4]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f1a1 0404 	sub.w	r4, r1, #4
 800aca6:	bfb8      	it	lt
 800aca8:	18e4      	addlt	r4, r4, r3
 800acaa:	f000 fab5 	bl	800b218 <__malloc_lock>
 800acae:	4a1e      	ldr	r2, [pc, #120]	; (800ad28 <_free_r+0x94>)
 800acb0:	9801      	ldr	r0, [sp, #4]
 800acb2:	6813      	ldr	r3, [r2, #0]
 800acb4:	b933      	cbnz	r3, 800acc4 <_free_r+0x30>
 800acb6:	6063      	str	r3, [r4, #4]
 800acb8:	6014      	str	r4, [r2, #0]
 800acba:	b003      	add	sp, #12
 800acbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acc0:	f000 bab0 	b.w	800b224 <__malloc_unlock>
 800acc4:	42a3      	cmp	r3, r4
 800acc6:	d908      	bls.n	800acda <_free_r+0x46>
 800acc8:	6825      	ldr	r5, [r4, #0]
 800acca:	1961      	adds	r1, r4, r5
 800accc:	428b      	cmp	r3, r1
 800acce:	bf01      	itttt	eq
 800acd0:	6819      	ldreq	r1, [r3, #0]
 800acd2:	685b      	ldreq	r3, [r3, #4]
 800acd4:	1949      	addeq	r1, r1, r5
 800acd6:	6021      	streq	r1, [r4, #0]
 800acd8:	e7ed      	b.n	800acb6 <_free_r+0x22>
 800acda:	461a      	mov	r2, r3
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	b10b      	cbz	r3, 800ace4 <_free_r+0x50>
 800ace0:	42a3      	cmp	r3, r4
 800ace2:	d9fa      	bls.n	800acda <_free_r+0x46>
 800ace4:	6811      	ldr	r1, [r2, #0]
 800ace6:	1855      	adds	r5, r2, r1
 800ace8:	42a5      	cmp	r5, r4
 800acea:	d10b      	bne.n	800ad04 <_free_r+0x70>
 800acec:	6824      	ldr	r4, [r4, #0]
 800acee:	4421      	add	r1, r4
 800acf0:	1854      	adds	r4, r2, r1
 800acf2:	42a3      	cmp	r3, r4
 800acf4:	6011      	str	r1, [r2, #0]
 800acf6:	d1e0      	bne.n	800acba <_free_r+0x26>
 800acf8:	681c      	ldr	r4, [r3, #0]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	6053      	str	r3, [r2, #4]
 800acfe:	4421      	add	r1, r4
 800ad00:	6011      	str	r1, [r2, #0]
 800ad02:	e7da      	b.n	800acba <_free_r+0x26>
 800ad04:	d902      	bls.n	800ad0c <_free_r+0x78>
 800ad06:	230c      	movs	r3, #12
 800ad08:	6003      	str	r3, [r0, #0]
 800ad0a:	e7d6      	b.n	800acba <_free_r+0x26>
 800ad0c:	6825      	ldr	r5, [r4, #0]
 800ad0e:	1961      	adds	r1, r4, r5
 800ad10:	428b      	cmp	r3, r1
 800ad12:	bf04      	itt	eq
 800ad14:	6819      	ldreq	r1, [r3, #0]
 800ad16:	685b      	ldreq	r3, [r3, #4]
 800ad18:	6063      	str	r3, [r4, #4]
 800ad1a:	bf04      	itt	eq
 800ad1c:	1949      	addeq	r1, r1, r5
 800ad1e:	6021      	streq	r1, [r4, #0]
 800ad20:	6054      	str	r4, [r2, #4]
 800ad22:	e7ca      	b.n	800acba <_free_r+0x26>
 800ad24:	b003      	add	sp, #12
 800ad26:	bd30      	pop	{r4, r5, pc}
 800ad28:	2000089c 	.word	0x2000089c

0800ad2c <sbrk_aligned>:
 800ad2c:	b570      	push	{r4, r5, r6, lr}
 800ad2e:	4e0e      	ldr	r6, [pc, #56]	; (800ad68 <sbrk_aligned+0x3c>)
 800ad30:	460c      	mov	r4, r1
 800ad32:	6831      	ldr	r1, [r6, #0]
 800ad34:	4605      	mov	r5, r0
 800ad36:	b911      	cbnz	r1, 800ad3e <sbrk_aligned+0x12>
 800ad38:	f000 f9f2 	bl	800b120 <_sbrk_r>
 800ad3c:	6030      	str	r0, [r6, #0]
 800ad3e:	4621      	mov	r1, r4
 800ad40:	4628      	mov	r0, r5
 800ad42:	f000 f9ed 	bl	800b120 <_sbrk_r>
 800ad46:	1c43      	adds	r3, r0, #1
 800ad48:	d00a      	beq.n	800ad60 <sbrk_aligned+0x34>
 800ad4a:	1cc4      	adds	r4, r0, #3
 800ad4c:	f024 0403 	bic.w	r4, r4, #3
 800ad50:	42a0      	cmp	r0, r4
 800ad52:	d007      	beq.n	800ad64 <sbrk_aligned+0x38>
 800ad54:	1a21      	subs	r1, r4, r0
 800ad56:	4628      	mov	r0, r5
 800ad58:	f000 f9e2 	bl	800b120 <_sbrk_r>
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	d101      	bne.n	800ad64 <sbrk_aligned+0x38>
 800ad60:	f04f 34ff 	mov.w	r4, #4294967295
 800ad64:	4620      	mov	r0, r4
 800ad66:	bd70      	pop	{r4, r5, r6, pc}
 800ad68:	200008a0 	.word	0x200008a0

0800ad6c <_malloc_r>:
 800ad6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad70:	1ccd      	adds	r5, r1, #3
 800ad72:	f025 0503 	bic.w	r5, r5, #3
 800ad76:	3508      	adds	r5, #8
 800ad78:	2d0c      	cmp	r5, #12
 800ad7a:	bf38      	it	cc
 800ad7c:	250c      	movcc	r5, #12
 800ad7e:	2d00      	cmp	r5, #0
 800ad80:	4607      	mov	r7, r0
 800ad82:	db01      	blt.n	800ad88 <_malloc_r+0x1c>
 800ad84:	42a9      	cmp	r1, r5
 800ad86:	d905      	bls.n	800ad94 <_malloc_r+0x28>
 800ad88:	230c      	movs	r3, #12
 800ad8a:	603b      	str	r3, [r7, #0]
 800ad8c:	2600      	movs	r6, #0
 800ad8e:	4630      	mov	r0, r6
 800ad90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad94:	4e2e      	ldr	r6, [pc, #184]	; (800ae50 <_malloc_r+0xe4>)
 800ad96:	f000 fa3f 	bl	800b218 <__malloc_lock>
 800ad9a:	6833      	ldr	r3, [r6, #0]
 800ad9c:	461c      	mov	r4, r3
 800ad9e:	bb34      	cbnz	r4, 800adee <_malloc_r+0x82>
 800ada0:	4629      	mov	r1, r5
 800ada2:	4638      	mov	r0, r7
 800ada4:	f7ff ffc2 	bl	800ad2c <sbrk_aligned>
 800ada8:	1c43      	adds	r3, r0, #1
 800adaa:	4604      	mov	r4, r0
 800adac:	d14d      	bne.n	800ae4a <_malloc_r+0xde>
 800adae:	6834      	ldr	r4, [r6, #0]
 800adb0:	4626      	mov	r6, r4
 800adb2:	2e00      	cmp	r6, #0
 800adb4:	d140      	bne.n	800ae38 <_malloc_r+0xcc>
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	4631      	mov	r1, r6
 800adba:	4638      	mov	r0, r7
 800adbc:	eb04 0803 	add.w	r8, r4, r3
 800adc0:	f000 f9ae 	bl	800b120 <_sbrk_r>
 800adc4:	4580      	cmp	r8, r0
 800adc6:	d13a      	bne.n	800ae3e <_malloc_r+0xd2>
 800adc8:	6821      	ldr	r1, [r4, #0]
 800adca:	3503      	adds	r5, #3
 800adcc:	1a6d      	subs	r5, r5, r1
 800adce:	f025 0503 	bic.w	r5, r5, #3
 800add2:	3508      	adds	r5, #8
 800add4:	2d0c      	cmp	r5, #12
 800add6:	bf38      	it	cc
 800add8:	250c      	movcc	r5, #12
 800adda:	4629      	mov	r1, r5
 800addc:	4638      	mov	r0, r7
 800adde:	f7ff ffa5 	bl	800ad2c <sbrk_aligned>
 800ade2:	3001      	adds	r0, #1
 800ade4:	d02b      	beq.n	800ae3e <_malloc_r+0xd2>
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	442b      	add	r3, r5
 800adea:	6023      	str	r3, [r4, #0]
 800adec:	e00e      	b.n	800ae0c <_malloc_r+0xa0>
 800adee:	6822      	ldr	r2, [r4, #0]
 800adf0:	1b52      	subs	r2, r2, r5
 800adf2:	d41e      	bmi.n	800ae32 <_malloc_r+0xc6>
 800adf4:	2a0b      	cmp	r2, #11
 800adf6:	d916      	bls.n	800ae26 <_malloc_r+0xba>
 800adf8:	1961      	adds	r1, r4, r5
 800adfa:	42a3      	cmp	r3, r4
 800adfc:	6025      	str	r5, [r4, #0]
 800adfe:	bf18      	it	ne
 800ae00:	6059      	strne	r1, [r3, #4]
 800ae02:	6863      	ldr	r3, [r4, #4]
 800ae04:	bf08      	it	eq
 800ae06:	6031      	streq	r1, [r6, #0]
 800ae08:	5162      	str	r2, [r4, r5]
 800ae0a:	604b      	str	r3, [r1, #4]
 800ae0c:	4638      	mov	r0, r7
 800ae0e:	f104 060b 	add.w	r6, r4, #11
 800ae12:	f000 fa07 	bl	800b224 <__malloc_unlock>
 800ae16:	f026 0607 	bic.w	r6, r6, #7
 800ae1a:	1d23      	adds	r3, r4, #4
 800ae1c:	1af2      	subs	r2, r6, r3
 800ae1e:	d0b6      	beq.n	800ad8e <_malloc_r+0x22>
 800ae20:	1b9b      	subs	r3, r3, r6
 800ae22:	50a3      	str	r3, [r4, r2]
 800ae24:	e7b3      	b.n	800ad8e <_malloc_r+0x22>
 800ae26:	6862      	ldr	r2, [r4, #4]
 800ae28:	42a3      	cmp	r3, r4
 800ae2a:	bf0c      	ite	eq
 800ae2c:	6032      	streq	r2, [r6, #0]
 800ae2e:	605a      	strne	r2, [r3, #4]
 800ae30:	e7ec      	b.n	800ae0c <_malloc_r+0xa0>
 800ae32:	4623      	mov	r3, r4
 800ae34:	6864      	ldr	r4, [r4, #4]
 800ae36:	e7b2      	b.n	800ad9e <_malloc_r+0x32>
 800ae38:	4634      	mov	r4, r6
 800ae3a:	6876      	ldr	r6, [r6, #4]
 800ae3c:	e7b9      	b.n	800adb2 <_malloc_r+0x46>
 800ae3e:	230c      	movs	r3, #12
 800ae40:	603b      	str	r3, [r7, #0]
 800ae42:	4638      	mov	r0, r7
 800ae44:	f000 f9ee 	bl	800b224 <__malloc_unlock>
 800ae48:	e7a1      	b.n	800ad8e <_malloc_r+0x22>
 800ae4a:	6025      	str	r5, [r4, #0]
 800ae4c:	e7de      	b.n	800ae0c <_malloc_r+0xa0>
 800ae4e:	bf00      	nop
 800ae50:	2000089c 	.word	0x2000089c

0800ae54 <__ssputs_r>:
 800ae54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae58:	688e      	ldr	r6, [r1, #8]
 800ae5a:	429e      	cmp	r6, r3
 800ae5c:	4682      	mov	sl, r0
 800ae5e:	460c      	mov	r4, r1
 800ae60:	4690      	mov	r8, r2
 800ae62:	461f      	mov	r7, r3
 800ae64:	d838      	bhi.n	800aed8 <__ssputs_r+0x84>
 800ae66:	898a      	ldrh	r2, [r1, #12]
 800ae68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae6c:	d032      	beq.n	800aed4 <__ssputs_r+0x80>
 800ae6e:	6825      	ldr	r5, [r4, #0]
 800ae70:	6909      	ldr	r1, [r1, #16]
 800ae72:	eba5 0901 	sub.w	r9, r5, r1
 800ae76:	6965      	ldr	r5, [r4, #20]
 800ae78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae80:	3301      	adds	r3, #1
 800ae82:	444b      	add	r3, r9
 800ae84:	106d      	asrs	r5, r5, #1
 800ae86:	429d      	cmp	r5, r3
 800ae88:	bf38      	it	cc
 800ae8a:	461d      	movcc	r5, r3
 800ae8c:	0553      	lsls	r3, r2, #21
 800ae8e:	d531      	bpl.n	800aef4 <__ssputs_r+0xa0>
 800ae90:	4629      	mov	r1, r5
 800ae92:	f7ff ff6b 	bl	800ad6c <_malloc_r>
 800ae96:	4606      	mov	r6, r0
 800ae98:	b950      	cbnz	r0, 800aeb0 <__ssputs_r+0x5c>
 800ae9a:	230c      	movs	r3, #12
 800ae9c:	f8ca 3000 	str.w	r3, [sl]
 800aea0:	89a3      	ldrh	r3, [r4, #12]
 800aea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aea6:	81a3      	strh	r3, [r4, #12]
 800aea8:	f04f 30ff 	mov.w	r0, #4294967295
 800aeac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb0:	6921      	ldr	r1, [r4, #16]
 800aeb2:	464a      	mov	r2, r9
 800aeb4:	f7ff fa0c 	bl	800a2d0 <memcpy>
 800aeb8:	89a3      	ldrh	r3, [r4, #12]
 800aeba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec2:	81a3      	strh	r3, [r4, #12]
 800aec4:	6126      	str	r6, [r4, #16]
 800aec6:	6165      	str	r5, [r4, #20]
 800aec8:	444e      	add	r6, r9
 800aeca:	eba5 0509 	sub.w	r5, r5, r9
 800aece:	6026      	str	r6, [r4, #0]
 800aed0:	60a5      	str	r5, [r4, #8]
 800aed2:	463e      	mov	r6, r7
 800aed4:	42be      	cmp	r6, r7
 800aed6:	d900      	bls.n	800aeda <__ssputs_r+0x86>
 800aed8:	463e      	mov	r6, r7
 800aeda:	6820      	ldr	r0, [r4, #0]
 800aedc:	4632      	mov	r2, r6
 800aede:	4641      	mov	r1, r8
 800aee0:	f000 f980 	bl	800b1e4 <memmove>
 800aee4:	68a3      	ldr	r3, [r4, #8]
 800aee6:	1b9b      	subs	r3, r3, r6
 800aee8:	60a3      	str	r3, [r4, #8]
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	4433      	add	r3, r6
 800aeee:	6023      	str	r3, [r4, #0]
 800aef0:	2000      	movs	r0, #0
 800aef2:	e7db      	b.n	800aeac <__ssputs_r+0x58>
 800aef4:	462a      	mov	r2, r5
 800aef6:	f000 f99b 	bl	800b230 <_realloc_r>
 800aefa:	4606      	mov	r6, r0
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d1e1      	bne.n	800aec4 <__ssputs_r+0x70>
 800af00:	6921      	ldr	r1, [r4, #16]
 800af02:	4650      	mov	r0, sl
 800af04:	f7ff fec6 	bl	800ac94 <_free_r>
 800af08:	e7c7      	b.n	800ae9a <__ssputs_r+0x46>
	...

0800af0c <_svfiprintf_r>:
 800af0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af10:	4698      	mov	r8, r3
 800af12:	898b      	ldrh	r3, [r1, #12]
 800af14:	061b      	lsls	r3, r3, #24
 800af16:	b09d      	sub	sp, #116	; 0x74
 800af18:	4607      	mov	r7, r0
 800af1a:	460d      	mov	r5, r1
 800af1c:	4614      	mov	r4, r2
 800af1e:	d50e      	bpl.n	800af3e <_svfiprintf_r+0x32>
 800af20:	690b      	ldr	r3, [r1, #16]
 800af22:	b963      	cbnz	r3, 800af3e <_svfiprintf_r+0x32>
 800af24:	2140      	movs	r1, #64	; 0x40
 800af26:	f7ff ff21 	bl	800ad6c <_malloc_r>
 800af2a:	6028      	str	r0, [r5, #0]
 800af2c:	6128      	str	r0, [r5, #16]
 800af2e:	b920      	cbnz	r0, 800af3a <_svfiprintf_r+0x2e>
 800af30:	230c      	movs	r3, #12
 800af32:	603b      	str	r3, [r7, #0]
 800af34:	f04f 30ff 	mov.w	r0, #4294967295
 800af38:	e0d1      	b.n	800b0de <_svfiprintf_r+0x1d2>
 800af3a:	2340      	movs	r3, #64	; 0x40
 800af3c:	616b      	str	r3, [r5, #20]
 800af3e:	2300      	movs	r3, #0
 800af40:	9309      	str	r3, [sp, #36]	; 0x24
 800af42:	2320      	movs	r3, #32
 800af44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af48:	f8cd 800c 	str.w	r8, [sp, #12]
 800af4c:	2330      	movs	r3, #48	; 0x30
 800af4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b0f8 <_svfiprintf_r+0x1ec>
 800af52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af56:	f04f 0901 	mov.w	r9, #1
 800af5a:	4623      	mov	r3, r4
 800af5c:	469a      	mov	sl, r3
 800af5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af62:	b10a      	cbz	r2, 800af68 <_svfiprintf_r+0x5c>
 800af64:	2a25      	cmp	r2, #37	; 0x25
 800af66:	d1f9      	bne.n	800af5c <_svfiprintf_r+0x50>
 800af68:	ebba 0b04 	subs.w	fp, sl, r4
 800af6c:	d00b      	beq.n	800af86 <_svfiprintf_r+0x7a>
 800af6e:	465b      	mov	r3, fp
 800af70:	4622      	mov	r2, r4
 800af72:	4629      	mov	r1, r5
 800af74:	4638      	mov	r0, r7
 800af76:	f7ff ff6d 	bl	800ae54 <__ssputs_r>
 800af7a:	3001      	adds	r0, #1
 800af7c:	f000 80aa 	beq.w	800b0d4 <_svfiprintf_r+0x1c8>
 800af80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af82:	445a      	add	r2, fp
 800af84:	9209      	str	r2, [sp, #36]	; 0x24
 800af86:	f89a 3000 	ldrb.w	r3, [sl]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f000 80a2 	beq.w	800b0d4 <_svfiprintf_r+0x1c8>
 800af90:	2300      	movs	r3, #0
 800af92:	f04f 32ff 	mov.w	r2, #4294967295
 800af96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af9a:	f10a 0a01 	add.w	sl, sl, #1
 800af9e:	9304      	str	r3, [sp, #16]
 800afa0:	9307      	str	r3, [sp, #28]
 800afa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afa6:	931a      	str	r3, [sp, #104]	; 0x68
 800afa8:	4654      	mov	r4, sl
 800afaa:	2205      	movs	r2, #5
 800afac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb0:	4851      	ldr	r0, [pc, #324]	; (800b0f8 <_svfiprintf_r+0x1ec>)
 800afb2:	f7f5 f94d 	bl	8000250 <memchr>
 800afb6:	9a04      	ldr	r2, [sp, #16]
 800afb8:	b9d8      	cbnz	r0, 800aff2 <_svfiprintf_r+0xe6>
 800afba:	06d0      	lsls	r0, r2, #27
 800afbc:	bf44      	itt	mi
 800afbe:	2320      	movmi	r3, #32
 800afc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afc4:	0711      	lsls	r1, r2, #28
 800afc6:	bf44      	itt	mi
 800afc8:	232b      	movmi	r3, #43	; 0x2b
 800afca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afce:	f89a 3000 	ldrb.w	r3, [sl]
 800afd2:	2b2a      	cmp	r3, #42	; 0x2a
 800afd4:	d015      	beq.n	800b002 <_svfiprintf_r+0xf6>
 800afd6:	9a07      	ldr	r2, [sp, #28]
 800afd8:	4654      	mov	r4, sl
 800afda:	2000      	movs	r0, #0
 800afdc:	f04f 0c0a 	mov.w	ip, #10
 800afe0:	4621      	mov	r1, r4
 800afe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afe6:	3b30      	subs	r3, #48	; 0x30
 800afe8:	2b09      	cmp	r3, #9
 800afea:	d94e      	bls.n	800b08a <_svfiprintf_r+0x17e>
 800afec:	b1b0      	cbz	r0, 800b01c <_svfiprintf_r+0x110>
 800afee:	9207      	str	r2, [sp, #28]
 800aff0:	e014      	b.n	800b01c <_svfiprintf_r+0x110>
 800aff2:	eba0 0308 	sub.w	r3, r0, r8
 800aff6:	fa09 f303 	lsl.w	r3, r9, r3
 800affa:	4313      	orrs	r3, r2
 800affc:	9304      	str	r3, [sp, #16]
 800affe:	46a2      	mov	sl, r4
 800b000:	e7d2      	b.n	800afa8 <_svfiprintf_r+0x9c>
 800b002:	9b03      	ldr	r3, [sp, #12]
 800b004:	1d19      	adds	r1, r3, #4
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	9103      	str	r1, [sp, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	bfbb      	ittet	lt
 800b00e:	425b      	neglt	r3, r3
 800b010:	f042 0202 	orrlt.w	r2, r2, #2
 800b014:	9307      	strge	r3, [sp, #28]
 800b016:	9307      	strlt	r3, [sp, #28]
 800b018:	bfb8      	it	lt
 800b01a:	9204      	strlt	r2, [sp, #16]
 800b01c:	7823      	ldrb	r3, [r4, #0]
 800b01e:	2b2e      	cmp	r3, #46	; 0x2e
 800b020:	d10c      	bne.n	800b03c <_svfiprintf_r+0x130>
 800b022:	7863      	ldrb	r3, [r4, #1]
 800b024:	2b2a      	cmp	r3, #42	; 0x2a
 800b026:	d135      	bne.n	800b094 <_svfiprintf_r+0x188>
 800b028:	9b03      	ldr	r3, [sp, #12]
 800b02a:	1d1a      	adds	r2, r3, #4
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	9203      	str	r2, [sp, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	bfb8      	it	lt
 800b034:	f04f 33ff 	movlt.w	r3, #4294967295
 800b038:	3402      	adds	r4, #2
 800b03a:	9305      	str	r3, [sp, #20]
 800b03c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b108 <_svfiprintf_r+0x1fc>
 800b040:	7821      	ldrb	r1, [r4, #0]
 800b042:	2203      	movs	r2, #3
 800b044:	4650      	mov	r0, sl
 800b046:	f7f5 f903 	bl	8000250 <memchr>
 800b04a:	b140      	cbz	r0, 800b05e <_svfiprintf_r+0x152>
 800b04c:	2340      	movs	r3, #64	; 0x40
 800b04e:	eba0 000a 	sub.w	r0, r0, sl
 800b052:	fa03 f000 	lsl.w	r0, r3, r0
 800b056:	9b04      	ldr	r3, [sp, #16]
 800b058:	4303      	orrs	r3, r0
 800b05a:	3401      	adds	r4, #1
 800b05c:	9304      	str	r3, [sp, #16]
 800b05e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b062:	4826      	ldr	r0, [pc, #152]	; (800b0fc <_svfiprintf_r+0x1f0>)
 800b064:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b068:	2206      	movs	r2, #6
 800b06a:	f7f5 f8f1 	bl	8000250 <memchr>
 800b06e:	2800      	cmp	r0, #0
 800b070:	d038      	beq.n	800b0e4 <_svfiprintf_r+0x1d8>
 800b072:	4b23      	ldr	r3, [pc, #140]	; (800b100 <_svfiprintf_r+0x1f4>)
 800b074:	bb1b      	cbnz	r3, 800b0be <_svfiprintf_r+0x1b2>
 800b076:	9b03      	ldr	r3, [sp, #12]
 800b078:	3307      	adds	r3, #7
 800b07a:	f023 0307 	bic.w	r3, r3, #7
 800b07e:	3308      	adds	r3, #8
 800b080:	9303      	str	r3, [sp, #12]
 800b082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b084:	4433      	add	r3, r6
 800b086:	9309      	str	r3, [sp, #36]	; 0x24
 800b088:	e767      	b.n	800af5a <_svfiprintf_r+0x4e>
 800b08a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b08e:	460c      	mov	r4, r1
 800b090:	2001      	movs	r0, #1
 800b092:	e7a5      	b.n	800afe0 <_svfiprintf_r+0xd4>
 800b094:	2300      	movs	r3, #0
 800b096:	3401      	adds	r4, #1
 800b098:	9305      	str	r3, [sp, #20]
 800b09a:	4619      	mov	r1, r3
 800b09c:	f04f 0c0a 	mov.w	ip, #10
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0a6:	3a30      	subs	r2, #48	; 0x30
 800b0a8:	2a09      	cmp	r2, #9
 800b0aa:	d903      	bls.n	800b0b4 <_svfiprintf_r+0x1a8>
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d0c5      	beq.n	800b03c <_svfiprintf_r+0x130>
 800b0b0:	9105      	str	r1, [sp, #20]
 800b0b2:	e7c3      	b.n	800b03c <_svfiprintf_r+0x130>
 800b0b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e7f0      	b.n	800b0a0 <_svfiprintf_r+0x194>
 800b0be:	ab03      	add	r3, sp, #12
 800b0c0:	9300      	str	r3, [sp, #0]
 800b0c2:	462a      	mov	r2, r5
 800b0c4:	4b0f      	ldr	r3, [pc, #60]	; (800b104 <_svfiprintf_r+0x1f8>)
 800b0c6:	a904      	add	r1, sp, #16
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	f7fc fb2d 	bl	8007728 <_printf_float>
 800b0ce:	1c42      	adds	r2, r0, #1
 800b0d0:	4606      	mov	r6, r0
 800b0d2:	d1d6      	bne.n	800b082 <_svfiprintf_r+0x176>
 800b0d4:	89ab      	ldrh	r3, [r5, #12]
 800b0d6:	065b      	lsls	r3, r3, #25
 800b0d8:	f53f af2c 	bmi.w	800af34 <_svfiprintf_r+0x28>
 800b0dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0de:	b01d      	add	sp, #116	; 0x74
 800b0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e4:	ab03      	add	r3, sp, #12
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	462a      	mov	r2, r5
 800b0ea:	4b06      	ldr	r3, [pc, #24]	; (800b104 <_svfiprintf_r+0x1f8>)
 800b0ec:	a904      	add	r1, sp, #16
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	f7fc fda6 	bl	8007c40 <_printf_i>
 800b0f4:	e7eb      	b.n	800b0ce <_svfiprintf_r+0x1c2>
 800b0f6:	bf00      	nop
 800b0f8:	0800c164 	.word	0x0800c164
 800b0fc:	0800c16e 	.word	0x0800c16e
 800b100:	08007729 	.word	0x08007729
 800b104:	0800ae55 	.word	0x0800ae55
 800b108:	0800c16a 	.word	0x0800c16a
 800b10c:	00000000 	.word	0x00000000

0800b110 <nan>:
 800b110:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b118 <nan+0x8>
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	00000000 	.word	0x00000000
 800b11c:	7ff80000 	.word	0x7ff80000

0800b120 <_sbrk_r>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	4d06      	ldr	r5, [pc, #24]	; (800b13c <_sbrk_r+0x1c>)
 800b124:	2300      	movs	r3, #0
 800b126:	4604      	mov	r4, r0
 800b128:	4608      	mov	r0, r1
 800b12a:	602b      	str	r3, [r5, #0]
 800b12c:	f7f6 fe86 	bl	8001e3c <_sbrk>
 800b130:	1c43      	adds	r3, r0, #1
 800b132:	d102      	bne.n	800b13a <_sbrk_r+0x1a>
 800b134:	682b      	ldr	r3, [r5, #0]
 800b136:	b103      	cbz	r3, 800b13a <_sbrk_r+0x1a>
 800b138:	6023      	str	r3, [r4, #0]
 800b13a:	bd38      	pop	{r3, r4, r5, pc}
 800b13c:	200008a4 	.word	0x200008a4

0800b140 <strncmp>:
 800b140:	b510      	push	{r4, lr}
 800b142:	b17a      	cbz	r2, 800b164 <strncmp+0x24>
 800b144:	4603      	mov	r3, r0
 800b146:	3901      	subs	r1, #1
 800b148:	1884      	adds	r4, r0, r2
 800b14a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b14e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b152:	4290      	cmp	r0, r2
 800b154:	d101      	bne.n	800b15a <strncmp+0x1a>
 800b156:	42a3      	cmp	r3, r4
 800b158:	d101      	bne.n	800b15e <strncmp+0x1e>
 800b15a:	1a80      	subs	r0, r0, r2
 800b15c:	bd10      	pop	{r4, pc}
 800b15e:	2800      	cmp	r0, #0
 800b160:	d1f3      	bne.n	800b14a <strncmp+0xa>
 800b162:	e7fa      	b.n	800b15a <strncmp+0x1a>
 800b164:	4610      	mov	r0, r2
 800b166:	e7f9      	b.n	800b15c <strncmp+0x1c>

0800b168 <__ascii_wctomb>:
 800b168:	b149      	cbz	r1, 800b17e <__ascii_wctomb+0x16>
 800b16a:	2aff      	cmp	r2, #255	; 0xff
 800b16c:	bf85      	ittet	hi
 800b16e:	238a      	movhi	r3, #138	; 0x8a
 800b170:	6003      	strhi	r3, [r0, #0]
 800b172:	700a      	strbls	r2, [r1, #0]
 800b174:	f04f 30ff 	movhi.w	r0, #4294967295
 800b178:	bf98      	it	ls
 800b17a:	2001      	movls	r0, #1
 800b17c:	4770      	bx	lr
 800b17e:	4608      	mov	r0, r1
 800b180:	4770      	bx	lr
	...

0800b184 <__assert_func>:
 800b184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b186:	4614      	mov	r4, r2
 800b188:	461a      	mov	r2, r3
 800b18a:	4b09      	ldr	r3, [pc, #36]	; (800b1b0 <__assert_func+0x2c>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4605      	mov	r5, r0
 800b190:	68d8      	ldr	r0, [r3, #12]
 800b192:	b14c      	cbz	r4, 800b1a8 <__assert_func+0x24>
 800b194:	4b07      	ldr	r3, [pc, #28]	; (800b1b4 <__assert_func+0x30>)
 800b196:	9100      	str	r1, [sp, #0]
 800b198:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b19c:	4906      	ldr	r1, [pc, #24]	; (800b1b8 <__assert_func+0x34>)
 800b19e:	462b      	mov	r3, r5
 800b1a0:	f000 f80e 	bl	800b1c0 <fiprintf>
 800b1a4:	f000 fa8c 	bl	800b6c0 <abort>
 800b1a8:	4b04      	ldr	r3, [pc, #16]	; (800b1bc <__assert_func+0x38>)
 800b1aa:	461c      	mov	r4, r3
 800b1ac:	e7f3      	b.n	800b196 <__assert_func+0x12>
 800b1ae:	bf00      	nop
 800b1b0:	20000024 	.word	0x20000024
 800b1b4:	0800c175 	.word	0x0800c175
 800b1b8:	0800c182 	.word	0x0800c182
 800b1bc:	0800c1b0 	.word	0x0800c1b0

0800b1c0 <fiprintf>:
 800b1c0:	b40e      	push	{r1, r2, r3}
 800b1c2:	b503      	push	{r0, r1, lr}
 800b1c4:	4601      	mov	r1, r0
 800b1c6:	ab03      	add	r3, sp, #12
 800b1c8:	4805      	ldr	r0, [pc, #20]	; (800b1e0 <fiprintf+0x20>)
 800b1ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ce:	6800      	ldr	r0, [r0, #0]
 800b1d0:	9301      	str	r3, [sp, #4]
 800b1d2:	f000 f885 	bl	800b2e0 <_vfiprintf_r>
 800b1d6:	b002      	add	sp, #8
 800b1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1dc:	b003      	add	sp, #12
 800b1de:	4770      	bx	lr
 800b1e0:	20000024 	.word	0x20000024

0800b1e4 <memmove>:
 800b1e4:	4288      	cmp	r0, r1
 800b1e6:	b510      	push	{r4, lr}
 800b1e8:	eb01 0402 	add.w	r4, r1, r2
 800b1ec:	d902      	bls.n	800b1f4 <memmove+0x10>
 800b1ee:	4284      	cmp	r4, r0
 800b1f0:	4623      	mov	r3, r4
 800b1f2:	d807      	bhi.n	800b204 <memmove+0x20>
 800b1f4:	1e43      	subs	r3, r0, #1
 800b1f6:	42a1      	cmp	r1, r4
 800b1f8:	d008      	beq.n	800b20c <memmove+0x28>
 800b1fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b202:	e7f8      	b.n	800b1f6 <memmove+0x12>
 800b204:	4402      	add	r2, r0
 800b206:	4601      	mov	r1, r0
 800b208:	428a      	cmp	r2, r1
 800b20a:	d100      	bne.n	800b20e <memmove+0x2a>
 800b20c:	bd10      	pop	{r4, pc}
 800b20e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b216:	e7f7      	b.n	800b208 <memmove+0x24>

0800b218 <__malloc_lock>:
 800b218:	4801      	ldr	r0, [pc, #4]	; (800b220 <__malloc_lock+0x8>)
 800b21a:	f000 bc11 	b.w	800ba40 <__retarget_lock_acquire_recursive>
 800b21e:	bf00      	nop
 800b220:	200008a8 	.word	0x200008a8

0800b224 <__malloc_unlock>:
 800b224:	4801      	ldr	r0, [pc, #4]	; (800b22c <__malloc_unlock+0x8>)
 800b226:	f000 bc0c 	b.w	800ba42 <__retarget_lock_release_recursive>
 800b22a:	bf00      	nop
 800b22c:	200008a8 	.word	0x200008a8

0800b230 <_realloc_r>:
 800b230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b234:	4680      	mov	r8, r0
 800b236:	4614      	mov	r4, r2
 800b238:	460e      	mov	r6, r1
 800b23a:	b921      	cbnz	r1, 800b246 <_realloc_r+0x16>
 800b23c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b240:	4611      	mov	r1, r2
 800b242:	f7ff bd93 	b.w	800ad6c <_malloc_r>
 800b246:	b92a      	cbnz	r2, 800b254 <_realloc_r+0x24>
 800b248:	f7ff fd24 	bl	800ac94 <_free_r>
 800b24c:	4625      	mov	r5, r4
 800b24e:	4628      	mov	r0, r5
 800b250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b254:	f000 fc5c 	bl	800bb10 <_malloc_usable_size_r>
 800b258:	4284      	cmp	r4, r0
 800b25a:	4607      	mov	r7, r0
 800b25c:	d802      	bhi.n	800b264 <_realloc_r+0x34>
 800b25e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b262:	d812      	bhi.n	800b28a <_realloc_r+0x5a>
 800b264:	4621      	mov	r1, r4
 800b266:	4640      	mov	r0, r8
 800b268:	f7ff fd80 	bl	800ad6c <_malloc_r>
 800b26c:	4605      	mov	r5, r0
 800b26e:	2800      	cmp	r0, #0
 800b270:	d0ed      	beq.n	800b24e <_realloc_r+0x1e>
 800b272:	42bc      	cmp	r4, r7
 800b274:	4622      	mov	r2, r4
 800b276:	4631      	mov	r1, r6
 800b278:	bf28      	it	cs
 800b27a:	463a      	movcs	r2, r7
 800b27c:	f7ff f828 	bl	800a2d0 <memcpy>
 800b280:	4631      	mov	r1, r6
 800b282:	4640      	mov	r0, r8
 800b284:	f7ff fd06 	bl	800ac94 <_free_r>
 800b288:	e7e1      	b.n	800b24e <_realloc_r+0x1e>
 800b28a:	4635      	mov	r5, r6
 800b28c:	e7df      	b.n	800b24e <_realloc_r+0x1e>

0800b28e <__sfputc_r>:
 800b28e:	6893      	ldr	r3, [r2, #8]
 800b290:	3b01      	subs	r3, #1
 800b292:	2b00      	cmp	r3, #0
 800b294:	b410      	push	{r4}
 800b296:	6093      	str	r3, [r2, #8]
 800b298:	da08      	bge.n	800b2ac <__sfputc_r+0x1e>
 800b29a:	6994      	ldr	r4, [r2, #24]
 800b29c:	42a3      	cmp	r3, r4
 800b29e:	db01      	blt.n	800b2a4 <__sfputc_r+0x16>
 800b2a0:	290a      	cmp	r1, #10
 800b2a2:	d103      	bne.n	800b2ac <__sfputc_r+0x1e>
 800b2a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2a8:	f000 b94a 	b.w	800b540 <__swbuf_r>
 800b2ac:	6813      	ldr	r3, [r2, #0]
 800b2ae:	1c58      	adds	r0, r3, #1
 800b2b0:	6010      	str	r0, [r2, #0]
 800b2b2:	7019      	strb	r1, [r3, #0]
 800b2b4:	4608      	mov	r0, r1
 800b2b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <__sfputs_r>:
 800b2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2be:	4606      	mov	r6, r0
 800b2c0:	460f      	mov	r7, r1
 800b2c2:	4614      	mov	r4, r2
 800b2c4:	18d5      	adds	r5, r2, r3
 800b2c6:	42ac      	cmp	r4, r5
 800b2c8:	d101      	bne.n	800b2ce <__sfputs_r+0x12>
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	e007      	b.n	800b2de <__sfputs_r+0x22>
 800b2ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d2:	463a      	mov	r2, r7
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	f7ff ffda 	bl	800b28e <__sfputc_r>
 800b2da:	1c43      	adds	r3, r0, #1
 800b2dc:	d1f3      	bne.n	800b2c6 <__sfputs_r+0xa>
 800b2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2e0 <_vfiprintf_r>:
 800b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e4:	460d      	mov	r5, r1
 800b2e6:	b09d      	sub	sp, #116	; 0x74
 800b2e8:	4614      	mov	r4, r2
 800b2ea:	4698      	mov	r8, r3
 800b2ec:	4606      	mov	r6, r0
 800b2ee:	b118      	cbz	r0, 800b2f8 <_vfiprintf_r+0x18>
 800b2f0:	6983      	ldr	r3, [r0, #24]
 800b2f2:	b90b      	cbnz	r3, 800b2f8 <_vfiprintf_r+0x18>
 800b2f4:	f000 fb06 	bl	800b904 <__sinit>
 800b2f8:	4b89      	ldr	r3, [pc, #548]	; (800b520 <_vfiprintf_r+0x240>)
 800b2fa:	429d      	cmp	r5, r3
 800b2fc:	d11b      	bne.n	800b336 <_vfiprintf_r+0x56>
 800b2fe:	6875      	ldr	r5, [r6, #4]
 800b300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b302:	07d9      	lsls	r1, r3, #31
 800b304:	d405      	bmi.n	800b312 <_vfiprintf_r+0x32>
 800b306:	89ab      	ldrh	r3, [r5, #12]
 800b308:	059a      	lsls	r2, r3, #22
 800b30a:	d402      	bmi.n	800b312 <_vfiprintf_r+0x32>
 800b30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b30e:	f000 fb97 	bl	800ba40 <__retarget_lock_acquire_recursive>
 800b312:	89ab      	ldrh	r3, [r5, #12]
 800b314:	071b      	lsls	r3, r3, #28
 800b316:	d501      	bpl.n	800b31c <_vfiprintf_r+0x3c>
 800b318:	692b      	ldr	r3, [r5, #16]
 800b31a:	b9eb      	cbnz	r3, 800b358 <_vfiprintf_r+0x78>
 800b31c:	4629      	mov	r1, r5
 800b31e:	4630      	mov	r0, r6
 800b320:	f000 f960 	bl	800b5e4 <__swsetup_r>
 800b324:	b1c0      	cbz	r0, 800b358 <_vfiprintf_r+0x78>
 800b326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b328:	07dc      	lsls	r4, r3, #31
 800b32a:	d50e      	bpl.n	800b34a <_vfiprintf_r+0x6a>
 800b32c:	f04f 30ff 	mov.w	r0, #4294967295
 800b330:	b01d      	add	sp, #116	; 0x74
 800b332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b336:	4b7b      	ldr	r3, [pc, #492]	; (800b524 <_vfiprintf_r+0x244>)
 800b338:	429d      	cmp	r5, r3
 800b33a:	d101      	bne.n	800b340 <_vfiprintf_r+0x60>
 800b33c:	68b5      	ldr	r5, [r6, #8]
 800b33e:	e7df      	b.n	800b300 <_vfiprintf_r+0x20>
 800b340:	4b79      	ldr	r3, [pc, #484]	; (800b528 <_vfiprintf_r+0x248>)
 800b342:	429d      	cmp	r5, r3
 800b344:	bf08      	it	eq
 800b346:	68f5      	ldreq	r5, [r6, #12]
 800b348:	e7da      	b.n	800b300 <_vfiprintf_r+0x20>
 800b34a:	89ab      	ldrh	r3, [r5, #12]
 800b34c:	0598      	lsls	r0, r3, #22
 800b34e:	d4ed      	bmi.n	800b32c <_vfiprintf_r+0x4c>
 800b350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b352:	f000 fb76 	bl	800ba42 <__retarget_lock_release_recursive>
 800b356:	e7e9      	b.n	800b32c <_vfiprintf_r+0x4c>
 800b358:	2300      	movs	r3, #0
 800b35a:	9309      	str	r3, [sp, #36]	; 0x24
 800b35c:	2320      	movs	r3, #32
 800b35e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b362:	f8cd 800c 	str.w	r8, [sp, #12]
 800b366:	2330      	movs	r3, #48	; 0x30
 800b368:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b52c <_vfiprintf_r+0x24c>
 800b36c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b370:	f04f 0901 	mov.w	r9, #1
 800b374:	4623      	mov	r3, r4
 800b376:	469a      	mov	sl, r3
 800b378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b37c:	b10a      	cbz	r2, 800b382 <_vfiprintf_r+0xa2>
 800b37e:	2a25      	cmp	r2, #37	; 0x25
 800b380:	d1f9      	bne.n	800b376 <_vfiprintf_r+0x96>
 800b382:	ebba 0b04 	subs.w	fp, sl, r4
 800b386:	d00b      	beq.n	800b3a0 <_vfiprintf_r+0xc0>
 800b388:	465b      	mov	r3, fp
 800b38a:	4622      	mov	r2, r4
 800b38c:	4629      	mov	r1, r5
 800b38e:	4630      	mov	r0, r6
 800b390:	f7ff ff94 	bl	800b2bc <__sfputs_r>
 800b394:	3001      	adds	r0, #1
 800b396:	f000 80aa 	beq.w	800b4ee <_vfiprintf_r+0x20e>
 800b39a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b39c:	445a      	add	r2, fp
 800b39e:	9209      	str	r2, [sp, #36]	; 0x24
 800b3a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	f000 80a2 	beq.w	800b4ee <_vfiprintf_r+0x20e>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b3b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3b4:	f10a 0a01 	add.w	sl, sl, #1
 800b3b8:	9304      	str	r3, [sp, #16]
 800b3ba:	9307      	str	r3, [sp, #28]
 800b3bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3c0:	931a      	str	r3, [sp, #104]	; 0x68
 800b3c2:	4654      	mov	r4, sl
 800b3c4:	2205      	movs	r2, #5
 800b3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ca:	4858      	ldr	r0, [pc, #352]	; (800b52c <_vfiprintf_r+0x24c>)
 800b3cc:	f7f4 ff40 	bl	8000250 <memchr>
 800b3d0:	9a04      	ldr	r2, [sp, #16]
 800b3d2:	b9d8      	cbnz	r0, 800b40c <_vfiprintf_r+0x12c>
 800b3d4:	06d1      	lsls	r1, r2, #27
 800b3d6:	bf44      	itt	mi
 800b3d8:	2320      	movmi	r3, #32
 800b3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3de:	0713      	lsls	r3, r2, #28
 800b3e0:	bf44      	itt	mi
 800b3e2:	232b      	movmi	r3, #43	; 0x2b
 800b3e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ec:	2b2a      	cmp	r3, #42	; 0x2a
 800b3ee:	d015      	beq.n	800b41c <_vfiprintf_r+0x13c>
 800b3f0:	9a07      	ldr	r2, [sp, #28]
 800b3f2:	4654      	mov	r4, sl
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	f04f 0c0a 	mov.w	ip, #10
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b400:	3b30      	subs	r3, #48	; 0x30
 800b402:	2b09      	cmp	r3, #9
 800b404:	d94e      	bls.n	800b4a4 <_vfiprintf_r+0x1c4>
 800b406:	b1b0      	cbz	r0, 800b436 <_vfiprintf_r+0x156>
 800b408:	9207      	str	r2, [sp, #28]
 800b40a:	e014      	b.n	800b436 <_vfiprintf_r+0x156>
 800b40c:	eba0 0308 	sub.w	r3, r0, r8
 800b410:	fa09 f303 	lsl.w	r3, r9, r3
 800b414:	4313      	orrs	r3, r2
 800b416:	9304      	str	r3, [sp, #16]
 800b418:	46a2      	mov	sl, r4
 800b41a:	e7d2      	b.n	800b3c2 <_vfiprintf_r+0xe2>
 800b41c:	9b03      	ldr	r3, [sp, #12]
 800b41e:	1d19      	adds	r1, r3, #4
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	9103      	str	r1, [sp, #12]
 800b424:	2b00      	cmp	r3, #0
 800b426:	bfbb      	ittet	lt
 800b428:	425b      	neglt	r3, r3
 800b42a:	f042 0202 	orrlt.w	r2, r2, #2
 800b42e:	9307      	strge	r3, [sp, #28]
 800b430:	9307      	strlt	r3, [sp, #28]
 800b432:	bfb8      	it	lt
 800b434:	9204      	strlt	r2, [sp, #16]
 800b436:	7823      	ldrb	r3, [r4, #0]
 800b438:	2b2e      	cmp	r3, #46	; 0x2e
 800b43a:	d10c      	bne.n	800b456 <_vfiprintf_r+0x176>
 800b43c:	7863      	ldrb	r3, [r4, #1]
 800b43e:	2b2a      	cmp	r3, #42	; 0x2a
 800b440:	d135      	bne.n	800b4ae <_vfiprintf_r+0x1ce>
 800b442:	9b03      	ldr	r3, [sp, #12]
 800b444:	1d1a      	adds	r2, r3, #4
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	9203      	str	r2, [sp, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	bfb8      	it	lt
 800b44e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b452:	3402      	adds	r4, #2
 800b454:	9305      	str	r3, [sp, #20]
 800b456:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b53c <_vfiprintf_r+0x25c>
 800b45a:	7821      	ldrb	r1, [r4, #0]
 800b45c:	2203      	movs	r2, #3
 800b45e:	4650      	mov	r0, sl
 800b460:	f7f4 fef6 	bl	8000250 <memchr>
 800b464:	b140      	cbz	r0, 800b478 <_vfiprintf_r+0x198>
 800b466:	2340      	movs	r3, #64	; 0x40
 800b468:	eba0 000a 	sub.w	r0, r0, sl
 800b46c:	fa03 f000 	lsl.w	r0, r3, r0
 800b470:	9b04      	ldr	r3, [sp, #16]
 800b472:	4303      	orrs	r3, r0
 800b474:	3401      	adds	r4, #1
 800b476:	9304      	str	r3, [sp, #16]
 800b478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b47c:	482c      	ldr	r0, [pc, #176]	; (800b530 <_vfiprintf_r+0x250>)
 800b47e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b482:	2206      	movs	r2, #6
 800b484:	f7f4 fee4 	bl	8000250 <memchr>
 800b488:	2800      	cmp	r0, #0
 800b48a:	d03f      	beq.n	800b50c <_vfiprintf_r+0x22c>
 800b48c:	4b29      	ldr	r3, [pc, #164]	; (800b534 <_vfiprintf_r+0x254>)
 800b48e:	bb1b      	cbnz	r3, 800b4d8 <_vfiprintf_r+0x1f8>
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	3307      	adds	r3, #7
 800b494:	f023 0307 	bic.w	r3, r3, #7
 800b498:	3308      	adds	r3, #8
 800b49a:	9303      	str	r3, [sp, #12]
 800b49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b49e:	443b      	add	r3, r7
 800b4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a2:	e767      	b.n	800b374 <_vfiprintf_r+0x94>
 800b4a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4a8:	460c      	mov	r4, r1
 800b4aa:	2001      	movs	r0, #1
 800b4ac:	e7a5      	b.n	800b3fa <_vfiprintf_r+0x11a>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	3401      	adds	r4, #1
 800b4b2:	9305      	str	r3, [sp, #20]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	f04f 0c0a 	mov.w	ip, #10
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4c0:	3a30      	subs	r2, #48	; 0x30
 800b4c2:	2a09      	cmp	r2, #9
 800b4c4:	d903      	bls.n	800b4ce <_vfiprintf_r+0x1ee>
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d0c5      	beq.n	800b456 <_vfiprintf_r+0x176>
 800b4ca:	9105      	str	r1, [sp, #20]
 800b4cc:	e7c3      	b.n	800b456 <_vfiprintf_r+0x176>
 800b4ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e7f0      	b.n	800b4ba <_vfiprintf_r+0x1da>
 800b4d8:	ab03      	add	r3, sp, #12
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	462a      	mov	r2, r5
 800b4de:	4b16      	ldr	r3, [pc, #88]	; (800b538 <_vfiprintf_r+0x258>)
 800b4e0:	a904      	add	r1, sp, #16
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f7fc f920 	bl	8007728 <_printf_float>
 800b4e8:	4607      	mov	r7, r0
 800b4ea:	1c78      	adds	r0, r7, #1
 800b4ec:	d1d6      	bne.n	800b49c <_vfiprintf_r+0x1bc>
 800b4ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4f0:	07d9      	lsls	r1, r3, #31
 800b4f2:	d405      	bmi.n	800b500 <_vfiprintf_r+0x220>
 800b4f4:	89ab      	ldrh	r3, [r5, #12]
 800b4f6:	059a      	lsls	r2, r3, #22
 800b4f8:	d402      	bmi.n	800b500 <_vfiprintf_r+0x220>
 800b4fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4fc:	f000 faa1 	bl	800ba42 <__retarget_lock_release_recursive>
 800b500:	89ab      	ldrh	r3, [r5, #12]
 800b502:	065b      	lsls	r3, r3, #25
 800b504:	f53f af12 	bmi.w	800b32c <_vfiprintf_r+0x4c>
 800b508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b50a:	e711      	b.n	800b330 <_vfiprintf_r+0x50>
 800b50c:	ab03      	add	r3, sp, #12
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	462a      	mov	r2, r5
 800b512:	4b09      	ldr	r3, [pc, #36]	; (800b538 <_vfiprintf_r+0x258>)
 800b514:	a904      	add	r1, sp, #16
 800b516:	4630      	mov	r0, r6
 800b518:	f7fc fb92 	bl	8007c40 <_printf_i>
 800b51c:	e7e4      	b.n	800b4e8 <_vfiprintf_r+0x208>
 800b51e:	bf00      	nop
 800b520:	0800c1d4 	.word	0x0800c1d4
 800b524:	0800c1f4 	.word	0x0800c1f4
 800b528:	0800c1b4 	.word	0x0800c1b4
 800b52c:	0800c164 	.word	0x0800c164
 800b530:	0800c16e 	.word	0x0800c16e
 800b534:	08007729 	.word	0x08007729
 800b538:	0800b2bd 	.word	0x0800b2bd
 800b53c:	0800c16a 	.word	0x0800c16a

0800b540 <__swbuf_r>:
 800b540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b542:	460e      	mov	r6, r1
 800b544:	4614      	mov	r4, r2
 800b546:	4605      	mov	r5, r0
 800b548:	b118      	cbz	r0, 800b552 <__swbuf_r+0x12>
 800b54a:	6983      	ldr	r3, [r0, #24]
 800b54c:	b90b      	cbnz	r3, 800b552 <__swbuf_r+0x12>
 800b54e:	f000 f9d9 	bl	800b904 <__sinit>
 800b552:	4b21      	ldr	r3, [pc, #132]	; (800b5d8 <__swbuf_r+0x98>)
 800b554:	429c      	cmp	r4, r3
 800b556:	d12b      	bne.n	800b5b0 <__swbuf_r+0x70>
 800b558:	686c      	ldr	r4, [r5, #4]
 800b55a:	69a3      	ldr	r3, [r4, #24]
 800b55c:	60a3      	str	r3, [r4, #8]
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	071a      	lsls	r2, r3, #28
 800b562:	d52f      	bpl.n	800b5c4 <__swbuf_r+0x84>
 800b564:	6923      	ldr	r3, [r4, #16]
 800b566:	b36b      	cbz	r3, 800b5c4 <__swbuf_r+0x84>
 800b568:	6923      	ldr	r3, [r4, #16]
 800b56a:	6820      	ldr	r0, [r4, #0]
 800b56c:	1ac0      	subs	r0, r0, r3
 800b56e:	6963      	ldr	r3, [r4, #20]
 800b570:	b2f6      	uxtb	r6, r6
 800b572:	4283      	cmp	r3, r0
 800b574:	4637      	mov	r7, r6
 800b576:	dc04      	bgt.n	800b582 <__swbuf_r+0x42>
 800b578:	4621      	mov	r1, r4
 800b57a:	4628      	mov	r0, r5
 800b57c:	f000 f92e 	bl	800b7dc <_fflush_r>
 800b580:	bb30      	cbnz	r0, 800b5d0 <__swbuf_r+0x90>
 800b582:	68a3      	ldr	r3, [r4, #8]
 800b584:	3b01      	subs	r3, #1
 800b586:	60a3      	str	r3, [r4, #8]
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	1c5a      	adds	r2, r3, #1
 800b58c:	6022      	str	r2, [r4, #0]
 800b58e:	701e      	strb	r6, [r3, #0]
 800b590:	6963      	ldr	r3, [r4, #20]
 800b592:	3001      	adds	r0, #1
 800b594:	4283      	cmp	r3, r0
 800b596:	d004      	beq.n	800b5a2 <__swbuf_r+0x62>
 800b598:	89a3      	ldrh	r3, [r4, #12]
 800b59a:	07db      	lsls	r3, r3, #31
 800b59c:	d506      	bpl.n	800b5ac <__swbuf_r+0x6c>
 800b59e:	2e0a      	cmp	r6, #10
 800b5a0:	d104      	bne.n	800b5ac <__swbuf_r+0x6c>
 800b5a2:	4621      	mov	r1, r4
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	f000 f919 	bl	800b7dc <_fflush_r>
 800b5aa:	b988      	cbnz	r0, 800b5d0 <__swbuf_r+0x90>
 800b5ac:	4638      	mov	r0, r7
 800b5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5b0:	4b0a      	ldr	r3, [pc, #40]	; (800b5dc <__swbuf_r+0x9c>)
 800b5b2:	429c      	cmp	r4, r3
 800b5b4:	d101      	bne.n	800b5ba <__swbuf_r+0x7a>
 800b5b6:	68ac      	ldr	r4, [r5, #8]
 800b5b8:	e7cf      	b.n	800b55a <__swbuf_r+0x1a>
 800b5ba:	4b09      	ldr	r3, [pc, #36]	; (800b5e0 <__swbuf_r+0xa0>)
 800b5bc:	429c      	cmp	r4, r3
 800b5be:	bf08      	it	eq
 800b5c0:	68ec      	ldreq	r4, [r5, #12]
 800b5c2:	e7ca      	b.n	800b55a <__swbuf_r+0x1a>
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	f000 f80c 	bl	800b5e4 <__swsetup_r>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d0cb      	beq.n	800b568 <__swbuf_r+0x28>
 800b5d0:	f04f 37ff 	mov.w	r7, #4294967295
 800b5d4:	e7ea      	b.n	800b5ac <__swbuf_r+0x6c>
 800b5d6:	bf00      	nop
 800b5d8:	0800c1d4 	.word	0x0800c1d4
 800b5dc:	0800c1f4 	.word	0x0800c1f4
 800b5e0:	0800c1b4 	.word	0x0800c1b4

0800b5e4 <__swsetup_r>:
 800b5e4:	4b32      	ldr	r3, [pc, #200]	; (800b6b0 <__swsetup_r+0xcc>)
 800b5e6:	b570      	push	{r4, r5, r6, lr}
 800b5e8:	681d      	ldr	r5, [r3, #0]
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	b125      	cbz	r5, 800b5fa <__swsetup_r+0x16>
 800b5f0:	69ab      	ldr	r3, [r5, #24]
 800b5f2:	b913      	cbnz	r3, 800b5fa <__swsetup_r+0x16>
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	f000 f985 	bl	800b904 <__sinit>
 800b5fa:	4b2e      	ldr	r3, [pc, #184]	; (800b6b4 <__swsetup_r+0xd0>)
 800b5fc:	429c      	cmp	r4, r3
 800b5fe:	d10f      	bne.n	800b620 <__swsetup_r+0x3c>
 800b600:	686c      	ldr	r4, [r5, #4]
 800b602:	89a3      	ldrh	r3, [r4, #12]
 800b604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b608:	0719      	lsls	r1, r3, #28
 800b60a:	d42c      	bmi.n	800b666 <__swsetup_r+0x82>
 800b60c:	06dd      	lsls	r5, r3, #27
 800b60e:	d411      	bmi.n	800b634 <__swsetup_r+0x50>
 800b610:	2309      	movs	r3, #9
 800b612:	6033      	str	r3, [r6, #0]
 800b614:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b618:	81a3      	strh	r3, [r4, #12]
 800b61a:	f04f 30ff 	mov.w	r0, #4294967295
 800b61e:	e03e      	b.n	800b69e <__swsetup_r+0xba>
 800b620:	4b25      	ldr	r3, [pc, #148]	; (800b6b8 <__swsetup_r+0xd4>)
 800b622:	429c      	cmp	r4, r3
 800b624:	d101      	bne.n	800b62a <__swsetup_r+0x46>
 800b626:	68ac      	ldr	r4, [r5, #8]
 800b628:	e7eb      	b.n	800b602 <__swsetup_r+0x1e>
 800b62a:	4b24      	ldr	r3, [pc, #144]	; (800b6bc <__swsetup_r+0xd8>)
 800b62c:	429c      	cmp	r4, r3
 800b62e:	bf08      	it	eq
 800b630:	68ec      	ldreq	r4, [r5, #12]
 800b632:	e7e6      	b.n	800b602 <__swsetup_r+0x1e>
 800b634:	0758      	lsls	r0, r3, #29
 800b636:	d512      	bpl.n	800b65e <__swsetup_r+0x7a>
 800b638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b63a:	b141      	cbz	r1, 800b64e <__swsetup_r+0x6a>
 800b63c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b640:	4299      	cmp	r1, r3
 800b642:	d002      	beq.n	800b64a <__swsetup_r+0x66>
 800b644:	4630      	mov	r0, r6
 800b646:	f7ff fb25 	bl	800ac94 <_free_r>
 800b64a:	2300      	movs	r3, #0
 800b64c:	6363      	str	r3, [r4, #52]	; 0x34
 800b64e:	89a3      	ldrh	r3, [r4, #12]
 800b650:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b654:	81a3      	strh	r3, [r4, #12]
 800b656:	2300      	movs	r3, #0
 800b658:	6063      	str	r3, [r4, #4]
 800b65a:	6923      	ldr	r3, [r4, #16]
 800b65c:	6023      	str	r3, [r4, #0]
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	f043 0308 	orr.w	r3, r3, #8
 800b664:	81a3      	strh	r3, [r4, #12]
 800b666:	6923      	ldr	r3, [r4, #16]
 800b668:	b94b      	cbnz	r3, 800b67e <__swsetup_r+0x9a>
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b674:	d003      	beq.n	800b67e <__swsetup_r+0x9a>
 800b676:	4621      	mov	r1, r4
 800b678:	4630      	mov	r0, r6
 800b67a:	f000 fa09 	bl	800ba90 <__smakebuf_r>
 800b67e:	89a0      	ldrh	r0, [r4, #12]
 800b680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b684:	f010 0301 	ands.w	r3, r0, #1
 800b688:	d00a      	beq.n	800b6a0 <__swsetup_r+0xbc>
 800b68a:	2300      	movs	r3, #0
 800b68c:	60a3      	str	r3, [r4, #8]
 800b68e:	6963      	ldr	r3, [r4, #20]
 800b690:	425b      	negs	r3, r3
 800b692:	61a3      	str	r3, [r4, #24]
 800b694:	6923      	ldr	r3, [r4, #16]
 800b696:	b943      	cbnz	r3, 800b6aa <__swsetup_r+0xc6>
 800b698:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b69c:	d1ba      	bne.n	800b614 <__swsetup_r+0x30>
 800b69e:	bd70      	pop	{r4, r5, r6, pc}
 800b6a0:	0781      	lsls	r1, r0, #30
 800b6a2:	bf58      	it	pl
 800b6a4:	6963      	ldrpl	r3, [r4, #20]
 800b6a6:	60a3      	str	r3, [r4, #8]
 800b6a8:	e7f4      	b.n	800b694 <__swsetup_r+0xb0>
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	e7f7      	b.n	800b69e <__swsetup_r+0xba>
 800b6ae:	bf00      	nop
 800b6b0:	20000024 	.word	0x20000024
 800b6b4:	0800c1d4 	.word	0x0800c1d4
 800b6b8:	0800c1f4 	.word	0x0800c1f4
 800b6bc:	0800c1b4 	.word	0x0800c1b4

0800b6c0 <abort>:
 800b6c0:	b508      	push	{r3, lr}
 800b6c2:	2006      	movs	r0, #6
 800b6c4:	f000 fa54 	bl	800bb70 <raise>
 800b6c8:	2001      	movs	r0, #1
 800b6ca:	f7f6 fb3f 	bl	8001d4c <_exit>
	...

0800b6d0 <__sflush_r>:
 800b6d0:	898a      	ldrh	r2, [r1, #12]
 800b6d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d6:	4605      	mov	r5, r0
 800b6d8:	0710      	lsls	r0, r2, #28
 800b6da:	460c      	mov	r4, r1
 800b6dc:	d458      	bmi.n	800b790 <__sflush_r+0xc0>
 800b6de:	684b      	ldr	r3, [r1, #4]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	dc05      	bgt.n	800b6f0 <__sflush_r+0x20>
 800b6e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	dc02      	bgt.n	800b6f0 <__sflush_r+0x20>
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6f2:	2e00      	cmp	r6, #0
 800b6f4:	d0f9      	beq.n	800b6ea <__sflush_r+0x1a>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6fc:	682f      	ldr	r7, [r5, #0]
 800b6fe:	602b      	str	r3, [r5, #0]
 800b700:	d032      	beq.n	800b768 <__sflush_r+0x98>
 800b702:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b704:	89a3      	ldrh	r3, [r4, #12]
 800b706:	075a      	lsls	r2, r3, #29
 800b708:	d505      	bpl.n	800b716 <__sflush_r+0x46>
 800b70a:	6863      	ldr	r3, [r4, #4]
 800b70c:	1ac0      	subs	r0, r0, r3
 800b70e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b710:	b10b      	cbz	r3, 800b716 <__sflush_r+0x46>
 800b712:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b714:	1ac0      	subs	r0, r0, r3
 800b716:	2300      	movs	r3, #0
 800b718:	4602      	mov	r2, r0
 800b71a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b71c:	6a21      	ldr	r1, [r4, #32]
 800b71e:	4628      	mov	r0, r5
 800b720:	47b0      	blx	r6
 800b722:	1c43      	adds	r3, r0, #1
 800b724:	89a3      	ldrh	r3, [r4, #12]
 800b726:	d106      	bne.n	800b736 <__sflush_r+0x66>
 800b728:	6829      	ldr	r1, [r5, #0]
 800b72a:	291d      	cmp	r1, #29
 800b72c:	d82c      	bhi.n	800b788 <__sflush_r+0xb8>
 800b72e:	4a2a      	ldr	r2, [pc, #168]	; (800b7d8 <__sflush_r+0x108>)
 800b730:	40ca      	lsrs	r2, r1
 800b732:	07d6      	lsls	r6, r2, #31
 800b734:	d528      	bpl.n	800b788 <__sflush_r+0xb8>
 800b736:	2200      	movs	r2, #0
 800b738:	6062      	str	r2, [r4, #4]
 800b73a:	04d9      	lsls	r1, r3, #19
 800b73c:	6922      	ldr	r2, [r4, #16]
 800b73e:	6022      	str	r2, [r4, #0]
 800b740:	d504      	bpl.n	800b74c <__sflush_r+0x7c>
 800b742:	1c42      	adds	r2, r0, #1
 800b744:	d101      	bne.n	800b74a <__sflush_r+0x7a>
 800b746:	682b      	ldr	r3, [r5, #0]
 800b748:	b903      	cbnz	r3, 800b74c <__sflush_r+0x7c>
 800b74a:	6560      	str	r0, [r4, #84]	; 0x54
 800b74c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b74e:	602f      	str	r7, [r5, #0]
 800b750:	2900      	cmp	r1, #0
 800b752:	d0ca      	beq.n	800b6ea <__sflush_r+0x1a>
 800b754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b758:	4299      	cmp	r1, r3
 800b75a:	d002      	beq.n	800b762 <__sflush_r+0x92>
 800b75c:	4628      	mov	r0, r5
 800b75e:	f7ff fa99 	bl	800ac94 <_free_r>
 800b762:	2000      	movs	r0, #0
 800b764:	6360      	str	r0, [r4, #52]	; 0x34
 800b766:	e7c1      	b.n	800b6ec <__sflush_r+0x1c>
 800b768:	6a21      	ldr	r1, [r4, #32]
 800b76a:	2301      	movs	r3, #1
 800b76c:	4628      	mov	r0, r5
 800b76e:	47b0      	blx	r6
 800b770:	1c41      	adds	r1, r0, #1
 800b772:	d1c7      	bne.n	800b704 <__sflush_r+0x34>
 800b774:	682b      	ldr	r3, [r5, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d0c4      	beq.n	800b704 <__sflush_r+0x34>
 800b77a:	2b1d      	cmp	r3, #29
 800b77c:	d001      	beq.n	800b782 <__sflush_r+0xb2>
 800b77e:	2b16      	cmp	r3, #22
 800b780:	d101      	bne.n	800b786 <__sflush_r+0xb6>
 800b782:	602f      	str	r7, [r5, #0]
 800b784:	e7b1      	b.n	800b6ea <__sflush_r+0x1a>
 800b786:	89a3      	ldrh	r3, [r4, #12]
 800b788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b78c:	81a3      	strh	r3, [r4, #12]
 800b78e:	e7ad      	b.n	800b6ec <__sflush_r+0x1c>
 800b790:	690f      	ldr	r7, [r1, #16]
 800b792:	2f00      	cmp	r7, #0
 800b794:	d0a9      	beq.n	800b6ea <__sflush_r+0x1a>
 800b796:	0793      	lsls	r3, r2, #30
 800b798:	680e      	ldr	r6, [r1, #0]
 800b79a:	bf08      	it	eq
 800b79c:	694b      	ldreq	r3, [r1, #20]
 800b79e:	600f      	str	r7, [r1, #0]
 800b7a0:	bf18      	it	ne
 800b7a2:	2300      	movne	r3, #0
 800b7a4:	eba6 0807 	sub.w	r8, r6, r7
 800b7a8:	608b      	str	r3, [r1, #8]
 800b7aa:	f1b8 0f00 	cmp.w	r8, #0
 800b7ae:	dd9c      	ble.n	800b6ea <__sflush_r+0x1a>
 800b7b0:	6a21      	ldr	r1, [r4, #32]
 800b7b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7b4:	4643      	mov	r3, r8
 800b7b6:	463a      	mov	r2, r7
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	47b0      	blx	r6
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	dc06      	bgt.n	800b7ce <__sflush_r+0xfe>
 800b7c0:	89a3      	ldrh	r3, [r4, #12]
 800b7c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7c6:	81a3      	strh	r3, [r4, #12]
 800b7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7cc:	e78e      	b.n	800b6ec <__sflush_r+0x1c>
 800b7ce:	4407      	add	r7, r0
 800b7d0:	eba8 0800 	sub.w	r8, r8, r0
 800b7d4:	e7e9      	b.n	800b7aa <__sflush_r+0xda>
 800b7d6:	bf00      	nop
 800b7d8:	20400001 	.word	0x20400001

0800b7dc <_fflush_r>:
 800b7dc:	b538      	push	{r3, r4, r5, lr}
 800b7de:	690b      	ldr	r3, [r1, #16]
 800b7e0:	4605      	mov	r5, r0
 800b7e2:	460c      	mov	r4, r1
 800b7e4:	b913      	cbnz	r3, 800b7ec <_fflush_r+0x10>
 800b7e6:	2500      	movs	r5, #0
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	b118      	cbz	r0, 800b7f6 <_fflush_r+0x1a>
 800b7ee:	6983      	ldr	r3, [r0, #24]
 800b7f0:	b90b      	cbnz	r3, 800b7f6 <_fflush_r+0x1a>
 800b7f2:	f000 f887 	bl	800b904 <__sinit>
 800b7f6:	4b14      	ldr	r3, [pc, #80]	; (800b848 <_fflush_r+0x6c>)
 800b7f8:	429c      	cmp	r4, r3
 800b7fa:	d11b      	bne.n	800b834 <_fflush_r+0x58>
 800b7fc:	686c      	ldr	r4, [r5, #4]
 800b7fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d0ef      	beq.n	800b7e6 <_fflush_r+0xa>
 800b806:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b808:	07d0      	lsls	r0, r2, #31
 800b80a:	d404      	bmi.n	800b816 <_fflush_r+0x3a>
 800b80c:	0599      	lsls	r1, r3, #22
 800b80e:	d402      	bmi.n	800b816 <_fflush_r+0x3a>
 800b810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b812:	f000 f915 	bl	800ba40 <__retarget_lock_acquire_recursive>
 800b816:	4628      	mov	r0, r5
 800b818:	4621      	mov	r1, r4
 800b81a:	f7ff ff59 	bl	800b6d0 <__sflush_r>
 800b81e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b820:	07da      	lsls	r2, r3, #31
 800b822:	4605      	mov	r5, r0
 800b824:	d4e0      	bmi.n	800b7e8 <_fflush_r+0xc>
 800b826:	89a3      	ldrh	r3, [r4, #12]
 800b828:	059b      	lsls	r3, r3, #22
 800b82a:	d4dd      	bmi.n	800b7e8 <_fflush_r+0xc>
 800b82c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b82e:	f000 f908 	bl	800ba42 <__retarget_lock_release_recursive>
 800b832:	e7d9      	b.n	800b7e8 <_fflush_r+0xc>
 800b834:	4b05      	ldr	r3, [pc, #20]	; (800b84c <_fflush_r+0x70>)
 800b836:	429c      	cmp	r4, r3
 800b838:	d101      	bne.n	800b83e <_fflush_r+0x62>
 800b83a:	68ac      	ldr	r4, [r5, #8]
 800b83c:	e7df      	b.n	800b7fe <_fflush_r+0x22>
 800b83e:	4b04      	ldr	r3, [pc, #16]	; (800b850 <_fflush_r+0x74>)
 800b840:	429c      	cmp	r4, r3
 800b842:	bf08      	it	eq
 800b844:	68ec      	ldreq	r4, [r5, #12]
 800b846:	e7da      	b.n	800b7fe <_fflush_r+0x22>
 800b848:	0800c1d4 	.word	0x0800c1d4
 800b84c:	0800c1f4 	.word	0x0800c1f4
 800b850:	0800c1b4 	.word	0x0800c1b4

0800b854 <std>:
 800b854:	2300      	movs	r3, #0
 800b856:	b510      	push	{r4, lr}
 800b858:	4604      	mov	r4, r0
 800b85a:	e9c0 3300 	strd	r3, r3, [r0]
 800b85e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b862:	6083      	str	r3, [r0, #8]
 800b864:	8181      	strh	r1, [r0, #12]
 800b866:	6643      	str	r3, [r0, #100]	; 0x64
 800b868:	81c2      	strh	r2, [r0, #14]
 800b86a:	6183      	str	r3, [r0, #24]
 800b86c:	4619      	mov	r1, r3
 800b86e:	2208      	movs	r2, #8
 800b870:	305c      	adds	r0, #92	; 0x5c
 800b872:	f7fb febf 	bl	80075f4 <memset>
 800b876:	4b05      	ldr	r3, [pc, #20]	; (800b88c <std+0x38>)
 800b878:	6263      	str	r3, [r4, #36]	; 0x24
 800b87a:	4b05      	ldr	r3, [pc, #20]	; (800b890 <std+0x3c>)
 800b87c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b87e:	4b05      	ldr	r3, [pc, #20]	; (800b894 <std+0x40>)
 800b880:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b882:	4b05      	ldr	r3, [pc, #20]	; (800b898 <std+0x44>)
 800b884:	6224      	str	r4, [r4, #32]
 800b886:	6323      	str	r3, [r4, #48]	; 0x30
 800b888:	bd10      	pop	{r4, pc}
 800b88a:	bf00      	nop
 800b88c:	0800bba9 	.word	0x0800bba9
 800b890:	0800bbcb 	.word	0x0800bbcb
 800b894:	0800bc03 	.word	0x0800bc03
 800b898:	0800bc27 	.word	0x0800bc27

0800b89c <_cleanup_r>:
 800b89c:	4901      	ldr	r1, [pc, #4]	; (800b8a4 <_cleanup_r+0x8>)
 800b89e:	f000 b8af 	b.w	800ba00 <_fwalk_reent>
 800b8a2:	bf00      	nop
 800b8a4:	0800b7dd 	.word	0x0800b7dd

0800b8a8 <__sfmoreglue>:
 800b8a8:	b570      	push	{r4, r5, r6, lr}
 800b8aa:	2268      	movs	r2, #104	; 0x68
 800b8ac:	1e4d      	subs	r5, r1, #1
 800b8ae:	4355      	muls	r5, r2
 800b8b0:	460e      	mov	r6, r1
 800b8b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8b6:	f7ff fa59 	bl	800ad6c <_malloc_r>
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	b140      	cbz	r0, 800b8d0 <__sfmoreglue+0x28>
 800b8be:	2100      	movs	r1, #0
 800b8c0:	e9c0 1600 	strd	r1, r6, [r0]
 800b8c4:	300c      	adds	r0, #12
 800b8c6:	60a0      	str	r0, [r4, #8]
 800b8c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b8cc:	f7fb fe92 	bl	80075f4 <memset>
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	bd70      	pop	{r4, r5, r6, pc}

0800b8d4 <__sfp_lock_acquire>:
 800b8d4:	4801      	ldr	r0, [pc, #4]	; (800b8dc <__sfp_lock_acquire+0x8>)
 800b8d6:	f000 b8b3 	b.w	800ba40 <__retarget_lock_acquire_recursive>
 800b8da:	bf00      	nop
 800b8dc:	200008a9 	.word	0x200008a9

0800b8e0 <__sfp_lock_release>:
 800b8e0:	4801      	ldr	r0, [pc, #4]	; (800b8e8 <__sfp_lock_release+0x8>)
 800b8e2:	f000 b8ae 	b.w	800ba42 <__retarget_lock_release_recursive>
 800b8e6:	bf00      	nop
 800b8e8:	200008a9 	.word	0x200008a9

0800b8ec <__sinit_lock_acquire>:
 800b8ec:	4801      	ldr	r0, [pc, #4]	; (800b8f4 <__sinit_lock_acquire+0x8>)
 800b8ee:	f000 b8a7 	b.w	800ba40 <__retarget_lock_acquire_recursive>
 800b8f2:	bf00      	nop
 800b8f4:	200008aa 	.word	0x200008aa

0800b8f8 <__sinit_lock_release>:
 800b8f8:	4801      	ldr	r0, [pc, #4]	; (800b900 <__sinit_lock_release+0x8>)
 800b8fa:	f000 b8a2 	b.w	800ba42 <__retarget_lock_release_recursive>
 800b8fe:	bf00      	nop
 800b900:	200008aa 	.word	0x200008aa

0800b904 <__sinit>:
 800b904:	b510      	push	{r4, lr}
 800b906:	4604      	mov	r4, r0
 800b908:	f7ff fff0 	bl	800b8ec <__sinit_lock_acquire>
 800b90c:	69a3      	ldr	r3, [r4, #24]
 800b90e:	b11b      	cbz	r3, 800b918 <__sinit+0x14>
 800b910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b914:	f7ff bff0 	b.w	800b8f8 <__sinit_lock_release>
 800b918:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b91c:	6523      	str	r3, [r4, #80]	; 0x50
 800b91e:	4b13      	ldr	r3, [pc, #76]	; (800b96c <__sinit+0x68>)
 800b920:	4a13      	ldr	r2, [pc, #76]	; (800b970 <__sinit+0x6c>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	62a2      	str	r2, [r4, #40]	; 0x28
 800b926:	42a3      	cmp	r3, r4
 800b928:	bf04      	itt	eq
 800b92a:	2301      	moveq	r3, #1
 800b92c:	61a3      	streq	r3, [r4, #24]
 800b92e:	4620      	mov	r0, r4
 800b930:	f000 f820 	bl	800b974 <__sfp>
 800b934:	6060      	str	r0, [r4, #4]
 800b936:	4620      	mov	r0, r4
 800b938:	f000 f81c 	bl	800b974 <__sfp>
 800b93c:	60a0      	str	r0, [r4, #8]
 800b93e:	4620      	mov	r0, r4
 800b940:	f000 f818 	bl	800b974 <__sfp>
 800b944:	2200      	movs	r2, #0
 800b946:	60e0      	str	r0, [r4, #12]
 800b948:	2104      	movs	r1, #4
 800b94a:	6860      	ldr	r0, [r4, #4]
 800b94c:	f7ff ff82 	bl	800b854 <std>
 800b950:	68a0      	ldr	r0, [r4, #8]
 800b952:	2201      	movs	r2, #1
 800b954:	2109      	movs	r1, #9
 800b956:	f7ff ff7d 	bl	800b854 <std>
 800b95a:	68e0      	ldr	r0, [r4, #12]
 800b95c:	2202      	movs	r2, #2
 800b95e:	2112      	movs	r1, #18
 800b960:	f7ff ff78 	bl	800b854 <std>
 800b964:	2301      	movs	r3, #1
 800b966:	61a3      	str	r3, [r4, #24]
 800b968:	e7d2      	b.n	800b910 <__sinit+0xc>
 800b96a:	bf00      	nop
 800b96c:	0800bd70 	.word	0x0800bd70
 800b970:	0800b89d 	.word	0x0800b89d

0800b974 <__sfp>:
 800b974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b976:	4607      	mov	r7, r0
 800b978:	f7ff ffac 	bl	800b8d4 <__sfp_lock_acquire>
 800b97c:	4b1e      	ldr	r3, [pc, #120]	; (800b9f8 <__sfp+0x84>)
 800b97e:	681e      	ldr	r6, [r3, #0]
 800b980:	69b3      	ldr	r3, [r6, #24]
 800b982:	b913      	cbnz	r3, 800b98a <__sfp+0x16>
 800b984:	4630      	mov	r0, r6
 800b986:	f7ff ffbd 	bl	800b904 <__sinit>
 800b98a:	3648      	adds	r6, #72	; 0x48
 800b98c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b990:	3b01      	subs	r3, #1
 800b992:	d503      	bpl.n	800b99c <__sfp+0x28>
 800b994:	6833      	ldr	r3, [r6, #0]
 800b996:	b30b      	cbz	r3, 800b9dc <__sfp+0x68>
 800b998:	6836      	ldr	r6, [r6, #0]
 800b99a:	e7f7      	b.n	800b98c <__sfp+0x18>
 800b99c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9a0:	b9d5      	cbnz	r5, 800b9d8 <__sfp+0x64>
 800b9a2:	4b16      	ldr	r3, [pc, #88]	; (800b9fc <__sfp+0x88>)
 800b9a4:	60e3      	str	r3, [r4, #12]
 800b9a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9aa:	6665      	str	r5, [r4, #100]	; 0x64
 800b9ac:	f000 f847 	bl	800ba3e <__retarget_lock_init_recursive>
 800b9b0:	f7ff ff96 	bl	800b8e0 <__sfp_lock_release>
 800b9b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b9b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b9bc:	6025      	str	r5, [r4, #0]
 800b9be:	61a5      	str	r5, [r4, #24]
 800b9c0:	2208      	movs	r2, #8
 800b9c2:	4629      	mov	r1, r5
 800b9c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9c8:	f7fb fe14 	bl	80075f4 <memset>
 800b9cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b9d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9d8:	3468      	adds	r4, #104	; 0x68
 800b9da:	e7d9      	b.n	800b990 <__sfp+0x1c>
 800b9dc:	2104      	movs	r1, #4
 800b9de:	4638      	mov	r0, r7
 800b9e0:	f7ff ff62 	bl	800b8a8 <__sfmoreglue>
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	6030      	str	r0, [r6, #0]
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	d1d5      	bne.n	800b998 <__sfp+0x24>
 800b9ec:	f7ff ff78 	bl	800b8e0 <__sfp_lock_release>
 800b9f0:	230c      	movs	r3, #12
 800b9f2:	603b      	str	r3, [r7, #0]
 800b9f4:	e7ee      	b.n	800b9d4 <__sfp+0x60>
 800b9f6:	bf00      	nop
 800b9f8:	0800bd70 	.word	0x0800bd70
 800b9fc:	ffff0001 	.word	0xffff0001

0800ba00 <_fwalk_reent>:
 800ba00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba04:	4606      	mov	r6, r0
 800ba06:	4688      	mov	r8, r1
 800ba08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba0c:	2700      	movs	r7, #0
 800ba0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba12:	f1b9 0901 	subs.w	r9, r9, #1
 800ba16:	d505      	bpl.n	800ba24 <_fwalk_reent+0x24>
 800ba18:	6824      	ldr	r4, [r4, #0]
 800ba1a:	2c00      	cmp	r4, #0
 800ba1c:	d1f7      	bne.n	800ba0e <_fwalk_reent+0xe>
 800ba1e:	4638      	mov	r0, r7
 800ba20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba24:	89ab      	ldrh	r3, [r5, #12]
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d907      	bls.n	800ba3a <_fwalk_reent+0x3a>
 800ba2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba2e:	3301      	adds	r3, #1
 800ba30:	d003      	beq.n	800ba3a <_fwalk_reent+0x3a>
 800ba32:	4629      	mov	r1, r5
 800ba34:	4630      	mov	r0, r6
 800ba36:	47c0      	blx	r8
 800ba38:	4307      	orrs	r7, r0
 800ba3a:	3568      	adds	r5, #104	; 0x68
 800ba3c:	e7e9      	b.n	800ba12 <_fwalk_reent+0x12>

0800ba3e <__retarget_lock_init_recursive>:
 800ba3e:	4770      	bx	lr

0800ba40 <__retarget_lock_acquire_recursive>:
 800ba40:	4770      	bx	lr

0800ba42 <__retarget_lock_release_recursive>:
 800ba42:	4770      	bx	lr

0800ba44 <__swhatbuf_r>:
 800ba44:	b570      	push	{r4, r5, r6, lr}
 800ba46:	460e      	mov	r6, r1
 800ba48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba4c:	2900      	cmp	r1, #0
 800ba4e:	b096      	sub	sp, #88	; 0x58
 800ba50:	4614      	mov	r4, r2
 800ba52:	461d      	mov	r5, r3
 800ba54:	da08      	bge.n	800ba68 <__swhatbuf_r+0x24>
 800ba56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	602a      	str	r2, [r5, #0]
 800ba5e:	061a      	lsls	r2, r3, #24
 800ba60:	d410      	bmi.n	800ba84 <__swhatbuf_r+0x40>
 800ba62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba66:	e00e      	b.n	800ba86 <__swhatbuf_r+0x42>
 800ba68:	466a      	mov	r2, sp
 800ba6a:	f000 f903 	bl	800bc74 <_fstat_r>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	dbf1      	blt.n	800ba56 <__swhatbuf_r+0x12>
 800ba72:	9a01      	ldr	r2, [sp, #4]
 800ba74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba7c:	425a      	negs	r2, r3
 800ba7e:	415a      	adcs	r2, r3
 800ba80:	602a      	str	r2, [r5, #0]
 800ba82:	e7ee      	b.n	800ba62 <__swhatbuf_r+0x1e>
 800ba84:	2340      	movs	r3, #64	; 0x40
 800ba86:	2000      	movs	r0, #0
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	b016      	add	sp, #88	; 0x58
 800ba8c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba90 <__smakebuf_r>:
 800ba90:	898b      	ldrh	r3, [r1, #12]
 800ba92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba94:	079d      	lsls	r5, r3, #30
 800ba96:	4606      	mov	r6, r0
 800ba98:	460c      	mov	r4, r1
 800ba9a:	d507      	bpl.n	800baac <__smakebuf_r+0x1c>
 800ba9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800baa0:	6023      	str	r3, [r4, #0]
 800baa2:	6123      	str	r3, [r4, #16]
 800baa4:	2301      	movs	r3, #1
 800baa6:	6163      	str	r3, [r4, #20]
 800baa8:	b002      	add	sp, #8
 800baaa:	bd70      	pop	{r4, r5, r6, pc}
 800baac:	ab01      	add	r3, sp, #4
 800baae:	466a      	mov	r2, sp
 800bab0:	f7ff ffc8 	bl	800ba44 <__swhatbuf_r>
 800bab4:	9900      	ldr	r1, [sp, #0]
 800bab6:	4605      	mov	r5, r0
 800bab8:	4630      	mov	r0, r6
 800baba:	f7ff f957 	bl	800ad6c <_malloc_r>
 800babe:	b948      	cbnz	r0, 800bad4 <__smakebuf_r+0x44>
 800bac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bac4:	059a      	lsls	r2, r3, #22
 800bac6:	d4ef      	bmi.n	800baa8 <__smakebuf_r+0x18>
 800bac8:	f023 0303 	bic.w	r3, r3, #3
 800bacc:	f043 0302 	orr.w	r3, r3, #2
 800bad0:	81a3      	strh	r3, [r4, #12]
 800bad2:	e7e3      	b.n	800ba9c <__smakebuf_r+0xc>
 800bad4:	4b0d      	ldr	r3, [pc, #52]	; (800bb0c <__smakebuf_r+0x7c>)
 800bad6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bad8:	89a3      	ldrh	r3, [r4, #12]
 800bada:	6020      	str	r0, [r4, #0]
 800badc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bae0:	81a3      	strh	r3, [r4, #12]
 800bae2:	9b00      	ldr	r3, [sp, #0]
 800bae4:	6163      	str	r3, [r4, #20]
 800bae6:	9b01      	ldr	r3, [sp, #4]
 800bae8:	6120      	str	r0, [r4, #16]
 800baea:	b15b      	cbz	r3, 800bb04 <__smakebuf_r+0x74>
 800baec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baf0:	4630      	mov	r0, r6
 800baf2:	f000 f8d1 	bl	800bc98 <_isatty_r>
 800baf6:	b128      	cbz	r0, 800bb04 <__smakebuf_r+0x74>
 800baf8:	89a3      	ldrh	r3, [r4, #12]
 800bafa:	f023 0303 	bic.w	r3, r3, #3
 800bafe:	f043 0301 	orr.w	r3, r3, #1
 800bb02:	81a3      	strh	r3, [r4, #12]
 800bb04:	89a0      	ldrh	r0, [r4, #12]
 800bb06:	4305      	orrs	r5, r0
 800bb08:	81a5      	strh	r5, [r4, #12]
 800bb0a:	e7cd      	b.n	800baa8 <__smakebuf_r+0x18>
 800bb0c:	0800b89d 	.word	0x0800b89d

0800bb10 <_malloc_usable_size_r>:
 800bb10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb14:	1f18      	subs	r0, r3, #4
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	bfbc      	itt	lt
 800bb1a:	580b      	ldrlt	r3, [r1, r0]
 800bb1c:	18c0      	addlt	r0, r0, r3
 800bb1e:	4770      	bx	lr

0800bb20 <_raise_r>:
 800bb20:	291f      	cmp	r1, #31
 800bb22:	b538      	push	{r3, r4, r5, lr}
 800bb24:	4604      	mov	r4, r0
 800bb26:	460d      	mov	r5, r1
 800bb28:	d904      	bls.n	800bb34 <_raise_r+0x14>
 800bb2a:	2316      	movs	r3, #22
 800bb2c:	6003      	str	r3, [r0, #0]
 800bb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb32:	bd38      	pop	{r3, r4, r5, pc}
 800bb34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb36:	b112      	cbz	r2, 800bb3e <_raise_r+0x1e>
 800bb38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb3c:	b94b      	cbnz	r3, 800bb52 <_raise_r+0x32>
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f000 f830 	bl	800bba4 <_getpid_r>
 800bb44:	462a      	mov	r2, r5
 800bb46:	4601      	mov	r1, r0
 800bb48:	4620      	mov	r0, r4
 800bb4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb4e:	f000 b817 	b.w	800bb80 <_kill_r>
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d00a      	beq.n	800bb6c <_raise_r+0x4c>
 800bb56:	1c59      	adds	r1, r3, #1
 800bb58:	d103      	bne.n	800bb62 <_raise_r+0x42>
 800bb5a:	2316      	movs	r3, #22
 800bb5c:	6003      	str	r3, [r0, #0]
 800bb5e:	2001      	movs	r0, #1
 800bb60:	e7e7      	b.n	800bb32 <_raise_r+0x12>
 800bb62:	2400      	movs	r4, #0
 800bb64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb68:	4628      	mov	r0, r5
 800bb6a:	4798      	blx	r3
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	e7e0      	b.n	800bb32 <_raise_r+0x12>

0800bb70 <raise>:
 800bb70:	4b02      	ldr	r3, [pc, #8]	; (800bb7c <raise+0xc>)
 800bb72:	4601      	mov	r1, r0
 800bb74:	6818      	ldr	r0, [r3, #0]
 800bb76:	f7ff bfd3 	b.w	800bb20 <_raise_r>
 800bb7a:	bf00      	nop
 800bb7c:	20000024 	.word	0x20000024

0800bb80 <_kill_r>:
 800bb80:	b538      	push	{r3, r4, r5, lr}
 800bb82:	4d07      	ldr	r5, [pc, #28]	; (800bba0 <_kill_r+0x20>)
 800bb84:	2300      	movs	r3, #0
 800bb86:	4604      	mov	r4, r0
 800bb88:	4608      	mov	r0, r1
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	602b      	str	r3, [r5, #0]
 800bb8e:	f7f6 f8cd 	bl	8001d2c <_kill>
 800bb92:	1c43      	adds	r3, r0, #1
 800bb94:	d102      	bne.n	800bb9c <_kill_r+0x1c>
 800bb96:	682b      	ldr	r3, [r5, #0]
 800bb98:	b103      	cbz	r3, 800bb9c <_kill_r+0x1c>
 800bb9a:	6023      	str	r3, [r4, #0]
 800bb9c:	bd38      	pop	{r3, r4, r5, pc}
 800bb9e:	bf00      	nop
 800bba0:	200008a4 	.word	0x200008a4

0800bba4 <_getpid_r>:
 800bba4:	f7f6 b8ba 	b.w	8001d1c <_getpid>

0800bba8 <__sread>:
 800bba8:	b510      	push	{r4, lr}
 800bbaa:	460c      	mov	r4, r1
 800bbac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbb0:	f000 f894 	bl	800bcdc <_read_r>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	bfab      	itete	ge
 800bbb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbba:	89a3      	ldrhlt	r3, [r4, #12]
 800bbbc:	181b      	addge	r3, r3, r0
 800bbbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbc2:	bfac      	ite	ge
 800bbc4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbc6:	81a3      	strhlt	r3, [r4, #12]
 800bbc8:	bd10      	pop	{r4, pc}

0800bbca <__swrite>:
 800bbca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbce:	461f      	mov	r7, r3
 800bbd0:	898b      	ldrh	r3, [r1, #12]
 800bbd2:	05db      	lsls	r3, r3, #23
 800bbd4:	4605      	mov	r5, r0
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	4616      	mov	r6, r2
 800bbda:	d505      	bpl.n	800bbe8 <__swrite+0x1e>
 800bbdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe0:	2302      	movs	r3, #2
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f000 f868 	bl	800bcb8 <_lseek_r>
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbf2:	81a3      	strh	r3, [r4, #12]
 800bbf4:	4632      	mov	r2, r6
 800bbf6:	463b      	mov	r3, r7
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbfe:	f000 b817 	b.w	800bc30 <_write_r>

0800bc02 <__sseek>:
 800bc02:	b510      	push	{r4, lr}
 800bc04:	460c      	mov	r4, r1
 800bc06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc0a:	f000 f855 	bl	800bcb8 <_lseek_r>
 800bc0e:	1c43      	adds	r3, r0, #1
 800bc10:	89a3      	ldrh	r3, [r4, #12]
 800bc12:	bf15      	itete	ne
 800bc14:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc1e:	81a3      	strheq	r3, [r4, #12]
 800bc20:	bf18      	it	ne
 800bc22:	81a3      	strhne	r3, [r4, #12]
 800bc24:	bd10      	pop	{r4, pc}

0800bc26 <__sclose>:
 800bc26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc2a:	f000 b813 	b.w	800bc54 <_close_r>
	...

0800bc30 <_write_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	4d07      	ldr	r5, [pc, #28]	; (800bc50 <_write_r+0x20>)
 800bc34:	4604      	mov	r4, r0
 800bc36:	4608      	mov	r0, r1
 800bc38:	4611      	mov	r1, r2
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	602a      	str	r2, [r5, #0]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	f7f6 f8ab 	bl	8001d9a <_write>
 800bc44:	1c43      	adds	r3, r0, #1
 800bc46:	d102      	bne.n	800bc4e <_write_r+0x1e>
 800bc48:	682b      	ldr	r3, [r5, #0]
 800bc4a:	b103      	cbz	r3, 800bc4e <_write_r+0x1e>
 800bc4c:	6023      	str	r3, [r4, #0]
 800bc4e:	bd38      	pop	{r3, r4, r5, pc}
 800bc50:	200008a4 	.word	0x200008a4

0800bc54 <_close_r>:
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	4d06      	ldr	r5, [pc, #24]	; (800bc70 <_close_r+0x1c>)
 800bc58:	2300      	movs	r3, #0
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	4608      	mov	r0, r1
 800bc5e:	602b      	str	r3, [r5, #0]
 800bc60:	f7f6 f8b7 	bl	8001dd2 <_close>
 800bc64:	1c43      	adds	r3, r0, #1
 800bc66:	d102      	bne.n	800bc6e <_close_r+0x1a>
 800bc68:	682b      	ldr	r3, [r5, #0]
 800bc6a:	b103      	cbz	r3, 800bc6e <_close_r+0x1a>
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	200008a4 	.word	0x200008a4

0800bc74 <_fstat_r>:
 800bc74:	b538      	push	{r3, r4, r5, lr}
 800bc76:	4d07      	ldr	r5, [pc, #28]	; (800bc94 <_fstat_r+0x20>)
 800bc78:	2300      	movs	r3, #0
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	4608      	mov	r0, r1
 800bc7e:	4611      	mov	r1, r2
 800bc80:	602b      	str	r3, [r5, #0]
 800bc82:	f7f6 f8b2 	bl	8001dea <_fstat>
 800bc86:	1c43      	adds	r3, r0, #1
 800bc88:	d102      	bne.n	800bc90 <_fstat_r+0x1c>
 800bc8a:	682b      	ldr	r3, [r5, #0]
 800bc8c:	b103      	cbz	r3, 800bc90 <_fstat_r+0x1c>
 800bc8e:	6023      	str	r3, [r4, #0]
 800bc90:	bd38      	pop	{r3, r4, r5, pc}
 800bc92:	bf00      	nop
 800bc94:	200008a4 	.word	0x200008a4

0800bc98 <_isatty_r>:
 800bc98:	b538      	push	{r3, r4, r5, lr}
 800bc9a:	4d06      	ldr	r5, [pc, #24]	; (800bcb4 <_isatty_r+0x1c>)
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	4604      	mov	r4, r0
 800bca0:	4608      	mov	r0, r1
 800bca2:	602b      	str	r3, [r5, #0]
 800bca4:	f7f6 f8b1 	bl	8001e0a <_isatty>
 800bca8:	1c43      	adds	r3, r0, #1
 800bcaa:	d102      	bne.n	800bcb2 <_isatty_r+0x1a>
 800bcac:	682b      	ldr	r3, [r5, #0]
 800bcae:	b103      	cbz	r3, 800bcb2 <_isatty_r+0x1a>
 800bcb0:	6023      	str	r3, [r4, #0]
 800bcb2:	bd38      	pop	{r3, r4, r5, pc}
 800bcb4:	200008a4 	.word	0x200008a4

0800bcb8 <_lseek_r>:
 800bcb8:	b538      	push	{r3, r4, r5, lr}
 800bcba:	4d07      	ldr	r5, [pc, #28]	; (800bcd8 <_lseek_r+0x20>)
 800bcbc:	4604      	mov	r4, r0
 800bcbe:	4608      	mov	r0, r1
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	602a      	str	r2, [r5, #0]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	f7f6 f8aa 	bl	8001e20 <_lseek>
 800bccc:	1c43      	adds	r3, r0, #1
 800bcce:	d102      	bne.n	800bcd6 <_lseek_r+0x1e>
 800bcd0:	682b      	ldr	r3, [r5, #0]
 800bcd2:	b103      	cbz	r3, 800bcd6 <_lseek_r+0x1e>
 800bcd4:	6023      	str	r3, [r4, #0]
 800bcd6:	bd38      	pop	{r3, r4, r5, pc}
 800bcd8:	200008a4 	.word	0x200008a4

0800bcdc <_read_r>:
 800bcdc:	b538      	push	{r3, r4, r5, lr}
 800bcde:	4d07      	ldr	r5, [pc, #28]	; (800bcfc <_read_r+0x20>)
 800bce0:	4604      	mov	r4, r0
 800bce2:	4608      	mov	r0, r1
 800bce4:	4611      	mov	r1, r2
 800bce6:	2200      	movs	r2, #0
 800bce8:	602a      	str	r2, [r5, #0]
 800bcea:	461a      	mov	r2, r3
 800bcec:	f7f6 f838 	bl	8001d60 <_read>
 800bcf0:	1c43      	adds	r3, r0, #1
 800bcf2:	d102      	bne.n	800bcfa <_read_r+0x1e>
 800bcf4:	682b      	ldr	r3, [r5, #0]
 800bcf6:	b103      	cbz	r3, 800bcfa <_read_r+0x1e>
 800bcf8:	6023      	str	r3, [r4, #0]
 800bcfa:	bd38      	pop	{r3, r4, r5, pc}
 800bcfc:	200008a4 	.word	0x200008a4

0800bd00 <_init>:
 800bd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd02:	bf00      	nop
 800bd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd06:	bc08      	pop	{r3}
 800bd08:	469e      	mov	lr, r3
 800bd0a:	4770      	bx	lr

0800bd0c <_fini>:
 800bd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0e:	bf00      	nop
 800bd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd12:	bc08      	pop	{r3}
 800bd14:	469e      	mov	lr, r3
 800bd16:	4770      	bx	lr
