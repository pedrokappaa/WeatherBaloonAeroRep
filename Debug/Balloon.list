
Balloon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea30  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ac  0800ec30  0800ec30  0001ec30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5dc  0800f5dc  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5dc  0800f5dc  0001f5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5e4  0800f5e4  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5e4  0800f5e4  0001f5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5e8  0800f5e8  0001f5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800f5ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027a4  200001f8  0800f7e4  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000299c  0800f7e4  0002299c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a896  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bee  00000000  00000000  0003aabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  0003e6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  0003fc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ceaf  00000000  00000000  000410b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fc52  00000000  00000000  0006df67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001065e2  00000000  00000000  0008dbb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019419b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d98  00000000  00000000  001941ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ec18 	.word	0x0800ec18

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800ec18 	.word	0x0800ec18

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ee:	4b3e      	ldr	r3, [pc, #248]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 80009f0:	4a3e      	ldr	r2, [pc, #248]	; (8000aec <MX_ADC1_Init+0x110>)
 80009f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009f4:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a00:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a06:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0c:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000a1c:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a1e:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a2c:	2205      	movs	r2, #5
 8000a2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a30:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a38:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3e:	482a      	ldr	r0, [pc, #168]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a40:	f001 fe8a 	bl	8002758 <HAL_ADC_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000a4a:	f001 f9c9 	bl	8001de0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_ADC1_Init+0x114>)
 8000a50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a60:	f001 febe 	bl	80027e0 <HAL_ADC_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a6a:	f001 f9b9 	bl	8001de0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a7c:	f001 feb0 	bl	80027e0 <HAL_ADC_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000a86:	f001 f9ab 	bl	8001de0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000a98:	f001 fea2 	bl	80027e0 <HAL_ADC_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000aa2:	f001 f99d 	bl	8001de0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aae:	463b      	mov	r3, r7
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000ab4:	f001 fe94 	bl	80027e0 <HAL_ADC_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000abe:	f001 f98f 	bl	8001de0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ac2:	230d      	movs	r3, #13
 8000ac4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aca:	463b      	mov	r3, r7
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_ADC1_Init+0x10c>)
 8000ad0:	f001 fe86 	bl	80027e0 <HAL_ADC_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000ada:	f001 f981 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000214 	.word	0x20000214
 8000aec:	40012000 	.word	0x40012000
 8000af0:	10000012 	.word	0x10000012

08000af4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a39      	ldr	r2, [pc, #228]	; (8000bf8 <HAL_ADC_MspInit+0x104>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d16b      	bne.n	8000bee <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b16:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a38      	ldr	r2, [pc, #224]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a32      	ldr	r2, [pc, #200]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a2c      	ldr	r2, [pc, #176]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <HAL_ADC_MspInit+0x108>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000b5e:	2309      	movs	r3, #9
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b62:	2303      	movs	r3, #3
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4823      	ldr	r0, [pc, #140]	; (8000c00 <HAL_ADC_MspInit+0x10c>)
 8000b72:	f002 fd13 	bl	800359c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000b76:	2309      	movs	r3, #9
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	481e      	ldr	r0, [pc, #120]	; (8000c04 <HAL_ADC_MspInit+0x110>)
 8000b8a:	f002 fd07 	bl	800359c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000b90:	4a1e      	ldr	r2, [pc, #120]	; (8000c0c <HAL_ADC_MspInit+0x118>)
 8000b92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bc4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bd4:	f002 f966 	bl	8002ea4 <HAL_DMA_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8000bde:	f001 f8ff 	bl	8001de0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000be6:	639a      	str	r2, [r3, #56]	; 0x38
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_ADC_MspInit+0x114>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40012000 	.word	0x40012000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	2000025c 	.word	0x2000025c
 8000c0c:	40026410 	.word	0x40026410

08000c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2038      	movs	r0, #56	; 0x38
 8000c34:	f002 f8ff 	bl	8002e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c38:	2038      	movs	r0, #56	; 0x38
 8000c3a:	f002 f918 	bl	8002e6e <HAL_NVIC_EnableIRQ>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c56:	4804      	ldr	r0, [pc, #16]	; (8000c68 <SELECT+0x1c>)
 8000c58:	f002 fe4c 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f001 fd57 	bl	8002710 <HAL_Delay>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <DESELECT+0x1c>)
 8000c78:	f002 fe3c 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f001 fd47 	bl	8002710 <HAL_Delay>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40020c00 	.word	0x40020c00

08000c8c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c96:	bf00      	nop
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <SPI_TxByte+0x30>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d1f8      	bne.n	8000c98 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000ca6:	1df9      	adds	r1, r7, #7
 8000ca8:	2364      	movs	r3, #100	; 0x64
 8000caa:	2201      	movs	r2, #1
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <SPI_TxByte+0x30>)
 8000cae:	f004 f812 	bl	8004cd6 <HAL_SPI_Transmit>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20002394 	.word	0x20002394

08000cc0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ccc:	bf00      	nop
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <SPI_TxBuffer+0x30>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d1f8      	bne.n	8000cce <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000cdc:	887a      	ldrh	r2, [r7, #2]
 8000cde:	2364      	movs	r3, #100	; 0x64
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <SPI_TxBuffer+0x30>)
 8000ce4:	f003 fff7 	bl	8004cd6 <HAL_SPI_Transmit>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20002394 	.word	0x20002394

08000cf4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000cfa:	23ff      	movs	r3, #255	; 0xff
 8000cfc:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000cfe:	bf00      	nop
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <SPI_RxByte+0x34>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d1f8      	bne.n	8000d00 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000d0e:	1dba      	adds	r2, r7, #6
 8000d10:	1df9      	adds	r1, r7, #7
 8000d12:	2364      	movs	r3, #100	; 0x64
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2301      	movs	r3, #1
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <SPI_RxByte+0x34>)
 8000d1a:	f004 f94a 	bl	8004fb2 <HAL_SPI_TransmitReceive>

	return data;
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20002394 	.word	0x20002394

08000d2c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000d34:	f7ff ffde 	bl	8000cf4 <SPI_RxByte>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	701a      	strb	r2, [r3, #0]
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <SD_ReadyWait+0x30>)
 8000d50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d54:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000d56:	f7ff ffcd 	bl	8000cf4 <SPI_RxByte>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2bff      	cmp	r3, #255	; 0xff
 8000d62:	d003      	beq.n	8000d6c <SD_ReadyWait+0x24>
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SD_ReadyWait+0x30>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f4      	bne.n	8000d56 <SD_ReadyWait+0xe>

	return res;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20002460 	.word	0x20002460

08000d7c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000d82:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d86:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000d88:	f7ff ff70 	bl	8000c6c <DESELECT>
	for(int i = 0; i < 10; i++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	e005      	b.n	8000d9e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000d92:	20ff      	movs	r0, #255	; 0xff
 8000d94:	f7ff ff7a 	bl	8000c8c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	2b09      	cmp	r3, #9
 8000da2:	ddf6      	ble.n	8000d92 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000da4:	f7ff ff52 	bl	8000c4c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000da8:	2340      	movs	r3, #64	; 0x40
 8000daa:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000dbc:	2395      	movs	r3, #149	; 0x95
 8000dbe:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2106      	movs	r1, #6
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff7b 	bl	8000cc0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000dca:	e002      	b.n	8000dd2 <SD_PowerOn+0x56>
	{
		cnt--;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000dd2:	f7ff ff8f 	bl	8000cf4 <SPI_RxByte>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d002      	beq.n	8000de2 <SD_PowerOn+0x66>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f4      	bne.n	8000dcc <SD_PowerOn+0x50>
	}

	DESELECT();
 8000de2:	f7ff ff43 	bl	8000c6c <DESELECT>
	SPI_TxByte(0XFF);
 8000de6:	20ff      	movs	r0, #255	; 0xff
 8000de8:	f7ff ff50 	bl	8000c8c <SPI_TxByte>

	PowerFlag = 1;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <SD_PowerOn+0x80>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200002bd 	.word	0x200002bd

08000e00 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <SD_PowerOff+0x14>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	200002bd 	.word	0x200002bd

08000e18 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <SD_CheckPower+0x14>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	200002bd 	.word	0x200002bd

08000e30 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <SD_RxDataBlock+0x58>)
 8000e3c:	22c8      	movs	r2, #200	; 0xc8
 8000e3e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000e40:	f7ff ff58 	bl	8000cf4 <SPI_RxByte>
 8000e44:	4603      	mov	r3, r0
 8000e46:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	2bff      	cmp	r3, #255	; 0xff
 8000e4c:	d103      	bne.n	8000e56 <SD_RxDataBlock+0x26>
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <SD_RxDataBlock+0x58>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f4      	bne.n	8000e40 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	2bfe      	cmp	r3, #254	; 0xfe
 8000e5a:	d001      	beq.n	8000e60 <SD_RxDataBlock+0x30>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e00f      	b.n	8000e80 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff60 	bl	8000d2c <SPI_RxBytePtr>
	} while(len--);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	1e5a      	subs	r2, r3, #1
 8000e70:	603a      	str	r2, [r7, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f4      	bne.n	8000e60 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000e76:	f7ff ff3d 	bl	8000cf4 <SPI_RxByte>
	SPI_RxByte();
 8000e7a:	f7ff ff3b 	bl	8000cf4 <SPI_RxByte>

	return TRUE;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	2000245e 	.word	0x2000245e

08000e8c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000e9c:	f7ff ff54 	bl	8000d48 <SD_ReadyWait>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2bff      	cmp	r3, #255	; 0xff
 8000ea4:	d001      	beq.n	8000eaa <SD_TxDataBlock+0x1e>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e02f      	b.n	8000f0a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff feed 	bl	8000c8c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	2bfd      	cmp	r3, #253	; 0xfd
 8000eb6:	d020      	beq.n	8000efa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff feff 	bl	8000cc0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000ec2:	f7ff ff17 	bl	8000cf4 <SPI_RxByte>
		SPI_RxByte();
 8000ec6:	f7ff ff15 	bl	8000cf4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000eca:	e00b      	b.n	8000ee4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000ecc:	f7ff ff12 	bl	8000cf4 <SPI_RxByte>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	2b05      	cmp	r3, #5
 8000edc:	d006      	beq.n	8000eec <SD_TxDataBlock+0x60>
			i++;
 8000ede:	7bbb      	ldrb	r3, [r7, #14]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	2b40      	cmp	r3, #64	; 0x40
 8000ee8:	d9f0      	bls.n	8000ecc <SD_TxDataBlock+0x40>
 8000eea:	e000      	b.n	8000eee <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000eec:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000eee:	bf00      	nop
 8000ef0:	f7ff ff00 	bl	8000cf4 <SPI_RxByte>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0fa      	beq.n	8000ef0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	f003 031f 	and.w	r3, r3, #31
 8000f00:	2b05      	cmp	r3, #5
 8000f02:	d101      	bne.n	8000f08 <SD_TxDataBlock+0x7c>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <SD_TxDataBlock+0x7e>

	return FALSE;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	6039      	str	r1, [r7, #0]
 8000f1c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000f1e:	f7ff ff13 	bl	8000d48 <SD_ReadyWait>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2bff      	cmp	r3, #255	; 0xff
 8000f26:	d001      	beq.n	8000f2c <SD_SendCmd+0x1a>
 8000f28:	23ff      	movs	r3, #255	; 0xff
 8000f2a:	e042      	b.n	8000fb2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff feac 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	0e1b      	lsrs	r3, r3, #24
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fea6 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	0c1b      	lsrs	r3, r3, #16
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fea0 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fe9a 	bl	8000c8c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fe95 	bl	8000c8c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b40      	cmp	r3, #64	; 0x40
 8000f66:	d102      	bne.n	8000f6e <SD_SendCmd+0x5c>
 8000f68:	2395      	movs	r3, #149	; 0x95
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	e007      	b.n	8000f7e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b48      	cmp	r3, #72	; 0x48
 8000f72:	d102      	bne.n	8000f7a <SD_SendCmd+0x68>
 8000f74:	2387      	movs	r3, #135	; 0x87
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e001      	b.n	8000f7e <SD_SendCmd+0x6c>
	else crc = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fe83 	bl	8000c8c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b4c      	cmp	r3, #76	; 0x4c
 8000f8a:	d101      	bne.n	8000f90 <SD_SendCmd+0x7e>
 8000f8c:	f7ff feb2 	bl	8000cf4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000f90:	230a      	movs	r3, #10
 8000f92:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000f94:	f7ff feae 	bl	8000cf4 <SPI_RxByte>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000f9c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	da05      	bge.n	8000fb0 <SD_SendCmd+0x9e>
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	73bb      	strb	r3, [r7, #14]
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f1      	bne.n	8000f94 <SD_SendCmd+0x82>

	return res;
 8000fb0:	7b7b      	ldrb	r3, [r7, #13]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SD_disk_initialize+0x14>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e0d1      	b.n	8001174 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000fd0:	4b6a      	ldr	r3, [pc, #424]	; (800117c <SD_disk_initialize+0x1c0>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <SD_disk_initialize+0x2a>
 8000fde:	4b67      	ldr	r3, [pc, #412]	; (800117c <SD_disk_initialize+0x1c0>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	e0c6      	b.n	8001174 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000fe6:	f7ff fec9 	bl	8000d7c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000fea:	f7ff fe2f 	bl	8000c4c <SELECT>

	/* check disk type */
	type = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2040      	movs	r0, #64	; 0x40
 8000ff6:	f7ff ff8c 	bl	8000f12 <SD_SendCmd>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	f040 80a1 	bne.w	8001144 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001002:	4b5f      	ldr	r3, [pc, #380]	; (8001180 <SD_disk_initialize+0x1c4>)
 8001004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001008:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800100a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800100e:	2048      	movs	r0, #72	; 0x48
 8001010:	f7ff ff7f 	bl	8000f12 <SD_SendCmd>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d155      	bne.n	80010c6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e00c      	b.n	800103a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001020:	7bfc      	ldrb	r4, [r7, #15]
 8001022:	f7ff fe67 	bl	8000cf4 <SPI_RxByte>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	f104 0310 	add.w	r3, r4, #16
 800102e:	443b      	add	r3, r7
 8001030:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	3301      	adds	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b03      	cmp	r3, #3
 800103e:	d9ef      	bls.n	8001020 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001040:	7abb      	ldrb	r3, [r7, #10]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d17e      	bne.n	8001144 <SD_disk_initialize+0x188>
 8001046:	7afb      	ldrb	r3, [r7, #11]
 8001048:	2baa      	cmp	r3, #170	; 0xaa
 800104a:	d17b      	bne.n	8001144 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800104c:	2100      	movs	r1, #0
 800104e:	2077      	movs	r0, #119	; 0x77
 8001050:	f7ff ff5f 	bl	8000f12 <SD_SendCmd>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d807      	bhi.n	800106a <SD_disk_initialize+0xae>
 800105a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800105e:	2069      	movs	r0, #105	; 0x69
 8001060:	f7ff ff57 	bl	8000f12 <SD_SendCmd>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800106a:	4b45      	ldr	r3, [pc, #276]	; (8001180 <SD_disk_initialize+0x1c4>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1ec      	bne.n	800104c <SD_disk_initialize+0x90>
 8001072:	e000      	b.n	8001076 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001074:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001076:	4b42      	ldr	r3, [pc, #264]	; (8001180 <SD_disk_initialize+0x1c4>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d062      	beq.n	8001144 <SD_disk_initialize+0x188>
 800107e:	2100      	movs	r1, #0
 8001080:	207a      	movs	r0, #122	; 0x7a
 8001082:	f7ff ff46 	bl	8000f12 <SD_SendCmd>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d15b      	bne.n	8001144 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e00c      	b.n	80010ac <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001092:	7bfc      	ldrb	r4, [r7, #15]
 8001094:	f7ff fe2e 	bl	8000cf4 <SPI_RxByte>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	f104 0310 	add.w	r3, r4, #16
 80010a0:	443b      	add	r3, r7
 80010a2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	3301      	adds	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d9ef      	bls.n	8001092 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80010b2:	7a3b      	ldrb	r3, [r7, #8]
 80010b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SD_disk_initialize+0x104>
 80010bc:	230c      	movs	r3, #12
 80010be:	e000      	b.n	80010c2 <SD_disk_initialize+0x106>
 80010c0:	2304      	movs	r3, #4
 80010c2:	73bb      	strb	r3, [r7, #14]
 80010c4:	e03e      	b.n	8001144 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80010c6:	2100      	movs	r1, #0
 80010c8:	2077      	movs	r0, #119	; 0x77
 80010ca:	f7ff ff22 	bl	8000f12 <SD_SendCmd>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d808      	bhi.n	80010e6 <SD_disk_initialize+0x12a>
 80010d4:	2100      	movs	r1, #0
 80010d6:	2069      	movs	r0, #105	; 0x69
 80010d8:	f7ff ff1b 	bl	8000f12 <SD_SendCmd>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d801      	bhi.n	80010e6 <SD_disk_initialize+0x12a>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e000      	b.n	80010e8 <SD_disk_initialize+0x12c>
 80010e6:	2301      	movs	r3, #1
 80010e8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80010ea:	7bbb      	ldrb	r3, [r7, #14]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d10e      	bne.n	800110e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80010f0:	2100      	movs	r1, #0
 80010f2:	2077      	movs	r0, #119	; 0x77
 80010f4:	f7ff ff0d 	bl	8000f12 <SD_SendCmd>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d80e      	bhi.n	800111c <SD_disk_initialize+0x160>
 80010fe:	2100      	movs	r1, #0
 8001100:	2069      	movs	r0, #105	; 0x69
 8001102:	f7ff ff06 	bl	8000f12 <SD_SendCmd>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d107      	bne.n	800111c <SD_disk_initialize+0x160>
 800110c:	e00c      	b.n	8001128 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800110e:	2100      	movs	r1, #0
 8001110:	2041      	movs	r0, #65	; 0x41
 8001112:	f7ff fefe 	bl	8000f12 <SD_SendCmd>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <SD_disk_initialize+0x1c4>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e2      	bne.n	80010ea <SD_disk_initialize+0x12e>
 8001124:	e000      	b.n	8001128 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001126:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <SD_disk_initialize+0x1c4>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d007      	beq.n	8001140 <SD_disk_initialize+0x184>
 8001130:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001134:	2050      	movs	r0, #80	; 0x50
 8001136:	f7ff feec 	bl	8000f12 <SD_SendCmd>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SD_disk_initialize+0x188>
 8001140:	2300      	movs	r3, #0
 8001142:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001144:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <SD_disk_initialize+0x1c8>)
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800114a:	f7ff fd8f 	bl	8000c6c <DESELECT>
	SPI_RxByte();
 800114e:	f7ff fdd1 	bl	8000cf4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001152:	7bbb      	ldrb	r3, [r7, #14]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d008      	beq.n	800116a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <SD_disk_initialize+0x1c0>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SD_disk_initialize+0x1c0>)
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e001      	b.n	800116e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800116a:	f7ff fe49 	bl	8000e00 <SD_PowerOff>
	}

	return Stat;
 800116e:	4b03      	ldr	r3, [pc, #12]	; (800117c <SD_disk_initialize+0x1c0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bd90      	pop	{r4, r7, pc}
 800117c:	20000000 	.word	0x20000000
 8001180:	2000245e 	.word	0x2000245e
 8001184:	200002bc 	.word	0x200002bc

08001188 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SD_disk_status+0x14>
 8001198:	2301      	movs	r3, #1
 800119a:	e002      	b.n	80011a2 <SD_disk_status+0x1a>
	return Stat;
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <SD_disk_status+0x28>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000000 	.word	0x20000000

080011b4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d102      	bne.n	80011d0 <SD_disk_read+0x1c>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <SD_disk_read+0x20>
 80011d0:	2304      	movs	r3, #4
 80011d2:	e051      	b.n	8001278 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <SD_disk_read+0xcc>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SD_disk_read+0x32>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e048      	b.n	8001278 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80011e6:	4b27      	ldr	r3, [pc, #156]	; (8001284 <SD_disk_read+0xd0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <SD_disk_read+0x44>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	025b      	lsls	r3, r3, #9
 80011f6:	607b      	str	r3, [r7, #4]

	SELECT();
 80011f8:	f7ff fd28 	bl	8000c4c <SELECT>

	if (count == 1)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d111      	bne.n	8001226 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	2051      	movs	r0, #81	; 0x51
 8001206:	f7ff fe84 	bl	8000f12 <SD_SendCmd>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d129      	bne.n	8001264 <SD_disk_read+0xb0>
 8001210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001214:	68b8      	ldr	r0, [r7, #8]
 8001216:	f7ff fe0b 	bl	8000e30 <SD_RxDataBlock>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d021      	beq.n	8001264 <SD_disk_read+0xb0>
 8001220:	2300      	movs	r3, #0
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	e01e      	b.n	8001264 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	2052      	movs	r0, #82	; 0x52
 800122a:	f7ff fe72 	bl	8000f12 <SD_SendCmd>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d117      	bne.n	8001264 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001234:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001238:	68b8      	ldr	r0, [r7, #8]
 800123a:	f7ff fdf9 	bl	8000e30 <SD_RxDataBlock>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00a      	beq.n	800125a <SD_disk_read+0xa6>
				buff += 512;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800124a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	3b01      	subs	r3, #1
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1ed      	bne.n	8001234 <SD_disk_read+0x80>
 8001258:	e000      	b.n	800125c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800125a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800125c:	2100      	movs	r1, #0
 800125e:	204c      	movs	r0, #76	; 0x4c
 8001260:	f7ff fe57 	bl	8000f12 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001264:	f7ff fd02 	bl	8000c6c <DESELECT>
	SPI_RxByte();
 8001268:	f7ff fd44 	bl	8000cf4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	bf14      	ite	ne
 8001272:	2301      	movne	r3, #1
 8001274:	2300      	moveq	r3, #0
 8001276:	b2db      	uxtb	r3, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000000 	.word	0x20000000
 8001284:	200002bc 	.word	0x200002bc

08001288 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <SD_disk_write+0x1c>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <SD_disk_write+0x20>
 80012a4:	2304      	movs	r3, #4
 80012a6:	e06b      	b.n	8001380 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012a8:	4b37      	ldr	r3, [pc, #220]	; (8001388 <SD_disk_write+0x100>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SD_disk_write+0x32>
 80012b6:	2303      	movs	r3, #3
 80012b8:	e062      	b.n	8001380 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80012ba:	4b33      	ldr	r3, [pc, #204]	; (8001388 <SD_disk_write+0x100>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SD_disk_write+0x44>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e059      	b.n	8001380 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <SD_disk_write+0x104>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <SD_disk_write+0x56>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	025b      	lsls	r3, r3, #9
 80012dc:	607b      	str	r3, [r7, #4]

	SELECT();
 80012de:	f7ff fcb5 	bl	8000c4c <SELECT>

	if (count == 1)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d110      	bne.n	800130a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	2058      	movs	r0, #88	; 0x58
 80012ec:	f7ff fe11 	bl	8000f12 <SD_SendCmd>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d13a      	bne.n	800136c <SD_disk_write+0xe4>
 80012f6:	21fe      	movs	r1, #254	; 0xfe
 80012f8:	68b8      	ldr	r0, [r7, #8]
 80012fa:	f7ff fdc7 	bl	8000e8c <SD_TxDataBlock>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d033      	beq.n	800136c <SD_disk_write+0xe4>
			count = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	e030      	b.n	800136c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <SD_disk_write+0x104>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001316:	2100      	movs	r1, #0
 8001318:	2077      	movs	r0, #119	; 0x77
 800131a:	f7ff fdfa 	bl	8000f12 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	2057      	movs	r0, #87	; 0x57
 8001322:	f7ff fdf6 	bl	8000f12 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	2059      	movs	r0, #89	; 0x59
 800132a:	f7ff fdf2 	bl	8000f12 <SD_SendCmd>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d11b      	bne.n	800136c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001334:	21fc      	movs	r1, #252	; 0xfc
 8001336:	68b8      	ldr	r0, [r7, #8]
 8001338:	f7ff fda8 	bl	8000e8c <SD_TxDataBlock>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00a      	beq.n	8001358 <SD_disk_write+0xd0>
				buff += 512;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001348:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1ee      	bne.n	8001334 <SD_disk_write+0xac>
 8001356:	e000      	b.n	800135a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001358:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800135a:	21fd      	movs	r1, #253	; 0xfd
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff fd95 	bl	8000e8c <SD_TxDataBlock>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <SD_disk_write+0xe4>
			{
				count = 1;
 8001368:	2301      	movs	r3, #1
 800136a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800136c:	f7ff fc7e 	bl	8000c6c <DESELECT>
	SPI_RxByte();
 8001370:	f7ff fcc0 	bl	8000cf4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf14      	ite	ne
 800137a:	2301      	movne	r3, #1
 800137c:	2300      	moveq	r3, #0
 800137e:	b2db      	uxtb	r3, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000000 	.word	0x20000000
 800138c:	200002bc 	.word	0x200002bc

08001390 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b08b      	sub	sp, #44	; 0x2c
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	603a      	str	r2, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	460b      	mov	r3, r1
 800139e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SD_disk_ioctl+0x1e>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e115      	b.n	80015da <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	d124      	bne.n	8001404 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d012      	beq.n	80013e8 <SD_disk_ioctl+0x58>
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	dc1a      	bgt.n	80013fc <SD_disk_ioctl+0x6c>
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <SD_disk_ioctl+0x40>
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d006      	beq.n	80013dc <SD_disk_ioctl+0x4c>
 80013ce:	e015      	b.n	80013fc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80013d0:	f7ff fd16 	bl	8000e00 <SD_PowerOff>
			res = RES_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013da:	e0fc      	b.n	80015d6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80013dc:	f7ff fcce 	bl	8000d7c <SD_PowerOn>
			res = RES_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013e6:	e0f6      	b.n	80015d6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	1c5c      	adds	r4, r3, #1
 80013ec:	f7ff fd14 	bl	8000e18 <SD_CheckPower>
 80013f0:	4603      	mov	r3, r0
 80013f2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013fa:	e0ec      	b.n	80015d6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80013fc:	2304      	movs	r3, #4
 80013fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001402:	e0e8      	b.n	80015d6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001404:	4b77      	ldr	r3, [pc, #476]	; (80015e4 <SD_disk_ioctl+0x254>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SD_disk_ioctl+0x86>
 8001412:	2303      	movs	r3, #3
 8001414:	e0e1      	b.n	80015da <SD_disk_ioctl+0x24a>

		SELECT();
 8001416:	f7ff fc19 	bl	8000c4c <SELECT>

		switch (ctrl)
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	2b0d      	cmp	r3, #13
 800141e:	f200 80cb 	bhi.w	80015b8 <SD_disk_ioctl+0x228>
 8001422:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <SD_disk_ioctl+0x98>)
 8001424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001428:	08001523 	.word	0x08001523
 800142c:	08001461 	.word	0x08001461
 8001430:	08001513 	.word	0x08001513
 8001434:	080015b9 	.word	0x080015b9
 8001438:	080015b9 	.word	0x080015b9
 800143c:	080015b9 	.word	0x080015b9
 8001440:	080015b9 	.word	0x080015b9
 8001444:	080015b9 	.word	0x080015b9
 8001448:	080015b9 	.word	0x080015b9
 800144c:	080015b9 	.word	0x080015b9
 8001450:	080015b9 	.word	0x080015b9
 8001454:	08001535 	.word	0x08001535
 8001458:	08001559 	.word	0x08001559
 800145c:	0800157d 	.word	0x0800157d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001460:	2100      	movs	r1, #0
 8001462:	2049      	movs	r0, #73	; 0x49
 8001464:	f7ff fd55 	bl	8000f12 <SD_SendCmd>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	f040 80a8 	bne.w	80015c0 <SD_disk_ioctl+0x230>
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	2110      	movs	r1, #16
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fcda 	bl	8000e30 <SD_RxDataBlock>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 809e 	beq.w	80015c0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	099b      	lsrs	r3, r3, #6
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d10e      	bne.n	80014ac <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800148e:	7d7b      	ldrb	r3, [r7, #21]
 8001490:	b29a      	uxth	r2, r3
 8001492:	7d3b      	ldrb	r3, [r7, #20]
 8001494:	b29b      	uxth	r3, r3
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	4413      	add	r3, r2
 800149c:	b29b      	uxth	r3, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80014a2:	8bfb      	ldrh	r3, [r7, #30]
 80014a4:	029a      	lsls	r2, r3, #10
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	e02e      	b.n	800150a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80014ac:	7c7b      	ldrb	r3, [r7, #17]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	7dbb      	ldrb	r3, [r7, #22]
 80014b6:	09db      	lsrs	r3, r3, #7
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	7d7b      	ldrb	r3, [r7, #21]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f003 0306 	and.w	r3, r3, #6
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	3302      	adds	r3, #2
 80014d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80014d4:	7d3b      	ldrb	r3, [r7, #20]
 80014d6:	099b      	lsrs	r3, r3, #6
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	b29a      	uxth	r2, r3
 80014dc:	7cfb      	ldrb	r3, [r7, #19]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	7cbb      	ldrb	r3, [r7, #18]
 80014ea:	029b      	lsls	r3, r3, #10
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	4413      	add	r3, r2
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80014fc:	8bfa      	ldrh	r2, [r7, #30]
 80014fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001502:	3b09      	subs	r3, #9
 8001504:	409a      	lsls	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001510:	e056      	b.n	80015c0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001518:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001520:	e055      	b.n	80015ce <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001522:	f7ff fc11 	bl	8000d48 <SD_ReadyWait>
 8001526:	4603      	mov	r3, r0
 8001528:	2bff      	cmp	r3, #255	; 0xff
 800152a:	d14b      	bne.n	80015c4 <SD_disk_ioctl+0x234>
 800152c:	2300      	movs	r3, #0
 800152e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001532:	e047      	b.n	80015c4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001534:	2100      	movs	r1, #0
 8001536:	2049      	movs	r0, #73	; 0x49
 8001538:	f7ff fceb 	bl	8000f12 <SD_SendCmd>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d142      	bne.n	80015c8 <SD_disk_ioctl+0x238>
 8001542:	2110      	movs	r1, #16
 8001544:	6a38      	ldr	r0, [r7, #32]
 8001546:	f7ff fc73 	bl	8000e30 <SD_RxDataBlock>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d03b      	beq.n	80015c8 <SD_disk_ioctl+0x238>
 8001550:	2300      	movs	r3, #0
 8001552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001556:	e037      	b.n	80015c8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001558:	2100      	movs	r1, #0
 800155a:	204a      	movs	r0, #74	; 0x4a
 800155c:	f7ff fcd9 	bl	8000f12 <SD_SendCmd>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d132      	bne.n	80015cc <SD_disk_ioctl+0x23c>
 8001566:	2110      	movs	r1, #16
 8001568:	6a38      	ldr	r0, [r7, #32]
 800156a:	f7ff fc61 	bl	8000e30 <SD_RxDataBlock>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d02b      	beq.n	80015cc <SD_disk_ioctl+0x23c>
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800157a:	e027      	b.n	80015cc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800157c:	2100      	movs	r1, #0
 800157e:	207a      	movs	r0, #122	; 0x7a
 8001580:	f7ff fcc7 	bl	8000f12 <SD_SendCmd>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d116      	bne.n	80015b8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800158a:	2300      	movs	r3, #0
 800158c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001590:	e00b      	b.n	80015aa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001592:	6a3c      	ldr	r4, [r7, #32]
 8001594:	1c63      	adds	r3, r4, #1
 8001596:	623b      	str	r3, [r7, #32]
 8001598:	f7ff fbac 	bl	8000cf4 <SPI_RxByte>
 800159c:	4603      	mov	r3, r0
 800159e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80015a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015a4:	3301      	adds	r3, #1
 80015a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d9ef      	bls.n	8001592 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80015b8:	2304      	movs	r3, #4
 80015ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015be:	e006      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015c0:	bf00      	nop
 80015c2:	e004      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015c4:	bf00      	nop
 80015c6:	e002      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015c8:	bf00      	nop
 80015ca:	e000      	b.n	80015ce <SD_disk_ioctl+0x23e>
			break;
 80015cc:	bf00      	nop
		}

		DESELECT();
 80015ce:	f7ff fb4d 	bl	8000c6c <DESELECT>
		SPI_RxByte();
 80015d2:	f7ff fb8f 	bl	8000cf4 <SPI_RxByte>
	}

	return res;
 80015d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015da:	4618      	mov	r0, r3
 80015dc:	372c      	adds	r7, #44	; 0x2c
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd90      	pop	{r4, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000000 	.word	0x20000000

080015e8 <SDCardInit>:
DWORD fre_clust;
uint32_t totalSpace, freeSpace;


bool SDCardInit()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	// Mount SD Card
	if(f_mount(&fs, "", 0) != FR_OK)
 80015ec:	2200      	movs	r2, #0
 80015ee:	490c      	ldr	r1, [pc, #48]	; (8001620 <SDCardInit+0x38>)
 80015f0:	480c      	ldr	r0, [pc, #48]	; (8001624 <SDCardInit+0x3c>)
 80015f2:	f008 f8b7 	bl	8009764 <f_mount>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <SDCardInit+0x18>
		return false;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e00d      	b.n	800161c <SDCardInit+0x34>

	HAL_Delay(10);
 8001600:	200a      	movs	r0, #10
 8001602:	f001 f885 	bl	8002710 <HAL_Delay>

	// Open file to write
	if(f_open(&fil, "data.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 8001606:	2213      	movs	r2, #19
 8001608:	4907      	ldr	r1, [pc, #28]	; (8001628 <SDCardInit+0x40>)
 800160a:	4808      	ldr	r0, [pc, #32]	; (800162c <SDCardInit+0x44>)
 800160c:	f008 f8f0 	bl	80097f0 <f_open>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SDCardInit+0x32>
		return false;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <SDCardInit+0x34>

	return true;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	bd80      	pop	{r7, pc}
 8001620:	0800ec30 	.word	0x0800ec30
 8001624:	200002c0 	.word	0x200002c0
 8001628:	0800ec34 	.word	0x0800ec34
 800162c:	200012f8 	.word	0x200012f8

08001630 <SDCardWrite>:

bool SDCardWrite(const char* msg)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	f_puts(msg, &fil);
 8001638:	4904      	ldr	r1, [pc, #16]	; (800164c <SDCardWrite+0x1c>)
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f008 fe0c 	bl	800a258 <f_puts>
	return true;
 8001640:	2301      	movs	r3, #1
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200012f8 	.word	0x200012f8

08001650 <SDCardHasLowSpace>:

bool SDCardHasLowSpace()
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	if(f_getfree("", &fre_clust, &pfs) != FR_OK)
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <SDCardHasLowSpace+0x58>)
 8001656:	4915      	ldr	r1, [pc, #84]	; (80016ac <SDCardHasLowSpace+0x5c>)
 8001658:	4815      	ldr	r0, [pc, #84]	; (80016b0 <SDCardHasLowSpace+0x60>)
 800165a:	f008 fcd1 	bl	800a000 <f_getfree>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SDCardHasLowSpace+0x18>
		return true;
 8001664:	2301      	movs	r3, #1
 8001666:	e01c      	b.n	80016a2 <SDCardHasLowSpace+0x52>

	freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <SDCardHasLowSpace+0x58>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	895b      	ldrh	r3, [r3, #10]
 800166e:	461a      	mov	r2, r3
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <SDCardHasLowSpace+0x5c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	fb02 f303 	mul.w	r3, r2, r3
 8001678:	ee07 3a90 	vmov	s15, r3
 800167c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001680:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001684:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001688:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800168c:	ee17 2a90 	vmov	r2, s15
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <SDCardHasLowSpace+0x64>)
 8001692:	601a      	str	r2, [r3, #0]
	// totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);

	if(freeSpace < 1) // < 1kb
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <SDCardHasLowSpace+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <SDCardHasLowSpace+0x50>
		return true;
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <SDCardHasLowSpace+0x52>
	else
		return false;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20002328 	.word	0x20002328
 80016ac:	2000232c 	.word	0x2000232c
 80016b0:	0800ec30 	.word	0x0800ec30
 80016b4:	20002330 	.word	0x20002330

080016b8 <SDCardEnd>:

bool SDCardEnd()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	// Close file
	if(f_close(&fil) != FR_OK)
 80016bc:	480b      	ldr	r0, [pc, #44]	; (80016ec <SDCardEnd+0x34>)
 80016be:	f008 fc75 	bl	8009fac <f_close>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SDCardEnd+0x14>
		return false;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e00d      	b.n	80016e8 <SDCardEnd+0x30>

	HAL_Delay(10);
 80016cc:	200a      	movs	r0, #10
 80016ce:	f001 f81f 	bl	8002710 <HAL_Delay>

	// Unmount SDCARD
	if(f_mount(NULL, "", 1) != FR_OK)
 80016d2:	2201      	movs	r2, #1
 80016d4:	4906      	ldr	r1, [pc, #24]	; (80016f0 <SDCardEnd+0x38>)
 80016d6:	2000      	movs	r0, #0
 80016d8:	f008 f844 	bl	8009764 <f_mount>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SDCardEnd+0x2e>
		return false;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e000      	b.n	80016e8 <SDCardEnd+0x30>

	return true;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200012f8 	.word	0x200012f8
 80016f0:	0800ec30 	.word	0x0800ec30

080016f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08c      	sub	sp, #48	; 0x30
 80016f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800170a:	4b68      	ldr	r3, [pc, #416]	; (80018ac <MX_GPIO_Init+0x1b8>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a67      	ldr	r2, [pc, #412]	; (80018ac <MX_GPIO_Init+0x1b8>)
 8001710:	f043 0310 	orr.w	r3, r3, #16
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <MX_GPIO_Init+0x1b8>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	4b62      	ldr	r3, [pc, #392]	; (80018ac <MX_GPIO_Init+0x1b8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a61      	ldr	r2, [pc, #388]	; (80018ac <MX_GPIO_Init+0x1b8>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b5f      	ldr	r3, [pc, #380]	; (80018ac <MX_GPIO_Init+0x1b8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800173a:	4b5c      	ldr	r3, [pc, #368]	; (80018ac <MX_GPIO_Init+0x1b8>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a5b      	ldr	r2, [pc, #364]	; (80018ac <MX_GPIO_Init+0x1b8>)
 8001740:	f043 0320 	orr.w	r3, r3, #32
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b59      	ldr	r3, [pc, #356]	; (80018ac <MX_GPIO_Init+0x1b8>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0320 	and.w	r3, r3, #32
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001752:	4b56      	ldr	r3, [pc, #344]	; (80018ac <MX_GPIO_Init+0x1b8>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a55      	ldr	r2, [pc, #340]	; (80018ac <MX_GPIO_Init+0x1b8>)
 8001758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b53      	ldr	r3, [pc, #332]	; (80018ac <MX_GPIO_Init+0x1b8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	4b50      	ldr	r3, [pc, #320]	; (80018ac <MX_GPIO_Init+0x1b8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a4f      	ldr	r2, [pc, #316]	; (80018ac <MX_GPIO_Init+0x1b8>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <MX_GPIO_Init+0x1b8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	4b4a      	ldr	r3, [pc, #296]	; (80018ac <MX_GPIO_Init+0x1b8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a49      	ldr	r2, [pc, #292]	; (80018ac <MX_GPIO_Init+0x1b8>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <MX_GPIO_Init+0x1b8>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800179a:	4b44      	ldr	r3, [pc, #272]	; (80018ac <MX_GPIO_Init+0x1b8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a43      	ldr	r2, [pc, #268]	; (80018ac <MX_GPIO_Init+0x1b8>)
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <MX_GPIO_Init+0x1b8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2110      	movs	r1, #16
 80017b6:	483e      	ldr	r0, [pc, #248]	; (80018b0 <MX_GPIO_Init+0x1bc>)
 80017b8:	f002 f89c 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	2110      	movs	r1, #16
 80017c0:	483c      	ldr	r0, [pc, #240]	; (80018b4 <MX_GPIO_Init+0x1c0>)
 80017c2:	f002 f897 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2104      	movs	r1, #4
 80017ca:	483b      	ldr	r0, [pc, #236]	; (80018b8 <MX_GPIO_Init+0x1c4>)
 80017cc:	f002 f892 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|LD3_Pin|GPIO_PIN_6
 80017d0:	2200      	movs	r2, #0
 80017d2:	f244 01c3 	movw	r1, #16579	; 0x40c3
 80017d6:	4839      	ldr	r0, [pc, #228]	; (80018bc <MX_GPIO_Init+0x1c8>)
 80017d8:	f002 f88c 	bl	80038f4 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e2:	4837      	ldr	r0, [pc, #220]	; (80018c0 <MX_GPIO_Init+0x1cc>)
 80017e4:	f002 f886 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80017e8:	2310      	movs	r3, #16
 80017ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	482c      	ldr	r0, [pc, #176]	; (80018b0 <MX_GPIO_Init+0x1bc>)
 8001800:	f001 fecc 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800180a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800180e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	4827      	ldr	r0, [pc, #156]	; (80018b8 <MX_GPIO_Init+0x1c4>)
 800181c:	f001 febe 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001820:	2310      	movs	r3, #16
 8001822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4619      	mov	r1, r3
 8001836:	481f      	ldr	r0, [pc, #124]	; (80018b4 <MX_GPIO_Init+0x1c0>)
 8001838:	f001 feb0 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800183c:	2304      	movs	r3, #4
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4619      	mov	r1, r3
 8001852:	4819      	ldr	r0, [pc, #100]	; (80018b8 <MX_GPIO_Init+0x1c4>)
 8001854:	f001 fea2 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB1 PBPin PB6
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_1|LD3_Pin|GPIO_PIN_6
 8001858:	f244 03c3 	movw	r3, #16579	; 0x40c3
 800185c:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	4812      	ldr	r0, [pc, #72]	; (80018bc <MX_GPIO_Init+0x1c8>)
 8001872:	f001 fe93 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001876:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800187a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	4619      	mov	r1, r3
 800188e:	480c      	ldr	r0, [pc, #48]	; (80018c0 <MX_GPIO_Init+0x1cc>)
 8001890:	f001 fe84 	bl	800359c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	2028      	movs	r0, #40	; 0x28
 800189a:	f001 facc 	bl	8002e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800189e:	2028      	movs	r0, #40	; 0x28
 80018a0:	f001 fae5 	bl	8002e6e <HAL_NVIC_EnableIRQ>

}
 80018a4:	bf00      	nop
 80018a6:	3730      	adds	r7, #48	; 0x30
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40021400 	.word	0x40021400
 80018b8:	40020800 	.word	0x40020800
 80018bc:	40020400 	.word	0x40020400
 80018c0:	40020c00 	.word	0x40020c00

080018c4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */
float volts = 0;
int butPressed = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018d4:	d102      	bne.n	80018dc <HAL_GPIO_EXTI_Callback+0x18>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		send_UART("{to:'Log',from:'Mst',reci:'headerValsCsv',dir:'g',rc:''}\r");
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		*/

		butPressed = 1;
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x24>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]
	}
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	20002334 	.word	0x20002334

080018ec <isButPressed>:

int isButPressed()
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
	return butPressed;
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <isButPressed+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20002334 	.word	0x20002334

08001904 <butClear>:

void butClear()
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
	butPressed = 0;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <butClear+0x14>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	20002334 	.word	0x20002334

0800191c <Build_MSG>:
float dT;//Temperature gradient provided by STM
int time; // to save the time -

bool flagSDEnd = false; //diz se o SD card End ja foi realizado

void Build_MSG(){
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af0a      	add	r7, sp, #40	; 0x28
	//builds the Message that will be sent from the STM(Master) to the Arduino(Slave)
	sprintf(MSG, "{t:%d;dT:%.2f;T:%.2f;B1:%.1f;B2:%.1f;B3:%.1f}",time,dT, T_PT100, B1, B2, B3);
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <Build_MSG+0x60>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a16      	ldr	r2, [pc, #88]	; (8001980 <Build_MSG+0x64>)
 8001928:	edd2 7a00 	vldr	s15, [r2]
 800192c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001930:	4a14      	ldr	r2, [pc, #80]	; (8001984 <Build_MSG+0x68>)
 8001932:	edd2 6a00 	vldr	s13, [r2]
 8001936:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800193a:	4a13      	ldr	r2, [pc, #76]	; (8001988 <Build_MSG+0x6c>)
 800193c:	edd2 5a00 	vldr	s11, [r2]
 8001940:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001944:	4a11      	ldr	r2, [pc, #68]	; (800198c <Build_MSG+0x70>)
 8001946:	edd2 4a00 	vldr	s9, [r2]
 800194a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <Build_MSG+0x74>)
 8001950:	edd2 3a00 	vldr	s7, [r2]
 8001954:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8001958:	ed8d 3b08 	vstr	d3, [sp, #32]
 800195c:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001960:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001964:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001968:	ed8d 7b00 	vstr	d7, [sp]
 800196c:	461a      	mov	r2, r3
 800196e:	4909      	ldr	r1, [pc, #36]	; (8001994 <Build_MSG+0x78>)
 8001970:	4809      	ldr	r0, [pc, #36]	; (8001998 <Build_MSG+0x7c>)
 8001972:	f009 fc37 	bl	800b1e4 <siprintf>
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	2000238c 	.word	0x2000238c
 8001980:	20002388 	.word	0x20002388
 8001984:	20002384 	.word	0x20002384
 8001988:	20002378 	.word	0x20002378
 800198c:	2000237c 	.word	0x2000237c
 8001990:	20002380 	.word	0x20002380
 8001994:	0800ec40 	.word	0x0800ec40
 8001998:	20002344 	.word	0x20002344
 800199c:	00000000 	.word	0x00000000

080019a0 <convert_adc_to_physicalvalue>:


void convert_adc_to_physicalvalue(){
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0

	time += 2; //add 2s to time since 2s passed from the last measure
 80019a6:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <convert_adc_to_physicalvalue+0x168>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	3302      	adds	r3, #2
 80019ac:	4a56      	ldr	r2, [pc, #344]	; (8001b08 <convert_adc_to_physicalvalue+0x168>)
 80019ae:	6013      	str	r3, [r2, #0]

	float aux0, aux1, aux2, aux3, aux4;

	//Pass ADC result from bits to tension
	aux0 = ADC_results[0]*3.3/4096; //ADC result in Volts
 80019b0:	4b56      	ldr	r3, [pc, #344]	; (8001b0c <convert_adc_to_physicalvalue+0x16c>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019bc:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001ae8 <convert_adc_to_physicalvalue+0x148>
 80019c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80019c4:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8001af0 <convert_adc_to_physicalvalue+0x150>
 80019c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019d0:	edc7 7a05 	vstr	s15, [r7, #20]
	aux1 = ADC_results[1]*3.3/4096;
 80019d4:	4b4d      	ldr	r3, [pc, #308]	; (8001b0c <convert_adc_to_physicalvalue+0x16c>)
 80019d6:	885b      	ldrh	r3, [r3, #2]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019e0:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001ae8 <convert_adc_to_physicalvalue+0x148>
 80019e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80019e8:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8001af0 <convert_adc_to_physicalvalue+0x150>
 80019ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019f4:	edc7 7a04 	vstr	s15, [r7, #16]
	aux2 = ADC_results[2]*3.3/4096;
 80019f8:	4b44      	ldr	r3, [pc, #272]	; (8001b0c <convert_adc_to_physicalvalue+0x16c>)
 80019fa:	889b      	ldrh	r3, [r3, #4]
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a04:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8001ae8 <convert_adc_to_physicalvalue+0x148>
 8001a08:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a0c:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8001af0 <convert_adc_to_physicalvalue+0x150>
 8001a10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a18:	edc7 7a03 	vstr	s15, [r7, #12]
	aux3 = ADC_results[3]*3.3/4096;
 8001a1c:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <convert_adc_to_physicalvalue+0x16c>)
 8001a1e:	88db      	ldrh	r3, [r3, #6]
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a28:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8001ae8 <convert_adc_to_physicalvalue+0x148>
 8001a2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a30:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8001af0 <convert_adc_to_physicalvalue+0x150>
 8001a34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a3c:	edc7 7a02 	vstr	s15, [r7, #8]
	aux4 = ADC_results[4]*3.3/4096;
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <convert_adc_to_physicalvalue+0x16c>)
 8001a42:	891b      	ldrh	r3, [r3, #8]
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a4c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8001ae8 <convert_adc_to_physicalvalue+0x148>
 8001a50:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a54:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8001af0 <convert_adc_to_physicalvalue+0x150>
 8001a58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a5c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a60:	edc7 7a01 	vstr	s15, [r7, #4]
	//Correction factor for V_LC: 3
	//Correction factor for V_AA: 2
	//Correction factor for V_9V: 3

	//Convert ADC result to temperature and voltages
	dT = 34.469*aux0 - 67.653; //STM temperature variation
 8001a64:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a6c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001af8 <convert_adc_to_physicalvalue+0x158>
 8001a70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a74:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001b00 <convert_adc_to_physicalvalue+0x160>
 8001a78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a80:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <convert_adc_to_physicalvalue+0x170>)
 8001a82:	edc3 7a00 	vstr	s15, [r3]
	T_PT100 = 34.469*aux1 - 67.653; //PT100 temperature
 8001a86:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a8e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001af8 <convert_adc_to_physicalvalue+0x158>
 8001a92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a96:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001b00 <convert_adc_to_physicalvalue+0x160>
 8001a9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <convert_adc_to_physicalvalue+0x174>)
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
	B1 = aux2 * 3 ; //V_LC
 8001aa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aac:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab4:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <convert_adc_to_physicalvalue+0x178>)
 8001ab6:	edc3 7a00 	vstr	s15, [r3]
	B2 = aux3 * 2; //V_AA
 8001aba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001abe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <convert_adc_to_physicalvalue+0x17c>)
 8001ac4:	edc3 7a00 	vstr	s15, [r3]
	B3 = aux4 * 3; //V_9V
 8001ac8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001acc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <convert_adc_to_physicalvalue+0x180>)
 8001ad6:	edc3 7a00 	vstr	s15, [r3]

}
 8001ada:	bf00      	nop
 8001adc:	371c      	adds	r7, #28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	66666666 	.word	0x66666666
 8001aec:	400a6666 	.word	0x400a6666
 8001af0:	00000000 	.word	0x00000000
 8001af4:	40b00000 	.word	0x40b00000
 8001af8:	3126e979 	.word	0x3126e979
 8001afc:	40413c08 	.word	0x40413c08
 8001b00:	c083126f 	.word	0xc083126f
 8001b04:	4050e9ca 	.word	0x4050e9ca
 8001b08:	2000238c 	.word	0x2000238c
 8001b0c:	20002338 	.word	0x20002338
 8001b10:	20002388 	.word	0x20002388
 8001b14:	20002384 	.word	0x20002384
 8001b18:	20002378 	.word	0x20002378
 8001b1c:	2000237c 	.word	0x2000237c
 8001b20:	20002380 	.word	0x20002380

08001b24 <Send_MSG>:


void Send_MSG(){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
	//Send Message from STM(Master) to Arduino(Slave) using SPI4

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET); // CS Low => initiate communication between Master and Slave
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2110      	movs	r1, #16
 8001b2e:	4813      	ldr	r0, [pc, #76]	; (8001b7c <Send_MSG+0x58>)
 8001b30:	f001 fee0 	bl	80038f4 <HAL_GPIO_WritePin>
	int i = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	607b      	str	r3, [r7, #4]

	for(i=0;i<strlen(MSG);i++){
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	e00d      	b.n	8001b5a <Send_MSG+0x36>
		char dataSend = MSG[i];
 8001b3e:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <Send_MSG+0x5c>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	70fb      	strb	r3, [r7, #3]
		HAL_SPI_Transmit(&hspi4, (uint8_t*)&dataSend, 1,100); //send byte by byte
 8001b48:	1cf9      	adds	r1, r7, #3
 8001b4a:	2364      	movs	r3, #100	; 0x64
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	480d      	ldr	r0, [pc, #52]	; (8001b84 <Send_MSG+0x60>)
 8001b50:	f003 f8c1 	bl	8004cd6 <HAL_SPI_Transmit>
	for(i=0;i<strlen(MSG);i++){
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3301      	adds	r3, #1
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	4809      	ldr	r0, [pc, #36]	; (8001b80 <Send_MSG+0x5c>)
 8001b5c:	f7fe fb70 	bl	8000240 <strlen>
 8001b60:	4602      	mov	r2, r0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d8ea      	bhi.n	8001b3e <Send_MSG+0x1a>
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); // CS High => End communication
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	4803      	ldr	r0, [pc, #12]	; (8001b7c <Send_MSG+0x58>)
 8001b6e:	f001 fec1 	bl	80038f4 <HAL_GPIO_WritePin>

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	20002344 	.word	0x20002344
 8001b84:	200023f8 	.word	0x200023f8

08001b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Acionado para alimentarmos a STM
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2102      	movs	r1, #2
 8001b90:	4855      	ldr	r0, [pc, #340]	; (8001ce8 <main+0x160>)
 8001b92:	f001 feaf 	bl	80038f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//O Led vermelho (led dos erros) desligado
 8001b96:	2200      	movs	r2, #0
 8001b98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b9c:	4852      	ldr	r0, [pc, #328]	; (8001ce8 <main+0x160>)
 8001b9e:	f001 fea9 	bl	80038f4 <HAL_GPIO_WritePin>

  while(!isButPressed()); //wait to press STM bottom to feed LoRa and Datalogger
 8001ba2:	bf00      	nop
 8001ba4:	f7ff fea2 	bl	80018ec <isButPressed>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0fa      	beq.n	8001ba4 <main+0x1c>
  butClear();
 8001bae:	f7ff fea9 	bl	8001904 <butClear>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);//Feed Lora
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	484d      	ldr	r0, [pc, #308]	; (8001cec <main+0x164>)
 8001bb8:	f001 fe9c 	bl	80038f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET); //Feed Datalogger
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2110      	movs	r1, #16
 8001bc0:	484b      	ldr	r0, [pc, #300]	; (8001cf0 <main+0x168>)
 8001bc2:	f001 fe97 	bl	80038f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //Alimentacao de BackUp off
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2140      	movs	r1, #64	; 0x40
 8001bca:	4847      	ldr	r0, [pc, #284]	; (8001ce8 <main+0x160>)
 8001bcc:	f001 fe92 	bl	80038f4 <HAL_GPIO_WritePin>


  if(!SDCardInit()){
 8001bd0:	f7ff fd0a 	bl	80015e8 <SDCardInit>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f083 0301 	eor.w	r3, r3, #1
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <main+0x64>
	  //Error - Turn on Error Led
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001be0:	2201      	movs	r2, #1
 8001be2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001be6:	4840      	ldr	r0, [pc, #256]	; (8001ce8 <main+0x160>)
 8001be8:	f001 fe84 	bl	80038f4 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); //CS of SPI4 High => No communication between STM and Arduino
 8001bec:	2201      	movs	r2, #1
 8001bee:	2110      	movs	r1, #16
 8001bf0:	4840      	ldr	r0, [pc, #256]	; (8001cf4 <main+0x16c>)
 8001bf2:	f001 fe7f 	bl	80038f4 <HAL_GPIO_WritePin>
  time = 0; //start time counting
 8001bf6:	4b40      	ldr	r3, [pc, #256]	; (8001cf8 <main+0x170>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bfc:	f000 fd2b 	bl	8002656 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c00:	f000 f886 	bl	8001d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c04:	f7ff fd76 	bl	80016f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c08:	f7ff f802 	bl	8000c10 <MX_DMA_Init>
  MX_FATFS_Init();
 8001c0c:	f005 fb60 	bl	80072d0 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8001c10:	f000 fc0e 	bl	8002430 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001c14:	f7fe fee2 	bl	80009dc <MX_ADC1_Init>
  MX_TIM1_Init();
 8001c18:	f000 fb5e 	bl	80022d8 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001c1c:	f000 f8e6 	bl	8001dec <MX_SPI1_Init>
  MX_SPI4_Init();
 8001c20:	f000 f922 	bl	8001e68 <MX_SPI4_Init>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_results, 5);
	// implementar sliding window average

	*/

  HAL_TIM_Base_Start_IT(&htim1); //start timer
 8001c24:	4835      	ldr	r0, [pc, #212]	; (8001cfc <main+0x174>)
 8001c26:	f003 fdb7 	bl	8005798 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

	while (1)
	{

		if(ReturnFlagTimer()){
 8001c2a:	f000 fbcf 	bl	80023cc <ReturnFlagTimer>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d035      	beq.n	8001ca0 <main+0x118>
			//2s Passed

			convert_adc_to_physicalvalue(); // Convert adc values to Temperature and Voltages
 8001c34:	f7ff feb4 	bl	80019a0 <convert_adc_to_physicalvalue>
			//print_adc();
			Build_MSG(); //build Message before sending
 8001c38:	f7ff fe70 	bl	800191c <Build_MSG>

			if(!flagSDEnd){
 8001c3c:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <main+0x178>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	f083 0301 	eor.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d026      	beq.n	8001c98 <main+0x110>
				//Ainda nao foi realizado o End do cartao
				if(SDCardHasLowSpace()){
 8001c4a:	f7ff fd01 	bl	8001650 <SDCardHasLowSpace>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d012      	beq.n	8001c7a <main+0xf2>
					//Low space at the SD card => End SD card
					if(!SDCardEnd()){
 8001c54:	f7ff fd30 	bl	80016b8 <SDCardEnd>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f083 0301 	eor.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <main+0xea>
						//Nao conseguiu realizar o End com sucesso
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Acidionar led de erro
 8001c64:	2201      	movs	r2, #1
 8001c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c6a:	481f      	ldr	r0, [pc, #124]	; (8001ce8 <main+0x160>)
 8001c6c:	f001 fe42 	bl	80038f4 <HAL_GPIO_WritePin>
 8001c70:	e012      	b.n	8001c98 <main+0x110>
					}
					else{
						//Realizou-se o End do cartao
						flagSDEnd = true;
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <main+0x178>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e00e      	b.n	8001c98 <main+0x110>
					}
				}
				else{
					//O cartao tem espaco ainda
					if(!SDCardWrite(MSG)){
 8001c7a:	4822      	ldr	r0, [pc, #136]	; (8001d04 <main+0x17c>)
 8001c7c:	f7ff fcd8 	bl	8001630 <SDCardWrite>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f083 0301 	eor.w	r3, r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <main+0x110>
						//Nao conseguiu escrever
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Acidionar led de erro
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c92:	4815      	ldr	r0, [pc, #84]	; (8001ce8 <main+0x160>)
 8001c94:	f001 fe2e 	bl	80038f4 <HAL_GPIO_WritePin>
					}
				}
			}


			Send_MSG(); //Send Message to Slave(Arduino)
 8001c98:	f7ff ff44 	bl	8001b24 <Send_MSG>

			ClearFlagTimer(); //set flag = false
 8001c9c:	f000 fba2 	bl	80023e4 <ClearFlagTimer>
		}


		//Ver se e necessario trocar a fonte de alimentacao do datalogger
		if(B3<=MINIMUM_VOLTAGE_DATALOGGER){
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <main+0x180>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	eeb1 7a0e 	vmov.f32	s14, #30	; 0x40f00000  7.5
 8001caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb2:	d809      	bhi.n	8001cc8 <main+0x140>
			//A alimentacao do datalogger deve ser trocada para a backup
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Ativar a Alimentacao de backup
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2140      	movs	r1, #64	; 0x40
 8001cb8:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <main+0x160>)
 8001cba:	f001 fe1b 	bl	80038f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET); //Desligar a alimentacao inicial do datalogger
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2110      	movs	r1, #16
 8001cc2:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <main+0x168>)
 8001cc4:	f001 fe16 	bl	80038f4 <HAL_GPIO_WritePin>
		}


		//Ver se e necessario desligar a LoRa
		if(B1 <= MINIMUM_VOLTAGE_SYSTEM){
 8001cc8:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <main+0x184>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	eeb1 7a0e 	vmov.f32	s14, #30	; 0x40f00000  7.5
 8001cd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cda:	d804      	bhi.n	8001ce6 <main+0x15e>
			//A fonte de alimentacao de backup e menor ou igual a 7.5, por isso vamos desligar o Lora para poupar energia
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); //Desligar a alimentacao ao Lora
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2104      	movs	r1, #4
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <main+0x164>)
 8001ce2:	f001 fe07 	bl	80038f4 <HAL_GPIO_WritePin>
		if(ReturnFlagTimer()){
 8001ce6:	e7a0      	b.n	8001c2a <main+0xa2>
 8001ce8:	40020400 	.word	0x40020400
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	40021400 	.word	0x40021400
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	2000238c 	.word	0x2000238c
 8001cfc:	20002468 	.word	0x20002468
 8001d00:	20002390 	.word	0x20002390
 8001d04:	20002344 	.word	0x20002344
 8001d08:	20002380 	.word	0x20002380
 8001d0c:	20002378 	.word	0x20002378

08001d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b094      	sub	sp, #80	; 0x50
 8001d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	2234      	movs	r2, #52	; 0x34
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f008 fc0a 	bl	800a538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d24:	f107 0308 	add.w	r3, r7, #8
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d34:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <SystemClock_Config+0xc8>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	4a27      	ldr	r2, [pc, #156]	; (8001dd8 <SystemClock_Config+0xc8>)
 8001d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <SystemClock_Config+0xc8>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d4c:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <SystemClock_Config+0xcc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d54:	4a21      	ldr	r2, [pc, #132]	; (8001ddc <SystemClock_Config+0xcc>)
 8001d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <SystemClock_Config+0xcc>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d70:	2310      	movs	r3, #16
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d74:	2302      	movs	r3, #2
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001d80:	2360      	movs	r3, #96	; 0x60
 8001d82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001d84:	2306      	movs	r3, #6
 8001d86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d88:	2307      	movs	r3, #7
 8001d8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	4618      	mov	r0, r3
 8001d96:	f001 fdf9 	bl	800398c <HAL_RCC_OscConfig>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001da0:	f000 f81e 	bl	8001de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001da4:	230f      	movs	r3, #15
 8001da6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001da8:	2302      	movs	r3, #2
 8001daa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001db8:	f107 0308 	add.w	r3, r7, #8
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 f892 	bl	8003ee8 <HAL_RCC_ClockConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001dca:	f000 f809 	bl	8001de0 <Error_Handler>
  }
}
 8001dce:	bf00      	nop
 8001dd0:	3750      	adds	r7, #80	; 0x50
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40007000 	.word	0x40007000

08001de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de4:	b672      	cpsid	i
}
 8001de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <Error_Handler+0x8>
	...

08001dec <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <MX_SPI1_Init+0x74>)
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <MX_SPI1_Init+0x78>)
 8001df4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <MX_SPI1_Init+0x74>)
 8001df8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <MX_SPI1_Init+0x74>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <MX_SPI1_Init+0x74>)
 8001e06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <MX_SPI1_Init+0x74>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e12:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <MX_SPI1_Init+0x74>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <MX_SPI1_Init+0x74>)
 8001e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <MX_SPI1_Init+0x74>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <MX_SPI1_Init+0x74>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <MX_SPI1_Init+0x74>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <MX_SPI1_Init+0x74>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <MX_SPI1_Init+0x74>)
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <MX_SPI1_Init+0x74>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <MX_SPI1_Init+0x74>)
 8001e46:	2208      	movs	r2, #8
 8001e48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_SPI1_Init+0x74>)
 8001e4c:	f002 fe98 	bl	8004b80 <HAL_SPI_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e56:	f7ff ffc3 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20002394 	.word	0x20002394
 8001e64:	40013000 	.word	0x40013000

08001e68 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <MX_SPI4_Init+0x74>)
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <MX_SPI4_Init+0x78>)
 8001e70:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <MX_SPI4_Init+0x74>)
 8001e74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e78:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <MX_SPI4_Init+0x74>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e80:	4b16      	ldr	r3, [pc, #88]	; (8001edc <MX_SPI4_Init+0x74>)
 8001e82:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e86:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e88:	4b14      	ldr	r3, [pc, #80]	; (8001edc <MX_SPI4_Init+0x74>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <MX_SPI4_Init+0x74>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <MX_SPI4_Init+0x74>)
 8001e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <MX_SPI4_Init+0x74>)
 8001e9e:	2208      	movs	r2, #8
 8001ea0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <MX_SPI4_Init+0x74>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <MX_SPI4_Init+0x74>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <MX_SPI4_Init+0x74>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <MX_SPI4_Init+0x74>)
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <MX_SPI4_Init+0x74>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <MX_SPI4_Init+0x74>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001ec6:	4805      	ldr	r0, [pc, #20]	; (8001edc <MX_SPI4_Init+0x74>)
 8001ec8:	f002 fe5a 	bl	8004b80 <HAL_SPI_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001ed2:	f7ff ff85 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200023f8 	.word	0x200023f8
 8001ee0:	40013400 	.word	0x40013400

08001ee4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	; 0x30
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a2e      	ldr	r2, [pc, #184]	; (8001fbc <HAL_SPI_MspInit+0xd8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d128      	bne.n	8001f58 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f06:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <HAL_SPI_MspInit+0xdc>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a2d      	ldr	r2, [pc, #180]	; (8001fc0 <HAL_SPI_MspInit+0xdc>)
 8001f0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_SPI_MspInit+0xdc>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <HAL_SPI_MspInit+0xdc>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a27      	ldr	r2, [pc, #156]	; (8001fc0 <HAL_SPI_MspInit+0xdc>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <HAL_SPI_MspInit+0xdc>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f36:	23e0      	movs	r3, #224	; 0xe0
 8001f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f46:	2305      	movs	r3, #5
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	4619      	mov	r1, r3
 8001f50:	481c      	ldr	r0, [pc, #112]	; (8001fc4 <HAL_SPI_MspInit+0xe0>)
 8001f52:	f001 fb23 	bl	800359c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001f56:	e02c      	b.n	8001fb2 <HAL_SPI_MspInit+0xce>
  else if(spiHandle->Instance==SPI4)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <HAL_SPI_MspInit+0xe4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d127      	bne.n	8001fb2 <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_SPI_MspInit+0xdc>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	4a16      	ldr	r2, [pc, #88]	; (8001fc0 <HAL_SPI_MspInit+0xdc>)
 8001f68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_SPI_MspInit+0xdc>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_SPI_MspInit+0xdc>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <HAL_SPI_MspInit+0xdc>)
 8001f80:	f043 0310 	orr.w	r3, r3, #16
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <HAL_SPI_MspInit+0xdc>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001f92:	2364      	movs	r3, #100	; 0x64
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	4619      	mov	r1, r3
 8001fac:	4807      	ldr	r0, [pc, #28]	; (8001fcc <HAL_SPI_MspInit+0xe8>)
 8001fae:	f001 faf5 	bl	800359c <HAL_GPIO_Init>
}
 8001fb2:	bf00      	nop
 8001fb4:	3730      	adds	r7, #48	; 0x30
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40013000 	.word	0x40013000
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020000 	.word	0x40020000
 8001fc8:	40013400 	.word	0x40013400
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_MspInit+0x44>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <HAL_MspInit+0x44>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_MspInit+0x44>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_MspInit+0x44>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	4a08      	ldr	r2, [pc, #32]	; (8002014 <HAL_MspInit+0x44>)
 8001ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_MspInit+0x44>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800

08002018 <SDTimer_Handler>:

volatile uint8_t FatFSCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <SDTimer_Handler+0x40>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d006      	beq.n	8002034 <SDTimer_Handler+0x1c>
		Timer1--;
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <SDTimer_Handler+0x40>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <SDTimer_Handler+0x40>)
 8002032:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <SDTimer_Handler+0x44>)
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d006      	beq.n	800204c <SDTimer_Handler+0x34>
		Timer2--;
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <SDTimer_Handler+0x44>)
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <SDTimer_Handler+0x44>)
 800204a:	801a      	strh	r2, [r3, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000245e 	.word	0x2000245e
 800205c:	20002460 	.word	0x20002460

08002060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <NMI_Handler+0x4>

08002066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <HardFault_Handler+0x4>

0800206c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <MemManage_Handler+0x4>

08002072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002076:	e7fe      	b.n	8002076 <BusFault_Handler+0x4>

08002078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800207c:	e7fe      	b.n	800207c <UsageFault_Handler+0x4>

0800207e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFSCnt++;
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <SysTick_Handler+0x30>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <SysTick_Handler+0x30>)
 80020b8:	701a      	strb	r2, [r3, #0]
	if(FatFSCnt >= 10)
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <SysTick_Handler+0x30>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	d904      	bls.n	80020ce <SysTick_Handler+0x26>
	{
		FatFSCnt = 0;
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SysTick_Handler+0x30>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80020ca:	f7ff ffa5 	bl	8002018 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ce:	f000 faff 	bl	80026d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	2000245c 	.word	0x2000245c

080020dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020e2:	f003 fbd1 	bl	8005888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20002468 	.word	0x20002468

080020f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <USART3_IRQHandler+0x10>)
 80020f6:	f004 f86b 	bl	80061d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200026c4 	.word	0x200026c4

08002104 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002108:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800210c:	f001 fc26 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}

08002114 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <DMA2_Stream0_IRQHandler+0x10>)
 800211a:	f001 f803 	bl	8003124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	2000025c 	.word	0x2000025c

08002128 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return 1;
 800212c:	2301      	movs	r3, #1
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_kill>:

int _kill(int pid, int sig)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002142:	f008 f9cf 	bl	800a4e4 <__errno>
 8002146:	4603      	mov	r3, r0
 8002148:	2216      	movs	r2, #22
 800214a:	601a      	str	r2, [r3, #0]
  return -1;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_exit>:

void _exit (int status)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ffe7 	bl	8002138 <_kill>
  while (1) {}    /* Make sure we hang here */
 800216a:	e7fe      	b.n	800216a <_exit+0x12>

0800216c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	e00a      	b.n	8002194 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800217e:	f3af 8000 	nop.w
 8002182:	4601      	mov	r1, r0
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	60ba      	str	r2, [r7, #8]
 800218a:	b2ca      	uxtb	r2, r1
 800218c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	dbf0      	blt.n	800217e <_read+0x12>
  }

  return len;
 800219c:	687b      	ldr	r3, [r7, #4]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e009      	b.n	80021cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	60ba      	str	r2, [r7, #8]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dbf1      	blt.n	80021b8 <_write+0x12>
  }
  return len;
 80021d4:	687b      	ldr	r3, [r7, #4]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_close>:

int _close(int file)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002206:	605a      	str	r2, [r3, #4]
  return 0;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <_isatty>:

int _isatty(int file)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002250:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <_sbrk+0x5c>)
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <_sbrk+0x60>)
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <_sbrk+0x64>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <_sbrk+0x64>)
 8002266:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <_sbrk+0x68>)
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <_sbrk+0x64>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	429a      	cmp	r2, r3
 8002276:	d207      	bcs.n	8002288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002278:	f008 f934 	bl	800a4e4 <__errno>
 800227c:	4603      	mov	r3, r0
 800227e:	220c      	movs	r2, #12
 8002280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
 8002286:	e009      	b.n	800229c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <_sbrk+0x64>)
 8002298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20080000 	.word	0x20080000
 80022a8:	00000400 	.word	0x00000400
 80022ac:	20002464 	.word	0x20002464
 80022b0:	200029a0 	.word	0x200029a0

080022b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <SystemInit+0x20>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <SystemInit+0x20>)
 80022c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022de:	f107 0310 	add.w	r3, r7, #16
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <MX_TIM1_Init+0xa0>)
 80022f8:	4a20      	ldr	r2, [pc, #128]	; (800237c <MX_TIM1_Init+0xa4>)
 80022fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600-1;
 80022fc:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <MX_TIM1_Init+0xa0>)
 80022fe:	f240 623f 	movw	r2, #1599	; 0x63f
 8002302:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002304:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <MX_TIM1_Init+0xa0>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800230a:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <MX_TIM1_Init+0xa0>)
 800230c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002310:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <MX_TIM1_Init+0xa0>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <MX_TIM1_Init+0xa0>)
 800231a:	2200      	movs	r2, #0
 800231c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <MX_TIM1_Init+0xa0>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002324:	4814      	ldr	r0, [pc, #80]	; (8002378 <MX_TIM1_Init+0xa0>)
 8002326:	f003 f9df 	bl	80056e8 <HAL_TIM_Base_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002330:	f7ff fd56 	bl	8001de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002338:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800233a:	f107 0310 	add.w	r3, r7, #16
 800233e:	4619      	mov	r1, r3
 8002340:	480d      	ldr	r0, [pc, #52]	; (8002378 <MX_TIM1_Init+0xa0>)
 8002342:	f003 fbc1 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800234c:	f7ff fd48 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002350:	2320      	movs	r3, #32
 8002352:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	4619      	mov	r1, r3
 8002360:	4805      	ldr	r0, [pc, #20]	; (8002378 <MX_TIM1_Init+0xa0>)
 8002362:	f003 fddd 	bl	8005f20 <HAL_TIMEx_MasterConfigSynchronization>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800236c:	f7ff fd38 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20002468 	.word	0x20002468
 800237c:	40010000 	.word	0x40010000

08002380 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <HAL_TIM_Base_MspInit+0x44>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d113      	bne.n	80023ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_TIM_Base_MspInit+0x48>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a0c      	ldr	r2, [pc, #48]	; (80023c8 <HAL_TIM_Base_MspInit+0x48>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_TIM_Base_MspInit+0x48>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	2019      	movs	r0, #25
 80023b0:	f000 fd41 	bl	8002e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023b4:	2019      	movs	r0, #25
 80023b6:	f000 fd5a 	bl	8002e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40023800 	.word	0x40023800

080023cc <ReturnFlagTimer>:

/* USER CODE BEGIN 1 */

volatile bool flag2s = false;

bool ReturnFlagTimer(){
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0

	return flag2s;
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <ReturnFlagTimer+0x14>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	200024b4 	.word	0x200024b4

080023e4 <ClearFlagTimer>:

void ClearFlagTimer(){
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
	flag2s = false;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <ClearFlagTimer+0x14>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	200024b4 	.word	0x200024b4

080023fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	//This function will be executed when the Timer reaches 2s

	if(htim == &htim1){
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a07      	ldr	r2, [pc, #28]	; (8002424 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d106      	bne.n	800241a <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800240c:	2101      	movs	r1, #1
 800240e:	4806      	ldr	r0, [pc, #24]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002410:	f001 fa89 	bl	8003926 <HAL_GPIO_TogglePin>
		flag2s = true;
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
	}
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20002468 	.word	0x20002468
 8002428:	40020400 	.word	0x40020400
 800242c:	200024b4 	.word	0x200024b4

08002430 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <MX_USART3_UART_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 800243a:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <MX_USART3_UART_Init+0x78>)
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8002440:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <MX_USART3_UART_Init+0x7c>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 8002446:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <MX_USART3_UART_Init+0x80>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 800244c:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <MX_USART3_UART_Init+0x84>)
 800244e:	220d      	movs	r2, #13
 8002450:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002452:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <MX_USART3_UART_Init+0x88>)
 8002454:	4a19      	ldr	r2, [pc, #100]	; (80024bc <MX_USART3_UART_Init+0x8c>)
 8002456:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <MX_USART3_UART_Init+0x88>)
 800245a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800245e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002460:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <MX_USART3_UART_Init+0x88>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_USART3_UART_Init+0x88>)
 8002468:	2200      	movs	r2, #0
 800246a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <MX_USART3_UART_Init+0x88>)
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <MX_USART3_UART_Init+0x88>)
 8002474:	220c      	movs	r2, #12
 8002476:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_USART3_UART_Init+0x88>)
 800247a:	2200      	movs	r2, #0
 800247c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <MX_USART3_UART_Init+0x88>)
 8002480:	2200      	movs	r2, #0
 8002482:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <MX_USART3_UART_Init+0x88>)
 8002486:	2200      	movs	r2, #0
 8002488:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <MX_USART3_UART_Init+0x88>)
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002490:	4809      	ldr	r0, [pc, #36]	; (80024b8 <MX_USART3_UART_Init+0x88>)
 8002492:	f003 fdf1 	bl	8006078 <HAL_UART_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 800249c:	f7ff fca0 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	200026c0 	.word	0x200026c0
 80024a8:	200026c1 	.word	0x200026c1
 80024ac:	200024b8 	.word	0x200024b8
 80024b0:	200026bc 	.word	0x200026bc
 80024b4:	200024bc 	.word	0x200024bc
 80024b8:	200026c4 	.word	0x200026c4
 80024bc:	40004800 	.word	0x40004800

080024c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0ae      	sub	sp, #184	; 0xb8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	2290      	movs	r2, #144	; 0x90
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f008 f829 	bl	800a538 <memset>
  if(uartHandle->Instance==USART3)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a26      	ldr	r2, [pc, #152]	; (8002584 <HAL_UART_MspInit+0xc4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d144      	bne.n	800257a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024f6:	2300      	movs	r3, #0
 80024f8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	4618      	mov	r0, r3
 8002500:	f001 ff16 	bl	8004330 <HAL_RCCEx_PeriphCLKConfig>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800250a:	f7ff fc69 	bl	8001de0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <HAL_UART_MspInit+0xc8>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <HAL_UART_MspInit+0xc8>)
 8002514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002518:	6413      	str	r3, [r2, #64]	; 0x40
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <HAL_UART_MspInit+0xc8>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002526:	4b18      	ldr	r3, [pc, #96]	; (8002588 <HAL_UART_MspInit+0xc8>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a17      	ldr	r2, [pc, #92]	; (8002588 <HAL_UART_MspInit+0xc8>)
 800252c:	f043 0308 	orr.w	r3, r3, #8
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_UART_MspInit+0xc8>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800253e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002542:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	2302      	movs	r3, #2
 8002548:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002552:	2303      	movs	r3, #3
 8002554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002558:	2307      	movs	r3, #7
 800255a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800255e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002562:	4619      	mov	r1, r3
 8002564:	4809      	ldr	r0, [pc, #36]	; (800258c <HAL_UART_MspInit+0xcc>)
 8002566:	f001 f819 	bl	800359c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	2027      	movs	r0, #39	; 0x27
 8002570:	f000 fc61 	bl	8002e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002574:	2027      	movs	r0, #39	; 0x27
 8002576:	f000 fc7a 	bl	8002e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800257a:	bf00      	nop
 800257c:	37b8      	adds	r7, #184	; 0xb8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40004800 	.word	0x40004800
 8002588:	40023800 	.word	0x40023800
 800258c:	40020c00 	.word	0x40020c00

08002590 <HAL_UART_TxCpltCallback>:
		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <HAL_UART_TxCpltCallback+0x64>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f083 0301 	eor.w	r3, r3, #1
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d122      	bne.n	80025ec <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <HAL_UART_TxCpltCallback+0x68>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a14      	ldr	r2, [pc, #80]	; (80025fc <HAL_UART_TxCpltCallback+0x6c>)
 80025ac:	5cd3      	ldrb	r3, [r2, r3]
 80025ae:	2b0d      	cmp	r3, #13
 80025b0:	d10d      	bne.n	80025ce <HAL_UART_TxCpltCallback+0x3e>
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_UART_TxCpltCallback+0x68>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	4a10      	ldr	r2, [pc, #64]	; (80025fc <HAL_UART_TxCpltCallback+0x6c>)
 80025ba:	5cd3      	ldrb	r3, [r2, r3]
 80025bc:	2b0a      	cmp	r3, #10
 80025be:	d006      	beq.n	80025ce <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_UART_TxCpltCallback+0x68>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_UART_TxCpltCallback+0x64>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
 80025cc:	e00f      	b.n	80025ee <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_UART_TxCpltCallback+0x68>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3301      	adds	r3, #1
 80025d4:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <HAL_UART_TxCpltCallback+0x68>)
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <HAL_UART_TxCpltCallback+0x68>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a07      	ldr	r2, [pc, #28]	; (80025fc <HAL_UART_TxCpltCallback+0x6c>)
 80025de:	4413      	add	r3, r2
 80025e0:	2201      	movs	r2, #1
 80025e2:	4619      	mov	r1, r3
 80025e4:	4806      	ldr	r0, [pc, #24]	; (8002600 <HAL_UART_TxCpltCallback+0x70>)
 80025e6:	f003 fd95 	bl	8006114 <HAL_UART_Transmit_IT>
 80025ea:	e000      	b.n	80025ee <HAL_UART_TxCpltCallback+0x5e>
		return;
 80025ec:	bf00      	nop
}
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200026c1 	.word	0x200026c1
 80025f8:	200026bc 	.word	0x200026bc
 80025fc:	200024bc 	.word	0x200024bc
 8002600:	200026c4 	.word	0x200026c4

08002604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800263c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002608:	480d      	ldr	r0, [pc, #52]	; (8002640 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800260a:	490e      	ldr	r1, [pc, #56]	; (8002644 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800260c:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002610:	e002      	b.n	8002618 <LoopCopyDataInit>

08002612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002616:	3304      	adds	r3, #4

08002618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800261c:	d3f9      	bcc.n	8002612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261e:	4a0b      	ldr	r2, [pc, #44]	; (800264c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002620:	4c0b      	ldr	r4, [pc, #44]	; (8002650 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002624:	e001      	b.n	800262a <LoopFillZerobss>

08002626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002628:	3204      	adds	r2, #4

0800262a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800262c:	d3fb      	bcc.n	8002626 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800262e:	f7ff fe41 	bl	80022b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002632:	f007 ff5d 	bl	800a4f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002636:	f7ff faa7 	bl	8001b88 <main>
  bx  lr    
 800263a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800263c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002644:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002648:	0800f5ec 	.word	0x0800f5ec
  ldr r2, =_sbss
 800264c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002650:	2000299c 	.word	0x2000299c

08002654 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002654:	e7fe      	b.n	8002654 <ADC_IRQHandler>

08002656 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800265a:	2003      	movs	r0, #3
 800265c:	f000 fbe0 	bl	8002e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002660:	2000      	movs	r0, #0
 8002662:	f000 f805 	bl	8002670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002666:	f7ff fcb3 	bl	8001fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002678:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_InitTick+0x54>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_InitTick+0x58>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002686:	fbb3 f3f1 	udiv	r3, r3, r1
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fbfb 	bl	8002e8a <HAL_SYSTICK_Config>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e00e      	b.n	80026bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b0f      	cmp	r3, #15
 80026a2:	d80a      	bhi.n	80026ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a4:	2200      	movs	r2, #0
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	f000 fbc3 	bl	8002e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b0:	4a06      	ldr	r2, [pc, #24]	; (80026cc <HAL_InitTick+0x5c>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e000      	b.n	80026bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000004 	.word	0x20000004
 80026c8:	2000000c 	.word	0x2000000c
 80026cc:	20000008 	.word	0x20000008

080026d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_IncTick+0x20>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_IncTick+0x24>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4413      	add	r3, r2
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <HAL_IncTick+0x24>)
 80026e2:	6013      	str	r3, [r2, #0]
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	2000000c 	.word	0x2000000c
 80026f4:	2000274c 	.word	0x2000274c

080026f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return uwTick;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_GetTick+0x14>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	2000274c 	.word	0x2000274c

08002710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002718:	f7ff ffee 	bl	80026f8 <HAL_GetTick>
 800271c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d005      	beq.n	8002736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_Delay+0x44>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002736:	bf00      	nop
 8002738:	f7ff ffde 	bl	80026f8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	429a      	cmp	r2, r3
 8002746:	d8f7      	bhi.n	8002738 <HAL_Delay+0x28>
  {
  }
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2000000c 	.word	0x2000000c

08002758 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e031      	b.n	80027d2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7fe f9bc 	bl	8000af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_ADC_Init+0x84>)
 800279c:	4013      	ands	r3, r2
 800279e:	f043 0202 	orr.w	r2, r3, #2
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f970 	bl	8002a8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f023 0303 	bic.w	r3, r3, #3
 80027ba:	f043 0201 	orr.w	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
 80027c2:	e001      	b.n	80027c8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	ffffeefd 	.word	0xffffeefd

080027e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x1c>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e136      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x28a>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b09      	cmp	r3, #9
 800280a:	d93a      	bls.n	8002882 <HAL_ADC_ConfigChannel+0xa2>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002814:	d035      	beq.n	8002882 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68d9      	ldr	r1, [r3, #12]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	3b1e      	subs	r3, #30
 800282c:	2207      	movs	r2, #7
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43da      	mvns	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	400a      	ands	r2, r1
 800283a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a8d      	ldr	r2, [pc, #564]	; (8002a78 <HAL_ADC_ConfigChannel+0x298>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10a      	bne.n	800285c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68d9      	ldr	r1, [r3, #12]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	061a      	lsls	r2, r3, #24
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800285a:	e035      	b.n	80028c8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68d9      	ldr	r1, [r3, #12]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	4618      	mov	r0, r3
 800286e:	4603      	mov	r3, r0
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4403      	add	r3, r0
 8002874:	3b1e      	subs	r3, #30
 8002876:	409a      	lsls	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002880:	e022      	b.n	80028c8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6919      	ldr	r1, [r3, #16]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	2207      	movs	r2, #7
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43da      	mvns	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	400a      	ands	r2, r1
 80028a4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6919      	ldr	r1, [r3, #16]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	4603      	mov	r3, r0
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4403      	add	r3, r0
 80028be:	409a      	lsls	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b06      	cmp	r3, #6
 80028ce:	d824      	bhi.n	800291a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	3b05      	subs	r3, #5
 80028e2:	221f      	movs	r2, #31
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43da      	mvns	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	400a      	ands	r2, r1
 80028f0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	4618      	mov	r0, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	3b05      	subs	r3, #5
 800290c:	fa00 f203 	lsl.w	r2, r0, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	635a      	str	r2, [r3, #52]	; 0x34
 8002918:	e04c      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b0c      	cmp	r3, #12
 8002920:	d824      	bhi.n	800296c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	3b23      	subs	r3, #35	; 0x23
 8002934:	221f      	movs	r2, #31
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	400a      	ands	r2, r1
 8002942:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	4618      	mov	r0, r3
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	3b23      	subs	r3, #35	; 0x23
 800295e:	fa00 f203 	lsl.w	r2, r0, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
 800296a:	e023      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	3b41      	subs	r3, #65	; 0x41
 800297e:	221f      	movs	r2, #31
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43da      	mvns	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	400a      	ands	r2, r1
 800298c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	4618      	mov	r0, r3
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	3b41      	subs	r3, #65	; 0x41
 80029a8:	fa00 f203 	lsl.w	r2, r0, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a30      	ldr	r2, [pc, #192]	; (8002a7c <HAL_ADC_ConfigChannel+0x29c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d10a      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x1f4>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029c6:	d105      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80029c8:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_ADC_ConfigChannel+0x2a0>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4a2c      	ldr	r2, [pc, #176]	; (8002a80 <HAL_ADC_ConfigChannel+0x2a0>)
 80029ce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80029d2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a28      	ldr	r2, [pc, #160]	; (8002a7c <HAL_ADC_ConfigChannel+0x29c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d10f      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x21e>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b12      	cmp	r3, #18
 80029e4:	d10b      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80029e6:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <HAL_ADC_ConfigChannel+0x2a0>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a25      	ldr	r2, [pc, #148]	; (8002a80 <HAL_ADC_ConfigChannel+0x2a0>)
 80029ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029f0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80029f2:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <HAL_ADC_ConfigChannel+0x2a0>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4a22      	ldr	r2, [pc, #136]	; (8002a80 <HAL_ADC_ConfigChannel+0x2a0>)
 80029f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029fc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1e      	ldr	r2, [pc, #120]	; (8002a7c <HAL_ADC_ConfigChannel+0x29c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d12b      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x280>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1a      	ldr	r2, [pc, #104]	; (8002a78 <HAL_ADC_ConfigChannel+0x298>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d003      	beq.n	8002a1a <HAL_ADC_ConfigChannel+0x23a>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b11      	cmp	r3, #17
 8002a18:	d122      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002a1a:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a20:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a24:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a26:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4a15      	ldr	r2, [pc, #84]	; (8002a80 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a30:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <HAL_ADC_ConfigChannel+0x298>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d111      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_ADC_ConfigChannel+0x2a4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	0c9a      	lsrs	r2, r3, #18
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a52:	e002      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f9      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	10000012 	.word	0x10000012
 8002a7c:	40012000 	.word	0x40012000
 8002a80:	40012300 	.word	0x40012300
 8002a84:	20000004 	.word	0x20000004
 8002a88:	431bde83 	.word	0x431bde83

08002a8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a94:	4b78      	ldr	r3, [pc, #480]	; (8002c78 <ADC_Init+0x1ec>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a77      	ldr	r2, [pc, #476]	; (8002c78 <ADC_Init+0x1ec>)
 8002a9a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a9e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002aa0:	4b75      	ldr	r3, [pc, #468]	; (8002c78 <ADC_Init+0x1ec>)
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4973      	ldr	r1, [pc, #460]	; (8002c78 <ADC_Init+0x1ec>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002abc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	021a      	lsls	r2, r3, #8
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ae0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6859      	ldr	r1, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6899      	ldr	r1, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	4a58      	ldr	r2, [pc, #352]	; (8002c7c <ADC_Init+0x1f0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d022      	beq.n	8002b66 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6899      	ldr	r1, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6899      	ldr	r1, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	e00f      	b.n	8002b86 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0202 	bic.w	r2, r2, #2
 8002b94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6899      	ldr	r1, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	005a      	lsls	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01b      	beq.n	8002bec <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	3b01      	subs	r3, #1
 8002be0:	035a      	lsls	r2, r3, #13
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	e007      	b.n	8002bfc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	051a      	lsls	r2, r3, #20
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6899      	ldr	r1, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c3e:	025a      	lsls	r2, r3, #9
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6899      	ldr	r1, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	029a      	lsls	r2, r3, #10
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	609a      	str	r2, [r3, #8]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	40012300 	.word	0x40012300
 8002c7c:	0f000001 	.word	0x0f000001

08002c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cae:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	60d3      	str	r3, [r2, #12]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00
 8002cc4:	05fa0000 	.word	0x05fa0000

08002cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	f003 0307 	and.w	r3, r3, #7
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	db0b      	blt.n	8002d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	f003 021f 	and.w	r2, r3, #31
 8002cfc:	4907      	ldr	r1, [pc, #28]	; (8002d1c <__NVIC_EnableIRQ+0x38>)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	2001      	movs	r0, #1
 8002d06:	fa00 f202 	lsl.w	r2, r0, r2
 8002d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000e100 	.word	0xe000e100

08002d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	6039      	str	r1, [r7, #0]
 8002d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	db0a      	blt.n	8002d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	490c      	ldr	r1, [pc, #48]	; (8002d6c <__NVIC_SetPriority+0x4c>)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	0112      	lsls	r2, r2, #4
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	440b      	add	r3, r1
 8002d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d48:	e00a      	b.n	8002d60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4908      	ldr	r1, [pc, #32]	; (8002d70 <__NVIC_SetPriority+0x50>)
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	3b04      	subs	r3, #4
 8002d58:	0112      	lsls	r2, r2, #4
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	761a      	strb	r2, [r3, #24]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000e100 	.word	0xe000e100
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b089      	sub	sp, #36	; 0x24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f1c3 0307 	rsb	r3, r3, #7
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	bf28      	it	cs
 8002d92:	2304      	movcs	r3, #4
 8002d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d902      	bls.n	8002da4 <NVIC_EncodePriority+0x30>
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3b03      	subs	r3, #3
 8002da2:	e000      	b.n	8002da6 <NVIC_EncodePriority+0x32>
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43da      	mvns	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	401a      	ands	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc6:	43d9      	mvns	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dcc:	4313      	orrs	r3, r2
         );
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3724      	adds	r7, #36	; 0x24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dec:	d301      	bcc.n	8002df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00f      	b.n	8002e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002df2:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <SysTick_Config+0x40>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dfa:	210f      	movs	r1, #15
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	f7ff ff8e 	bl	8002d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <SysTick_Config+0x40>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e0a:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <SysTick_Config+0x40>)
 8002e0c:	2207      	movs	r2, #7
 8002e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	e000e010 	.word	0xe000e010

08002e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ff29 	bl	8002c80 <__NVIC_SetPriorityGrouping>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e48:	f7ff ff3e 	bl	8002cc8 <__NVIC_GetPriorityGrouping>
 8002e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	6978      	ldr	r0, [r7, #20]
 8002e54:	f7ff ff8e 	bl	8002d74 <NVIC_EncodePriority>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff5d 	bl	8002d20 <__NVIC_SetPriority>
}
 8002e66:	bf00      	nop
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4603      	mov	r3, r0
 8002e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff31 	bl	8002ce4 <__NVIC_EnableIRQ>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ffa2 	bl	8002ddc <SysTick_Config>
 8002e98:	4603      	mov	r3, r0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002eb0:	f7ff fc22 	bl	80026f8 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e099      	b.n	8002ff4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee0:	e00f      	b.n	8002f02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ee2:	f7ff fc09 	bl	80026f8 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b05      	cmp	r3, #5
 8002eee:	d908      	bls.n	8002f02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2203      	movs	r2, #3
 8002efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e078      	b.n	8002ff4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e8      	bne.n	8002ee2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	4b38      	ldr	r3, [pc, #224]	; (8002ffc <HAL_DMA_Init+0x158>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d107      	bne.n	8002f6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	4313      	orrs	r3, r2
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f023 0307 	bic.w	r3, r3, #7
 8002f82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d117      	bne.n	8002fc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00e      	beq.n	8002fc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fa7b 	bl	80034a4 <DMA_CheckFifoParam>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2240      	movs	r2, #64	; 0x40
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e016      	b.n	8002ff4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fa32 	bl	8003438 <DMA_CalcBaseAndBitshift>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	223f      	movs	r2, #63	; 0x3f
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	e010803f 	.word	0xe010803f

08003000 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800300e:	f7ff fb73 	bl	80026f8 <HAL_GetTick>
 8003012:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d008      	beq.n	8003032 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2280      	movs	r2, #128	; 0x80
 8003024:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e052      	b.n	80030d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0216 	bic.w	r2, r2, #22
 8003040:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003050:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <HAL_DMA_Abort+0x62>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0208 	bic.w	r2, r2, #8
 8003070:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003082:	e013      	b.n	80030ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003084:	f7ff fb38 	bl	80026f8 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b05      	cmp	r3, #5
 8003090:	d90c      	bls.n	80030ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2203      	movs	r2, #3
 800309c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e015      	b.n	80030d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1e4      	bne.n	8003084 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030be:	223f      	movs	r2, #63	; 0x3f
 80030c0:	409a      	lsls	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d004      	beq.n	80030fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2280      	movs	r2, #128	; 0x80
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00c      	b.n	8003118 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2205      	movs	r2, #5
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003130:	4b8e      	ldr	r3, [pc, #568]	; (800336c <HAL_DMA_IRQHandler+0x248>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a8e      	ldr	r2, [pc, #568]	; (8003370 <HAL_DMA_IRQHandler+0x24c>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	0a9b      	lsrs	r3, r3, #10
 800313c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314e:	2208      	movs	r2, #8
 8003150:	409a      	lsls	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01a      	beq.n	8003190 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0204 	bic.w	r2, r2, #4
 8003176:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	2208      	movs	r2, #8
 800317e:	409a      	lsls	r2, r3
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	f043 0201 	orr.w	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003194:	2201      	movs	r2, #1
 8003196:	409a      	lsls	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d012      	beq.n	80031c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	2201      	movs	r2, #1
 80031b4:	409a      	lsls	r2, r3
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	f043 0202 	orr.w	r2, r3, #2
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ca:	2204      	movs	r2, #4
 80031cc:	409a      	lsls	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d012      	beq.n	80031fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00b      	beq.n	80031fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e8:	2204      	movs	r2, #4
 80031ea:	409a      	lsls	r2, r3
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	f043 0204 	orr.w	r2, r3, #4
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	2210      	movs	r2, #16
 8003202:	409a      	lsls	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d043      	beq.n	8003294 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d03c      	beq.n	8003294 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	2210      	movs	r2, #16
 8003220:	409a      	lsls	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d018      	beq.n	8003266 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d108      	bne.n	8003254 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d024      	beq.n	8003294 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
 8003252:	e01f      	b.n	8003294 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01b      	beq.n	8003294 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
 8003264:	e016      	b.n	8003294 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0208 	bic.w	r2, r2, #8
 8003282:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	2220      	movs	r2, #32
 800329a:	409a      	lsls	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 808f 	beq.w	80033c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8087 	beq.w	80033c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	2220      	movs	r2, #32
 80032bc:	409a      	lsls	r2, r3
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b05      	cmp	r3, #5
 80032cc:	d136      	bne.n	800333c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0216 	bic.w	r2, r2, #22
 80032dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <HAL_DMA_IRQHandler+0x1da>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0208 	bic.w	r2, r2, #8
 800330c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003312:	223f      	movs	r2, #63	; 0x3f
 8003314:	409a      	lsls	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332e:	2b00      	cmp	r3, #0
 8003330:	d07e      	beq.n	8003430 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
        }
        return;
 800333a:	e079      	b.n	8003430 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01d      	beq.n	8003386 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10d      	bne.n	8003374 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335c:	2b00      	cmp	r3, #0
 800335e:	d031      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4798      	blx	r3
 8003368:	e02c      	b.n	80033c4 <HAL_DMA_IRQHandler+0x2a0>
 800336a:	bf00      	nop
 800336c:	20000004 	.word	0x20000004
 8003370:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d023      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
 8003384:	e01e      	b.n	80033c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10f      	bne.n	80033b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0210 	bic.w	r2, r2, #16
 80033a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d032      	beq.n	8003432 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d022      	beq.n	800341e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2205      	movs	r2, #5
 80033dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3301      	adds	r3, #1
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d307      	bcc.n	800340c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f2      	bne.n	80033f0 <HAL_DMA_IRQHandler+0x2cc>
 800340a:	e000      	b.n	800340e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800340c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
 800342e:	e000      	b.n	8003432 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003430:	bf00      	nop
    }
  }
}
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	3b10      	subs	r3, #16
 8003448:	4a13      	ldr	r2, [pc, #76]	; (8003498 <DMA_CalcBaseAndBitshift+0x60>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003452:	4a12      	ldr	r2, [pc, #72]	; (800349c <DMA_CalcBaseAndBitshift+0x64>)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4413      	add	r3, r2
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d908      	bls.n	8003478 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <DMA_CalcBaseAndBitshift+0x68>)
 800346e:	4013      	ands	r3, r2
 8003470:	1d1a      	adds	r2, r3, #4
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	659a      	str	r2, [r3, #88]	; 0x58
 8003476:	e006      	b.n	8003486 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <DMA_CalcBaseAndBitshift+0x68>)
 8003480:	4013      	ands	r3, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	aaaaaaab 	.word	0xaaaaaaab
 800349c:	0800ecf0 	.word	0x0800ecf0
 80034a0:	fffffc00 	.word	0xfffffc00

080034a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d11f      	bne.n	80034fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d856      	bhi.n	8003572 <DMA_CheckFifoParam+0xce>
 80034c4:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <DMA_CheckFifoParam+0x28>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080034dd 	.word	0x080034dd
 80034d0:	080034ef 	.word	0x080034ef
 80034d4:	080034dd 	.word	0x080034dd
 80034d8:	08003573 	.word	0x08003573
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d046      	beq.n	8003576 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ec:	e043      	b.n	8003576 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034f6:	d140      	bne.n	800357a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034fc:	e03d      	b.n	800357a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003506:	d121      	bne.n	800354c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b03      	cmp	r3, #3
 800350c:	d837      	bhi.n	800357e <DMA_CheckFifoParam+0xda>
 800350e:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <DMA_CheckFifoParam+0x70>)
 8003510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003514:	08003525 	.word	0x08003525
 8003518:	0800352b 	.word	0x0800352b
 800351c:	08003525 	.word	0x08003525
 8003520:	0800353d 	.word	0x0800353d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
      break;
 8003528:	e030      	b.n	800358c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d025      	beq.n	8003582 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800353a:	e022      	b.n	8003582 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003544:	d11f      	bne.n	8003586 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800354a:	e01c      	b.n	8003586 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d903      	bls.n	800355a <DMA_CheckFifoParam+0xb6>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b03      	cmp	r3, #3
 8003556:	d003      	beq.n	8003560 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003558:	e018      	b.n	800358c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
      break;
 800355e:	e015      	b.n	800358c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00e      	beq.n	800358a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
      break;
 8003570:	e00b      	b.n	800358a <DMA_CheckFifoParam+0xe6>
      break;
 8003572:	bf00      	nop
 8003574:	e00a      	b.n	800358c <DMA_CheckFifoParam+0xe8>
      break;
 8003576:	bf00      	nop
 8003578:	e008      	b.n	800358c <DMA_CheckFifoParam+0xe8>
      break;
 800357a:	bf00      	nop
 800357c:	e006      	b.n	800358c <DMA_CheckFifoParam+0xe8>
      break;
 800357e:	bf00      	nop
 8003580:	e004      	b.n	800358c <DMA_CheckFifoParam+0xe8>
      break;
 8003582:	bf00      	nop
 8003584:	e002      	b.n	800358c <DMA_CheckFifoParam+0xe8>
      break;   
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <DMA_CheckFifoParam+0xe8>
      break;
 800358a:	bf00      	nop
    }
  } 
  
  return status; 
 800358c:	7bfb      	ldrb	r3, [r7, #15]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop

0800359c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	; 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	e175      	b.n	80038a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035bc:	2201      	movs	r2, #1
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4013      	ands	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	f040 8164 	bne.w	80038a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d005      	beq.n	80035f2 <HAL_GPIO_Init+0x56>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d130      	bne.n	8003654 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	2203      	movs	r2, #3
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003628:	2201      	movs	r2, #1
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 0201 	and.w	r2, r3, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b03      	cmp	r3, #3
 800365e:	d017      	beq.n	8003690 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	2203      	movs	r2, #3
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d123      	bne.n	80036e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	08da      	lsrs	r2, r3, #3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3208      	adds	r2, #8
 80036a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	220f      	movs	r2, #15
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	08da      	lsrs	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3208      	adds	r2, #8
 80036de:	69b9      	ldr	r1, [r7, #24]
 80036e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	2203      	movs	r2, #3
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0203 	and.w	r2, r3, #3
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80be 	beq.w	80038a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003726:	4b66      	ldr	r3, [pc, #408]	; (80038c0 <HAL_GPIO_Init+0x324>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	4a65      	ldr	r2, [pc, #404]	; (80038c0 <HAL_GPIO_Init+0x324>)
 800372c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003730:	6453      	str	r3, [r2, #68]	; 0x44
 8003732:	4b63      	ldr	r3, [pc, #396]	; (80038c0 <HAL_GPIO_Init+0x324>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800373e:	4a61      	ldr	r2, [pc, #388]	; (80038c4 <HAL_GPIO_Init+0x328>)
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	3302      	adds	r3, #2
 8003746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	220f      	movs	r2, #15
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a58      	ldr	r2, [pc, #352]	; (80038c8 <HAL_GPIO_Init+0x32c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d037      	beq.n	80037da <HAL_GPIO_Init+0x23e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a57      	ldr	r2, [pc, #348]	; (80038cc <HAL_GPIO_Init+0x330>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d031      	beq.n	80037d6 <HAL_GPIO_Init+0x23a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a56      	ldr	r2, [pc, #344]	; (80038d0 <HAL_GPIO_Init+0x334>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d02b      	beq.n	80037d2 <HAL_GPIO_Init+0x236>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a55      	ldr	r2, [pc, #340]	; (80038d4 <HAL_GPIO_Init+0x338>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d025      	beq.n	80037ce <HAL_GPIO_Init+0x232>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a54      	ldr	r2, [pc, #336]	; (80038d8 <HAL_GPIO_Init+0x33c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01f      	beq.n	80037ca <HAL_GPIO_Init+0x22e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a53      	ldr	r2, [pc, #332]	; (80038dc <HAL_GPIO_Init+0x340>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d019      	beq.n	80037c6 <HAL_GPIO_Init+0x22a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a52      	ldr	r2, [pc, #328]	; (80038e0 <HAL_GPIO_Init+0x344>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <HAL_GPIO_Init+0x226>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a51      	ldr	r2, [pc, #324]	; (80038e4 <HAL_GPIO_Init+0x348>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00d      	beq.n	80037be <HAL_GPIO_Init+0x222>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a50      	ldr	r2, [pc, #320]	; (80038e8 <HAL_GPIO_Init+0x34c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d007      	beq.n	80037ba <HAL_GPIO_Init+0x21e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a4f      	ldr	r2, [pc, #316]	; (80038ec <HAL_GPIO_Init+0x350>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d101      	bne.n	80037b6 <HAL_GPIO_Init+0x21a>
 80037b2:	2309      	movs	r3, #9
 80037b4:	e012      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037b6:	230a      	movs	r3, #10
 80037b8:	e010      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037ba:	2308      	movs	r3, #8
 80037bc:	e00e      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037be:	2307      	movs	r3, #7
 80037c0:	e00c      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037c2:	2306      	movs	r3, #6
 80037c4:	e00a      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037c6:	2305      	movs	r3, #5
 80037c8:	e008      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037ca:	2304      	movs	r3, #4
 80037cc:	e006      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037ce:	2303      	movs	r3, #3
 80037d0:	e004      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e002      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037da:	2300      	movs	r3, #0
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	f002 0203 	and.w	r2, r2, #3
 80037e2:	0092      	lsls	r2, r2, #2
 80037e4:	4093      	lsls	r3, r2
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037ec:	4935      	ldr	r1, [pc, #212]	; (80038c4 <HAL_GPIO_Init+0x328>)
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	3302      	adds	r3, #2
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037fa:	4b3d      	ldr	r3, [pc, #244]	; (80038f0 <HAL_GPIO_Init+0x354>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800381e:	4a34      	ldr	r2, [pc, #208]	; (80038f0 <HAL_GPIO_Init+0x354>)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003824:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <HAL_GPIO_Init+0x354>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003848:	4a29      	ldr	r2, [pc, #164]	; (80038f0 <HAL_GPIO_Init+0x354>)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800384e:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <HAL_GPIO_Init+0x354>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	43db      	mvns	r3, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4013      	ands	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003872:	4a1f      	ldr	r2, [pc, #124]	; (80038f0 <HAL_GPIO_Init+0x354>)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <HAL_GPIO_Init+0x354>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800389c:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <HAL_GPIO_Init+0x354>)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3301      	adds	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2b0f      	cmp	r3, #15
 80038ac:	f67f ae86 	bls.w	80035bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	3724      	adds	r7, #36	; 0x24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40013800 	.word	0x40013800
 80038c8:	40020000 	.word	0x40020000
 80038cc:	40020400 	.word	0x40020400
 80038d0:	40020800 	.word	0x40020800
 80038d4:	40020c00 	.word	0x40020c00
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40021400 	.word	0x40021400
 80038e0:	40021800 	.word	0x40021800
 80038e4:	40021c00 	.word	0x40021c00
 80038e8:	40022000 	.word	0x40022000
 80038ec:	40022400 	.word	0x40022400
 80038f0:	40013c00 	.word	0x40013c00

080038f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
 8003900:	4613      	mov	r3, r2
 8003902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003904:	787b      	ldrb	r3, [r7, #1]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003910:	e003      	b.n	800391a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003912:	887b      	ldrh	r3, [r7, #2]
 8003914:	041a      	lsls	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	619a      	str	r2, [r3, #24]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	460b      	mov	r3, r1
 8003930:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003938:	887a      	ldrh	r2, [r7, #2]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4013      	ands	r3, r2
 800393e:	041a      	lsls	r2, r3, #16
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	43d9      	mvns	r1, r3
 8003944:	887b      	ldrh	r3, [r7, #2]
 8003946:	400b      	ands	r3, r1
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	619a      	str	r2, [r3, #24]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d006      	beq.n	8003980 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003972:	4a05      	ldr	r2, [pc, #20]	; (8003988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd ffa2 	bl	80018c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40013c00 	.word	0x40013c00

0800398c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003994:	2300      	movs	r3, #0
 8003996:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e29b      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8087 	beq.w	8003abe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039b0:	4b96      	ldr	r3, [pc, #600]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d00c      	beq.n	80039d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039bc:	4b93      	ldr	r3, [pc, #588]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 030c 	and.w	r3, r3, #12
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d112      	bne.n	80039ee <HAL_RCC_OscConfig+0x62>
 80039c8:	4b90      	ldr	r3, [pc, #576]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d4:	d10b      	bne.n	80039ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d6:	4b8d      	ldr	r3, [pc, #564]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d06c      	beq.n	8003abc <HAL_RCC_OscConfig+0x130>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d168      	bne.n	8003abc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e275      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f6:	d106      	bne.n	8003a06 <HAL_RCC_OscConfig+0x7a>
 80039f8:	4b84      	ldr	r3, [pc, #528]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a83      	ldr	r2, [pc, #524]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 80039fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	e02e      	b.n	8003a64 <HAL_RCC_OscConfig+0xd8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x9c>
 8003a0e:	4b7f      	ldr	r3, [pc, #508]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a7e      	ldr	r2, [pc, #504]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	4b7c      	ldr	r3, [pc, #496]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a7b      	ldr	r2, [pc, #492]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e01d      	b.n	8003a64 <HAL_RCC_OscConfig+0xd8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0xc0>
 8003a32:	4b76      	ldr	r3, [pc, #472]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a75      	ldr	r2, [pc, #468]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b73      	ldr	r3, [pc, #460]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a72      	ldr	r2, [pc, #456]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e00b      	b.n	8003a64 <HAL_RCC_OscConfig+0xd8>
 8003a4c:	4b6f      	ldr	r3, [pc, #444]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a6e      	ldr	r2, [pc, #440]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4b6c      	ldr	r3, [pc, #432]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a6b      	ldr	r2, [pc, #428]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d013      	beq.n	8003a94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fe fe44 	bl	80026f8 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a74:	f7fe fe40 	bl	80026f8 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	; 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e229      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b61      	ldr	r3, [pc, #388]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0xe8>
 8003a92:	e014      	b.n	8003abe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fe fe30 	bl	80026f8 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a9c:	f7fe fe2c 	bl	80026f8 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	; 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e215      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aae:	4b57      	ldr	r3, [pc, #348]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x110>
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d069      	beq.n	8003b9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aca:	4b50      	ldr	r3, [pc, #320]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad6:	4b4d      	ldr	r3, [pc, #308]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d11c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x190>
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d116      	bne.n	8003b1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aee:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_RCC_OscConfig+0x17a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e1e9      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b06:	4b41      	ldr	r3, [pc, #260]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	493d      	ldr	r1, [pc, #244]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1a:	e040      	b.n	8003b9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d023      	beq.n	8003b6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b24:	4b39      	ldr	r3, [pc, #228]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a38      	ldr	r2, [pc, #224]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fe fde2 	bl	80026f8 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b38:	f7fe fdde 	bl	80026f8 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e1c7      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4a:	4b30      	ldr	r3, [pc, #192]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b56:	4b2d      	ldr	r3, [pc, #180]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4929      	ldr	r1, [pc, #164]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]
 8003b6a:	e018      	b.n	8003b9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6c:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fe fdbe 	bl	80026f8 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b80:	f7fe fdba 	bl	80026f8 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e1a3      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b92:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d038      	beq.n	8003c1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d019      	beq.n	8003be6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bb2:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb6:	4a15      	ldr	r2, [pc, #84]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbe:	f7fe fd9b 	bl	80026f8 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc6:	f7fe fd97 	bl	80026f8 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e180      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x23a>
 8003be4:	e01a      	b.n	8003c1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003be6:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bea:	4a08      	ldr	r2, [pc, #32]	; (8003c0c <HAL_RCC_OscConfig+0x280>)
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf2:	f7fe fd81 	bl	80026f8 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf8:	e00a      	b.n	8003c10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bfa:	f7fe fd7d 	bl	80026f8 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d903      	bls.n	8003c10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e166      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>
 8003c0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c10:	4b92      	ldr	r3, [pc, #584]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1ee      	bne.n	8003bfa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80a4 	beq.w	8003d72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c2a:	4b8c      	ldr	r3, [pc, #560]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10d      	bne.n	8003c52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c36:	4b89      	ldr	r3, [pc, #548]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	4a88      	ldr	r2, [pc, #544]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c40:	6413      	str	r3, [r2, #64]	; 0x40
 8003c42:	4b86      	ldr	r3, [pc, #536]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c52:	4b83      	ldr	r3, [pc, #524]	; (8003e60 <HAL_RCC_OscConfig+0x4d4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d118      	bne.n	8003c90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c5e:	4b80      	ldr	r3, [pc, #512]	; (8003e60 <HAL_RCC_OscConfig+0x4d4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a7f      	ldr	r2, [pc, #508]	; (8003e60 <HAL_RCC_OscConfig+0x4d4>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c6a:	f7fe fd45 	bl	80026f8 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c72:	f7fe fd41 	bl	80026f8 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b64      	cmp	r3, #100	; 0x64
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e12a      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c84:	4b76      	ldr	r3, [pc, #472]	; (8003e60 <HAL_RCC_OscConfig+0x4d4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d106      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x31a>
 8003c98:	4b70      	ldr	r3, [pc, #448]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	4a6f      	ldr	r2, [pc, #444]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca4:	e02d      	b.n	8003d02 <HAL_RCC_OscConfig+0x376>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x33c>
 8003cae:	4b6b      	ldr	r3, [pc, #428]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb2:	4a6a      	ldr	r2, [pc, #424]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cba:	4b68      	ldr	r3, [pc, #416]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	4a67      	ldr	r2, [pc, #412]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003cc0:	f023 0304 	bic.w	r3, r3, #4
 8003cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc6:	e01c      	b.n	8003d02 <HAL_RCC_OscConfig+0x376>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b05      	cmp	r3, #5
 8003cce:	d10c      	bne.n	8003cea <HAL_RCC_OscConfig+0x35e>
 8003cd0:	4b62      	ldr	r3, [pc, #392]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	4a61      	ldr	r2, [pc, #388]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003cd6:	f043 0304 	orr.w	r3, r3, #4
 8003cda:	6713      	str	r3, [r2, #112]	; 0x70
 8003cdc:	4b5f      	ldr	r3, [pc, #380]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	4a5e      	ldr	r2, [pc, #376]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce8:	e00b      	b.n	8003d02 <HAL_RCC_OscConfig+0x376>
 8003cea:	4b5c      	ldr	r3, [pc, #368]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	4a5b      	ldr	r2, [pc, #364]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003cf0:	f023 0301 	bic.w	r3, r3, #1
 8003cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf6:	4b59      	ldr	r3, [pc, #356]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	4a58      	ldr	r2, [pc, #352]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003cfc:	f023 0304 	bic.w	r3, r3, #4
 8003d00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d015      	beq.n	8003d36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0a:	f7fe fcf5 	bl	80026f8 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d10:	e00a      	b.n	8003d28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d12:	f7fe fcf1 	bl	80026f8 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e0d8      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d28:	4b4c      	ldr	r3, [pc, #304]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0ee      	beq.n	8003d12 <HAL_RCC_OscConfig+0x386>
 8003d34:	e014      	b.n	8003d60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d36:	f7fe fcdf 	bl	80026f8 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f7fe fcdb 	bl	80026f8 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e0c2      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d54:	4b41      	ldr	r3, [pc, #260]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1ee      	bne.n	8003d3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d105      	bne.n	8003d72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d66:	4b3d      	ldr	r3, [pc, #244]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	4a3c      	ldr	r2, [pc, #240]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 80ae 	beq.w	8003ed8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d7c:	4b37      	ldr	r3, [pc, #220]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 030c 	and.w	r3, r3, #12
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d06d      	beq.n	8003e64 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d14b      	bne.n	8003e28 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d90:	4b32      	ldr	r3, [pc, #200]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a31      	ldr	r2, [pc, #196]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fcac 	bl	80026f8 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da4:	f7fe fca8 	bl	80026f8 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e091      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	4b29      	ldr	r3, [pc, #164]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	019b      	lsls	r3, r3, #6
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	041b      	lsls	r3, r3, #16
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	061b      	lsls	r3, r3, #24
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	071b      	lsls	r3, r3, #28
 8003dee:	491b      	ldr	r1, [pc, #108]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df4:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fe fc7a 	bl	80026f8 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fe fc76 	bl	80026f8 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e05f      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x47c>
 8003e26:	e057      	b.n	8003ed8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e28:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a0b      	ldr	r2, [pc, #44]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fe fc60 	bl	80026f8 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7fe fc5c 	bl	80026f8 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e045      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4e:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4b0>
 8003e5a:	e03d      	b.n	8003ed8 <HAL_RCC_OscConfig+0x54c>
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e64:	4b1f      	ldr	r3, [pc, #124]	; (8003ee4 <HAL_RCC_OscConfig+0x558>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d030      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d129      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d122      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e94:	4013      	ands	r3, r2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d119      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	3b01      	subs	r3, #1
 8003eae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d10f      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d107      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800

08003ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0d0      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f00:	4b6a      	ldr	r3, [pc, #424]	; (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d910      	bls.n	8003f30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0e:	4b67      	ldr	r3, [pc, #412]	; (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 020f 	bic.w	r2, r3, #15
 8003f16:	4965      	ldr	r1, [pc, #404]	; (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1e:	4b63      	ldr	r3, [pc, #396]	; (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0b8      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d020      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f48:	4b59      	ldr	r3, [pc, #356]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4a58      	ldr	r2, [pc, #352]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f60:	4b53      	ldr	r3, [pc, #332]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	4a52      	ldr	r2, [pc, #328]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f6c:	4b50      	ldr	r3, [pc, #320]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	494d      	ldr	r1, [pc, #308]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d040      	beq.n	800400c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	4b47      	ldr	r3, [pc, #284]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d115      	bne.n	8003fca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e07f      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d107      	bne.n	8003fba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003faa:	4b41      	ldr	r3, [pc, #260]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d109      	bne.n	8003fca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e073      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fba:	4b3d      	ldr	r3, [pc, #244]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e06b      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fca:	4b39      	ldr	r3, [pc, #228]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f023 0203 	bic.w	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4936      	ldr	r1, [pc, #216]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fdc:	f7fe fb8c 	bl	80026f8 <HAL_GetTick>
 8003fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe4:	f7fe fb88 	bl	80026f8 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e053      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffa:	4b2d      	ldr	r3, [pc, #180]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 020c 	and.w	r2, r3, #12
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	429a      	cmp	r2, r3
 800400a:	d1eb      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800400c:	4b27      	ldr	r3, [pc, #156]	; (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d210      	bcs.n	800403c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401a:	4b24      	ldr	r3, [pc, #144]	; (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 020f 	bic.w	r2, r3, #15
 8004022:	4922      	ldr	r1, [pc, #136]	; (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	4313      	orrs	r3, r2
 8004028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e032      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004048:	4b19      	ldr	r3, [pc, #100]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4916      	ldr	r1, [pc, #88]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004066:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	490e      	ldr	r1, [pc, #56]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004076:	4313      	orrs	r3, r2
 8004078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800407a:	f000 f821 	bl	80040c0 <HAL_RCC_GetSysClockFreq>
 800407e:	4602      	mov	r2, r0
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	490a      	ldr	r1, [pc, #40]	; (80040b4 <HAL_RCC_ClockConfig+0x1cc>)
 800408c:	5ccb      	ldrb	r3, [r1, r3]
 800408e:	fa22 f303 	lsr.w	r3, r2, r3
 8004092:	4a09      	ldr	r2, [pc, #36]	; (80040b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004096:	4b09      	ldr	r3, [pc, #36]	; (80040bc <HAL_RCC_ClockConfig+0x1d4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fae8 	bl	8002670 <HAL_InitTick>

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40023c00 	.word	0x40023c00
 80040b0:	40023800 	.word	0x40023800
 80040b4:	0800ecd8 	.word	0x0800ecd8
 80040b8:	20000004 	.word	0x20000004
 80040bc:	20000008 	.word	0x20000008

080040c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c4:	b094      	sub	sp, #80	; 0x50
 80040c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	647b      	str	r3, [r7, #68]	; 0x44
 80040cc:	2300      	movs	r3, #0
 80040ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d0:	2300      	movs	r3, #0
 80040d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040d8:	4b79      	ldr	r3, [pc, #484]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 030c 	and.w	r3, r3, #12
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d00d      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x40>
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	f200 80e1 	bhi.w	80042ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_RCC_GetSysClockFreq+0x34>
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d003      	beq.n	80040fa <HAL_RCC_GetSysClockFreq+0x3a>
 80040f2:	e0db      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040f4:	4b73      	ldr	r3, [pc, #460]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80040f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040f8:	e0db      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040fa:	4b72      	ldr	r3, [pc, #456]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80040fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040fe:	e0d8      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004100:	4b6f      	ldr	r3, [pc, #444]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004108:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800410a:	4b6d      	ldr	r3, [pc, #436]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d063      	beq.n	80041de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004116:	4b6a      	ldr	r3, [pc, #424]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	099b      	lsrs	r3, r3, #6
 800411c:	2200      	movs	r2, #0
 800411e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004120:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004128:	633b      	str	r3, [r7, #48]	; 0x30
 800412a:	2300      	movs	r3, #0
 800412c:	637b      	str	r3, [r7, #52]	; 0x34
 800412e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004132:	4622      	mov	r2, r4
 8004134:	462b      	mov	r3, r5
 8004136:	f04f 0000 	mov.w	r0, #0
 800413a:	f04f 0100 	mov.w	r1, #0
 800413e:	0159      	lsls	r1, r3, #5
 8004140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004144:	0150      	lsls	r0, r2, #5
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4621      	mov	r1, r4
 800414c:	1a51      	subs	r1, r2, r1
 800414e:	6139      	str	r1, [r7, #16]
 8004150:	4629      	mov	r1, r5
 8004152:	eb63 0301 	sbc.w	r3, r3, r1
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004164:	4659      	mov	r1, fp
 8004166:	018b      	lsls	r3, r1, #6
 8004168:	4651      	mov	r1, sl
 800416a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800416e:	4651      	mov	r1, sl
 8004170:	018a      	lsls	r2, r1, #6
 8004172:	4651      	mov	r1, sl
 8004174:	ebb2 0801 	subs.w	r8, r2, r1
 8004178:	4659      	mov	r1, fp
 800417a:	eb63 0901 	sbc.w	r9, r3, r1
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800418a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800418e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004192:	4690      	mov	r8, r2
 8004194:	4699      	mov	r9, r3
 8004196:	4623      	mov	r3, r4
 8004198:	eb18 0303 	adds.w	r3, r8, r3
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	462b      	mov	r3, r5
 80041a0:	eb49 0303 	adc.w	r3, r9, r3
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041b2:	4629      	mov	r1, r5
 80041b4:	028b      	lsls	r3, r1, #10
 80041b6:	4621      	mov	r1, r4
 80041b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041bc:	4621      	mov	r1, r4
 80041be:	028a      	lsls	r2, r1, #10
 80041c0:	4610      	mov	r0, r2
 80041c2:	4619      	mov	r1, r3
 80041c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c6:	2200      	movs	r2, #0
 80041c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041d0:	f7fc fa4a 	bl	8000668 <__aeabi_uldivmod>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4613      	mov	r3, r2
 80041da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041dc:	e058      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041de:	4b38      	ldr	r3, [pc, #224]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	099b      	lsrs	r3, r3, #6
 80041e4:	2200      	movs	r2, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	4611      	mov	r1, r2
 80041ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041ee:	623b      	str	r3, [r7, #32]
 80041f0:	2300      	movs	r3, #0
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
 80041f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041f8:	4642      	mov	r2, r8
 80041fa:	464b      	mov	r3, r9
 80041fc:	f04f 0000 	mov.w	r0, #0
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	0159      	lsls	r1, r3, #5
 8004206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800420a:	0150      	lsls	r0, r2, #5
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4641      	mov	r1, r8
 8004212:	ebb2 0a01 	subs.w	sl, r2, r1
 8004216:	4649      	mov	r1, r9
 8004218:	eb63 0b01 	sbc.w	fp, r3, r1
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004228:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800422c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004230:	ebb2 040a 	subs.w	r4, r2, sl
 8004234:	eb63 050b 	sbc.w	r5, r3, fp
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	00eb      	lsls	r3, r5, #3
 8004242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004246:	00e2      	lsls	r2, r4, #3
 8004248:	4614      	mov	r4, r2
 800424a:	461d      	mov	r5, r3
 800424c:	4643      	mov	r3, r8
 800424e:	18e3      	adds	r3, r4, r3
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	464b      	mov	r3, r9
 8004254:	eb45 0303 	adc.w	r3, r5, r3
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004266:	4629      	mov	r1, r5
 8004268:	028b      	lsls	r3, r1, #10
 800426a:	4621      	mov	r1, r4
 800426c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004270:	4621      	mov	r1, r4
 8004272:	028a      	lsls	r2, r1, #10
 8004274:	4610      	mov	r0, r2
 8004276:	4619      	mov	r1, r3
 8004278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800427a:	2200      	movs	r2, #0
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	61fa      	str	r2, [r7, #28]
 8004280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004284:	f7fc f9f0 	bl	8000668 <__aeabi_uldivmod>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4613      	mov	r3, r2
 800428e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	3301      	adds	r3, #1
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80042a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042aa:	e002      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3750      	adds	r7, #80	; 0x50
 80042b8:	46bd      	mov	sp, r7
 80042ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042be:	bf00      	nop
 80042c0:	40023800 	.word	0x40023800
 80042c4:	00f42400 	.word	0x00f42400

080042c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000004 	.word	0x20000004

080042e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042e4:	f7ff fff0 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	0a9b      	lsrs	r3, r3, #10
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4903      	ldr	r1, [pc, #12]	; (8004304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40023800 	.word	0x40023800
 8004304:	0800ece8 	.word	0x0800ece8

08004308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800430c:	f7ff ffdc 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	0b5b      	lsrs	r3, r3, #13
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4903      	ldr	r1, [pc, #12]	; (800432c <HAL_RCC_GetPCLK2Freq+0x24>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40023800 	.word	0x40023800
 800432c:	0800ece8 	.word	0x0800ece8

08004330 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d012      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004358:	4b69      	ldr	r3, [pc, #420]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4a68      	ldr	r2, [pc, #416]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004362:	6093      	str	r3, [r2, #8]
 8004364:	4b66      	ldr	r3, [pc, #408]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	4964      	ldr	r1, [pc, #400]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800437a:	2301      	movs	r3, #1
 800437c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d017      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800438a:	4b5d      	ldr	r3, [pc, #372]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004390:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004398:	4959      	ldr	r1, [pc, #356]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a8:	d101      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043aa:	2301      	movs	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043b6:	2301      	movs	r3, #1
 80043b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d017      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043c6:	4b4e      	ldr	r3, [pc, #312]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	494a      	ldr	r1, [pc, #296]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e4:	d101      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80043e6:	2301      	movs	r3, #1
 80043e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80043f2:	2301      	movs	r3, #1
 80043f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004402:	2301      	movs	r3, #1
 8004404:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 808b 	beq.w	800452a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004414:	4b3a      	ldr	r3, [pc, #232]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	4a39      	ldr	r2, [pc, #228]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441e:	6413      	str	r3, [r2, #64]	; 0x40
 8004420:	4b37      	ldr	r3, [pc, #220]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800442c:	4b35      	ldr	r3, [pc, #212]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a34      	ldr	r2, [pc, #208]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fe f95e 	bl	80026f8 <HAL_GetTick>
 800443c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004440:	f7fe f95a 	bl	80026f8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e38f      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004452:	4b2c      	ldr	r3, [pc, #176]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800445e:	4b28      	ldr	r3, [pc, #160]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004466:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d035      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	429a      	cmp	r2, r3
 800447a:	d02e      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800447c:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004484:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004486:	4b1e      	ldr	r3, [pc, #120]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	4a1d      	ldr	r2, [pc, #116]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004490:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004492:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004496:	4a1a      	ldr	r2, [pc, #104]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800449e:	4a18      	ldr	r2, [pc, #96]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044a4:	4b16      	ldr	r3, [pc, #88]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d114      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fe f922 	bl	80026f8 <HAL_GetTick>
 80044b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	e00a      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fe f91e 	bl	80026f8 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e351      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ce:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0ee      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e6:	d111      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044f6:	400b      	ands	r3, r1
 80044f8:	4901      	ldr	r1, [pc, #4]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
 80044fe:	e00b      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004500:	40023800 	.word	0x40023800
 8004504:	40007000 	.word	0x40007000
 8004508:	0ffffcff 	.word	0x0ffffcff
 800450c:	4bac      	ldr	r3, [pc, #688]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4aab      	ldr	r2, [pc, #684]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004512:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004516:	6093      	str	r3, [r2, #8]
 8004518:	4ba9      	ldr	r3, [pc, #676]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800451a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004524:	49a6      	ldr	r1, [pc, #664]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004526:	4313      	orrs	r3, r2
 8004528:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b00      	cmp	r3, #0
 8004534:	d010      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004536:	4ba2      	ldr	r3, [pc, #648]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800453c:	4aa0      	ldr	r2, [pc, #640]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004542:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004546:	4b9e      	ldr	r3, [pc, #632]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004548:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	499b      	ldr	r1, [pc, #620]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004564:	4b96      	ldr	r3, [pc, #600]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004572:	4993      	ldr	r1, [pc, #588]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004586:	4b8e      	ldr	r3, [pc, #568]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004594:	498a      	ldr	r1, [pc, #552]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045a8:	4b85      	ldr	r3, [pc, #532]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b6:	4982      	ldr	r1, [pc, #520]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045ca:	4b7d      	ldr	r3, [pc, #500]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	4979      	ldr	r1, [pc, #484]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ec:	4b74      	ldr	r3, [pc, #464]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f2:	f023 0203 	bic.w	r2, r3, #3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	4971      	ldr	r1, [pc, #452]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800460e:	4b6c      	ldr	r3, [pc, #432]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	f023 020c 	bic.w	r2, r3, #12
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461c:	4968      	ldr	r1, [pc, #416]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004630:	4b63      	ldr	r3, [pc, #396]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463e:	4960      	ldr	r1, [pc, #384]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004652:	4b5b      	ldr	r3, [pc, #364]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004658:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004660:	4957      	ldr	r1, [pc, #348]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004674:	4b52      	ldr	r3, [pc, #328]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	494f      	ldr	r1, [pc, #316]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004696:	4b4a      	ldr	r3, [pc, #296]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	4946      	ldr	r1, [pc, #280]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046b8:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c6:	493e      	ldr	r1, [pc, #248]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046da:	4b39      	ldr	r3, [pc, #228]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e8:	4935      	ldr	r1, [pc, #212]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046fc:	4b30      	ldr	r3, [pc, #192]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004702:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800470a:	492d      	ldr	r1, [pc, #180]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d011      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800471e:	4b28      	ldr	r3, [pc, #160]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800472c:	4924      	ldr	r1, [pc, #144]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800473c:	d101      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800473e:	2301      	movs	r3, #1
 8004740:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800474e:	2301      	movs	r3, #1
 8004750:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800475e:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004764:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476c:	4914      	ldr	r1, [pc, #80]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004780:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004790:	490b      	ldr	r1, [pc, #44]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00f      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b4:	4902      	ldr	r1, [pc, #8]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047bc:	e002      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80047be:	bf00      	nop
 80047c0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00b      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047d0:	4b8a      	ldr	r3, [pc, #552]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	4986      	ldr	r1, [pc, #536]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00b      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80047f4:	4b81      	ldr	r3, [pc, #516]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004804:	497d      	ldr	r1, [pc, #500]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d006      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80d6 	beq.w	80049cc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004820:	4b76      	ldr	r3, [pc, #472]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a75      	ldr	r2, [pc, #468]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004826:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800482a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482c:	f7fd ff64 	bl	80026f8 <HAL_GetTick>
 8004830:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004834:	f7fd ff60 	bl	80026f8 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b64      	cmp	r3, #100	; 0x64
 8004840:	d901      	bls.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e195      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004846:	4b6d      	ldr	r3, [pc, #436]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d021      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004862:	2b00      	cmp	r3, #0
 8004864:	d11d      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004866:	4b65      	ldr	r3, [pc, #404]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486c:	0c1b      	lsrs	r3, r3, #16
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004874:	4b61      	ldr	r3, [pc, #388]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800487a:	0e1b      	lsrs	r3, r3, #24
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	019a      	lsls	r2, r3, #6
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	041b      	lsls	r3, r3, #16
 800488c:	431a      	orrs	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	061b      	lsls	r3, r3, #24
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	071b      	lsls	r3, r3, #28
 800489a:	4958      	ldr	r1, [pc, #352]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d004      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b6:	d00a      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d02e      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048cc:	d129      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048ce:	4b4b      	ldr	r3, [pc, #300]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048dc:	4b47      	ldr	r3, [pc, #284]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e2:	0f1b      	lsrs	r3, r3, #28
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	019a      	lsls	r2, r3, #6
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	041b      	lsls	r3, r3, #16
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	061b      	lsls	r3, r3, #24
 80048fc:	431a      	orrs	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	071b      	lsls	r3, r3, #28
 8004902:	493e      	ldr	r1, [pc, #248]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800490a:	4b3c      	ldr	r3, [pc, #240]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004910:	f023 021f 	bic.w	r2, r3, #31
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	3b01      	subs	r3, #1
 800491a:	4938      	ldr	r1, [pc, #224]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d01d      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800492e:	4b33      	ldr	r3, [pc, #204]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004934:	0e1b      	lsrs	r3, r3, #24
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800493c:	4b2f      	ldr	r3, [pc, #188]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004942:	0f1b      	lsrs	r3, r3, #28
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	019a      	lsls	r2, r3, #6
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	041b      	lsls	r3, r3, #16
 8004956:	431a      	orrs	r2, r3
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	061b      	lsls	r3, r3, #24
 800495c:	431a      	orrs	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	071b      	lsls	r3, r3, #28
 8004962:	4926      	ldr	r1, [pc, #152]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d011      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	019a      	lsls	r2, r3, #6
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	041b      	lsls	r3, r3, #16
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	061b      	lsls	r3, r3, #24
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	071b      	lsls	r3, r3, #28
 8004992:	491a      	ldr	r1, [pc, #104]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800499a:	4b18      	ldr	r3, [pc, #96]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a17      	ldr	r2, [pc, #92]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a6:	f7fd fea7 	bl	80026f8 <HAL_GetTick>
 80049aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049ac:	e008      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049ae:	f7fd fea3 	bl	80026f8 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b64      	cmp	r3, #100	; 0x64
 80049ba:	d901      	bls.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e0d8      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049c0:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	f040 80ce 	bne.w	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049d4:	4b09      	ldr	r3, [pc, #36]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a08      	ldr	r2, [pc, #32]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e0:	f7fd fe8a 	bl	80026f8 <HAL_GetTick>
 80049e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049e6:	e00b      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049e8:	f7fd fe86 	bl	80026f8 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b64      	cmp	r3, #100	; 0x64
 80049f4:	d904      	bls.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e0bb      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80049fa:	bf00      	nop
 80049fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a00:	4b5e      	ldr	r3, [pc, #376]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a0c:	d0ec      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d02e      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d12a      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a36:	4b51      	ldr	r3, [pc, #324]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a44:	4b4d      	ldr	r3, [pc, #308]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	0f1b      	lsrs	r3, r3, #28
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	019a      	lsls	r2, r3, #6
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	041b      	lsls	r3, r3, #16
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	061b      	lsls	r3, r3, #24
 8004a64:	431a      	orrs	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	071b      	lsls	r3, r3, #28
 8004a6a:	4944      	ldr	r1, [pc, #272]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a72:	4b42      	ldr	r3, [pc, #264]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	3b01      	subs	r3, #1
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	493d      	ldr	r1, [pc, #244]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d022      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa0:	d11d      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004aa2:	4b36      	ldr	r3, [pc, #216]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa8:	0e1b      	lsrs	r3, r3, #24
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ab0:	4b32      	ldr	r3, [pc, #200]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	0f1b      	lsrs	r3, r3, #28
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	019a      	lsls	r2, r3, #6
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	041b      	lsls	r3, r3, #16
 8004aca:	431a      	orrs	r2, r3
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	061b      	lsls	r3, r3, #24
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	071b      	lsls	r3, r3, #28
 8004ad6:	4929      	ldr	r1, [pc, #164]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d028      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004aea:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af0:	0e1b      	lsrs	r3, r3, #24
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004af8:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	0c1b      	lsrs	r3, r3, #16
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	019a      	lsls	r2, r3, #6
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	041b      	lsls	r3, r3, #16
 8004b10:	431a      	orrs	r2, r3
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	061b      	lsls	r3, r3, #24
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	071b      	lsls	r3, r3, #28
 8004b1e:	4917      	ldr	r1, [pc, #92]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b26:	4b15      	ldr	r3, [pc, #84]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	4911      	ldr	r1, [pc, #68]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b3c:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a0e      	ldr	r2, [pc, #56]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b48:	f7fd fdd6 	bl	80026f8 <HAL_GetTick>
 8004b4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b50:	f7fd fdd2 	bl	80026f8 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	; 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e007      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6e:	d1ef      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800

08004b80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e09d      	b.n	8004cce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d108      	bne.n	8004bac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ba2:	d009      	beq.n	8004bb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	61da      	str	r2, [r3, #28]
 8004baa:	e005      	b.n	8004bb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fd f986 	bl	8001ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bf8:	d902      	bls.n	8004c00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	e002      	b.n	8004c06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c0e:	d007      	beq.n	8004c20 <HAL_SPI_Init+0xa0>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c18:	d002      	beq.n	8004c20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c62:	ea42 0103 	orr.w	r1, r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	0c1b      	lsrs	r3, r3, #16
 8004c7c:	f003 0204 	and.w	r2, r3, #4
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c9c:	ea42 0103 	orr.w	r1, r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b088      	sub	sp, #32
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_SPI_Transmit+0x22>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e158      	b.n	8004faa <HAL_SPI_Transmit+0x2d4>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d00:	f7fd fcfa 	bl	80026f8 <HAL_GetTick>
 8004d04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d002      	beq.n	8004d1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d16:	2302      	movs	r3, #2
 8004d18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d1a:	e13d      	b.n	8004f98 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <HAL_SPI_Transmit+0x52>
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d2c:	e134      	b.n	8004f98 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2203      	movs	r2, #3
 8004d32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	88fa      	ldrh	r2, [r7, #6]
 8004d46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	88fa      	ldrh	r2, [r7, #6]
 8004d4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d78:	d10f      	bne.n	8004d9a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da4:	2b40      	cmp	r3, #64	; 0x40
 8004da6:	d007      	beq.n	8004db8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dc0:	d94b      	bls.n	8004e5a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_Transmit+0xfa>
 8004dca:	8afb      	ldrh	r3, [r7, #22]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d13e      	bne.n	8004e4e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	881a      	ldrh	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	1c9a      	adds	r2, r3, #2
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004df4:	e02b      	b.n	8004e4e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d112      	bne.n	8004e2a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	881a      	ldrh	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	1c9a      	adds	r2, r3, #2
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e28:	e011      	b.n	8004e4e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e2a:	f7fd fc65 	bl	80026f8 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d803      	bhi.n	8004e42 <HAL_SPI_Transmit+0x16c>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e40:	d102      	bne.n	8004e48 <HAL_SPI_Transmit+0x172>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e4c:	e0a4      	b.n	8004f98 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1ce      	bne.n	8004df6 <HAL_SPI_Transmit+0x120>
 8004e58:	e07c      	b.n	8004f54 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_SPI_Transmit+0x192>
 8004e62:	8afb      	ldrh	r3, [r7, #22]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d170      	bne.n	8004f4a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d912      	bls.n	8004e98 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	881a      	ldrh	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	1c9a      	adds	r2, r3, #2
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b02      	subs	r3, #2
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e96:	e058      	b.n	8004f4a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	330c      	adds	r3, #12
 8004ea2:	7812      	ldrb	r2, [r2, #0]
 8004ea4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004ebe:	e044      	b.n	8004f4a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d12b      	bne.n	8004f26 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d912      	bls.n	8004efe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	881a      	ldrh	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	1c9a      	adds	r2, r3, #2
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b02      	subs	r3, #2
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004efc:	e025      	b.n	8004f4a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	330c      	adds	r3, #12
 8004f08:	7812      	ldrb	r2, [r2, #0]
 8004f0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f24:	e011      	b.n	8004f4a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f26:	f7fd fbe7 	bl	80026f8 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d803      	bhi.n	8004f3e <HAL_SPI_Transmit+0x268>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d102      	bne.n	8004f44 <HAL_SPI_Transmit+0x26e>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d102      	bne.n	8004f4a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f48:	e026      	b.n	8004f98 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1b5      	bne.n	8004ec0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fb5b 	bl	8005614 <SPI_EndRxTxTransaction>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f72:	2300      	movs	r3, #0
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e000      	b.n	8004f98 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004f96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b08a      	sub	sp, #40	; 0x28
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x26>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e1fb      	b.n	80053d0 <HAL_SPI_TransmitReceive+0x41e>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fe0:	f7fd fb8a 	bl	80026f8 <HAL_GetTick>
 8004fe4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004ff4:	887b      	ldrh	r3, [r7, #2]
 8004ff6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004ff8:	887b      	ldrh	r3, [r7, #2]
 8004ffa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ffc:	7efb      	ldrb	r3, [r7, #27]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d00e      	beq.n	8005020 <HAL_SPI_TransmitReceive+0x6e>
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005008:	d106      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d102      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x66>
 8005012:	7efb      	ldrb	r3, [r7, #27]
 8005014:	2b04      	cmp	r3, #4
 8005016:	d003      	beq.n	8005020 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005018:	2302      	movs	r3, #2
 800501a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800501e:	e1cd      	b.n	80053bc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <HAL_SPI_TransmitReceive+0x80>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <HAL_SPI_TransmitReceive+0x80>
 800502c:	887b      	ldrh	r3, [r7, #2]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d103      	bne.n	800503a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005038:	e1c0      	b.n	80053bc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b04      	cmp	r3, #4
 8005044:	d003      	beq.n	800504e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2205      	movs	r2, #5
 800504a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	887a      	ldrh	r2, [r7, #2]
 800505e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	887a      	ldrh	r2, [r7, #2]
 8005066:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	887a      	ldrh	r2, [r7, #2]
 8005074:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	887a      	ldrh	r2, [r7, #2]
 800507a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005090:	d802      	bhi.n	8005098 <HAL_SPI_TransmitReceive+0xe6>
 8005092:	8a3b      	ldrh	r3, [r7, #16]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d908      	bls.n	80050aa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050a6:	605a      	str	r2, [r3, #4]
 80050a8:	e007      	b.n	80050ba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d007      	beq.n	80050d8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050e0:	d97c      	bls.n	80051dc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <HAL_SPI_TransmitReceive+0x13e>
 80050ea:	8a7b      	ldrh	r3, [r7, #18]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d169      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	881a      	ldrh	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	1c9a      	adds	r2, r3, #2
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510a:	b29b      	uxth	r3, r3
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005114:	e056      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b02      	cmp	r3, #2
 8005122:	d11b      	bne.n	800515c <HAL_SPI_TransmitReceive+0x1aa>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d016      	beq.n	800515c <HAL_SPI_TransmitReceive+0x1aa>
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	2b01      	cmp	r3, #1
 8005132:	d113      	bne.n	800515c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	881a      	ldrh	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	1c9a      	adds	r2, r3, #2
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b01      	cmp	r3, #1
 8005168:	d11c      	bne.n	80051a4 <HAL_SPI_TransmitReceive+0x1f2>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d016      	beq.n	80051a4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	b292      	uxth	r2, r2
 8005182:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	1c9a      	adds	r2, r3, #2
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051a0:	2301      	movs	r3, #1
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051a4:	f7fd faa8 	bl	80026f8 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d807      	bhi.n	80051c4 <HAL_SPI_TransmitReceive+0x212>
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ba:	d003      	beq.n	80051c4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80051c2:	e0fb      	b.n	80053bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1a3      	bne.n	8005116 <HAL_SPI_TransmitReceive+0x164>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d19d      	bne.n	8005116 <HAL_SPI_TransmitReceive+0x164>
 80051da:	e0df      	b.n	800539c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_SPI_TransmitReceive+0x23a>
 80051e4:	8a7b      	ldrh	r3, [r7, #18]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	f040 80cb 	bne.w	8005382 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d912      	bls.n	800521c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	881a      	ldrh	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	1c9a      	adds	r2, r3, #2
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b02      	subs	r3, #2
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	87da      	strh	r2, [r3, #62]	; 0x3e
 800521a:	e0b2      	b.n	8005382 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	7812      	ldrb	r2, [r2, #0]
 8005228:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005238:	b29b      	uxth	r3, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005242:	e09e      	b.n	8005382 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b02      	cmp	r3, #2
 8005250:	d134      	bne.n	80052bc <HAL_SPI_TransmitReceive+0x30a>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d02f      	beq.n	80052bc <HAL_SPI_TransmitReceive+0x30a>
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	2b01      	cmp	r3, #1
 8005260:	d12c      	bne.n	80052bc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005266:	b29b      	uxth	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d912      	bls.n	8005292 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	881a      	ldrh	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	1c9a      	adds	r2, r3, #2
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b02      	subs	r3, #2
 800528a:	b29a      	uxth	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005290:	e012      	b.n	80052b8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	330c      	adds	r3, #12
 800529c:	7812      	ldrb	r2, [r2, #0]
 800529e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d148      	bne.n	800535c <HAL_SPI_TransmitReceive+0x3aa>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d042      	beq.n	800535c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d923      	bls.n	800532a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	b292      	uxth	r2, r2
 80052ee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	1c9a      	adds	r2, r3, #2
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b02      	subs	r3, #2
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d81f      	bhi.n	8005358 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	e016      	b.n	8005358 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f103 020c 	add.w	r2, r3, #12
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	7812      	ldrb	r2, [r2, #0]
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005358:	2301      	movs	r3, #1
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800535c:	f7fd f9cc 	bl	80026f8 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005368:	429a      	cmp	r2, r3
 800536a:	d803      	bhi.n	8005374 <HAL_SPI_TransmitReceive+0x3c2>
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	d102      	bne.n	800537a <HAL_SPI_TransmitReceive+0x3c8>
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	2b00      	cmp	r3, #0
 8005378:	d103      	bne.n	8005382 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005380:	e01c      	b.n	80053bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	f47f af5b 	bne.w	8005244 <HAL_SPI_TransmitReceive+0x292>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	f47f af54 	bne.w	8005244 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f937 	bl	8005614 <SPI_EndRxTxTransaction>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d006      	beq.n	80053ba <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	661a      	str	r2, [r3, #96]	; 0x60
 80053b8:	e000      	b.n	80053bc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80053ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80053cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3728      	adds	r7, #40	; 0x28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	4613      	mov	r3, r2
 80053e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053e8:	f7fd f986 	bl	80026f8 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	4413      	add	r3, r2
 80053f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053f8:	f7fd f97e 	bl	80026f8 <HAL_GetTick>
 80053fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053fe:	4b39      	ldr	r3, [pc, #228]	; (80054e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	015b      	lsls	r3, r3, #5
 8005404:	0d1b      	lsrs	r3, r3, #20
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	fb02 f303 	mul.w	r3, r2, r3
 800540c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800540e:	e054      	b.n	80054ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005416:	d050      	beq.n	80054ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005418:	f7fd f96e 	bl	80026f8 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	429a      	cmp	r2, r3
 8005426:	d902      	bls.n	800542e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d13d      	bne.n	80054aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800543c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005446:	d111      	bne.n	800546c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005450:	d004      	beq.n	800545c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545a:	d107      	bne.n	800546c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800546a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005474:	d10f      	bne.n	8005496 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005494:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e017      	b.n	80054da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4013      	ands	r3, r2
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	bf0c      	ite	eq
 80054ca:	2301      	moveq	r3, #1
 80054cc:	2300      	movne	r3, #0
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d19b      	bne.n	8005410 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3720      	adds	r7, #32
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20000004 	.word	0x20000004

080054e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	; 0x28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054fa:	f7fd f8fd 	bl	80026f8 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	1a9b      	subs	r3, r3, r2
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	4413      	add	r3, r2
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800550a:	f7fd f8f5 	bl	80026f8 <HAL_GetTick>
 800550e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	330c      	adds	r3, #12
 8005516:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005518:	4b3d      	ldr	r3, [pc, #244]	; (8005610 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	00da      	lsls	r2, r3, #3
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	0d1b      	lsrs	r3, r3, #20
 8005528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552a:	fb02 f303 	mul.w	r3, r2, r3
 800552e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005530:	e060      	b.n	80055f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005538:	d107      	bne.n	800554a <SPI_WaitFifoStateUntilTimeout+0x62>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005548:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d050      	beq.n	80055f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005552:	f7fd f8d1 	bl	80026f8 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555e:	429a      	cmp	r2, r3
 8005560:	d902      	bls.n	8005568 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	2b00      	cmp	r3, #0
 8005566:	d13d      	bne.n	80055e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005576:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005580:	d111      	bne.n	80055a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558a:	d004      	beq.n	8005596 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005594:	d107      	bne.n	80055a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ae:	d10f      	bne.n	80055d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e010      	b.n	8005606 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	4013      	ands	r3, r2
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	429a      	cmp	r2, r3
 8005602:	d196      	bne.n	8005532 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3728      	adds	r7, #40	; 0x28
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20000004 	.word	0x20000004

08005614 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af02      	add	r7, sp, #8
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2200      	movs	r2, #0
 8005628:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f7ff ff5b 	bl	80054e8 <SPI_WaitFifoStateUntilTimeout>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563c:	f043 0220 	orr.w	r2, r3, #32
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e046      	b.n	80056d6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005648:	4b25      	ldr	r3, [pc, #148]	; (80056e0 <SPI_EndRxTxTransaction+0xcc>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a25      	ldr	r2, [pc, #148]	; (80056e4 <SPI_EndRxTxTransaction+0xd0>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	0d5b      	lsrs	r3, r3, #21
 8005654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005658:	fb02 f303 	mul.w	r3, r2, r3
 800565c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005666:	d112      	bne.n	800568e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2200      	movs	r2, #0
 8005670:	2180      	movs	r1, #128	; 0x80
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f7ff feb0 	bl	80053d8 <SPI_WaitFlagStateUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d016      	beq.n	80056ac <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e023      	b.n	80056d6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	3b01      	subs	r3, #1
 8005698:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a4:	2b80      	cmp	r3, #128	; 0x80
 80056a6:	d0f2      	beq.n	800568e <SPI_EndRxTxTransaction+0x7a>
 80056a8:	e000      	b.n	80056ac <SPI_EndRxTxTransaction+0x98>
        break;
 80056aa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f7ff ff15 	bl	80054e8 <SPI_WaitFifoStateUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c8:	f043 0220 	orr.w	r2, r3, #32
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e000      	b.n	80056d6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000004 	.word	0x20000004
 80056e4:	165e9f81 	.word	0x165e9f81

080056e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e049      	b.n	800578e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d106      	bne.n	8005714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fc fe36 	bl	8002380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3304      	adds	r3, #4
 8005724:	4619      	mov	r1, r3
 8005726:	4610      	mov	r0, r2
 8005728:	f000 fac0 	bl	8005cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d001      	beq.n	80057b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e054      	b.n	800585a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a26      	ldr	r2, [pc, #152]	; (8005868 <HAL_TIM_Base_Start_IT+0xd0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d022      	beq.n	8005818 <HAL_TIM_Base_Start_IT+0x80>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057da:	d01d      	beq.n	8005818 <HAL_TIM_Base_Start_IT+0x80>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a22      	ldr	r2, [pc, #136]	; (800586c <HAL_TIM_Base_Start_IT+0xd4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d018      	beq.n	8005818 <HAL_TIM_Base_Start_IT+0x80>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a21      	ldr	r2, [pc, #132]	; (8005870 <HAL_TIM_Base_Start_IT+0xd8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d013      	beq.n	8005818 <HAL_TIM_Base_Start_IT+0x80>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1f      	ldr	r2, [pc, #124]	; (8005874 <HAL_TIM_Base_Start_IT+0xdc>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00e      	beq.n	8005818 <HAL_TIM_Base_Start_IT+0x80>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1e      	ldr	r2, [pc, #120]	; (8005878 <HAL_TIM_Base_Start_IT+0xe0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d009      	beq.n	8005818 <HAL_TIM_Base_Start_IT+0x80>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a1c      	ldr	r2, [pc, #112]	; (800587c <HAL_TIM_Base_Start_IT+0xe4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d004      	beq.n	8005818 <HAL_TIM_Base_Start_IT+0x80>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a1b      	ldr	r2, [pc, #108]	; (8005880 <HAL_TIM_Base_Start_IT+0xe8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d115      	bne.n	8005844 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	4b19      	ldr	r3, [pc, #100]	; (8005884 <HAL_TIM_Base_Start_IT+0xec>)
 8005820:	4013      	ands	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b06      	cmp	r3, #6
 8005828:	d015      	beq.n	8005856 <HAL_TIM_Base_Start_IT+0xbe>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005830:	d011      	beq.n	8005856 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0201 	orr.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005842:	e008      	b.n	8005856 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	e000      	b.n	8005858 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005856:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40010000 	.word	0x40010000
 800586c:	40000400 	.word	0x40000400
 8005870:	40000800 	.word	0x40000800
 8005874:	40000c00 	.word	0x40000c00
 8005878:	40010400 	.word	0x40010400
 800587c:	40014000 	.word	0x40014000
 8005880:	40001800 	.word	0x40001800
 8005884:	00010007 	.word	0x00010007

08005888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b02      	cmp	r3, #2
 800589c:	d122      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d11b      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0202 	mvn.w	r2, #2
 80058b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f9d0 	bl	8005c70 <HAL_TIM_IC_CaptureCallback>
 80058d0:	e005      	b.n	80058de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f9c2 	bl	8005c5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f9d3 	bl	8005c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d122      	bne.n	8005938 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d11b      	bne.n	8005938 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0204 	mvn.w	r2, #4
 8005908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2202      	movs	r2, #2
 800590e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f9a6 	bl	8005c70 <HAL_TIM_IC_CaptureCallback>
 8005924:	e005      	b.n	8005932 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f998 	bl	8005c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f9a9 	bl	8005c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b08      	cmp	r3, #8
 8005944:	d122      	bne.n	800598c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0308 	and.w	r3, r3, #8
 8005950:	2b08      	cmp	r3, #8
 8005952:	d11b      	bne.n	800598c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0208 	mvn.w	r2, #8
 800595c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2204      	movs	r2, #4
 8005962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f97c 	bl	8005c70 <HAL_TIM_IC_CaptureCallback>
 8005978:	e005      	b.n	8005986 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f96e 	bl	8005c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f97f 	bl	8005c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	2b10      	cmp	r3, #16
 8005998:	d122      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b10      	cmp	r3, #16
 80059a6:	d11b      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f06f 0210 	mvn.w	r2, #16
 80059b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2208      	movs	r2, #8
 80059b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f952 	bl	8005c70 <HAL_TIM_IC_CaptureCallback>
 80059cc:	e005      	b.n	80059da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f944 	bl	8005c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f955 	bl	8005c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d10e      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d107      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0201 	mvn.w	r2, #1
 8005a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fc fcf8 	bl	80023fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	d10e      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a24:	2b80      	cmp	r3, #128	; 0x80
 8005a26:	d107      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fb0c 	bl	8006050 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a46:	d10e      	bne.n	8005a66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a52:	2b80      	cmp	r3, #128	; 0x80
 8005a54:	d107      	bne.n	8005a66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 faff 	bl	8006064 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b40      	cmp	r3, #64	; 0x40
 8005a72:	d10e      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	d107      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f903 	bl	8005c98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f003 0320 	and.w	r3, r3, #32
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d10e      	bne.n	8005abe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d107      	bne.n	8005abe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f06f 0220 	mvn.w	r2, #32
 8005ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fabf 	bl	800603c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005abe:	bf00      	nop
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e0b4      	b.n	8005c4e <HAL_TIM_ConfigClockSource+0x186>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	4b56      	ldr	r3, [pc, #344]	; (8005c58 <HAL_TIM_ConfigClockSource+0x190>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b1c:	d03e      	beq.n	8005b9c <HAL_TIM_ConfigClockSource+0xd4>
 8005b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b22:	f200 8087 	bhi.w	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2a:	f000 8086 	beq.w	8005c3a <HAL_TIM_ConfigClockSource+0x172>
 8005b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b32:	d87f      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b34:	2b70      	cmp	r3, #112	; 0x70
 8005b36:	d01a      	beq.n	8005b6e <HAL_TIM_ConfigClockSource+0xa6>
 8005b38:	2b70      	cmp	r3, #112	; 0x70
 8005b3a:	d87b      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b3c:	2b60      	cmp	r3, #96	; 0x60
 8005b3e:	d050      	beq.n	8005be2 <HAL_TIM_ConfigClockSource+0x11a>
 8005b40:	2b60      	cmp	r3, #96	; 0x60
 8005b42:	d877      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b44:	2b50      	cmp	r3, #80	; 0x50
 8005b46:	d03c      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0xfa>
 8005b48:	2b50      	cmp	r3, #80	; 0x50
 8005b4a:	d873      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b4c:	2b40      	cmp	r3, #64	; 0x40
 8005b4e:	d058      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0x13a>
 8005b50:	2b40      	cmp	r3, #64	; 0x40
 8005b52:	d86f      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b54:	2b30      	cmp	r3, #48	; 0x30
 8005b56:	d064      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x15a>
 8005b58:	2b30      	cmp	r3, #48	; 0x30
 8005b5a:	d86b      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d060      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x15a>
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d867      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d05c      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x15a>
 8005b68:	2b10      	cmp	r3, #16
 8005b6a:	d05a      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x15a>
 8005b6c:	e062      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	6899      	ldr	r1, [r3, #8]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f000 f9af 	bl	8005ee0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	609a      	str	r2, [r3, #8]
      break;
 8005b9a:	e04f      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	6899      	ldr	r1, [r3, #8]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f000 f998 	bl	8005ee0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bbe:	609a      	str	r2, [r3, #8]
      break;
 8005bc0:	e03c      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	6859      	ldr	r1, [r3, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f000 f90c 	bl	8005dec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2150      	movs	r1, #80	; 0x50
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 f965 	bl	8005eaa <TIM_ITRx_SetConfig>
      break;
 8005be0:	e02c      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6859      	ldr	r1, [r3, #4]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f000 f92b 	bl	8005e4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2160      	movs	r1, #96	; 0x60
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 f955 	bl	8005eaa <TIM_ITRx_SetConfig>
      break;
 8005c00:	e01c      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6859      	ldr	r1, [r3, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f000 f8ec 	bl	8005dec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2140      	movs	r1, #64	; 0x40
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 f945 	bl	8005eaa <TIM_ITRx_SetConfig>
      break;
 8005c20:	e00c      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	f000 f93c 	bl	8005eaa <TIM_ITRx_SetConfig>
      break;
 8005c32:	e003      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	73fb      	strb	r3, [r7, #15]
      break;
 8005c38:	e000      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	fffeff88 	.word	0xfffeff88

08005c5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a40      	ldr	r2, [pc, #256]	; (8005dc0 <TIM_Base_SetConfig+0x114>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d013      	beq.n	8005cec <TIM_Base_SetConfig+0x40>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cca:	d00f      	beq.n	8005cec <TIM_Base_SetConfig+0x40>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a3d      	ldr	r2, [pc, #244]	; (8005dc4 <TIM_Base_SetConfig+0x118>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00b      	beq.n	8005cec <TIM_Base_SetConfig+0x40>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a3c      	ldr	r2, [pc, #240]	; (8005dc8 <TIM_Base_SetConfig+0x11c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d007      	beq.n	8005cec <TIM_Base_SetConfig+0x40>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a3b      	ldr	r2, [pc, #236]	; (8005dcc <TIM_Base_SetConfig+0x120>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_Base_SetConfig+0x40>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a3a      	ldr	r2, [pc, #232]	; (8005dd0 <TIM_Base_SetConfig+0x124>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d108      	bne.n	8005cfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a2f      	ldr	r2, [pc, #188]	; (8005dc0 <TIM_Base_SetConfig+0x114>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d02b      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0c:	d027      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a2c      	ldr	r2, [pc, #176]	; (8005dc4 <TIM_Base_SetConfig+0x118>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d023      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a2b      	ldr	r2, [pc, #172]	; (8005dc8 <TIM_Base_SetConfig+0x11c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d01f      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2a      	ldr	r2, [pc, #168]	; (8005dcc <TIM_Base_SetConfig+0x120>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d01b      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a29      	ldr	r2, [pc, #164]	; (8005dd0 <TIM_Base_SetConfig+0x124>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d017      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a28      	ldr	r2, [pc, #160]	; (8005dd4 <TIM_Base_SetConfig+0x128>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d013      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a27      	ldr	r2, [pc, #156]	; (8005dd8 <TIM_Base_SetConfig+0x12c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00f      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a26      	ldr	r2, [pc, #152]	; (8005ddc <TIM_Base_SetConfig+0x130>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00b      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a25      	ldr	r2, [pc, #148]	; (8005de0 <TIM_Base_SetConfig+0x134>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d007      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a24      	ldr	r2, [pc, #144]	; (8005de4 <TIM_Base_SetConfig+0x138>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d003      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a23      	ldr	r2, [pc, #140]	; (8005de8 <TIM_Base_SetConfig+0x13c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d108      	bne.n	8005d70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a0a      	ldr	r2, [pc, #40]	; (8005dc0 <TIM_Base_SetConfig+0x114>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_Base_SetConfig+0xf8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a0c      	ldr	r2, [pc, #48]	; (8005dd0 <TIM_Base_SetConfig+0x124>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d103      	bne.n	8005dac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	615a      	str	r2, [r3, #20]
}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40010000 	.word	0x40010000
 8005dc4:	40000400 	.word	0x40000400
 8005dc8:	40000800 	.word	0x40000800
 8005dcc:	40000c00 	.word	0x40000c00
 8005dd0:	40010400 	.word	0x40010400
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40014400 	.word	0x40014400
 8005ddc:	40014800 	.word	0x40014800
 8005de0:	40001800 	.word	0x40001800
 8005de4:	40001c00 	.word	0x40001c00
 8005de8:	40002000 	.word	0x40002000

08005dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f023 0201 	bic.w	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f023 030a 	bic.w	r3, r3, #10
 8005e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	621a      	str	r2, [r3, #32]
}
 8005e3e:	bf00      	nop
 8005e40:	371c      	adds	r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b087      	sub	sp, #28
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f023 0210 	bic.w	r2, r3, #16
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	031b      	lsls	r3, r3, #12
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	621a      	str	r2, [r3, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b085      	sub	sp, #20
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f043 0307 	orr.w	r3, r3, #7
 8005ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	609a      	str	r2, [r3, #8]
}
 8005ed4:	bf00      	nop
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	021a      	lsls	r2, r3, #8
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	609a      	str	r2, [r3, #8]
}
 8005f14:	bf00      	nop
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e06d      	b.n	8006014 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a30      	ldr	r2, [pc, #192]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d004      	beq.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a2f      	ldr	r2, [pc, #188]	; (8006024 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d108      	bne.n	8005f7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a20      	ldr	r2, [pc, #128]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d022      	beq.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005faa:	d01d      	beq.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1d      	ldr	r2, [pc, #116]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d018      	beq.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1c      	ldr	r2, [pc, #112]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d013      	beq.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1a      	ldr	r2, [pc, #104]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00e      	beq.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a15      	ldr	r2, [pc, #84]	; (8006024 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d009      	beq.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a16      	ldr	r2, [pc, #88]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a15      	ldr	r2, [pc, #84]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d10c      	bne.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	40010000 	.word	0x40010000
 8006024:	40010400 	.word	0x40010400
 8006028:	40000400 	.word	0x40000400
 800602c:	40000800 	.word	0x40000800
 8006030:	40000c00 	.word	0x40000c00
 8006034:	40014000 	.word	0x40014000
 8006038:	40001800 	.word	0x40001800

0800603c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e040      	b.n	800610c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fc fa10 	bl	80024c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2224      	movs	r2, #36	; 0x24
 80060a4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fb92 	bl	80067e0 <UART_SetConfig>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e022      	b.n	800610c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fdea 	bl	8006ca8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0201 	orr.w	r2, r2, #1
 8006102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fe71 	bl	8006dec <UART_CheckIdleState>
 800610a:	4603      	mov	r3, r0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006114:	b480      	push	{r7}
 8006116:	b08b      	sub	sp, #44	; 0x2c
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	4613      	mov	r3, r2
 8006120:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006126:	2b20      	cmp	r3, #32
 8006128:	d147      	bne.n	80061ba <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_UART_Transmit_IT+0x22>
 8006130:	88fb      	ldrh	r3, [r7, #6]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e040      	b.n	80061bc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	88fa      	ldrh	r2, [r7, #6]
 8006144:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	88fa      	ldrh	r2, [r7, #6]
 800614c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2221      	movs	r2, #33	; 0x21
 8006162:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616c:	d107      	bne.n	800617e <HAL_UART_Transmit_IT+0x6a>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d103      	bne.n	800617e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4a13      	ldr	r2, [pc, #76]	; (80061c8 <HAL_UART_Transmit_IT+0xb4>)
 800617a:	66da      	str	r2, [r3, #108]	; 0x6c
 800617c:	e002      	b.n	8006184 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4a12      	ldr	r2, [pc, #72]	; (80061cc <HAL_UART_Transmit_IT+0xb8>)
 8006182:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	613b      	str	r3, [r7, #16]
   return(result);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	623b      	str	r3, [r7, #32]
 80061a4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	69f9      	ldr	r1, [r7, #28]
 80061a8:	6a3a      	ldr	r2, [r7, #32]
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e6      	bne.n	8006184 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	e000      	b.n	80061bc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80061ba:	2302      	movs	r3, #2
  }
}
 80061bc:	4618      	mov	r0, r3
 80061be:	372c      	adds	r7, #44	; 0x2c
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	080071bd 	.word	0x080071bd
 80061cc:	08007107 	.word	0x08007107

080061d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b0ba      	sub	sp, #232	; 0xe8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80061fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80061fe:	4013      	ands	r3, r2
 8006200:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d115      	bne.n	8006238 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800620c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00f      	beq.n	8006238 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d009      	beq.n	8006238 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 82ac 	beq.w	8006786 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	4798      	blx	r3
      }
      return;
 8006236:	e2a6      	b.n	8006786 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006238:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 8117 	beq.w	8006470 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800624e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006252:	4b85      	ldr	r3, [pc, #532]	; (8006468 <HAL_UART_IRQHandler+0x298>)
 8006254:	4013      	ands	r3, r2
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 810a 	beq.w	8006470 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800625c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	d011      	beq.n	800628c <HAL_UART_IRQHandler+0xbc>
 8006268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00b      	beq.n	800628c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2201      	movs	r2, #1
 800627a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006282:	f043 0201 	orr.w	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800628c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d011      	beq.n	80062bc <HAL_UART_IRQHandler+0xec>
 8006298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00b      	beq.n	80062bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2202      	movs	r2, #2
 80062aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062b2:	f043 0204 	orr.w	r2, r3, #4
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d011      	beq.n	80062ec <HAL_UART_IRQHandler+0x11c>
 80062c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00b      	beq.n	80062ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2204      	movs	r2, #4
 80062da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062e2:	f043 0202 	orr.w	r2, r3, #2
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d017      	beq.n	8006328 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d105      	bne.n	8006310 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006308:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00b      	beq.n	8006328 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2208      	movs	r2, #8
 8006316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800631e:	f043 0208 	orr.w	r2, r3, #8
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006330:	2b00      	cmp	r3, #0
 8006332:	d012      	beq.n	800635a <HAL_UART_IRQHandler+0x18a>
 8006334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006338:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00c      	beq.n	800635a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006348:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006350:	f043 0220 	orr.w	r2, r3, #32
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 8212 	beq.w	800678a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00d      	beq.n	800638e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b00      	cmp	r3, #0
 800637c:	d007      	beq.n	800638e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006394:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a2:	2b40      	cmp	r3, #64	; 0x40
 80063a4:	d005      	beq.n	80063b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d04f      	beq.n	8006452 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fe2d 	bl	8007012 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c2:	2b40      	cmp	r3, #64	; 0x40
 80063c4:	d141      	bne.n	800644a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3308      	adds	r3, #8
 80063cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3308      	adds	r3, #8
 80063ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80063f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80063f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80063fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800640a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1d9      	bne.n	80063c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006416:	2b00      	cmp	r3, #0
 8006418:	d013      	beq.n	8006442 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800641e:	4a13      	ldr	r2, [pc, #76]	; (800646c <HAL_UART_IRQHandler+0x29c>)
 8006420:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006426:	4618      	mov	r0, r3
 8006428:	f7fc fe5a 	bl	80030e0 <HAL_DMA_Abort_IT>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d017      	beq.n	8006462 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800643c:	4610      	mov	r0, r2
 800643e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006440:	e00f      	b.n	8006462 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f9ac 	bl	80067a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006448:	e00b      	b.n	8006462 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f9a8 	bl	80067a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006450:	e007      	b.n	8006462 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f9a4 	bl	80067a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006460:	e193      	b.n	800678a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006462:	bf00      	nop
    return;
 8006464:	e191      	b.n	800678a <HAL_UART_IRQHandler+0x5ba>
 8006466:	bf00      	nop
 8006468:	04000120 	.word	0x04000120
 800646c:	080070db 	.word	0x080070db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006474:	2b01      	cmp	r3, #1
 8006476:	f040 814c 	bne.w	8006712 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800647a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647e:	f003 0310 	and.w	r3, r3, #16
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 8145 	beq.w	8006712 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800648c:	f003 0310 	and.w	r3, r3, #16
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 813e 	beq.w	8006712 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2210      	movs	r2, #16
 800649c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a8:	2b40      	cmp	r3, #64	; 0x40
 80064aa:	f040 80b6 	bne.w	800661a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 8165 	beq.w	800678e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064ce:	429a      	cmp	r2, r3
 80064d0:	f080 815d 	bcs.w	800678e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e8:	f000 8086 	beq.w	80065f8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800651a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006522:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800652e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1da      	bne.n	80064ec <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3308      	adds	r3, #8
 800653c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006546:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006548:	f023 0301 	bic.w	r3, r3, #1
 800654c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3308      	adds	r3, #8
 8006556:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800655a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800655e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006560:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006562:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800656c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e1      	bne.n	8006536 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3308      	adds	r3, #8
 8006578:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3308      	adds	r3, #8
 8006592:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006596:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006598:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800659c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800659e:	e841 2300 	strex	r3, r2, [r1]
 80065a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1e3      	bne.n	8006572 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2220      	movs	r2, #32
 80065ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065c8:	f023 0310 	bic.w	r3, r3, #16
 80065cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065da:	65bb      	str	r3, [r7, #88]	; 0x58
 80065dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e4      	bne.n	80065b8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fc fd04 	bl	8003000 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800660a:	b29b      	uxth	r3, r3
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	b29b      	uxth	r3, r3
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f8ce 	bl	80067b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006618:	e0b9      	b.n	800678e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006626:	b29b      	uxth	r3, r3
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 80ab 	beq.w	8006792 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800663c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 80a6 	beq.w	8006792 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664e:	e853 3f00 	ldrex	r3, [r3]
 8006652:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006656:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800665a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006668:	647b      	str	r3, [r7, #68]	; 0x44
 800666a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800666e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e4      	bne.n	8006646 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3308      	adds	r3, #8
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	623b      	str	r3, [r7, #32]
   return(result);
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	f023 0301 	bic.w	r3, r3, #1
 8006692:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3308      	adds	r3, #8
 800669c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066a0:	633a      	str	r2, [r7, #48]	; 0x30
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e3      	bne.n	800667c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f023 0310 	bic.w	r3, r3, #16
 80066dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066ea:	61fb      	str	r3, [r7, #28]
 80066ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	69b9      	ldr	r1, [r7, #24]
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	617b      	str	r3, [r7, #20]
   return(result);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e4      	bne.n	80066c8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2202      	movs	r2, #2
 8006702:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006704:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006708:	4619      	mov	r1, r3
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f852 	bl	80067b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006710:	e03f      	b.n	8006792 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00e      	beq.n	800673c <HAL_UART_IRQHandler+0x56c>
 800671e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d008      	beq.n	800673c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006732:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f849 	bl	80067cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800673a:	e02d      	b.n	8006798 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800673c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00e      	beq.n	8006766 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800674c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006750:	2b00      	cmp	r3, #0
 8006752:	d008      	beq.n	8006766 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01c      	beq.n	8006796 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	4798      	blx	r3
    }
    return;
 8006764:	e017      	b.n	8006796 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	d012      	beq.n	8006798 <HAL_UART_IRQHandler+0x5c8>
 8006772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00c      	beq.n	8006798 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fd7c 	bl	800727c <UART_EndTransmit_IT>
    return;
 8006784:	e008      	b.n	8006798 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006786:	bf00      	nop
 8006788:	e006      	b.n	8006798 <HAL_UART_IRQHandler+0x5c8>
    return;
 800678a:	bf00      	nop
 800678c:	e004      	b.n	8006798 <HAL_UART_IRQHandler+0x5c8>
      return;
 800678e:	bf00      	nop
 8006790:	e002      	b.n	8006798 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006792:	bf00      	nop
 8006794:	e000      	b.n	8006798 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006796:	bf00      	nop
  }

}
 8006798:	37e8      	adds	r7, #232	; 0xe8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop

080067a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	431a      	orrs	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	4ba6      	ldr	r3, [pc, #664]	; (8006aa4 <UART_SetConfig+0x2c4>)
 800680c:	4013      	ands	r3, r2
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	6979      	ldr	r1, [r7, #20]
 8006814:	430b      	orrs	r3, r1
 8006816:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	430a      	orrs	r2, r1
 8006850:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a94      	ldr	r2, [pc, #592]	; (8006aa8 <UART_SetConfig+0x2c8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d120      	bne.n	800689e <UART_SetConfig+0xbe>
 800685c:	4b93      	ldr	r3, [pc, #588]	; (8006aac <UART_SetConfig+0x2cc>)
 800685e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	2b03      	cmp	r3, #3
 8006868:	d816      	bhi.n	8006898 <UART_SetConfig+0xb8>
 800686a:	a201      	add	r2, pc, #4	; (adr r2, 8006870 <UART_SetConfig+0x90>)
 800686c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006870:	08006881 	.word	0x08006881
 8006874:	0800688d 	.word	0x0800688d
 8006878:	08006887 	.word	0x08006887
 800687c:	08006893 	.word	0x08006893
 8006880:	2301      	movs	r3, #1
 8006882:	77fb      	strb	r3, [r7, #31]
 8006884:	e150      	b.n	8006b28 <UART_SetConfig+0x348>
 8006886:	2302      	movs	r3, #2
 8006888:	77fb      	strb	r3, [r7, #31]
 800688a:	e14d      	b.n	8006b28 <UART_SetConfig+0x348>
 800688c:	2304      	movs	r3, #4
 800688e:	77fb      	strb	r3, [r7, #31]
 8006890:	e14a      	b.n	8006b28 <UART_SetConfig+0x348>
 8006892:	2308      	movs	r3, #8
 8006894:	77fb      	strb	r3, [r7, #31]
 8006896:	e147      	b.n	8006b28 <UART_SetConfig+0x348>
 8006898:	2310      	movs	r3, #16
 800689a:	77fb      	strb	r3, [r7, #31]
 800689c:	e144      	b.n	8006b28 <UART_SetConfig+0x348>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a83      	ldr	r2, [pc, #524]	; (8006ab0 <UART_SetConfig+0x2d0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d132      	bne.n	800690e <UART_SetConfig+0x12e>
 80068a8:	4b80      	ldr	r3, [pc, #512]	; (8006aac <UART_SetConfig+0x2cc>)
 80068aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ae:	f003 030c 	and.w	r3, r3, #12
 80068b2:	2b0c      	cmp	r3, #12
 80068b4:	d828      	bhi.n	8006908 <UART_SetConfig+0x128>
 80068b6:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <UART_SetConfig+0xdc>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	080068f1 	.word	0x080068f1
 80068c0:	08006909 	.word	0x08006909
 80068c4:	08006909 	.word	0x08006909
 80068c8:	08006909 	.word	0x08006909
 80068cc:	080068fd 	.word	0x080068fd
 80068d0:	08006909 	.word	0x08006909
 80068d4:	08006909 	.word	0x08006909
 80068d8:	08006909 	.word	0x08006909
 80068dc:	080068f7 	.word	0x080068f7
 80068e0:	08006909 	.word	0x08006909
 80068e4:	08006909 	.word	0x08006909
 80068e8:	08006909 	.word	0x08006909
 80068ec:	08006903 	.word	0x08006903
 80068f0:	2300      	movs	r3, #0
 80068f2:	77fb      	strb	r3, [r7, #31]
 80068f4:	e118      	b.n	8006b28 <UART_SetConfig+0x348>
 80068f6:	2302      	movs	r3, #2
 80068f8:	77fb      	strb	r3, [r7, #31]
 80068fa:	e115      	b.n	8006b28 <UART_SetConfig+0x348>
 80068fc:	2304      	movs	r3, #4
 80068fe:	77fb      	strb	r3, [r7, #31]
 8006900:	e112      	b.n	8006b28 <UART_SetConfig+0x348>
 8006902:	2308      	movs	r3, #8
 8006904:	77fb      	strb	r3, [r7, #31]
 8006906:	e10f      	b.n	8006b28 <UART_SetConfig+0x348>
 8006908:	2310      	movs	r3, #16
 800690a:	77fb      	strb	r3, [r7, #31]
 800690c:	e10c      	b.n	8006b28 <UART_SetConfig+0x348>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a68      	ldr	r2, [pc, #416]	; (8006ab4 <UART_SetConfig+0x2d4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d120      	bne.n	800695a <UART_SetConfig+0x17a>
 8006918:	4b64      	ldr	r3, [pc, #400]	; (8006aac <UART_SetConfig+0x2cc>)
 800691a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006922:	2b30      	cmp	r3, #48	; 0x30
 8006924:	d013      	beq.n	800694e <UART_SetConfig+0x16e>
 8006926:	2b30      	cmp	r3, #48	; 0x30
 8006928:	d814      	bhi.n	8006954 <UART_SetConfig+0x174>
 800692a:	2b20      	cmp	r3, #32
 800692c:	d009      	beq.n	8006942 <UART_SetConfig+0x162>
 800692e:	2b20      	cmp	r3, #32
 8006930:	d810      	bhi.n	8006954 <UART_SetConfig+0x174>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <UART_SetConfig+0x15c>
 8006936:	2b10      	cmp	r3, #16
 8006938:	d006      	beq.n	8006948 <UART_SetConfig+0x168>
 800693a:	e00b      	b.n	8006954 <UART_SetConfig+0x174>
 800693c:	2300      	movs	r3, #0
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e0f2      	b.n	8006b28 <UART_SetConfig+0x348>
 8006942:	2302      	movs	r3, #2
 8006944:	77fb      	strb	r3, [r7, #31]
 8006946:	e0ef      	b.n	8006b28 <UART_SetConfig+0x348>
 8006948:	2304      	movs	r3, #4
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e0ec      	b.n	8006b28 <UART_SetConfig+0x348>
 800694e:	2308      	movs	r3, #8
 8006950:	77fb      	strb	r3, [r7, #31]
 8006952:	e0e9      	b.n	8006b28 <UART_SetConfig+0x348>
 8006954:	2310      	movs	r3, #16
 8006956:	77fb      	strb	r3, [r7, #31]
 8006958:	e0e6      	b.n	8006b28 <UART_SetConfig+0x348>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a56      	ldr	r2, [pc, #344]	; (8006ab8 <UART_SetConfig+0x2d8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d120      	bne.n	80069a6 <UART_SetConfig+0x1c6>
 8006964:	4b51      	ldr	r3, [pc, #324]	; (8006aac <UART_SetConfig+0x2cc>)
 8006966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800696e:	2bc0      	cmp	r3, #192	; 0xc0
 8006970:	d013      	beq.n	800699a <UART_SetConfig+0x1ba>
 8006972:	2bc0      	cmp	r3, #192	; 0xc0
 8006974:	d814      	bhi.n	80069a0 <UART_SetConfig+0x1c0>
 8006976:	2b80      	cmp	r3, #128	; 0x80
 8006978:	d009      	beq.n	800698e <UART_SetConfig+0x1ae>
 800697a:	2b80      	cmp	r3, #128	; 0x80
 800697c:	d810      	bhi.n	80069a0 <UART_SetConfig+0x1c0>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <UART_SetConfig+0x1a8>
 8006982:	2b40      	cmp	r3, #64	; 0x40
 8006984:	d006      	beq.n	8006994 <UART_SetConfig+0x1b4>
 8006986:	e00b      	b.n	80069a0 <UART_SetConfig+0x1c0>
 8006988:	2300      	movs	r3, #0
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	e0cc      	b.n	8006b28 <UART_SetConfig+0x348>
 800698e:	2302      	movs	r3, #2
 8006990:	77fb      	strb	r3, [r7, #31]
 8006992:	e0c9      	b.n	8006b28 <UART_SetConfig+0x348>
 8006994:	2304      	movs	r3, #4
 8006996:	77fb      	strb	r3, [r7, #31]
 8006998:	e0c6      	b.n	8006b28 <UART_SetConfig+0x348>
 800699a:	2308      	movs	r3, #8
 800699c:	77fb      	strb	r3, [r7, #31]
 800699e:	e0c3      	b.n	8006b28 <UART_SetConfig+0x348>
 80069a0:	2310      	movs	r3, #16
 80069a2:	77fb      	strb	r3, [r7, #31]
 80069a4:	e0c0      	b.n	8006b28 <UART_SetConfig+0x348>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a44      	ldr	r2, [pc, #272]	; (8006abc <UART_SetConfig+0x2dc>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d125      	bne.n	80069fc <UART_SetConfig+0x21c>
 80069b0:	4b3e      	ldr	r3, [pc, #248]	; (8006aac <UART_SetConfig+0x2cc>)
 80069b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069be:	d017      	beq.n	80069f0 <UART_SetConfig+0x210>
 80069c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069c4:	d817      	bhi.n	80069f6 <UART_SetConfig+0x216>
 80069c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ca:	d00b      	beq.n	80069e4 <UART_SetConfig+0x204>
 80069cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d0:	d811      	bhi.n	80069f6 <UART_SetConfig+0x216>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <UART_SetConfig+0x1fe>
 80069d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069da:	d006      	beq.n	80069ea <UART_SetConfig+0x20a>
 80069dc:	e00b      	b.n	80069f6 <UART_SetConfig+0x216>
 80069de:	2300      	movs	r3, #0
 80069e0:	77fb      	strb	r3, [r7, #31]
 80069e2:	e0a1      	b.n	8006b28 <UART_SetConfig+0x348>
 80069e4:	2302      	movs	r3, #2
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e09e      	b.n	8006b28 <UART_SetConfig+0x348>
 80069ea:	2304      	movs	r3, #4
 80069ec:	77fb      	strb	r3, [r7, #31]
 80069ee:	e09b      	b.n	8006b28 <UART_SetConfig+0x348>
 80069f0:	2308      	movs	r3, #8
 80069f2:	77fb      	strb	r3, [r7, #31]
 80069f4:	e098      	b.n	8006b28 <UART_SetConfig+0x348>
 80069f6:	2310      	movs	r3, #16
 80069f8:	77fb      	strb	r3, [r7, #31]
 80069fa:	e095      	b.n	8006b28 <UART_SetConfig+0x348>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a2f      	ldr	r2, [pc, #188]	; (8006ac0 <UART_SetConfig+0x2e0>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d125      	bne.n	8006a52 <UART_SetConfig+0x272>
 8006a06:	4b29      	ldr	r3, [pc, #164]	; (8006aac <UART_SetConfig+0x2cc>)
 8006a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a14:	d017      	beq.n	8006a46 <UART_SetConfig+0x266>
 8006a16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a1a:	d817      	bhi.n	8006a4c <UART_SetConfig+0x26c>
 8006a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a20:	d00b      	beq.n	8006a3a <UART_SetConfig+0x25a>
 8006a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a26:	d811      	bhi.n	8006a4c <UART_SetConfig+0x26c>
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <UART_SetConfig+0x254>
 8006a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a30:	d006      	beq.n	8006a40 <UART_SetConfig+0x260>
 8006a32:	e00b      	b.n	8006a4c <UART_SetConfig+0x26c>
 8006a34:	2301      	movs	r3, #1
 8006a36:	77fb      	strb	r3, [r7, #31]
 8006a38:	e076      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	77fb      	strb	r3, [r7, #31]
 8006a3e:	e073      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a40:	2304      	movs	r3, #4
 8006a42:	77fb      	strb	r3, [r7, #31]
 8006a44:	e070      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a46:	2308      	movs	r3, #8
 8006a48:	77fb      	strb	r3, [r7, #31]
 8006a4a:	e06d      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a4c:	2310      	movs	r3, #16
 8006a4e:	77fb      	strb	r3, [r7, #31]
 8006a50:	e06a      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a1b      	ldr	r2, [pc, #108]	; (8006ac4 <UART_SetConfig+0x2e4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d138      	bne.n	8006ace <UART_SetConfig+0x2ee>
 8006a5c:	4b13      	ldr	r3, [pc, #76]	; (8006aac <UART_SetConfig+0x2cc>)
 8006a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a62:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a6a:	d017      	beq.n	8006a9c <UART_SetConfig+0x2bc>
 8006a6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a70:	d82a      	bhi.n	8006ac8 <UART_SetConfig+0x2e8>
 8006a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a76:	d00b      	beq.n	8006a90 <UART_SetConfig+0x2b0>
 8006a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a7c:	d824      	bhi.n	8006ac8 <UART_SetConfig+0x2e8>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <UART_SetConfig+0x2aa>
 8006a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a86:	d006      	beq.n	8006a96 <UART_SetConfig+0x2b6>
 8006a88:	e01e      	b.n	8006ac8 <UART_SetConfig+0x2e8>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	77fb      	strb	r3, [r7, #31]
 8006a8e:	e04b      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a90:	2302      	movs	r3, #2
 8006a92:	77fb      	strb	r3, [r7, #31]
 8006a94:	e048      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a96:	2304      	movs	r3, #4
 8006a98:	77fb      	strb	r3, [r7, #31]
 8006a9a:	e045      	b.n	8006b28 <UART_SetConfig+0x348>
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	77fb      	strb	r3, [r7, #31]
 8006aa0:	e042      	b.n	8006b28 <UART_SetConfig+0x348>
 8006aa2:	bf00      	nop
 8006aa4:	efff69f3 	.word	0xefff69f3
 8006aa8:	40011000 	.word	0x40011000
 8006aac:	40023800 	.word	0x40023800
 8006ab0:	40004400 	.word	0x40004400
 8006ab4:	40004800 	.word	0x40004800
 8006ab8:	40004c00 	.word	0x40004c00
 8006abc:	40005000 	.word	0x40005000
 8006ac0:	40011400 	.word	0x40011400
 8006ac4:	40007800 	.word	0x40007800
 8006ac8:	2310      	movs	r3, #16
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e02c      	b.n	8006b28 <UART_SetConfig+0x348>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a72      	ldr	r2, [pc, #456]	; (8006c9c <UART_SetConfig+0x4bc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d125      	bne.n	8006b24 <UART_SetConfig+0x344>
 8006ad8:	4b71      	ldr	r3, [pc, #452]	; (8006ca0 <UART_SetConfig+0x4c0>)
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ade:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ae2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ae6:	d017      	beq.n	8006b18 <UART_SetConfig+0x338>
 8006ae8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006aec:	d817      	bhi.n	8006b1e <UART_SetConfig+0x33e>
 8006aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af2:	d00b      	beq.n	8006b0c <UART_SetConfig+0x32c>
 8006af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af8:	d811      	bhi.n	8006b1e <UART_SetConfig+0x33e>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <UART_SetConfig+0x326>
 8006afe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b02:	d006      	beq.n	8006b12 <UART_SetConfig+0x332>
 8006b04:	e00b      	b.n	8006b1e <UART_SetConfig+0x33e>
 8006b06:	2300      	movs	r3, #0
 8006b08:	77fb      	strb	r3, [r7, #31]
 8006b0a:	e00d      	b.n	8006b28 <UART_SetConfig+0x348>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	77fb      	strb	r3, [r7, #31]
 8006b10:	e00a      	b.n	8006b28 <UART_SetConfig+0x348>
 8006b12:	2304      	movs	r3, #4
 8006b14:	77fb      	strb	r3, [r7, #31]
 8006b16:	e007      	b.n	8006b28 <UART_SetConfig+0x348>
 8006b18:	2308      	movs	r3, #8
 8006b1a:	77fb      	strb	r3, [r7, #31]
 8006b1c:	e004      	b.n	8006b28 <UART_SetConfig+0x348>
 8006b1e:	2310      	movs	r3, #16
 8006b20:	77fb      	strb	r3, [r7, #31]
 8006b22:	e001      	b.n	8006b28 <UART_SetConfig+0x348>
 8006b24:	2310      	movs	r3, #16
 8006b26:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b30:	d15b      	bne.n	8006bea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006b32:	7ffb      	ldrb	r3, [r7, #31]
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d828      	bhi.n	8006b8a <UART_SetConfig+0x3aa>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0x360>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b65 	.word	0x08006b65
 8006b44:	08006b6d 	.word	0x08006b6d
 8006b48:	08006b75 	.word	0x08006b75
 8006b4c:	08006b8b 	.word	0x08006b8b
 8006b50:	08006b7b 	.word	0x08006b7b
 8006b54:	08006b8b 	.word	0x08006b8b
 8006b58:	08006b8b 	.word	0x08006b8b
 8006b5c:	08006b8b 	.word	0x08006b8b
 8006b60:	08006b83 	.word	0x08006b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b64:	f7fd fbbc 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8006b68:	61b8      	str	r0, [r7, #24]
        break;
 8006b6a:	e013      	b.n	8006b94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b6c:	f7fd fbcc 	bl	8004308 <HAL_RCC_GetPCLK2Freq>
 8006b70:	61b8      	str	r0, [r7, #24]
        break;
 8006b72:	e00f      	b.n	8006b94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b74:	4b4b      	ldr	r3, [pc, #300]	; (8006ca4 <UART_SetConfig+0x4c4>)
 8006b76:	61bb      	str	r3, [r7, #24]
        break;
 8006b78:	e00c      	b.n	8006b94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b7a:	f7fd faa1 	bl	80040c0 <HAL_RCC_GetSysClockFreq>
 8006b7e:	61b8      	str	r0, [r7, #24]
        break;
 8006b80:	e008      	b.n	8006b94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b86:	61bb      	str	r3, [r7, #24]
        break;
 8006b88:	e004      	b.n	8006b94 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	77bb      	strb	r3, [r7, #30]
        break;
 8006b92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d074      	beq.n	8006c84 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	005a      	lsls	r2, r3, #1
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	441a      	add	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	2b0f      	cmp	r3, #15
 8006bb4:	d916      	bls.n	8006be4 <UART_SetConfig+0x404>
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bbc:	d212      	bcs.n	8006be4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	f023 030f 	bic.w	r3, r3, #15
 8006bc6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	085b      	lsrs	r3, r3, #1
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	89fb      	ldrh	r3, [r7, #14]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	89fa      	ldrh	r2, [r7, #14]
 8006be0:	60da      	str	r2, [r3, #12]
 8006be2:	e04f      	b.n	8006c84 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	77bb      	strb	r3, [r7, #30]
 8006be8:	e04c      	b.n	8006c84 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bea:	7ffb      	ldrb	r3, [r7, #31]
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d828      	bhi.n	8006c42 <UART_SetConfig+0x462>
 8006bf0:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <UART_SetConfig+0x418>)
 8006bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf6:	bf00      	nop
 8006bf8:	08006c1d 	.word	0x08006c1d
 8006bfc:	08006c25 	.word	0x08006c25
 8006c00:	08006c2d 	.word	0x08006c2d
 8006c04:	08006c43 	.word	0x08006c43
 8006c08:	08006c33 	.word	0x08006c33
 8006c0c:	08006c43 	.word	0x08006c43
 8006c10:	08006c43 	.word	0x08006c43
 8006c14:	08006c43 	.word	0x08006c43
 8006c18:	08006c3b 	.word	0x08006c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c1c:	f7fd fb60 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8006c20:	61b8      	str	r0, [r7, #24]
        break;
 8006c22:	e013      	b.n	8006c4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c24:	f7fd fb70 	bl	8004308 <HAL_RCC_GetPCLK2Freq>
 8006c28:	61b8      	str	r0, [r7, #24]
        break;
 8006c2a:	e00f      	b.n	8006c4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ca4 <UART_SetConfig+0x4c4>)
 8006c2e:	61bb      	str	r3, [r7, #24]
        break;
 8006c30:	e00c      	b.n	8006c4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c32:	f7fd fa45 	bl	80040c0 <HAL_RCC_GetSysClockFreq>
 8006c36:	61b8      	str	r0, [r7, #24]
        break;
 8006c38:	e008      	b.n	8006c4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c3e:	61bb      	str	r3, [r7, #24]
        break;
 8006c40:	e004      	b.n	8006c4c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	77bb      	strb	r3, [r7, #30]
        break;
 8006c4a:	bf00      	nop
    }

    if (pclk != 0U)
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d018      	beq.n	8006c84 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	085a      	lsrs	r2, r3, #1
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	441a      	add	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b0f      	cmp	r3, #15
 8006c6a:	d909      	bls.n	8006c80 <UART_SetConfig+0x4a0>
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c72:	d205      	bcs.n	8006c80 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	60da      	str	r2, [r3, #12]
 8006c7e:	e001      	b.n	8006c84 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c90:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3720      	adds	r7, #32
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	40007c00 	.word	0x40007c00
 8006ca0:	40023800 	.word	0x40023800
 8006ca4:	00f42400 	.word	0x00f42400

08006ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00a      	beq.n	8006cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00a      	beq.n	8006cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00a      	beq.n	8006d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	f003 0310 	and.w	r3, r3, #16
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01a      	beq.n	8006dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006da6:	d10a      	bne.n	8006dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	605a      	str	r2, [r3, #4]
  }
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af02      	add	r7, sp, #8
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dfc:	f7fb fc7c 	bl	80026f8 <HAL_GetTick>
 8006e00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0308 	and.w	r3, r3, #8
 8006e0c:	2b08      	cmp	r3, #8
 8006e0e:	d10e      	bne.n	8006e2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f831 	bl	8006e86 <UART_WaitOnFlagUntilTimeout>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e027      	b.n	8006e7e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d10e      	bne.n	8006e5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f81b 	bl	8006e86 <UART_WaitOnFlagUntilTimeout>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e011      	b.n	8006e7e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b09c      	sub	sp, #112	; 0x70
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	603b      	str	r3, [r7, #0]
 8006e92:	4613      	mov	r3, r2
 8006e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e96:	e0a7      	b.n	8006fe8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9e:	f000 80a3 	beq.w	8006fe8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea2:	f7fb fc29 	bl	80026f8 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d302      	bcc.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d13f      	bne.n	8006f38 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ec0:	e853 3f00 	ldrex	r3, [r3]
 8006ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ecc:	667b      	str	r3, [r7, #100]	; 0x64
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ed8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006edc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e6      	bne.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efc:	f023 0301 	bic.w	r3, r3, #1
 8006f00:	663b      	str	r3, [r7, #96]	; 0x60
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3308      	adds	r3, #8
 8006f08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e5      	bne.n	8006eea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2220      	movs	r2, #32
 8006f22:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e068      	b.n	800700a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0304 	and.w	r3, r3, #4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d050      	beq.n	8006fe8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f54:	d148      	bne.n	8006fe8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f5e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f80:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e6      	bne.n	8006f60 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3308      	adds	r3, #8
 8006f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	e853 3f00 	ldrex	r3, [r3]
 8006fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f023 0301 	bic.w	r3, r3, #1
 8006fa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3308      	adds	r3, #8
 8006fb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fb2:	623a      	str	r2, [r7, #32]
 8006fb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb6:	69f9      	ldr	r1, [r7, #28]
 8006fb8:	6a3a      	ldr	r2, [r7, #32]
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1e5      	bne.n	8006f92 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e010      	b.n	800700a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	69da      	ldr	r2, [r3, #28]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	bf0c      	ite	eq
 8006ff8:	2301      	moveq	r3, #1
 8006ffa:	2300      	movne	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	429a      	cmp	r2, r3
 8007004:	f43f af48 	beq.w	8006e98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3770      	adds	r7, #112	; 0x70
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007012:	b480      	push	{r7}
 8007014:	b095      	sub	sp, #84	; 0x54
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800702e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007038:	643b      	str	r3, [r7, #64]	; 0x40
 800703a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800703e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e6      	bne.n	800701a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3308      	adds	r3, #8
 8007052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	e853 3f00 	ldrex	r3, [r3]
 800705a:	61fb      	str	r3, [r7, #28]
   return(result);
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	f023 0301 	bic.w	r3, r3, #1
 8007062:	64bb      	str	r3, [r7, #72]	; 0x48
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3308      	adds	r3, #8
 800706a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800706c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800706e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007074:	e841 2300 	strex	r3, r2, [r1]
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1e5      	bne.n	800704c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007084:	2b01      	cmp	r3, #1
 8007086:	d118      	bne.n	80070ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	60bb      	str	r3, [r7, #8]
   return(result);
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f023 0310 	bic.w	r3, r3, #16
 800709c:	647b      	str	r3, [r7, #68]	; 0x44
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070a6:	61bb      	str	r3, [r7, #24]
 80070a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6979      	ldr	r1, [r7, #20]
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	613b      	str	r3, [r7, #16]
   return(result);
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e6      	bne.n	8007088 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2220      	movs	r2, #32
 80070be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80070ce:	bf00      	nop
 80070d0:	3754      	adds	r7, #84	; 0x54
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f7ff fb51 	bl	80067a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070fe:	bf00      	nop
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007106:	b480      	push	{r7}
 8007108:	b08f      	sub	sp, #60	; 0x3c
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007112:	2b21      	cmp	r3, #33	; 0x21
 8007114:	d14c      	bne.n	80071b0 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800711c:	b29b      	uxth	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d132      	bne.n	8007188 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007136:	637b      	str	r3, [r7, #52]	; 0x34
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007142:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e6      	bne.n	8007122 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	60bb      	str	r3, [r7, #8]
   return(result);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007168:	633b      	str	r3, [r7, #48]	; 0x30
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007172:	61bb      	str	r3, [r7, #24]
 8007174:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6979      	ldr	r1, [r7, #20]
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	613b      	str	r3, [r7, #16]
   return(result);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e6      	bne.n	8007154 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007186:	e013      	b.n	80071b0 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718c:	781a      	ldrb	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80071b0:	bf00      	nop
 80071b2:	373c      	adds	r7, #60	; 0x3c
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80071bc:	b480      	push	{r7}
 80071be:	b091      	sub	sp, #68	; 0x44
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071c8:	2b21      	cmp	r3, #33	; 0x21
 80071ca:	d151      	bne.n	8007270 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d132      	bne.n	800723e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	623b      	str	r3, [r7, #32]
   return(result);
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f6:	633b      	str	r3, [r7, #48]	; 0x30
 80071f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e6      	bne.n	80071d8 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	e853 3f00 	ldrex	r3, [r3]
 8007216:	60fb      	str	r3, [r7, #12]
   return(result);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800721e:	637b      	str	r3, [r7, #52]	; 0x34
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	461a      	mov	r2, r3
 8007226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007228:	61fb      	str	r3, [r7, #28]
 800722a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722c:	69b9      	ldr	r1, [r7, #24]
 800722e:	69fa      	ldr	r2, [r7, #28]
 8007230:	e841 2300 	strex	r3, r2, [r1]
 8007234:	617b      	str	r3, [r7, #20]
   return(result);
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1e6      	bne.n	800720a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800723c:	e018      	b.n	8007270 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007242:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007246:	881b      	ldrh	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007252:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007258:	1c9a      	adds	r2, r3, #2
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007264:	b29b      	uxth	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	b29a      	uxth	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007270:	bf00      	nop
 8007272:	3744      	adds	r7, #68	; 0x44
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	e853 3f00 	ldrex	r3, [r3]
 8007290:	60bb      	str	r3, [r7, #8]
   return(result);
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007298:	61fb      	str	r3, [r7, #28]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	61bb      	str	r3, [r7, #24]
 80072a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	6979      	ldr	r1, [r7, #20]
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	613b      	str	r3, [r7, #16]
   return(result);
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e6      	bne.n	8007284 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2220      	movs	r2, #32
 80072ba:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7fb f964 	bl	8002590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072c8:	bf00      	nop
 80072ca:	3720      	adds	r7, #32
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80072d4:	4904      	ldr	r1, [pc, #16]	; (80072e8 <MX_FATFS_Init+0x18>)
 80072d6:	4805      	ldr	r0, [pc, #20]	; (80072ec <MX_FATFS_Init+0x1c>)
 80072d8:	f003 f82e 	bl	800a338 <FATFS_LinkDriver>
 80072dc:	4603      	mov	r3, r0
 80072de:	461a      	mov	r2, r3
 80072e0:	4b03      	ldr	r3, [pc, #12]	; (80072f0 <MX_FATFS_Init+0x20>)
 80072e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80072e4:	bf00      	nop
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	20002754 	.word	0x20002754
 80072ec:	20000010 	.word	0x20000010
 80072f0:	20002750 	.word	0x20002750

080072f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80072f4:	b480      	push	{r7}
 80072f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80072f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	4603      	mov	r3, r0
 800730c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	4618      	mov	r0, r3
 8007312:	f7f9 fe53 	bl	8000fbc <SD_disk_initialize>
 8007316:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	4603      	mov	r3, r0
 8007328:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	4618      	mov	r0, r3
 800732e:	f7f9 ff2b 	bl	8001188 <SD_disk_status>
 8007332:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	4603      	mov	r3, r0
 800734a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800734c:	7bf8      	ldrb	r0, [r7, #15]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	f7f9 ff2e 	bl	80011b4 <SD_disk_read>
 8007358:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b084      	sub	sp, #16
 8007366:	af00      	add	r7, sp, #0
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	603b      	str	r3, [r7, #0]
 800736e:	4603      	mov	r3, r0
 8007370:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007372:	7bf8      	ldrb	r0, [r7, #15]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	68b9      	ldr	r1, [r7, #8]
 800737a:	f7f9 ff85 	bl	8001288 <SD_disk_write>
 800737e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	603a      	str	r2, [r7, #0]
 8007392:	71fb      	strb	r3, [r7, #7]
 8007394:	460b      	mov	r3, r1
 8007396:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8007398:	79b9      	ldrb	r1, [r7, #6]
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	4618      	mov	r0, r3
 80073a0:	f7f9 fff6 	bl	8001390 <SD_disk_ioctl>
 80073a4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
	...

080073b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	4603      	mov	r3, r0
 80073b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80073ba:	79fb      	ldrb	r3, [r7, #7]
 80073bc:	4a08      	ldr	r2, [pc, #32]	; (80073e0 <disk_status+0x30>)
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	79fa      	ldrb	r2, [r7, #7]
 80073c8:	4905      	ldr	r1, [pc, #20]	; (80073e0 <disk_status+0x30>)
 80073ca:	440a      	add	r2, r1
 80073cc:	7a12      	ldrb	r2, [r2, #8]
 80073ce:	4610      	mov	r0, r2
 80073d0:	4798      	blx	r3
 80073d2:	4603      	mov	r3, r0
 80073d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20002980 	.word	0x20002980

080073e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80073f2:	79fb      	ldrb	r3, [r7, #7]
 80073f4:	4a0d      	ldr	r2, [pc, #52]	; (800742c <disk_initialize+0x48>)
 80073f6:	5cd3      	ldrb	r3, [r2, r3]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d111      	bne.n	8007420 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	4a0b      	ldr	r2, [pc, #44]	; (800742c <disk_initialize+0x48>)
 8007400:	2101      	movs	r1, #1
 8007402:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007404:	79fb      	ldrb	r3, [r7, #7]
 8007406:	4a09      	ldr	r2, [pc, #36]	; (800742c <disk_initialize+0x48>)
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	79fa      	ldrb	r2, [r7, #7]
 8007412:	4906      	ldr	r1, [pc, #24]	; (800742c <disk_initialize+0x48>)
 8007414:	440a      	add	r2, r1
 8007416:	7a12      	ldrb	r2, [r2, #8]
 8007418:	4610      	mov	r0, r2
 800741a:	4798      	blx	r3
 800741c:	4603      	mov	r3, r0
 800741e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007420:	7bfb      	ldrb	r3, [r7, #15]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20002980 	.word	0x20002980

08007430 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007430:	b590      	push	{r4, r7, lr}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	607a      	str	r2, [r7, #4]
 800743a:	603b      	str	r3, [r7, #0]
 800743c:	4603      	mov	r3, r0
 800743e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	4a0a      	ldr	r2, [pc, #40]	; (800746c <disk_read+0x3c>)
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	689c      	ldr	r4, [r3, #8]
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	4a07      	ldr	r2, [pc, #28]	; (800746c <disk_read+0x3c>)
 8007450:	4413      	add	r3, r2
 8007452:	7a18      	ldrb	r0, [r3, #8]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	47a0      	blx	r4
 800745c:	4603      	mov	r3, r0
 800745e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007460:	7dfb      	ldrb	r3, [r7, #23]
}
 8007462:	4618      	mov	r0, r3
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	bd90      	pop	{r4, r7, pc}
 800746a:	bf00      	nop
 800746c:	20002980 	.word	0x20002980

08007470 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007470:	b590      	push	{r4, r7, lr}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	607a      	str	r2, [r7, #4]
 800747a:	603b      	str	r3, [r7, #0]
 800747c:	4603      	mov	r3, r0
 800747e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007480:	7bfb      	ldrb	r3, [r7, #15]
 8007482:	4a0a      	ldr	r2, [pc, #40]	; (80074ac <disk_write+0x3c>)
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	68dc      	ldr	r4, [r3, #12]
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	4a07      	ldr	r2, [pc, #28]	; (80074ac <disk_write+0x3c>)
 8007490:	4413      	add	r3, r2
 8007492:	7a18      	ldrb	r0, [r3, #8]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	47a0      	blx	r4
 800749c:	4603      	mov	r3, r0
 800749e:	75fb      	strb	r3, [r7, #23]
  return res;
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	371c      	adds	r7, #28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd90      	pop	{r4, r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20002980 	.word	0x20002980

080074b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	4603      	mov	r3, r0
 80074b8:	603a      	str	r2, [r7, #0]
 80074ba:	71fb      	strb	r3, [r7, #7]
 80074bc:	460b      	mov	r3, r1
 80074be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	4a09      	ldr	r2, [pc, #36]	; (80074e8 <disk_ioctl+0x38>)
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	79fa      	ldrb	r2, [r7, #7]
 80074ce:	4906      	ldr	r1, [pc, #24]	; (80074e8 <disk_ioctl+0x38>)
 80074d0:	440a      	add	r2, r1
 80074d2:	7a10      	ldrb	r0, [r2, #8]
 80074d4:	79b9      	ldrb	r1, [r7, #6]
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	4798      	blx	r3
 80074da:	4603      	mov	r3, r0
 80074dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80074de:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20002980 	.word	0x20002980

080074ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3301      	adds	r3, #1
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80074fc:	89fb      	ldrh	r3, [r7, #14]
 80074fe:	021b      	lsls	r3, r3, #8
 8007500:	b21a      	sxth	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	b21b      	sxth	r3, r3
 8007508:	4313      	orrs	r3, r2
 800750a:	b21b      	sxth	r3, r3
 800750c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800750e:	89fb      	ldrh	r3, [r7, #14]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3303      	adds	r3, #3
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	021b      	lsls	r3, r3, #8
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	3202      	adds	r2, #2
 8007534:	7812      	ldrb	r2, [r2, #0]
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	3201      	adds	r2, #1
 8007542:	7812      	ldrb	r2, [r2, #0]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	021b      	lsls	r3, r3, #8
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	7812      	ldrb	r2, [r2, #0]
 8007550:	4313      	orrs	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
	return rv;
 8007554:	68fb      	ldr	r3, [r7, #12]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	887a      	ldrh	r2, [r7, #2]
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	887b      	ldrh	r3, [r7, #2]
 800757c:	0a1b      	lsrs	r3, r3, #8
 800757e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	607a      	str	r2, [r7, #4]
 8007586:	887a      	ldrh	r2, [r7, #2]
 8007588:	b2d2      	uxtb	r2, r2
 800758a:	701a      	strb	r2, [r3, #0]
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	701a      	strb	r2, [r3, #0]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	0a1b      	lsrs	r3, r3, #8
 80075b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	607a      	str	r2, [r7, #4]
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	701a      	strb	r2, [r3, #0]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	0a1b      	lsrs	r3, r3, #8
 80075c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	0a1b      	lsrs	r3, r3, #8
 80075d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	607a      	str	r2, [r7, #4]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	b2d2      	uxtb	r2, r2
 80075e2:	701a      	strb	r2, [r3, #0]
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80075f0:	b480      	push	{r7}
 80075f2:	b087      	sub	sp, #28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00d      	beq.n	8007626 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	1c53      	adds	r3, r2, #1
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	1c59      	adds	r1, r3, #1
 8007614:	6179      	str	r1, [r7, #20]
 8007616:	7812      	ldrb	r2, [r2, #0]
 8007618:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3b01      	subs	r3, #1
 800761e:	607b      	str	r3, [r7, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1f1      	bne.n	800760a <mem_cpy+0x1a>
	}
}
 8007626:	bf00      	nop
 8007628:	371c      	adds	r7, #28
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007632:	b480      	push	{r7}
 8007634:	b087      	sub	sp, #28
 8007636:	af00      	add	r7, sp, #0
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	617a      	str	r2, [r7, #20]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	b2d2      	uxtb	r2, r2
 800764c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	3b01      	subs	r3, #1
 8007652:	607b      	str	r3, [r7, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1f3      	bne.n	8007642 <mem_set+0x10>
}
 800765a:	bf00      	nop
 800765c:	bf00      	nop
 800765e:	371c      	adds	r7, #28
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007668:	b480      	push	{r7}
 800766a:	b089      	sub	sp, #36	; 0x24
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	61fb      	str	r3, [r7, #28]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	61fa      	str	r2, [r7, #28]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	4619      	mov	r1, r3
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	61ba      	str	r2, [r7, #24]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	1acb      	subs	r3, r1, r3
 8007694:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3b01      	subs	r3, #1
 800769a:	607b      	str	r3, [r7, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <mem_cmp+0x40>
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0eb      	beq.n	8007680 <mem_cmp+0x18>

	return r;
 80076a8:	697b      	ldr	r3, [r7, #20]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3724      	adds	r7, #36	; 0x24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80076c0:	e002      	b.n	80076c8 <chk_chr+0x12>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3301      	adds	r3, #1
 80076c6:	607b      	str	r3, [r7, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d005      	beq.n	80076dc <chk_chr+0x26>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	4293      	cmp	r3, r2
 80076da:	d1f2      	bne.n	80076c2 <chk_chr+0xc>
	return *str;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	781b      	ldrb	r3, [r3, #0]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80076f6:	2300      	movs	r3, #0
 80076f8:	60bb      	str	r3, [r7, #8]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	60fb      	str	r3, [r7, #12]
 80076fe:	e029      	b.n	8007754 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007700:	4a27      	ldr	r2, [pc, #156]	; (80077a0 <chk_lock+0xb4>)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	4413      	add	r3, r2
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d01d      	beq.n	800774a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800770e:	4a24      	ldr	r2, [pc, #144]	; (80077a0 <chk_lock+0xb4>)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	4413      	add	r3, r2
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	429a      	cmp	r2, r3
 800771e:	d116      	bne.n	800774e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007720:	4a1f      	ldr	r2, [pc, #124]	; (80077a0 <chk_lock+0xb4>)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	4413      	add	r3, r2
 8007728:	3304      	adds	r3, #4
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007730:	429a      	cmp	r2, r3
 8007732:	d10c      	bne.n	800774e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007734:	4a1a      	ldr	r2, [pc, #104]	; (80077a0 <chk_lock+0xb4>)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	011b      	lsls	r3, r3, #4
 800773a:	4413      	add	r3, r2
 800773c:	3308      	adds	r3, #8
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007744:	429a      	cmp	r2, r3
 8007746:	d102      	bne.n	800774e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007748:	e007      	b.n	800775a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800774a:	2301      	movs	r3, #1
 800774c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3301      	adds	r3, #1
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d9d2      	bls.n	8007700 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d109      	bne.n	8007774 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <chk_lock+0x80>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b02      	cmp	r3, #2
 800776a:	d101      	bne.n	8007770 <chk_lock+0x84>
 800776c:	2300      	movs	r3, #0
 800776e:	e010      	b.n	8007792 <chk_lock+0xa6>
 8007770:	2312      	movs	r3, #18
 8007772:	e00e      	b.n	8007792 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d108      	bne.n	800778c <chk_lock+0xa0>
 800777a:	4a09      	ldr	r2, [pc, #36]	; (80077a0 <chk_lock+0xb4>)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	011b      	lsls	r3, r3, #4
 8007780:	4413      	add	r3, r2
 8007782:	330c      	adds	r3, #12
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800778a:	d101      	bne.n	8007790 <chk_lock+0xa4>
 800778c:	2310      	movs	r3, #16
 800778e:	e000      	b.n	8007792 <chk_lock+0xa6>
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20002760 	.word	0x20002760

080077a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80077aa:	2300      	movs	r3, #0
 80077ac:	607b      	str	r3, [r7, #4]
 80077ae:	e002      	b.n	80077b6 <enq_lock+0x12>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3301      	adds	r3, #1
 80077b4:	607b      	str	r3, [r7, #4]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d806      	bhi.n	80077ca <enq_lock+0x26>
 80077bc:	4a09      	ldr	r2, [pc, #36]	; (80077e4 <enq_lock+0x40>)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	4413      	add	r3, r2
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1f2      	bne.n	80077b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	bf14      	ite	ne
 80077d0:	2301      	movne	r3, #1
 80077d2:	2300      	moveq	r3, #0
 80077d4:	b2db      	uxtb	r3, r3
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	20002760 	.word	0x20002760

080077e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80077f2:	2300      	movs	r3, #0
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	e01f      	b.n	8007838 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80077f8:	4a41      	ldr	r2, [pc, #260]	; (8007900 <inc_lock+0x118>)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	4413      	add	r3, r2
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d113      	bne.n	8007832 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800780a:	4a3d      	ldr	r2, [pc, #244]	; (8007900 <inc_lock+0x118>)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	4413      	add	r3, r2
 8007812:	3304      	adds	r3, #4
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800781a:	429a      	cmp	r2, r3
 800781c:	d109      	bne.n	8007832 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800781e:	4a38      	ldr	r2, [pc, #224]	; (8007900 <inc_lock+0x118>)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	011b      	lsls	r3, r3, #4
 8007824:	4413      	add	r3, r2
 8007826:	3308      	adds	r3, #8
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800782e:	429a      	cmp	r2, r3
 8007830:	d006      	beq.n	8007840 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3301      	adds	r3, #1
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d9dc      	bls.n	80077f8 <inc_lock+0x10>
 800783e:	e000      	b.n	8007842 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007840:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d132      	bne.n	80078ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007848:	2300      	movs	r3, #0
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	e002      	b.n	8007854 <inc_lock+0x6c>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3301      	adds	r3, #1
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d806      	bhi.n	8007868 <inc_lock+0x80>
 800785a:	4a29      	ldr	r2, [pc, #164]	; (8007900 <inc_lock+0x118>)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	4413      	add	r3, r2
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1f2      	bne.n	800784e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d101      	bne.n	8007872 <inc_lock+0x8a>
 800786e:	2300      	movs	r3, #0
 8007870:	e040      	b.n	80078f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	4922      	ldr	r1, [pc, #136]	; (8007900 <inc_lock+0x118>)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	440b      	add	r3, r1
 800787e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	491e      	ldr	r1, [pc, #120]	; (8007900 <inc_lock+0x118>)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	440b      	add	r3, r1
 800788c:	3304      	adds	r3, #4
 800788e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	695a      	ldr	r2, [r3, #20]
 8007894:	491a      	ldr	r1, [pc, #104]	; (8007900 <inc_lock+0x118>)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	440b      	add	r3, r1
 800789c:	3308      	adds	r3, #8
 800789e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80078a0:	4a17      	ldr	r2, [pc, #92]	; (8007900 <inc_lock+0x118>)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	4413      	add	r3, r2
 80078a8:	330c      	adds	r3, #12
 80078aa:	2200      	movs	r2, #0
 80078ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d009      	beq.n	80078c8 <inc_lock+0xe0>
 80078b4:	4a12      	ldr	r2, [pc, #72]	; (8007900 <inc_lock+0x118>)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	4413      	add	r3, r2
 80078bc:	330c      	adds	r3, #12
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <inc_lock+0xe0>
 80078c4:	2300      	movs	r3, #0
 80078c6:	e015      	b.n	80078f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d108      	bne.n	80078e0 <inc_lock+0xf8>
 80078ce:	4a0c      	ldr	r2, [pc, #48]	; (8007900 <inc_lock+0x118>)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	4413      	add	r3, r2
 80078d6:	330c      	adds	r3, #12
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	3301      	adds	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	e001      	b.n	80078e4 <inc_lock+0xfc>
 80078e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078e4:	4906      	ldr	r1, [pc, #24]	; (8007900 <inc_lock+0x118>)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	440b      	add	r3, r1
 80078ec:	330c      	adds	r3, #12
 80078ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3301      	adds	r3, #1
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	20002760 	.word	0x20002760

08007904 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3b01      	subs	r3, #1
 8007910:	607b      	str	r3, [r7, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d825      	bhi.n	8007964 <dec_lock+0x60>
		n = Files[i].ctr;
 8007918:	4a17      	ldr	r2, [pc, #92]	; (8007978 <dec_lock+0x74>)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	011b      	lsls	r3, r3, #4
 800791e:	4413      	add	r3, r2
 8007920:	330c      	adds	r3, #12
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007926:	89fb      	ldrh	r3, [r7, #14]
 8007928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800792c:	d101      	bne.n	8007932 <dec_lock+0x2e>
 800792e:	2300      	movs	r3, #0
 8007930:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007932:	89fb      	ldrh	r3, [r7, #14]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <dec_lock+0x3a>
 8007938:	89fb      	ldrh	r3, [r7, #14]
 800793a:	3b01      	subs	r3, #1
 800793c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800793e:	4a0e      	ldr	r2, [pc, #56]	; (8007978 <dec_lock+0x74>)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	011b      	lsls	r3, r3, #4
 8007944:	4413      	add	r3, r2
 8007946:	330c      	adds	r3, #12
 8007948:	89fa      	ldrh	r2, [r7, #14]
 800794a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800794c:	89fb      	ldrh	r3, [r7, #14]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d105      	bne.n	800795e <dec_lock+0x5a>
 8007952:	4a09      	ldr	r2, [pc, #36]	; (8007978 <dec_lock+0x74>)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	4413      	add	r3, r2
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	737b      	strb	r3, [r7, #13]
 8007962:	e001      	b.n	8007968 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007964:	2302      	movs	r3, #2
 8007966:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007968:	7b7b      	ldrb	r3, [r7, #13]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20002760 	.word	0x20002760

0800797c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007984:	2300      	movs	r3, #0
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	e010      	b.n	80079ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800798a:	4a0d      	ldr	r2, [pc, #52]	; (80079c0 <clear_lock+0x44>)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	4413      	add	r3, r2
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	429a      	cmp	r2, r3
 8007998:	d105      	bne.n	80079a6 <clear_lock+0x2a>
 800799a:	4a09      	ldr	r2, [pc, #36]	; (80079c0 <clear_lock+0x44>)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	4413      	add	r3, r2
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3301      	adds	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d9eb      	bls.n	800798a <clear_lock+0xe>
	}
}
 80079b2:	bf00      	nop
 80079b4:	bf00      	nop
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	20002760 	.word	0x20002760

080079c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	78db      	ldrb	r3, [r3, #3]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d034      	beq.n	8007a42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	7858      	ldrb	r0, [r3, #1]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80079e8:	2301      	movs	r3, #1
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	f7ff fd40 	bl	8007470 <disk_write>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <sync_window+0x38>
			res = FR_DISK_ERR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	73fb      	strb	r3, [r7, #15]
 80079fa:	e022      	b.n	8007a42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	1ad2      	subs	r2, r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d217      	bcs.n	8007a42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	789b      	ldrb	r3, [r3, #2]
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	e010      	b.n	8007a3c <sync_window+0x78>
					wsect += fs->fsize;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	4413      	add	r3, r2
 8007a22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	7858      	ldrb	r0, [r3, #1]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a2e:	2301      	movs	r3, #1
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	f7ff fd1d 	bl	8007470 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	613b      	str	r3, [r7, #16]
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d8eb      	bhi.n	8007a1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d01b      	beq.n	8007a9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff ffad 	bl	80079c4 <sync_window>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d113      	bne.n	8007a9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	7858      	ldrb	r0, [r3, #1]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a7e:	2301      	movs	r3, #1
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	f7ff fcd5 	bl	8007430 <disk_read>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d004      	beq.n	8007a96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff ff87 	bl	80079c4 <sync_window>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d159      	bne.n	8007b74 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d149      	bne.n	8007b5c <sync_fs+0xb4>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	791b      	ldrb	r3, [r3, #4]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d145      	bne.n	8007b5c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	899b      	ldrh	r3, [r3, #12]
 8007ada:	461a      	mov	r2, r3
 8007adc:	2100      	movs	r1, #0
 8007ade:	f7ff fda8 	bl	8007632 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	3338      	adds	r3, #56	; 0x38
 8007ae6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007aea:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7ff fd37 	bl	8007562 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3338      	adds	r3, #56	; 0x38
 8007af8:	4921      	ldr	r1, [pc, #132]	; (8007b80 <sync_fs+0xd8>)
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff fd4c 	bl	8007598 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3338      	adds	r3, #56	; 0x38
 8007b04:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007b08:	491e      	ldr	r1, [pc, #120]	; (8007b84 <sync_fs+0xdc>)
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff fd44 	bl	8007598 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3338      	adds	r3, #56	; 0x38
 8007b14:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	4610      	mov	r0, r2
 8007b20:	f7ff fd3a 	bl	8007598 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3338      	adds	r3, #56	; 0x38
 8007b28:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	4619      	mov	r1, r3
 8007b32:	4610      	mov	r0, r2
 8007b34:	f7ff fd30 	bl	8007598 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	7858      	ldrb	r0, [r3, #1]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b50:	2301      	movs	r3, #1
 8007b52:	f7ff fc8d 	bl	8007470 <disk_write>
			fs->fsi_flag = 0;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	785b      	ldrb	r3, [r3, #1]
 8007b60:	2200      	movs	r2, #0
 8007b62:	2100      	movs	r1, #0
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7ff fca3 	bl	80074b0 <disk_ioctl>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <sync_fs+0xcc>
 8007b70:	2301      	movs	r3, #1
 8007b72:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	41615252 	.word	0x41615252
 8007b84:	61417272 	.word	0x61417272

08007b88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	3b02      	subs	r3, #2
 8007b96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	3b02      	subs	r3, #2
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d301      	bcc.n	8007ba8 <clust2sect+0x20>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	e008      	b.n	8007bba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	895b      	ldrh	r3, [r3, #10]
 8007bac:	461a      	mov	r2, r3
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	fb03 f202 	mul.w	r2, r3, r2
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb8:	4413      	add	r3, r2
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b086      	sub	sp, #24
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d904      	bls.n	8007be6 <get_fat+0x20>
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d302      	bcc.n	8007bec <get_fat+0x26>
		val = 1;	/* Internal error */
 8007be6:	2301      	movs	r3, #1
 8007be8:	617b      	str	r3, [r7, #20]
 8007bea:	e0bb      	b.n	8007d64 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007bec:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	f000 8083 	beq.w	8007d02 <get_fat+0x13c>
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	f300 80a7 	bgt.w	8007d50 <get_fat+0x18a>
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d002      	beq.n	8007c0c <get_fat+0x46>
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d056      	beq.n	8007cb8 <get_fat+0xf2>
 8007c0a:	e0a1      	b.n	8007d50 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	085b      	lsrs	r3, r3, #1
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	4413      	add	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	899b      	ldrh	r3, [r3, #12]
 8007c22:	4619      	mov	r1, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c2a:	4413      	add	r3, r2
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6938      	ldr	r0, [r7, #16]
 8007c30:	f7ff ff0c 	bl	8007a4c <move_window>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f040 808d 	bne.w	8007d56 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	60fa      	str	r2, [r7, #12]
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	8992      	ldrh	r2, [r2, #12]
 8007c46:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c4a:	fb01 f202 	mul.w	r2, r1, r2
 8007c4e:	1a9b      	subs	r3, r3, r2
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	4413      	add	r3, r2
 8007c54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c58:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	899b      	ldrh	r3, [r3, #12]
 8007c62:	4619      	mov	r1, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c6a:	4413      	add	r3, r2
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6938      	ldr	r0, [r7, #16]
 8007c70:	f7ff feec 	bl	8007a4c <move_window>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d16f      	bne.n	8007d5a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	899b      	ldrh	r3, [r3, #12]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c86:	fb01 f202 	mul.w	r2, r1, r2
 8007c8a:	1a9b      	subs	r3, r3, r2
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c94:	021b      	lsls	r3, r3, #8
 8007c96:	461a      	mov	r2, r3
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <get_fat+0xe8>
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	091b      	lsrs	r3, r3, #4
 8007cac:	e002      	b.n	8007cb4 <get_fat+0xee>
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cb4:	617b      	str	r3, [r7, #20]
			break;
 8007cb6:	e055      	b.n	8007d64 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	899b      	ldrh	r3, [r3, #12]
 8007cc0:	085b      	lsrs	r3, r3, #1
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ccc:	4413      	add	r3, r2
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6938      	ldr	r0, [r7, #16]
 8007cd2:	f7ff febb 	bl	8007a4c <move_window>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d140      	bne.n	8007d5e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	8992      	ldrh	r2, [r2, #12]
 8007cea:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cee:	fb00 f202 	mul.w	r2, r0, r2
 8007cf2:	1a9b      	subs	r3, r3, r2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff fbf8 	bl	80074ec <ld_word>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	617b      	str	r3, [r7, #20]
			break;
 8007d00:	e030      	b.n	8007d64 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	899b      	ldrh	r3, [r3, #12]
 8007d0a:	089b      	lsrs	r3, r3, #2
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	4619      	mov	r1, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d16:	4413      	add	r3, r2
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6938      	ldr	r0, [r7, #16]
 8007d1c:	f7ff fe96 	bl	8007a4c <move_window>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d11d      	bne.n	8007d62 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	8992      	ldrh	r2, [r2, #12]
 8007d34:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d38:	fb00 f202 	mul.w	r2, r0, r2
 8007d3c:	1a9b      	subs	r3, r3, r2
 8007d3e:	440b      	add	r3, r1
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7ff fbeb 	bl	800751c <ld_dword>
 8007d46:	4603      	mov	r3, r0
 8007d48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007d4c:	617b      	str	r3, [r7, #20]
			break;
 8007d4e:	e009      	b.n	8007d64 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007d50:	2301      	movs	r3, #1
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	e006      	b.n	8007d64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d56:	bf00      	nop
 8007d58:	e004      	b.n	8007d64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d5a:	bf00      	nop
 8007d5c:	e002      	b.n	8007d64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007d5e:	bf00      	nop
 8007d60:	e000      	b.n	8007d64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007d62:	bf00      	nop
		}
	}

	return val;
 8007d64:	697b      	ldr	r3, [r7, #20]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007d6e:	b590      	push	{r4, r7, lr}
 8007d70:	b089      	sub	sp, #36	; 0x24
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007d7a:	2302      	movs	r3, #2
 8007d7c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	f240 8102 	bls.w	8007f8a <put_fat+0x21c>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	f080 80fc 	bcs.w	8007f8a <put_fat+0x21c>
		switch (fs->fs_type) {
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	f000 80b6 	beq.w	8007f08 <put_fat+0x19a>
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	f300 80fd 	bgt.w	8007f9c <put_fat+0x22e>
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d003      	beq.n	8007dae <put_fat+0x40>
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	f000 8083 	beq.w	8007eb2 <put_fat+0x144>
 8007dac:	e0f6      	b.n	8007f9c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	61bb      	str	r3, [r7, #24]
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	085b      	lsrs	r3, r3, #1
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	4413      	add	r3, r2
 8007dba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	899b      	ldrh	r3, [r3, #12]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dcc:	4413      	add	r3, r2
 8007dce:	4619      	mov	r1, r3
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f7ff fe3b 	bl	8007a4c <move_window>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007dda:	7ffb      	ldrb	r3, [r7, #31]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f040 80d6 	bne.w	8007f8e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	61ba      	str	r2, [r7, #24]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	8992      	ldrh	r2, [r2, #12]
 8007df2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007df6:	fb00 f202 	mul.w	r2, r0, r2
 8007dfa:	1a9b      	subs	r3, r3, r2
 8007dfc:	440b      	add	r3, r1
 8007dfe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00d      	beq.n	8007e26 <put_fat+0xb8>
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	b25b      	sxtb	r3, r3
 8007e10:	f003 030f 	and.w	r3, r3, #15
 8007e14:	b25a      	sxtb	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	011b      	lsls	r3, r3, #4
 8007e1c:	b25b      	sxtb	r3, r3
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	b25b      	sxtb	r3, r3
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	e001      	b.n	8007e2a <put_fat+0xbc>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2201      	movs	r2, #1
 8007e32:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	899b      	ldrh	r3, [r3, #12]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e44:	4413      	add	r3, r2
 8007e46:	4619      	mov	r1, r3
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f7ff fdff 	bl	8007a4c <move_window>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e52:	7ffb      	ldrb	r3, [r7, #31]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f040 809c 	bne.w	8007f92 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	899b      	ldrh	r3, [r3, #12]
 8007e64:	461a      	mov	r2, r3
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e6c:	fb00 f202 	mul.w	r2, r0, r2
 8007e70:	1a9b      	subs	r3, r3, r2
 8007e72:	440b      	add	r3, r1
 8007e74:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d003      	beq.n	8007e88 <put_fat+0x11a>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	091b      	lsrs	r3, r3, #4
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	e00e      	b.n	8007ea6 <put_fat+0x138>
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	b25b      	sxtb	r3, r3
 8007e8e:	f023 030f 	bic.w	r3, r3, #15
 8007e92:	b25a      	sxtb	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	0a1b      	lsrs	r3, r3, #8
 8007e98:	b25b      	sxtb	r3, r3
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	b25b      	sxtb	r3, r3
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	b25b      	sxtb	r3, r3
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2201      	movs	r2, #1
 8007eae:	70da      	strb	r2, [r3, #3]
			break;
 8007eb0:	e074      	b.n	8007f9c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	899b      	ldrh	r3, [r3, #12]
 8007eba:	085b      	lsrs	r3, r3, #1
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ec6:	4413      	add	r3, r2
 8007ec8:	4619      	mov	r1, r3
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f7ff fdbe 	bl	8007a4c <move_window>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ed4:	7ffb      	ldrb	r3, [r7, #31]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d15d      	bne.n	8007f96 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	8992      	ldrh	r2, [r2, #12]
 8007ee8:	fbb3 f0f2 	udiv	r0, r3, r2
 8007eec:	fb00 f202 	mul.w	r2, r0, r2
 8007ef0:	1a9b      	subs	r3, r3, r2
 8007ef2:	440b      	add	r3, r1
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	b292      	uxth	r2, r2
 8007ef8:	4611      	mov	r1, r2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff fb31 	bl	8007562 <st_word>
			fs->wflag = 1;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	70da      	strb	r2, [r3, #3]
			break;
 8007f06:	e049      	b.n	8007f9c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	899b      	ldrh	r3, [r3, #12]
 8007f10:	089b      	lsrs	r3, r3, #2
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	4619      	mov	r1, r3
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f1c:	4413      	add	r3, r2
 8007f1e:	4619      	mov	r1, r3
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff fd93 	bl	8007a4c <move_window>
 8007f26:	4603      	mov	r3, r0
 8007f28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f2a:	7ffb      	ldrb	r3, [r7, #31]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d134      	bne.n	8007f9a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	8992      	ldrh	r2, [r2, #12]
 8007f44:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f48:	fb00 f202 	mul.w	r2, r0, r2
 8007f4c:	1a9b      	subs	r3, r3, r2
 8007f4e:	440b      	add	r3, r1
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff fae3 	bl	800751c <ld_dword>
 8007f56:	4603      	mov	r3, r0
 8007f58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f5c:	4323      	orrs	r3, r4
 8007f5e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	8992      	ldrh	r2, [r2, #12]
 8007f6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f72:	fb00 f202 	mul.w	r2, r0, r2
 8007f76:	1a9b      	subs	r3, r3, r2
 8007f78:	440b      	add	r3, r1
 8007f7a:	6879      	ldr	r1, [r7, #4]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7ff fb0b 	bl	8007598 <st_dword>
			fs->wflag = 1;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2201      	movs	r2, #1
 8007f86:	70da      	strb	r2, [r3, #3]
			break;
 8007f88:	e008      	b.n	8007f9c <put_fat+0x22e>
		}
	}
 8007f8a:	bf00      	nop
 8007f8c:	e006      	b.n	8007f9c <put_fat+0x22e>
			if (res != FR_OK) break;
 8007f8e:	bf00      	nop
 8007f90:	e004      	b.n	8007f9c <put_fat+0x22e>
			if (res != FR_OK) break;
 8007f92:	bf00      	nop
 8007f94:	e002      	b.n	8007f9c <put_fat+0x22e>
			if (res != FR_OK) break;
 8007f96:	bf00      	nop
 8007f98:	e000      	b.n	8007f9c <put_fat+0x22e>
			if (res != FR_OK) break;
 8007f9a:	bf00      	nop
	return res;
 8007f9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3724      	adds	r7, #36	; 0x24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd90      	pop	{r4, r7, pc}

08007fa6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b088      	sub	sp, #32
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d904      	bls.n	8007fcc <remove_chain+0x26>
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d301      	bcc.n	8007fd0 <remove_chain+0x2a>
 8007fcc:	2302      	movs	r3, #2
 8007fce:	e04b      	b.n	8008068 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00c      	beq.n	8007ff0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	69b8      	ldr	r0, [r7, #24]
 8007fde:	f7ff fec6 	bl	8007d6e <put_fat>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007fe6:	7ffb      	ldrb	r3, [r7, #31]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <remove_chain+0x4a>
 8007fec:	7ffb      	ldrb	r3, [r7, #31]
 8007fee:	e03b      	b.n	8008068 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007ff0:	68b9      	ldr	r1, [r7, #8]
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f7ff fde7 	bl	8007bc6 <get_fat>
 8007ff8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d031      	beq.n	8008064 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d101      	bne.n	800800a <remove_chain+0x64>
 8008006:	2302      	movs	r3, #2
 8008008:	e02e      	b.n	8008068 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008010:	d101      	bne.n	8008016 <remove_chain+0x70>
 8008012:	2301      	movs	r3, #1
 8008014:	e028      	b.n	8008068 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008016:	2200      	movs	r2, #0
 8008018:	68b9      	ldr	r1, [r7, #8]
 800801a:	69b8      	ldr	r0, [r7, #24]
 800801c:	f7ff fea7 	bl	8007d6e <put_fat>
 8008020:	4603      	mov	r3, r0
 8008022:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008024:	7ffb      	ldrb	r3, [r7, #31]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <remove_chain+0x88>
 800802a:	7ffb      	ldrb	r3, [r7, #31]
 800802c:	e01c      	b.n	8008068 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	699a      	ldr	r2, [r3, #24]
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	3b02      	subs	r3, #2
 8008038:	429a      	cmp	r2, r3
 800803a:	d20b      	bcs.n	8008054 <remove_chain+0xae>
			fs->free_clst++;
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	791b      	ldrb	r3, [r3, #4]
 800804a:	f043 0301 	orr.w	r3, r3, #1
 800804e:	b2da      	uxtb	r2, r3
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	429a      	cmp	r2, r3
 8008060:	d3c6      	bcc.n	8007ff0 <remove_chain+0x4a>
 8008062:	e000      	b.n	8008066 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008064:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3720      	adds	r7, #32
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10d      	bne.n	80080a2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d004      	beq.n	800809c <create_chain+0x2c>
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	429a      	cmp	r2, r3
 800809a:	d31b      	bcc.n	80080d4 <create_chain+0x64>
 800809c:	2301      	movs	r3, #1
 800809e:	61bb      	str	r3, [r7, #24]
 80080a0:	e018      	b.n	80080d4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff fd8e 	bl	8007bc6 <get_fat>
 80080aa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d801      	bhi.n	80080b6 <create_chain+0x46>
 80080b2:	2301      	movs	r3, #1
 80080b4:	e070      	b.n	8008198 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080bc:	d101      	bne.n	80080c2 <create_chain+0x52>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	e06a      	b.n	8008198 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d201      	bcs.n	80080d0 <create_chain+0x60>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	e063      	b.n	8008198 <create_chain+0x128>
		scl = clst;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	3301      	adds	r3, #1
 80080dc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d307      	bcc.n	80080f8 <create_chain+0x88>
				ncl = 2;
 80080e8:	2302      	movs	r3, #2
 80080ea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80080ec:	69fa      	ldr	r2, [r7, #28]
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d901      	bls.n	80080f8 <create_chain+0x88>
 80080f4:	2300      	movs	r3, #0
 80080f6:	e04f      	b.n	8008198 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80080f8:	69f9      	ldr	r1, [r7, #28]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff fd63 	bl	8007bc6 <get_fat>
 8008100:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00e      	beq.n	8008126 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d003      	beq.n	8008116 <create_chain+0xa6>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008114:	d101      	bne.n	800811a <create_chain+0xaa>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	e03e      	b.n	8008198 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800811a:	69fa      	ldr	r2, [r7, #28]
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	429a      	cmp	r2, r3
 8008120:	d1da      	bne.n	80080d8 <create_chain+0x68>
 8008122:	2300      	movs	r3, #0
 8008124:	e038      	b.n	8008198 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008126:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008128:	f04f 32ff 	mov.w	r2, #4294967295
 800812c:	69f9      	ldr	r1, [r7, #28]
 800812e:	6938      	ldr	r0, [r7, #16]
 8008130:	f7ff fe1d 	bl	8007d6e <put_fat>
 8008134:	4603      	mov	r3, r0
 8008136:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d109      	bne.n	8008152 <create_chain+0xe2>
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d006      	beq.n	8008152 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008144:	69fa      	ldr	r2, [r7, #28]
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6938      	ldr	r0, [r7, #16]
 800814a:	f7ff fe10 	bl	8007d6e <put_fat>
 800814e:	4603      	mov	r3, r0
 8008150:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008152:	7dfb      	ldrb	r3, [r7, #23]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d116      	bne.n	8008186 <create_chain+0x116>
		fs->last_clst = ncl;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	69fa      	ldr	r2, [r7, #28]
 800815c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	699a      	ldr	r2, [r3, #24]
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	3b02      	subs	r3, #2
 8008168:	429a      	cmp	r2, r3
 800816a:	d804      	bhi.n	8008176 <create_chain+0x106>
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	1e5a      	subs	r2, r3, #1
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	791b      	ldrb	r3, [r3, #4]
 800817a:	f043 0301 	orr.w	r3, r3, #1
 800817e:	b2da      	uxtb	r2, r3
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	711a      	strb	r2, [r3, #4]
 8008184:	e007      	b.n	8008196 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008186:	7dfb      	ldrb	r3, [r7, #23]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d102      	bne.n	8008192 <create_chain+0x122>
 800818c:	f04f 33ff 	mov.w	r3, #4294967295
 8008190:	e000      	b.n	8008194 <create_chain+0x124>
 8008192:	2301      	movs	r3, #1
 8008194:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008196:	69fb      	ldr	r3, [r7, #28]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3720      	adds	r7, #32
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b4:	3304      	adds	r3, #4
 80081b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	899b      	ldrh	r3, [r3, #12]
 80081bc:	461a      	mov	r2, r3
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	8952      	ldrh	r2, [r2, #10]
 80081c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	1d1a      	adds	r2, r3, #4
 80081d2:	613a      	str	r2, [r7, #16]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <clmt_clust+0x42>
 80081de:	2300      	movs	r3, #0
 80081e0:	e010      	b.n	8008204 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d307      	bcc.n	80081fa <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	617b      	str	r3, [r7, #20]
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	3304      	adds	r3, #4
 80081f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80081f8:	e7e9      	b.n	80081ce <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80081fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	4413      	add	r3, r2
}
 8008204:	4618      	mov	r0, r3
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008226:	d204      	bcs.n	8008232 <dir_sdi+0x22>
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	f003 031f 	and.w	r3, r3, #31
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008232:	2302      	movs	r3, #2
 8008234:	e071      	b.n	800831a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d106      	bne.n	8008256 <dir_sdi+0x46>
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b02      	cmp	r3, #2
 800824e:	d902      	bls.n	8008256 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008254:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10c      	bne.n	8008276 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	095b      	lsrs	r3, r3, #5
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	8912      	ldrh	r2, [r2, #8]
 8008264:	4293      	cmp	r3, r2
 8008266:	d301      	bcc.n	800826c <dir_sdi+0x5c>
 8008268:	2302      	movs	r3, #2
 800826a:	e056      	b.n	800831a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	61da      	str	r2, [r3, #28]
 8008274:	e02d      	b.n	80082d2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	895b      	ldrh	r3, [r3, #10]
 800827a:	461a      	mov	r2, r3
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	899b      	ldrh	r3, [r3, #12]
 8008280:	fb02 f303 	mul.w	r3, r2, r3
 8008284:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008286:	e019      	b.n	80082bc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6979      	ldr	r1, [r7, #20]
 800828c:	4618      	mov	r0, r3
 800828e:	f7ff fc9a 	bl	8007bc6 <get_fat>
 8008292:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829a:	d101      	bne.n	80082a0 <dir_sdi+0x90>
 800829c:	2301      	movs	r3, #1
 800829e:	e03c      	b.n	800831a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d904      	bls.n	80082b0 <dir_sdi+0xa0>
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d301      	bcc.n	80082b4 <dir_sdi+0xa4>
 80082b0:	2302      	movs	r3, #2
 80082b2:	e032      	b.n	800831a <dir_sdi+0x10a>
			ofs -= csz;
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d2e1      	bcs.n	8008288 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80082c4:	6979      	ldr	r1, [r7, #20]
 80082c6:	6938      	ldr	r0, [r7, #16]
 80082c8:	f7ff fc5e 	bl	8007b88 <clust2sect>
 80082cc:	4602      	mov	r2, r0
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <dir_sdi+0xd4>
 80082e0:	2302      	movs	r3, #2
 80082e2:	e01a      	b.n	800831a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	69da      	ldr	r2, [r3, #28]
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	899b      	ldrh	r3, [r3, #12]
 80082ec:	4619      	mov	r1, r3
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80082f4:	441a      	add	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	899b      	ldrh	r3, [r3, #12]
 8008304:	461a      	mov	r2, r3
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	fbb3 f0f2 	udiv	r0, r3, r2
 800830c:	fb00 f202 	mul.w	r2, r0, r2
 8008310:	1a9b      	subs	r3, r3, r2
 8008312:	18ca      	adds	r2, r1, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b086      	sub	sp, #24
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	3320      	adds	r3, #32
 8008338:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	69db      	ldr	r3, [r3, #28]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <dir_next+0x28>
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008348:	d301      	bcc.n	800834e <dir_next+0x2c>
 800834a:	2304      	movs	r3, #4
 800834c:	e0bb      	b.n	80084c6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	899b      	ldrh	r3, [r3, #12]
 8008352:	461a      	mov	r2, r3
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	fbb3 f1f2 	udiv	r1, r3, r2
 800835a:	fb01 f202 	mul.w	r2, r1, r2
 800835e:	1a9b      	subs	r3, r3, r2
 8008360:	2b00      	cmp	r3, #0
 8008362:	f040 809d 	bne.w	80084a0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10b      	bne.n	8008390 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	095b      	lsrs	r3, r3, #5
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	8912      	ldrh	r2, [r2, #8]
 8008380:	4293      	cmp	r3, r2
 8008382:	f0c0 808d 	bcc.w	80084a0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	61da      	str	r2, [r3, #28]
 800838c:	2304      	movs	r3, #4
 800838e:	e09a      	b.n	80084c6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	899b      	ldrh	r3, [r3, #12]
 8008394:	461a      	mov	r2, r3
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	fbb3 f3f2 	udiv	r3, r3, r2
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	8952      	ldrh	r2, [r2, #10]
 80083a0:	3a01      	subs	r2, #1
 80083a2:	4013      	ands	r3, r2
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d17b      	bne.n	80084a0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	4619      	mov	r1, r3
 80083b0:	4610      	mov	r0, r2
 80083b2:	f7ff fc08 	bl	8007bc6 <get_fat>
 80083b6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d801      	bhi.n	80083c2 <dir_next+0xa0>
 80083be:	2302      	movs	r3, #2
 80083c0:	e081      	b.n	80084c6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c8:	d101      	bne.n	80083ce <dir_next+0xac>
 80083ca:	2301      	movs	r3, #1
 80083cc:	e07b      	b.n	80084c6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d359      	bcc.n	800848c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d104      	bne.n	80083e8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	61da      	str	r2, [r3, #28]
 80083e4:	2304      	movs	r3, #4
 80083e6:	e06e      	b.n	80084c6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	4619      	mov	r1, r3
 80083f0:	4610      	mov	r0, r2
 80083f2:	f7ff fe3d 	bl	8008070 <create_chain>
 80083f6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <dir_next+0xe0>
 80083fe:	2307      	movs	r3, #7
 8008400:	e061      	b.n	80084c6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <dir_next+0xea>
 8008408:	2302      	movs	r3, #2
 800840a:	e05c      	b.n	80084c6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008412:	d101      	bne.n	8008418 <dir_next+0xf6>
 8008414:	2301      	movs	r3, #1
 8008416:	e056      	b.n	80084c6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f7ff fad3 	bl	80079c4 <sync_window>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <dir_next+0x106>
 8008424:	2301      	movs	r3, #1
 8008426:	e04e      	b.n	80084c6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	899b      	ldrh	r3, [r3, #12]
 8008432:	461a      	mov	r2, r3
 8008434:	2100      	movs	r1, #0
 8008436:	f7ff f8fc 	bl	8007632 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800843a:	2300      	movs	r3, #0
 800843c:	613b      	str	r3, [r7, #16]
 800843e:	6979      	ldr	r1, [r7, #20]
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f7ff fba1 	bl	8007b88 <clust2sect>
 8008446:	4602      	mov	r2, r0
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	635a      	str	r2, [r3, #52]	; 0x34
 800844c:	e012      	b.n	8008474 <dir_next+0x152>
						fs->wflag = 1;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2201      	movs	r2, #1
 8008452:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f7ff fab5 	bl	80079c4 <sync_window>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <dir_next+0x142>
 8008460:	2301      	movs	r3, #1
 8008462:	e030      	b.n	80084c6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	3301      	adds	r3, #1
 8008468:	613b      	str	r3, [r7, #16]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846e:	1c5a      	adds	r2, r3, #1
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	635a      	str	r2, [r3, #52]	; 0x34
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	895b      	ldrh	r3, [r3, #10]
 8008478:	461a      	mov	r2, r3
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	4293      	cmp	r3, r2
 800847e:	d3e6      	bcc.n	800844e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	1ad2      	subs	r2, r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008492:	6979      	ldr	r1, [r7, #20]
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f7ff fb77 	bl	8007b88 <clust2sect>
 800849a:	4602      	mov	r2, r0
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	899b      	ldrh	r3, [r3, #12]
 80084b0:	461a      	mov	r2, r3
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80084b8:	fb00 f202 	mul.w	r2, r0, r2
 80084bc:	1a9b      	subs	r3, r3, r2
 80084be:	18ca      	adds	r2, r1, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b086      	sub	sp, #24
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80084de:	2100      	movs	r1, #0
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff fe95 	bl	8008210 <dir_sdi>
 80084e6:	4603      	mov	r3, r0
 80084e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d12b      	bne.n	8008548 <dir_alloc+0x7a>
		n = 0;
 80084f0:	2300      	movs	r3, #0
 80084f2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	69db      	ldr	r3, [r3, #28]
 80084f8:	4619      	mov	r1, r3
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f7ff faa6 	bl	8007a4c <move_window>
 8008500:	4603      	mov	r3, r0
 8008502:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008504:	7dfb      	ldrb	r3, [r7, #23]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d11d      	bne.n	8008546 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2be5      	cmp	r3, #229	; 0xe5
 8008512:	d004      	beq.n	800851e <dir_alloc+0x50>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a1b      	ldr	r3, [r3, #32]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d107      	bne.n	800852e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	3301      	adds	r3, #1
 8008522:	613b      	str	r3, [r7, #16]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	429a      	cmp	r2, r3
 800852a:	d102      	bne.n	8008532 <dir_alloc+0x64>
 800852c:	e00c      	b.n	8008548 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800852e:	2300      	movs	r3, #0
 8008530:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008532:	2101      	movs	r1, #1
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7ff fef4 	bl	8008322 <dir_next>
 800853a:	4603      	mov	r3, r0
 800853c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800853e:	7dfb      	ldrb	r3, [r7, #23]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d0d7      	beq.n	80084f4 <dir_alloc+0x26>
 8008544:	e000      	b.n	8008548 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008546:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	2b04      	cmp	r3, #4
 800854c:	d101      	bne.n	8008552 <dir_alloc+0x84>
 800854e:	2307      	movs	r3, #7
 8008550:	75fb      	strb	r3, [r7, #23]
	return res;
 8008552:	7dfb      	ldrb	r3, [r7, #23]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3718      	adds	r7, #24
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	331a      	adds	r3, #26
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe ffbe 	bl	80074ec <ld_word>
 8008570:	4603      	mov	r3, r0
 8008572:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2b03      	cmp	r3, #3
 800857a:	d109      	bne.n	8008590 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	3314      	adds	r3, #20
 8008580:	4618      	mov	r0, r3
 8008582:	f7fe ffb3 	bl	80074ec <ld_word>
 8008586:	4603      	mov	r3, r0
 8008588:	041b      	lsls	r3, r3, #16
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	4313      	orrs	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008590:	68fb      	ldr	r3, [r7, #12]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	60b9      	str	r1, [r7, #8]
 80085a4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	331a      	adds	r3, #26
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	b292      	uxth	r2, r2
 80085ae:	4611      	mov	r1, r2
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fe ffd6 	bl	8007562 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d109      	bne.n	80085d2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	f103 0214 	add.w	r2, r3, #20
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	0c1b      	lsrs	r3, r3, #16
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	4619      	mov	r1, r3
 80085cc:	4610      	mov	r0, r2
 80085ce:	f7fe ffc8 	bl	8007562 <st_word>
	}
}
 80085d2:	bf00      	nop
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80085dc:	b590      	push	{r4, r7, lr}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	331a      	adds	r3, #26
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe ff7e 	bl	80074ec <ld_word>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <cmp_lfn+0x1e>
 80085f6:	2300      	movs	r3, #0
 80085f8:	e059      	b.n	80086ae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008602:	1e5a      	subs	r2, r3, #1
 8008604:	4613      	mov	r3, r2
 8008606:	005b      	lsls	r3, r3, #1
 8008608:	4413      	add	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008610:	2301      	movs	r3, #1
 8008612:	81fb      	strh	r3, [r7, #14]
 8008614:	2300      	movs	r3, #0
 8008616:	613b      	str	r3, [r7, #16]
 8008618:	e033      	b.n	8008682 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800861a:	4a27      	ldr	r2, [pc, #156]	; (80086b8 <cmp_lfn+0xdc>)
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	4413      	add	r3, r2
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	4413      	add	r3, r2
 8008628:	4618      	mov	r0, r3
 800862a:	f7fe ff5f 	bl	80074ec <ld_word>
 800862e:	4603      	mov	r3, r0
 8008630:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008632:	89fb      	ldrh	r3, [r7, #14]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d01a      	beq.n	800866e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	2bfe      	cmp	r3, #254	; 0xfe
 800863c:	d812      	bhi.n	8008664 <cmp_lfn+0x88>
 800863e:	89bb      	ldrh	r3, [r7, #12]
 8008640:	4618      	mov	r0, r3
 8008642:	f001 fec5 	bl	800a3d0 <ff_wtoupper>
 8008646:	4603      	mov	r3, r0
 8008648:	461c      	mov	r4, r3
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	1c5a      	adds	r2, r3, #1
 800864e:	617a      	str	r2, [r7, #20]
 8008650:	005b      	lsls	r3, r3, #1
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	4413      	add	r3, r2
 8008656:	881b      	ldrh	r3, [r3, #0]
 8008658:	4618      	mov	r0, r3
 800865a:	f001 feb9 	bl	800a3d0 <ff_wtoupper>
 800865e:	4603      	mov	r3, r0
 8008660:	429c      	cmp	r4, r3
 8008662:	d001      	beq.n	8008668 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008664:	2300      	movs	r3, #0
 8008666:	e022      	b.n	80086ae <cmp_lfn+0xd2>
			}
			wc = uc;
 8008668:	89bb      	ldrh	r3, [r7, #12]
 800866a:	81fb      	strh	r3, [r7, #14]
 800866c:	e006      	b.n	800867c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800866e:	89bb      	ldrh	r3, [r7, #12]
 8008670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008674:	4293      	cmp	r3, r2
 8008676:	d001      	beq.n	800867c <cmp_lfn+0xa0>
 8008678:	2300      	movs	r3, #0
 800867a:	e018      	b.n	80086ae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	3301      	adds	r3, #1
 8008680:	613b      	str	r3, [r7, #16]
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	2b0c      	cmp	r3, #12
 8008686:	d9c8      	bls.n	800861a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00b      	beq.n	80086ac <cmp_lfn+0xd0>
 8008694:	89fb      	ldrh	r3, [r7, #14]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d008      	beq.n	80086ac <cmp_lfn+0xd0>
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	4413      	add	r3, r2
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <cmp_lfn+0xd0>
 80086a8:	2300      	movs	r3, #0
 80086aa:	e000      	b.n	80086ae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80086ac:	2301      	movs	r3, #1
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	371c      	adds	r7, #28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd90      	pop	{r4, r7, pc}
 80086b6:	bf00      	nop
 80086b8:	0800ed78 	.word	0x0800ed78

080086bc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4611      	mov	r1, r2
 80086c8:	461a      	mov	r2, r3
 80086ca:	460b      	mov	r3, r1
 80086cc:	71fb      	strb	r3, [r7, #7]
 80086ce:	4613      	mov	r3, r2
 80086d0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	330d      	adds	r3, #13
 80086d6:	79ba      	ldrb	r2, [r7, #6]
 80086d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	330b      	adds	r3, #11
 80086de:	220f      	movs	r2, #15
 80086e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	330c      	adds	r3, #12
 80086e6:	2200      	movs	r2, #0
 80086e8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	331a      	adds	r3, #26
 80086ee:	2100      	movs	r1, #0
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fe ff36 	bl	8007562 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80086f6:	79fb      	ldrb	r3, [r7, #7]
 80086f8:	1e5a      	subs	r2, r3, #1
 80086fa:	4613      	mov	r3, r2
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008706:	2300      	movs	r3, #0
 8008708:	82fb      	strh	r3, [r7, #22]
 800870a:	2300      	movs	r3, #0
 800870c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800870e:	8afb      	ldrh	r3, [r7, #22]
 8008710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008714:	4293      	cmp	r3, r2
 8008716:	d007      	beq.n	8008728 <put_lfn+0x6c>
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	61fa      	str	r2, [r7, #28]
 800871e:	005b      	lsls	r3, r3, #1
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	4413      	add	r3, r2
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008728:	4a17      	ldr	r2, [pc, #92]	; (8008788 <put_lfn+0xcc>)
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	4413      	add	r3, r2
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	461a      	mov	r2, r3
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	4413      	add	r3, r2
 8008736:	8afa      	ldrh	r2, [r7, #22]
 8008738:	4611      	mov	r1, r2
 800873a:	4618      	mov	r0, r3
 800873c:	f7fe ff11 	bl	8007562 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008740:	8afb      	ldrh	r3, [r7, #22]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d102      	bne.n	800874c <put_lfn+0x90>
 8008746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800874a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	3301      	adds	r3, #1
 8008750:	61bb      	str	r3, [r7, #24]
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	2b0c      	cmp	r3, #12
 8008756:	d9da      	bls.n	800870e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008758:	8afb      	ldrh	r3, [r7, #22]
 800875a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800875e:	4293      	cmp	r3, r2
 8008760:	d006      	beq.n	8008770 <put_lfn+0xb4>
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	4413      	add	r3, r2
 800876a:	881b      	ldrh	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d103      	bne.n	8008778 <put_lfn+0xbc>
 8008770:	79fb      	ldrb	r3, [r7, #7]
 8008772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008776:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	79fa      	ldrb	r2, [r7, #7]
 800877c:	701a      	strb	r2, [r3, #0]
}
 800877e:	bf00      	nop
 8008780:	3720      	adds	r7, #32
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	0800ed78 	.word	0x0800ed78

0800878c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08c      	sub	sp, #48	; 0x30
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800879a:	220b      	movs	r2, #11
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f7fe ff26 	bl	80075f0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2b05      	cmp	r3, #5
 80087a8:	d929      	bls.n	80087fe <gen_numname+0x72>
		sr = seq;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80087ae:	e020      	b.n	80087f2 <gen_numname+0x66>
			wc = *lfn++;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	1c9a      	adds	r2, r3, #2
 80087b4:	607a      	str	r2, [r7, #4]
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80087ba:	2300      	movs	r3, #0
 80087bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80087be:	e015      	b.n	80087ec <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	005a      	lsls	r2, r3, #1
 80087c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087c6:	f003 0301 	and.w	r3, r3, #1
 80087ca:	4413      	add	r3, r2
 80087cc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80087ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087d0:	085b      	lsrs	r3, r3, #1
 80087d2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d003      	beq.n	80087e6 <gen_numname+0x5a>
 80087de:	69fa      	ldr	r2, [r7, #28]
 80087e0:	4b30      	ldr	r3, [pc, #192]	; (80088a4 <gen_numname+0x118>)
 80087e2:	4053      	eors	r3, r2
 80087e4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80087e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e8:	3301      	adds	r3, #1
 80087ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	2b0f      	cmp	r3, #15
 80087f0:	d9e6      	bls.n	80087c0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1da      	bne.n	80087b0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80087fe:	2307      	movs	r3, #7
 8008800:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	b2db      	uxtb	r3, r3
 8008806:	f003 030f 	and.w	r3, r3, #15
 800880a:	b2db      	uxtb	r3, r3
 800880c:	3330      	adds	r3, #48	; 0x30
 800880e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008816:	2b39      	cmp	r3, #57	; 0x39
 8008818:	d904      	bls.n	8008824 <gen_numname+0x98>
 800881a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800881e:	3307      	adds	r3, #7
 8008820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	1e5a      	subs	r2, r3, #1
 8008828:	62ba      	str	r2, [r7, #40]	; 0x28
 800882a:	3330      	adds	r3, #48	; 0x30
 800882c:	443b      	add	r3, r7
 800882e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008832:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	091b      	lsrs	r3, r3, #4
 800883a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1df      	bne.n	8008802 <gen_numname+0x76>
	ns[i] = '~';
 8008842:	f107 0214 	add.w	r2, r7, #20
 8008846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008848:	4413      	add	r3, r2
 800884a:	227e      	movs	r2, #126	; 0x7e
 800884c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800884e:	2300      	movs	r3, #0
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
 8008852:	e002      	b.n	800885a <gen_numname+0xce>
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	3301      	adds	r3, #1
 8008858:	627b      	str	r3, [r7, #36]	; 0x24
 800885a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885e:	429a      	cmp	r2, r3
 8008860:	d205      	bcs.n	800886e <gen_numname+0xe2>
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	4413      	add	r3, r2
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b20      	cmp	r3, #32
 800886c:	d1f2      	bne.n	8008854 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008870:	2b07      	cmp	r3, #7
 8008872:	d807      	bhi.n	8008884 <gen_numname+0xf8>
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	62ba      	str	r2, [r7, #40]	; 0x28
 800887a:	3330      	adds	r3, #48	; 0x30
 800887c:	443b      	add	r3, r7
 800887e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008882:	e000      	b.n	8008886 <gen_numname+0xfa>
 8008884:	2120      	movs	r1, #32
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	627a      	str	r2, [r7, #36]	; 0x24
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	460a      	mov	r2, r1
 8008892:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	2b07      	cmp	r3, #7
 8008898:	d9e9      	bls.n	800886e <gen_numname+0xe2>
}
 800889a:	bf00      	nop
 800889c:	bf00      	nop
 800889e:	3730      	adds	r7, #48	; 0x30
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	00011021 	.word	0x00011021

080088a8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80088b4:	230b      	movs	r3, #11
 80088b6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	0852      	lsrs	r2, r2, #1
 80088be:	01db      	lsls	r3, r3, #7
 80088c0:	4313      	orrs	r3, r2
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	1c59      	adds	r1, r3, #1
 80088c8:	6079      	str	r1, [r7, #4]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	4413      	add	r3, r2
 80088ce:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	60bb      	str	r3, [r7, #8]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1ed      	bne.n	80088b8 <sum_sfn+0x10>
	return sum;
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b086      	sub	sp, #24
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80088f8:	2100      	movs	r1, #0
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7ff fc88 	bl	8008210 <dir_sdi>
 8008900:	4603      	mov	r3, r0
 8008902:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008904:	7dfb      	ldrb	r3, [r7, #23]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <dir_find+0x24>
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	e0a9      	b.n	8008a62 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800890e:	23ff      	movs	r3, #255	; 0xff
 8008910:	753b      	strb	r3, [r7, #20]
 8008912:	7d3b      	ldrb	r3, [r7, #20]
 8008914:	757b      	strb	r3, [r7, #21]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f04f 32ff 	mov.w	r2, #4294967295
 800891c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	4619      	mov	r1, r3
 8008924:	6938      	ldr	r0, [r7, #16]
 8008926:	f7ff f891 	bl	8007a4c <move_window>
 800892a:	4603      	mov	r3, r0
 800892c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	2b00      	cmp	r3, #0
 8008932:	f040 8090 	bne.w	8008a56 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800893e:	7dbb      	ldrb	r3, [r7, #22]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d102      	bne.n	800894a <dir_find+0x60>
 8008944:	2304      	movs	r3, #4
 8008946:	75fb      	strb	r3, [r7, #23]
 8008948:	e08a      	b.n	8008a60 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	330b      	adds	r3, #11
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008956:	73fb      	strb	r3, [r7, #15]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	7bfa      	ldrb	r2, [r7, #15]
 800895c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800895e:	7dbb      	ldrb	r3, [r7, #22]
 8008960:	2be5      	cmp	r3, #229	; 0xe5
 8008962:	d007      	beq.n	8008974 <dir_find+0x8a>
 8008964:	7bfb      	ldrb	r3, [r7, #15]
 8008966:	f003 0308 	and.w	r3, r3, #8
 800896a:	2b00      	cmp	r3, #0
 800896c:	d009      	beq.n	8008982 <dir_find+0x98>
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	2b0f      	cmp	r3, #15
 8008972:	d006      	beq.n	8008982 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008974:	23ff      	movs	r3, #255	; 0xff
 8008976:	757b      	strb	r3, [r7, #21]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f04f 32ff 	mov.w	r2, #4294967295
 800897e:	631a      	str	r2, [r3, #48]	; 0x30
 8008980:	e05e      	b.n	8008a40 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008982:	7bfb      	ldrb	r3, [r7, #15]
 8008984:	2b0f      	cmp	r3, #15
 8008986:	d136      	bne.n	80089f6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800898e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008992:	2b00      	cmp	r3, #0
 8008994:	d154      	bne.n	8008a40 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008996:	7dbb      	ldrb	r3, [r7, #22]
 8008998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00d      	beq.n	80089bc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a1b      	ldr	r3, [r3, #32]
 80089a4:	7b5b      	ldrb	r3, [r3, #13]
 80089a6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80089a8:	7dbb      	ldrb	r3, [r7, #22]
 80089aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ae:	75bb      	strb	r3, [r7, #22]
 80089b0:	7dbb      	ldrb	r3, [r7, #22]
 80089b2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	695a      	ldr	r2, [r3, #20]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80089bc:	7dba      	ldrb	r2, [r7, #22]
 80089be:	7d7b      	ldrb	r3, [r7, #21]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d115      	bne.n	80089f0 <dir_find+0x106>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	330d      	adds	r3, #13
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	7d3a      	ldrb	r2, [r7, #20]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d10e      	bne.n	80089f0 <dir_find+0x106>
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	691a      	ldr	r2, [r3, #16]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	4619      	mov	r1, r3
 80089dc:	4610      	mov	r0, r2
 80089de:	f7ff fdfd 	bl	80085dc <cmp_lfn>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d003      	beq.n	80089f0 <dir_find+0x106>
 80089e8:	7d7b      	ldrb	r3, [r7, #21]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	e000      	b.n	80089f2 <dir_find+0x108>
 80089f0:	23ff      	movs	r3, #255	; 0xff
 80089f2:	757b      	strb	r3, [r7, #21]
 80089f4:	e024      	b.n	8008a40 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80089f6:	7d7b      	ldrb	r3, [r7, #21]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d109      	bne.n	8008a10 <dir_find+0x126>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a1b      	ldr	r3, [r3, #32]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7ff ff51 	bl	80088a8 <sum_sfn>
 8008a06:	4603      	mov	r3, r0
 8008a08:	461a      	mov	r2, r3
 8008a0a:	7d3b      	ldrb	r3, [r7, #20]
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d024      	beq.n	8008a5a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10a      	bne.n	8008a34 <dir_find+0x14a>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a18      	ldr	r0, [r3, #32]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	3324      	adds	r3, #36	; 0x24
 8008a26:	220b      	movs	r2, #11
 8008a28:	4619      	mov	r1, r3
 8008a2a:	f7fe fe1d 	bl	8007668 <mem_cmp>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d014      	beq.n	8008a5e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008a34:	23ff      	movs	r3, #255	; 0xff
 8008a36:	757b      	strb	r3, [r7, #21]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a3e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008a40:	2100      	movs	r1, #0
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f7ff fc6d 	bl	8008322 <dir_next>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008a4c:	7dfb      	ldrb	r3, [r7, #23]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f43f af65 	beq.w	800891e <dir_find+0x34>
 8008a54:	e004      	b.n	8008a60 <dir_find+0x176>
		if (res != FR_OK) break;
 8008a56:	bf00      	nop
 8008a58:	e002      	b.n	8008a60 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008a5a:	bf00      	nop
 8008a5c:	e000      	b.n	8008a60 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008a5e:	bf00      	nop

	return res;
 8008a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3718      	adds	r7, #24
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
	...

08008a6c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08c      	sub	sp, #48	; 0x30
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008a80:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <dir_register+0x20>
 8008a88:	2306      	movs	r3, #6
 8008a8a:	e0e0      	b.n	8008c4e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a90:	e002      	b.n	8008a98 <dir_register+0x2c>
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	3301      	adds	r3, #1
 8008a96:	627b      	str	r3, [r7, #36]	; 0x24
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	691a      	ldr	r2, [r3, #16]
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	005b      	lsls	r3, r3, #1
 8008aa0:	4413      	add	r3, r2
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1f4      	bne.n	8008a92 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008aae:	f107 030c 	add.w	r3, r7, #12
 8008ab2:	220c      	movs	r2, #12
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fe fd9b 	bl	80075f0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d032      	beq.n	8008b2a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2240      	movs	r2, #64	; 0x40
 8008ac8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008acc:	2301      	movs	r3, #1
 8008ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ad0:	e016      	b.n	8008b00 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	691a      	ldr	r2, [r3, #16]
 8008adc:	f107 010c 	add.w	r1, r7, #12
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	f7ff fe53 	bl	800878c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff feff 	bl	80088ea <dir_find>
 8008aec:	4603      	mov	r3, r0
 8008aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008af2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d106      	bne.n	8008b08 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afc:	3301      	adds	r3, #1
 8008afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b02:	2b63      	cmp	r3, #99	; 0x63
 8008b04:	d9e5      	bls.n	8008ad2 <dir_register+0x66>
 8008b06:	e000      	b.n	8008b0a <dir_register+0x9e>
			if (res != FR_OK) break;
 8008b08:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0c:	2b64      	cmp	r3, #100	; 0x64
 8008b0e:	d101      	bne.n	8008b14 <dir_register+0xa8>
 8008b10:	2307      	movs	r3, #7
 8008b12:	e09c      	b.n	8008c4e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b18:	2b04      	cmp	r3, #4
 8008b1a:	d002      	beq.n	8008b22 <dir_register+0xb6>
 8008b1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b20:	e095      	b.n	8008c4e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008b22:	7dfa      	ldrb	r2, [r7, #23]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
 8008b2c:	f003 0302 	and.w	r3, r3, #2
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d007      	beq.n	8008b44 <dir_register+0xd8>
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	330c      	adds	r3, #12
 8008b38:	4a47      	ldr	r2, [pc, #284]	; (8008c58 <dir_register+0x1ec>)
 8008b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3e:	089b      	lsrs	r3, r3, #2
 8008b40:	3301      	adds	r3, #1
 8008b42:	e000      	b.n	8008b46 <dir_register+0xda>
 8008b44:	2301      	movs	r3, #1
 8008b46:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008b48:	6a39      	ldr	r1, [r7, #32]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7ff fcbf 	bl	80084ce <dir_alloc>
 8008b50:	4603      	mov	r3, r0
 8008b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d148      	bne.n	8008bf0 <dir_register+0x184>
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	623b      	str	r3, [r7, #32]
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d042      	beq.n	8008bf0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	695a      	ldr	r2, [r3, #20]
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	015b      	lsls	r3, r3, #5
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7ff fb4a 	bl	8008210 <dir_sdi>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d132      	bne.n	8008bf0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	3324      	adds	r3, #36	; 0x24
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7ff fe8a 	bl	80088a8 <sum_sfn>
 8008b94:	4603      	mov	r3, r0
 8008b96:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	69f8      	ldr	r0, [r7, #28]
 8008ba0:	f7fe ff54 	bl	8007a4c <move_window>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d11d      	bne.n	8008bee <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	6918      	ldr	r0, [r3, #16]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a19      	ldr	r1, [r3, #32]
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	7efb      	ldrb	r3, [r7, #27]
 8008bc0:	f7ff fd7c 	bl	80086bc <put_lfn>
				fs->wflag = 1;
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008bca:	2100      	movs	r1, #0
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7ff fba8 	bl	8008322 <dir_next>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d107      	bne.n	8008bf0 <dir_register+0x184>
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	623b      	str	r3, [r7, #32]
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1d5      	bne.n	8008b98 <dir_register+0x12c>
 8008bec:	e000      	b.n	8008bf0 <dir_register+0x184>
				if (res != FR_OK) break;
 8008bee:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d128      	bne.n	8008c4a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	69f8      	ldr	r0, [r7, #28]
 8008c00:	f7fe ff24 	bl	8007a4c <move_window>
 8008c04:	4603      	mov	r3, r0
 8008c06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d11b      	bne.n	8008c4a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	2220      	movs	r2, #32
 8008c18:	2100      	movs	r1, #0
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fe fd09 	bl	8007632 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a18      	ldr	r0, [r3, #32]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	3324      	adds	r3, #36	; 0x24
 8008c28:	220b      	movs	r2, #11
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	f7fe fce0 	bl	80075f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	330c      	adds	r3, #12
 8008c3c:	f002 0218 	and.w	r2, r2, #24
 8008c40:	b2d2      	uxtb	r2, r2
 8008c42:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	2201      	movs	r2, #1
 8008c48:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3730      	adds	r7, #48	; 0x30
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	4ec4ec4f 	.word	0x4ec4ec4f

08008c5c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b08a      	sub	sp, #40	; 0x28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	613b      	str	r3, [r7, #16]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	2300      	movs	r3, #0
 8008c76:	617b      	str	r3, [r7, #20]
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	61ba      	str	r2, [r7, #24]
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	4413      	add	r3, r2
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008c8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c8c:	2b1f      	cmp	r3, #31
 8008c8e:	d940      	bls.n	8008d12 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c92:	2b2f      	cmp	r3, #47	; 0x2f
 8008c94:	d006      	beq.n	8008ca4 <create_name+0x48>
 8008c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c98:	2b5c      	cmp	r3, #92	; 0x5c
 8008c9a:	d110      	bne.n	8008cbe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008c9c:	e002      	b.n	8008ca4 <create_name+0x48>
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	61bb      	str	r3, [r7, #24]
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	4413      	add	r3, r2
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	2b2f      	cmp	r3, #47	; 0x2f
 8008cae:	d0f6      	beq.n	8008c9e <create_name+0x42>
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b5c      	cmp	r3, #92	; 0x5c
 8008cba:	d0f0      	beq.n	8008c9e <create_name+0x42>
			break;
 8008cbc:	e02a      	b.n	8008d14 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	2bfe      	cmp	r3, #254	; 0xfe
 8008cc2:	d901      	bls.n	8008cc8 <create_name+0x6c>
 8008cc4:	2306      	movs	r3, #6
 8008cc6:	e17d      	b.n	8008fc4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008cc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008cce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cd0:	2101      	movs	r1, #1
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f001 fb40 	bl	800a358 <ff_convert>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008cdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <create_name+0x8a>
 8008ce2:	2306      	movs	r3, #6
 8008ce4:	e16e      	b.n	8008fc4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8008cea:	d809      	bhi.n	8008d00 <create_name+0xa4>
 8008cec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cee:	4619      	mov	r1, r3
 8008cf0:	488d      	ldr	r0, [pc, #564]	; (8008f28 <create_name+0x2cc>)
 8008cf2:	f7fe fce0 	bl	80076b6 <chk_chr>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <create_name+0xa4>
 8008cfc:	2306      	movs	r3, #6
 8008cfe:	e161      	b.n	8008fc4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	1c5a      	adds	r2, r3, #1
 8008d04:	617a      	str	r2, [r7, #20]
 8008d06:	005b      	lsls	r3, r3, #1
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008d0e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008d10:	e7b4      	b.n	8008c7c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008d12:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	441a      	add	r2, r3
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008d1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d20:	2b1f      	cmp	r3, #31
 8008d22:	d801      	bhi.n	8008d28 <create_name+0xcc>
 8008d24:	2304      	movs	r3, #4
 8008d26:	e000      	b.n	8008d2a <create_name+0xce>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008d2e:	e011      	b.n	8008d54 <create_name+0xf8>
		w = lfn[di - 1];
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008d36:	4413      	add	r3, r2
 8008d38:	005b      	lsls	r3, r3, #1
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	881b      	ldrh	r3, [r3, #0]
 8008d40:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d44:	2b20      	cmp	r3, #32
 8008d46:	d002      	beq.n	8008d4e <create_name+0xf2>
 8008d48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d4c:	d106      	bne.n	8008d5c <create_name+0x100>
		di--;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	3b01      	subs	r3, #1
 8008d52:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1ea      	bne.n	8008d30 <create_name+0xd4>
 8008d5a:	e000      	b.n	8008d5e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008d5c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	4413      	add	r3, r2
 8008d66:	2200      	movs	r2, #0
 8008d68:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <create_name+0x118>
 8008d70:	2306      	movs	r3, #6
 8008d72:	e127      	b.n	8008fc4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3324      	adds	r3, #36	; 0x24
 8008d78:	220b      	movs	r2, #11
 8008d7a:	2120      	movs	r1, #32
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fe fc58 	bl	8007632 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008d82:	2300      	movs	r3, #0
 8008d84:	61bb      	str	r3, [r7, #24]
 8008d86:	e002      	b.n	8008d8e <create_name+0x132>
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	61bb      	str	r3, [r7, #24]
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	4413      	add	r3, r2
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	2b20      	cmp	r3, #32
 8008d9a:	d0f5      	beq.n	8008d88 <create_name+0x12c>
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	005b      	lsls	r3, r3, #1
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	4413      	add	r3, r2
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	2b2e      	cmp	r3, #46	; 0x2e
 8008da8:	d0ee      	beq.n	8008d88 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d009      	beq.n	8008dc4 <create_name+0x168>
 8008db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008db4:	f043 0303 	orr.w	r3, r3, #3
 8008db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008dbc:	e002      	b.n	8008dc4 <create_name+0x168>
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	617b      	str	r3, [r7, #20]
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d009      	beq.n	8008dde <create_name+0x182>
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008dd0:	4413      	add	r3, r2
 8008dd2:	005b      	lsls	r3, r3, #1
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	2b2e      	cmp	r3, #46	; 0x2e
 8008ddc:	d1ef      	bne.n	8008dbe <create_name+0x162>

	i = b = 0; ni = 8;
 8008dde:	2300      	movs	r3, #0
 8008de0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008de4:	2300      	movs	r3, #0
 8008de6:	623b      	str	r3, [r7, #32]
 8008de8:	2308      	movs	r3, #8
 8008dea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	61ba      	str	r2, [r7, #24]
 8008df2:	005b      	lsls	r3, r3, #1
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008dfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 8090 	beq.w	8008f24 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008e04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	d006      	beq.n	8008e18 <create_name+0x1bc>
 8008e0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8008e0e:	d10a      	bne.n	8008e26 <create_name+0x1ca>
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d006      	beq.n	8008e26 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e1c:	f043 0303 	orr.w	r3, r3, #3
 8008e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e24:	e07d      	b.n	8008f22 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008e26:	6a3a      	ldr	r2, [r7, #32]
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d203      	bcs.n	8008e36 <create_name+0x1da>
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d123      	bne.n	8008e7e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	2b0b      	cmp	r3, #11
 8008e3a:	d106      	bne.n	8008e4a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e40:	f043 0303 	orr.w	r3, r3, #3
 8008e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e48:	e075      	b.n	8008f36 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d005      	beq.n	8008e5e <create_name+0x202>
 8008e52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e56:	f043 0303 	orr.w	r3, r3, #3
 8008e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d866      	bhi.n	8008f34 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	61bb      	str	r3, [r7, #24]
 8008e6a:	2308      	movs	r3, #8
 8008e6c:	623b      	str	r3, [r7, #32]
 8008e6e:	230b      	movs	r3, #11
 8008e70:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008e72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008e7c:	e051      	b.n	8008f22 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e80:	2b7f      	cmp	r3, #127	; 0x7f
 8008e82:	d914      	bls.n	8008eae <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008e84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e86:	2100      	movs	r1, #0
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f001 fa65 	bl	800a358 <ff_convert>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008e92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d004      	beq.n	8008ea2 <create_name+0x246>
 8008e98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e9a:	3b80      	subs	r3, #128	; 0x80
 8008e9c:	4a23      	ldr	r2, [pc, #140]	; (8008f2c <create_name+0x2d0>)
 8008e9e:	5cd3      	ldrb	r3, [r2, r3]
 8008ea0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ea6:	f043 0302 	orr.w	r3, r3, #2
 8008eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008eae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d007      	beq.n	8008ec4 <create_name+0x268>
 8008eb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	481d      	ldr	r0, [pc, #116]	; (8008f30 <create_name+0x2d4>)
 8008eba:	f7fe fbfc 	bl	80076b6 <chk_chr>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d008      	beq.n	8008ed6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008ec4:	235f      	movs	r3, #95	; 0x5f
 8008ec6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ecc:	f043 0303 	orr.w	r3, r3, #3
 8008ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ed4:	e01b      	b.n	8008f0e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008ed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ed8:	2b40      	cmp	r3, #64	; 0x40
 8008eda:	d909      	bls.n	8008ef0 <create_name+0x294>
 8008edc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ede:	2b5a      	cmp	r3, #90	; 0x5a
 8008ee0:	d806      	bhi.n	8008ef0 <create_name+0x294>
					b |= 2;
 8008ee2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ee6:	f043 0302 	orr.w	r3, r3, #2
 8008eea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008eee:	e00e      	b.n	8008f0e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008ef0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ef2:	2b60      	cmp	r3, #96	; 0x60
 8008ef4:	d90b      	bls.n	8008f0e <create_name+0x2b2>
 8008ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ef8:	2b7a      	cmp	r3, #122	; 0x7a
 8008efa:	d808      	bhi.n	8008f0e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008efc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f00:	f043 0301 	orr.w	r3, r3, #1
 8008f04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008f08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f0a:	3b20      	subs	r3, #32
 8008f0c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	623a      	str	r2, [r7, #32]
 8008f14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008f16:	b2d1      	uxtb	r1, r2
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	460a      	mov	r2, r1
 8008f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008f22:	e763      	b.n	8008dec <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008f24:	bf00      	nop
 8008f26:	e006      	b.n	8008f36 <create_name+0x2da>
 8008f28:	0800ec90 	.word	0x0800ec90
 8008f2c:	0800ecf8 	.word	0x0800ecf8
 8008f30:	0800ec9c 	.word	0x0800ec9c
			if (si > di) break;			/* No extension */
 8008f34:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f3c:	2be5      	cmp	r3, #229	; 0xe5
 8008f3e:	d103      	bne.n	8008f48 <create_name+0x2ec>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2205      	movs	r2, #5
 8008f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	2b08      	cmp	r3, #8
 8008f4c:	d104      	bne.n	8008f58 <create_name+0x2fc>
 8008f4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008f58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f5c:	f003 030c 	and.w	r3, r3, #12
 8008f60:	2b0c      	cmp	r3, #12
 8008f62:	d005      	beq.n	8008f70 <create_name+0x314>
 8008f64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f68:	f003 0303 	and.w	r3, r3, #3
 8008f6c:	2b03      	cmp	r3, #3
 8008f6e:	d105      	bne.n	8008f7c <create_name+0x320>
 8008f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f74:	f043 0302 	orr.w	r3, r3, #2
 8008f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d117      	bne.n	8008fb8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008f88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f8c:	f003 0303 	and.w	r3, r3, #3
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d105      	bne.n	8008fa0 <create_name+0x344>
 8008f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f98:	f043 0310 	orr.w	r3, r3, #16
 8008f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008fa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008fa4:	f003 030c 	and.w	r3, r3, #12
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	d105      	bne.n	8008fb8 <create_name+0x35c>
 8008fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fb0:	f043 0308 	orr.w	r3, r3, #8
 8008fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008fbe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8008fc2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3728      	adds	r7, #40	; 0x28
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008fe0:	e002      	b.n	8008fe8 <follow_path+0x1c>
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	603b      	str	r3, [r7, #0]
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b2f      	cmp	r3, #47	; 0x2f
 8008fee:	d0f8      	beq.n	8008fe2 <follow_path+0x16>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	2b5c      	cmp	r3, #92	; 0x5c
 8008ff6:	d0f4      	beq.n	8008fe2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	2b1f      	cmp	r3, #31
 8009004:	d80a      	bhi.n	800901c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2280      	movs	r2, #128	; 0x80
 800900a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800900e:	2100      	movs	r1, #0
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff f8fd 	bl	8008210 <dir_sdi>
 8009016:	4603      	mov	r3, r0
 8009018:	75fb      	strb	r3, [r7, #23]
 800901a:	e048      	b.n	80090ae <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800901c:	463b      	mov	r3, r7
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f7ff fe1b 	bl	8008c5c <create_name>
 8009026:	4603      	mov	r3, r0
 8009028:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d139      	bne.n	80090a4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7ff fc5a 	bl	80088ea <dir_find>
 8009036:	4603      	mov	r3, r0
 8009038:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009040:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009042:	7dfb      	ldrb	r3, [r7, #23]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00a      	beq.n	800905e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009048:	7dfb      	ldrb	r3, [r7, #23]
 800904a:	2b04      	cmp	r3, #4
 800904c:	d12c      	bne.n	80090a8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800904e:	7afb      	ldrb	r3, [r7, #11]
 8009050:	f003 0304 	and.w	r3, r3, #4
 8009054:	2b00      	cmp	r3, #0
 8009056:	d127      	bne.n	80090a8 <follow_path+0xdc>
 8009058:	2305      	movs	r3, #5
 800905a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800905c:	e024      	b.n	80090a8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800905e:	7afb      	ldrb	r3, [r7, #11]
 8009060:	f003 0304 	and.w	r3, r3, #4
 8009064:	2b00      	cmp	r3, #0
 8009066:	d121      	bne.n	80090ac <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	799b      	ldrb	r3, [r3, #6]
 800906c:	f003 0310 	and.w	r3, r3, #16
 8009070:	2b00      	cmp	r3, #0
 8009072:	d102      	bne.n	800907a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009074:	2305      	movs	r3, #5
 8009076:	75fb      	strb	r3, [r7, #23]
 8009078:	e019      	b.n	80090ae <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	8992      	ldrh	r2, [r2, #12]
 8009088:	fbb3 f0f2 	udiv	r0, r3, r2
 800908c:	fb00 f202 	mul.w	r2, r0, r2
 8009090:	1a9b      	subs	r3, r3, r2
 8009092:	440b      	add	r3, r1
 8009094:	4619      	mov	r1, r3
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f7ff fa60 	bl	800855c <ld_clust>
 800909c:	4602      	mov	r2, r0
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80090a2:	e7bb      	b.n	800901c <follow_path+0x50>
			if (res != FR_OK) break;
 80090a4:	bf00      	nop
 80090a6:	e002      	b.n	80090ae <follow_path+0xe2>
				break;
 80090a8:	bf00      	nop
 80090aa:	e000      	b.n	80090ae <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80090ac:	bf00      	nop
			}
		}
	}

	return res;
 80090ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3718      	adds	r7, #24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b087      	sub	sp, #28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80090c0:	f04f 33ff 	mov.w	r3, #4294967295
 80090c4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d031      	beq.n	8009132 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	e002      	b.n	80090dc <get_ldnumber+0x24>
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	3301      	adds	r3, #1
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	2b1f      	cmp	r3, #31
 80090e2:	d903      	bls.n	80090ec <get_ldnumber+0x34>
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b3a      	cmp	r3, #58	; 0x3a
 80090ea:	d1f4      	bne.n	80090d6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	2b3a      	cmp	r3, #58	; 0x3a
 80090f2:	d11c      	bne.n	800912e <get_ldnumber+0x76>
			tp = *path;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	60fa      	str	r2, [r7, #12]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	3b30      	subs	r3, #48	; 0x30
 8009104:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2b09      	cmp	r3, #9
 800910a:	d80e      	bhi.n	800912a <get_ldnumber+0x72>
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	429a      	cmp	r2, r3
 8009112:	d10a      	bne.n	800912a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d107      	bne.n	800912a <get_ldnumber+0x72>
					vol = (int)i;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	3301      	adds	r3, #1
 8009122:	617b      	str	r3, [r7, #20]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	e002      	b.n	8009134 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800912e:	2300      	movs	r3, #0
 8009130:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009132:	693b      	ldr	r3, [r7, #16]
}
 8009134:	4618      	mov	r0, r3
 8009136:	371c      	adds	r7, #28
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	70da      	strb	r2, [r3, #3]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f04f 32ff 	mov.w	r2, #4294967295
 8009156:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7fe fc76 	bl	8007a4c <move_window>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <check_fs+0x2a>
 8009166:	2304      	movs	r3, #4
 8009168:	e038      	b.n	80091dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	3338      	adds	r3, #56	; 0x38
 800916e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe f9ba 	bl	80074ec <ld_word>
 8009178:	4603      	mov	r3, r0
 800917a:	461a      	mov	r2, r3
 800917c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009180:	429a      	cmp	r2, r3
 8009182:	d001      	beq.n	8009188 <check_fs+0x48>
 8009184:	2303      	movs	r3, #3
 8009186:	e029      	b.n	80091dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800918e:	2be9      	cmp	r3, #233	; 0xe9
 8009190:	d009      	beq.n	80091a6 <check_fs+0x66>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009198:	2beb      	cmp	r3, #235	; 0xeb
 800919a:	d11e      	bne.n	80091da <check_fs+0x9a>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80091a2:	2b90      	cmp	r3, #144	; 0x90
 80091a4:	d119      	bne.n	80091da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	3338      	adds	r3, #56	; 0x38
 80091aa:	3336      	adds	r3, #54	; 0x36
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fe f9b5 	bl	800751c <ld_dword>
 80091b2:	4603      	mov	r3, r0
 80091b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80091b8:	4a0a      	ldr	r2, [pc, #40]	; (80091e4 <check_fs+0xa4>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d101      	bne.n	80091c2 <check_fs+0x82>
 80091be:	2300      	movs	r3, #0
 80091c0:	e00c      	b.n	80091dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	3338      	adds	r3, #56	; 0x38
 80091c6:	3352      	adds	r3, #82	; 0x52
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fe f9a7 	bl	800751c <ld_dword>
 80091ce:	4603      	mov	r3, r0
 80091d0:	4a05      	ldr	r2, [pc, #20]	; (80091e8 <check_fs+0xa8>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d101      	bne.n	80091da <check_fs+0x9a>
 80091d6:	2300      	movs	r3, #0
 80091d8:	e000      	b.n	80091dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80091da:	2302      	movs	r3, #2
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	00544146 	.word	0x00544146
 80091e8:	33544146 	.word	0x33544146

080091ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b096      	sub	sp, #88	; 0x58
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	4613      	mov	r3, r2
 80091f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f7ff ff59 	bl	80090b8 <get_ldnumber>
 8009206:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800920a:	2b00      	cmp	r3, #0
 800920c:	da01      	bge.n	8009212 <find_volume+0x26>
 800920e:	230b      	movs	r3, #11
 8009210:	e265      	b.n	80096de <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009212:	4a9f      	ldr	r2, [pc, #636]	; (8009490 <find_volume+0x2a4>)
 8009214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800921a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800921c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <find_volume+0x3a>
 8009222:	230c      	movs	r3, #12
 8009224:	e25b      	b.n	80096de <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800922a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800922c:	79fb      	ldrb	r3, [r7, #7]
 800922e:	f023 0301 	bic.w	r3, r3, #1
 8009232:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d01a      	beq.n	8009272 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800923c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923e:	785b      	ldrb	r3, [r3, #1]
 8009240:	4618      	mov	r0, r3
 8009242:	f7fe f8b5 	bl	80073b0 <disk_status>
 8009246:	4603      	mov	r3, r0
 8009248:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800924c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10c      	bne.n	8009272 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009258:	79fb      	ldrb	r3, [r7, #7]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d007      	beq.n	800926e <find_volume+0x82>
 800925e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009262:	f003 0304 	and.w	r3, r3, #4
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800926a:	230a      	movs	r3, #10
 800926c:	e237      	b.n	80096de <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800926e:	2300      	movs	r3, #0
 8009270:	e235      	b.n	80096de <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009274:	2200      	movs	r2, #0
 8009276:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800927a:	b2da      	uxtb	r2, r3
 800927c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009282:	785b      	ldrb	r3, [r3, #1]
 8009284:	4618      	mov	r0, r3
 8009286:	f7fe f8ad 	bl	80073e4 <disk_initialize>
 800928a:	4603      	mov	r3, r0
 800928c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009290:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b00      	cmp	r3, #0
 800929a:	d001      	beq.n	80092a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800929c:	2303      	movs	r3, #3
 800929e:	e21e      	b.n	80096de <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d007      	beq.n	80092b6 <find_volume+0xca>
 80092a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092aa:	f003 0304 	and.w	r3, r3, #4
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80092b2:	230a      	movs	r3, #10
 80092b4:	e213      	b.n	80096de <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80092b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b8:	7858      	ldrb	r0, [r3, #1]
 80092ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092bc:	330c      	adds	r3, #12
 80092be:	461a      	mov	r2, r3
 80092c0:	2102      	movs	r1, #2
 80092c2:	f7fe f8f5 	bl	80074b0 <disk_ioctl>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <find_volume+0xe4>
 80092cc:	2301      	movs	r3, #1
 80092ce:	e206      	b.n	80096de <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80092d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d2:	899b      	ldrh	r3, [r3, #12]
 80092d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092d8:	d80d      	bhi.n	80092f6 <find_volume+0x10a>
 80092da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092dc:	899b      	ldrh	r3, [r3, #12]
 80092de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092e2:	d308      	bcc.n	80092f6 <find_volume+0x10a>
 80092e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e6:	899b      	ldrh	r3, [r3, #12]
 80092e8:	461a      	mov	r2, r3
 80092ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ec:	899b      	ldrh	r3, [r3, #12]
 80092ee:	3b01      	subs	r3, #1
 80092f0:	4013      	ands	r3, r2
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <find_volume+0x10e>
 80092f6:	2301      	movs	r3, #1
 80092f8:	e1f1      	b.n	80096de <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80092fa:	2300      	movs	r3, #0
 80092fc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80092fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009300:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009302:	f7ff ff1d 	bl	8009140 <check_fs>
 8009306:	4603      	mov	r3, r0
 8009308:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800930c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009310:	2b02      	cmp	r3, #2
 8009312:	d149      	bne.n	80093a8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009314:	2300      	movs	r3, #0
 8009316:	643b      	str	r3, [r7, #64]	; 0x40
 8009318:	e01e      	b.n	8009358 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009322:	011b      	lsls	r3, r3, #4
 8009324:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009328:	4413      	add	r3, r2
 800932a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800932c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932e:	3304      	adds	r3, #4
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d006      	beq.n	8009344 <find_volume+0x158>
 8009336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009338:	3308      	adds	r3, #8
 800933a:	4618      	mov	r0, r3
 800933c:	f7fe f8ee 	bl	800751c <ld_dword>
 8009340:	4602      	mov	r2, r0
 8009342:	e000      	b.n	8009346 <find_volume+0x15a>
 8009344:	2200      	movs	r2, #0
 8009346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	3358      	adds	r3, #88	; 0x58
 800934c:	443b      	add	r3, r7
 800934e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009354:	3301      	adds	r3, #1
 8009356:	643b      	str	r3, [r7, #64]	; 0x40
 8009358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800935a:	2b03      	cmp	r3, #3
 800935c:	d9dd      	bls.n	800931a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800935e:	2300      	movs	r3, #0
 8009360:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <find_volume+0x182>
 8009368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800936a:	3b01      	subs	r3, #1
 800936c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800936e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	3358      	adds	r3, #88	; 0x58
 8009374:	443b      	add	r3, r7
 8009376:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800937a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800937c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800937e:	2b00      	cmp	r3, #0
 8009380:	d005      	beq.n	800938e <find_volume+0x1a2>
 8009382:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009384:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009386:	f7ff fedb 	bl	8009140 <check_fs>
 800938a:	4603      	mov	r3, r0
 800938c:	e000      	b.n	8009390 <find_volume+0x1a4>
 800938e:	2303      	movs	r3, #3
 8009390:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009394:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009398:	2b01      	cmp	r3, #1
 800939a:	d905      	bls.n	80093a8 <find_volume+0x1bc>
 800939c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800939e:	3301      	adds	r3, #1
 80093a0:	643b      	str	r3, [r7, #64]	; 0x40
 80093a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093a4:	2b03      	cmp	r3, #3
 80093a6:	d9e2      	bls.n	800936e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80093a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093ac:	2b04      	cmp	r3, #4
 80093ae:	d101      	bne.n	80093b4 <find_volume+0x1c8>
 80093b0:	2301      	movs	r3, #1
 80093b2:	e194      	b.n	80096de <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80093b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d901      	bls.n	80093c0 <find_volume+0x1d4>
 80093bc:	230d      	movs	r3, #13
 80093be:	e18e      	b.n	80096de <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80093c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c2:	3338      	adds	r3, #56	; 0x38
 80093c4:	330b      	adds	r3, #11
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fe f890 	bl	80074ec <ld_word>
 80093cc:	4603      	mov	r3, r0
 80093ce:	461a      	mov	r2, r3
 80093d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d2:	899b      	ldrh	r3, [r3, #12]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d001      	beq.n	80093dc <find_volume+0x1f0>
 80093d8:	230d      	movs	r3, #13
 80093da:	e180      	b.n	80096de <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80093dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093de:	3338      	adds	r3, #56	; 0x38
 80093e0:	3316      	adds	r3, #22
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe f882 	bl	80074ec <ld_word>
 80093e8:	4603      	mov	r3, r0
 80093ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80093ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d106      	bne.n	8009400 <find_volume+0x214>
 80093f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f4:	3338      	adds	r3, #56	; 0x38
 80093f6:	3324      	adds	r3, #36	; 0x24
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe f88f 	bl	800751c <ld_dword>
 80093fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009402:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009404:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009408:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009412:	789b      	ldrb	r3, [r3, #2]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d005      	beq.n	8009424 <find_volume+0x238>
 8009418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941a:	789b      	ldrb	r3, [r3, #2]
 800941c:	2b02      	cmp	r3, #2
 800941e:	d001      	beq.n	8009424 <find_volume+0x238>
 8009420:	230d      	movs	r3, #13
 8009422:	e15c      	b.n	80096de <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	789b      	ldrb	r3, [r3, #2]
 8009428:	461a      	mov	r2, r3
 800942a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800942c:	fb02 f303 	mul.w	r3, r2, r3
 8009430:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009438:	b29a      	uxth	r2, r3
 800943a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	895b      	ldrh	r3, [r3, #10]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d008      	beq.n	8009458 <find_volume+0x26c>
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	895b      	ldrh	r3, [r3, #10]
 800944a:	461a      	mov	r2, r3
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	895b      	ldrh	r3, [r3, #10]
 8009450:	3b01      	subs	r3, #1
 8009452:	4013      	ands	r3, r2
 8009454:	2b00      	cmp	r3, #0
 8009456:	d001      	beq.n	800945c <find_volume+0x270>
 8009458:	230d      	movs	r3, #13
 800945a:	e140      	b.n	80096de <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800945c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945e:	3338      	adds	r3, #56	; 0x38
 8009460:	3311      	adds	r3, #17
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe f842 	bl	80074ec <ld_word>
 8009468:	4603      	mov	r3, r0
 800946a:	461a      	mov	r2, r3
 800946c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009472:	891b      	ldrh	r3, [r3, #8]
 8009474:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009476:	8992      	ldrh	r2, [r2, #12]
 8009478:	0952      	lsrs	r2, r2, #5
 800947a:	b292      	uxth	r2, r2
 800947c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009480:	fb01 f202 	mul.w	r2, r1, r2
 8009484:	1a9b      	subs	r3, r3, r2
 8009486:	b29b      	uxth	r3, r3
 8009488:	2b00      	cmp	r3, #0
 800948a:	d003      	beq.n	8009494 <find_volume+0x2a8>
 800948c:	230d      	movs	r3, #13
 800948e:	e126      	b.n	80096de <find_volume+0x4f2>
 8009490:	20002758 	.word	0x20002758

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009496:	3338      	adds	r3, #56	; 0x38
 8009498:	3313      	adds	r3, #19
 800949a:	4618      	mov	r0, r3
 800949c:	f7fe f826 	bl	80074ec <ld_word>
 80094a0:	4603      	mov	r3, r0
 80094a2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80094a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d106      	bne.n	80094b8 <find_volume+0x2cc>
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	3338      	adds	r3, #56	; 0x38
 80094ae:	3320      	adds	r3, #32
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fe f833 	bl	800751c <ld_dword>
 80094b6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80094b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ba:	3338      	adds	r3, #56	; 0x38
 80094bc:	330e      	adds	r3, #14
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe f814 	bl	80074ec <ld_word>
 80094c4:	4603      	mov	r3, r0
 80094c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80094c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d101      	bne.n	80094d2 <find_volume+0x2e6>
 80094ce:	230d      	movs	r3, #13
 80094d0:	e105      	b.n	80096de <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80094d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80094d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d6:	4413      	add	r3, r2
 80094d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094da:	8911      	ldrh	r1, [r2, #8]
 80094dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094de:	8992      	ldrh	r2, [r2, #12]
 80094e0:	0952      	lsrs	r2, r2, #5
 80094e2:	b292      	uxth	r2, r2
 80094e4:	fbb1 f2f2 	udiv	r2, r1, r2
 80094e8:	b292      	uxth	r2, r2
 80094ea:	4413      	add	r3, r2
 80094ec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80094ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d201      	bcs.n	80094fa <find_volume+0x30e>
 80094f6:	230d      	movs	r3, #13
 80094f8:	e0f1      	b.n	80096de <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80094fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009502:	8952      	ldrh	r2, [r2, #10]
 8009504:	fbb3 f3f2 	udiv	r3, r3, r2
 8009508:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800950a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950c:	2b00      	cmp	r3, #0
 800950e:	d101      	bne.n	8009514 <find_volume+0x328>
 8009510:	230d      	movs	r3, #13
 8009512:	e0e4      	b.n	80096de <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009514:	2303      	movs	r3, #3
 8009516:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800951a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009520:	4293      	cmp	r3, r2
 8009522:	d802      	bhi.n	800952a <find_volume+0x33e>
 8009524:	2302      	movs	r3, #2
 8009526:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009530:	4293      	cmp	r3, r2
 8009532:	d802      	bhi.n	800953a <find_volume+0x34e>
 8009534:	2301      	movs	r3, #1
 8009536:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	1c9a      	adds	r2, r3, #2
 800953e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009540:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009544:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009546:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009548:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800954a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800954c:	441a      	add	r2, r3
 800954e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009550:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009552:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	441a      	add	r2, r3
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800955c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009560:	2b03      	cmp	r3, #3
 8009562:	d11e      	bne.n	80095a2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009566:	3338      	adds	r3, #56	; 0x38
 8009568:	332a      	adds	r3, #42	; 0x2a
 800956a:	4618      	mov	r0, r3
 800956c:	f7fd ffbe 	bl	80074ec <ld_word>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <find_volume+0x38e>
 8009576:	230d      	movs	r3, #13
 8009578:	e0b1      	b.n	80096de <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800957a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957c:	891b      	ldrh	r3, [r3, #8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <find_volume+0x39a>
 8009582:	230d      	movs	r3, #13
 8009584:	e0ab      	b.n	80096de <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009588:	3338      	adds	r3, #56	; 0x38
 800958a:	332c      	adds	r3, #44	; 0x2c
 800958c:	4618      	mov	r0, r3
 800958e:	f7fd ffc5 	bl	800751c <ld_dword>
 8009592:	4602      	mov	r2, r0
 8009594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009596:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959a:	69db      	ldr	r3, [r3, #28]
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	647b      	str	r3, [r7, #68]	; 0x44
 80095a0:	e01f      	b.n	80095e2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80095a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a4:	891b      	ldrh	r3, [r3, #8]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <find_volume+0x3c2>
 80095aa:	230d      	movs	r3, #13
 80095ac:	e097      	b.n	80096de <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80095ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095b4:	441a      	add	r2, r3
 80095b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80095ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d103      	bne.n	80095ca <find_volume+0x3de>
 80095c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c4:	69db      	ldr	r3, [r3, #28]
 80095c6:	005b      	lsls	r3, r3, #1
 80095c8:	e00a      	b.n	80095e0 <find_volume+0x3f4>
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	69da      	ldr	r2, [r3, #28]
 80095ce:	4613      	mov	r3, r2
 80095d0:	005b      	lsls	r3, r3, #1
 80095d2:	4413      	add	r3, r2
 80095d4:	085a      	lsrs	r2, r3, #1
 80095d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d8:	69db      	ldr	r3, [r3, #28]
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80095e0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80095e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e4:	6a1a      	ldr	r2, [r3, #32]
 80095e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e8:	899b      	ldrh	r3, [r3, #12]
 80095ea:	4619      	mov	r1, r3
 80095ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ee:	440b      	add	r3, r1
 80095f0:	3b01      	subs	r3, #1
 80095f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095f4:	8989      	ldrh	r1, [r1, #12]
 80095f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d201      	bcs.n	8009602 <find_volume+0x416>
 80095fe:	230d      	movs	r3, #13
 8009600:	e06d      	b.n	80096de <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009604:	f04f 32ff 	mov.w	r2, #4294967295
 8009608:	619a      	str	r2, [r3, #24]
 800960a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960c:	699a      	ldr	r2, [r3, #24]
 800960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009610:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009614:	2280      	movs	r2, #128	; 0x80
 8009616:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009618:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800961c:	2b03      	cmp	r3, #3
 800961e:	d149      	bne.n	80096b4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	3338      	adds	r3, #56	; 0x38
 8009624:	3330      	adds	r3, #48	; 0x30
 8009626:	4618      	mov	r0, r3
 8009628:	f7fd ff60 	bl	80074ec <ld_word>
 800962c:	4603      	mov	r3, r0
 800962e:	2b01      	cmp	r3, #1
 8009630:	d140      	bne.n	80096b4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009634:	3301      	adds	r3, #1
 8009636:	4619      	mov	r1, r3
 8009638:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800963a:	f7fe fa07 	bl	8007a4c <move_window>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d137      	bne.n	80096b4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009646:	2200      	movs	r2, #0
 8009648:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800964a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964c:	3338      	adds	r3, #56	; 0x38
 800964e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009652:	4618      	mov	r0, r3
 8009654:	f7fd ff4a 	bl	80074ec <ld_word>
 8009658:	4603      	mov	r3, r0
 800965a:	461a      	mov	r2, r3
 800965c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009660:	429a      	cmp	r2, r3
 8009662:	d127      	bne.n	80096b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009666:	3338      	adds	r3, #56	; 0x38
 8009668:	4618      	mov	r0, r3
 800966a:	f7fd ff57 	bl	800751c <ld_dword>
 800966e:	4603      	mov	r3, r0
 8009670:	4a1d      	ldr	r2, [pc, #116]	; (80096e8 <find_volume+0x4fc>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d11e      	bne.n	80096b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009678:	3338      	adds	r3, #56	; 0x38
 800967a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800967e:	4618      	mov	r0, r3
 8009680:	f7fd ff4c 	bl	800751c <ld_dword>
 8009684:	4603      	mov	r3, r0
 8009686:	4a19      	ldr	r2, [pc, #100]	; (80096ec <find_volume+0x500>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d113      	bne.n	80096b4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800968c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968e:	3338      	adds	r3, #56	; 0x38
 8009690:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009694:	4618      	mov	r0, r3
 8009696:	f7fd ff41 	bl	800751c <ld_dword>
 800969a:	4602      	mov	r2, r0
 800969c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80096a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a2:	3338      	adds	r3, #56	; 0x38
 80096a4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fd ff37 	bl	800751c <ld_dword>
 80096ae:	4602      	mov	r2, r0
 80096b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80096b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80096ba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80096bc:	4b0c      	ldr	r3, [pc, #48]	; (80096f0 <find_volume+0x504>)
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	3301      	adds	r3, #1
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	4b0a      	ldr	r3, [pc, #40]	; (80096f0 <find_volume+0x504>)
 80096c6:	801a      	strh	r2, [r3, #0]
 80096c8:	4b09      	ldr	r3, [pc, #36]	; (80096f0 <find_volume+0x504>)
 80096ca:	881a      	ldrh	r2, [r3, #0]
 80096cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ce:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	4a08      	ldr	r2, [pc, #32]	; (80096f4 <find_volume+0x508>)
 80096d4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80096d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096d8:	f7fe f950 	bl	800797c <clear_lock>
#endif
	return FR_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3758      	adds	r7, #88	; 0x58
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	41615252 	.word	0x41615252
 80096ec:	61417272 	.word	0x61417272
 80096f0:	2000275c 	.word	0x2000275c
 80096f4:	20002780 	.word	0x20002780

080096f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009702:	2309      	movs	r3, #9
 8009704:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d01c      	beq.n	8009746 <validate+0x4e>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d018      	beq.n	8009746 <validate+0x4e>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d013      	beq.n	8009746 <validate+0x4e>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	889a      	ldrh	r2, [r3, #4]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	88db      	ldrh	r3, [r3, #6]
 8009728:	429a      	cmp	r2, r3
 800972a:	d10c      	bne.n	8009746 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	785b      	ldrb	r3, [r3, #1]
 8009732:	4618      	mov	r0, r3
 8009734:	f7fd fe3c 	bl	80073b0 <disk_status>
 8009738:	4603      	mov	r3, r0
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <validate+0x4e>
			res = FR_OK;
 8009742:	2300      	movs	r3, #0
 8009744:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009746:	7bfb      	ldrb	r3, [r7, #15]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d102      	bne.n	8009752 <validate+0x5a>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	e000      	b.n	8009754 <validate+0x5c>
 8009752:	2300      	movs	r3, #0
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	6013      	str	r3, [r2, #0]
	return res;
 8009758:	7bfb      	ldrb	r3, [r7, #15]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b088      	sub	sp, #32
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	4613      	mov	r3, r2
 8009770:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009776:	f107 0310 	add.w	r3, r7, #16
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff fc9c 	bl	80090b8 <get_ldnumber>
 8009780:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	2b00      	cmp	r3, #0
 8009786:	da01      	bge.n	800978c <f_mount+0x28>
 8009788:	230b      	movs	r3, #11
 800978a:	e02b      	b.n	80097e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800978c:	4a17      	ldr	r2, [pc, #92]	; (80097ec <f_mount+0x88>)
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009794:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d005      	beq.n	80097a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800979c:	69b8      	ldr	r0, [r7, #24]
 800979e:	f7fe f8ed 	bl	800797c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	2200      	movs	r2, #0
 80097a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d002      	beq.n	80097b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	490d      	ldr	r1, [pc, #52]	; (80097ec <f_mount+0x88>)
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d002      	beq.n	80097ca <f_mount+0x66>
 80097c4:	79fb      	ldrb	r3, [r7, #7]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d001      	beq.n	80097ce <f_mount+0x6a>
 80097ca:	2300      	movs	r3, #0
 80097cc:	e00a      	b.n	80097e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80097ce:	f107 010c 	add.w	r1, r7, #12
 80097d2:	f107 0308 	add.w	r3, r7, #8
 80097d6:	2200      	movs	r2, #0
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff fd07 	bl	80091ec <find_volume>
 80097de:	4603      	mov	r3, r0
 80097e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80097e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3720      	adds	r7, #32
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	20002758 	.word	0x20002758

080097f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b09a      	sub	sp, #104	; 0x68
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	4613      	mov	r3, r2
 80097fc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d101      	bne.n	8009808 <f_open+0x18>
 8009804:	2309      	movs	r3, #9
 8009806:	e1bb      	b.n	8009b80 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009808:	79fb      	ldrb	r3, [r7, #7]
 800980a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800980e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009810:	79fa      	ldrb	r2, [r7, #7]
 8009812:	f107 0114 	add.w	r1, r7, #20
 8009816:	f107 0308 	add.w	r3, r7, #8
 800981a:	4618      	mov	r0, r3
 800981c:	f7ff fce6 	bl	80091ec <find_volume>
 8009820:	4603      	mov	r3, r0
 8009822:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009826:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800982a:	2b00      	cmp	r3, #0
 800982c:	f040 819f 	bne.w	8009b6e <f_open+0x37e>
		dj.obj.fs = fs;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	f107 0318 	add.w	r3, r7, #24
 800983a:	4611      	mov	r1, r2
 800983c:	4618      	mov	r0, r3
 800983e:	f7ff fbc5 	bl	8008fcc <follow_path>
 8009842:	4603      	mov	r3, r0
 8009844:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009848:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800984c:	2b00      	cmp	r3, #0
 800984e:	d11a      	bne.n	8009886 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009850:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009854:	b25b      	sxtb	r3, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	da03      	bge.n	8009862 <f_open+0x72>
				res = FR_INVALID_NAME;
 800985a:	2306      	movs	r3, #6
 800985c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009860:	e011      	b.n	8009886 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009862:	79fb      	ldrb	r3, [r7, #7]
 8009864:	f023 0301 	bic.w	r3, r3, #1
 8009868:	2b00      	cmp	r3, #0
 800986a:	bf14      	ite	ne
 800986c:	2301      	movne	r3, #1
 800986e:	2300      	moveq	r3, #0
 8009870:	b2db      	uxtb	r3, r3
 8009872:	461a      	mov	r2, r3
 8009874:	f107 0318 	add.w	r3, r7, #24
 8009878:	4611      	mov	r1, r2
 800987a:	4618      	mov	r0, r3
 800987c:	f7fd ff36 	bl	80076ec <chk_lock>
 8009880:	4603      	mov	r3, r0
 8009882:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009886:	79fb      	ldrb	r3, [r7, #7]
 8009888:	f003 031c 	and.w	r3, r3, #28
 800988c:	2b00      	cmp	r3, #0
 800988e:	d07f      	beq.n	8009990 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009890:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009894:	2b00      	cmp	r3, #0
 8009896:	d017      	beq.n	80098c8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009898:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800989c:	2b04      	cmp	r3, #4
 800989e:	d10e      	bne.n	80098be <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80098a0:	f7fd ff80 	bl	80077a4 <enq_lock>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d006      	beq.n	80098b8 <f_open+0xc8>
 80098aa:	f107 0318 	add.w	r3, r7, #24
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7ff f8dc 	bl	8008a6c <dir_register>
 80098b4:	4603      	mov	r3, r0
 80098b6:	e000      	b.n	80098ba <f_open+0xca>
 80098b8:	2312      	movs	r3, #18
 80098ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80098be:	79fb      	ldrb	r3, [r7, #7]
 80098c0:	f043 0308 	orr.w	r3, r3, #8
 80098c4:	71fb      	strb	r3, [r7, #7]
 80098c6:	e010      	b.n	80098ea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80098c8:	7fbb      	ldrb	r3, [r7, #30]
 80098ca:	f003 0311 	and.w	r3, r3, #17
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <f_open+0xea>
					res = FR_DENIED;
 80098d2:	2307      	movs	r3, #7
 80098d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80098d8:	e007      	b.n	80098ea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80098da:	79fb      	ldrb	r3, [r7, #7]
 80098dc:	f003 0304 	and.w	r3, r3, #4
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d002      	beq.n	80098ea <f_open+0xfa>
 80098e4:	2308      	movs	r3, #8
 80098e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80098ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d168      	bne.n	80099c4 <f_open+0x1d4>
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	f003 0308 	and.w	r3, r3, #8
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d063      	beq.n	80099c4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80098fc:	f7fd fcfa 	bl	80072f4 <get_fattime>
 8009900:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009904:	330e      	adds	r3, #14
 8009906:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009908:	4618      	mov	r0, r3
 800990a:	f7fd fe45 	bl	8007598 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800990e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009910:	3316      	adds	r3, #22
 8009912:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009914:	4618      	mov	r0, r3
 8009916:	f7fd fe3f 	bl	8007598 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800991a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991c:	330b      	adds	r3, #11
 800991e:	2220      	movs	r2, #32
 8009920:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009926:	4611      	mov	r1, r2
 8009928:	4618      	mov	r0, r3
 800992a:	f7fe fe17 	bl	800855c <ld_clust>
 800992e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009934:	2200      	movs	r2, #0
 8009936:	4618      	mov	r0, r3
 8009938:	f7fe fe2f 	bl	800859a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800993c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993e:	331c      	adds	r3, #28
 8009940:	2100      	movs	r1, #0
 8009942:	4618      	mov	r0, r3
 8009944:	f7fd fe28 	bl	8007598 <st_dword>
					fs->wflag = 1;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	2201      	movs	r2, #1
 800994c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800994e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009950:	2b00      	cmp	r3, #0
 8009952:	d037      	beq.n	80099c4 <f_open+0x1d4>
						dw = fs->winsect;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009958:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800995a:	f107 0318 	add.w	r3, r7, #24
 800995e:	2200      	movs	r2, #0
 8009960:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009962:	4618      	mov	r0, r3
 8009964:	f7fe fb1f 	bl	8007fa6 <remove_chain>
 8009968:	4603      	mov	r3, r0
 800996a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800996e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009972:	2b00      	cmp	r3, #0
 8009974:	d126      	bne.n	80099c4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800997a:	4618      	mov	r0, r3
 800997c:	f7fe f866 	bl	8007a4c <move_window>
 8009980:	4603      	mov	r3, r0
 8009982:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800998a:	3a01      	subs	r2, #1
 800998c:	615a      	str	r2, [r3, #20]
 800998e:	e019      	b.n	80099c4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009990:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009994:	2b00      	cmp	r3, #0
 8009996:	d115      	bne.n	80099c4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009998:	7fbb      	ldrb	r3, [r7, #30]
 800999a:	f003 0310 	and.w	r3, r3, #16
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d003      	beq.n	80099aa <f_open+0x1ba>
					res = FR_NO_FILE;
 80099a2:	2304      	movs	r3, #4
 80099a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80099a8:	e00c      	b.n	80099c4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80099aa:	79fb      	ldrb	r3, [r7, #7]
 80099ac:	f003 0302 	and.w	r3, r3, #2
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d007      	beq.n	80099c4 <f_open+0x1d4>
 80099b4:	7fbb      	ldrb	r3, [r7, #30]
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <f_open+0x1d4>
						res = FR_DENIED;
 80099be:	2307      	movs	r3, #7
 80099c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80099c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d128      	bne.n	8009a1e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80099cc:	79fb      	ldrb	r3, [r7, #7]
 80099ce:	f003 0308 	and.w	r3, r3, #8
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099dc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80099e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	f023 0301 	bic.w	r3, r3, #1
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	bf14      	ite	ne
 80099f6:	2301      	movne	r3, #1
 80099f8:	2300      	moveq	r3, #0
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	461a      	mov	r2, r3
 80099fe:	f107 0318 	add.w	r3, r7, #24
 8009a02:	4611      	mov	r1, r2
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fd feef 	bl	80077e8 <inc_lock>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d102      	bne.n	8009a1e <f_open+0x22e>
 8009a18:	2302      	movs	r3, #2
 8009a1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009a1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f040 80a3 	bne.w	8009b6e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a2c:	4611      	mov	r1, r2
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fe fd94 	bl	800855c <ld_clust>
 8009a34:	4602      	mov	r2, r0
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3c:	331c      	adds	r3, #28
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fd fd6c 	bl	800751c <ld_dword>
 8009a44:	4602      	mov	r2, r0
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	88da      	ldrh	r2, [r3, #6]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	79fa      	ldrb	r2, [r7, #7]
 8009a62:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	3330      	adds	r3, #48	; 0x30
 8009a7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009a7e:	2100      	movs	r1, #0
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7fd fdd6 	bl	8007632 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009a86:	79fb      	ldrb	r3, [r7, #7]
 8009a88:	f003 0320 	and.w	r3, r3, #32
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d06e      	beq.n	8009b6e <f_open+0x37e>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d06a      	beq.n	8009b6e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	68da      	ldr	r2, [r3, #12]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	895b      	ldrh	r3, [r3, #10]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	899b      	ldrh	r3, [r3, #12]
 8009aaa:	fb02 f303 	mul.w	r3, r2, r3
 8009aae:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009abc:	e016      	b.n	8009aec <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe f87f 	bl	8007bc6 <get_fat>
 8009ac8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009aca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d802      	bhi.n	8009ad6 <f_open+0x2e6>
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009adc:	d102      	bne.n	8009ae4 <f_open+0x2f4>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009ae4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009aec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d103      	bne.n	8009afc <f_open+0x30c>
 8009af4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d8e0      	bhi.n	8009abe <f_open+0x2ce>
				}
				fp->clust = clst;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b00:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009b02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d131      	bne.n	8009b6e <f_open+0x37e>
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	899b      	ldrh	r3, [r3, #12]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b12:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b16:	fb01 f202 	mul.w	r2, r1, r2
 8009b1a:	1a9b      	subs	r3, r3, r2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d026      	beq.n	8009b6e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fe f82f 	bl	8007b88 <clust2sect>
 8009b2a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d103      	bne.n	8009b3a <f_open+0x34a>
						res = FR_INT_ERR;
 8009b32:	2302      	movs	r3, #2
 8009b34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009b38:	e019      	b.n	8009b6e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	899b      	ldrh	r3, [r3, #12]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b42:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b48:	441a      	add	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	7858      	ldrb	r0, [r3, #1]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6a1a      	ldr	r2, [r3, #32]
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	f7fd fc67 	bl	8007430 <disk_read>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <f_open+0x37e>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009b6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d002      	beq.n	8009b7c <f_open+0x38c>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009b7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3768      	adds	r7, #104	; 0x68
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b08c      	sub	sp, #48	; 0x30
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
 8009b94:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f107 0210 	add.w	r2, r7, #16
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7ff fda5 	bl	80096f8 <validate>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d107      	bne.n	8009bcc <f_write+0x44>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	7d5b      	ldrb	r3, [r3, #21]
 8009bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d002      	beq.n	8009bd2 <f_write+0x4a>
 8009bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bd0:	e16a      	b.n	8009ea8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	7d1b      	ldrb	r3, [r3, #20]
 8009bd6:	f003 0302 	and.w	r3, r3, #2
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <f_write+0x5a>
 8009bde:	2307      	movs	r3, #7
 8009be0:	e162      	b.n	8009ea8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	699a      	ldr	r2, [r3, #24]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	441a      	add	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	f080 814c 	bcs.w	8009e8c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	43db      	mvns	r3, r3
 8009bfa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009bfc:	e146      	b.n	8009e8c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	8992      	ldrh	r2, [r2, #12]
 8009c06:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c0a:	fb01 f202 	mul.w	r2, r1, r2
 8009c0e:	1a9b      	subs	r3, r3, r2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f040 80f1 	bne.w	8009df8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	693a      	ldr	r2, [r7, #16]
 8009c1c:	8992      	ldrh	r2, [r2, #12]
 8009c1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	8952      	ldrh	r2, [r2, #10]
 8009c26:	3a01      	subs	r2, #1
 8009c28:	4013      	ands	r3, r2
 8009c2a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d143      	bne.n	8009cba <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10c      	bne.n	8009c54 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d11a      	bne.n	8009c7c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2100      	movs	r1, #0
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe fa10 	bl	8008070 <create_chain>
 8009c50:	62b8      	str	r0, [r7, #40]	; 0x28
 8009c52:	e013      	b.n	8009c7c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d007      	beq.n	8009c6c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	4619      	mov	r1, r3
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f7fe fa9c 	bl	80081a0 <clmt_clust>
 8009c68:	62b8      	str	r0, [r7, #40]	; 0x28
 8009c6a:	e007      	b.n	8009c7c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	69db      	ldr	r3, [r3, #28]
 8009c72:	4619      	mov	r1, r3
 8009c74:	4610      	mov	r0, r2
 8009c76:	f7fe f9fb 	bl	8008070 <create_chain>
 8009c7a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 8109 	beq.w	8009e96 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d104      	bne.n	8009c94 <f_write+0x10c>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2202      	movs	r2, #2
 8009c8e:	755a      	strb	r2, [r3, #21]
 8009c90:	2302      	movs	r3, #2
 8009c92:	e109      	b.n	8009ea8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9a:	d104      	bne.n	8009ca6 <f_write+0x11e>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	755a      	strb	r2, [r3, #21]
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e100      	b.n	8009ea8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009caa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d102      	bne.n	8009cba <f_write+0x132>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cb8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	7d1b      	ldrb	r3, [r3, #20]
 8009cbe:	b25b      	sxtb	r3, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	da18      	bge.n	8009cf6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	7858      	ldrb	r0, [r3, #1]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6a1a      	ldr	r2, [r3, #32]
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	f7fd fbcc 	bl	8007470 <disk_write>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d004      	beq.n	8009ce8 <f_write+0x160>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	755a      	strb	r2, [r3, #21]
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e0df      	b.n	8009ea8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	7d1b      	ldrb	r3, [r3, #20]
 8009cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cf0:	b2da      	uxtb	r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009cf6:	693a      	ldr	r2, [r7, #16]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	69db      	ldr	r3, [r3, #28]
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	4610      	mov	r0, r2
 8009d00:	f7fd ff42 	bl	8007b88 <clust2sect>
 8009d04:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d104      	bne.n	8009d16 <f_write+0x18e>
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2202      	movs	r2, #2
 8009d10:	755a      	strb	r2, [r3, #21]
 8009d12:	2302      	movs	r3, #2
 8009d14:	e0c8      	b.n	8009ea8 <f_write+0x320>
			sect += csect;
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	899b      	ldrh	r3, [r3, #12]
 8009d22:	461a      	mov	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d2a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d043      	beq.n	8009dba <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	4413      	add	r3, r2
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	8952      	ldrh	r2, [r2, #10]
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d905      	bls.n	8009d4c <f_write+0x1c4>
					cc = fs->csize - csect;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	895b      	ldrh	r3, [r3, #10]
 8009d44:	461a      	mov	r2, r3
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	7858      	ldrb	r0, [r3, #1]
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	69f9      	ldr	r1, [r7, #28]
 8009d56:	f7fd fb8b 	bl	8007470 <disk_write>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d004      	beq.n	8009d6a <f_write+0x1e2>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2201      	movs	r2, #1
 8009d64:	755a      	strb	r2, [r3, #21]
 8009d66:	2301      	movs	r3, #1
 8009d68:	e09e      	b.n	8009ea8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6a1a      	ldr	r2, [r3, #32]
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	6a3a      	ldr	r2, [r7, #32]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d918      	bls.n	8009daa <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6a1a      	ldr	r2, [r3, #32]
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	8992      	ldrh	r2, [r2, #12]
 8009d8a:	fb02 f303 	mul.w	r3, r2, r3
 8009d8e:	69fa      	ldr	r2, [r7, #28]
 8009d90:	18d1      	adds	r1, r2, r3
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	899b      	ldrh	r3, [r3, #12]
 8009d96:	461a      	mov	r2, r3
 8009d98:	f7fd fc2a 	bl	80075f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	7d1b      	ldrb	r3, [r3, #20]
 8009da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	899b      	ldrh	r3, [r3, #12]
 8009dae:	461a      	mov	r2, r3
 8009db0:	6a3b      	ldr	r3, [r7, #32]
 8009db2:	fb02 f303 	mul.w	r3, r2, r3
 8009db6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009db8:	e04b      	b.n	8009e52 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d016      	beq.n	8009df2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	699a      	ldr	r2, [r3, #24]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d210      	bcs.n	8009df2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	7858      	ldrb	r0, [r3, #1]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009dda:	2301      	movs	r3, #1
 8009ddc:	697a      	ldr	r2, [r7, #20]
 8009dde:	f7fd fb27 	bl	8007430 <disk_read>
 8009de2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d004      	beq.n	8009df2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2201      	movs	r2, #1
 8009dec:	755a      	strb	r2, [r3, #21]
 8009dee:	2301      	movs	r3, #1
 8009df0:	e05a      	b.n	8009ea8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	697a      	ldr	r2, [r7, #20]
 8009df6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	899b      	ldrh	r3, [r3, #12]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	8992      	ldrh	r2, [r2, #12]
 8009e06:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e0a:	fb01 f202 	mul.w	r2, r1, r2
 8009e0e:	1a9b      	subs	r3, r3, r2
 8009e10:	1ac3      	subs	r3, r0, r3
 8009e12:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d901      	bls.n	8009e20 <f_write+0x298>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	8992      	ldrh	r2, [r2, #12]
 8009e2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e32:	fb00 f202 	mul.w	r2, r0, r2
 8009e36:	1a9b      	subs	r3, r3, r2
 8009e38:	440b      	add	r3, r1
 8009e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e3c:	69f9      	ldr	r1, [r7, #28]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fd fbd6 	bl	80075f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	7d1b      	ldrb	r3, [r3, #20]
 8009e48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009e52:	69fa      	ldr	r2, [r7, #28]
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	4413      	add	r3, r2
 8009e58:	61fb      	str	r3, [r7, #28]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	699a      	ldr	r2, [r3, #24]
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	441a      	add	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	619a      	str	r2, [r3, #24]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	68da      	ldr	r2, [r3, #12]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	bf38      	it	cc
 8009e72:	461a      	movcc	r2, r3
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	60da      	str	r2, [r3, #12]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	441a      	add	r2, r3
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f47f aeb5 	bne.w	8009bfe <f_write+0x76>
 8009e94:	e000      	b.n	8009e98 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009e96:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	7d1b      	ldrb	r3, [r3, #20]
 8009e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ea0:	b2da      	uxtb	r2, r3
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3730      	adds	r7, #48	; 0x30
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f107 0208 	add.w	r2, r7, #8
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7ff fc19 	bl	80096f8 <validate>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009eca:	7dfb      	ldrb	r3, [r7, #23]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d168      	bne.n	8009fa2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	7d1b      	ldrb	r3, [r3, #20]
 8009ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d062      	beq.n	8009fa2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	7d1b      	ldrb	r3, [r3, #20]
 8009ee0:	b25b      	sxtb	r3, r3
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	da15      	bge.n	8009f12 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	7858      	ldrb	r0, [r3, #1]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a1a      	ldr	r2, [r3, #32]
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f7fd fabb 	bl	8007470 <disk_write>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <f_sync+0x54>
 8009f00:	2301      	movs	r3, #1
 8009f02:	e04f      	b.n	8009fa4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	7d1b      	ldrb	r3, [r3, #20]
 8009f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009f12:	f7fd f9ef 	bl	80072f4 <get_fattime>
 8009f16:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1e:	4619      	mov	r1, r3
 8009f20:	4610      	mov	r0, r2
 8009f22:	f7fd fd93 	bl	8007a4c <move_window>
 8009f26:	4603      	mov	r3, r0
 8009f28:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d138      	bne.n	8009fa2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f34:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	330b      	adds	r3, #11
 8009f3a:	781a      	ldrb	r2, [r3, #0]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	330b      	adds	r3, #11
 8009f40:	f042 0220 	orr.w	r2, r2, #32
 8009f44:	b2d2      	uxtb	r2, r2
 8009f46:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6818      	ldr	r0, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	461a      	mov	r2, r3
 8009f52:	68f9      	ldr	r1, [r7, #12]
 8009f54:	f7fe fb21 	bl	800859a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f103 021c 	add.w	r2, r3, #28
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	4619      	mov	r1, r3
 8009f64:	4610      	mov	r0, r2
 8009f66:	f7fd fb17 	bl	8007598 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3316      	adds	r3, #22
 8009f6e:	6939      	ldr	r1, [r7, #16]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fd fb11 	bl	8007598 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3312      	adds	r3, #18
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fd faf0 	bl	8007562 <st_word>
					fs->wflag = 1;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2201      	movs	r2, #1
 8009f86:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fd fd8c 	bl	8007aa8 <sync_fs>
 8009f90:	4603      	mov	r3, r0
 8009f92:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	7d1b      	ldrb	r3, [r3, #20]
 8009f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7ff ff7b 	bl	8009eb0 <f_sync>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d118      	bne.n	8009ff6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f107 0208 	add.w	r2, r7, #8
 8009fca:	4611      	mov	r1, r2
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7ff fb93 	bl	80096f8 <validate>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10c      	bne.n	8009ff6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fd fc8f 	bl	8007904 <dec_lock>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009fea:	7bfb      	ldrb	r3, [r7, #15]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d102      	bne.n	8009ff6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b092      	sub	sp, #72	; 0x48
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a00c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a010:	f107 030c 	add.w	r3, r7, #12
 800a014:	2200      	movs	r2, #0
 800a016:	4618      	mov	r0, r3
 800a018:	f7ff f8e8 	bl	80091ec <find_volume>
 800a01c:	4603      	mov	r3, r0
 800a01e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800a022:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a026:	2b00      	cmp	r3, #0
 800a028:	f040 8099 	bne.w	800a15e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a02c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a034:	699a      	ldr	r2, [r3, #24]
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	3b02      	subs	r3, #2
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d804      	bhi.n	800a04a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a042:	699a      	ldr	r2, [r3, #24]
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	e089      	b.n	800a15e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	2b01      	cmp	r3, #1
 800a054:	d128      	bne.n	800a0a8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a056:	2302      	movs	r3, #2
 800a058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a05e:	f107 0314 	add.w	r3, r7, #20
 800a062:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a064:	4618      	mov	r0, r3
 800a066:	f7fd fdae 	bl	8007bc6 <get_fat>
 800a06a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a072:	d103      	bne.n	800a07c <f_getfree+0x7c>
 800a074:	2301      	movs	r3, #1
 800a076:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a07a:	e063      	b.n	800a144 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d103      	bne.n	800a08a <f_getfree+0x8a>
 800a082:	2302      	movs	r3, #2
 800a084:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a088:	e05c      	b.n	800a144 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d102      	bne.n	800a096 <f_getfree+0x96>
 800a090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a092:	3301      	adds	r3, #1
 800a094:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800a096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a098:	3301      	adds	r3, #1
 800a09a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	69db      	ldr	r3, [r3, #28]
 800a0a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d3db      	bcc.n	800a05e <f_getfree+0x5e>
 800a0a6:	e04d      	b.n	800a144 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	69db      	ldr	r3, [r3, #28]
 800a0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b2:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800a0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d113      	bne.n	800a0ea <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a0c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	63ba      	str	r2, [r7, #56]	; 0x38
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	f7fd fcbe 	bl	8007a4c <move_window>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800a0d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d131      	bne.n	800a142 <f_getfree+0x142>
							p = fs->win;
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	3338      	adds	r3, #56	; 0x38
 800a0e2:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800a0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e6:	899b      	ldrh	r3, [r3, #12]
 800a0e8:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d10f      	bne.n	800a112 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a0f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0f4:	f7fd f9fa 	bl	80074ec <ld_word>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d102      	bne.n	800a104 <f_getfree+0x104>
 800a0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a100:	3301      	adds	r3, #1
 800a102:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800a104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a106:	3302      	adds	r3, #2
 800a108:	633b      	str	r3, [r7, #48]	; 0x30
 800a10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10c:	3b02      	subs	r3, #2
 800a10e:	637b      	str	r3, [r7, #52]	; 0x34
 800a110:	e010      	b.n	800a134 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a112:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a114:	f7fd fa02 	bl	800751c <ld_dword>
 800a118:	4603      	mov	r3, r0
 800a11a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d102      	bne.n	800a128 <f_getfree+0x128>
 800a122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a124:	3301      	adds	r3, #1
 800a126:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800a128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12a:	3304      	adds	r3, #4
 800a12c:	633b      	str	r3, [r7, #48]	; 0x30
 800a12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a130:	3b04      	subs	r3, #4
 800a132:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800a134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a136:	3b01      	subs	r3, #1
 800a138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1bd      	bne.n	800a0bc <f_getfree+0xbc>
 800a140:	e000      	b.n	800a144 <f_getfree+0x144>
							if (res != FR_OK) break;
 800a142:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a148:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a14e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a152:	791a      	ldrb	r2, [r3, #4]
 800a154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a156:	f042 0201 	orr.w	r2, r2, #1
 800a15a:	b2d2      	uxtb	r2, r2
 800a15c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a15e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a162:	4618      	mov	r0, r3
 800a164:	3748      	adds	r7, #72	; 0x48
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	460b      	mov	r3, r1
 800a174:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a176:	78fb      	ldrb	r3, [r7, #3]
 800a178:	2b0a      	cmp	r3, #10
 800a17a:	d103      	bne.n	800a184 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a17c:	210d      	movs	r1, #13
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7ff fff3 	bl	800a16a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	db25      	blt.n	800a1dc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	1c5a      	adds	r2, r3, #1
 800a194:	60fa      	str	r2, [r7, #12]
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	4413      	add	r3, r2
 800a19a:	78fa      	ldrb	r2, [r7, #3]
 800a19c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b3c      	cmp	r3, #60	; 0x3c
 800a1a2:	dd12      	ble.n	800a1ca <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6818      	ldr	r0, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f103 010c 	add.w	r1, r3, #12
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	f107 0308 	add.w	r3, r7, #8
 800a1b4:	f7ff fce8 	bl	8009b88 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d101      	bne.n	800a1c4 <putc_bfd+0x5a>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	e001      	b.n	800a1c8 <putc_bfd+0x5e>
 800a1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	609a      	str	r2, [r3, #8]
 800a1da:	e000      	b.n	800a1de <putc_bfd+0x74>
	if (i < 0) return;
 800a1dc:	bf00      	nop
}
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	db16      	blt.n	800a222 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6818      	ldr	r0, [r3, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f103 010c 	add.w	r1, r3, #12
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	461a      	mov	r2, r3
 800a204:	f107 030c 	add.w	r3, r7, #12
 800a208:	f7ff fcbe 	bl	8009b88 <f_write>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d107      	bne.n	800a222 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	4293      	cmp	r3, r2
 800a21a:	d102      	bne.n	800a222 <putc_flush+0x3e>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	e001      	b.n	800a226 <putc_flush+0x42>
	return EOF;
 800a222:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a226:	4618      	mov	r0, r3
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a22e:	b480      	push	{r7}
 800a230:	b083      	sub	sp, #12
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	605a      	str	r2, [r3, #4]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	609a      	str	r2, [r3, #8]
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b096      	sub	sp, #88	; 0x58
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800a262:	f107 030c 	add.w	r3, r7, #12
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	4618      	mov	r0, r3
 800a26a:	f7ff ffe0 	bl	800a22e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a26e:	e009      	b.n	800a284 <f_puts+0x2c>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	1c5a      	adds	r2, r3, #1
 800a274:	607a      	str	r2, [r7, #4]
 800a276:	781a      	ldrb	r2, [r3, #0]
 800a278:	f107 030c 	add.w	r3, r7, #12
 800a27c:	4611      	mov	r1, r2
 800a27e:	4618      	mov	r0, r3
 800a280:	f7ff ff73 	bl	800a16a <putc_bfd>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1f1      	bne.n	800a270 <f_puts+0x18>
	return putc_flush(&pb);
 800a28c:	f107 030c 	add.w	r3, r7, #12
 800a290:	4618      	mov	r0, r3
 800a292:	f7ff ffa7 	bl	800a1e4 <putc_flush>
 800a296:	4603      	mov	r3, r0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3758      	adds	r7, #88	; 0x58
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b087      	sub	sp, #28
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a2b6:	4b1f      	ldr	r3, [pc, #124]	; (800a334 <FATFS_LinkDriverEx+0x94>)
 800a2b8:	7a5b      	ldrb	r3, [r3, #9]
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d131      	bne.n	800a324 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a2c0:	4b1c      	ldr	r3, [pc, #112]	; (800a334 <FATFS_LinkDriverEx+0x94>)
 800a2c2:	7a5b      	ldrb	r3, [r3, #9]
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	4b1a      	ldr	r3, [pc, #104]	; (800a334 <FATFS_LinkDriverEx+0x94>)
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a2ce:	4b19      	ldr	r3, [pc, #100]	; (800a334 <FATFS_LinkDriverEx+0x94>)
 800a2d0:	7a5b      	ldrb	r3, [r3, #9]
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	4a17      	ldr	r2, [pc, #92]	; (800a334 <FATFS_LinkDriverEx+0x94>)
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4413      	add	r3, r2
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a2de:	4b15      	ldr	r3, [pc, #84]	; (800a334 <FATFS_LinkDriverEx+0x94>)
 800a2e0:	7a5b      	ldrb	r3, [r3, #9]
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	4b13      	ldr	r3, [pc, #76]	; (800a334 <FATFS_LinkDriverEx+0x94>)
 800a2e8:	4413      	add	r3, r2
 800a2ea:	79fa      	ldrb	r2, [r7, #7]
 800a2ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a2ee:	4b11      	ldr	r3, [pc, #68]	; (800a334 <FATFS_LinkDriverEx+0x94>)
 800a2f0:	7a5b      	ldrb	r3, [r3, #9]
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	1c5a      	adds	r2, r3, #1
 800a2f6:	b2d1      	uxtb	r1, r2
 800a2f8:	4a0e      	ldr	r2, [pc, #56]	; (800a334 <FATFS_LinkDriverEx+0x94>)
 800a2fa:	7251      	strb	r1, [r2, #9]
 800a2fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a2fe:	7dbb      	ldrb	r3, [r7, #22]
 800a300:	3330      	adds	r3, #48	; 0x30
 800a302:	b2da      	uxtb	r2, r3
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	3301      	adds	r3, #1
 800a30c:	223a      	movs	r2, #58	; 0x3a
 800a30e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	3302      	adds	r3, #2
 800a314:	222f      	movs	r2, #47	; 0x2f
 800a316:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	3303      	adds	r3, #3
 800a31c:	2200      	movs	r2, #0
 800a31e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a320:	2300      	movs	r3, #0
 800a322:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a324:	7dfb      	ldrb	r3, [r7, #23]
}
 800a326:	4618      	mov	r0, r3
 800a328:	371c      	adds	r7, #28
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	20002980 	.word	0x20002980

0800a338 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a342:	2200      	movs	r2, #0
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7ff ffaa 	bl	800a2a0 <FATFS_LinkDriverEx>
 800a34c:	4603      	mov	r3, r0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
	...

0800a358 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	4603      	mov	r3, r0
 800a360:	6039      	str	r1, [r7, #0]
 800a362:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a364:	88fb      	ldrh	r3, [r7, #6]
 800a366:	2b7f      	cmp	r3, #127	; 0x7f
 800a368:	d802      	bhi.n	800a370 <ff_convert+0x18>
		c = chr;
 800a36a:	88fb      	ldrh	r3, [r7, #6]
 800a36c:	81fb      	strh	r3, [r7, #14]
 800a36e:	e025      	b.n	800a3bc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00b      	beq.n	800a38e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a376:	88fb      	ldrh	r3, [r7, #6]
 800a378:	2bff      	cmp	r3, #255	; 0xff
 800a37a:	d805      	bhi.n	800a388 <ff_convert+0x30>
 800a37c:	88fb      	ldrh	r3, [r7, #6]
 800a37e:	3b80      	subs	r3, #128	; 0x80
 800a380:	4a12      	ldr	r2, [pc, #72]	; (800a3cc <ff_convert+0x74>)
 800a382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a386:	e000      	b.n	800a38a <ff_convert+0x32>
 800a388:	2300      	movs	r3, #0
 800a38a:	81fb      	strh	r3, [r7, #14]
 800a38c:	e016      	b.n	800a3bc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a38e:	2300      	movs	r3, #0
 800a390:	81fb      	strh	r3, [r7, #14]
 800a392:	e009      	b.n	800a3a8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a394:	89fb      	ldrh	r3, [r7, #14]
 800a396:	4a0d      	ldr	r2, [pc, #52]	; (800a3cc <ff_convert+0x74>)
 800a398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a39c:	88fa      	ldrh	r2, [r7, #6]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d006      	beq.n	800a3b0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a3a2:	89fb      	ldrh	r3, [r7, #14]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	81fb      	strh	r3, [r7, #14]
 800a3a8:	89fb      	ldrh	r3, [r7, #14]
 800a3aa:	2b7f      	cmp	r3, #127	; 0x7f
 800a3ac:	d9f2      	bls.n	800a394 <ff_convert+0x3c>
 800a3ae:	e000      	b.n	800a3b2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a3b0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a3b2:	89fb      	ldrh	r3, [r7, #14]
 800a3b4:	3380      	adds	r3, #128	; 0x80
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a3bc:	89fb      	ldrh	r3, [r7, #14]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	0800ed88 	.word	0x0800ed88

0800a3d0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b087      	sub	sp, #28
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a3da:	88fb      	ldrh	r3, [r7, #6]
 800a3dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3e0:	d201      	bcs.n	800a3e6 <ff_wtoupper+0x16>
 800a3e2:	4b3e      	ldr	r3, [pc, #248]	; (800a4dc <ff_wtoupper+0x10c>)
 800a3e4:	e000      	b.n	800a3e8 <ff_wtoupper+0x18>
 800a3e6:	4b3e      	ldr	r3, [pc, #248]	; (800a4e0 <ff_wtoupper+0x110>)
 800a3e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	1c9a      	adds	r2, r3, #2
 800a3ee:	617a      	str	r2, [r7, #20]
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a3f4:	8a7b      	ldrh	r3, [r7, #18]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d068      	beq.n	800a4cc <ff_wtoupper+0xfc>
 800a3fa:	88fa      	ldrh	r2, [r7, #6]
 800a3fc:	8a7b      	ldrh	r3, [r7, #18]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d364      	bcc.n	800a4cc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	1c9a      	adds	r2, r3, #2
 800a406:	617a      	str	r2, [r7, #20]
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	823b      	strh	r3, [r7, #16]
 800a40c:	8a3b      	ldrh	r3, [r7, #16]
 800a40e:	0a1b      	lsrs	r3, r3, #8
 800a410:	81fb      	strh	r3, [r7, #14]
 800a412:	8a3b      	ldrh	r3, [r7, #16]
 800a414:	b2db      	uxtb	r3, r3
 800a416:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a418:	88fa      	ldrh	r2, [r7, #6]
 800a41a:	8a79      	ldrh	r1, [r7, #18]
 800a41c:	8a3b      	ldrh	r3, [r7, #16]
 800a41e:	440b      	add	r3, r1
 800a420:	429a      	cmp	r2, r3
 800a422:	da49      	bge.n	800a4b8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a424:	89fb      	ldrh	r3, [r7, #14]
 800a426:	2b08      	cmp	r3, #8
 800a428:	d84f      	bhi.n	800a4ca <ff_wtoupper+0xfa>
 800a42a:	a201      	add	r2, pc, #4	; (adr r2, 800a430 <ff_wtoupper+0x60>)
 800a42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a430:	0800a455 	.word	0x0800a455
 800a434:	0800a467 	.word	0x0800a467
 800a438:	0800a47d 	.word	0x0800a47d
 800a43c:	0800a485 	.word	0x0800a485
 800a440:	0800a48d 	.word	0x0800a48d
 800a444:	0800a495 	.word	0x0800a495
 800a448:	0800a49d 	.word	0x0800a49d
 800a44c:	0800a4a5 	.word	0x0800a4a5
 800a450:	0800a4ad 	.word	0x0800a4ad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a454:	88fa      	ldrh	r2, [r7, #6]
 800a456:	8a7b      	ldrh	r3, [r7, #18]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	005b      	lsls	r3, r3, #1
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	4413      	add	r3, r2
 800a460:	881b      	ldrh	r3, [r3, #0]
 800a462:	80fb      	strh	r3, [r7, #6]
 800a464:	e027      	b.n	800a4b6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a466:	88fa      	ldrh	r2, [r7, #6]
 800a468:	8a7b      	ldrh	r3, [r7, #18]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	b29b      	uxth	r3, r3
 800a474:	88fa      	ldrh	r2, [r7, #6]
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	80fb      	strh	r3, [r7, #6]
 800a47a:	e01c      	b.n	800a4b6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a47c:	88fb      	ldrh	r3, [r7, #6]
 800a47e:	3b10      	subs	r3, #16
 800a480:	80fb      	strh	r3, [r7, #6]
 800a482:	e018      	b.n	800a4b6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a484:	88fb      	ldrh	r3, [r7, #6]
 800a486:	3b20      	subs	r3, #32
 800a488:	80fb      	strh	r3, [r7, #6]
 800a48a:	e014      	b.n	800a4b6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a48c:	88fb      	ldrh	r3, [r7, #6]
 800a48e:	3b30      	subs	r3, #48	; 0x30
 800a490:	80fb      	strh	r3, [r7, #6]
 800a492:	e010      	b.n	800a4b6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a494:	88fb      	ldrh	r3, [r7, #6]
 800a496:	3b1a      	subs	r3, #26
 800a498:	80fb      	strh	r3, [r7, #6]
 800a49a:	e00c      	b.n	800a4b6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a49c:	88fb      	ldrh	r3, [r7, #6]
 800a49e:	3308      	adds	r3, #8
 800a4a0:	80fb      	strh	r3, [r7, #6]
 800a4a2:	e008      	b.n	800a4b6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a4a4:	88fb      	ldrh	r3, [r7, #6]
 800a4a6:	3b50      	subs	r3, #80	; 0x50
 800a4a8:	80fb      	strh	r3, [r7, #6]
 800a4aa:	e004      	b.n	800a4b6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a4ac:	88fb      	ldrh	r3, [r7, #6]
 800a4ae:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800a4b2:	80fb      	strh	r3, [r7, #6]
 800a4b4:	bf00      	nop
			}
			break;
 800a4b6:	e008      	b.n	800a4ca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a4b8:	89fb      	ldrh	r3, [r7, #14]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d195      	bne.n	800a3ea <ff_wtoupper+0x1a>
 800a4be:	8a3b      	ldrh	r3, [r7, #16]
 800a4c0:	005b      	lsls	r3, r3, #1
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a4c8:	e78f      	b.n	800a3ea <ff_wtoupper+0x1a>
			break;
 800a4ca:	bf00      	nop
	}

	return chr;
 800a4cc:	88fb      	ldrh	r3, [r7, #6]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	371c      	adds	r7, #28
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	0800ee88 	.word	0x0800ee88
 800a4e0:	0800f07c 	.word	0x0800f07c

0800a4e4 <__errno>:
 800a4e4:	4b01      	ldr	r3, [pc, #4]	; (800a4ec <__errno+0x8>)
 800a4e6:	6818      	ldr	r0, [r3, #0]
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	20000024 	.word	0x20000024

0800a4f0 <__libc_init_array>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	4d0d      	ldr	r5, [pc, #52]	; (800a528 <__libc_init_array+0x38>)
 800a4f4:	4c0d      	ldr	r4, [pc, #52]	; (800a52c <__libc_init_array+0x3c>)
 800a4f6:	1b64      	subs	r4, r4, r5
 800a4f8:	10a4      	asrs	r4, r4, #2
 800a4fa:	2600      	movs	r6, #0
 800a4fc:	42a6      	cmp	r6, r4
 800a4fe:	d109      	bne.n	800a514 <__libc_init_array+0x24>
 800a500:	4d0b      	ldr	r5, [pc, #44]	; (800a530 <__libc_init_array+0x40>)
 800a502:	4c0c      	ldr	r4, [pc, #48]	; (800a534 <__libc_init_array+0x44>)
 800a504:	f004 fb88 	bl	800ec18 <_init>
 800a508:	1b64      	subs	r4, r4, r5
 800a50a:	10a4      	asrs	r4, r4, #2
 800a50c:	2600      	movs	r6, #0
 800a50e:	42a6      	cmp	r6, r4
 800a510:	d105      	bne.n	800a51e <__libc_init_array+0x2e>
 800a512:	bd70      	pop	{r4, r5, r6, pc}
 800a514:	f855 3b04 	ldr.w	r3, [r5], #4
 800a518:	4798      	blx	r3
 800a51a:	3601      	adds	r6, #1
 800a51c:	e7ee      	b.n	800a4fc <__libc_init_array+0xc>
 800a51e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a522:	4798      	blx	r3
 800a524:	3601      	adds	r6, #1
 800a526:	e7f2      	b.n	800a50e <__libc_init_array+0x1e>
 800a528:	0800f5e4 	.word	0x0800f5e4
 800a52c:	0800f5e4 	.word	0x0800f5e4
 800a530:	0800f5e4 	.word	0x0800f5e4
 800a534:	0800f5e8 	.word	0x0800f5e8

0800a538 <memset>:
 800a538:	4402      	add	r2, r0
 800a53a:	4603      	mov	r3, r0
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d100      	bne.n	800a542 <memset+0xa>
 800a540:	4770      	bx	lr
 800a542:	f803 1b01 	strb.w	r1, [r3], #1
 800a546:	e7f9      	b.n	800a53c <memset+0x4>

0800a548 <__cvt>:
 800a548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a54a:	ed2d 8b02 	vpush	{d8}
 800a54e:	eeb0 8b40 	vmov.f64	d8, d0
 800a552:	b085      	sub	sp, #20
 800a554:	4617      	mov	r7, r2
 800a556:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a558:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a55a:	ee18 2a90 	vmov	r2, s17
 800a55e:	f025 0520 	bic.w	r5, r5, #32
 800a562:	2a00      	cmp	r2, #0
 800a564:	bfb6      	itet	lt
 800a566:	222d      	movlt	r2, #45	; 0x2d
 800a568:	2200      	movge	r2, #0
 800a56a:	eeb1 8b40 	vneglt.f64	d8, d0
 800a56e:	2d46      	cmp	r5, #70	; 0x46
 800a570:	460c      	mov	r4, r1
 800a572:	701a      	strb	r2, [r3, #0]
 800a574:	d004      	beq.n	800a580 <__cvt+0x38>
 800a576:	2d45      	cmp	r5, #69	; 0x45
 800a578:	d100      	bne.n	800a57c <__cvt+0x34>
 800a57a:	3401      	adds	r4, #1
 800a57c:	2102      	movs	r1, #2
 800a57e:	e000      	b.n	800a582 <__cvt+0x3a>
 800a580:	2103      	movs	r1, #3
 800a582:	ab03      	add	r3, sp, #12
 800a584:	9301      	str	r3, [sp, #4]
 800a586:	ab02      	add	r3, sp, #8
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	4622      	mov	r2, r4
 800a58c:	4633      	mov	r3, r6
 800a58e:	eeb0 0b48 	vmov.f64	d0, d8
 800a592:	f001 fd2d 	bl	800bff0 <_dtoa_r>
 800a596:	2d47      	cmp	r5, #71	; 0x47
 800a598:	d101      	bne.n	800a59e <__cvt+0x56>
 800a59a:	07fb      	lsls	r3, r7, #31
 800a59c:	d51a      	bpl.n	800a5d4 <__cvt+0x8c>
 800a59e:	2d46      	cmp	r5, #70	; 0x46
 800a5a0:	eb00 0204 	add.w	r2, r0, r4
 800a5a4:	d10c      	bne.n	800a5c0 <__cvt+0x78>
 800a5a6:	7803      	ldrb	r3, [r0, #0]
 800a5a8:	2b30      	cmp	r3, #48	; 0x30
 800a5aa:	d107      	bne.n	800a5bc <__cvt+0x74>
 800a5ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b4:	bf1c      	itt	ne
 800a5b6:	f1c4 0401 	rsbne	r4, r4, #1
 800a5ba:	6034      	strne	r4, [r6, #0]
 800a5bc:	6833      	ldr	r3, [r6, #0]
 800a5be:	441a      	add	r2, r3
 800a5c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c8:	bf08      	it	eq
 800a5ca:	9203      	streq	r2, [sp, #12]
 800a5cc:	2130      	movs	r1, #48	; 0x30
 800a5ce:	9b03      	ldr	r3, [sp, #12]
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d307      	bcc.n	800a5e4 <__cvt+0x9c>
 800a5d4:	9b03      	ldr	r3, [sp, #12]
 800a5d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5d8:	1a1b      	subs	r3, r3, r0
 800a5da:	6013      	str	r3, [r2, #0]
 800a5dc:	b005      	add	sp, #20
 800a5de:	ecbd 8b02 	vpop	{d8}
 800a5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5e4:	1c5c      	adds	r4, r3, #1
 800a5e6:	9403      	str	r4, [sp, #12]
 800a5e8:	7019      	strb	r1, [r3, #0]
 800a5ea:	e7f0      	b.n	800a5ce <__cvt+0x86>

0800a5ec <__exponent>:
 800a5ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2900      	cmp	r1, #0
 800a5f2:	bfb8      	it	lt
 800a5f4:	4249      	neglt	r1, r1
 800a5f6:	f803 2b02 	strb.w	r2, [r3], #2
 800a5fa:	bfb4      	ite	lt
 800a5fc:	222d      	movlt	r2, #45	; 0x2d
 800a5fe:	222b      	movge	r2, #43	; 0x2b
 800a600:	2909      	cmp	r1, #9
 800a602:	7042      	strb	r2, [r0, #1]
 800a604:	dd2a      	ble.n	800a65c <__exponent+0x70>
 800a606:	f10d 0407 	add.w	r4, sp, #7
 800a60a:	46a4      	mov	ip, r4
 800a60c:	270a      	movs	r7, #10
 800a60e:	46a6      	mov	lr, r4
 800a610:	460a      	mov	r2, r1
 800a612:	fb91 f6f7 	sdiv	r6, r1, r7
 800a616:	fb07 1516 	mls	r5, r7, r6, r1
 800a61a:	3530      	adds	r5, #48	; 0x30
 800a61c:	2a63      	cmp	r2, #99	; 0x63
 800a61e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a622:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a626:	4631      	mov	r1, r6
 800a628:	dcf1      	bgt.n	800a60e <__exponent+0x22>
 800a62a:	3130      	adds	r1, #48	; 0x30
 800a62c:	f1ae 0502 	sub.w	r5, lr, #2
 800a630:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a634:	1c44      	adds	r4, r0, #1
 800a636:	4629      	mov	r1, r5
 800a638:	4561      	cmp	r1, ip
 800a63a:	d30a      	bcc.n	800a652 <__exponent+0x66>
 800a63c:	f10d 0209 	add.w	r2, sp, #9
 800a640:	eba2 020e 	sub.w	r2, r2, lr
 800a644:	4565      	cmp	r5, ip
 800a646:	bf88      	it	hi
 800a648:	2200      	movhi	r2, #0
 800a64a:	4413      	add	r3, r2
 800a64c:	1a18      	subs	r0, r3, r0
 800a64e:	b003      	add	sp, #12
 800a650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a652:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a656:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a65a:	e7ed      	b.n	800a638 <__exponent+0x4c>
 800a65c:	2330      	movs	r3, #48	; 0x30
 800a65e:	3130      	adds	r1, #48	; 0x30
 800a660:	7083      	strb	r3, [r0, #2]
 800a662:	70c1      	strb	r1, [r0, #3]
 800a664:	1d03      	adds	r3, r0, #4
 800a666:	e7f1      	b.n	800a64c <__exponent+0x60>

0800a668 <_printf_float>:
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	b08b      	sub	sp, #44	; 0x2c
 800a66e:	460c      	mov	r4, r1
 800a670:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a674:	4616      	mov	r6, r2
 800a676:	461f      	mov	r7, r3
 800a678:	4605      	mov	r5, r0
 800a67a:	f002 fd97 	bl	800d1ac <_localeconv_r>
 800a67e:	f8d0 b000 	ldr.w	fp, [r0]
 800a682:	4658      	mov	r0, fp
 800a684:	f7f5 fddc 	bl	8000240 <strlen>
 800a688:	2300      	movs	r3, #0
 800a68a:	9308      	str	r3, [sp, #32]
 800a68c:	f8d8 3000 	ldr.w	r3, [r8]
 800a690:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a694:	6822      	ldr	r2, [r4, #0]
 800a696:	3307      	adds	r3, #7
 800a698:	f023 0307 	bic.w	r3, r3, #7
 800a69c:	f103 0108 	add.w	r1, r3, #8
 800a6a0:	f8c8 1000 	str.w	r1, [r8]
 800a6a4:	4682      	mov	sl, r0
 800a6a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6aa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a6ae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800a910 <_printf_float+0x2a8>
 800a6b2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a6b6:	eeb0 6bc0 	vabs.f64	d6, d0
 800a6ba:	eeb4 6b47 	vcmp.f64	d6, d7
 800a6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c2:	dd24      	ble.n	800a70e <_printf_float+0xa6>
 800a6c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6cc:	d502      	bpl.n	800a6d4 <_printf_float+0x6c>
 800a6ce:	232d      	movs	r3, #45	; 0x2d
 800a6d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6d4:	4b90      	ldr	r3, [pc, #576]	; (800a918 <_printf_float+0x2b0>)
 800a6d6:	4891      	ldr	r0, [pc, #580]	; (800a91c <_printf_float+0x2b4>)
 800a6d8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a6dc:	bf94      	ite	ls
 800a6de:	4698      	movls	r8, r3
 800a6e0:	4680      	movhi	r8, r0
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	6123      	str	r3, [r4, #16]
 800a6e6:	f022 0204 	bic.w	r2, r2, #4
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	6022      	str	r2, [r4, #0]
 800a6ee:	9304      	str	r3, [sp, #16]
 800a6f0:	9700      	str	r7, [sp, #0]
 800a6f2:	4633      	mov	r3, r6
 800a6f4:	aa09      	add	r2, sp, #36	; 0x24
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	f000 f9d3 	bl	800aaa4 <_printf_common>
 800a6fe:	3001      	adds	r0, #1
 800a700:	f040 808a 	bne.w	800a818 <_printf_float+0x1b0>
 800a704:	f04f 30ff 	mov.w	r0, #4294967295
 800a708:	b00b      	add	sp, #44	; 0x2c
 800a70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70e:	eeb4 0b40 	vcmp.f64	d0, d0
 800a712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a716:	d709      	bvc.n	800a72c <_printf_float+0xc4>
 800a718:	ee10 3a90 	vmov	r3, s1
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	bfbc      	itt	lt
 800a720:	232d      	movlt	r3, #45	; 0x2d
 800a722:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a726:	487e      	ldr	r0, [pc, #504]	; (800a920 <_printf_float+0x2b8>)
 800a728:	4b7e      	ldr	r3, [pc, #504]	; (800a924 <_printf_float+0x2bc>)
 800a72a:	e7d5      	b.n	800a6d8 <_printf_float+0x70>
 800a72c:	6863      	ldr	r3, [r4, #4]
 800a72e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a732:	9104      	str	r1, [sp, #16]
 800a734:	1c59      	adds	r1, r3, #1
 800a736:	d13c      	bne.n	800a7b2 <_printf_float+0x14a>
 800a738:	2306      	movs	r3, #6
 800a73a:	6063      	str	r3, [r4, #4]
 800a73c:	2300      	movs	r3, #0
 800a73e:	9303      	str	r3, [sp, #12]
 800a740:	ab08      	add	r3, sp, #32
 800a742:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a746:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a74a:	ab07      	add	r3, sp, #28
 800a74c:	6861      	ldr	r1, [r4, #4]
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	6022      	str	r2, [r4, #0]
 800a752:	f10d 031b 	add.w	r3, sp, #27
 800a756:	4628      	mov	r0, r5
 800a758:	f7ff fef6 	bl	800a548 <__cvt>
 800a75c:	9b04      	ldr	r3, [sp, #16]
 800a75e:	9907      	ldr	r1, [sp, #28]
 800a760:	2b47      	cmp	r3, #71	; 0x47
 800a762:	4680      	mov	r8, r0
 800a764:	d108      	bne.n	800a778 <_printf_float+0x110>
 800a766:	1cc8      	adds	r0, r1, #3
 800a768:	db02      	blt.n	800a770 <_printf_float+0x108>
 800a76a:	6863      	ldr	r3, [r4, #4]
 800a76c:	4299      	cmp	r1, r3
 800a76e:	dd41      	ble.n	800a7f4 <_printf_float+0x18c>
 800a770:	f1a9 0902 	sub.w	r9, r9, #2
 800a774:	fa5f f989 	uxtb.w	r9, r9
 800a778:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a77c:	d820      	bhi.n	800a7c0 <_printf_float+0x158>
 800a77e:	3901      	subs	r1, #1
 800a780:	464a      	mov	r2, r9
 800a782:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a786:	9107      	str	r1, [sp, #28]
 800a788:	f7ff ff30 	bl	800a5ec <__exponent>
 800a78c:	9a08      	ldr	r2, [sp, #32]
 800a78e:	9004      	str	r0, [sp, #16]
 800a790:	1813      	adds	r3, r2, r0
 800a792:	2a01      	cmp	r2, #1
 800a794:	6123      	str	r3, [r4, #16]
 800a796:	dc02      	bgt.n	800a79e <_printf_float+0x136>
 800a798:	6822      	ldr	r2, [r4, #0]
 800a79a:	07d2      	lsls	r2, r2, #31
 800a79c:	d501      	bpl.n	800a7a2 <_printf_float+0x13a>
 800a79e:	3301      	adds	r3, #1
 800a7a0:	6123      	str	r3, [r4, #16]
 800a7a2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0a2      	beq.n	800a6f0 <_printf_float+0x88>
 800a7aa:	232d      	movs	r3, #45	; 0x2d
 800a7ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7b0:	e79e      	b.n	800a6f0 <_printf_float+0x88>
 800a7b2:	9904      	ldr	r1, [sp, #16]
 800a7b4:	2947      	cmp	r1, #71	; 0x47
 800a7b6:	d1c1      	bne.n	800a73c <_printf_float+0xd4>
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1bf      	bne.n	800a73c <_printf_float+0xd4>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e7bc      	b.n	800a73a <_printf_float+0xd2>
 800a7c0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a7c4:	d118      	bne.n	800a7f8 <_printf_float+0x190>
 800a7c6:	2900      	cmp	r1, #0
 800a7c8:	6863      	ldr	r3, [r4, #4]
 800a7ca:	dd0b      	ble.n	800a7e4 <_printf_float+0x17c>
 800a7cc:	6121      	str	r1, [r4, #16]
 800a7ce:	b913      	cbnz	r3, 800a7d6 <_printf_float+0x16e>
 800a7d0:	6822      	ldr	r2, [r4, #0]
 800a7d2:	07d0      	lsls	r0, r2, #31
 800a7d4:	d502      	bpl.n	800a7dc <_printf_float+0x174>
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	440b      	add	r3, r1
 800a7da:	6123      	str	r3, [r4, #16]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7e0:	9304      	str	r3, [sp, #16]
 800a7e2:	e7de      	b.n	800a7a2 <_printf_float+0x13a>
 800a7e4:	b913      	cbnz	r3, 800a7ec <_printf_float+0x184>
 800a7e6:	6822      	ldr	r2, [r4, #0]
 800a7e8:	07d2      	lsls	r2, r2, #31
 800a7ea:	d501      	bpl.n	800a7f0 <_printf_float+0x188>
 800a7ec:	3302      	adds	r3, #2
 800a7ee:	e7f4      	b.n	800a7da <_printf_float+0x172>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e7f2      	b.n	800a7da <_printf_float+0x172>
 800a7f4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a7f8:	9b08      	ldr	r3, [sp, #32]
 800a7fa:	4299      	cmp	r1, r3
 800a7fc:	db05      	blt.n	800a80a <_printf_float+0x1a2>
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	6121      	str	r1, [r4, #16]
 800a802:	07d8      	lsls	r0, r3, #31
 800a804:	d5ea      	bpl.n	800a7dc <_printf_float+0x174>
 800a806:	1c4b      	adds	r3, r1, #1
 800a808:	e7e7      	b.n	800a7da <_printf_float+0x172>
 800a80a:	2900      	cmp	r1, #0
 800a80c:	bfd4      	ite	le
 800a80e:	f1c1 0202 	rsble	r2, r1, #2
 800a812:	2201      	movgt	r2, #1
 800a814:	4413      	add	r3, r2
 800a816:	e7e0      	b.n	800a7da <_printf_float+0x172>
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	055a      	lsls	r2, r3, #21
 800a81c:	d407      	bmi.n	800a82e <_printf_float+0x1c6>
 800a81e:	6923      	ldr	r3, [r4, #16]
 800a820:	4642      	mov	r2, r8
 800a822:	4631      	mov	r1, r6
 800a824:	4628      	mov	r0, r5
 800a826:	47b8      	blx	r7
 800a828:	3001      	adds	r0, #1
 800a82a:	d12a      	bne.n	800a882 <_printf_float+0x21a>
 800a82c:	e76a      	b.n	800a704 <_printf_float+0x9c>
 800a82e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a832:	f240 80e2 	bls.w	800a9fa <_printf_float+0x392>
 800a836:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a83a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a842:	d133      	bne.n	800a8ac <_printf_float+0x244>
 800a844:	4a38      	ldr	r2, [pc, #224]	; (800a928 <_printf_float+0x2c0>)
 800a846:	2301      	movs	r3, #1
 800a848:	4631      	mov	r1, r6
 800a84a:	4628      	mov	r0, r5
 800a84c:	47b8      	blx	r7
 800a84e:	3001      	adds	r0, #1
 800a850:	f43f af58 	beq.w	800a704 <_printf_float+0x9c>
 800a854:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a858:	429a      	cmp	r2, r3
 800a85a:	db02      	blt.n	800a862 <_printf_float+0x1fa>
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	07d8      	lsls	r0, r3, #31
 800a860:	d50f      	bpl.n	800a882 <_printf_float+0x21a>
 800a862:	4653      	mov	r3, sl
 800a864:	465a      	mov	r2, fp
 800a866:	4631      	mov	r1, r6
 800a868:	4628      	mov	r0, r5
 800a86a:	47b8      	blx	r7
 800a86c:	3001      	adds	r0, #1
 800a86e:	f43f af49 	beq.w	800a704 <_printf_float+0x9c>
 800a872:	f04f 0800 	mov.w	r8, #0
 800a876:	f104 091a 	add.w	r9, r4, #26
 800a87a:	9b08      	ldr	r3, [sp, #32]
 800a87c:	3b01      	subs	r3, #1
 800a87e:	4543      	cmp	r3, r8
 800a880:	dc09      	bgt.n	800a896 <_printf_float+0x22e>
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	079b      	lsls	r3, r3, #30
 800a886:	f100 8108 	bmi.w	800aa9a <_printf_float+0x432>
 800a88a:	68e0      	ldr	r0, [r4, #12]
 800a88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a88e:	4298      	cmp	r0, r3
 800a890:	bfb8      	it	lt
 800a892:	4618      	movlt	r0, r3
 800a894:	e738      	b.n	800a708 <_printf_float+0xa0>
 800a896:	2301      	movs	r3, #1
 800a898:	464a      	mov	r2, r9
 800a89a:	4631      	mov	r1, r6
 800a89c:	4628      	mov	r0, r5
 800a89e:	47b8      	blx	r7
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	f43f af2f 	beq.w	800a704 <_printf_float+0x9c>
 800a8a6:	f108 0801 	add.w	r8, r8, #1
 800a8aa:	e7e6      	b.n	800a87a <_printf_float+0x212>
 800a8ac:	9b07      	ldr	r3, [sp, #28]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	dc3c      	bgt.n	800a92c <_printf_float+0x2c4>
 800a8b2:	4a1d      	ldr	r2, [pc, #116]	; (800a928 <_printf_float+0x2c0>)
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	4631      	mov	r1, r6
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	47b8      	blx	r7
 800a8bc:	3001      	adds	r0, #1
 800a8be:	f43f af21 	beq.w	800a704 <_printf_float+0x9c>
 800a8c2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	d102      	bne.n	800a8d0 <_printf_float+0x268>
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	07d9      	lsls	r1, r3, #31
 800a8ce:	d5d8      	bpl.n	800a882 <_printf_float+0x21a>
 800a8d0:	4653      	mov	r3, sl
 800a8d2:	465a      	mov	r2, fp
 800a8d4:	4631      	mov	r1, r6
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	47b8      	blx	r7
 800a8da:	3001      	adds	r0, #1
 800a8dc:	f43f af12 	beq.w	800a704 <_printf_float+0x9c>
 800a8e0:	f04f 0900 	mov.w	r9, #0
 800a8e4:	f104 0a1a 	add.w	sl, r4, #26
 800a8e8:	9b07      	ldr	r3, [sp, #28]
 800a8ea:	425b      	negs	r3, r3
 800a8ec:	454b      	cmp	r3, r9
 800a8ee:	dc01      	bgt.n	800a8f4 <_printf_float+0x28c>
 800a8f0:	9b08      	ldr	r3, [sp, #32]
 800a8f2:	e795      	b.n	800a820 <_printf_float+0x1b8>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	4652      	mov	r2, sl
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	47b8      	blx	r7
 800a8fe:	3001      	adds	r0, #1
 800a900:	f43f af00 	beq.w	800a704 <_printf_float+0x9c>
 800a904:	f109 0901 	add.w	r9, r9, #1
 800a908:	e7ee      	b.n	800a8e8 <_printf_float+0x280>
 800a90a:	bf00      	nop
 800a90c:	f3af 8000 	nop.w
 800a910:	ffffffff 	.word	0xffffffff
 800a914:	7fefffff 	.word	0x7fefffff
 800a918:	0800f13c 	.word	0x0800f13c
 800a91c:	0800f140 	.word	0x0800f140
 800a920:	0800f148 	.word	0x0800f148
 800a924:	0800f144 	.word	0x0800f144
 800a928:	0800f14c 	.word	0x0800f14c
 800a92c:	9a08      	ldr	r2, [sp, #32]
 800a92e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a930:	429a      	cmp	r2, r3
 800a932:	bfa8      	it	ge
 800a934:	461a      	movge	r2, r3
 800a936:	2a00      	cmp	r2, #0
 800a938:	4691      	mov	r9, r2
 800a93a:	dc38      	bgt.n	800a9ae <_printf_float+0x346>
 800a93c:	2300      	movs	r3, #0
 800a93e:	9305      	str	r3, [sp, #20]
 800a940:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a944:	f104 021a 	add.w	r2, r4, #26
 800a948:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a94a:	9905      	ldr	r1, [sp, #20]
 800a94c:	9304      	str	r3, [sp, #16]
 800a94e:	eba3 0309 	sub.w	r3, r3, r9
 800a952:	428b      	cmp	r3, r1
 800a954:	dc33      	bgt.n	800a9be <_printf_float+0x356>
 800a956:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	db3c      	blt.n	800a9d8 <_printf_float+0x370>
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	07da      	lsls	r2, r3, #31
 800a962:	d439      	bmi.n	800a9d8 <_printf_float+0x370>
 800a964:	9b08      	ldr	r3, [sp, #32]
 800a966:	9a04      	ldr	r2, [sp, #16]
 800a968:	9907      	ldr	r1, [sp, #28]
 800a96a:	1a9a      	subs	r2, r3, r2
 800a96c:	eba3 0901 	sub.w	r9, r3, r1
 800a970:	4591      	cmp	r9, r2
 800a972:	bfa8      	it	ge
 800a974:	4691      	movge	r9, r2
 800a976:	f1b9 0f00 	cmp.w	r9, #0
 800a97a:	dc35      	bgt.n	800a9e8 <_printf_float+0x380>
 800a97c:	f04f 0800 	mov.w	r8, #0
 800a980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a984:	f104 0a1a 	add.w	sl, r4, #26
 800a988:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a98c:	1a9b      	subs	r3, r3, r2
 800a98e:	eba3 0309 	sub.w	r3, r3, r9
 800a992:	4543      	cmp	r3, r8
 800a994:	f77f af75 	ble.w	800a882 <_printf_float+0x21a>
 800a998:	2301      	movs	r3, #1
 800a99a:	4652      	mov	r2, sl
 800a99c:	4631      	mov	r1, r6
 800a99e:	4628      	mov	r0, r5
 800a9a0:	47b8      	blx	r7
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	f43f aeae 	beq.w	800a704 <_printf_float+0x9c>
 800a9a8:	f108 0801 	add.w	r8, r8, #1
 800a9ac:	e7ec      	b.n	800a988 <_printf_float+0x320>
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	4631      	mov	r1, r6
 800a9b2:	4642      	mov	r2, r8
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	47b8      	blx	r7
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	d1bf      	bne.n	800a93c <_printf_float+0x2d4>
 800a9bc:	e6a2      	b.n	800a704 <_printf_float+0x9c>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	4631      	mov	r1, r6
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	9204      	str	r2, [sp, #16]
 800a9c6:	47b8      	blx	r7
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	f43f ae9b 	beq.w	800a704 <_printf_float+0x9c>
 800a9ce:	9b05      	ldr	r3, [sp, #20]
 800a9d0:	9a04      	ldr	r2, [sp, #16]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	9305      	str	r3, [sp, #20]
 800a9d6:	e7b7      	b.n	800a948 <_printf_float+0x2e0>
 800a9d8:	4653      	mov	r3, sl
 800a9da:	465a      	mov	r2, fp
 800a9dc:	4631      	mov	r1, r6
 800a9de:	4628      	mov	r0, r5
 800a9e0:	47b8      	blx	r7
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	d1be      	bne.n	800a964 <_printf_float+0x2fc>
 800a9e6:	e68d      	b.n	800a704 <_printf_float+0x9c>
 800a9e8:	9a04      	ldr	r2, [sp, #16]
 800a9ea:	464b      	mov	r3, r9
 800a9ec:	4442      	add	r2, r8
 800a9ee:	4631      	mov	r1, r6
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	47b8      	blx	r7
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	d1c1      	bne.n	800a97c <_printf_float+0x314>
 800a9f8:	e684      	b.n	800a704 <_printf_float+0x9c>
 800a9fa:	9a08      	ldr	r2, [sp, #32]
 800a9fc:	2a01      	cmp	r2, #1
 800a9fe:	dc01      	bgt.n	800aa04 <_printf_float+0x39c>
 800aa00:	07db      	lsls	r3, r3, #31
 800aa02:	d537      	bpl.n	800aa74 <_printf_float+0x40c>
 800aa04:	2301      	movs	r3, #1
 800aa06:	4642      	mov	r2, r8
 800aa08:	4631      	mov	r1, r6
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	47b8      	blx	r7
 800aa0e:	3001      	adds	r0, #1
 800aa10:	f43f ae78 	beq.w	800a704 <_printf_float+0x9c>
 800aa14:	4653      	mov	r3, sl
 800aa16:	465a      	mov	r2, fp
 800aa18:	4631      	mov	r1, r6
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	47b8      	blx	r7
 800aa1e:	3001      	adds	r0, #1
 800aa20:	f43f ae70 	beq.w	800a704 <_printf_float+0x9c>
 800aa24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800aa28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa30:	d01b      	beq.n	800aa6a <_printf_float+0x402>
 800aa32:	9b08      	ldr	r3, [sp, #32]
 800aa34:	f108 0201 	add.w	r2, r8, #1
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	4631      	mov	r1, r6
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	47b8      	blx	r7
 800aa40:	3001      	adds	r0, #1
 800aa42:	d10e      	bne.n	800aa62 <_printf_float+0x3fa>
 800aa44:	e65e      	b.n	800a704 <_printf_float+0x9c>
 800aa46:	2301      	movs	r3, #1
 800aa48:	464a      	mov	r2, r9
 800aa4a:	4631      	mov	r1, r6
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b8      	blx	r7
 800aa50:	3001      	adds	r0, #1
 800aa52:	f43f ae57 	beq.w	800a704 <_printf_float+0x9c>
 800aa56:	f108 0801 	add.w	r8, r8, #1
 800aa5a:	9b08      	ldr	r3, [sp, #32]
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	4543      	cmp	r3, r8
 800aa60:	dcf1      	bgt.n	800aa46 <_printf_float+0x3de>
 800aa62:	9b04      	ldr	r3, [sp, #16]
 800aa64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa68:	e6db      	b.n	800a822 <_printf_float+0x1ba>
 800aa6a:	f04f 0800 	mov.w	r8, #0
 800aa6e:	f104 091a 	add.w	r9, r4, #26
 800aa72:	e7f2      	b.n	800aa5a <_printf_float+0x3f2>
 800aa74:	2301      	movs	r3, #1
 800aa76:	4642      	mov	r2, r8
 800aa78:	e7df      	b.n	800aa3a <_printf_float+0x3d2>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	464a      	mov	r2, r9
 800aa7e:	4631      	mov	r1, r6
 800aa80:	4628      	mov	r0, r5
 800aa82:	47b8      	blx	r7
 800aa84:	3001      	adds	r0, #1
 800aa86:	f43f ae3d 	beq.w	800a704 <_printf_float+0x9c>
 800aa8a:	f108 0801 	add.w	r8, r8, #1
 800aa8e:	68e3      	ldr	r3, [r4, #12]
 800aa90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa92:	1a5b      	subs	r3, r3, r1
 800aa94:	4543      	cmp	r3, r8
 800aa96:	dcf0      	bgt.n	800aa7a <_printf_float+0x412>
 800aa98:	e6f7      	b.n	800a88a <_printf_float+0x222>
 800aa9a:	f04f 0800 	mov.w	r8, #0
 800aa9e:	f104 0919 	add.w	r9, r4, #25
 800aaa2:	e7f4      	b.n	800aa8e <_printf_float+0x426>

0800aaa4 <_printf_common>:
 800aaa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa8:	4616      	mov	r6, r2
 800aaaa:	4699      	mov	r9, r3
 800aaac:	688a      	ldr	r2, [r1, #8]
 800aaae:	690b      	ldr	r3, [r1, #16]
 800aab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aab4:	4293      	cmp	r3, r2
 800aab6:	bfb8      	it	lt
 800aab8:	4613      	movlt	r3, r2
 800aaba:	6033      	str	r3, [r6, #0]
 800aabc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aac0:	4607      	mov	r7, r0
 800aac2:	460c      	mov	r4, r1
 800aac4:	b10a      	cbz	r2, 800aaca <_printf_common+0x26>
 800aac6:	3301      	adds	r3, #1
 800aac8:	6033      	str	r3, [r6, #0]
 800aaca:	6823      	ldr	r3, [r4, #0]
 800aacc:	0699      	lsls	r1, r3, #26
 800aace:	bf42      	ittt	mi
 800aad0:	6833      	ldrmi	r3, [r6, #0]
 800aad2:	3302      	addmi	r3, #2
 800aad4:	6033      	strmi	r3, [r6, #0]
 800aad6:	6825      	ldr	r5, [r4, #0]
 800aad8:	f015 0506 	ands.w	r5, r5, #6
 800aadc:	d106      	bne.n	800aaec <_printf_common+0x48>
 800aade:	f104 0a19 	add.w	sl, r4, #25
 800aae2:	68e3      	ldr	r3, [r4, #12]
 800aae4:	6832      	ldr	r2, [r6, #0]
 800aae6:	1a9b      	subs	r3, r3, r2
 800aae8:	42ab      	cmp	r3, r5
 800aaea:	dc26      	bgt.n	800ab3a <_printf_common+0x96>
 800aaec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aaf0:	1e13      	subs	r3, r2, #0
 800aaf2:	6822      	ldr	r2, [r4, #0]
 800aaf4:	bf18      	it	ne
 800aaf6:	2301      	movne	r3, #1
 800aaf8:	0692      	lsls	r2, r2, #26
 800aafa:	d42b      	bmi.n	800ab54 <_printf_common+0xb0>
 800aafc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab00:	4649      	mov	r1, r9
 800ab02:	4638      	mov	r0, r7
 800ab04:	47c0      	blx	r8
 800ab06:	3001      	adds	r0, #1
 800ab08:	d01e      	beq.n	800ab48 <_printf_common+0xa4>
 800ab0a:	6823      	ldr	r3, [r4, #0]
 800ab0c:	68e5      	ldr	r5, [r4, #12]
 800ab0e:	6832      	ldr	r2, [r6, #0]
 800ab10:	f003 0306 	and.w	r3, r3, #6
 800ab14:	2b04      	cmp	r3, #4
 800ab16:	bf08      	it	eq
 800ab18:	1aad      	subeq	r5, r5, r2
 800ab1a:	68a3      	ldr	r3, [r4, #8]
 800ab1c:	6922      	ldr	r2, [r4, #16]
 800ab1e:	bf0c      	ite	eq
 800ab20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab24:	2500      	movne	r5, #0
 800ab26:	4293      	cmp	r3, r2
 800ab28:	bfc4      	itt	gt
 800ab2a:	1a9b      	subgt	r3, r3, r2
 800ab2c:	18ed      	addgt	r5, r5, r3
 800ab2e:	2600      	movs	r6, #0
 800ab30:	341a      	adds	r4, #26
 800ab32:	42b5      	cmp	r5, r6
 800ab34:	d11a      	bne.n	800ab6c <_printf_common+0xc8>
 800ab36:	2000      	movs	r0, #0
 800ab38:	e008      	b.n	800ab4c <_printf_common+0xa8>
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	4652      	mov	r2, sl
 800ab3e:	4649      	mov	r1, r9
 800ab40:	4638      	mov	r0, r7
 800ab42:	47c0      	blx	r8
 800ab44:	3001      	adds	r0, #1
 800ab46:	d103      	bne.n	800ab50 <_printf_common+0xac>
 800ab48:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab50:	3501      	adds	r5, #1
 800ab52:	e7c6      	b.n	800aae2 <_printf_common+0x3e>
 800ab54:	18e1      	adds	r1, r4, r3
 800ab56:	1c5a      	adds	r2, r3, #1
 800ab58:	2030      	movs	r0, #48	; 0x30
 800ab5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab5e:	4422      	add	r2, r4
 800ab60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab68:	3302      	adds	r3, #2
 800ab6a:	e7c7      	b.n	800aafc <_printf_common+0x58>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	4622      	mov	r2, r4
 800ab70:	4649      	mov	r1, r9
 800ab72:	4638      	mov	r0, r7
 800ab74:	47c0      	blx	r8
 800ab76:	3001      	adds	r0, #1
 800ab78:	d0e6      	beq.n	800ab48 <_printf_common+0xa4>
 800ab7a:	3601      	adds	r6, #1
 800ab7c:	e7d9      	b.n	800ab32 <_printf_common+0x8e>
	...

0800ab80 <_printf_i>:
 800ab80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab84:	7e0f      	ldrb	r7, [r1, #24]
 800ab86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab88:	2f78      	cmp	r7, #120	; 0x78
 800ab8a:	4691      	mov	r9, r2
 800ab8c:	4680      	mov	r8, r0
 800ab8e:	460c      	mov	r4, r1
 800ab90:	469a      	mov	sl, r3
 800ab92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab96:	d807      	bhi.n	800aba8 <_printf_i+0x28>
 800ab98:	2f62      	cmp	r7, #98	; 0x62
 800ab9a:	d80a      	bhi.n	800abb2 <_printf_i+0x32>
 800ab9c:	2f00      	cmp	r7, #0
 800ab9e:	f000 80d8 	beq.w	800ad52 <_printf_i+0x1d2>
 800aba2:	2f58      	cmp	r7, #88	; 0x58
 800aba4:	f000 80a3 	beq.w	800acee <_printf_i+0x16e>
 800aba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abb0:	e03a      	b.n	800ac28 <_printf_i+0xa8>
 800abb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abb6:	2b15      	cmp	r3, #21
 800abb8:	d8f6      	bhi.n	800aba8 <_printf_i+0x28>
 800abba:	a101      	add	r1, pc, #4	; (adr r1, 800abc0 <_printf_i+0x40>)
 800abbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abc0:	0800ac19 	.word	0x0800ac19
 800abc4:	0800ac2d 	.word	0x0800ac2d
 800abc8:	0800aba9 	.word	0x0800aba9
 800abcc:	0800aba9 	.word	0x0800aba9
 800abd0:	0800aba9 	.word	0x0800aba9
 800abd4:	0800aba9 	.word	0x0800aba9
 800abd8:	0800ac2d 	.word	0x0800ac2d
 800abdc:	0800aba9 	.word	0x0800aba9
 800abe0:	0800aba9 	.word	0x0800aba9
 800abe4:	0800aba9 	.word	0x0800aba9
 800abe8:	0800aba9 	.word	0x0800aba9
 800abec:	0800ad39 	.word	0x0800ad39
 800abf0:	0800ac5d 	.word	0x0800ac5d
 800abf4:	0800ad1b 	.word	0x0800ad1b
 800abf8:	0800aba9 	.word	0x0800aba9
 800abfc:	0800aba9 	.word	0x0800aba9
 800ac00:	0800ad5b 	.word	0x0800ad5b
 800ac04:	0800aba9 	.word	0x0800aba9
 800ac08:	0800ac5d 	.word	0x0800ac5d
 800ac0c:	0800aba9 	.word	0x0800aba9
 800ac10:	0800aba9 	.word	0x0800aba9
 800ac14:	0800ad23 	.word	0x0800ad23
 800ac18:	682b      	ldr	r3, [r5, #0]
 800ac1a:	1d1a      	adds	r2, r3, #4
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	602a      	str	r2, [r5, #0]
 800ac20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e0a3      	b.n	800ad74 <_printf_i+0x1f4>
 800ac2c:	6820      	ldr	r0, [r4, #0]
 800ac2e:	6829      	ldr	r1, [r5, #0]
 800ac30:	0606      	lsls	r6, r0, #24
 800ac32:	f101 0304 	add.w	r3, r1, #4
 800ac36:	d50a      	bpl.n	800ac4e <_printf_i+0xce>
 800ac38:	680e      	ldr	r6, [r1, #0]
 800ac3a:	602b      	str	r3, [r5, #0]
 800ac3c:	2e00      	cmp	r6, #0
 800ac3e:	da03      	bge.n	800ac48 <_printf_i+0xc8>
 800ac40:	232d      	movs	r3, #45	; 0x2d
 800ac42:	4276      	negs	r6, r6
 800ac44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac48:	485e      	ldr	r0, [pc, #376]	; (800adc4 <_printf_i+0x244>)
 800ac4a:	230a      	movs	r3, #10
 800ac4c:	e019      	b.n	800ac82 <_printf_i+0x102>
 800ac4e:	680e      	ldr	r6, [r1, #0]
 800ac50:	602b      	str	r3, [r5, #0]
 800ac52:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac56:	bf18      	it	ne
 800ac58:	b236      	sxthne	r6, r6
 800ac5a:	e7ef      	b.n	800ac3c <_printf_i+0xbc>
 800ac5c:	682b      	ldr	r3, [r5, #0]
 800ac5e:	6820      	ldr	r0, [r4, #0]
 800ac60:	1d19      	adds	r1, r3, #4
 800ac62:	6029      	str	r1, [r5, #0]
 800ac64:	0601      	lsls	r1, r0, #24
 800ac66:	d501      	bpl.n	800ac6c <_printf_i+0xec>
 800ac68:	681e      	ldr	r6, [r3, #0]
 800ac6a:	e002      	b.n	800ac72 <_printf_i+0xf2>
 800ac6c:	0646      	lsls	r6, r0, #25
 800ac6e:	d5fb      	bpl.n	800ac68 <_printf_i+0xe8>
 800ac70:	881e      	ldrh	r6, [r3, #0]
 800ac72:	4854      	ldr	r0, [pc, #336]	; (800adc4 <_printf_i+0x244>)
 800ac74:	2f6f      	cmp	r7, #111	; 0x6f
 800ac76:	bf0c      	ite	eq
 800ac78:	2308      	moveq	r3, #8
 800ac7a:	230a      	movne	r3, #10
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac82:	6865      	ldr	r5, [r4, #4]
 800ac84:	60a5      	str	r5, [r4, #8]
 800ac86:	2d00      	cmp	r5, #0
 800ac88:	bfa2      	ittt	ge
 800ac8a:	6821      	ldrge	r1, [r4, #0]
 800ac8c:	f021 0104 	bicge.w	r1, r1, #4
 800ac90:	6021      	strge	r1, [r4, #0]
 800ac92:	b90e      	cbnz	r6, 800ac98 <_printf_i+0x118>
 800ac94:	2d00      	cmp	r5, #0
 800ac96:	d04d      	beq.n	800ad34 <_printf_i+0x1b4>
 800ac98:	4615      	mov	r5, r2
 800ac9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac9e:	fb03 6711 	mls	r7, r3, r1, r6
 800aca2:	5dc7      	ldrb	r7, [r0, r7]
 800aca4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aca8:	4637      	mov	r7, r6
 800acaa:	42bb      	cmp	r3, r7
 800acac:	460e      	mov	r6, r1
 800acae:	d9f4      	bls.n	800ac9a <_printf_i+0x11a>
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	d10b      	bne.n	800accc <_printf_i+0x14c>
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	07de      	lsls	r6, r3, #31
 800acb8:	d508      	bpl.n	800accc <_printf_i+0x14c>
 800acba:	6923      	ldr	r3, [r4, #16]
 800acbc:	6861      	ldr	r1, [r4, #4]
 800acbe:	4299      	cmp	r1, r3
 800acc0:	bfde      	ittt	le
 800acc2:	2330      	movle	r3, #48	; 0x30
 800acc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800acc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800accc:	1b52      	subs	r2, r2, r5
 800acce:	6122      	str	r2, [r4, #16]
 800acd0:	f8cd a000 	str.w	sl, [sp]
 800acd4:	464b      	mov	r3, r9
 800acd6:	aa03      	add	r2, sp, #12
 800acd8:	4621      	mov	r1, r4
 800acda:	4640      	mov	r0, r8
 800acdc:	f7ff fee2 	bl	800aaa4 <_printf_common>
 800ace0:	3001      	adds	r0, #1
 800ace2:	d14c      	bne.n	800ad7e <_printf_i+0x1fe>
 800ace4:	f04f 30ff 	mov.w	r0, #4294967295
 800ace8:	b004      	add	sp, #16
 800acea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acee:	4835      	ldr	r0, [pc, #212]	; (800adc4 <_printf_i+0x244>)
 800acf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800acf4:	6829      	ldr	r1, [r5, #0]
 800acf6:	6823      	ldr	r3, [r4, #0]
 800acf8:	f851 6b04 	ldr.w	r6, [r1], #4
 800acfc:	6029      	str	r1, [r5, #0]
 800acfe:	061d      	lsls	r5, r3, #24
 800ad00:	d514      	bpl.n	800ad2c <_printf_i+0x1ac>
 800ad02:	07df      	lsls	r7, r3, #31
 800ad04:	bf44      	itt	mi
 800ad06:	f043 0320 	orrmi.w	r3, r3, #32
 800ad0a:	6023      	strmi	r3, [r4, #0]
 800ad0c:	b91e      	cbnz	r6, 800ad16 <_printf_i+0x196>
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	f023 0320 	bic.w	r3, r3, #32
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	2310      	movs	r3, #16
 800ad18:	e7b0      	b.n	800ac7c <_printf_i+0xfc>
 800ad1a:	6823      	ldr	r3, [r4, #0]
 800ad1c:	f043 0320 	orr.w	r3, r3, #32
 800ad20:	6023      	str	r3, [r4, #0]
 800ad22:	2378      	movs	r3, #120	; 0x78
 800ad24:	4828      	ldr	r0, [pc, #160]	; (800adc8 <_printf_i+0x248>)
 800ad26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad2a:	e7e3      	b.n	800acf4 <_printf_i+0x174>
 800ad2c:	0659      	lsls	r1, r3, #25
 800ad2e:	bf48      	it	mi
 800ad30:	b2b6      	uxthmi	r6, r6
 800ad32:	e7e6      	b.n	800ad02 <_printf_i+0x182>
 800ad34:	4615      	mov	r5, r2
 800ad36:	e7bb      	b.n	800acb0 <_printf_i+0x130>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	6826      	ldr	r6, [r4, #0]
 800ad3c:	6961      	ldr	r1, [r4, #20]
 800ad3e:	1d18      	adds	r0, r3, #4
 800ad40:	6028      	str	r0, [r5, #0]
 800ad42:	0635      	lsls	r5, r6, #24
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	d501      	bpl.n	800ad4c <_printf_i+0x1cc>
 800ad48:	6019      	str	r1, [r3, #0]
 800ad4a:	e002      	b.n	800ad52 <_printf_i+0x1d2>
 800ad4c:	0670      	lsls	r0, r6, #25
 800ad4e:	d5fb      	bpl.n	800ad48 <_printf_i+0x1c8>
 800ad50:	8019      	strh	r1, [r3, #0]
 800ad52:	2300      	movs	r3, #0
 800ad54:	6123      	str	r3, [r4, #16]
 800ad56:	4615      	mov	r5, r2
 800ad58:	e7ba      	b.n	800acd0 <_printf_i+0x150>
 800ad5a:	682b      	ldr	r3, [r5, #0]
 800ad5c:	1d1a      	adds	r2, r3, #4
 800ad5e:	602a      	str	r2, [r5, #0]
 800ad60:	681d      	ldr	r5, [r3, #0]
 800ad62:	6862      	ldr	r2, [r4, #4]
 800ad64:	2100      	movs	r1, #0
 800ad66:	4628      	mov	r0, r5
 800ad68:	f7f5 fa72 	bl	8000250 <memchr>
 800ad6c:	b108      	cbz	r0, 800ad72 <_printf_i+0x1f2>
 800ad6e:	1b40      	subs	r0, r0, r5
 800ad70:	6060      	str	r0, [r4, #4]
 800ad72:	6863      	ldr	r3, [r4, #4]
 800ad74:	6123      	str	r3, [r4, #16]
 800ad76:	2300      	movs	r3, #0
 800ad78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad7c:	e7a8      	b.n	800acd0 <_printf_i+0x150>
 800ad7e:	6923      	ldr	r3, [r4, #16]
 800ad80:	462a      	mov	r2, r5
 800ad82:	4649      	mov	r1, r9
 800ad84:	4640      	mov	r0, r8
 800ad86:	47d0      	blx	sl
 800ad88:	3001      	adds	r0, #1
 800ad8a:	d0ab      	beq.n	800ace4 <_printf_i+0x164>
 800ad8c:	6823      	ldr	r3, [r4, #0]
 800ad8e:	079b      	lsls	r3, r3, #30
 800ad90:	d413      	bmi.n	800adba <_printf_i+0x23a>
 800ad92:	68e0      	ldr	r0, [r4, #12]
 800ad94:	9b03      	ldr	r3, [sp, #12]
 800ad96:	4298      	cmp	r0, r3
 800ad98:	bfb8      	it	lt
 800ad9a:	4618      	movlt	r0, r3
 800ad9c:	e7a4      	b.n	800ace8 <_printf_i+0x168>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	4632      	mov	r2, r6
 800ada2:	4649      	mov	r1, r9
 800ada4:	4640      	mov	r0, r8
 800ada6:	47d0      	blx	sl
 800ada8:	3001      	adds	r0, #1
 800adaa:	d09b      	beq.n	800ace4 <_printf_i+0x164>
 800adac:	3501      	adds	r5, #1
 800adae:	68e3      	ldr	r3, [r4, #12]
 800adb0:	9903      	ldr	r1, [sp, #12]
 800adb2:	1a5b      	subs	r3, r3, r1
 800adb4:	42ab      	cmp	r3, r5
 800adb6:	dcf2      	bgt.n	800ad9e <_printf_i+0x21e>
 800adb8:	e7eb      	b.n	800ad92 <_printf_i+0x212>
 800adba:	2500      	movs	r5, #0
 800adbc:	f104 0619 	add.w	r6, r4, #25
 800adc0:	e7f5      	b.n	800adae <_printf_i+0x22e>
 800adc2:	bf00      	nop
 800adc4:	0800f14e 	.word	0x0800f14e
 800adc8:	0800f15f 	.word	0x0800f15f

0800adcc <_scanf_float>:
 800adcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add0:	b087      	sub	sp, #28
 800add2:	4617      	mov	r7, r2
 800add4:	9303      	str	r3, [sp, #12]
 800add6:	688b      	ldr	r3, [r1, #8]
 800add8:	1e5a      	subs	r2, r3, #1
 800adda:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800adde:	bf83      	ittte	hi
 800ade0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ade4:	195b      	addhi	r3, r3, r5
 800ade6:	9302      	strhi	r3, [sp, #8]
 800ade8:	2300      	movls	r3, #0
 800adea:	bf86      	itte	hi
 800adec:	f240 135d 	movwhi	r3, #349	; 0x15d
 800adf0:	608b      	strhi	r3, [r1, #8]
 800adf2:	9302      	strls	r3, [sp, #8]
 800adf4:	680b      	ldr	r3, [r1, #0]
 800adf6:	468b      	mov	fp, r1
 800adf8:	2500      	movs	r5, #0
 800adfa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800adfe:	f84b 3b1c 	str.w	r3, [fp], #28
 800ae02:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ae06:	4680      	mov	r8, r0
 800ae08:	460c      	mov	r4, r1
 800ae0a:	465e      	mov	r6, fp
 800ae0c:	46aa      	mov	sl, r5
 800ae0e:	46a9      	mov	r9, r5
 800ae10:	9501      	str	r5, [sp, #4]
 800ae12:	68a2      	ldr	r2, [r4, #8]
 800ae14:	b152      	cbz	r2, 800ae2c <_scanf_float+0x60>
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	2b4e      	cmp	r3, #78	; 0x4e
 800ae1c:	d864      	bhi.n	800aee8 <_scanf_float+0x11c>
 800ae1e:	2b40      	cmp	r3, #64	; 0x40
 800ae20:	d83c      	bhi.n	800ae9c <_scanf_float+0xd0>
 800ae22:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ae26:	b2c8      	uxtb	r0, r1
 800ae28:	280e      	cmp	r0, #14
 800ae2a:	d93a      	bls.n	800aea2 <_scanf_float+0xd6>
 800ae2c:	f1b9 0f00 	cmp.w	r9, #0
 800ae30:	d003      	beq.n	800ae3a <_scanf_float+0x6e>
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae38:	6023      	str	r3, [r4, #0]
 800ae3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae3e:	f1ba 0f01 	cmp.w	sl, #1
 800ae42:	f200 8113 	bhi.w	800b06c <_scanf_float+0x2a0>
 800ae46:	455e      	cmp	r6, fp
 800ae48:	f200 8105 	bhi.w	800b056 <_scanf_float+0x28a>
 800ae4c:	2501      	movs	r5, #1
 800ae4e:	4628      	mov	r0, r5
 800ae50:	b007      	add	sp, #28
 800ae52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae56:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ae5a:	2a0d      	cmp	r2, #13
 800ae5c:	d8e6      	bhi.n	800ae2c <_scanf_float+0x60>
 800ae5e:	a101      	add	r1, pc, #4	; (adr r1, 800ae64 <_scanf_float+0x98>)
 800ae60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ae64:	0800afa3 	.word	0x0800afa3
 800ae68:	0800ae2d 	.word	0x0800ae2d
 800ae6c:	0800ae2d 	.word	0x0800ae2d
 800ae70:	0800ae2d 	.word	0x0800ae2d
 800ae74:	0800b003 	.word	0x0800b003
 800ae78:	0800afdb 	.word	0x0800afdb
 800ae7c:	0800ae2d 	.word	0x0800ae2d
 800ae80:	0800ae2d 	.word	0x0800ae2d
 800ae84:	0800afb1 	.word	0x0800afb1
 800ae88:	0800ae2d 	.word	0x0800ae2d
 800ae8c:	0800ae2d 	.word	0x0800ae2d
 800ae90:	0800ae2d 	.word	0x0800ae2d
 800ae94:	0800ae2d 	.word	0x0800ae2d
 800ae98:	0800af69 	.word	0x0800af69
 800ae9c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800aea0:	e7db      	b.n	800ae5a <_scanf_float+0x8e>
 800aea2:	290e      	cmp	r1, #14
 800aea4:	d8c2      	bhi.n	800ae2c <_scanf_float+0x60>
 800aea6:	a001      	add	r0, pc, #4	; (adr r0, 800aeac <_scanf_float+0xe0>)
 800aea8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aeac:	0800af5b 	.word	0x0800af5b
 800aeb0:	0800ae2d 	.word	0x0800ae2d
 800aeb4:	0800af5b 	.word	0x0800af5b
 800aeb8:	0800afef 	.word	0x0800afef
 800aebc:	0800ae2d 	.word	0x0800ae2d
 800aec0:	0800af09 	.word	0x0800af09
 800aec4:	0800af45 	.word	0x0800af45
 800aec8:	0800af45 	.word	0x0800af45
 800aecc:	0800af45 	.word	0x0800af45
 800aed0:	0800af45 	.word	0x0800af45
 800aed4:	0800af45 	.word	0x0800af45
 800aed8:	0800af45 	.word	0x0800af45
 800aedc:	0800af45 	.word	0x0800af45
 800aee0:	0800af45 	.word	0x0800af45
 800aee4:	0800af45 	.word	0x0800af45
 800aee8:	2b6e      	cmp	r3, #110	; 0x6e
 800aeea:	d809      	bhi.n	800af00 <_scanf_float+0x134>
 800aeec:	2b60      	cmp	r3, #96	; 0x60
 800aeee:	d8b2      	bhi.n	800ae56 <_scanf_float+0x8a>
 800aef0:	2b54      	cmp	r3, #84	; 0x54
 800aef2:	d077      	beq.n	800afe4 <_scanf_float+0x218>
 800aef4:	2b59      	cmp	r3, #89	; 0x59
 800aef6:	d199      	bne.n	800ae2c <_scanf_float+0x60>
 800aef8:	2d07      	cmp	r5, #7
 800aefa:	d197      	bne.n	800ae2c <_scanf_float+0x60>
 800aefc:	2508      	movs	r5, #8
 800aefe:	e029      	b.n	800af54 <_scanf_float+0x188>
 800af00:	2b74      	cmp	r3, #116	; 0x74
 800af02:	d06f      	beq.n	800afe4 <_scanf_float+0x218>
 800af04:	2b79      	cmp	r3, #121	; 0x79
 800af06:	e7f6      	b.n	800aef6 <_scanf_float+0x12a>
 800af08:	6821      	ldr	r1, [r4, #0]
 800af0a:	05c8      	lsls	r0, r1, #23
 800af0c:	d51a      	bpl.n	800af44 <_scanf_float+0x178>
 800af0e:	9b02      	ldr	r3, [sp, #8]
 800af10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800af14:	6021      	str	r1, [r4, #0]
 800af16:	f109 0901 	add.w	r9, r9, #1
 800af1a:	b11b      	cbz	r3, 800af24 <_scanf_float+0x158>
 800af1c:	3b01      	subs	r3, #1
 800af1e:	3201      	adds	r2, #1
 800af20:	9302      	str	r3, [sp, #8]
 800af22:	60a2      	str	r2, [r4, #8]
 800af24:	68a3      	ldr	r3, [r4, #8]
 800af26:	3b01      	subs	r3, #1
 800af28:	60a3      	str	r3, [r4, #8]
 800af2a:	6923      	ldr	r3, [r4, #16]
 800af2c:	3301      	adds	r3, #1
 800af2e:	6123      	str	r3, [r4, #16]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3b01      	subs	r3, #1
 800af34:	2b00      	cmp	r3, #0
 800af36:	607b      	str	r3, [r7, #4]
 800af38:	f340 8084 	ble.w	800b044 <_scanf_float+0x278>
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	3301      	adds	r3, #1
 800af40:	603b      	str	r3, [r7, #0]
 800af42:	e766      	b.n	800ae12 <_scanf_float+0x46>
 800af44:	eb1a 0f05 	cmn.w	sl, r5
 800af48:	f47f af70 	bne.w	800ae2c <_scanf_float+0x60>
 800af4c:	6822      	ldr	r2, [r4, #0]
 800af4e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800af52:	6022      	str	r2, [r4, #0]
 800af54:	f806 3b01 	strb.w	r3, [r6], #1
 800af58:	e7e4      	b.n	800af24 <_scanf_float+0x158>
 800af5a:	6822      	ldr	r2, [r4, #0]
 800af5c:	0610      	lsls	r0, r2, #24
 800af5e:	f57f af65 	bpl.w	800ae2c <_scanf_float+0x60>
 800af62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af66:	e7f4      	b.n	800af52 <_scanf_float+0x186>
 800af68:	f1ba 0f00 	cmp.w	sl, #0
 800af6c:	d10e      	bne.n	800af8c <_scanf_float+0x1c0>
 800af6e:	f1b9 0f00 	cmp.w	r9, #0
 800af72:	d10e      	bne.n	800af92 <_scanf_float+0x1c6>
 800af74:	6822      	ldr	r2, [r4, #0]
 800af76:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800af7a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800af7e:	d108      	bne.n	800af92 <_scanf_float+0x1c6>
 800af80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af84:	6022      	str	r2, [r4, #0]
 800af86:	f04f 0a01 	mov.w	sl, #1
 800af8a:	e7e3      	b.n	800af54 <_scanf_float+0x188>
 800af8c:	f1ba 0f02 	cmp.w	sl, #2
 800af90:	d055      	beq.n	800b03e <_scanf_float+0x272>
 800af92:	2d01      	cmp	r5, #1
 800af94:	d002      	beq.n	800af9c <_scanf_float+0x1d0>
 800af96:	2d04      	cmp	r5, #4
 800af98:	f47f af48 	bne.w	800ae2c <_scanf_float+0x60>
 800af9c:	3501      	adds	r5, #1
 800af9e:	b2ed      	uxtb	r5, r5
 800afa0:	e7d8      	b.n	800af54 <_scanf_float+0x188>
 800afa2:	f1ba 0f01 	cmp.w	sl, #1
 800afa6:	f47f af41 	bne.w	800ae2c <_scanf_float+0x60>
 800afaa:	f04f 0a02 	mov.w	sl, #2
 800afae:	e7d1      	b.n	800af54 <_scanf_float+0x188>
 800afb0:	b97d      	cbnz	r5, 800afd2 <_scanf_float+0x206>
 800afb2:	f1b9 0f00 	cmp.w	r9, #0
 800afb6:	f47f af3c 	bne.w	800ae32 <_scanf_float+0x66>
 800afba:	6822      	ldr	r2, [r4, #0]
 800afbc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800afc0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800afc4:	f47f af39 	bne.w	800ae3a <_scanf_float+0x6e>
 800afc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800afcc:	6022      	str	r2, [r4, #0]
 800afce:	2501      	movs	r5, #1
 800afd0:	e7c0      	b.n	800af54 <_scanf_float+0x188>
 800afd2:	2d03      	cmp	r5, #3
 800afd4:	d0e2      	beq.n	800af9c <_scanf_float+0x1d0>
 800afd6:	2d05      	cmp	r5, #5
 800afd8:	e7de      	b.n	800af98 <_scanf_float+0x1cc>
 800afda:	2d02      	cmp	r5, #2
 800afdc:	f47f af26 	bne.w	800ae2c <_scanf_float+0x60>
 800afe0:	2503      	movs	r5, #3
 800afe2:	e7b7      	b.n	800af54 <_scanf_float+0x188>
 800afe4:	2d06      	cmp	r5, #6
 800afe6:	f47f af21 	bne.w	800ae2c <_scanf_float+0x60>
 800afea:	2507      	movs	r5, #7
 800afec:	e7b2      	b.n	800af54 <_scanf_float+0x188>
 800afee:	6822      	ldr	r2, [r4, #0]
 800aff0:	0591      	lsls	r1, r2, #22
 800aff2:	f57f af1b 	bpl.w	800ae2c <_scanf_float+0x60>
 800aff6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800affa:	6022      	str	r2, [r4, #0]
 800affc:	f8cd 9004 	str.w	r9, [sp, #4]
 800b000:	e7a8      	b.n	800af54 <_scanf_float+0x188>
 800b002:	6822      	ldr	r2, [r4, #0]
 800b004:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b008:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b00c:	d006      	beq.n	800b01c <_scanf_float+0x250>
 800b00e:	0550      	lsls	r0, r2, #21
 800b010:	f57f af0c 	bpl.w	800ae2c <_scanf_float+0x60>
 800b014:	f1b9 0f00 	cmp.w	r9, #0
 800b018:	f43f af0f 	beq.w	800ae3a <_scanf_float+0x6e>
 800b01c:	0591      	lsls	r1, r2, #22
 800b01e:	bf58      	it	pl
 800b020:	9901      	ldrpl	r1, [sp, #4]
 800b022:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b026:	bf58      	it	pl
 800b028:	eba9 0101 	subpl.w	r1, r9, r1
 800b02c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b030:	bf58      	it	pl
 800b032:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b036:	6022      	str	r2, [r4, #0]
 800b038:	f04f 0900 	mov.w	r9, #0
 800b03c:	e78a      	b.n	800af54 <_scanf_float+0x188>
 800b03e:	f04f 0a03 	mov.w	sl, #3
 800b042:	e787      	b.n	800af54 <_scanf_float+0x188>
 800b044:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b048:	4639      	mov	r1, r7
 800b04a:	4640      	mov	r0, r8
 800b04c:	4798      	blx	r3
 800b04e:	2800      	cmp	r0, #0
 800b050:	f43f aedf 	beq.w	800ae12 <_scanf_float+0x46>
 800b054:	e6ea      	b.n	800ae2c <_scanf_float+0x60>
 800b056:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b05a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b05e:	463a      	mov	r2, r7
 800b060:	4640      	mov	r0, r8
 800b062:	4798      	blx	r3
 800b064:	6923      	ldr	r3, [r4, #16]
 800b066:	3b01      	subs	r3, #1
 800b068:	6123      	str	r3, [r4, #16]
 800b06a:	e6ec      	b.n	800ae46 <_scanf_float+0x7a>
 800b06c:	1e6b      	subs	r3, r5, #1
 800b06e:	2b06      	cmp	r3, #6
 800b070:	d825      	bhi.n	800b0be <_scanf_float+0x2f2>
 800b072:	2d02      	cmp	r5, #2
 800b074:	d836      	bhi.n	800b0e4 <_scanf_float+0x318>
 800b076:	455e      	cmp	r6, fp
 800b078:	f67f aee8 	bls.w	800ae4c <_scanf_float+0x80>
 800b07c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b080:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b084:	463a      	mov	r2, r7
 800b086:	4640      	mov	r0, r8
 800b088:	4798      	blx	r3
 800b08a:	6923      	ldr	r3, [r4, #16]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	6123      	str	r3, [r4, #16]
 800b090:	e7f1      	b.n	800b076 <_scanf_float+0x2aa>
 800b092:	9802      	ldr	r0, [sp, #8]
 800b094:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b098:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b09c:	9002      	str	r0, [sp, #8]
 800b09e:	463a      	mov	r2, r7
 800b0a0:	4640      	mov	r0, r8
 800b0a2:	4798      	blx	r3
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	6123      	str	r3, [r4, #16]
 800b0aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0ae:	fa5f fa8a 	uxtb.w	sl, sl
 800b0b2:	f1ba 0f02 	cmp.w	sl, #2
 800b0b6:	d1ec      	bne.n	800b092 <_scanf_float+0x2c6>
 800b0b8:	3d03      	subs	r5, #3
 800b0ba:	b2ed      	uxtb	r5, r5
 800b0bc:	1b76      	subs	r6, r6, r5
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	05da      	lsls	r2, r3, #23
 800b0c2:	d52f      	bpl.n	800b124 <_scanf_float+0x358>
 800b0c4:	055b      	lsls	r3, r3, #21
 800b0c6:	d510      	bpl.n	800b0ea <_scanf_float+0x31e>
 800b0c8:	455e      	cmp	r6, fp
 800b0ca:	f67f aebf 	bls.w	800ae4c <_scanf_float+0x80>
 800b0ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b0d6:	463a      	mov	r2, r7
 800b0d8:	4640      	mov	r0, r8
 800b0da:	4798      	blx	r3
 800b0dc:	6923      	ldr	r3, [r4, #16]
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	6123      	str	r3, [r4, #16]
 800b0e2:	e7f1      	b.n	800b0c8 <_scanf_float+0x2fc>
 800b0e4:	46aa      	mov	sl, r5
 800b0e6:	9602      	str	r6, [sp, #8]
 800b0e8:	e7df      	b.n	800b0aa <_scanf_float+0x2de>
 800b0ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b0ee:	6923      	ldr	r3, [r4, #16]
 800b0f0:	2965      	cmp	r1, #101	; 0x65
 800b0f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b0f6:	f106 35ff 	add.w	r5, r6, #4294967295
 800b0fa:	6123      	str	r3, [r4, #16]
 800b0fc:	d00c      	beq.n	800b118 <_scanf_float+0x34c>
 800b0fe:	2945      	cmp	r1, #69	; 0x45
 800b100:	d00a      	beq.n	800b118 <_scanf_float+0x34c>
 800b102:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b106:	463a      	mov	r2, r7
 800b108:	4640      	mov	r0, r8
 800b10a:	4798      	blx	r3
 800b10c:	6923      	ldr	r3, [r4, #16]
 800b10e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b112:	3b01      	subs	r3, #1
 800b114:	1eb5      	subs	r5, r6, #2
 800b116:	6123      	str	r3, [r4, #16]
 800b118:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b11c:	463a      	mov	r2, r7
 800b11e:	4640      	mov	r0, r8
 800b120:	4798      	blx	r3
 800b122:	462e      	mov	r6, r5
 800b124:	6825      	ldr	r5, [r4, #0]
 800b126:	f015 0510 	ands.w	r5, r5, #16
 800b12a:	d14e      	bne.n	800b1ca <_scanf_float+0x3fe>
 800b12c:	7035      	strb	r5, [r6, #0]
 800b12e:	6823      	ldr	r3, [r4, #0]
 800b130:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b138:	d119      	bne.n	800b16e <_scanf_float+0x3a2>
 800b13a:	9b01      	ldr	r3, [sp, #4]
 800b13c:	454b      	cmp	r3, r9
 800b13e:	eba3 0209 	sub.w	r2, r3, r9
 800b142:	d121      	bne.n	800b188 <_scanf_float+0x3bc>
 800b144:	2200      	movs	r2, #0
 800b146:	4659      	mov	r1, fp
 800b148:	4640      	mov	r0, r8
 800b14a:	f000 fe3b 	bl	800bdc4 <_strtod_r>
 800b14e:	6822      	ldr	r2, [r4, #0]
 800b150:	9b03      	ldr	r3, [sp, #12]
 800b152:	f012 0f02 	tst.w	r2, #2
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	d021      	beq.n	800b19e <_scanf_float+0x3d2>
 800b15a:	9903      	ldr	r1, [sp, #12]
 800b15c:	1d1a      	adds	r2, r3, #4
 800b15e:	600a      	str	r2, [r1, #0]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	ed83 0b00 	vstr	d0, [r3]
 800b166:	68e3      	ldr	r3, [r4, #12]
 800b168:	3301      	adds	r3, #1
 800b16a:	60e3      	str	r3, [r4, #12]
 800b16c:	e66f      	b.n	800ae4e <_scanf_float+0x82>
 800b16e:	9b04      	ldr	r3, [sp, #16]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d0e7      	beq.n	800b144 <_scanf_float+0x378>
 800b174:	9905      	ldr	r1, [sp, #20]
 800b176:	230a      	movs	r3, #10
 800b178:	462a      	mov	r2, r5
 800b17a:	3101      	adds	r1, #1
 800b17c:	4640      	mov	r0, r8
 800b17e:	f000 fea9 	bl	800bed4 <_strtol_r>
 800b182:	9b04      	ldr	r3, [sp, #16]
 800b184:	9e05      	ldr	r6, [sp, #20]
 800b186:	1ac2      	subs	r2, r0, r3
 800b188:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b18c:	429e      	cmp	r6, r3
 800b18e:	bf28      	it	cs
 800b190:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b194:	490e      	ldr	r1, [pc, #56]	; (800b1d0 <_scanf_float+0x404>)
 800b196:	4630      	mov	r0, r6
 800b198:	f000 f824 	bl	800b1e4 <siprintf>
 800b19c:	e7d2      	b.n	800b144 <_scanf_float+0x378>
 800b19e:	9903      	ldr	r1, [sp, #12]
 800b1a0:	f012 0f04 	tst.w	r2, #4
 800b1a4:	f103 0204 	add.w	r2, r3, #4
 800b1a8:	600a      	str	r2, [r1, #0]
 800b1aa:	d1d9      	bne.n	800b160 <_scanf_float+0x394>
 800b1ac:	eeb4 0b40 	vcmp.f64	d0, d0
 800b1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b4:	681e      	ldr	r6, [r3, #0]
 800b1b6:	d705      	bvc.n	800b1c4 <_scanf_float+0x3f8>
 800b1b8:	4806      	ldr	r0, [pc, #24]	; (800b1d4 <_scanf_float+0x408>)
 800b1ba:	f000 f80d 	bl	800b1d8 <nanf>
 800b1be:	ed86 0a00 	vstr	s0, [r6]
 800b1c2:	e7d0      	b.n	800b166 <_scanf_float+0x39a>
 800b1c4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b1c8:	e7f9      	b.n	800b1be <_scanf_float+0x3f2>
 800b1ca:	2500      	movs	r5, #0
 800b1cc:	e63f      	b.n	800ae4e <_scanf_float+0x82>
 800b1ce:	bf00      	nop
 800b1d0:	0800f170 	.word	0x0800f170
 800b1d4:	0800f578 	.word	0x0800f578

0800b1d8 <nanf>:
 800b1d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b1e0 <nanf+0x8>
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	7fc00000 	.word	0x7fc00000

0800b1e4 <siprintf>:
 800b1e4:	b40e      	push	{r1, r2, r3}
 800b1e6:	b500      	push	{lr}
 800b1e8:	b09c      	sub	sp, #112	; 0x70
 800b1ea:	ab1d      	add	r3, sp, #116	; 0x74
 800b1ec:	9002      	str	r0, [sp, #8]
 800b1ee:	9006      	str	r0, [sp, #24]
 800b1f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b1f4:	4809      	ldr	r0, [pc, #36]	; (800b21c <siprintf+0x38>)
 800b1f6:	9107      	str	r1, [sp, #28]
 800b1f8:	9104      	str	r1, [sp, #16]
 800b1fa:	4909      	ldr	r1, [pc, #36]	; (800b220 <siprintf+0x3c>)
 800b1fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b200:	9105      	str	r1, [sp, #20]
 800b202:	6800      	ldr	r0, [r0, #0]
 800b204:	9301      	str	r3, [sp, #4]
 800b206:	a902      	add	r1, sp, #8
 800b208:	f002 fe0c 	bl	800de24 <_svfiprintf_r>
 800b20c:	9b02      	ldr	r3, [sp, #8]
 800b20e:	2200      	movs	r2, #0
 800b210:	701a      	strb	r2, [r3, #0]
 800b212:	b01c      	add	sp, #112	; 0x70
 800b214:	f85d eb04 	ldr.w	lr, [sp], #4
 800b218:	b003      	add	sp, #12
 800b21a:	4770      	bx	lr
 800b21c:	20000024 	.word	0x20000024
 800b220:	ffff0208 	.word	0xffff0208

0800b224 <sulp>:
 800b224:	b570      	push	{r4, r5, r6, lr}
 800b226:	4604      	mov	r4, r0
 800b228:	460d      	mov	r5, r1
 800b22a:	4616      	mov	r6, r2
 800b22c:	ec45 4b10 	vmov	d0, r4, r5
 800b230:	f002 fb5a 	bl	800d8e8 <__ulp>
 800b234:	b17e      	cbz	r6, 800b256 <sulp+0x32>
 800b236:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b23a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b23e:	2b00      	cmp	r3, #0
 800b240:	dd09      	ble.n	800b256 <sulp+0x32>
 800b242:	051b      	lsls	r3, r3, #20
 800b244:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800b248:	2000      	movs	r0, #0
 800b24a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800b24e:	ec41 0b17 	vmov	d7, r0, r1
 800b252:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b256:	bd70      	pop	{r4, r5, r6, pc}

0800b258 <_strtod_l>:
 800b258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	ed2d 8b0e 	vpush	{d8-d14}
 800b260:	b097      	sub	sp, #92	; 0x5c
 800b262:	461f      	mov	r7, r3
 800b264:	2300      	movs	r3, #0
 800b266:	9312      	str	r3, [sp, #72]	; 0x48
 800b268:	4ba1      	ldr	r3, [pc, #644]	; (800b4f0 <_strtod_l+0x298>)
 800b26a:	920d      	str	r2, [sp, #52]	; 0x34
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	9307      	str	r3, [sp, #28]
 800b270:	4604      	mov	r4, r0
 800b272:	4618      	mov	r0, r3
 800b274:	468b      	mov	fp, r1
 800b276:	f7f4 ffe3 	bl	8000240 <strlen>
 800b27a:	f04f 0800 	mov.w	r8, #0
 800b27e:	4605      	mov	r5, r0
 800b280:	f04f 0900 	mov.w	r9, #0
 800b284:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b288:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b28a:	7813      	ldrb	r3, [r2, #0]
 800b28c:	2b2b      	cmp	r3, #43	; 0x2b
 800b28e:	d04d      	beq.n	800b32c <_strtod_l+0xd4>
 800b290:	d83a      	bhi.n	800b308 <_strtod_l+0xb0>
 800b292:	2b0d      	cmp	r3, #13
 800b294:	d833      	bhi.n	800b2fe <_strtod_l+0xa6>
 800b296:	2b08      	cmp	r3, #8
 800b298:	d833      	bhi.n	800b302 <_strtod_l+0xaa>
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d03d      	beq.n	800b31a <_strtod_l+0xc2>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	9308      	str	r3, [sp, #32]
 800b2a2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800b2a4:	7833      	ldrb	r3, [r6, #0]
 800b2a6:	2b30      	cmp	r3, #48	; 0x30
 800b2a8:	f040 80b0 	bne.w	800b40c <_strtod_l+0x1b4>
 800b2ac:	7873      	ldrb	r3, [r6, #1]
 800b2ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b2b2:	2b58      	cmp	r3, #88	; 0x58
 800b2b4:	d167      	bne.n	800b386 <_strtod_l+0x12e>
 800b2b6:	9b08      	ldr	r3, [sp, #32]
 800b2b8:	9301      	str	r3, [sp, #4]
 800b2ba:	ab12      	add	r3, sp, #72	; 0x48
 800b2bc:	9702      	str	r7, [sp, #8]
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	4a8c      	ldr	r2, [pc, #560]	; (800b4f4 <_strtod_l+0x29c>)
 800b2c2:	ab13      	add	r3, sp, #76	; 0x4c
 800b2c4:	a911      	add	r1, sp, #68	; 0x44
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f001 fc68 	bl	800cb9c <__gethex>
 800b2cc:	f010 0507 	ands.w	r5, r0, #7
 800b2d0:	4607      	mov	r7, r0
 800b2d2:	d005      	beq.n	800b2e0 <_strtod_l+0x88>
 800b2d4:	2d06      	cmp	r5, #6
 800b2d6:	d12b      	bne.n	800b330 <_strtod_l+0xd8>
 800b2d8:	3601      	adds	r6, #1
 800b2da:	2300      	movs	r3, #0
 800b2dc:	9611      	str	r6, [sp, #68]	; 0x44
 800b2de:	9308      	str	r3, [sp, #32]
 800b2e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f040 854e 	bne.w	800bd84 <_strtod_l+0xb2c>
 800b2e8:	9b08      	ldr	r3, [sp, #32]
 800b2ea:	b1e3      	cbz	r3, 800b326 <_strtod_l+0xce>
 800b2ec:	ec49 8b17 	vmov	d7, r8, r9
 800b2f0:	eeb1 0b47 	vneg.f64	d0, d7
 800b2f4:	b017      	add	sp, #92	; 0x5c
 800b2f6:	ecbd 8b0e 	vpop	{d8-d14}
 800b2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fe:	2b20      	cmp	r3, #32
 800b300:	d1cd      	bne.n	800b29e <_strtod_l+0x46>
 800b302:	3201      	adds	r2, #1
 800b304:	9211      	str	r2, [sp, #68]	; 0x44
 800b306:	e7bf      	b.n	800b288 <_strtod_l+0x30>
 800b308:	2b2d      	cmp	r3, #45	; 0x2d
 800b30a:	d1c8      	bne.n	800b29e <_strtod_l+0x46>
 800b30c:	2301      	movs	r3, #1
 800b30e:	9308      	str	r3, [sp, #32]
 800b310:	1c53      	adds	r3, r2, #1
 800b312:	9311      	str	r3, [sp, #68]	; 0x44
 800b314:	7853      	ldrb	r3, [r2, #1]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1c3      	bne.n	800b2a2 <_strtod_l+0x4a>
 800b31a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b31c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b320:	2b00      	cmp	r3, #0
 800b322:	f040 852d 	bne.w	800bd80 <_strtod_l+0xb28>
 800b326:	ec49 8b10 	vmov	d0, r8, r9
 800b32a:	e7e3      	b.n	800b2f4 <_strtod_l+0x9c>
 800b32c:	2300      	movs	r3, #0
 800b32e:	e7ee      	b.n	800b30e <_strtod_l+0xb6>
 800b330:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b332:	b13a      	cbz	r2, 800b344 <_strtod_l+0xec>
 800b334:	2135      	movs	r1, #53	; 0x35
 800b336:	a814      	add	r0, sp, #80	; 0x50
 800b338:	f002 fbde 	bl	800daf8 <__copybits>
 800b33c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b33e:	4620      	mov	r0, r4
 800b340:	f001 ffa0 	bl	800d284 <_Bfree>
 800b344:	3d01      	subs	r5, #1
 800b346:	2d04      	cmp	r5, #4
 800b348:	d806      	bhi.n	800b358 <_strtod_l+0x100>
 800b34a:	e8df f005 	tbb	[pc, r5]
 800b34e:	030a      	.short	0x030a
 800b350:	1714      	.short	0x1714
 800b352:	0a          	.byte	0x0a
 800b353:	00          	.byte	0x00
 800b354:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800b358:	073f      	lsls	r7, r7, #28
 800b35a:	d5c1      	bpl.n	800b2e0 <_strtod_l+0x88>
 800b35c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800b360:	e7be      	b.n	800b2e0 <_strtod_l+0x88>
 800b362:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800b366:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b368:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b36c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b370:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b374:	e7f0      	b.n	800b358 <_strtod_l+0x100>
 800b376:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800b4f8 <_strtod_l+0x2a0>
 800b37a:	e7ed      	b.n	800b358 <_strtod_l+0x100>
 800b37c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b380:	f04f 38ff 	mov.w	r8, #4294967295
 800b384:	e7e8      	b.n	800b358 <_strtod_l+0x100>
 800b386:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b388:	1c5a      	adds	r2, r3, #1
 800b38a:	9211      	str	r2, [sp, #68]	; 0x44
 800b38c:	785b      	ldrb	r3, [r3, #1]
 800b38e:	2b30      	cmp	r3, #48	; 0x30
 800b390:	d0f9      	beq.n	800b386 <_strtod_l+0x12e>
 800b392:	2b00      	cmp	r3, #0
 800b394:	d0a4      	beq.n	800b2e0 <_strtod_l+0x88>
 800b396:	2301      	movs	r3, #1
 800b398:	f04f 0a00 	mov.w	sl, #0
 800b39c:	9304      	str	r3, [sp, #16]
 800b39e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3a0:	930a      	str	r3, [sp, #40]	; 0x28
 800b3a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b3a6:	f8cd a018 	str.w	sl, [sp, #24]
 800b3aa:	220a      	movs	r2, #10
 800b3ac:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b3ae:	7807      	ldrb	r7, [r0, #0]
 800b3b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b3b4:	b2d9      	uxtb	r1, r3
 800b3b6:	2909      	cmp	r1, #9
 800b3b8:	d92a      	bls.n	800b410 <_strtod_l+0x1b8>
 800b3ba:	9907      	ldr	r1, [sp, #28]
 800b3bc:	462a      	mov	r2, r5
 800b3be:	f002 fe4b 	bl	800e058 <strncmp>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d033      	beq.n	800b42e <_strtod_l+0x1d6>
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	9b06      	ldr	r3, [sp, #24]
 800b3ca:	463a      	mov	r2, r7
 800b3cc:	4601      	mov	r1, r0
 800b3ce:	4607      	mov	r7, r0
 800b3d0:	2a65      	cmp	r2, #101	; 0x65
 800b3d2:	d001      	beq.n	800b3d8 <_strtod_l+0x180>
 800b3d4:	2a45      	cmp	r2, #69	; 0x45
 800b3d6:	d117      	bne.n	800b408 <_strtod_l+0x1b0>
 800b3d8:	b91b      	cbnz	r3, 800b3e2 <_strtod_l+0x18a>
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	4303      	orrs	r3, r0
 800b3de:	d09c      	beq.n	800b31a <_strtod_l+0xc2>
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800b3e6:	f10b 0201 	add.w	r2, fp, #1
 800b3ea:	9211      	str	r2, [sp, #68]	; 0x44
 800b3ec:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800b3f0:	2a2b      	cmp	r2, #43	; 0x2b
 800b3f2:	d071      	beq.n	800b4d8 <_strtod_l+0x280>
 800b3f4:	2a2d      	cmp	r2, #45	; 0x2d
 800b3f6:	d077      	beq.n	800b4e8 <_strtod_l+0x290>
 800b3f8:	f04f 0e00 	mov.w	lr, #0
 800b3fc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800b400:	2d09      	cmp	r5, #9
 800b402:	d97f      	bls.n	800b504 <_strtod_l+0x2ac>
 800b404:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b408:	2500      	movs	r5, #0
 800b40a:	e09b      	b.n	800b544 <_strtod_l+0x2ec>
 800b40c:	2300      	movs	r3, #0
 800b40e:	e7c3      	b.n	800b398 <_strtod_l+0x140>
 800b410:	9906      	ldr	r1, [sp, #24]
 800b412:	2908      	cmp	r1, #8
 800b414:	bfdd      	ittte	le
 800b416:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b418:	fb02 3301 	mlale	r3, r2, r1, r3
 800b41c:	9309      	strle	r3, [sp, #36]	; 0x24
 800b41e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b422:	9b06      	ldr	r3, [sp, #24]
 800b424:	3001      	adds	r0, #1
 800b426:	3301      	adds	r3, #1
 800b428:	9306      	str	r3, [sp, #24]
 800b42a:	9011      	str	r0, [sp, #68]	; 0x44
 800b42c:	e7be      	b.n	800b3ac <_strtod_l+0x154>
 800b42e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b430:	195a      	adds	r2, r3, r5
 800b432:	9211      	str	r2, [sp, #68]	; 0x44
 800b434:	5d5a      	ldrb	r2, [r3, r5]
 800b436:	9b06      	ldr	r3, [sp, #24]
 800b438:	b3a3      	cbz	r3, 800b4a4 <_strtod_l+0x24c>
 800b43a:	4607      	mov	r7, r0
 800b43c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b440:	2909      	cmp	r1, #9
 800b442:	d912      	bls.n	800b46a <_strtod_l+0x212>
 800b444:	2101      	movs	r1, #1
 800b446:	e7c3      	b.n	800b3d0 <_strtod_l+0x178>
 800b448:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b44a:	1c5a      	adds	r2, r3, #1
 800b44c:	9211      	str	r2, [sp, #68]	; 0x44
 800b44e:	785a      	ldrb	r2, [r3, #1]
 800b450:	3001      	adds	r0, #1
 800b452:	2a30      	cmp	r2, #48	; 0x30
 800b454:	d0f8      	beq.n	800b448 <_strtod_l+0x1f0>
 800b456:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b45a:	2b08      	cmp	r3, #8
 800b45c:	f200 8497 	bhi.w	800bd8e <_strtod_l+0xb36>
 800b460:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b462:	930a      	str	r3, [sp, #40]	; 0x28
 800b464:	4607      	mov	r7, r0
 800b466:	2000      	movs	r0, #0
 800b468:	4603      	mov	r3, r0
 800b46a:	3a30      	subs	r2, #48	; 0x30
 800b46c:	f100 0101 	add.w	r1, r0, #1
 800b470:	d012      	beq.n	800b498 <_strtod_l+0x240>
 800b472:	440f      	add	r7, r1
 800b474:	eb00 0c03 	add.w	ip, r0, r3
 800b478:	4619      	mov	r1, r3
 800b47a:	250a      	movs	r5, #10
 800b47c:	4561      	cmp	r1, ip
 800b47e:	d113      	bne.n	800b4a8 <_strtod_l+0x250>
 800b480:	1819      	adds	r1, r3, r0
 800b482:	2908      	cmp	r1, #8
 800b484:	f103 0301 	add.w	r3, r3, #1
 800b488:	4403      	add	r3, r0
 800b48a:	dc1c      	bgt.n	800b4c6 <_strtod_l+0x26e>
 800b48c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b48e:	210a      	movs	r1, #10
 800b490:	fb01 2200 	mla	r2, r1, r0, r2
 800b494:	9209      	str	r2, [sp, #36]	; 0x24
 800b496:	2100      	movs	r1, #0
 800b498:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b49a:	1c50      	adds	r0, r2, #1
 800b49c:	9011      	str	r0, [sp, #68]	; 0x44
 800b49e:	7852      	ldrb	r2, [r2, #1]
 800b4a0:	4608      	mov	r0, r1
 800b4a2:	e7cb      	b.n	800b43c <_strtod_l+0x1e4>
 800b4a4:	9806      	ldr	r0, [sp, #24]
 800b4a6:	e7d4      	b.n	800b452 <_strtod_l+0x1fa>
 800b4a8:	2908      	cmp	r1, #8
 800b4aa:	dc04      	bgt.n	800b4b6 <_strtod_l+0x25e>
 800b4ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b4ae:	436e      	muls	r6, r5
 800b4b0:	9609      	str	r6, [sp, #36]	; 0x24
 800b4b2:	3101      	adds	r1, #1
 800b4b4:	e7e2      	b.n	800b47c <_strtod_l+0x224>
 800b4b6:	f101 0e01 	add.w	lr, r1, #1
 800b4ba:	f1be 0f10 	cmp.w	lr, #16
 800b4be:	bfd8      	it	le
 800b4c0:	fb05 fa0a 	mulle.w	sl, r5, sl
 800b4c4:	e7f5      	b.n	800b4b2 <_strtod_l+0x25a>
 800b4c6:	2b10      	cmp	r3, #16
 800b4c8:	bfdc      	itt	le
 800b4ca:	210a      	movle	r1, #10
 800b4cc:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800b4d0:	e7e1      	b.n	800b496 <_strtod_l+0x23e>
 800b4d2:	2700      	movs	r7, #0
 800b4d4:	2101      	movs	r1, #1
 800b4d6:	e780      	b.n	800b3da <_strtod_l+0x182>
 800b4d8:	f04f 0e00 	mov.w	lr, #0
 800b4dc:	f10b 0202 	add.w	r2, fp, #2
 800b4e0:	9211      	str	r2, [sp, #68]	; 0x44
 800b4e2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800b4e6:	e789      	b.n	800b3fc <_strtod_l+0x1a4>
 800b4e8:	f04f 0e01 	mov.w	lr, #1
 800b4ec:	e7f6      	b.n	800b4dc <_strtod_l+0x284>
 800b4ee:	bf00      	nop
 800b4f0:	0800f3c0 	.word	0x0800f3c0
 800b4f4:	0800f178 	.word	0x0800f178
 800b4f8:	7ff00000 	.word	0x7ff00000
 800b4fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b4fe:	1c55      	adds	r5, r2, #1
 800b500:	9511      	str	r5, [sp, #68]	; 0x44
 800b502:	7852      	ldrb	r2, [r2, #1]
 800b504:	2a30      	cmp	r2, #48	; 0x30
 800b506:	d0f9      	beq.n	800b4fc <_strtod_l+0x2a4>
 800b508:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800b50c:	2d08      	cmp	r5, #8
 800b50e:	f63f af7b 	bhi.w	800b408 <_strtod_l+0x1b0>
 800b512:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800b516:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b518:	9207      	str	r2, [sp, #28]
 800b51a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b51c:	1c55      	adds	r5, r2, #1
 800b51e:	9511      	str	r5, [sp, #68]	; 0x44
 800b520:	7852      	ldrb	r2, [r2, #1]
 800b522:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b526:	2e09      	cmp	r6, #9
 800b528:	d937      	bls.n	800b59a <_strtod_l+0x342>
 800b52a:	9e07      	ldr	r6, [sp, #28]
 800b52c:	1bad      	subs	r5, r5, r6
 800b52e:	2d08      	cmp	r5, #8
 800b530:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800b534:	dc02      	bgt.n	800b53c <_strtod_l+0x2e4>
 800b536:	4565      	cmp	r5, ip
 800b538:	bfa8      	it	ge
 800b53a:	4665      	movge	r5, ip
 800b53c:	f1be 0f00 	cmp.w	lr, #0
 800b540:	d000      	beq.n	800b544 <_strtod_l+0x2ec>
 800b542:	426d      	negs	r5, r5
 800b544:	2b00      	cmp	r3, #0
 800b546:	d14d      	bne.n	800b5e4 <_strtod_l+0x38c>
 800b548:	9b04      	ldr	r3, [sp, #16]
 800b54a:	4303      	orrs	r3, r0
 800b54c:	f47f aec8 	bne.w	800b2e0 <_strtod_l+0x88>
 800b550:	2900      	cmp	r1, #0
 800b552:	f47f aee2 	bne.w	800b31a <_strtod_l+0xc2>
 800b556:	2a69      	cmp	r2, #105	; 0x69
 800b558:	d027      	beq.n	800b5aa <_strtod_l+0x352>
 800b55a:	dc24      	bgt.n	800b5a6 <_strtod_l+0x34e>
 800b55c:	2a49      	cmp	r2, #73	; 0x49
 800b55e:	d024      	beq.n	800b5aa <_strtod_l+0x352>
 800b560:	2a4e      	cmp	r2, #78	; 0x4e
 800b562:	f47f aeda 	bne.w	800b31a <_strtod_l+0xc2>
 800b566:	4996      	ldr	r1, [pc, #600]	; (800b7c0 <_strtod_l+0x568>)
 800b568:	a811      	add	r0, sp, #68	; 0x44
 800b56a:	f001 fd6f 	bl	800d04c <__match>
 800b56e:	2800      	cmp	r0, #0
 800b570:	f43f aed3 	beq.w	800b31a <_strtod_l+0xc2>
 800b574:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	2b28      	cmp	r3, #40	; 0x28
 800b57a:	d12d      	bne.n	800b5d8 <_strtod_l+0x380>
 800b57c:	4991      	ldr	r1, [pc, #580]	; (800b7c4 <_strtod_l+0x56c>)
 800b57e:	aa14      	add	r2, sp, #80	; 0x50
 800b580:	a811      	add	r0, sp, #68	; 0x44
 800b582:	f001 fd77 	bl	800d074 <__hexnan>
 800b586:	2805      	cmp	r0, #5
 800b588:	d126      	bne.n	800b5d8 <_strtod_l+0x380>
 800b58a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b58c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b590:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b594:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b598:	e6a2      	b.n	800b2e0 <_strtod_l+0x88>
 800b59a:	250a      	movs	r5, #10
 800b59c:	fb05 250c 	mla	r5, r5, ip, r2
 800b5a0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800b5a4:	e7b9      	b.n	800b51a <_strtod_l+0x2c2>
 800b5a6:	2a6e      	cmp	r2, #110	; 0x6e
 800b5a8:	e7db      	b.n	800b562 <_strtod_l+0x30a>
 800b5aa:	4987      	ldr	r1, [pc, #540]	; (800b7c8 <_strtod_l+0x570>)
 800b5ac:	a811      	add	r0, sp, #68	; 0x44
 800b5ae:	f001 fd4d 	bl	800d04c <__match>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	f43f aeb1 	beq.w	800b31a <_strtod_l+0xc2>
 800b5b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5ba:	4984      	ldr	r1, [pc, #528]	; (800b7cc <_strtod_l+0x574>)
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	a811      	add	r0, sp, #68	; 0x44
 800b5c0:	9311      	str	r3, [sp, #68]	; 0x44
 800b5c2:	f001 fd43 	bl	800d04c <__match>
 800b5c6:	b910      	cbnz	r0, 800b5ce <_strtod_l+0x376>
 800b5c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	9311      	str	r3, [sp, #68]	; 0x44
 800b5ce:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800b7e0 <_strtod_l+0x588>
 800b5d2:	f04f 0800 	mov.w	r8, #0
 800b5d6:	e683      	b.n	800b2e0 <_strtod_l+0x88>
 800b5d8:	487d      	ldr	r0, [pc, #500]	; (800b7d0 <_strtod_l+0x578>)
 800b5da:	f002 fd25 	bl	800e028 <nan>
 800b5de:	ec59 8b10 	vmov	r8, r9, d0
 800b5e2:	e67d      	b.n	800b2e0 <_strtod_l+0x88>
 800b5e4:	1bea      	subs	r2, r5, r7
 800b5e6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800b5ea:	9207      	str	r2, [sp, #28]
 800b5ec:	9a06      	ldr	r2, [sp, #24]
 800b5ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b5f2:	2a00      	cmp	r2, #0
 800b5f4:	bf08      	it	eq
 800b5f6:	461a      	moveq	r2, r3
 800b5f8:	2b10      	cmp	r3, #16
 800b5fa:	9206      	str	r2, [sp, #24]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	bfa8      	it	ge
 800b600:	2210      	movge	r2, #16
 800b602:	2b09      	cmp	r3, #9
 800b604:	ec59 8b17 	vmov	r8, r9, d7
 800b608:	dd0c      	ble.n	800b624 <_strtod_l+0x3cc>
 800b60a:	4972      	ldr	r1, [pc, #456]	; (800b7d4 <_strtod_l+0x57c>)
 800b60c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b610:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800b614:	ee06 aa90 	vmov	s13, sl
 800b618:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800b61c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b620:	ec59 8b16 	vmov	r8, r9, d6
 800b624:	2b0f      	cmp	r3, #15
 800b626:	dc36      	bgt.n	800b696 <_strtod_l+0x43e>
 800b628:	9907      	ldr	r1, [sp, #28]
 800b62a:	2900      	cmp	r1, #0
 800b62c:	f43f ae58 	beq.w	800b2e0 <_strtod_l+0x88>
 800b630:	dd23      	ble.n	800b67a <_strtod_l+0x422>
 800b632:	2916      	cmp	r1, #22
 800b634:	dc0b      	bgt.n	800b64e <_strtod_l+0x3f6>
 800b636:	4b67      	ldr	r3, [pc, #412]	; (800b7d4 <_strtod_l+0x57c>)
 800b638:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b63c:	ed93 7b00 	vldr	d7, [r3]
 800b640:	ec49 8b16 	vmov	d6, r8, r9
 800b644:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b648:	ec59 8b17 	vmov	r8, r9, d7
 800b64c:	e648      	b.n	800b2e0 <_strtod_l+0x88>
 800b64e:	9807      	ldr	r0, [sp, #28]
 800b650:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800b654:	4281      	cmp	r1, r0
 800b656:	db1e      	blt.n	800b696 <_strtod_l+0x43e>
 800b658:	4a5e      	ldr	r2, [pc, #376]	; (800b7d4 <_strtod_l+0x57c>)
 800b65a:	f1c3 030f 	rsb	r3, r3, #15
 800b65e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b662:	ed91 7b00 	vldr	d7, [r1]
 800b666:	ec49 8b16 	vmov	d6, r8, r9
 800b66a:	1ac3      	subs	r3, r0, r3
 800b66c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b670:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b674:	ed92 6b00 	vldr	d6, [r2]
 800b678:	e7e4      	b.n	800b644 <_strtod_l+0x3ec>
 800b67a:	9907      	ldr	r1, [sp, #28]
 800b67c:	3116      	adds	r1, #22
 800b67e:	db0a      	blt.n	800b696 <_strtod_l+0x43e>
 800b680:	4b54      	ldr	r3, [pc, #336]	; (800b7d4 <_strtod_l+0x57c>)
 800b682:	1b7d      	subs	r5, r7, r5
 800b684:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b688:	ed95 7b00 	vldr	d7, [r5]
 800b68c:	ec49 8b16 	vmov	d6, r8, r9
 800b690:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b694:	e7d8      	b.n	800b648 <_strtod_l+0x3f0>
 800b696:	9907      	ldr	r1, [sp, #28]
 800b698:	1a9a      	subs	r2, r3, r2
 800b69a:	440a      	add	r2, r1
 800b69c:	2a00      	cmp	r2, #0
 800b69e:	dd6f      	ble.n	800b780 <_strtod_l+0x528>
 800b6a0:	f012 000f 	ands.w	r0, r2, #15
 800b6a4:	d00a      	beq.n	800b6bc <_strtod_l+0x464>
 800b6a6:	494b      	ldr	r1, [pc, #300]	; (800b7d4 <_strtod_l+0x57c>)
 800b6a8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b6ac:	ed91 7b00 	vldr	d7, [r1]
 800b6b0:	ec49 8b16 	vmov	d6, r8, r9
 800b6b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b6b8:	ec59 8b17 	vmov	r8, r9, d7
 800b6bc:	f032 020f 	bics.w	r2, r2, #15
 800b6c0:	d04f      	beq.n	800b762 <_strtod_l+0x50a>
 800b6c2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800b6c6:	dd22      	ble.n	800b70e <_strtod_l+0x4b6>
 800b6c8:	2500      	movs	r5, #0
 800b6ca:	462e      	mov	r6, r5
 800b6cc:	9506      	str	r5, [sp, #24]
 800b6ce:	462f      	mov	r7, r5
 800b6d0:	2322      	movs	r3, #34	; 0x22
 800b6d2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800b7e0 <_strtod_l+0x588>
 800b6d6:	6023      	str	r3, [r4, #0]
 800b6d8:	f04f 0800 	mov.w	r8, #0
 800b6dc:	9b06      	ldr	r3, [sp, #24]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f43f adfe 	beq.w	800b2e0 <_strtod_l+0x88>
 800b6e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f001 fdcc 	bl	800d284 <_Bfree>
 800b6ec:	4639      	mov	r1, r7
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f001 fdc8 	bl	800d284 <_Bfree>
 800b6f4:	4631      	mov	r1, r6
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f001 fdc4 	bl	800d284 <_Bfree>
 800b6fc:	9906      	ldr	r1, [sp, #24]
 800b6fe:	4620      	mov	r0, r4
 800b700:	f001 fdc0 	bl	800d284 <_Bfree>
 800b704:	4629      	mov	r1, r5
 800b706:	4620      	mov	r0, r4
 800b708:	f001 fdbc 	bl	800d284 <_Bfree>
 800b70c:	e5e8      	b.n	800b2e0 <_strtod_l+0x88>
 800b70e:	2000      	movs	r0, #0
 800b710:	ec49 8b17 	vmov	d7, r8, r9
 800b714:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800b7d8 <_strtod_l+0x580>
 800b718:	1112      	asrs	r2, r2, #4
 800b71a:	4601      	mov	r1, r0
 800b71c:	2a01      	cmp	r2, #1
 800b71e:	dc23      	bgt.n	800b768 <_strtod_l+0x510>
 800b720:	b108      	cbz	r0, 800b726 <_strtod_l+0x4ce>
 800b722:	ec59 8b17 	vmov	r8, r9, d7
 800b726:	4a2c      	ldr	r2, [pc, #176]	; (800b7d8 <_strtod_l+0x580>)
 800b728:	482c      	ldr	r0, [pc, #176]	; (800b7dc <_strtod_l+0x584>)
 800b72a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b72e:	ed92 7b00 	vldr	d7, [r2]
 800b732:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b736:	ec49 8b16 	vmov	d6, r8, r9
 800b73a:	4a29      	ldr	r2, [pc, #164]	; (800b7e0 <_strtod_l+0x588>)
 800b73c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b740:	ee17 1a90 	vmov	r1, s15
 800b744:	400a      	ands	r2, r1
 800b746:	4282      	cmp	r2, r0
 800b748:	ec59 8b17 	vmov	r8, r9, d7
 800b74c:	d8bc      	bhi.n	800b6c8 <_strtod_l+0x470>
 800b74e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800b752:	4282      	cmp	r2, r0
 800b754:	bf86      	itte	hi
 800b756:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800b7e4 <_strtod_l+0x58c>
 800b75a:	f04f 38ff 	movhi.w	r8, #4294967295
 800b75e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800b762:	2200      	movs	r2, #0
 800b764:	9204      	str	r2, [sp, #16]
 800b766:	e078      	b.n	800b85a <_strtod_l+0x602>
 800b768:	07d6      	lsls	r6, r2, #31
 800b76a:	d504      	bpl.n	800b776 <_strtod_l+0x51e>
 800b76c:	ed9c 6b00 	vldr	d6, [ip]
 800b770:	2001      	movs	r0, #1
 800b772:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b776:	3101      	adds	r1, #1
 800b778:	1052      	asrs	r2, r2, #1
 800b77a:	f10c 0c08 	add.w	ip, ip, #8
 800b77e:	e7cd      	b.n	800b71c <_strtod_l+0x4c4>
 800b780:	d0ef      	beq.n	800b762 <_strtod_l+0x50a>
 800b782:	4252      	negs	r2, r2
 800b784:	f012 000f 	ands.w	r0, r2, #15
 800b788:	d00a      	beq.n	800b7a0 <_strtod_l+0x548>
 800b78a:	4912      	ldr	r1, [pc, #72]	; (800b7d4 <_strtod_l+0x57c>)
 800b78c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b790:	ed91 7b00 	vldr	d7, [r1]
 800b794:	ec49 8b16 	vmov	d6, r8, r9
 800b798:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b79c:	ec59 8b17 	vmov	r8, r9, d7
 800b7a0:	1112      	asrs	r2, r2, #4
 800b7a2:	d0de      	beq.n	800b762 <_strtod_l+0x50a>
 800b7a4:	2a1f      	cmp	r2, #31
 800b7a6:	dd1f      	ble.n	800b7e8 <_strtod_l+0x590>
 800b7a8:	2500      	movs	r5, #0
 800b7aa:	462e      	mov	r6, r5
 800b7ac:	9506      	str	r5, [sp, #24]
 800b7ae:	462f      	mov	r7, r5
 800b7b0:	2322      	movs	r3, #34	; 0x22
 800b7b2:	f04f 0800 	mov.w	r8, #0
 800b7b6:	f04f 0900 	mov.w	r9, #0
 800b7ba:	6023      	str	r3, [r4, #0]
 800b7bc:	e78e      	b.n	800b6dc <_strtod_l+0x484>
 800b7be:	bf00      	nop
 800b7c0:	0800f149 	.word	0x0800f149
 800b7c4:	0800f18c 	.word	0x0800f18c
 800b7c8:	0800f141 	.word	0x0800f141
 800b7cc:	0800f2cc 	.word	0x0800f2cc
 800b7d0:	0800f578 	.word	0x0800f578
 800b7d4:	0800f458 	.word	0x0800f458
 800b7d8:	0800f430 	.word	0x0800f430
 800b7dc:	7ca00000 	.word	0x7ca00000
 800b7e0:	7ff00000 	.word	0x7ff00000
 800b7e4:	7fefffff 	.word	0x7fefffff
 800b7e8:	f012 0110 	ands.w	r1, r2, #16
 800b7ec:	bf18      	it	ne
 800b7ee:	216a      	movne	r1, #106	; 0x6a
 800b7f0:	9104      	str	r1, [sp, #16]
 800b7f2:	ec49 8b17 	vmov	d7, r8, r9
 800b7f6:	49be      	ldr	r1, [pc, #760]	; (800baf0 <_strtod_l+0x898>)
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	07d6      	lsls	r6, r2, #31
 800b7fc:	d504      	bpl.n	800b808 <_strtod_l+0x5b0>
 800b7fe:	ed91 6b00 	vldr	d6, [r1]
 800b802:	2001      	movs	r0, #1
 800b804:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b808:	1052      	asrs	r2, r2, #1
 800b80a:	f101 0108 	add.w	r1, r1, #8
 800b80e:	d1f4      	bne.n	800b7fa <_strtod_l+0x5a2>
 800b810:	b108      	cbz	r0, 800b816 <_strtod_l+0x5be>
 800b812:	ec59 8b17 	vmov	r8, r9, d7
 800b816:	9a04      	ldr	r2, [sp, #16]
 800b818:	b1c2      	cbz	r2, 800b84c <_strtod_l+0x5f4>
 800b81a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800b81e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800b822:	2a00      	cmp	r2, #0
 800b824:	4648      	mov	r0, r9
 800b826:	dd11      	ble.n	800b84c <_strtod_l+0x5f4>
 800b828:	2a1f      	cmp	r2, #31
 800b82a:	f340 812e 	ble.w	800ba8a <_strtod_l+0x832>
 800b82e:	2a34      	cmp	r2, #52	; 0x34
 800b830:	bfde      	ittt	le
 800b832:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800b836:	f04f 32ff 	movle.w	r2, #4294967295
 800b83a:	fa02 f101 	lslle.w	r1, r2, r1
 800b83e:	f04f 0800 	mov.w	r8, #0
 800b842:	bfcc      	ite	gt
 800b844:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b848:	ea01 0900 	andle.w	r9, r1, r0
 800b84c:	ec49 8b17 	vmov	d7, r8, r9
 800b850:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b858:	d0a6      	beq.n	800b7a8 <_strtod_l+0x550>
 800b85a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b85c:	9200      	str	r2, [sp, #0]
 800b85e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b860:	9a06      	ldr	r2, [sp, #24]
 800b862:	4620      	mov	r0, r4
 800b864:	f001 fd76 	bl	800d354 <__s2b>
 800b868:	9006      	str	r0, [sp, #24]
 800b86a:	2800      	cmp	r0, #0
 800b86c:	f43f af2c 	beq.w	800b6c8 <_strtod_l+0x470>
 800b870:	9b07      	ldr	r3, [sp, #28]
 800b872:	1b7d      	subs	r5, r7, r5
 800b874:	2b00      	cmp	r3, #0
 800b876:	bfb4      	ite	lt
 800b878:	462b      	movlt	r3, r5
 800b87a:	2300      	movge	r3, #0
 800b87c:	9309      	str	r3, [sp, #36]	; 0x24
 800b87e:	9b07      	ldr	r3, [sp, #28]
 800b880:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800bad0 <_strtod_l+0x878>
 800b884:	ed9f ab94 	vldr	d10, [pc, #592]	; 800bad8 <_strtod_l+0x880>
 800b888:	ed9f bb95 	vldr	d11, [pc, #596]	; 800bae0 <_strtod_l+0x888>
 800b88c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b890:	2500      	movs	r5, #0
 800b892:	930c      	str	r3, [sp, #48]	; 0x30
 800b894:	462e      	mov	r6, r5
 800b896:	9b06      	ldr	r3, [sp, #24]
 800b898:	4620      	mov	r0, r4
 800b89a:	6859      	ldr	r1, [r3, #4]
 800b89c:	f001 fcb2 	bl	800d204 <_Balloc>
 800b8a0:	4607      	mov	r7, r0
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	f43f af14 	beq.w	800b6d0 <_strtod_l+0x478>
 800b8a8:	9b06      	ldr	r3, [sp, #24]
 800b8aa:	691a      	ldr	r2, [r3, #16]
 800b8ac:	3202      	adds	r2, #2
 800b8ae:	f103 010c 	add.w	r1, r3, #12
 800b8b2:	0092      	lsls	r2, r2, #2
 800b8b4:	300c      	adds	r0, #12
 800b8b6:	f001 fc97 	bl	800d1e8 <memcpy>
 800b8ba:	ec49 8b10 	vmov	d0, r8, r9
 800b8be:	aa14      	add	r2, sp, #80	; 0x50
 800b8c0:	a913      	add	r1, sp, #76	; 0x4c
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f002 f88c 	bl	800d9e0 <__d2b>
 800b8c8:	ec49 8b18 	vmov	d8, r8, r9
 800b8cc:	9012      	str	r0, [sp, #72]	; 0x48
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	f43f aefe 	beq.w	800b6d0 <_strtod_l+0x478>
 800b8d4:	2101      	movs	r1, #1
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f001 fdd6 	bl	800d488 <__i2b>
 800b8dc:	4606      	mov	r6, r0
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	f43f aef6 	beq.w	800b6d0 <_strtod_l+0x478>
 800b8e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8e6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	bfab      	itete	ge
 800b8ec:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800b8ee:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800b8f0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800b8f4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800b8f8:	bfac      	ite	ge
 800b8fa:	eb03 0b02 	addge.w	fp, r3, r2
 800b8fe:	eba2 0a03 	sublt.w	sl, r2, r3
 800b902:	9a04      	ldr	r2, [sp, #16]
 800b904:	1a9b      	subs	r3, r3, r2
 800b906:	440b      	add	r3, r1
 800b908:	4a7a      	ldr	r2, [pc, #488]	; (800baf4 <_strtod_l+0x89c>)
 800b90a:	3b01      	subs	r3, #1
 800b90c:	4293      	cmp	r3, r2
 800b90e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800b912:	f280 80cd 	bge.w	800bab0 <_strtod_l+0x858>
 800b916:	1ad2      	subs	r2, r2, r3
 800b918:	2a1f      	cmp	r2, #31
 800b91a:	eba1 0102 	sub.w	r1, r1, r2
 800b91e:	f04f 0001 	mov.w	r0, #1
 800b922:	f300 80b9 	bgt.w	800ba98 <_strtod_l+0x840>
 800b926:	fa00 f302 	lsl.w	r3, r0, r2
 800b92a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b92c:	2300      	movs	r3, #0
 800b92e:	930a      	str	r3, [sp, #40]	; 0x28
 800b930:	eb0b 0301 	add.w	r3, fp, r1
 800b934:	9a04      	ldr	r2, [sp, #16]
 800b936:	459b      	cmp	fp, r3
 800b938:	448a      	add	sl, r1
 800b93a:	4492      	add	sl, r2
 800b93c:	465a      	mov	r2, fp
 800b93e:	bfa8      	it	ge
 800b940:	461a      	movge	r2, r3
 800b942:	4552      	cmp	r2, sl
 800b944:	bfa8      	it	ge
 800b946:	4652      	movge	r2, sl
 800b948:	2a00      	cmp	r2, #0
 800b94a:	bfc2      	ittt	gt
 800b94c:	1a9b      	subgt	r3, r3, r2
 800b94e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800b952:	ebab 0b02 	subgt.w	fp, fp, r2
 800b956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b958:	2a00      	cmp	r2, #0
 800b95a:	dd18      	ble.n	800b98e <_strtod_l+0x736>
 800b95c:	4631      	mov	r1, r6
 800b95e:	4620      	mov	r0, r4
 800b960:	930f      	str	r3, [sp, #60]	; 0x3c
 800b962:	f001 fe51 	bl	800d608 <__pow5mult>
 800b966:	4606      	mov	r6, r0
 800b968:	2800      	cmp	r0, #0
 800b96a:	f43f aeb1 	beq.w	800b6d0 <_strtod_l+0x478>
 800b96e:	4601      	mov	r1, r0
 800b970:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b972:	4620      	mov	r0, r4
 800b974:	f001 fd9e 	bl	800d4b4 <__multiply>
 800b978:	900e      	str	r0, [sp, #56]	; 0x38
 800b97a:	2800      	cmp	r0, #0
 800b97c:	f43f aea8 	beq.w	800b6d0 <_strtod_l+0x478>
 800b980:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b982:	4620      	mov	r0, r4
 800b984:	f001 fc7e 	bl	800d284 <_Bfree>
 800b988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b98a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b98c:	9212      	str	r2, [sp, #72]	; 0x48
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f300 8093 	bgt.w	800baba <_strtod_l+0x862>
 800b994:	9b07      	ldr	r3, [sp, #28]
 800b996:	2b00      	cmp	r3, #0
 800b998:	dd08      	ble.n	800b9ac <_strtod_l+0x754>
 800b99a:	4639      	mov	r1, r7
 800b99c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f001 fe32 	bl	800d608 <__pow5mult>
 800b9a4:	4607      	mov	r7, r0
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	f43f ae92 	beq.w	800b6d0 <_strtod_l+0x478>
 800b9ac:	f1ba 0f00 	cmp.w	sl, #0
 800b9b0:	dd08      	ble.n	800b9c4 <_strtod_l+0x76c>
 800b9b2:	4639      	mov	r1, r7
 800b9b4:	4652      	mov	r2, sl
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f001 fe80 	bl	800d6bc <__lshift>
 800b9bc:	4607      	mov	r7, r0
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	f43f ae86 	beq.w	800b6d0 <_strtod_l+0x478>
 800b9c4:	f1bb 0f00 	cmp.w	fp, #0
 800b9c8:	dd08      	ble.n	800b9dc <_strtod_l+0x784>
 800b9ca:	4631      	mov	r1, r6
 800b9cc:	465a      	mov	r2, fp
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f001 fe74 	bl	800d6bc <__lshift>
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	f43f ae7a 	beq.w	800b6d0 <_strtod_l+0x478>
 800b9dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b9de:	463a      	mov	r2, r7
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	f001 fef7 	bl	800d7d4 <__mdiff>
 800b9e6:	4605      	mov	r5, r0
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	f43f ae71 	beq.w	800b6d0 <_strtod_l+0x478>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800b9f4:	60c3      	str	r3, [r0, #12]
 800b9f6:	4631      	mov	r1, r6
 800b9f8:	f001 fed0 	bl	800d79c <__mcmp>
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	da7d      	bge.n	800bafc <_strtod_l+0x8a4>
 800ba00:	ea5a 0308 	orrs.w	r3, sl, r8
 800ba04:	f040 80a3 	bne.w	800bb4e <_strtod_l+0x8f6>
 800ba08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f040 809e 	bne.w	800bb4e <_strtod_l+0x8f6>
 800ba12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba16:	0d1b      	lsrs	r3, r3, #20
 800ba18:	051b      	lsls	r3, r3, #20
 800ba1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ba1e:	f240 8096 	bls.w	800bb4e <_strtod_l+0x8f6>
 800ba22:	696b      	ldr	r3, [r5, #20]
 800ba24:	b91b      	cbnz	r3, 800ba2e <_strtod_l+0x7d6>
 800ba26:	692b      	ldr	r3, [r5, #16]
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	f340 8090 	ble.w	800bb4e <_strtod_l+0x8f6>
 800ba2e:	4629      	mov	r1, r5
 800ba30:	2201      	movs	r2, #1
 800ba32:	4620      	mov	r0, r4
 800ba34:	f001 fe42 	bl	800d6bc <__lshift>
 800ba38:	4631      	mov	r1, r6
 800ba3a:	4605      	mov	r5, r0
 800ba3c:	f001 feae 	bl	800d79c <__mcmp>
 800ba40:	2800      	cmp	r0, #0
 800ba42:	f340 8084 	ble.w	800bb4e <_strtod_l+0x8f6>
 800ba46:	9904      	ldr	r1, [sp, #16]
 800ba48:	4a2b      	ldr	r2, [pc, #172]	; (800baf8 <_strtod_l+0x8a0>)
 800ba4a:	464b      	mov	r3, r9
 800ba4c:	2900      	cmp	r1, #0
 800ba4e:	f000 809d 	beq.w	800bb8c <_strtod_l+0x934>
 800ba52:	ea02 0109 	and.w	r1, r2, r9
 800ba56:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ba5a:	f300 8097 	bgt.w	800bb8c <_strtod_l+0x934>
 800ba5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ba62:	f77f aea5 	ble.w	800b7b0 <_strtod_l+0x558>
 800ba66:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800bae8 <_strtod_l+0x890>
 800ba6a:	ec49 8b16 	vmov	d6, r8, r9
 800ba6e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ba72:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ba76:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	bf08      	it	eq
 800ba7e:	2322      	moveq	r3, #34	; 0x22
 800ba80:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ba84:	bf08      	it	eq
 800ba86:	6023      	streq	r3, [r4, #0]
 800ba88:	e62c      	b.n	800b6e4 <_strtod_l+0x48c>
 800ba8a:	f04f 31ff 	mov.w	r1, #4294967295
 800ba8e:	fa01 f202 	lsl.w	r2, r1, r2
 800ba92:	ea02 0808 	and.w	r8, r2, r8
 800ba96:	e6d9      	b.n	800b84c <_strtod_l+0x5f4>
 800ba98:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ba9c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800baa0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800baa4:	33e2      	adds	r3, #226	; 0xe2
 800baa6:	fa00 f303 	lsl.w	r3, r0, r3
 800baaa:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800baae:	e73f      	b.n	800b930 <_strtod_l+0x6d8>
 800bab0:	2200      	movs	r2, #0
 800bab2:	2301      	movs	r3, #1
 800bab4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bab8:	e73a      	b.n	800b930 <_strtod_l+0x6d8>
 800baba:	9912      	ldr	r1, [sp, #72]	; 0x48
 800babc:	461a      	mov	r2, r3
 800babe:	4620      	mov	r0, r4
 800bac0:	f001 fdfc 	bl	800d6bc <__lshift>
 800bac4:	9012      	str	r0, [sp, #72]	; 0x48
 800bac6:	2800      	cmp	r0, #0
 800bac8:	f47f af64 	bne.w	800b994 <_strtod_l+0x73c>
 800bacc:	e600      	b.n	800b6d0 <_strtod_l+0x478>
 800bace:	bf00      	nop
 800bad0:	94a03595 	.word	0x94a03595
 800bad4:	3fcfffff 	.word	0x3fcfffff
 800bad8:	94a03595 	.word	0x94a03595
 800badc:	3fdfffff 	.word	0x3fdfffff
 800bae0:	35afe535 	.word	0x35afe535
 800bae4:	3fe00000 	.word	0x3fe00000
 800bae8:	00000000 	.word	0x00000000
 800baec:	39500000 	.word	0x39500000
 800baf0:	0800f1a0 	.word	0x0800f1a0
 800baf4:	fffffc02 	.word	0xfffffc02
 800baf8:	7ff00000 	.word	0x7ff00000
 800bafc:	46cb      	mov	fp, r9
 800bafe:	d15f      	bne.n	800bbc0 <_strtod_l+0x968>
 800bb00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb04:	f1ba 0f00 	cmp.w	sl, #0
 800bb08:	d02a      	beq.n	800bb60 <_strtod_l+0x908>
 800bb0a:	4aa7      	ldr	r2, [pc, #668]	; (800bda8 <_strtod_l+0xb50>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d12b      	bne.n	800bb68 <_strtod_l+0x910>
 800bb10:	9b04      	ldr	r3, [sp, #16]
 800bb12:	4642      	mov	r2, r8
 800bb14:	b1fb      	cbz	r3, 800bb56 <_strtod_l+0x8fe>
 800bb16:	4ba5      	ldr	r3, [pc, #660]	; (800bdac <_strtod_l+0xb54>)
 800bb18:	ea09 0303 	and.w	r3, r9, r3
 800bb1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bb20:	f04f 31ff 	mov.w	r1, #4294967295
 800bb24:	d81a      	bhi.n	800bb5c <_strtod_l+0x904>
 800bb26:	0d1b      	lsrs	r3, r3, #20
 800bb28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bb2c:	fa01 f303 	lsl.w	r3, r1, r3
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d119      	bne.n	800bb68 <_strtod_l+0x910>
 800bb34:	4b9e      	ldr	r3, [pc, #632]	; (800bdb0 <_strtod_l+0xb58>)
 800bb36:	459b      	cmp	fp, r3
 800bb38:	d102      	bne.n	800bb40 <_strtod_l+0x8e8>
 800bb3a:	3201      	adds	r2, #1
 800bb3c:	f43f adc8 	beq.w	800b6d0 <_strtod_l+0x478>
 800bb40:	4b9a      	ldr	r3, [pc, #616]	; (800bdac <_strtod_l+0xb54>)
 800bb42:	ea0b 0303 	and.w	r3, fp, r3
 800bb46:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800bb4a:	f04f 0800 	mov.w	r8, #0
 800bb4e:	9b04      	ldr	r3, [sp, #16]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d188      	bne.n	800ba66 <_strtod_l+0x80e>
 800bb54:	e5c6      	b.n	800b6e4 <_strtod_l+0x48c>
 800bb56:	f04f 33ff 	mov.w	r3, #4294967295
 800bb5a:	e7e9      	b.n	800bb30 <_strtod_l+0x8d8>
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	e7e7      	b.n	800bb30 <_strtod_l+0x8d8>
 800bb60:	ea53 0308 	orrs.w	r3, r3, r8
 800bb64:	f43f af6f 	beq.w	800ba46 <_strtod_l+0x7ee>
 800bb68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb6a:	b1cb      	cbz	r3, 800bba0 <_strtod_l+0x948>
 800bb6c:	ea13 0f0b 	tst.w	r3, fp
 800bb70:	d0ed      	beq.n	800bb4e <_strtod_l+0x8f6>
 800bb72:	9a04      	ldr	r2, [sp, #16]
 800bb74:	4640      	mov	r0, r8
 800bb76:	4649      	mov	r1, r9
 800bb78:	f1ba 0f00 	cmp.w	sl, #0
 800bb7c:	d014      	beq.n	800bba8 <_strtod_l+0x950>
 800bb7e:	f7ff fb51 	bl	800b224 <sulp>
 800bb82:	ee38 7b00 	vadd.f64	d7, d8, d0
 800bb86:	ec59 8b17 	vmov	r8, r9, d7
 800bb8a:	e7e0      	b.n	800bb4e <_strtod_l+0x8f6>
 800bb8c:	4013      	ands	r3, r2
 800bb8e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bb92:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bb96:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bb9a:	f04f 38ff 	mov.w	r8, #4294967295
 800bb9e:	e7d6      	b.n	800bb4e <_strtod_l+0x8f6>
 800bba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bba2:	ea13 0f08 	tst.w	r3, r8
 800bba6:	e7e3      	b.n	800bb70 <_strtod_l+0x918>
 800bba8:	f7ff fb3c 	bl	800b224 <sulp>
 800bbac:	ee38 0b40 	vsub.f64	d0, d8, d0
 800bbb0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800bbb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbb8:	ec59 8b10 	vmov	r8, r9, d0
 800bbbc:	d1c7      	bne.n	800bb4e <_strtod_l+0x8f6>
 800bbbe:	e5f7      	b.n	800b7b0 <_strtod_l+0x558>
 800bbc0:	4631      	mov	r1, r6
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	f001 ff68 	bl	800da98 <__ratio>
 800bbc8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800bbcc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd4:	d865      	bhi.n	800bca2 <_strtod_l+0xa4a>
 800bbd6:	f1ba 0f00 	cmp.w	sl, #0
 800bbda:	d042      	beq.n	800bc62 <_strtod_l+0xa0a>
 800bbdc:	4b75      	ldr	r3, [pc, #468]	; (800bdb4 <_strtod_l+0xb5c>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800bbe4:	4871      	ldr	r0, [pc, #452]	; (800bdac <_strtod_l+0xb54>)
 800bbe6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800bdc0 <_strtod_l+0xb68>
 800bbea:	ea0b 0100 	and.w	r1, fp, r0
 800bbee:	4561      	cmp	r1, ip
 800bbf0:	f040 808e 	bne.w	800bd10 <_strtod_l+0xab8>
 800bbf4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800bbf8:	ec49 8b10 	vmov	d0, r8, r9
 800bbfc:	ec43 2b1c 	vmov	d12, r2, r3
 800bc00:	910a      	str	r1, [sp, #40]	; 0x28
 800bc02:	f001 fe71 	bl	800d8e8 <__ulp>
 800bc06:	ec49 8b1e 	vmov	d14, r8, r9
 800bc0a:	4868      	ldr	r0, [pc, #416]	; (800bdac <_strtod_l+0xb54>)
 800bc0c:	eeac eb00 	vfma.f64	d14, d12, d0
 800bc10:	ee1e 3a90 	vmov	r3, s29
 800bc14:	4a68      	ldr	r2, [pc, #416]	; (800bdb8 <_strtod_l+0xb60>)
 800bc16:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bc18:	4018      	ands	r0, r3
 800bc1a:	4290      	cmp	r0, r2
 800bc1c:	ec59 8b1e 	vmov	r8, r9, d14
 800bc20:	d94e      	bls.n	800bcc0 <_strtod_l+0xa68>
 800bc22:	ee18 3a90 	vmov	r3, s17
 800bc26:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d104      	bne.n	800bc38 <_strtod_l+0x9e0>
 800bc2e:	ee18 3a10 	vmov	r3, s16
 800bc32:	3301      	adds	r3, #1
 800bc34:	f43f ad4c 	beq.w	800b6d0 <_strtod_l+0x478>
 800bc38:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800bdb0 <_strtod_l+0xb58>
 800bc3c:	f04f 38ff 	mov.w	r8, #4294967295
 800bc40:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bc42:	4620      	mov	r0, r4
 800bc44:	f001 fb1e 	bl	800d284 <_Bfree>
 800bc48:	4639      	mov	r1, r7
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f001 fb1a 	bl	800d284 <_Bfree>
 800bc50:	4631      	mov	r1, r6
 800bc52:	4620      	mov	r0, r4
 800bc54:	f001 fb16 	bl	800d284 <_Bfree>
 800bc58:	4629      	mov	r1, r5
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f001 fb12 	bl	800d284 <_Bfree>
 800bc60:	e619      	b.n	800b896 <_strtod_l+0x63e>
 800bc62:	f1b8 0f00 	cmp.w	r8, #0
 800bc66:	d112      	bne.n	800bc8e <_strtod_l+0xa36>
 800bc68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc6c:	b9b3      	cbnz	r3, 800bc9c <_strtod_l+0xa44>
 800bc6e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800bc72:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc7a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800bc7e:	bf58      	it	pl
 800bc80:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800bc84:	eeb1 7b4d 	vneg.f64	d7, d13
 800bc88:	ec53 2b17 	vmov	r2, r3, d7
 800bc8c:	e7aa      	b.n	800bbe4 <_strtod_l+0x98c>
 800bc8e:	f1b8 0f01 	cmp.w	r8, #1
 800bc92:	d103      	bne.n	800bc9c <_strtod_l+0xa44>
 800bc94:	f1b9 0f00 	cmp.w	r9, #0
 800bc98:	f43f ad8a 	beq.w	800b7b0 <_strtod_l+0x558>
 800bc9c:	4b47      	ldr	r3, [pc, #284]	; (800bdbc <_strtod_l+0xb64>)
 800bc9e:	2200      	movs	r2, #0
 800bca0:	e79e      	b.n	800bbe0 <_strtod_l+0x988>
 800bca2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800bca6:	ee20 db0d 	vmul.f64	d13, d0, d13
 800bcaa:	f1ba 0f00 	cmp.w	sl, #0
 800bcae:	d104      	bne.n	800bcba <_strtod_l+0xa62>
 800bcb0:	eeb1 7b4d 	vneg.f64	d7, d13
 800bcb4:	ec53 2b17 	vmov	r2, r3, d7
 800bcb8:	e794      	b.n	800bbe4 <_strtod_l+0x98c>
 800bcba:	eeb0 7b4d 	vmov.f64	d7, d13
 800bcbe:	e7f9      	b.n	800bcb4 <_strtod_l+0xa5c>
 800bcc0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800bcc4:	9b04      	ldr	r3, [sp, #16]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1ba      	bne.n	800bc40 <_strtod_l+0x9e8>
 800bcca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bcce:	0d1b      	lsrs	r3, r3, #20
 800bcd0:	051b      	lsls	r3, r3, #20
 800bcd2:	4299      	cmp	r1, r3
 800bcd4:	d1b4      	bne.n	800bc40 <_strtod_l+0x9e8>
 800bcd6:	ec51 0b1d 	vmov	r0, r1, d13
 800bcda:	f7f4 fcdd 	bl	8000698 <__aeabi_d2lz>
 800bcde:	f7f4 fc95 	bl	800060c <__aeabi_l2d>
 800bce2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bce6:	ec41 0b17 	vmov	d7, r0, r1
 800bcea:	ea43 0308 	orr.w	r3, r3, r8
 800bcee:	ea53 030a 	orrs.w	r3, r3, sl
 800bcf2:	ee3d db47 	vsub.f64	d13, d13, d7
 800bcf6:	d03c      	beq.n	800bd72 <_strtod_l+0xb1a>
 800bcf8:	eeb4 dbca 	vcmpe.f64	d13, d10
 800bcfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd00:	f53f acf0 	bmi.w	800b6e4 <_strtod_l+0x48c>
 800bd04:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800bd08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd0c:	dd98      	ble.n	800bc40 <_strtod_l+0x9e8>
 800bd0e:	e4e9      	b.n	800b6e4 <_strtod_l+0x48c>
 800bd10:	9804      	ldr	r0, [sp, #16]
 800bd12:	b1f0      	cbz	r0, 800bd52 <_strtod_l+0xafa>
 800bd14:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800bd18:	d81b      	bhi.n	800bd52 <_strtod_l+0xafa>
 800bd1a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800bda0 <_strtod_l+0xb48>
 800bd1e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800bd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd26:	d811      	bhi.n	800bd4c <_strtod_l+0xaf4>
 800bd28:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800bd2c:	ee1d 3a10 	vmov	r3, s26
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	bf38      	it	cc
 800bd34:	2301      	movcc	r3, #1
 800bd36:	ee0d 3a10 	vmov	s26, r3
 800bd3a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800bd3e:	f1ba 0f00 	cmp.w	sl, #0
 800bd42:	d113      	bne.n	800bd6c <_strtod_l+0xb14>
 800bd44:	eeb1 7b4d 	vneg.f64	d7, d13
 800bd48:	ec53 2b17 	vmov	r2, r3, d7
 800bd4c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800bd50:	1a43      	subs	r3, r0, r1
 800bd52:	eeb0 0b48 	vmov.f64	d0, d8
 800bd56:	ec43 2b1c 	vmov	d12, r2, r3
 800bd5a:	910a      	str	r1, [sp, #40]	; 0x28
 800bd5c:	f001 fdc4 	bl	800d8e8 <__ulp>
 800bd60:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bd62:	eeac 8b00 	vfma.f64	d8, d12, d0
 800bd66:	ec59 8b18 	vmov	r8, r9, d8
 800bd6a:	e7ab      	b.n	800bcc4 <_strtod_l+0xa6c>
 800bd6c:	eeb0 7b4d 	vmov.f64	d7, d13
 800bd70:	e7ea      	b.n	800bd48 <_strtod_l+0xaf0>
 800bd72:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800bd76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd7a:	f57f af61 	bpl.w	800bc40 <_strtod_l+0x9e8>
 800bd7e:	e4b1      	b.n	800b6e4 <_strtod_l+0x48c>
 800bd80:	2300      	movs	r3, #0
 800bd82:	9308      	str	r3, [sp, #32]
 800bd84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd88:	6013      	str	r3, [r2, #0]
 800bd8a:	f7ff baad 	b.w	800b2e8 <_strtod_l+0x90>
 800bd8e:	2a65      	cmp	r2, #101	; 0x65
 800bd90:	f43f ab9f 	beq.w	800b4d2 <_strtod_l+0x27a>
 800bd94:	2a45      	cmp	r2, #69	; 0x45
 800bd96:	f43f ab9c 	beq.w	800b4d2 <_strtod_l+0x27a>
 800bd9a:	2101      	movs	r1, #1
 800bd9c:	f7ff bbd4 	b.w	800b548 <_strtod_l+0x2f0>
 800bda0:	ffc00000 	.word	0xffc00000
 800bda4:	41dfffff 	.word	0x41dfffff
 800bda8:	000fffff 	.word	0x000fffff
 800bdac:	7ff00000 	.word	0x7ff00000
 800bdb0:	7fefffff 	.word	0x7fefffff
 800bdb4:	3ff00000 	.word	0x3ff00000
 800bdb8:	7c9fffff 	.word	0x7c9fffff
 800bdbc:	bff00000 	.word	0xbff00000
 800bdc0:	7fe00000 	.word	0x7fe00000

0800bdc4 <_strtod_r>:
 800bdc4:	4b01      	ldr	r3, [pc, #4]	; (800bdcc <_strtod_r+0x8>)
 800bdc6:	f7ff ba47 	b.w	800b258 <_strtod_l>
 800bdca:	bf00      	nop
 800bdcc:	2000008c 	.word	0x2000008c

0800bdd0 <_strtol_l.constprop.0>:
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdd6:	d001      	beq.n	800bddc <_strtol_l.constprop.0+0xc>
 800bdd8:	2b24      	cmp	r3, #36	; 0x24
 800bdda:	d906      	bls.n	800bdea <_strtol_l.constprop.0+0x1a>
 800bddc:	f7fe fb82 	bl	800a4e4 <__errno>
 800bde0:	2316      	movs	r3, #22
 800bde2:	6003      	str	r3, [r0, #0]
 800bde4:	2000      	movs	r0, #0
 800bde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bed0 <_strtol_l.constprop.0+0x100>
 800bdee:	460d      	mov	r5, r1
 800bdf0:	462e      	mov	r6, r5
 800bdf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bdf6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bdfa:	f017 0708 	ands.w	r7, r7, #8
 800bdfe:	d1f7      	bne.n	800bdf0 <_strtol_l.constprop.0+0x20>
 800be00:	2c2d      	cmp	r4, #45	; 0x2d
 800be02:	d132      	bne.n	800be6a <_strtol_l.constprop.0+0x9a>
 800be04:	782c      	ldrb	r4, [r5, #0]
 800be06:	2701      	movs	r7, #1
 800be08:	1cb5      	adds	r5, r6, #2
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d05b      	beq.n	800bec6 <_strtol_l.constprop.0+0xf6>
 800be0e:	2b10      	cmp	r3, #16
 800be10:	d109      	bne.n	800be26 <_strtol_l.constprop.0+0x56>
 800be12:	2c30      	cmp	r4, #48	; 0x30
 800be14:	d107      	bne.n	800be26 <_strtol_l.constprop.0+0x56>
 800be16:	782c      	ldrb	r4, [r5, #0]
 800be18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800be1c:	2c58      	cmp	r4, #88	; 0x58
 800be1e:	d14d      	bne.n	800bebc <_strtol_l.constprop.0+0xec>
 800be20:	786c      	ldrb	r4, [r5, #1]
 800be22:	2310      	movs	r3, #16
 800be24:	3502      	adds	r5, #2
 800be26:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800be2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800be2e:	f04f 0c00 	mov.w	ip, #0
 800be32:	fbb8 f9f3 	udiv	r9, r8, r3
 800be36:	4666      	mov	r6, ip
 800be38:	fb03 8a19 	mls	sl, r3, r9, r8
 800be3c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800be40:	f1be 0f09 	cmp.w	lr, #9
 800be44:	d816      	bhi.n	800be74 <_strtol_l.constprop.0+0xa4>
 800be46:	4674      	mov	r4, lr
 800be48:	42a3      	cmp	r3, r4
 800be4a:	dd24      	ble.n	800be96 <_strtol_l.constprop.0+0xc6>
 800be4c:	f1bc 0f00 	cmp.w	ip, #0
 800be50:	db1e      	blt.n	800be90 <_strtol_l.constprop.0+0xc0>
 800be52:	45b1      	cmp	r9, r6
 800be54:	d31c      	bcc.n	800be90 <_strtol_l.constprop.0+0xc0>
 800be56:	d101      	bne.n	800be5c <_strtol_l.constprop.0+0x8c>
 800be58:	45a2      	cmp	sl, r4
 800be5a:	db19      	blt.n	800be90 <_strtol_l.constprop.0+0xc0>
 800be5c:	fb06 4603 	mla	r6, r6, r3, r4
 800be60:	f04f 0c01 	mov.w	ip, #1
 800be64:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be68:	e7e8      	b.n	800be3c <_strtol_l.constprop.0+0x6c>
 800be6a:	2c2b      	cmp	r4, #43	; 0x2b
 800be6c:	bf04      	itt	eq
 800be6e:	782c      	ldrbeq	r4, [r5, #0]
 800be70:	1cb5      	addeq	r5, r6, #2
 800be72:	e7ca      	b.n	800be0a <_strtol_l.constprop.0+0x3a>
 800be74:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800be78:	f1be 0f19 	cmp.w	lr, #25
 800be7c:	d801      	bhi.n	800be82 <_strtol_l.constprop.0+0xb2>
 800be7e:	3c37      	subs	r4, #55	; 0x37
 800be80:	e7e2      	b.n	800be48 <_strtol_l.constprop.0+0x78>
 800be82:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800be86:	f1be 0f19 	cmp.w	lr, #25
 800be8a:	d804      	bhi.n	800be96 <_strtol_l.constprop.0+0xc6>
 800be8c:	3c57      	subs	r4, #87	; 0x57
 800be8e:	e7db      	b.n	800be48 <_strtol_l.constprop.0+0x78>
 800be90:	f04f 3cff 	mov.w	ip, #4294967295
 800be94:	e7e6      	b.n	800be64 <_strtol_l.constprop.0+0x94>
 800be96:	f1bc 0f00 	cmp.w	ip, #0
 800be9a:	da05      	bge.n	800bea8 <_strtol_l.constprop.0+0xd8>
 800be9c:	2322      	movs	r3, #34	; 0x22
 800be9e:	6003      	str	r3, [r0, #0]
 800bea0:	4646      	mov	r6, r8
 800bea2:	b942      	cbnz	r2, 800beb6 <_strtol_l.constprop.0+0xe6>
 800bea4:	4630      	mov	r0, r6
 800bea6:	e79e      	b.n	800bde6 <_strtol_l.constprop.0+0x16>
 800bea8:	b107      	cbz	r7, 800beac <_strtol_l.constprop.0+0xdc>
 800beaa:	4276      	negs	r6, r6
 800beac:	2a00      	cmp	r2, #0
 800beae:	d0f9      	beq.n	800bea4 <_strtol_l.constprop.0+0xd4>
 800beb0:	f1bc 0f00 	cmp.w	ip, #0
 800beb4:	d000      	beq.n	800beb8 <_strtol_l.constprop.0+0xe8>
 800beb6:	1e69      	subs	r1, r5, #1
 800beb8:	6011      	str	r1, [r2, #0]
 800beba:	e7f3      	b.n	800bea4 <_strtol_l.constprop.0+0xd4>
 800bebc:	2430      	movs	r4, #48	; 0x30
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1b1      	bne.n	800be26 <_strtol_l.constprop.0+0x56>
 800bec2:	2308      	movs	r3, #8
 800bec4:	e7af      	b.n	800be26 <_strtol_l.constprop.0+0x56>
 800bec6:	2c30      	cmp	r4, #48	; 0x30
 800bec8:	d0a5      	beq.n	800be16 <_strtol_l.constprop.0+0x46>
 800beca:	230a      	movs	r3, #10
 800becc:	e7ab      	b.n	800be26 <_strtol_l.constprop.0+0x56>
 800bece:	bf00      	nop
 800bed0:	0800f1c9 	.word	0x0800f1c9

0800bed4 <_strtol_r>:
 800bed4:	f7ff bf7c 	b.w	800bdd0 <_strtol_l.constprop.0>

0800bed8 <quorem>:
 800bed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bedc:	6903      	ldr	r3, [r0, #16]
 800bede:	690c      	ldr	r4, [r1, #16]
 800bee0:	42a3      	cmp	r3, r4
 800bee2:	4607      	mov	r7, r0
 800bee4:	f2c0 8081 	blt.w	800bfea <quorem+0x112>
 800bee8:	3c01      	subs	r4, #1
 800beea:	f101 0814 	add.w	r8, r1, #20
 800beee:	f100 0514 	add.w	r5, r0, #20
 800bef2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bef6:	9301      	str	r3, [sp, #4]
 800bef8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800befc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf00:	3301      	adds	r3, #1
 800bf02:	429a      	cmp	r2, r3
 800bf04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bf08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf0c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf10:	d331      	bcc.n	800bf76 <quorem+0x9e>
 800bf12:	f04f 0e00 	mov.w	lr, #0
 800bf16:	4640      	mov	r0, r8
 800bf18:	46ac      	mov	ip, r5
 800bf1a:	46f2      	mov	sl, lr
 800bf1c:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf20:	b293      	uxth	r3, r2
 800bf22:	fb06 e303 	mla	r3, r6, r3, lr
 800bf26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	ebaa 0303 	sub.w	r3, sl, r3
 800bf30:	f8dc a000 	ldr.w	sl, [ip]
 800bf34:	0c12      	lsrs	r2, r2, #16
 800bf36:	fa13 f38a 	uxtah	r3, r3, sl
 800bf3a:	fb06 e202 	mla	r2, r6, r2, lr
 800bf3e:	9300      	str	r3, [sp, #0]
 800bf40:	9b00      	ldr	r3, [sp, #0]
 800bf42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf46:	b292      	uxth	r2, r2
 800bf48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bf4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf50:	f8bd 3000 	ldrh.w	r3, [sp]
 800bf54:	4581      	cmp	r9, r0
 800bf56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf5a:	f84c 3b04 	str.w	r3, [ip], #4
 800bf5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bf62:	d2db      	bcs.n	800bf1c <quorem+0x44>
 800bf64:	f855 300b 	ldr.w	r3, [r5, fp]
 800bf68:	b92b      	cbnz	r3, 800bf76 <quorem+0x9e>
 800bf6a:	9b01      	ldr	r3, [sp, #4]
 800bf6c:	3b04      	subs	r3, #4
 800bf6e:	429d      	cmp	r5, r3
 800bf70:	461a      	mov	r2, r3
 800bf72:	d32e      	bcc.n	800bfd2 <quorem+0xfa>
 800bf74:	613c      	str	r4, [r7, #16]
 800bf76:	4638      	mov	r0, r7
 800bf78:	f001 fc10 	bl	800d79c <__mcmp>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	db24      	blt.n	800bfca <quorem+0xf2>
 800bf80:	3601      	adds	r6, #1
 800bf82:	4628      	mov	r0, r5
 800bf84:	f04f 0c00 	mov.w	ip, #0
 800bf88:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf8c:	f8d0 e000 	ldr.w	lr, [r0]
 800bf90:	b293      	uxth	r3, r2
 800bf92:	ebac 0303 	sub.w	r3, ip, r3
 800bf96:	0c12      	lsrs	r2, r2, #16
 800bf98:	fa13 f38e 	uxtah	r3, r3, lr
 800bf9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bfa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfaa:	45c1      	cmp	r9, r8
 800bfac:	f840 3b04 	str.w	r3, [r0], #4
 800bfb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bfb4:	d2e8      	bcs.n	800bf88 <quorem+0xb0>
 800bfb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfbe:	b922      	cbnz	r2, 800bfca <quorem+0xf2>
 800bfc0:	3b04      	subs	r3, #4
 800bfc2:	429d      	cmp	r5, r3
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	d30a      	bcc.n	800bfde <quorem+0x106>
 800bfc8:	613c      	str	r4, [r7, #16]
 800bfca:	4630      	mov	r0, r6
 800bfcc:	b003      	add	sp, #12
 800bfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd2:	6812      	ldr	r2, [r2, #0]
 800bfd4:	3b04      	subs	r3, #4
 800bfd6:	2a00      	cmp	r2, #0
 800bfd8:	d1cc      	bne.n	800bf74 <quorem+0x9c>
 800bfda:	3c01      	subs	r4, #1
 800bfdc:	e7c7      	b.n	800bf6e <quorem+0x96>
 800bfde:	6812      	ldr	r2, [r2, #0]
 800bfe0:	3b04      	subs	r3, #4
 800bfe2:	2a00      	cmp	r2, #0
 800bfe4:	d1f0      	bne.n	800bfc8 <quorem+0xf0>
 800bfe6:	3c01      	subs	r4, #1
 800bfe8:	e7eb      	b.n	800bfc2 <quorem+0xea>
 800bfea:	2000      	movs	r0, #0
 800bfec:	e7ee      	b.n	800bfcc <quorem+0xf4>
	...

0800bff0 <_dtoa_r>:
 800bff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff4:	ed2d 8b02 	vpush	{d8}
 800bff8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bffa:	b091      	sub	sp, #68	; 0x44
 800bffc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c000:	ec59 8b10 	vmov	r8, r9, d0
 800c004:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c006:	9106      	str	r1, [sp, #24]
 800c008:	4606      	mov	r6, r0
 800c00a:	9208      	str	r2, [sp, #32]
 800c00c:	930c      	str	r3, [sp, #48]	; 0x30
 800c00e:	b975      	cbnz	r5, 800c02e <_dtoa_r+0x3e>
 800c010:	2010      	movs	r0, #16
 800c012:	f001 f8cf 	bl	800d1b4 <malloc>
 800c016:	4602      	mov	r2, r0
 800c018:	6270      	str	r0, [r6, #36]	; 0x24
 800c01a:	b920      	cbnz	r0, 800c026 <_dtoa_r+0x36>
 800c01c:	4baa      	ldr	r3, [pc, #680]	; (800c2c8 <_dtoa_r+0x2d8>)
 800c01e:	21ea      	movs	r1, #234	; 0xea
 800c020:	48aa      	ldr	r0, [pc, #680]	; (800c2cc <_dtoa_r+0x2dc>)
 800c022:	f002 f83b 	bl	800e09c <__assert_func>
 800c026:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c02a:	6005      	str	r5, [r0, #0]
 800c02c:	60c5      	str	r5, [r0, #12]
 800c02e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c030:	6819      	ldr	r1, [r3, #0]
 800c032:	b151      	cbz	r1, 800c04a <_dtoa_r+0x5a>
 800c034:	685a      	ldr	r2, [r3, #4]
 800c036:	604a      	str	r2, [r1, #4]
 800c038:	2301      	movs	r3, #1
 800c03a:	4093      	lsls	r3, r2
 800c03c:	608b      	str	r3, [r1, #8]
 800c03e:	4630      	mov	r0, r6
 800c040:	f001 f920 	bl	800d284 <_Bfree>
 800c044:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c046:	2200      	movs	r2, #0
 800c048:	601a      	str	r2, [r3, #0]
 800c04a:	f1b9 0300 	subs.w	r3, r9, #0
 800c04e:	bfbb      	ittet	lt
 800c050:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c054:	9303      	strlt	r3, [sp, #12]
 800c056:	2300      	movge	r3, #0
 800c058:	2201      	movlt	r2, #1
 800c05a:	bfac      	ite	ge
 800c05c:	6023      	strge	r3, [r4, #0]
 800c05e:	6022      	strlt	r2, [r4, #0]
 800c060:	4b9b      	ldr	r3, [pc, #620]	; (800c2d0 <_dtoa_r+0x2e0>)
 800c062:	9c03      	ldr	r4, [sp, #12]
 800c064:	43a3      	bics	r3, r4
 800c066:	d11c      	bne.n	800c0a2 <_dtoa_r+0xb2>
 800c068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c06a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c06e:	6013      	str	r3, [r2, #0]
 800c070:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c074:	ea53 0308 	orrs.w	r3, r3, r8
 800c078:	f000 84fd 	beq.w	800ca76 <_dtoa_r+0xa86>
 800c07c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c07e:	b963      	cbnz	r3, 800c09a <_dtoa_r+0xaa>
 800c080:	4b94      	ldr	r3, [pc, #592]	; (800c2d4 <_dtoa_r+0x2e4>)
 800c082:	e01f      	b.n	800c0c4 <_dtoa_r+0xd4>
 800c084:	4b94      	ldr	r3, [pc, #592]	; (800c2d8 <_dtoa_r+0x2e8>)
 800c086:	9301      	str	r3, [sp, #4]
 800c088:	3308      	adds	r3, #8
 800c08a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c08c:	6013      	str	r3, [r2, #0]
 800c08e:	9801      	ldr	r0, [sp, #4]
 800c090:	b011      	add	sp, #68	; 0x44
 800c092:	ecbd 8b02 	vpop	{d8}
 800c096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c09a:	4b8e      	ldr	r3, [pc, #568]	; (800c2d4 <_dtoa_r+0x2e4>)
 800c09c:	9301      	str	r3, [sp, #4]
 800c09e:	3303      	adds	r3, #3
 800c0a0:	e7f3      	b.n	800c08a <_dtoa_r+0x9a>
 800c0a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c0a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ae:	d10b      	bne.n	800c0c8 <_dtoa_r+0xd8>
 800c0b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	6013      	str	r3, [r2, #0]
 800c0b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f000 84d9 	beq.w	800ca70 <_dtoa_r+0xa80>
 800c0be:	4887      	ldr	r0, [pc, #540]	; (800c2dc <_dtoa_r+0x2ec>)
 800c0c0:	6018      	str	r0, [r3, #0]
 800c0c2:	1e43      	subs	r3, r0, #1
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	e7e2      	b.n	800c08e <_dtoa_r+0x9e>
 800c0c8:	a90f      	add	r1, sp, #60	; 0x3c
 800c0ca:	aa0e      	add	r2, sp, #56	; 0x38
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	eeb0 0b48 	vmov.f64	d0, d8
 800c0d2:	f001 fc85 	bl	800d9e0 <__d2b>
 800c0d6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800c0da:	4605      	mov	r5, r0
 800c0dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c0de:	2900      	cmp	r1, #0
 800c0e0:	d046      	beq.n	800c170 <_dtoa_r+0x180>
 800c0e2:	ee18 4a90 	vmov	r4, s17
 800c0e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c0ea:	ec53 2b18 	vmov	r2, r3, d8
 800c0ee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800c0f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c0f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c0fa:	2400      	movs	r4, #0
 800c0fc:	ec43 2b16 	vmov	d6, r2, r3
 800c100:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c104:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c2b0 <_dtoa_r+0x2c0>
 800c108:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c10c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800c2b8 <_dtoa_r+0x2c8>
 800c110:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c114:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c2c0 <_dtoa_r+0x2d0>
 800c118:	ee07 1a90 	vmov	s15, r1
 800c11c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c120:	eeb0 7b46 	vmov.f64	d7, d6
 800c124:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c128:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c12c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c134:	ee16 ba90 	vmov	fp, s13
 800c138:	940a      	str	r4, [sp, #40]	; 0x28
 800c13a:	d508      	bpl.n	800c14e <_dtoa_r+0x15e>
 800c13c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c140:	eeb4 6b47 	vcmp.f64	d6, d7
 800c144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c148:	bf18      	it	ne
 800c14a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c14e:	f1bb 0f16 	cmp.w	fp, #22
 800c152:	d82f      	bhi.n	800c1b4 <_dtoa_r+0x1c4>
 800c154:	4b62      	ldr	r3, [pc, #392]	; (800c2e0 <_dtoa_r+0x2f0>)
 800c156:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c15a:	ed93 7b00 	vldr	d7, [r3]
 800c15e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c166:	d501      	bpl.n	800c16c <_dtoa_r+0x17c>
 800c168:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c16c:	2300      	movs	r3, #0
 800c16e:	e022      	b.n	800c1b6 <_dtoa_r+0x1c6>
 800c170:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c172:	4401      	add	r1, r0
 800c174:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800c178:	2b20      	cmp	r3, #32
 800c17a:	bfc1      	itttt	gt
 800c17c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c180:	fa04 f303 	lslgt.w	r3, r4, r3
 800c184:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800c188:	fa28 f804 	lsrgt.w	r8, r8, r4
 800c18c:	bfd6      	itet	le
 800c18e:	f1c3 0320 	rsble	r3, r3, #32
 800c192:	ea43 0808 	orrgt.w	r8, r3, r8
 800c196:	fa08 f803 	lslle.w	r8, r8, r3
 800c19a:	ee07 8a90 	vmov	s15, r8
 800c19e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c1a2:	3901      	subs	r1, #1
 800c1a4:	ee17 4a90 	vmov	r4, s15
 800c1a8:	ec53 2b17 	vmov	r2, r3, d7
 800c1ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800c1b0:	2401      	movs	r4, #1
 800c1b2:	e7a3      	b.n	800c0fc <_dtoa_r+0x10c>
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1b8:	1a43      	subs	r3, r0, r1
 800c1ba:	1e5a      	subs	r2, r3, #1
 800c1bc:	bf45      	ittet	mi
 800c1be:	f1c3 0301 	rsbmi	r3, r3, #1
 800c1c2:	9304      	strmi	r3, [sp, #16]
 800c1c4:	2300      	movpl	r3, #0
 800c1c6:	2300      	movmi	r3, #0
 800c1c8:	9205      	str	r2, [sp, #20]
 800c1ca:	bf54      	ite	pl
 800c1cc:	9304      	strpl	r3, [sp, #16]
 800c1ce:	9305      	strmi	r3, [sp, #20]
 800c1d0:	f1bb 0f00 	cmp.w	fp, #0
 800c1d4:	db18      	blt.n	800c208 <_dtoa_r+0x218>
 800c1d6:	9b05      	ldr	r3, [sp, #20]
 800c1d8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c1dc:	445b      	add	r3, fp
 800c1de:	9305      	str	r3, [sp, #20]
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	9a06      	ldr	r2, [sp, #24]
 800c1e4:	2a09      	cmp	r2, #9
 800c1e6:	d849      	bhi.n	800c27c <_dtoa_r+0x28c>
 800c1e8:	2a05      	cmp	r2, #5
 800c1ea:	bfc4      	itt	gt
 800c1ec:	3a04      	subgt	r2, #4
 800c1ee:	9206      	strgt	r2, [sp, #24]
 800c1f0:	9a06      	ldr	r2, [sp, #24]
 800c1f2:	f1a2 0202 	sub.w	r2, r2, #2
 800c1f6:	bfcc      	ite	gt
 800c1f8:	2400      	movgt	r4, #0
 800c1fa:	2401      	movle	r4, #1
 800c1fc:	2a03      	cmp	r2, #3
 800c1fe:	d848      	bhi.n	800c292 <_dtoa_r+0x2a2>
 800c200:	e8df f002 	tbb	[pc, r2]
 800c204:	3a2c2e0b 	.word	0x3a2c2e0b
 800c208:	9b04      	ldr	r3, [sp, #16]
 800c20a:	2200      	movs	r2, #0
 800c20c:	eba3 030b 	sub.w	r3, r3, fp
 800c210:	9304      	str	r3, [sp, #16]
 800c212:	9209      	str	r2, [sp, #36]	; 0x24
 800c214:	f1cb 0300 	rsb	r3, fp, #0
 800c218:	e7e3      	b.n	800c1e2 <_dtoa_r+0x1f2>
 800c21a:	2200      	movs	r2, #0
 800c21c:	9207      	str	r2, [sp, #28]
 800c21e:	9a08      	ldr	r2, [sp, #32]
 800c220:	2a00      	cmp	r2, #0
 800c222:	dc39      	bgt.n	800c298 <_dtoa_r+0x2a8>
 800c224:	f04f 0a01 	mov.w	sl, #1
 800c228:	46d1      	mov	r9, sl
 800c22a:	4652      	mov	r2, sl
 800c22c:	f8cd a020 	str.w	sl, [sp, #32]
 800c230:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800c232:	2100      	movs	r1, #0
 800c234:	6079      	str	r1, [r7, #4]
 800c236:	2004      	movs	r0, #4
 800c238:	f100 0c14 	add.w	ip, r0, #20
 800c23c:	4594      	cmp	ip, r2
 800c23e:	6879      	ldr	r1, [r7, #4]
 800c240:	d92f      	bls.n	800c2a2 <_dtoa_r+0x2b2>
 800c242:	4630      	mov	r0, r6
 800c244:	930d      	str	r3, [sp, #52]	; 0x34
 800c246:	f000 ffdd 	bl	800d204 <_Balloc>
 800c24a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c24c:	9001      	str	r0, [sp, #4]
 800c24e:	4602      	mov	r2, r0
 800c250:	2800      	cmp	r0, #0
 800c252:	d149      	bne.n	800c2e8 <_dtoa_r+0x2f8>
 800c254:	4b23      	ldr	r3, [pc, #140]	; (800c2e4 <_dtoa_r+0x2f4>)
 800c256:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c25a:	e6e1      	b.n	800c020 <_dtoa_r+0x30>
 800c25c:	2201      	movs	r2, #1
 800c25e:	e7dd      	b.n	800c21c <_dtoa_r+0x22c>
 800c260:	2200      	movs	r2, #0
 800c262:	9207      	str	r2, [sp, #28]
 800c264:	9a08      	ldr	r2, [sp, #32]
 800c266:	eb0b 0a02 	add.w	sl, fp, r2
 800c26a:	f10a 0901 	add.w	r9, sl, #1
 800c26e:	464a      	mov	r2, r9
 800c270:	2a01      	cmp	r2, #1
 800c272:	bfb8      	it	lt
 800c274:	2201      	movlt	r2, #1
 800c276:	e7db      	b.n	800c230 <_dtoa_r+0x240>
 800c278:	2201      	movs	r2, #1
 800c27a:	e7f2      	b.n	800c262 <_dtoa_r+0x272>
 800c27c:	2401      	movs	r4, #1
 800c27e:	2200      	movs	r2, #0
 800c280:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800c284:	f04f 3aff 	mov.w	sl, #4294967295
 800c288:	2100      	movs	r1, #0
 800c28a:	46d1      	mov	r9, sl
 800c28c:	2212      	movs	r2, #18
 800c28e:	9108      	str	r1, [sp, #32]
 800c290:	e7ce      	b.n	800c230 <_dtoa_r+0x240>
 800c292:	2201      	movs	r2, #1
 800c294:	9207      	str	r2, [sp, #28]
 800c296:	e7f5      	b.n	800c284 <_dtoa_r+0x294>
 800c298:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c29c:	46d1      	mov	r9, sl
 800c29e:	4652      	mov	r2, sl
 800c2a0:	e7c6      	b.n	800c230 <_dtoa_r+0x240>
 800c2a2:	3101      	adds	r1, #1
 800c2a4:	6079      	str	r1, [r7, #4]
 800c2a6:	0040      	lsls	r0, r0, #1
 800c2a8:	e7c6      	b.n	800c238 <_dtoa_r+0x248>
 800c2aa:	bf00      	nop
 800c2ac:	f3af 8000 	nop.w
 800c2b0:	636f4361 	.word	0x636f4361
 800c2b4:	3fd287a7 	.word	0x3fd287a7
 800c2b8:	8b60c8b3 	.word	0x8b60c8b3
 800c2bc:	3fc68a28 	.word	0x3fc68a28
 800c2c0:	509f79fb 	.word	0x509f79fb
 800c2c4:	3fd34413 	.word	0x3fd34413
 800c2c8:	0800f2d6 	.word	0x0800f2d6
 800c2cc:	0800f2ed 	.word	0x0800f2ed
 800c2d0:	7ff00000 	.word	0x7ff00000
 800c2d4:	0800f2d2 	.word	0x0800f2d2
 800c2d8:	0800f2c9 	.word	0x0800f2c9
 800c2dc:	0800f14d 	.word	0x0800f14d
 800c2e0:	0800f458 	.word	0x0800f458
 800c2e4:	0800f348 	.word	0x0800f348
 800c2e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c2ea:	9901      	ldr	r1, [sp, #4]
 800c2ec:	6011      	str	r1, [r2, #0]
 800c2ee:	f1b9 0f0e 	cmp.w	r9, #14
 800c2f2:	d86c      	bhi.n	800c3ce <_dtoa_r+0x3de>
 800c2f4:	2c00      	cmp	r4, #0
 800c2f6:	d06a      	beq.n	800c3ce <_dtoa_r+0x3de>
 800c2f8:	f1bb 0f00 	cmp.w	fp, #0
 800c2fc:	f340 80a0 	ble.w	800c440 <_dtoa_r+0x450>
 800c300:	49c1      	ldr	r1, [pc, #772]	; (800c608 <_dtoa_r+0x618>)
 800c302:	f00b 020f 	and.w	r2, fp, #15
 800c306:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c30a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c30e:	ed92 7b00 	vldr	d7, [r2]
 800c312:	ea4f 112b 	mov.w	r1, fp, asr #4
 800c316:	f000 8087 	beq.w	800c428 <_dtoa_r+0x438>
 800c31a:	4abc      	ldr	r2, [pc, #752]	; (800c60c <_dtoa_r+0x61c>)
 800c31c:	ed92 6b08 	vldr	d6, [r2, #32]
 800c320:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c324:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c328:	f001 010f 	and.w	r1, r1, #15
 800c32c:	2203      	movs	r2, #3
 800c32e:	48b7      	ldr	r0, [pc, #732]	; (800c60c <_dtoa_r+0x61c>)
 800c330:	2900      	cmp	r1, #0
 800c332:	d17b      	bne.n	800c42c <_dtoa_r+0x43c>
 800c334:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c338:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c33c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c340:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c342:	2900      	cmp	r1, #0
 800c344:	f000 80a2 	beq.w	800c48c <_dtoa_r+0x49c>
 800c348:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c34c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c350:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c358:	f140 8098 	bpl.w	800c48c <_dtoa_r+0x49c>
 800c35c:	f1b9 0f00 	cmp.w	r9, #0
 800c360:	f000 8094 	beq.w	800c48c <_dtoa_r+0x49c>
 800c364:	f1ba 0f00 	cmp.w	sl, #0
 800c368:	dd2f      	ble.n	800c3ca <_dtoa_r+0x3da>
 800c36a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c36e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c372:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c376:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c37a:	3201      	adds	r2, #1
 800c37c:	4650      	mov	r0, sl
 800c37e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c382:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c386:	ee07 2a90 	vmov	s15, r2
 800c38a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c38e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c392:	ee15 4a90 	vmov	r4, s11
 800c396:	ec52 1b15 	vmov	r1, r2, d5
 800c39a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d177      	bne.n	800c492 <_dtoa_r+0x4a2>
 800c3a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c3a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c3aa:	ec42 1b17 	vmov	d7, r1, r2
 800c3ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3b6:	f300 8263 	bgt.w	800c880 <_dtoa_r+0x890>
 800c3ba:	eeb1 7b47 	vneg.f64	d7, d7
 800c3be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c6:	f100 8258 	bmi.w	800c87a <_dtoa_r+0x88a>
 800c3ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c3ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3d0:	2a00      	cmp	r2, #0
 800c3d2:	f2c0 811d 	blt.w	800c610 <_dtoa_r+0x620>
 800c3d6:	f1bb 0f0e 	cmp.w	fp, #14
 800c3da:	f300 8119 	bgt.w	800c610 <_dtoa_r+0x620>
 800c3de:	4b8a      	ldr	r3, [pc, #552]	; (800c608 <_dtoa_r+0x618>)
 800c3e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c3e4:	ed93 6b00 	vldr	d6, [r3]
 800c3e8:	9b08      	ldr	r3, [sp, #32]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f280 80b7 	bge.w	800c55e <_dtoa_r+0x56e>
 800c3f0:	f1b9 0f00 	cmp.w	r9, #0
 800c3f4:	f300 80b3 	bgt.w	800c55e <_dtoa_r+0x56e>
 800c3f8:	f040 823f 	bne.w	800c87a <_dtoa_r+0x88a>
 800c3fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c400:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c404:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c408:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c410:	464c      	mov	r4, r9
 800c412:	464f      	mov	r7, r9
 800c414:	f280 8215 	bge.w	800c842 <_dtoa_r+0x852>
 800c418:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c41c:	2331      	movs	r3, #49	; 0x31
 800c41e:	f808 3b01 	strb.w	r3, [r8], #1
 800c422:	f10b 0b01 	add.w	fp, fp, #1
 800c426:	e211      	b.n	800c84c <_dtoa_r+0x85c>
 800c428:	2202      	movs	r2, #2
 800c42a:	e780      	b.n	800c32e <_dtoa_r+0x33e>
 800c42c:	07cc      	lsls	r4, r1, #31
 800c42e:	d504      	bpl.n	800c43a <_dtoa_r+0x44a>
 800c430:	ed90 6b00 	vldr	d6, [r0]
 800c434:	3201      	adds	r2, #1
 800c436:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c43a:	1049      	asrs	r1, r1, #1
 800c43c:	3008      	adds	r0, #8
 800c43e:	e777      	b.n	800c330 <_dtoa_r+0x340>
 800c440:	d022      	beq.n	800c488 <_dtoa_r+0x498>
 800c442:	f1cb 0100 	rsb	r1, fp, #0
 800c446:	4a70      	ldr	r2, [pc, #448]	; (800c608 <_dtoa_r+0x618>)
 800c448:	f001 000f 	and.w	r0, r1, #15
 800c44c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c450:	ed92 7b00 	vldr	d7, [r2]
 800c454:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c458:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c45c:	486b      	ldr	r0, [pc, #428]	; (800c60c <_dtoa_r+0x61c>)
 800c45e:	1109      	asrs	r1, r1, #4
 800c460:	2400      	movs	r4, #0
 800c462:	2202      	movs	r2, #2
 800c464:	b929      	cbnz	r1, 800c472 <_dtoa_r+0x482>
 800c466:	2c00      	cmp	r4, #0
 800c468:	f43f af6a 	beq.w	800c340 <_dtoa_r+0x350>
 800c46c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c470:	e766      	b.n	800c340 <_dtoa_r+0x350>
 800c472:	07cf      	lsls	r7, r1, #31
 800c474:	d505      	bpl.n	800c482 <_dtoa_r+0x492>
 800c476:	ed90 6b00 	vldr	d6, [r0]
 800c47a:	3201      	adds	r2, #1
 800c47c:	2401      	movs	r4, #1
 800c47e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c482:	1049      	asrs	r1, r1, #1
 800c484:	3008      	adds	r0, #8
 800c486:	e7ed      	b.n	800c464 <_dtoa_r+0x474>
 800c488:	2202      	movs	r2, #2
 800c48a:	e759      	b.n	800c340 <_dtoa_r+0x350>
 800c48c:	465f      	mov	r7, fp
 800c48e:	4648      	mov	r0, r9
 800c490:	e775      	b.n	800c37e <_dtoa_r+0x38e>
 800c492:	ec42 1b17 	vmov	d7, r1, r2
 800c496:	4a5c      	ldr	r2, [pc, #368]	; (800c608 <_dtoa_r+0x618>)
 800c498:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c49c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c4a0:	9a01      	ldr	r2, [sp, #4]
 800c4a2:	1814      	adds	r4, r2, r0
 800c4a4:	9a07      	ldr	r2, [sp, #28]
 800c4a6:	b352      	cbz	r2, 800c4fe <_dtoa_r+0x50e>
 800c4a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c4ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c4b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c4b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c4b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c4bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c4c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c4c4:	ee14 2a90 	vmov	r2, s9
 800c4c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c4cc:	3230      	adds	r2, #48	; 0x30
 800c4ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c4d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4da:	f808 2b01 	strb.w	r2, [r8], #1
 800c4de:	d439      	bmi.n	800c554 <_dtoa_r+0x564>
 800c4e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c4e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ec:	d472      	bmi.n	800c5d4 <_dtoa_r+0x5e4>
 800c4ee:	45a0      	cmp	r8, r4
 800c4f0:	f43f af6b 	beq.w	800c3ca <_dtoa_r+0x3da>
 800c4f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c4f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c4fc:	e7e0      	b.n	800c4c0 <_dtoa_r+0x4d0>
 800c4fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c502:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c506:	4621      	mov	r1, r4
 800c508:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c50c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c510:	ee14 2a90 	vmov	r2, s9
 800c514:	3230      	adds	r2, #48	; 0x30
 800c516:	f808 2b01 	strb.w	r2, [r8], #1
 800c51a:	45a0      	cmp	r8, r4
 800c51c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c520:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c524:	d118      	bne.n	800c558 <_dtoa_r+0x568>
 800c526:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c52a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c52e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c536:	dc4d      	bgt.n	800c5d4 <_dtoa_r+0x5e4>
 800c538:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c53c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c544:	f57f af41 	bpl.w	800c3ca <_dtoa_r+0x3da>
 800c548:	4688      	mov	r8, r1
 800c54a:	3901      	subs	r1, #1
 800c54c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c550:	2b30      	cmp	r3, #48	; 0x30
 800c552:	d0f9      	beq.n	800c548 <_dtoa_r+0x558>
 800c554:	46bb      	mov	fp, r7
 800c556:	e02a      	b.n	800c5ae <_dtoa_r+0x5be>
 800c558:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c55c:	e7d6      	b.n	800c50c <_dtoa_r+0x51c>
 800c55e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c562:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c566:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c56a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c56e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c572:	ee15 3a10 	vmov	r3, s10
 800c576:	3330      	adds	r3, #48	; 0x30
 800c578:	f808 3b01 	strb.w	r3, [r8], #1
 800c57c:	9b01      	ldr	r3, [sp, #4]
 800c57e:	eba8 0303 	sub.w	r3, r8, r3
 800c582:	4599      	cmp	r9, r3
 800c584:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c588:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c58c:	d133      	bne.n	800c5f6 <_dtoa_r+0x606>
 800c58e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c592:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c59a:	dc1a      	bgt.n	800c5d2 <_dtoa_r+0x5e2>
 800c59c:	eeb4 7b46 	vcmp.f64	d7, d6
 800c5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a4:	d103      	bne.n	800c5ae <_dtoa_r+0x5be>
 800c5a6:	ee15 3a10 	vmov	r3, s10
 800c5aa:	07d9      	lsls	r1, r3, #31
 800c5ac:	d411      	bmi.n	800c5d2 <_dtoa_r+0x5e2>
 800c5ae:	4629      	mov	r1, r5
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	f000 fe67 	bl	800d284 <_Bfree>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5ba:	f888 3000 	strb.w	r3, [r8]
 800c5be:	f10b 0301 	add.w	r3, fp, #1
 800c5c2:	6013      	str	r3, [r2, #0]
 800c5c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	f43f ad61 	beq.w	800c08e <_dtoa_r+0x9e>
 800c5cc:	f8c3 8000 	str.w	r8, [r3]
 800c5d0:	e55d      	b.n	800c08e <_dtoa_r+0x9e>
 800c5d2:	465f      	mov	r7, fp
 800c5d4:	4643      	mov	r3, r8
 800c5d6:	4698      	mov	r8, r3
 800c5d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5dc:	2a39      	cmp	r2, #57	; 0x39
 800c5de:	d106      	bne.n	800c5ee <_dtoa_r+0x5fe>
 800c5e0:	9a01      	ldr	r2, [sp, #4]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d1f7      	bne.n	800c5d6 <_dtoa_r+0x5e6>
 800c5e6:	9901      	ldr	r1, [sp, #4]
 800c5e8:	2230      	movs	r2, #48	; 0x30
 800c5ea:	3701      	adds	r7, #1
 800c5ec:	700a      	strb	r2, [r1, #0]
 800c5ee:	781a      	ldrb	r2, [r3, #0]
 800c5f0:	3201      	adds	r2, #1
 800c5f2:	701a      	strb	r2, [r3, #0]
 800c5f4:	e7ae      	b.n	800c554 <_dtoa_r+0x564>
 800c5f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c5fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c602:	d1b2      	bne.n	800c56a <_dtoa_r+0x57a>
 800c604:	e7d3      	b.n	800c5ae <_dtoa_r+0x5be>
 800c606:	bf00      	nop
 800c608:	0800f458 	.word	0x0800f458
 800c60c:	0800f430 	.word	0x0800f430
 800c610:	9907      	ldr	r1, [sp, #28]
 800c612:	2900      	cmp	r1, #0
 800c614:	f000 80d0 	beq.w	800c7b8 <_dtoa_r+0x7c8>
 800c618:	9906      	ldr	r1, [sp, #24]
 800c61a:	2901      	cmp	r1, #1
 800c61c:	f300 80b4 	bgt.w	800c788 <_dtoa_r+0x798>
 800c620:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c622:	2900      	cmp	r1, #0
 800c624:	f000 80ac 	beq.w	800c780 <_dtoa_r+0x790>
 800c628:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c62c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c630:	461c      	mov	r4, r3
 800c632:	930a      	str	r3, [sp, #40]	; 0x28
 800c634:	9b04      	ldr	r3, [sp, #16]
 800c636:	4413      	add	r3, r2
 800c638:	9304      	str	r3, [sp, #16]
 800c63a:	9b05      	ldr	r3, [sp, #20]
 800c63c:	2101      	movs	r1, #1
 800c63e:	4413      	add	r3, r2
 800c640:	4630      	mov	r0, r6
 800c642:	9305      	str	r3, [sp, #20]
 800c644:	f000 ff20 	bl	800d488 <__i2b>
 800c648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c64a:	4607      	mov	r7, r0
 800c64c:	f1b8 0f00 	cmp.w	r8, #0
 800c650:	dd0d      	ble.n	800c66e <_dtoa_r+0x67e>
 800c652:	9a05      	ldr	r2, [sp, #20]
 800c654:	2a00      	cmp	r2, #0
 800c656:	dd0a      	ble.n	800c66e <_dtoa_r+0x67e>
 800c658:	4542      	cmp	r2, r8
 800c65a:	9904      	ldr	r1, [sp, #16]
 800c65c:	bfa8      	it	ge
 800c65e:	4642      	movge	r2, r8
 800c660:	1a89      	subs	r1, r1, r2
 800c662:	9104      	str	r1, [sp, #16]
 800c664:	9905      	ldr	r1, [sp, #20]
 800c666:	eba8 0802 	sub.w	r8, r8, r2
 800c66a:	1a8a      	subs	r2, r1, r2
 800c66c:	9205      	str	r2, [sp, #20]
 800c66e:	b303      	cbz	r3, 800c6b2 <_dtoa_r+0x6c2>
 800c670:	9a07      	ldr	r2, [sp, #28]
 800c672:	2a00      	cmp	r2, #0
 800c674:	f000 80a5 	beq.w	800c7c2 <_dtoa_r+0x7d2>
 800c678:	2c00      	cmp	r4, #0
 800c67a:	dd13      	ble.n	800c6a4 <_dtoa_r+0x6b4>
 800c67c:	4639      	mov	r1, r7
 800c67e:	4622      	mov	r2, r4
 800c680:	4630      	mov	r0, r6
 800c682:	930d      	str	r3, [sp, #52]	; 0x34
 800c684:	f000 ffc0 	bl	800d608 <__pow5mult>
 800c688:	462a      	mov	r2, r5
 800c68a:	4601      	mov	r1, r0
 800c68c:	4607      	mov	r7, r0
 800c68e:	4630      	mov	r0, r6
 800c690:	f000 ff10 	bl	800d4b4 <__multiply>
 800c694:	4629      	mov	r1, r5
 800c696:	900a      	str	r0, [sp, #40]	; 0x28
 800c698:	4630      	mov	r0, r6
 800c69a:	f000 fdf3 	bl	800d284 <_Bfree>
 800c69e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6a2:	4615      	mov	r5, r2
 800c6a4:	1b1a      	subs	r2, r3, r4
 800c6a6:	d004      	beq.n	800c6b2 <_dtoa_r+0x6c2>
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f000 ffac 	bl	800d608 <__pow5mult>
 800c6b0:	4605      	mov	r5, r0
 800c6b2:	2101      	movs	r1, #1
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f000 fee7 	bl	800d488 <__i2b>
 800c6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	4604      	mov	r4, r0
 800c6c0:	f340 8081 	ble.w	800c7c6 <_dtoa_r+0x7d6>
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	4601      	mov	r1, r0
 800c6c8:	4630      	mov	r0, r6
 800c6ca:	f000 ff9d 	bl	800d608 <__pow5mult>
 800c6ce:	9b06      	ldr	r3, [sp, #24]
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	dd7a      	ble.n	800c7cc <_dtoa_r+0x7dc>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	930a      	str	r3, [sp, #40]	; 0x28
 800c6da:	6922      	ldr	r2, [r4, #16]
 800c6dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c6e0:	6910      	ldr	r0, [r2, #16]
 800c6e2:	f000 fe81 	bl	800d3e8 <__hi0bits>
 800c6e6:	f1c0 0020 	rsb	r0, r0, #32
 800c6ea:	9b05      	ldr	r3, [sp, #20]
 800c6ec:	4418      	add	r0, r3
 800c6ee:	f010 001f 	ands.w	r0, r0, #31
 800c6f2:	f000 808c 	beq.w	800c80e <_dtoa_r+0x81e>
 800c6f6:	f1c0 0220 	rsb	r2, r0, #32
 800c6fa:	2a04      	cmp	r2, #4
 800c6fc:	f340 8085 	ble.w	800c80a <_dtoa_r+0x81a>
 800c700:	f1c0 001c 	rsb	r0, r0, #28
 800c704:	9b04      	ldr	r3, [sp, #16]
 800c706:	4403      	add	r3, r0
 800c708:	9304      	str	r3, [sp, #16]
 800c70a:	9b05      	ldr	r3, [sp, #20]
 800c70c:	4403      	add	r3, r0
 800c70e:	4480      	add	r8, r0
 800c710:	9305      	str	r3, [sp, #20]
 800c712:	9b04      	ldr	r3, [sp, #16]
 800c714:	2b00      	cmp	r3, #0
 800c716:	dd05      	ble.n	800c724 <_dtoa_r+0x734>
 800c718:	4629      	mov	r1, r5
 800c71a:	461a      	mov	r2, r3
 800c71c:	4630      	mov	r0, r6
 800c71e:	f000 ffcd 	bl	800d6bc <__lshift>
 800c722:	4605      	mov	r5, r0
 800c724:	9b05      	ldr	r3, [sp, #20]
 800c726:	2b00      	cmp	r3, #0
 800c728:	dd05      	ble.n	800c736 <_dtoa_r+0x746>
 800c72a:	4621      	mov	r1, r4
 800c72c:	461a      	mov	r2, r3
 800c72e:	4630      	mov	r0, r6
 800c730:	f000 ffc4 	bl	800d6bc <__lshift>
 800c734:	4604      	mov	r4, r0
 800c736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d06a      	beq.n	800c812 <_dtoa_r+0x822>
 800c73c:	4621      	mov	r1, r4
 800c73e:	4628      	mov	r0, r5
 800c740:	f001 f82c 	bl	800d79c <__mcmp>
 800c744:	2800      	cmp	r0, #0
 800c746:	da64      	bge.n	800c812 <_dtoa_r+0x822>
 800c748:	2300      	movs	r3, #0
 800c74a:	4629      	mov	r1, r5
 800c74c:	220a      	movs	r2, #10
 800c74e:	4630      	mov	r0, r6
 800c750:	f000 fdba 	bl	800d2c8 <__multadd>
 800c754:	9b07      	ldr	r3, [sp, #28]
 800c756:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c75a:	4605      	mov	r5, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f000 8191 	beq.w	800ca84 <_dtoa_r+0xa94>
 800c762:	4639      	mov	r1, r7
 800c764:	2300      	movs	r3, #0
 800c766:	220a      	movs	r2, #10
 800c768:	4630      	mov	r0, r6
 800c76a:	f000 fdad 	bl	800d2c8 <__multadd>
 800c76e:	f1ba 0f00 	cmp.w	sl, #0
 800c772:	4607      	mov	r7, r0
 800c774:	f300 808d 	bgt.w	800c892 <_dtoa_r+0x8a2>
 800c778:	9b06      	ldr	r3, [sp, #24]
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	dc50      	bgt.n	800c820 <_dtoa_r+0x830>
 800c77e:	e088      	b.n	800c892 <_dtoa_r+0x8a2>
 800c780:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c782:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c786:	e751      	b.n	800c62c <_dtoa_r+0x63c>
 800c788:	f109 34ff 	add.w	r4, r9, #4294967295
 800c78c:	42a3      	cmp	r3, r4
 800c78e:	bfbf      	itttt	lt
 800c790:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800c792:	1ae3      	sublt	r3, r4, r3
 800c794:	18d2      	addlt	r2, r2, r3
 800c796:	9209      	strlt	r2, [sp, #36]	; 0x24
 800c798:	bfb6      	itet	lt
 800c79a:	4623      	movlt	r3, r4
 800c79c:	1b1c      	subge	r4, r3, r4
 800c79e:	2400      	movlt	r4, #0
 800c7a0:	f1b9 0f00 	cmp.w	r9, #0
 800c7a4:	bfb5      	itete	lt
 800c7a6:	9a04      	ldrlt	r2, [sp, #16]
 800c7a8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800c7ac:	eba2 0809 	sublt.w	r8, r2, r9
 800c7b0:	464a      	movge	r2, r9
 800c7b2:	bfb8      	it	lt
 800c7b4:	2200      	movlt	r2, #0
 800c7b6:	e73c      	b.n	800c632 <_dtoa_r+0x642>
 800c7b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c7bc:	9f07      	ldr	r7, [sp, #28]
 800c7be:	461c      	mov	r4, r3
 800c7c0:	e744      	b.n	800c64c <_dtoa_r+0x65c>
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	e770      	b.n	800c6a8 <_dtoa_r+0x6b8>
 800c7c6:	9b06      	ldr	r3, [sp, #24]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	dc18      	bgt.n	800c7fe <_dtoa_r+0x80e>
 800c7cc:	9b02      	ldr	r3, [sp, #8]
 800c7ce:	b9b3      	cbnz	r3, 800c7fe <_dtoa_r+0x80e>
 800c7d0:	9b03      	ldr	r3, [sp, #12]
 800c7d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c7d6:	b9a2      	cbnz	r2, 800c802 <_dtoa_r+0x812>
 800c7d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c7dc:	0d12      	lsrs	r2, r2, #20
 800c7de:	0512      	lsls	r2, r2, #20
 800c7e0:	b18a      	cbz	r2, 800c806 <_dtoa_r+0x816>
 800c7e2:	9b04      	ldr	r3, [sp, #16]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	9304      	str	r3, [sp, #16]
 800c7e8:	9b05      	ldr	r3, [sp, #20]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	9305      	str	r3, [sp, #20]
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	930a      	str	r3, [sp, #40]	; 0x28
 800c7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f47f af70 	bne.w	800c6da <_dtoa_r+0x6ea>
 800c7fa:	2001      	movs	r0, #1
 800c7fc:	e775      	b.n	800c6ea <_dtoa_r+0x6fa>
 800c7fe:	2300      	movs	r3, #0
 800c800:	e7f6      	b.n	800c7f0 <_dtoa_r+0x800>
 800c802:	9b02      	ldr	r3, [sp, #8]
 800c804:	e7f4      	b.n	800c7f0 <_dtoa_r+0x800>
 800c806:	920a      	str	r2, [sp, #40]	; 0x28
 800c808:	e7f3      	b.n	800c7f2 <_dtoa_r+0x802>
 800c80a:	d082      	beq.n	800c712 <_dtoa_r+0x722>
 800c80c:	4610      	mov	r0, r2
 800c80e:	301c      	adds	r0, #28
 800c810:	e778      	b.n	800c704 <_dtoa_r+0x714>
 800c812:	f1b9 0f00 	cmp.w	r9, #0
 800c816:	dc37      	bgt.n	800c888 <_dtoa_r+0x898>
 800c818:	9b06      	ldr	r3, [sp, #24]
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	dd34      	ble.n	800c888 <_dtoa_r+0x898>
 800c81e:	46ca      	mov	sl, r9
 800c820:	f1ba 0f00 	cmp.w	sl, #0
 800c824:	d10d      	bne.n	800c842 <_dtoa_r+0x852>
 800c826:	4621      	mov	r1, r4
 800c828:	4653      	mov	r3, sl
 800c82a:	2205      	movs	r2, #5
 800c82c:	4630      	mov	r0, r6
 800c82e:	f000 fd4b 	bl	800d2c8 <__multadd>
 800c832:	4601      	mov	r1, r0
 800c834:	4604      	mov	r4, r0
 800c836:	4628      	mov	r0, r5
 800c838:	f000 ffb0 	bl	800d79c <__mcmp>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	f73f adeb 	bgt.w	800c418 <_dtoa_r+0x428>
 800c842:	9b08      	ldr	r3, [sp, #32]
 800c844:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c848:	ea6f 0b03 	mvn.w	fp, r3
 800c84c:	f04f 0900 	mov.w	r9, #0
 800c850:	4621      	mov	r1, r4
 800c852:	4630      	mov	r0, r6
 800c854:	f000 fd16 	bl	800d284 <_Bfree>
 800c858:	2f00      	cmp	r7, #0
 800c85a:	f43f aea8 	beq.w	800c5ae <_dtoa_r+0x5be>
 800c85e:	f1b9 0f00 	cmp.w	r9, #0
 800c862:	d005      	beq.n	800c870 <_dtoa_r+0x880>
 800c864:	45b9      	cmp	r9, r7
 800c866:	d003      	beq.n	800c870 <_dtoa_r+0x880>
 800c868:	4649      	mov	r1, r9
 800c86a:	4630      	mov	r0, r6
 800c86c:	f000 fd0a 	bl	800d284 <_Bfree>
 800c870:	4639      	mov	r1, r7
 800c872:	4630      	mov	r0, r6
 800c874:	f000 fd06 	bl	800d284 <_Bfree>
 800c878:	e699      	b.n	800c5ae <_dtoa_r+0x5be>
 800c87a:	2400      	movs	r4, #0
 800c87c:	4627      	mov	r7, r4
 800c87e:	e7e0      	b.n	800c842 <_dtoa_r+0x852>
 800c880:	46bb      	mov	fp, r7
 800c882:	4604      	mov	r4, r0
 800c884:	4607      	mov	r7, r0
 800c886:	e5c7      	b.n	800c418 <_dtoa_r+0x428>
 800c888:	9b07      	ldr	r3, [sp, #28]
 800c88a:	46ca      	mov	sl, r9
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f000 8100 	beq.w	800ca92 <_dtoa_r+0xaa2>
 800c892:	f1b8 0f00 	cmp.w	r8, #0
 800c896:	dd05      	ble.n	800c8a4 <_dtoa_r+0x8b4>
 800c898:	4639      	mov	r1, r7
 800c89a:	4642      	mov	r2, r8
 800c89c:	4630      	mov	r0, r6
 800c89e:	f000 ff0d 	bl	800d6bc <__lshift>
 800c8a2:	4607      	mov	r7, r0
 800c8a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d05d      	beq.n	800c966 <_dtoa_r+0x976>
 800c8aa:	6879      	ldr	r1, [r7, #4]
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	f000 fca9 	bl	800d204 <_Balloc>
 800c8b2:	4680      	mov	r8, r0
 800c8b4:	b928      	cbnz	r0, 800c8c2 <_dtoa_r+0x8d2>
 800c8b6:	4b82      	ldr	r3, [pc, #520]	; (800cac0 <_dtoa_r+0xad0>)
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c8be:	f7ff bbaf 	b.w	800c020 <_dtoa_r+0x30>
 800c8c2:	693a      	ldr	r2, [r7, #16]
 800c8c4:	3202      	adds	r2, #2
 800c8c6:	0092      	lsls	r2, r2, #2
 800c8c8:	f107 010c 	add.w	r1, r7, #12
 800c8cc:	300c      	adds	r0, #12
 800c8ce:	f000 fc8b 	bl	800d1e8 <memcpy>
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	4641      	mov	r1, r8
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	f000 fef0 	bl	800d6bc <__lshift>
 800c8dc:	9b01      	ldr	r3, [sp, #4]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	9304      	str	r3, [sp, #16]
 800c8e2:	9b01      	ldr	r3, [sp, #4]
 800c8e4:	4453      	add	r3, sl
 800c8e6:	9308      	str	r3, [sp, #32]
 800c8e8:	9b02      	ldr	r3, [sp, #8]
 800c8ea:	f003 0301 	and.w	r3, r3, #1
 800c8ee:	46b9      	mov	r9, r7
 800c8f0:	9307      	str	r3, [sp, #28]
 800c8f2:	4607      	mov	r7, r0
 800c8f4:	9b04      	ldr	r3, [sp, #16]
 800c8f6:	4621      	mov	r1, r4
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	9302      	str	r3, [sp, #8]
 800c8fe:	f7ff faeb 	bl	800bed8 <quorem>
 800c902:	4603      	mov	r3, r0
 800c904:	3330      	adds	r3, #48	; 0x30
 800c906:	9005      	str	r0, [sp, #20]
 800c908:	4649      	mov	r1, r9
 800c90a:	4628      	mov	r0, r5
 800c90c:	9309      	str	r3, [sp, #36]	; 0x24
 800c90e:	f000 ff45 	bl	800d79c <__mcmp>
 800c912:	463a      	mov	r2, r7
 800c914:	4682      	mov	sl, r0
 800c916:	4621      	mov	r1, r4
 800c918:	4630      	mov	r0, r6
 800c91a:	f000 ff5b 	bl	800d7d4 <__mdiff>
 800c91e:	68c2      	ldr	r2, [r0, #12]
 800c920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c922:	4680      	mov	r8, r0
 800c924:	bb0a      	cbnz	r2, 800c96a <_dtoa_r+0x97a>
 800c926:	4601      	mov	r1, r0
 800c928:	4628      	mov	r0, r5
 800c92a:	f000 ff37 	bl	800d79c <__mcmp>
 800c92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c930:	4602      	mov	r2, r0
 800c932:	4641      	mov	r1, r8
 800c934:	4630      	mov	r0, r6
 800c936:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800c93a:	f000 fca3 	bl	800d284 <_Bfree>
 800c93e:	9b06      	ldr	r3, [sp, #24]
 800c940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c942:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c946:	ea43 0102 	orr.w	r1, r3, r2
 800c94a:	9b07      	ldr	r3, [sp, #28]
 800c94c:	430b      	orrs	r3, r1
 800c94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c950:	d10d      	bne.n	800c96e <_dtoa_r+0x97e>
 800c952:	2b39      	cmp	r3, #57	; 0x39
 800c954:	d029      	beq.n	800c9aa <_dtoa_r+0x9ba>
 800c956:	f1ba 0f00 	cmp.w	sl, #0
 800c95a:	dd01      	ble.n	800c960 <_dtoa_r+0x970>
 800c95c:	9b05      	ldr	r3, [sp, #20]
 800c95e:	3331      	adds	r3, #49	; 0x31
 800c960:	9a02      	ldr	r2, [sp, #8]
 800c962:	7013      	strb	r3, [r2, #0]
 800c964:	e774      	b.n	800c850 <_dtoa_r+0x860>
 800c966:	4638      	mov	r0, r7
 800c968:	e7b8      	b.n	800c8dc <_dtoa_r+0x8ec>
 800c96a:	2201      	movs	r2, #1
 800c96c:	e7e1      	b.n	800c932 <_dtoa_r+0x942>
 800c96e:	f1ba 0f00 	cmp.w	sl, #0
 800c972:	db06      	blt.n	800c982 <_dtoa_r+0x992>
 800c974:	9906      	ldr	r1, [sp, #24]
 800c976:	ea41 0a0a 	orr.w	sl, r1, sl
 800c97a:	9907      	ldr	r1, [sp, #28]
 800c97c:	ea5a 0101 	orrs.w	r1, sl, r1
 800c980:	d120      	bne.n	800c9c4 <_dtoa_r+0x9d4>
 800c982:	2a00      	cmp	r2, #0
 800c984:	ddec      	ble.n	800c960 <_dtoa_r+0x970>
 800c986:	4629      	mov	r1, r5
 800c988:	2201      	movs	r2, #1
 800c98a:	4630      	mov	r0, r6
 800c98c:	9304      	str	r3, [sp, #16]
 800c98e:	f000 fe95 	bl	800d6bc <__lshift>
 800c992:	4621      	mov	r1, r4
 800c994:	4605      	mov	r5, r0
 800c996:	f000 ff01 	bl	800d79c <__mcmp>
 800c99a:	2800      	cmp	r0, #0
 800c99c:	9b04      	ldr	r3, [sp, #16]
 800c99e:	dc02      	bgt.n	800c9a6 <_dtoa_r+0x9b6>
 800c9a0:	d1de      	bne.n	800c960 <_dtoa_r+0x970>
 800c9a2:	07da      	lsls	r2, r3, #31
 800c9a4:	d5dc      	bpl.n	800c960 <_dtoa_r+0x970>
 800c9a6:	2b39      	cmp	r3, #57	; 0x39
 800c9a8:	d1d8      	bne.n	800c95c <_dtoa_r+0x96c>
 800c9aa:	9a02      	ldr	r2, [sp, #8]
 800c9ac:	2339      	movs	r3, #57	; 0x39
 800c9ae:	7013      	strb	r3, [r2, #0]
 800c9b0:	4643      	mov	r3, r8
 800c9b2:	4698      	mov	r8, r3
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c9ba:	2a39      	cmp	r2, #57	; 0x39
 800c9bc:	d051      	beq.n	800ca62 <_dtoa_r+0xa72>
 800c9be:	3201      	adds	r2, #1
 800c9c0:	701a      	strb	r2, [r3, #0]
 800c9c2:	e745      	b.n	800c850 <_dtoa_r+0x860>
 800c9c4:	2a00      	cmp	r2, #0
 800c9c6:	dd03      	ble.n	800c9d0 <_dtoa_r+0x9e0>
 800c9c8:	2b39      	cmp	r3, #57	; 0x39
 800c9ca:	d0ee      	beq.n	800c9aa <_dtoa_r+0x9ba>
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	e7c7      	b.n	800c960 <_dtoa_r+0x970>
 800c9d0:	9a04      	ldr	r2, [sp, #16]
 800c9d2:	9908      	ldr	r1, [sp, #32]
 800c9d4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c9d8:	428a      	cmp	r2, r1
 800c9da:	d02b      	beq.n	800ca34 <_dtoa_r+0xa44>
 800c9dc:	4629      	mov	r1, r5
 800c9de:	2300      	movs	r3, #0
 800c9e0:	220a      	movs	r2, #10
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	f000 fc70 	bl	800d2c8 <__multadd>
 800c9e8:	45b9      	cmp	r9, r7
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	f04f 0300 	mov.w	r3, #0
 800c9f0:	f04f 020a 	mov.w	r2, #10
 800c9f4:	4649      	mov	r1, r9
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	d107      	bne.n	800ca0a <_dtoa_r+0xa1a>
 800c9fa:	f000 fc65 	bl	800d2c8 <__multadd>
 800c9fe:	4681      	mov	r9, r0
 800ca00:	4607      	mov	r7, r0
 800ca02:	9b04      	ldr	r3, [sp, #16]
 800ca04:	3301      	adds	r3, #1
 800ca06:	9304      	str	r3, [sp, #16]
 800ca08:	e774      	b.n	800c8f4 <_dtoa_r+0x904>
 800ca0a:	f000 fc5d 	bl	800d2c8 <__multadd>
 800ca0e:	4639      	mov	r1, r7
 800ca10:	4681      	mov	r9, r0
 800ca12:	2300      	movs	r3, #0
 800ca14:	220a      	movs	r2, #10
 800ca16:	4630      	mov	r0, r6
 800ca18:	f000 fc56 	bl	800d2c8 <__multadd>
 800ca1c:	4607      	mov	r7, r0
 800ca1e:	e7f0      	b.n	800ca02 <_dtoa_r+0xa12>
 800ca20:	f1ba 0f00 	cmp.w	sl, #0
 800ca24:	9a01      	ldr	r2, [sp, #4]
 800ca26:	bfcc      	ite	gt
 800ca28:	46d0      	movgt	r8, sl
 800ca2a:	f04f 0801 	movle.w	r8, #1
 800ca2e:	4490      	add	r8, r2
 800ca30:	f04f 0900 	mov.w	r9, #0
 800ca34:	4629      	mov	r1, r5
 800ca36:	2201      	movs	r2, #1
 800ca38:	4630      	mov	r0, r6
 800ca3a:	9302      	str	r3, [sp, #8]
 800ca3c:	f000 fe3e 	bl	800d6bc <__lshift>
 800ca40:	4621      	mov	r1, r4
 800ca42:	4605      	mov	r5, r0
 800ca44:	f000 feaa 	bl	800d79c <__mcmp>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	dcb1      	bgt.n	800c9b0 <_dtoa_r+0x9c0>
 800ca4c:	d102      	bne.n	800ca54 <_dtoa_r+0xa64>
 800ca4e:	9b02      	ldr	r3, [sp, #8]
 800ca50:	07db      	lsls	r3, r3, #31
 800ca52:	d4ad      	bmi.n	800c9b0 <_dtoa_r+0x9c0>
 800ca54:	4643      	mov	r3, r8
 800ca56:	4698      	mov	r8, r3
 800ca58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca5c:	2a30      	cmp	r2, #48	; 0x30
 800ca5e:	d0fa      	beq.n	800ca56 <_dtoa_r+0xa66>
 800ca60:	e6f6      	b.n	800c850 <_dtoa_r+0x860>
 800ca62:	9a01      	ldr	r2, [sp, #4]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d1a4      	bne.n	800c9b2 <_dtoa_r+0x9c2>
 800ca68:	f10b 0b01 	add.w	fp, fp, #1
 800ca6c:	2331      	movs	r3, #49	; 0x31
 800ca6e:	e778      	b.n	800c962 <_dtoa_r+0x972>
 800ca70:	4b14      	ldr	r3, [pc, #80]	; (800cac4 <_dtoa_r+0xad4>)
 800ca72:	f7ff bb27 	b.w	800c0c4 <_dtoa_r+0xd4>
 800ca76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f47f ab03 	bne.w	800c084 <_dtoa_r+0x94>
 800ca7e:	4b12      	ldr	r3, [pc, #72]	; (800cac8 <_dtoa_r+0xad8>)
 800ca80:	f7ff bb20 	b.w	800c0c4 <_dtoa_r+0xd4>
 800ca84:	f1ba 0f00 	cmp.w	sl, #0
 800ca88:	dc03      	bgt.n	800ca92 <_dtoa_r+0xaa2>
 800ca8a:	9b06      	ldr	r3, [sp, #24]
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	f73f aec7 	bgt.w	800c820 <_dtoa_r+0x830>
 800ca92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ca96:	4621      	mov	r1, r4
 800ca98:	4628      	mov	r0, r5
 800ca9a:	f7ff fa1d 	bl	800bed8 <quorem>
 800ca9e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800caa2:	f808 3b01 	strb.w	r3, [r8], #1
 800caa6:	9a01      	ldr	r2, [sp, #4]
 800caa8:	eba8 0202 	sub.w	r2, r8, r2
 800caac:	4592      	cmp	sl, r2
 800caae:	ddb7      	ble.n	800ca20 <_dtoa_r+0xa30>
 800cab0:	4629      	mov	r1, r5
 800cab2:	2300      	movs	r3, #0
 800cab4:	220a      	movs	r2, #10
 800cab6:	4630      	mov	r0, r6
 800cab8:	f000 fc06 	bl	800d2c8 <__multadd>
 800cabc:	4605      	mov	r5, r0
 800cabe:	e7ea      	b.n	800ca96 <_dtoa_r+0xaa6>
 800cac0:	0800f348 	.word	0x0800f348
 800cac4:	0800f14c 	.word	0x0800f14c
 800cac8:	0800f2c9 	.word	0x0800f2c9

0800cacc <rshift>:
 800cacc:	6903      	ldr	r3, [r0, #16]
 800cace:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cad2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cad6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cada:	f100 0414 	add.w	r4, r0, #20
 800cade:	dd45      	ble.n	800cb6c <rshift+0xa0>
 800cae0:	f011 011f 	ands.w	r1, r1, #31
 800cae4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cae8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800caec:	d10c      	bne.n	800cb08 <rshift+0x3c>
 800caee:	f100 0710 	add.w	r7, r0, #16
 800caf2:	4629      	mov	r1, r5
 800caf4:	42b1      	cmp	r1, r6
 800caf6:	d334      	bcc.n	800cb62 <rshift+0x96>
 800caf8:	1a9b      	subs	r3, r3, r2
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	1eea      	subs	r2, r5, #3
 800cafe:	4296      	cmp	r6, r2
 800cb00:	bf38      	it	cc
 800cb02:	2300      	movcc	r3, #0
 800cb04:	4423      	add	r3, r4
 800cb06:	e015      	b.n	800cb34 <rshift+0x68>
 800cb08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cb0c:	f1c1 0820 	rsb	r8, r1, #32
 800cb10:	40cf      	lsrs	r7, r1
 800cb12:	f105 0e04 	add.w	lr, r5, #4
 800cb16:	46a1      	mov	r9, r4
 800cb18:	4576      	cmp	r6, lr
 800cb1a:	46f4      	mov	ip, lr
 800cb1c:	d815      	bhi.n	800cb4a <rshift+0x7e>
 800cb1e:	1a9a      	subs	r2, r3, r2
 800cb20:	0092      	lsls	r2, r2, #2
 800cb22:	3a04      	subs	r2, #4
 800cb24:	3501      	adds	r5, #1
 800cb26:	42ae      	cmp	r6, r5
 800cb28:	bf38      	it	cc
 800cb2a:	2200      	movcc	r2, #0
 800cb2c:	18a3      	adds	r3, r4, r2
 800cb2e:	50a7      	str	r7, [r4, r2]
 800cb30:	b107      	cbz	r7, 800cb34 <rshift+0x68>
 800cb32:	3304      	adds	r3, #4
 800cb34:	1b1a      	subs	r2, r3, r4
 800cb36:	42a3      	cmp	r3, r4
 800cb38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cb3c:	bf08      	it	eq
 800cb3e:	2300      	moveq	r3, #0
 800cb40:	6102      	str	r2, [r0, #16]
 800cb42:	bf08      	it	eq
 800cb44:	6143      	streq	r3, [r0, #20]
 800cb46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb4a:	f8dc c000 	ldr.w	ip, [ip]
 800cb4e:	fa0c fc08 	lsl.w	ip, ip, r8
 800cb52:	ea4c 0707 	orr.w	r7, ip, r7
 800cb56:	f849 7b04 	str.w	r7, [r9], #4
 800cb5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb5e:	40cf      	lsrs	r7, r1
 800cb60:	e7da      	b.n	800cb18 <rshift+0x4c>
 800cb62:	f851 cb04 	ldr.w	ip, [r1], #4
 800cb66:	f847 cf04 	str.w	ip, [r7, #4]!
 800cb6a:	e7c3      	b.n	800caf4 <rshift+0x28>
 800cb6c:	4623      	mov	r3, r4
 800cb6e:	e7e1      	b.n	800cb34 <rshift+0x68>

0800cb70 <__hexdig_fun>:
 800cb70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cb74:	2b09      	cmp	r3, #9
 800cb76:	d802      	bhi.n	800cb7e <__hexdig_fun+0xe>
 800cb78:	3820      	subs	r0, #32
 800cb7a:	b2c0      	uxtb	r0, r0
 800cb7c:	4770      	bx	lr
 800cb7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cb82:	2b05      	cmp	r3, #5
 800cb84:	d801      	bhi.n	800cb8a <__hexdig_fun+0x1a>
 800cb86:	3847      	subs	r0, #71	; 0x47
 800cb88:	e7f7      	b.n	800cb7a <__hexdig_fun+0xa>
 800cb8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cb8e:	2b05      	cmp	r3, #5
 800cb90:	d801      	bhi.n	800cb96 <__hexdig_fun+0x26>
 800cb92:	3827      	subs	r0, #39	; 0x27
 800cb94:	e7f1      	b.n	800cb7a <__hexdig_fun+0xa>
 800cb96:	2000      	movs	r0, #0
 800cb98:	4770      	bx	lr
	...

0800cb9c <__gethex>:
 800cb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba0:	ed2d 8b02 	vpush	{d8}
 800cba4:	b089      	sub	sp, #36	; 0x24
 800cba6:	ee08 0a10 	vmov	s16, r0
 800cbaa:	9304      	str	r3, [sp, #16]
 800cbac:	4bb4      	ldr	r3, [pc, #720]	; (800ce80 <__gethex+0x2e4>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	9301      	str	r3, [sp, #4]
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	468b      	mov	fp, r1
 800cbb6:	4690      	mov	r8, r2
 800cbb8:	f7f3 fb42 	bl	8000240 <strlen>
 800cbbc:	9b01      	ldr	r3, [sp, #4]
 800cbbe:	f8db 2000 	ldr.w	r2, [fp]
 800cbc2:	4403      	add	r3, r0
 800cbc4:	4682      	mov	sl, r0
 800cbc6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cbca:	9305      	str	r3, [sp, #20]
 800cbcc:	1c93      	adds	r3, r2, #2
 800cbce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cbd2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cbd6:	32fe      	adds	r2, #254	; 0xfe
 800cbd8:	18d1      	adds	r1, r2, r3
 800cbda:	461f      	mov	r7, r3
 800cbdc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cbe0:	9100      	str	r1, [sp, #0]
 800cbe2:	2830      	cmp	r0, #48	; 0x30
 800cbe4:	d0f8      	beq.n	800cbd8 <__gethex+0x3c>
 800cbe6:	f7ff ffc3 	bl	800cb70 <__hexdig_fun>
 800cbea:	4604      	mov	r4, r0
 800cbec:	2800      	cmp	r0, #0
 800cbee:	d13a      	bne.n	800cc66 <__gethex+0xca>
 800cbf0:	9901      	ldr	r1, [sp, #4]
 800cbf2:	4652      	mov	r2, sl
 800cbf4:	4638      	mov	r0, r7
 800cbf6:	f001 fa2f 	bl	800e058 <strncmp>
 800cbfa:	4605      	mov	r5, r0
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	d168      	bne.n	800ccd2 <__gethex+0x136>
 800cc00:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cc04:	eb07 060a 	add.w	r6, r7, sl
 800cc08:	f7ff ffb2 	bl	800cb70 <__hexdig_fun>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	d062      	beq.n	800ccd6 <__gethex+0x13a>
 800cc10:	4633      	mov	r3, r6
 800cc12:	7818      	ldrb	r0, [r3, #0]
 800cc14:	2830      	cmp	r0, #48	; 0x30
 800cc16:	461f      	mov	r7, r3
 800cc18:	f103 0301 	add.w	r3, r3, #1
 800cc1c:	d0f9      	beq.n	800cc12 <__gethex+0x76>
 800cc1e:	f7ff ffa7 	bl	800cb70 <__hexdig_fun>
 800cc22:	2301      	movs	r3, #1
 800cc24:	fab0 f480 	clz	r4, r0
 800cc28:	0964      	lsrs	r4, r4, #5
 800cc2a:	4635      	mov	r5, r6
 800cc2c:	9300      	str	r3, [sp, #0]
 800cc2e:	463a      	mov	r2, r7
 800cc30:	4616      	mov	r6, r2
 800cc32:	3201      	adds	r2, #1
 800cc34:	7830      	ldrb	r0, [r6, #0]
 800cc36:	f7ff ff9b 	bl	800cb70 <__hexdig_fun>
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	d1f8      	bne.n	800cc30 <__gethex+0x94>
 800cc3e:	9901      	ldr	r1, [sp, #4]
 800cc40:	4652      	mov	r2, sl
 800cc42:	4630      	mov	r0, r6
 800cc44:	f001 fa08 	bl	800e058 <strncmp>
 800cc48:	b980      	cbnz	r0, 800cc6c <__gethex+0xd0>
 800cc4a:	b94d      	cbnz	r5, 800cc60 <__gethex+0xc4>
 800cc4c:	eb06 050a 	add.w	r5, r6, sl
 800cc50:	462a      	mov	r2, r5
 800cc52:	4616      	mov	r6, r2
 800cc54:	3201      	adds	r2, #1
 800cc56:	7830      	ldrb	r0, [r6, #0]
 800cc58:	f7ff ff8a 	bl	800cb70 <__hexdig_fun>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d1f8      	bne.n	800cc52 <__gethex+0xb6>
 800cc60:	1bad      	subs	r5, r5, r6
 800cc62:	00ad      	lsls	r5, r5, #2
 800cc64:	e004      	b.n	800cc70 <__gethex+0xd4>
 800cc66:	2400      	movs	r4, #0
 800cc68:	4625      	mov	r5, r4
 800cc6a:	e7e0      	b.n	800cc2e <__gethex+0x92>
 800cc6c:	2d00      	cmp	r5, #0
 800cc6e:	d1f7      	bne.n	800cc60 <__gethex+0xc4>
 800cc70:	7833      	ldrb	r3, [r6, #0]
 800cc72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cc76:	2b50      	cmp	r3, #80	; 0x50
 800cc78:	d13b      	bne.n	800ccf2 <__gethex+0x156>
 800cc7a:	7873      	ldrb	r3, [r6, #1]
 800cc7c:	2b2b      	cmp	r3, #43	; 0x2b
 800cc7e:	d02c      	beq.n	800ccda <__gethex+0x13e>
 800cc80:	2b2d      	cmp	r3, #45	; 0x2d
 800cc82:	d02e      	beq.n	800cce2 <__gethex+0x146>
 800cc84:	1c71      	adds	r1, r6, #1
 800cc86:	f04f 0900 	mov.w	r9, #0
 800cc8a:	7808      	ldrb	r0, [r1, #0]
 800cc8c:	f7ff ff70 	bl	800cb70 <__hexdig_fun>
 800cc90:	1e43      	subs	r3, r0, #1
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	2b18      	cmp	r3, #24
 800cc96:	d82c      	bhi.n	800ccf2 <__gethex+0x156>
 800cc98:	f1a0 0210 	sub.w	r2, r0, #16
 800cc9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cca0:	f7ff ff66 	bl	800cb70 <__hexdig_fun>
 800cca4:	1e43      	subs	r3, r0, #1
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	2b18      	cmp	r3, #24
 800ccaa:	d91d      	bls.n	800cce8 <__gethex+0x14c>
 800ccac:	f1b9 0f00 	cmp.w	r9, #0
 800ccb0:	d000      	beq.n	800ccb4 <__gethex+0x118>
 800ccb2:	4252      	negs	r2, r2
 800ccb4:	4415      	add	r5, r2
 800ccb6:	f8cb 1000 	str.w	r1, [fp]
 800ccba:	b1e4      	cbz	r4, 800ccf6 <__gethex+0x15a>
 800ccbc:	9b00      	ldr	r3, [sp, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	bf14      	ite	ne
 800ccc2:	2700      	movne	r7, #0
 800ccc4:	2706      	moveq	r7, #6
 800ccc6:	4638      	mov	r0, r7
 800ccc8:	b009      	add	sp, #36	; 0x24
 800ccca:	ecbd 8b02 	vpop	{d8}
 800ccce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd2:	463e      	mov	r6, r7
 800ccd4:	4625      	mov	r5, r4
 800ccd6:	2401      	movs	r4, #1
 800ccd8:	e7ca      	b.n	800cc70 <__gethex+0xd4>
 800ccda:	f04f 0900 	mov.w	r9, #0
 800ccde:	1cb1      	adds	r1, r6, #2
 800cce0:	e7d3      	b.n	800cc8a <__gethex+0xee>
 800cce2:	f04f 0901 	mov.w	r9, #1
 800cce6:	e7fa      	b.n	800ccde <__gethex+0x142>
 800cce8:	230a      	movs	r3, #10
 800ccea:	fb03 0202 	mla	r2, r3, r2, r0
 800ccee:	3a10      	subs	r2, #16
 800ccf0:	e7d4      	b.n	800cc9c <__gethex+0x100>
 800ccf2:	4631      	mov	r1, r6
 800ccf4:	e7df      	b.n	800ccb6 <__gethex+0x11a>
 800ccf6:	1bf3      	subs	r3, r6, r7
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	4621      	mov	r1, r4
 800ccfc:	2b07      	cmp	r3, #7
 800ccfe:	dc0b      	bgt.n	800cd18 <__gethex+0x17c>
 800cd00:	ee18 0a10 	vmov	r0, s16
 800cd04:	f000 fa7e 	bl	800d204 <_Balloc>
 800cd08:	4604      	mov	r4, r0
 800cd0a:	b940      	cbnz	r0, 800cd1e <__gethex+0x182>
 800cd0c:	4b5d      	ldr	r3, [pc, #372]	; (800ce84 <__gethex+0x2e8>)
 800cd0e:	4602      	mov	r2, r0
 800cd10:	21de      	movs	r1, #222	; 0xde
 800cd12:	485d      	ldr	r0, [pc, #372]	; (800ce88 <__gethex+0x2ec>)
 800cd14:	f001 f9c2 	bl	800e09c <__assert_func>
 800cd18:	3101      	adds	r1, #1
 800cd1a:	105b      	asrs	r3, r3, #1
 800cd1c:	e7ee      	b.n	800ccfc <__gethex+0x160>
 800cd1e:	f100 0914 	add.w	r9, r0, #20
 800cd22:	f04f 0b00 	mov.w	fp, #0
 800cd26:	f1ca 0301 	rsb	r3, sl, #1
 800cd2a:	f8cd 9008 	str.w	r9, [sp, #8]
 800cd2e:	f8cd b000 	str.w	fp, [sp]
 800cd32:	9306      	str	r3, [sp, #24]
 800cd34:	42b7      	cmp	r7, r6
 800cd36:	d340      	bcc.n	800cdba <__gethex+0x21e>
 800cd38:	9802      	ldr	r0, [sp, #8]
 800cd3a:	9b00      	ldr	r3, [sp, #0]
 800cd3c:	f840 3b04 	str.w	r3, [r0], #4
 800cd40:	eba0 0009 	sub.w	r0, r0, r9
 800cd44:	1080      	asrs	r0, r0, #2
 800cd46:	0146      	lsls	r6, r0, #5
 800cd48:	6120      	str	r0, [r4, #16]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f000 fb4c 	bl	800d3e8 <__hi0bits>
 800cd50:	1a30      	subs	r0, r6, r0
 800cd52:	f8d8 6000 	ldr.w	r6, [r8]
 800cd56:	42b0      	cmp	r0, r6
 800cd58:	dd63      	ble.n	800ce22 <__gethex+0x286>
 800cd5a:	1b87      	subs	r7, r0, r6
 800cd5c:	4639      	mov	r1, r7
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f000 feed 	bl	800db3e <__any_on>
 800cd64:	4682      	mov	sl, r0
 800cd66:	b1a8      	cbz	r0, 800cd94 <__gethex+0x1f8>
 800cd68:	1e7b      	subs	r3, r7, #1
 800cd6a:	1159      	asrs	r1, r3, #5
 800cd6c:	f003 021f 	and.w	r2, r3, #31
 800cd70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cd74:	f04f 0a01 	mov.w	sl, #1
 800cd78:	fa0a f202 	lsl.w	r2, sl, r2
 800cd7c:	420a      	tst	r2, r1
 800cd7e:	d009      	beq.n	800cd94 <__gethex+0x1f8>
 800cd80:	4553      	cmp	r3, sl
 800cd82:	dd05      	ble.n	800cd90 <__gethex+0x1f4>
 800cd84:	1eb9      	subs	r1, r7, #2
 800cd86:	4620      	mov	r0, r4
 800cd88:	f000 fed9 	bl	800db3e <__any_on>
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d145      	bne.n	800ce1c <__gethex+0x280>
 800cd90:	f04f 0a02 	mov.w	sl, #2
 800cd94:	4639      	mov	r1, r7
 800cd96:	4620      	mov	r0, r4
 800cd98:	f7ff fe98 	bl	800cacc <rshift>
 800cd9c:	443d      	add	r5, r7
 800cd9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cda2:	42ab      	cmp	r3, r5
 800cda4:	da4c      	bge.n	800ce40 <__gethex+0x2a4>
 800cda6:	ee18 0a10 	vmov	r0, s16
 800cdaa:	4621      	mov	r1, r4
 800cdac:	f000 fa6a 	bl	800d284 <_Bfree>
 800cdb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	6013      	str	r3, [r2, #0]
 800cdb6:	27a3      	movs	r7, #163	; 0xa3
 800cdb8:	e785      	b.n	800ccc6 <__gethex+0x12a>
 800cdba:	1e73      	subs	r3, r6, #1
 800cdbc:	9a05      	ldr	r2, [sp, #20]
 800cdbe:	9303      	str	r3, [sp, #12]
 800cdc0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d019      	beq.n	800cdfc <__gethex+0x260>
 800cdc8:	f1bb 0f20 	cmp.w	fp, #32
 800cdcc:	d107      	bne.n	800cdde <__gethex+0x242>
 800cdce:	9b02      	ldr	r3, [sp, #8]
 800cdd0:	9a00      	ldr	r2, [sp, #0]
 800cdd2:	f843 2b04 	str.w	r2, [r3], #4
 800cdd6:	9302      	str	r3, [sp, #8]
 800cdd8:	2300      	movs	r3, #0
 800cdda:	9300      	str	r3, [sp, #0]
 800cddc:	469b      	mov	fp, r3
 800cdde:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cde2:	f7ff fec5 	bl	800cb70 <__hexdig_fun>
 800cde6:	9b00      	ldr	r3, [sp, #0]
 800cde8:	f000 000f 	and.w	r0, r0, #15
 800cdec:	fa00 f00b 	lsl.w	r0, r0, fp
 800cdf0:	4303      	orrs	r3, r0
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	f10b 0b04 	add.w	fp, fp, #4
 800cdf8:	9b03      	ldr	r3, [sp, #12]
 800cdfa:	e00d      	b.n	800ce18 <__gethex+0x27c>
 800cdfc:	9b03      	ldr	r3, [sp, #12]
 800cdfe:	9a06      	ldr	r2, [sp, #24]
 800ce00:	4413      	add	r3, r2
 800ce02:	42bb      	cmp	r3, r7
 800ce04:	d3e0      	bcc.n	800cdc8 <__gethex+0x22c>
 800ce06:	4618      	mov	r0, r3
 800ce08:	9901      	ldr	r1, [sp, #4]
 800ce0a:	9307      	str	r3, [sp, #28]
 800ce0c:	4652      	mov	r2, sl
 800ce0e:	f001 f923 	bl	800e058 <strncmp>
 800ce12:	9b07      	ldr	r3, [sp, #28]
 800ce14:	2800      	cmp	r0, #0
 800ce16:	d1d7      	bne.n	800cdc8 <__gethex+0x22c>
 800ce18:	461e      	mov	r6, r3
 800ce1a:	e78b      	b.n	800cd34 <__gethex+0x198>
 800ce1c:	f04f 0a03 	mov.w	sl, #3
 800ce20:	e7b8      	b.n	800cd94 <__gethex+0x1f8>
 800ce22:	da0a      	bge.n	800ce3a <__gethex+0x29e>
 800ce24:	1a37      	subs	r7, r6, r0
 800ce26:	4621      	mov	r1, r4
 800ce28:	ee18 0a10 	vmov	r0, s16
 800ce2c:	463a      	mov	r2, r7
 800ce2e:	f000 fc45 	bl	800d6bc <__lshift>
 800ce32:	1bed      	subs	r5, r5, r7
 800ce34:	4604      	mov	r4, r0
 800ce36:	f100 0914 	add.w	r9, r0, #20
 800ce3a:	f04f 0a00 	mov.w	sl, #0
 800ce3e:	e7ae      	b.n	800cd9e <__gethex+0x202>
 800ce40:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ce44:	42a8      	cmp	r0, r5
 800ce46:	dd72      	ble.n	800cf2e <__gethex+0x392>
 800ce48:	1b45      	subs	r5, r0, r5
 800ce4a:	42ae      	cmp	r6, r5
 800ce4c:	dc36      	bgt.n	800cebc <__gethex+0x320>
 800ce4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce52:	2b02      	cmp	r3, #2
 800ce54:	d02a      	beq.n	800ceac <__gethex+0x310>
 800ce56:	2b03      	cmp	r3, #3
 800ce58:	d02c      	beq.n	800ceb4 <__gethex+0x318>
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d11c      	bne.n	800ce98 <__gethex+0x2fc>
 800ce5e:	42ae      	cmp	r6, r5
 800ce60:	d11a      	bne.n	800ce98 <__gethex+0x2fc>
 800ce62:	2e01      	cmp	r6, #1
 800ce64:	d112      	bne.n	800ce8c <__gethex+0x2f0>
 800ce66:	9a04      	ldr	r2, [sp, #16]
 800ce68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce6c:	6013      	str	r3, [r2, #0]
 800ce6e:	2301      	movs	r3, #1
 800ce70:	6123      	str	r3, [r4, #16]
 800ce72:	f8c9 3000 	str.w	r3, [r9]
 800ce76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce78:	2762      	movs	r7, #98	; 0x62
 800ce7a:	601c      	str	r4, [r3, #0]
 800ce7c:	e723      	b.n	800ccc6 <__gethex+0x12a>
 800ce7e:	bf00      	nop
 800ce80:	0800f3c0 	.word	0x0800f3c0
 800ce84:	0800f348 	.word	0x0800f348
 800ce88:	0800f359 	.word	0x0800f359
 800ce8c:	1e71      	subs	r1, r6, #1
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f000 fe55 	bl	800db3e <__any_on>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d1e6      	bne.n	800ce66 <__gethex+0x2ca>
 800ce98:	ee18 0a10 	vmov	r0, s16
 800ce9c:	4621      	mov	r1, r4
 800ce9e:	f000 f9f1 	bl	800d284 <_Bfree>
 800cea2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cea4:	2300      	movs	r3, #0
 800cea6:	6013      	str	r3, [r2, #0]
 800cea8:	2750      	movs	r7, #80	; 0x50
 800ceaa:	e70c      	b.n	800ccc6 <__gethex+0x12a>
 800ceac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d1f2      	bne.n	800ce98 <__gethex+0x2fc>
 800ceb2:	e7d8      	b.n	800ce66 <__gethex+0x2ca>
 800ceb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d1d5      	bne.n	800ce66 <__gethex+0x2ca>
 800ceba:	e7ed      	b.n	800ce98 <__gethex+0x2fc>
 800cebc:	1e6f      	subs	r7, r5, #1
 800cebe:	f1ba 0f00 	cmp.w	sl, #0
 800cec2:	d131      	bne.n	800cf28 <__gethex+0x38c>
 800cec4:	b127      	cbz	r7, 800ced0 <__gethex+0x334>
 800cec6:	4639      	mov	r1, r7
 800cec8:	4620      	mov	r0, r4
 800ceca:	f000 fe38 	bl	800db3e <__any_on>
 800cece:	4682      	mov	sl, r0
 800ced0:	117b      	asrs	r3, r7, #5
 800ced2:	2101      	movs	r1, #1
 800ced4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ced8:	f007 071f 	and.w	r7, r7, #31
 800cedc:	fa01 f707 	lsl.w	r7, r1, r7
 800cee0:	421f      	tst	r7, r3
 800cee2:	4629      	mov	r1, r5
 800cee4:	4620      	mov	r0, r4
 800cee6:	bf18      	it	ne
 800cee8:	f04a 0a02 	orrne.w	sl, sl, #2
 800ceec:	1b76      	subs	r6, r6, r5
 800ceee:	f7ff fded 	bl	800cacc <rshift>
 800cef2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cef6:	2702      	movs	r7, #2
 800cef8:	f1ba 0f00 	cmp.w	sl, #0
 800cefc:	d048      	beq.n	800cf90 <__gethex+0x3f4>
 800cefe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d015      	beq.n	800cf32 <__gethex+0x396>
 800cf06:	2b03      	cmp	r3, #3
 800cf08:	d017      	beq.n	800cf3a <__gethex+0x39e>
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d109      	bne.n	800cf22 <__gethex+0x386>
 800cf0e:	f01a 0f02 	tst.w	sl, #2
 800cf12:	d006      	beq.n	800cf22 <__gethex+0x386>
 800cf14:	f8d9 0000 	ldr.w	r0, [r9]
 800cf18:	ea4a 0a00 	orr.w	sl, sl, r0
 800cf1c:	f01a 0f01 	tst.w	sl, #1
 800cf20:	d10e      	bne.n	800cf40 <__gethex+0x3a4>
 800cf22:	f047 0710 	orr.w	r7, r7, #16
 800cf26:	e033      	b.n	800cf90 <__gethex+0x3f4>
 800cf28:	f04f 0a01 	mov.w	sl, #1
 800cf2c:	e7d0      	b.n	800ced0 <__gethex+0x334>
 800cf2e:	2701      	movs	r7, #1
 800cf30:	e7e2      	b.n	800cef8 <__gethex+0x35c>
 800cf32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf34:	f1c3 0301 	rsb	r3, r3, #1
 800cf38:	9315      	str	r3, [sp, #84]	; 0x54
 800cf3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d0f0      	beq.n	800cf22 <__gethex+0x386>
 800cf40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cf44:	f104 0314 	add.w	r3, r4, #20
 800cf48:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cf4c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cf50:	f04f 0c00 	mov.w	ip, #0
 800cf54:	4618      	mov	r0, r3
 800cf56:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf5a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cf5e:	d01c      	beq.n	800cf9a <__gethex+0x3fe>
 800cf60:	3201      	adds	r2, #1
 800cf62:	6002      	str	r2, [r0, #0]
 800cf64:	2f02      	cmp	r7, #2
 800cf66:	f104 0314 	add.w	r3, r4, #20
 800cf6a:	d13f      	bne.n	800cfec <__gethex+0x450>
 800cf6c:	f8d8 2000 	ldr.w	r2, [r8]
 800cf70:	3a01      	subs	r2, #1
 800cf72:	42b2      	cmp	r2, r6
 800cf74:	d10a      	bne.n	800cf8c <__gethex+0x3f0>
 800cf76:	1171      	asrs	r1, r6, #5
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf7e:	f006 061f 	and.w	r6, r6, #31
 800cf82:	fa02 f606 	lsl.w	r6, r2, r6
 800cf86:	421e      	tst	r6, r3
 800cf88:	bf18      	it	ne
 800cf8a:	4617      	movne	r7, r2
 800cf8c:	f047 0720 	orr.w	r7, r7, #32
 800cf90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf92:	601c      	str	r4, [r3, #0]
 800cf94:	9b04      	ldr	r3, [sp, #16]
 800cf96:	601d      	str	r5, [r3, #0]
 800cf98:	e695      	b.n	800ccc6 <__gethex+0x12a>
 800cf9a:	4299      	cmp	r1, r3
 800cf9c:	f843 cc04 	str.w	ip, [r3, #-4]
 800cfa0:	d8d8      	bhi.n	800cf54 <__gethex+0x3b8>
 800cfa2:	68a3      	ldr	r3, [r4, #8]
 800cfa4:	459b      	cmp	fp, r3
 800cfa6:	db19      	blt.n	800cfdc <__gethex+0x440>
 800cfa8:	6861      	ldr	r1, [r4, #4]
 800cfaa:	ee18 0a10 	vmov	r0, s16
 800cfae:	3101      	adds	r1, #1
 800cfb0:	f000 f928 	bl	800d204 <_Balloc>
 800cfb4:	4681      	mov	r9, r0
 800cfb6:	b918      	cbnz	r0, 800cfc0 <__gethex+0x424>
 800cfb8:	4b1a      	ldr	r3, [pc, #104]	; (800d024 <__gethex+0x488>)
 800cfba:	4602      	mov	r2, r0
 800cfbc:	2184      	movs	r1, #132	; 0x84
 800cfbe:	e6a8      	b.n	800cd12 <__gethex+0x176>
 800cfc0:	6922      	ldr	r2, [r4, #16]
 800cfc2:	3202      	adds	r2, #2
 800cfc4:	f104 010c 	add.w	r1, r4, #12
 800cfc8:	0092      	lsls	r2, r2, #2
 800cfca:	300c      	adds	r0, #12
 800cfcc:	f000 f90c 	bl	800d1e8 <memcpy>
 800cfd0:	4621      	mov	r1, r4
 800cfd2:	ee18 0a10 	vmov	r0, s16
 800cfd6:	f000 f955 	bl	800d284 <_Bfree>
 800cfda:	464c      	mov	r4, r9
 800cfdc:	6923      	ldr	r3, [r4, #16]
 800cfde:	1c5a      	adds	r2, r3, #1
 800cfe0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cfe4:	6122      	str	r2, [r4, #16]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	615a      	str	r2, [r3, #20]
 800cfea:	e7bb      	b.n	800cf64 <__gethex+0x3c8>
 800cfec:	6922      	ldr	r2, [r4, #16]
 800cfee:	455a      	cmp	r2, fp
 800cff0:	dd0b      	ble.n	800d00a <__gethex+0x46e>
 800cff2:	2101      	movs	r1, #1
 800cff4:	4620      	mov	r0, r4
 800cff6:	f7ff fd69 	bl	800cacc <rshift>
 800cffa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cffe:	3501      	adds	r5, #1
 800d000:	42ab      	cmp	r3, r5
 800d002:	f6ff aed0 	blt.w	800cda6 <__gethex+0x20a>
 800d006:	2701      	movs	r7, #1
 800d008:	e7c0      	b.n	800cf8c <__gethex+0x3f0>
 800d00a:	f016 061f 	ands.w	r6, r6, #31
 800d00e:	d0fa      	beq.n	800d006 <__gethex+0x46a>
 800d010:	4453      	add	r3, sl
 800d012:	f1c6 0620 	rsb	r6, r6, #32
 800d016:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d01a:	f000 f9e5 	bl	800d3e8 <__hi0bits>
 800d01e:	42b0      	cmp	r0, r6
 800d020:	dbe7      	blt.n	800cff2 <__gethex+0x456>
 800d022:	e7f0      	b.n	800d006 <__gethex+0x46a>
 800d024:	0800f348 	.word	0x0800f348

0800d028 <L_shift>:
 800d028:	f1c2 0208 	rsb	r2, r2, #8
 800d02c:	0092      	lsls	r2, r2, #2
 800d02e:	b570      	push	{r4, r5, r6, lr}
 800d030:	f1c2 0620 	rsb	r6, r2, #32
 800d034:	6843      	ldr	r3, [r0, #4]
 800d036:	6804      	ldr	r4, [r0, #0]
 800d038:	fa03 f506 	lsl.w	r5, r3, r6
 800d03c:	432c      	orrs	r4, r5
 800d03e:	40d3      	lsrs	r3, r2
 800d040:	6004      	str	r4, [r0, #0]
 800d042:	f840 3f04 	str.w	r3, [r0, #4]!
 800d046:	4288      	cmp	r0, r1
 800d048:	d3f4      	bcc.n	800d034 <L_shift+0xc>
 800d04a:	bd70      	pop	{r4, r5, r6, pc}

0800d04c <__match>:
 800d04c:	b530      	push	{r4, r5, lr}
 800d04e:	6803      	ldr	r3, [r0, #0]
 800d050:	3301      	adds	r3, #1
 800d052:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d056:	b914      	cbnz	r4, 800d05e <__match+0x12>
 800d058:	6003      	str	r3, [r0, #0]
 800d05a:	2001      	movs	r0, #1
 800d05c:	bd30      	pop	{r4, r5, pc}
 800d05e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d062:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d066:	2d19      	cmp	r5, #25
 800d068:	bf98      	it	ls
 800d06a:	3220      	addls	r2, #32
 800d06c:	42a2      	cmp	r2, r4
 800d06e:	d0f0      	beq.n	800d052 <__match+0x6>
 800d070:	2000      	movs	r0, #0
 800d072:	e7f3      	b.n	800d05c <__match+0x10>

0800d074 <__hexnan>:
 800d074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d078:	680b      	ldr	r3, [r1, #0]
 800d07a:	115e      	asrs	r6, r3, #5
 800d07c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d080:	f013 031f 	ands.w	r3, r3, #31
 800d084:	b087      	sub	sp, #28
 800d086:	bf18      	it	ne
 800d088:	3604      	addne	r6, #4
 800d08a:	2500      	movs	r5, #0
 800d08c:	1f37      	subs	r7, r6, #4
 800d08e:	4690      	mov	r8, r2
 800d090:	6802      	ldr	r2, [r0, #0]
 800d092:	9301      	str	r3, [sp, #4]
 800d094:	4682      	mov	sl, r0
 800d096:	f846 5c04 	str.w	r5, [r6, #-4]
 800d09a:	46b9      	mov	r9, r7
 800d09c:	463c      	mov	r4, r7
 800d09e:	9502      	str	r5, [sp, #8]
 800d0a0:	46ab      	mov	fp, r5
 800d0a2:	7851      	ldrb	r1, [r2, #1]
 800d0a4:	1c53      	adds	r3, r2, #1
 800d0a6:	9303      	str	r3, [sp, #12]
 800d0a8:	b341      	cbz	r1, 800d0fc <__hexnan+0x88>
 800d0aa:	4608      	mov	r0, r1
 800d0ac:	9205      	str	r2, [sp, #20]
 800d0ae:	9104      	str	r1, [sp, #16]
 800d0b0:	f7ff fd5e 	bl	800cb70 <__hexdig_fun>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	d14f      	bne.n	800d158 <__hexnan+0xe4>
 800d0b8:	9904      	ldr	r1, [sp, #16]
 800d0ba:	9a05      	ldr	r2, [sp, #20]
 800d0bc:	2920      	cmp	r1, #32
 800d0be:	d818      	bhi.n	800d0f2 <__hexnan+0x7e>
 800d0c0:	9b02      	ldr	r3, [sp, #8]
 800d0c2:	459b      	cmp	fp, r3
 800d0c4:	dd13      	ble.n	800d0ee <__hexnan+0x7a>
 800d0c6:	454c      	cmp	r4, r9
 800d0c8:	d206      	bcs.n	800d0d8 <__hexnan+0x64>
 800d0ca:	2d07      	cmp	r5, #7
 800d0cc:	dc04      	bgt.n	800d0d8 <__hexnan+0x64>
 800d0ce:	462a      	mov	r2, r5
 800d0d0:	4649      	mov	r1, r9
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	f7ff ffa8 	bl	800d028 <L_shift>
 800d0d8:	4544      	cmp	r4, r8
 800d0da:	d950      	bls.n	800d17e <__hexnan+0x10a>
 800d0dc:	2300      	movs	r3, #0
 800d0de:	f1a4 0904 	sub.w	r9, r4, #4
 800d0e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0e6:	f8cd b008 	str.w	fp, [sp, #8]
 800d0ea:	464c      	mov	r4, r9
 800d0ec:	461d      	mov	r5, r3
 800d0ee:	9a03      	ldr	r2, [sp, #12]
 800d0f0:	e7d7      	b.n	800d0a2 <__hexnan+0x2e>
 800d0f2:	2929      	cmp	r1, #41	; 0x29
 800d0f4:	d156      	bne.n	800d1a4 <__hexnan+0x130>
 800d0f6:	3202      	adds	r2, #2
 800d0f8:	f8ca 2000 	str.w	r2, [sl]
 800d0fc:	f1bb 0f00 	cmp.w	fp, #0
 800d100:	d050      	beq.n	800d1a4 <__hexnan+0x130>
 800d102:	454c      	cmp	r4, r9
 800d104:	d206      	bcs.n	800d114 <__hexnan+0xa0>
 800d106:	2d07      	cmp	r5, #7
 800d108:	dc04      	bgt.n	800d114 <__hexnan+0xa0>
 800d10a:	462a      	mov	r2, r5
 800d10c:	4649      	mov	r1, r9
 800d10e:	4620      	mov	r0, r4
 800d110:	f7ff ff8a 	bl	800d028 <L_shift>
 800d114:	4544      	cmp	r4, r8
 800d116:	d934      	bls.n	800d182 <__hexnan+0x10e>
 800d118:	f1a8 0204 	sub.w	r2, r8, #4
 800d11c:	4623      	mov	r3, r4
 800d11e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d122:	f842 1f04 	str.w	r1, [r2, #4]!
 800d126:	429f      	cmp	r7, r3
 800d128:	d2f9      	bcs.n	800d11e <__hexnan+0xaa>
 800d12a:	1b3b      	subs	r3, r7, r4
 800d12c:	f023 0303 	bic.w	r3, r3, #3
 800d130:	3304      	adds	r3, #4
 800d132:	3401      	adds	r4, #1
 800d134:	3e03      	subs	r6, #3
 800d136:	42b4      	cmp	r4, r6
 800d138:	bf88      	it	hi
 800d13a:	2304      	movhi	r3, #4
 800d13c:	4443      	add	r3, r8
 800d13e:	2200      	movs	r2, #0
 800d140:	f843 2b04 	str.w	r2, [r3], #4
 800d144:	429f      	cmp	r7, r3
 800d146:	d2fb      	bcs.n	800d140 <__hexnan+0xcc>
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	b91b      	cbnz	r3, 800d154 <__hexnan+0xe0>
 800d14c:	4547      	cmp	r7, r8
 800d14e:	d127      	bne.n	800d1a0 <__hexnan+0x12c>
 800d150:	2301      	movs	r3, #1
 800d152:	603b      	str	r3, [r7, #0]
 800d154:	2005      	movs	r0, #5
 800d156:	e026      	b.n	800d1a6 <__hexnan+0x132>
 800d158:	3501      	adds	r5, #1
 800d15a:	2d08      	cmp	r5, #8
 800d15c:	f10b 0b01 	add.w	fp, fp, #1
 800d160:	dd06      	ble.n	800d170 <__hexnan+0xfc>
 800d162:	4544      	cmp	r4, r8
 800d164:	d9c3      	bls.n	800d0ee <__hexnan+0x7a>
 800d166:	2300      	movs	r3, #0
 800d168:	f844 3c04 	str.w	r3, [r4, #-4]
 800d16c:	2501      	movs	r5, #1
 800d16e:	3c04      	subs	r4, #4
 800d170:	6822      	ldr	r2, [r4, #0]
 800d172:	f000 000f 	and.w	r0, r0, #15
 800d176:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d17a:	6022      	str	r2, [r4, #0]
 800d17c:	e7b7      	b.n	800d0ee <__hexnan+0x7a>
 800d17e:	2508      	movs	r5, #8
 800d180:	e7b5      	b.n	800d0ee <__hexnan+0x7a>
 800d182:	9b01      	ldr	r3, [sp, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d0df      	beq.n	800d148 <__hexnan+0xd4>
 800d188:	f04f 32ff 	mov.w	r2, #4294967295
 800d18c:	f1c3 0320 	rsb	r3, r3, #32
 800d190:	fa22 f303 	lsr.w	r3, r2, r3
 800d194:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d198:	401a      	ands	r2, r3
 800d19a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d19e:	e7d3      	b.n	800d148 <__hexnan+0xd4>
 800d1a0:	3f04      	subs	r7, #4
 800d1a2:	e7d1      	b.n	800d148 <__hexnan+0xd4>
 800d1a4:	2004      	movs	r0, #4
 800d1a6:	b007      	add	sp, #28
 800d1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1ac <_localeconv_r>:
 800d1ac:	4800      	ldr	r0, [pc, #0]	; (800d1b0 <_localeconv_r+0x4>)
 800d1ae:	4770      	bx	lr
 800d1b0:	2000017c 	.word	0x2000017c

0800d1b4 <malloc>:
 800d1b4:	4b02      	ldr	r3, [pc, #8]	; (800d1c0 <malloc+0xc>)
 800d1b6:	4601      	mov	r1, r0
 800d1b8:	6818      	ldr	r0, [r3, #0]
 800d1ba:	f000 bd63 	b.w	800dc84 <_malloc_r>
 800d1be:	bf00      	nop
 800d1c0:	20000024 	.word	0x20000024

0800d1c4 <__ascii_mbtowc>:
 800d1c4:	b082      	sub	sp, #8
 800d1c6:	b901      	cbnz	r1, 800d1ca <__ascii_mbtowc+0x6>
 800d1c8:	a901      	add	r1, sp, #4
 800d1ca:	b142      	cbz	r2, 800d1de <__ascii_mbtowc+0x1a>
 800d1cc:	b14b      	cbz	r3, 800d1e2 <__ascii_mbtowc+0x1e>
 800d1ce:	7813      	ldrb	r3, [r2, #0]
 800d1d0:	600b      	str	r3, [r1, #0]
 800d1d2:	7812      	ldrb	r2, [r2, #0]
 800d1d4:	1e10      	subs	r0, r2, #0
 800d1d6:	bf18      	it	ne
 800d1d8:	2001      	movne	r0, #1
 800d1da:	b002      	add	sp, #8
 800d1dc:	4770      	bx	lr
 800d1de:	4610      	mov	r0, r2
 800d1e0:	e7fb      	b.n	800d1da <__ascii_mbtowc+0x16>
 800d1e2:	f06f 0001 	mvn.w	r0, #1
 800d1e6:	e7f8      	b.n	800d1da <__ascii_mbtowc+0x16>

0800d1e8 <memcpy>:
 800d1e8:	440a      	add	r2, r1
 800d1ea:	4291      	cmp	r1, r2
 800d1ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1f0:	d100      	bne.n	800d1f4 <memcpy+0xc>
 800d1f2:	4770      	bx	lr
 800d1f4:	b510      	push	{r4, lr}
 800d1f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1fe:	4291      	cmp	r1, r2
 800d200:	d1f9      	bne.n	800d1f6 <memcpy+0xe>
 800d202:	bd10      	pop	{r4, pc}

0800d204 <_Balloc>:
 800d204:	b570      	push	{r4, r5, r6, lr}
 800d206:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d208:	4604      	mov	r4, r0
 800d20a:	460d      	mov	r5, r1
 800d20c:	b976      	cbnz	r6, 800d22c <_Balloc+0x28>
 800d20e:	2010      	movs	r0, #16
 800d210:	f7ff ffd0 	bl	800d1b4 <malloc>
 800d214:	4602      	mov	r2, r0
 800d216:	6260      	str	r0, [r4, #36]	; 0x24
 800d218:	b920      	cbnz	r0, 800d224 <_Balloc+0x20>
 800d21a:	4b18      	ldr	r3, [pc, #96]	; (800d27c <_Balloc+0x78>)
 800d21c:	4818      	ldr	r0, [pc, #96]	; (800d280 <_Balloc+0x7c>)
 800d21e:	2166      	movs	r1, #102	; 0x66
 800d220:	f000 ff3c 	bl	800e09c <__assert_func>
 800d224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d228:	6006      	str	r6, [r0, #0]
 800d22a:	60c6      	str	r6, [r0, #12]
 800d22c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d22e:	68f3      	ldr	r3, [r6, #12]
 800d230:	b183      	cbz	r3, 800d254 <_Balloc+0x50>
 800d232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d234:	68db      	ldr	r3, [r3, #12]
 800d236:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d23a:	b9b8      	cbnz	r0, 800d26c <_Balloc+0x68>
 800d23c:	2101      	movs	r1, #1
 800d23e:	fa01 f605 	lsl.w	r6, r1, r5
 800d242:	1d72      	adds	r2, r6, #5
 800d244:	0092      	lsls	r2, r2, #2
 800d246:	4620      	mov	r0, r4
 800d248:	f000 fc9a 	bl	800db80 <_calloc_r>
 800d24c:	b160      	cbz	r0, 800d268 <_Balloc+0x64>
 800d24e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d252:	e00e      	b.n	800d272 <_Balloc+0x6e>
 800d254:	2221      	movs	r2, #33	; 0x21
 800d256:	2104      	movs	r1, #4
 800d258:	4620      	mov	r0, r4
 800d25a:	f000 fc91 	bl	800db80 <_calloc_r>
 800d25e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d260:	60f0      	str	r0, [r6, #12]
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d1e4      	bne.n	800d232 <_Balloc+0x2e>
 800d268:	2000      	movs	r0, #0
 800d26a:	bd70      	pop	{r4, r5, r6, pc}
 800d26c:	6802      	ldr	r2, [r0, #0]
 800d26e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d272:	2300      	movs	r3, #0
 800d274:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d278:	e7f7      	b.n	800d26a <_Balloc+0x66>
 800d27a:	bf00      	nop
 800d27c:	0800f2d6 	.word	0x0800f2d6
 800d280:	0800f3d4 	.word	0x0800f3d4

0800d284 <_Bfree>:
 800d284:	b570      	push	{r4, r5, r6, lr}
 800d286:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d288:	4605      	mov	r5, r0
 800d28a:	460c      	mov	r4, r1
 800d28c:	b976      	cbnz	r6, 800d2ac <_Bfree+0x28>
 800d28e:	2010      	movs	r0, #16
 800d290:	f7ff ff90 	bl	800d1b4 <malloc>
 800d294:	4602      	mov	r2, r0
 800d296:	6268      	str	r0, [r5, #36]	; 0x24
 800d298:	b920      	cbnz	r0, 800d2a4 <_Bfree+0x20>
 800d29a:	4b09      	ldr	r3, [pc, #36]	; (800d2c0 <_Bfree+0x3c>)
 800d29c:	4809      	ldr	r0, [pc, #36]	; (800d2c4 <_Bfree+0x40>)
 800d29e:	218a      	movs	r1, #138	; 0x8a
 800d2a0:	f000 fefc 	bl	800e09c <__assert_func>
 800d2a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2a8:	6006      	str	r6, [r0, #0]
 800d2aa:	60c6      	str	r6, [r0, #12]
 800d2ac:	b13c      	cbz	r4, 800d2be <_Bfree+0x3a>
 800d2ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d2b0:	6862      	ldr	r2, [r4, #4]
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d2b8:	6021      	str	r1, [r4, #0]
 800d2ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d2be:	bd70      	pop	{r4, r5, r6, pc}
 800d2c0:	0800f2d6 	.word	0x0800f2d6
 800d2c4:	0800f3d4 	.word	0x0800f3d4

0800d2c8 <__multadd>:
 800d2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2cc:	690d      	ldr	r5, [r1, #16]
 800d2ce:	4607      	mov	r7, r0
 800d2d0:	460c      	mov	r4, r1
 800d2d2:	461e      	mov	r6, r3
 800d2d4:	f101 0c14 	add.w	ip, r1, #20
 800d2d8:	2000      	movs	r0, #0
 800d2da:	f8dc 3000 	ldr.w	r3, [ip]
 800d2de:	b299      	uxth	r1, r3
 800d2e0:	fb02 6101 	mla	r1, r2, r1, r6
 800d2e4:	0c1e      	lsrs	r6, r3, #16
 800d2e6:	0c0b      	lsrs	r3, r1, #16
 800d2e8:	fb02 3306 	mla	r3, r2, r6, r3
 800d2ec:	b289      	uxth	r1, r1
 800d2ee:	3001      	adds	r0, #1
 800d2f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d2f4:	4285      	cmp	r5, r0
 800d2f6:	f84c 1b04 	str.w	r1, [ip], #4
 800d2fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d2fe:	dcec      	bgt.n	800d2da <__multadd+0x12>
 800d300:	b30e      	cbz	r6, 800d346 <__multadd+0x7e>
 800d302:	68a3      	ldr	r3, [r4, #8]
 800d304:	42ab      	cmp	r3, r5
 800d306:	dc19      	bgt.n	800d33c <__multadd+0x74>
 800d308:	6861      	ldr	r1, [r4, #4]
 800d30a:	4638      	mov	r0, r7
 800d30c:	3101      	adds	r1, #1
 800d30e:	f7ff ff79 	bl	800d204 <_Balloc>
 800d312:	4680      	mov	r8, r0
 800d314:	b928      	cbnz	r0, 800d322 <__multadd+0x5a>
 800d316:	4602      	mov	r2, r0
 800d318:	4b0c      	ldr	r3, [pc, #48]	; (800d34c <__multadd+0x84>)
 800d31a:	480d      	ldr	r0, [pc, #52]	; (800d350 <__multadd+0x88>)
 800d31c:	21b5      	movs	r1, #181	; 0xb5
 800d31e:	f000 febd 	bl	800e09c <__assert_func>
 800d322:	6922      	ldr	r2, [r4, #16]
 800d324:	3202      	adds	r2, #2
 800d326:	f104 010c 	add.w	r1, r4, #12
 800d32a:	0092      	lsls	r2, r2, #2
 800d32c:	300c      	adds	r0, #12
 800d32e:	f7ff ff5b 	bl	800d1e8 <memcpy>
 800d332:	4621      	mov	r1, r4
 800d334:	4638      	mov	r0, r7
 800d336:	f7ff ffa5 	bl	800d284 <_Bfree>
 800d33a:	4644      	mov	r4, r8
 800d33c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d340:	3501      	adds	r5, #1
 800d342:	615e      	str	r6, [r3, #20]
 800d344:	6125      	str	r5, [r4, #16]
 800d346:	4620      	mov	r0, r4
 800d348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d34c:	0800f348 	.word	0x0800f348
 800d350:	0800f3d4 	.word	0x0800f3d4

0800d354 <__s2b>:
 800d354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d358:	460c      	mov	r4, r1
 800d35a:	4615      	mov	r5, r2
 800d35c:	461f      	mov	r7, r3
 800d35e:	2209      	movs	r2, #9
 800d360:	3308      	adds	r3, #8
 800d362:	4606      	mov	r6, r0
 800d364:	fb93 f3f2 	sdiv	r3, r3, r2
 800d368:	2100      	movs	r1, #0
 800d36a:	2201      	movs	r2, #1
 800d36c:	429a      	cmp	r2, r3
 800d36e:	db09      	blt.n	800d384 <__s2b+0x30>
 800d370:	4630      	mov	r0, r6
 800d372:	f7ff ff47 	bl	800d204 <_Balloc>
 800d376:	b940      	cbnz	r0, 800d38a <__s2b+0x36>
 800d378:	4602      	mov	r2, r0
 800d37a:	4b19      	ldr	r3, [pc, #100]	; (800d3e0 <__s2b+0x8c>)
 800d37c:	4819      	ldr	r0, [pc, #100]	; (800d3e4 <__s2b+0x90>)
 800d37e:	21ce      	movs	r1, #206	; 0xce
 800d380:	f000 fe8c 	bl	800e09c <__assert_func>
 800d384:	0052      	lsls	r2, r2, #1
 800d386:	3101      	adds	r1, #1
 800d388:	e7f0      	b.n	800d36c <__s2b+0x18>
 800d38a:	9b08      	ldr	r3, [sp, #32]
 800d38c:	6143      	str	r3, [r0, #20]
 800d38e:	2d09      	cmp	r5, #9
 800d390:	f04f 0301 	mov.w	r3, #1
 800d394:	6103      	str	r3, [r0, #16]
 800d396:	dd16      	ble.n	800d3c6 <__s2b+0x72>
 800d398:	f104 0909 	add.w	r9, r4, #9
 800d39c:	46c8      	mov	r8, r9
 800d39e:	442c      	add	r4, r5
 800d3a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d3a4:	4601      	mov	r1, r0
 800d3a6:	3b30      	subs	r3, #48	; 0x30
 800d3a8:	220a      	movs	r2, #10
 800d3aa:	4630      	mov	r0, r6
 800d3ac:	f7ff ff8c 	bl	800d2c8 <__multadd>
 800d3b0:	45a0      	cmp	r8, r4
 800d3b2:	d1f5      	bne.n	800d3a0 <__s2b+0x4c>
 800d3b4:	f1a5 0408 	sub.w	r4, r5, #8
 800d3b8:	444c      	add	r4, r9
 800d3ba:	1b2d      	subs	r5, r5, r4
 800d3bc:	1963      	adds	r3, r4, r5
 800d3be:	42bb      	cmp	r3, r7
 800d3c0:	db04      	blt.n	800d3cc <__s2b+0x78>
 800d3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3c6:	340a      	adds	r4, #10
 800d3c8:	2509      	movs	r5, #9
 800d3ca:	e7f6      	b.n	800d3ba <__s2b+0x66>
 800d3cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d3d0:	4601      	mov	r1, r0
 800d3d2:	3b30      	subs	r3, #48	; 0x30
 800d3d4:	220a      	movs	r2, #10
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	f7ff ff76 	bl	800d2c8 <__multadd>
 800d3dc:	e7ee      	b.n	800d3bc <__s2b+0x68>
 800d3de:	bf00      	nop
 800d3e0:	0800f348 	.word	0x0800f348
 800d3e4:	0800f3d4 	.word	0x0800f3d4

0800d3e8 <__hi0bits>:
 800d3e8:	0c03      	lsrs	r3, r0, #16
 800d3ea:	041b      	lsls	r3, r3, #16
 800d3ec:	b9d3      	cbnz	r3, 800d424 <__hi0bits+0x3c>
 800d3ee:	0400      	lsls	r0, r0, #16
 800d3f0:	2310      	movs	r3, #16
 800d3f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d3f6:	bf04      	itt	eq
 800d3f8:	0200      	lsleq	r0, r0, #8
 800d3fa:	3308      	addeq	r3, #8
 800d3fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d400:	bf04      	itt	eq
 800d402:	0100      	lsleq	r0, r0, #4
 800d404:	3304      	addeq	r3, #4
 800d406:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d40a:	bf04      	itt	eq
 800d40c:	0080      	lsleq	r0, r0, #2
 800d40e:	3302      	addeq	r3, #2
 800d410:	2800      	cmp	r0, #0
 800d412:	db05      	blt.n	800d420 <__hi0bits+0x38>
 800d414:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d418:	f103 0301 	add.w	r3, r3, #1
 800d41c:	bf08      	it	eq
 800d41e:	2320      	moveq	r3, #32
 800d420:	4618      	mov	r0, r3
 800d422:	4770      	bx	lr
 800d424:	2300      	movs	r3, #0
 800d426:	e7e4      	b.n	800d3f2 <__hi0bits+0xa>

0800d428 <__lo0bits>:
 800d428:	6803      	ldr	r3, [r0, #0]
 800d42a:	f013 0207 	ands.w	r2, r3, #7
 800d42e:	4601      	mov	r1, r0
 800d430:	d00b      	beq.n	800d44a <__lo0bits+0x22>
 800d432:	07da      	lsls	r2, r3, #31
 800d434:	d423      	bmi.n	800d47e <__lo0bits+0x56>
 800d436:	0798      	lsls	r0, r3, #30
 800d438:	bf49      	itett	mi
 800d43a:	085b      	lsrmi	r3, r3, #1
 800d43c:	089b      	lsrpl	r3, r3, #2
 800d43e:	2001      	movmi	r0, #1
 800d440:	600b      	strmi	r3, [r1, #0]
 800d442:	bf5c      	itt	pl
 800d444:	600b      	strpl	r3, [r1, #0]
 800d446:	2002      	movpl	r0, #2
 800d448:	4770      	bx	lr
 800d44a:	b298      	uxth	r0, r3
 800d44c:	b9a8      	cbnz	r0, 800d47a <__lo0bits+0x52>
 800d44e:	0c1b      	lsrs	r3, r3, #16
 800d450:	2010      	movs	r0, #16
 800d452:	b2da      	uxtb	r2, r3
 800d454:	b90a      	cbnz	r2, 800d45a <__lo0bits+0x32>
 800d456:	3008      	adds	r0, #8
 800d458:	0a1b      	lsrs	r3, r3, #8
 800d45a:	071a      	lsls	r2, r3, #28
 800d45c:	bf04      	itt	eq
 800d45e:	091b      	lsreq	r3, r3, #4
 800d460:	3004      	addeq	r0, #4
 800d462:	079a      	lsls	r2, r3, #30
 800d464:	bf04      	itt	eq
 800d466:	089b      	lsreq	r3, r3, #2
 800d468:	3002      	addeq	r0, #2
 800d46a:	07da      	lsls	r2, r3, #31
 800d46c:	d403      	bmi.n	800d476 <__lo0bits+0x4e>
 800d46e:	085b      	lsrs	r3, r3, #1
 800d470:	f100 0001 	add.w	r0, r0, #1
 800d474:	d005      	beq.n	800d482 <__lo0bits+0x5a>
 800d476:	600b      	str	r3, [r1, #0]
 800d478:	4770      	bx	lr
 800d47a:	4610      	mov	r0, r2
 800d47c:	e7e9      	b.n	800d452 <__lo0bits+0x2a>
 800d47e:	2000      	movs	r0, #0
 800d480:	4770      	bx	lr
 800d482:	2020      	movs	r0, #32
 800d484:	4770      	bx	lr
	...

0800d488 <__i2b>:
 800d488:	b510      	push	{r4, lr}
 800d48a:	460c      	mov	r4, r1
 800d48c:	2101      	movs	r1, #1
 800d48e:	f7ff feb9 	bl	800d204 <_Balloc>
 800d492:	4602      	mov	r2, r0
 800d494:	b928      	cbnz	r0, 800d4a2 <__i2b+0x1a>
 800d496:	4b05      	ldr	r3, [pc, #20]	; (800d4ac <__i2b+0x24>)
 800d498:	4805      	ldr	r0, [pc, #20]	; (800d4b0 <__i2b+0x28>)
 800d49a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d49e:	f000 fdfd 	bl	800e09c <__assert_func>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	6144      	str	r4, [r0, #20]
 800d4a6:	6103      	str	r3, [r0, #16]
 800d4a8:	bd10      	pop	{r4, pc}
 800d4aa:	bf00      	nop
 800d4ac:	0800f348 	.word	0x0800f348
 800d4b0:	0800f3d4 	.word	0x0800f3d4

0800d4b4 <__multiply>:
 800d4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b8:	4691      	mov	r9, r2
 800d4ba:	690a      	ldr	r2, [r1, #16]
 800d4bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	bfb8      	it	lt
 800d4c4:	460b      	movlt	r3, r1
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	bfbc      	itt	lt
 800d4ca:	464c      	movlt	r4, r9
 800d4cc:	4699      	movlt	r9, r3
 800d4ce:	6927      	ldr	r7, [r4, #16]
 800d4d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d4d4:	68a3      	ldr	r3, [r4, #8]
 800d4d6:	6861      	ldr	r1, [r4, #4]
 800d4d8:	eb07 060a 	add.w	r6, r7, sl
 800d4dc:	42b3      	cmp	r3, r6
 800d4de:	b085      	sub	sp, #20
 800d4e0:	bfb8      	it	lt
 800d4e2:	3101      	addlt	r1, #1
 800d4e4:	f7ff fe8e 	bl	800d204 <_Balloc>
 800d4e8:	b930      	cbnz	r0, 800d4f8 <__multiply+0x44>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	4b44      	ldr	r3, [pc, #272]	; (800d600 <__multiply+0x14c>)
 800d4ee:	4845      	ldr	r0, [pc, #276]	; (800d604 <__multiply+0x150>)
 800d4f0:	f240 115d 	movw	r1, #349	; 0x15d
 800d4f4:	f000 fdd2 	bl	800e09c <__assert_func>
 800d4f8:	f100 0514 	add.w	r5, r0, #20
 800d4fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d500:	462b      	mov	r3, r5
 800d502:	2200      	movs	r2, #0
 800d504:	4543      	cmp	r3, r8
 800d506:	d321      	bcc.n	800d54c <__multiply+0x98>
 800d508:	f104 0314 	add.w	r3, r4, #20
 800d50c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d510:	f109 0314 	add.w	r3, r9, #20
 800d514:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d518:	9202      	str	r2, [sp, #8]
 800d51a:	1b3a      	subs	r2, r7, r4
 800d51c:	3a15      	subs	r2, #21
 800d51e:	f022 0203 	bic.w	r2, r2, #3
 800d522:	3204      	adds	r2, #4
 800d524:	f104 0115 	add.w	r1, r4, #21
 800d528:	428f      	cmp	r7, r1
 800d52a:	bf38      	it	cc
 800d52c:	2204      	movcc	r2, #4
 800d52e:	9201      	str	r2, [sp, #4]
 800d530:	9a02      	ldr	r2, [sp, #8]
 800d532:	9303      	str	r3, [sp, #12]
 800d534:	429a      	cmp	r2, r3
 800d536:	d80c      	bhi.n	800d552 <__multiply+0x9e>
 800d538:	2e00      	cmp	r6, #0
 800d53a:	dd03      	ble.n	800d544 <__multiply+0x90>
 800d53c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d540:	2b00      	cmp	r3, #0
 800d542:	d05a      	beq.n	800d5fa <__multiply+0x146>
 800d544:	6106      	str	r6, [r0, #16]
 800d546:	b005      	add	sp, #20
 800d548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54c:	f843 2b04 	str.w	r2, [r3], #4
 800d550:	e7d8      	b.n	800d504 <__multiply+0x50>
 800d552:	f8b3 a000 	ldrh.w	sl, [r3]
 800d556:	f1ba 0f00 	cmp.w	sl, #0
 800d55a:	d024      	beq.n	800d5a6 <__multiply+0xf2>
 800d55c:	f104 0e14 	add.w	lr, r4, #20
 800d560:	46a9      	mov	r9, r5
 800d562:	f04f 0c00 	mov.w	ip, #0
 800d566:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d56a:	f8d9 1000 	ldr.w	r1, [r9]
 800d56e:	fa1f fb82 	uxth.w	fp, r2
 800d572:	b289      	uxth	r1, r1
 800d574:	fb0a 110b 	mla	r1, sl, fp, r1
 800d578:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d57c:	f8d9 2000 	ldr.w	r2, [r9]
 800d580:	4461      	add	r1, ip
 800d582:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d586:	fb0a c20b 	mla	r2, sl, fp, ip
 800d58a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d58e:	b289      	uxth	r1, r1
 800d590:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d594:	4577      	cmp	r7, lr
 800d596:	f849 1b04 	str.w	r1, [r9], #4
 800d59a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d59e:	d8e2      	bhi.n	800d566 <__multiply+0xb2>
 800d5a0:	9a01      	ldr	r2, [sp, #4]
 800d5a2:	f845 c002 	str.w	ip, [r5, r2]
 800d5a6:	9a03      	ldr	r2, [sp, #12]
 800d5a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	f1b9 0f00 	cmp.w	r9, #0
 800d5b2:	d020      	beq.n	800d5f6 <__multiply+0x142>
 800d5b4:	6829      	ldr	r1, [r5, #0]
 800d5b6:	f104 0c14 	add.w	ip, r4, #20
 800d5ba:	46ae      	mov	lr, r5
 800d5bc:	f04f 0a00 	mov.w	sl, #0
 800d5c0:	f8bc b000 	ldrh.w	fp, [ip]
 800d5c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d5c8:	fb09 220b 	mla	r2, r9, fp, r2
 800d5cc:	4492      	add	sl, r2
 800d5ce:	b289      	uxth	r1, r1
 800d5d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d5d4:	f84e 1b04 	str.w	r1, [lr], #4
 800d5d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d5dc:	f8be 1000 	ldrh.w	r1, [lr]
 800d5e0:	0c12      	lsrs	r2, r2, #16
 800d5e2:	fb09 1102 	mla	r1, r9, r2, r1
 800d5e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d5ea:	4567      	cmp	r7, ip
 800d5ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d5f0:	d8e6      	bhi.n	800d5c0 <__multiply+0x10c>
 800d5f2:	9a01      	ldr	r2, [sp, #4]
 800d5f4:	50a9      	str	r1, [r5, r2]
 800d5f6:	3504      	adds	r5, #4
 800d5f8:	e79a      	b.n	800d530 <__multiply+0x7c>
 800d5fa:	3e01      	subs	r6, #1
 800d5fc:	e79c      	b.n	800d538 <__multiply+0x84>
 800d5fe:	bf00      	nop
 800d600:	0800f348 	.word	0x0800f348
 800d604:	0800f3d4 	.word	0x0800f3d4

0800d608 <__pow5mult>:
 800d608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d60c:	4615      	mov	r5, r2
 800d60e:	f012 0203 	ands.w	r2, r2, #3
 800d612:	4606      	mov	r6, r0
 800d614:	460f      	mov	r7, r1
 800d616:	d007      	beq.n	800d628 <__pow5mult+0x20>
 800d618:	4c25      	ldr	r4, [pc, #148]	; (800d6b0 <__pow5mult+0xa8>)
 800d61a:	3a01      	subs	r2, #1
 800d61c:	2300      	movs	r3, #0
 800d61e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d622:	f7ff fe51 	bl	800d2c8 <__multadd>
 800d626:	4607      	mov	r7, r0
 800d628:	10ad      	asrs	r5, r5, #2
 800d62a:	d03d      	beq.n	800d6a8 <__pow5mult+0xa0>
 800d62c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d62e:	b97c      	cbnz	r4, 800d650 <__pow5mult+0x48>
 800d630:	2010      	movs	r0, #16
 800d632:	f7ff fdbf 	bl	800d1b4 <malloc>
 800d636:	4602      	mov	r2, r0
 800d638:	6270      	str	r0, [r6, #36]	; 0x24
 800d63a:	b928      	cbnz	r0, 800d648 <__pow5mult+0x40>
 800d63c:	4b1d      	ldr	r3, [pc, #116]	; (800d6b4 <__pow5mult+0xac>)
 800d63e:	481e      	ldr	r0, [pc, #120]	; (800d6b8 <__pow5mult+0xb0>)
 800d640:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d644:	f000 fd2a 	bl	800e09c <__assert_func>
 800d648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d64c:	6004      	str	r4, [r0, #0]
 800d64e:	60c4      	str	r4, [r0, #12]
 800d650:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d658:	b94c      	cbnz	r4, 800d66e <__pow5mult+0x66>
 800d65a:	f240 2171 	movw	r1, #625	; 0x271
 800d65e:	4630      	mov	r0, r6
 800d660:	f7ff ff12 	bl	800d488 <__i2b>
 800d664:	2300      	movs	r3, #0
 800d666:	f8c8 0008 	str.w	r0, [r8, #8]
 800d66a:	4604      	mov	r4, r0
 800d66c:	6003      	str	r3, [r0, #0]
 800d66e:	f04f 0900 	mov.w	r9, #0
 800d672:	07eb      	lsls	r3, r5, #31
 800d674:	d50a      	bpl.n	800d68c <__pow5mult+0x84>
 800d676:	4639      	mov	r1, r7
 800d678:	4622      	mov	r2, r4
 800d67a:	4630      	mov	r0, r6
 800d67c:	f7ff ff1a 	bl	800d4b4 <__multiply>
 800d680:	4639      	mov	r1, r7
 800d682:	4680      	mov	r8, r0
 800d684:	4630      	mov	r0, r6
 800d686:	f7ff fdfd 	bl	800d284 <_Bfree>
 800d68a:	4647      	mov	r7, r8
 800d68c:	106d      	asrs	r5, r5, #1
 800d68e:	d00b      	beq.n	800d6a8 <__pow5mult+0xa0>
 800d690:	6820      	ldr	r0, [r4, #0]
 800d692:	b938      	cbnz	r0, 800d6a4 <__pow5mult+0x9c>
 800d694:	4622      	mov	r2, r4
 800d696:	4621      	mov	r1, r4
 800d698:	4630      	mov	r0, r6
 800d69a:	f7ff ff0b 	bl	800d4b4 <__multiply>
 800d69e:	6020      	str	r0, [r4, #0]
 800d6a0:	f8c0 9000 	str.w	r9, [r0]
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	e7e4      	b.n	800d672 <__pow5mult+0x6a>
 800d6a8:	4638      	mov	r0, r7
 800d6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ae:	bf00      	nop
 800d6b0:	0800f520 	.word	0x0800f520
 800d6b4:	0800f2d6 	.word	0x0800f2d6
 800d6b8:	0800f3d4 	.word	0x0800f3d4

0800d6bc <__lshift>:
 800d6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6c0:	460c      	mov	r4, r1
 800d6c2:	6849      	ldr	r1, [r1, #4]
 800d6c4:	6923      	ldr	r3, [r4, #16]
 800d6c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d6ca:	68a3      	ldr	r3, [r4, #8]
 800d6cc:	4607      	mov	r7, r0
 800d6ce:	4691      	mov	r9, r2
 800d6d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d6d4:	f108 0601 	add.w	r6, r8, #1
 800d6d8:	42b3      	cmp	r3, r6
 800d6da:	db0b      	blt.n	800d6f4 <__lshift+0x38>
 800d6dc:	4638      	mov	r0, r7
 800d6de:	f7ff fd91 	bl	800d204 <_Balloc>
 800d6e2:	4605      	mov	r5, r0
 800d6e4:	b948      	cbnz	r0, 800d6fa <__lshift+0x3e>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	4b2a      	ldr	r3, [pc, #168]	; (800d794 <__lshift+0xd8>)
 800d6ea:	482b      	ldr	r0, [pc, #172]	; (800d798 <__lshift+0xdc>)
 800d6ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d6f0:	f000 fcd4 	bl	800e09c <__assert_func>
 800d6f4:	3101      	adds	r1, #1
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	e7ee      	b.n	800d6d8 <__lshift+0x1c>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	f100 0114 	add.w	r1, r0, #20
 800d700:	f100 0210 	add.w	r2, r0, #16
 800d704:	4618      	mov	r0, r3
 800d706:	4553      	cmp	r3, sl
 800d708:	db37      	blt.n	800d77a <__lshift+0xbe>
 800d70a:	6920      	ldr	r0, [r4, #16]
 800d70c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d710:	f104 0314 	add.w	r3, r4, #20
 800d714:	f019 091f 	ands.w	r9, r9, #31
 800d718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d71c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d720:	d02f      	beq.n	800d782 <__lshift+0xc6>
 800d722:	f1c9 0e20 	rsb	lr, r9, #32
 800d726:	468a      	mov	sl, r1
 800d728:	f04f 0c00 	mov.w	ip, #0
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	fa02 f209 	lsl.w	r2, r2, r9
 800d732:	ea42 020c 	orr.w	r2, r2, ip
 800d736:	f84a 2b04 	str.w	r2, [sl], #4
 800d73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d73e:	4298      	cmp	r0, r3
 800d740:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d744:	d8f2      	bhi.n	800d72c <__lshift+0x70>
 800d746:	1b03      	subs	r3, r0, r4
 800d748:	3b15      	subs	r3, #21
 800d74a:	f023 0303 	bic.w	r3, r3, #3
 800d74e:	3304      	adds	r3, #4
 800d750:	f104 0215 	add.w	r2, r4, #21
 800d754:	4290      	cmp	r0, r2
 800d756:	bf38      	it	cc
 800d758:	2304      	movcc	r3, #4
 800d75a:	f841 c003 	str.w	ip, [r1, r3]
 800d75e:	f1bc 0f00 	cmp.w	ip, #0
 800d762:	d001      	beq.n	800d768 <__lshift+0xac>
 800d764:	f108 0602 	add.w	r6, r8, #2
 800d768:	3e01      	subs	r6, #1
 800d76a:	4638      	mov	r0, r7
 800d76c:	612e      	str	r6, [r5, #16]
 800d76e:	4621      	mov	r1, r4
 800d770:	f7ff fd88 	bl	800d284 <_Bfree>
 800d774:	4628      	mov	r0, r5
 800d776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d77a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d77e:	3301      	adds	r3, #1
 800d780:	e7c1      	b.n	800d706 <__lshift+0x4a>
 800d782:	3904      	subs	r1, #4
 800d784:	f853 2b04 	ldr.w	r2, [r3], #4
 800d788:	f841 2f04 	str.w	r2, [r1, #4]!
 800d78c:	4298      	cmp	r0, r3
 800d78e:	d8f9      	bhi.n	800d784 <__lshift+0xc8>
 800d790:	e7ea      	b.n	800d768 <__lshift+0xac>
 800d792:	bf00      	nop
 800d794:	0800f348 	.word	0x0800f348
 800d798:	0800f3d4 	.word	0x0800f3d4

0800d79c <__mcmp>:
 800d79c:	b530      	push	{r4, r5, lr}
 800d79e:	6902      	ldr	r2, [r0, #16]
 800d7a0:	690c      	ldr	r4, [r1, #16]
 800d7a2:	1b12      	subs	r2, r2, r4
 800d7a4:	d10e      	bne.n	800d7c4 <__mcmp+0x28>
 800d7a6:	f100 0314 	add.w	r3, r0, #20
 800d7aa:	3114      	adds	r1, #20
 800d7ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d7b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d7b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d7b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d7bc:	42a5      	cmp	r5, r4
 800d7be:	d003      	beq.n	800d7c8 <__mcmp+0x2c>
 800d7c0:	d305      	bcc.n	800d7ce <__mcmp+0x32>
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	4610      	mov	r0, r2
 800d7c6:	bd30      	pop	{r4, r5, pc}
 800d7c8:	4283      	cmp	r3, r0
 800d7ca:	d3f3      	bcc.n	800d7b4 <__mcmp+0x18>
 800d7cc:	e7fa      	b.n	800d7c4 <__mcmp+0x28>
 800d7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d7d2:	e7f7      	b.n	800d7c4 <__mcmp+0x28>

0800d7d4 <__mdiff>:
 800d7d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	460c      	mov	r4, r1
 800d7da:	4606      	mov	r6, r0
 800d7dc:	4611      	mov	r1, r2
 800d7de:	4620      	mov	r0, r4
 800d7e0:	4690      	mov	r8, r2
 800d7e2:	f7ff ffdb 	bl	800d79c <__mcmp>
 800d7e6:	1e05      	subs	r5, r0, #0
 800d7e8:	d110      	bne.n	800d80c <__mdiff+0x38>
 800d7ea:	4629      	mov	r1, r5
 800d7ec:	4630      	mov	r0, r6
 800d7ee:	f7ff fd09 	bl	800d204 <_Balloc>
 800d7f2:	b930      	cbnz	r0, 800d802 <__mdiff+0x2e>
 800d7f4:	4b3a      	ldr	r3, [pc, #232]	; (800d8e0 <__mdiff+0x10c>)
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	f240 2132 	movw	r1, #562	; 0x232
 800d7fc:	4839      	ldr	r0, [pc, #228]	; (800d8e4 <__mdiff+0x110>)
 800d7fe:	f000 fc4d 	bl	800e09c <__assert_func>
 800d802:	2301      	movs	r3, #1
 800d804:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d80c:	bfa4      	itt	ge
 800d80e:	4643      	movge	r3, r8
 800d810:	46a0      	movge	r8, r4
 800d812:	4630      	mov	r0, r6
 800d814:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d818:	bfa6      	itte	ge
 800d81a:	461c      	movge	r4, r3
 800d81c:	2500      	movge	r5, #0
 800d81e:	2501      	movlt	r5, #1
 800d820:	f7ff fcf0 	bl	800d204 <_Balloc>
 800d824:	b920      	cbnz	r0, 800d830 <__mdiff+0x5c>
 800d826:	4b2e      	ldr	r3, [pc, #184]	; (800d8e0 <__mdiff+0x10c>)
 800d828:	4602      	mov	r2, r0
 800d82a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d82e:	e7e5      	b.n	800d7fc <__mdiff+0x28>
 800d830:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d834:	6926      	ldr	r6, [r4, #16]
 800d836:	60c5      	str	r5, [r0, #12]
 800d838:	f104 0914 	add.w	r9, r4, #20
 800d83c:	f108 0514 	add.w	r5, r8, #20
 800d840:	f100 0e14 	add.w	lr, r0, #20
 800d844:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d848:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d84c:	f108 0210 	add.w	r2, r8, #16
 800d850:	46f2      	mov	sl, lr
 800d852:	2100      	movs	r1, #0
 800d854:	f859 3b04 	ldr.w	r3, [r9], #4
 800d858:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d85c:	fa1f f883 	uxth.w	r8, r3
 800d860:	fa11 f18b 	uxtah	r1, r1, fp
 800d864:	0c1b      	lsrs	r3, r3, #16
 800d866:	eba1 0808 	sub.w	r8, r1, r8
 800d86a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d86e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d872:	fa1f f888 	uxth.w	r8, r8
 800d876:	1419      	asrs	r1, r3, #16
 800d878:	454e      	cmp	r6, r9
 800d87a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d87e:	f84a 3b04 	str.w	r3, [sl], #4
 800d882:	d8e7      	bhi.n	800d854 <__mdiff+0x80>
 800d884:	1b33      	subs	r3, r6, r4
 800d886:	3b15      	subs	r3, #21
 800d888:	f023 0303 	bic.w	r3, r3, #3
 800d88c:	3304      	adds	r3, #4
 800d88e:	3415      	adds	r4, #21
 800d890:	42a6      	cmp	r6, r4
 800d892:	bf38      	it	cc
 800d894:	2304      	movcc	r3, #4
 800d896:	441d      	add	r5, r3
 800d898:	4473      	add	r3, lr
 800d89a:	469e      	mov	lr, r3
 800d89c:	462e      	mov	r6, r5
 800d89e:	4566      	cmp	r6, ip
 800d8a0:	d30e      	bcc.n	800d8c0 <__mdiff+0xec>
 800d8a2:	f10c 0203 	add.w	r2, ip, #3
 800d8a6:	1b52      	subs	r2, r2, r5
 800d8a8:	f022 0203 	bic.w	r2, r2, #3
 800d8ac:	3d03      	subs	r5, #3
 800d8ae:	45ac      	cmp	ip, r5
 800d8b0:	bf38      	it	cc
 800d8b2:	2200      	movcc	r2, #0
 800d8b4:	441a      	add	r2, r3
 800d8b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d8ba:	b17b      	cbz	r3, 800d8dc <__mdiff+0x108>
 800d8bc:	6107      	str	r7, [r0, #16]
 800d8be:	e7a3      	b.n	800d808 <__mdiff+0x34>
 800d8c0:	f856 8b04 	ldr.w	r8, [r6], #4
 800d8c4:	fa11 f288 	uxtah	r2, r1, r8
 800d8c8:	1414      	asrs	r4, r2, #16
 800d8ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d8ce:	b292      	uxth	r2, r2
 800d8d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d8d4:	f84e 2b04 	str.w	r2, [lr], #4
 800d8d8:	1421      	asrs	r1, r4, #16
 800d8da:	e7e0      	b.n	800d89e <__mdiff+0xca>
 800d8dc:	3f01      	subs	r7, #1
 800d8de:	e7ea      	b.n	800d8b6 <__mdiff+0xe2>
 800d8e0:	0800f348 	.word	0x0800f348
 800d8e4:	0800f3d4 	.word	0x0800f3d4

0800d8e8 <__ulp>:
 800d8e8:	b082      	sub	sp, #8
 800d8ea:	ed8d 0b00 	vstr	d0, [sp]
 800d8ee:	9b01      	ldr	r3, [sp, #4]
 800d8f0:	4912      	ldr	r1, [pc, #72]	; (800d93c <__ulp+0x54>)
 800d8f2:	4019      	ands	r1, r3
 800d8f4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d8f8:	2900      	cmp	r1, #0
 800d8fa:	dd05      	ble.n	800d908 <__ulp+0x20>
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	460b      	mov	r3, r1
 800d900:	ec43 2b10 	vmov	d0, r2, r3
 800d904:	b002      	add	sp, #8
 800d906:	4770      	bx	lr
 800d908:	4249      	negs	r1, r1
 800d90a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d90e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d912:	f04f 0200 	mov.w	r2, #0
 800d916:	f04f 0300 	mov.w	r3, #0
 800d91a:	da04      	bge.n	800d926 <__ulp+0x3e>
 800d91c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d920:	fa41 f300 	asr.w	r3, r1, r0
 800d924:	e7ec      	b.n	800d900 <__ulp+0x18>
 800d926:	f1a0 0114 	sub.w	r1, r0, #20
 800d92a:	291e      	cmp	r1, #30
 800d92c:	bfda      	itte	le
 800d92e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d932:	fa20 f101 	lsrle.w	r1, r0, r1
 800d936:	2101      	movgt	r1, #1
 800d938:	460a      	mov	r2, r1
 800d93a:	e7e1      	b.n	800d900 <__ulp+0x18>
 800d93c:	7ff00000 	.word	0x7ff00000

0800d940 <__b2d>:
 800d940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d942:	6905      	ldr	r5, [r0, #16]
 800d944:	f100 0714 	add.w	r7, r0, #20
 800d948:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d94c:	1f2e      	subs	r6, r5, #4
 800d94e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d952:	4620      	mov	r0, r4
 800d954:	f7ff fd48 	bl	800d3e8 <__hi0bits>
 800d958:	f1c0 0320 	rsb	r3, r0, #32
 800d95c:	280a      	cmp	r0, #10
 800d95e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d9dc <__b2d+0x9c>
 800d962:	600b      	str	r3, [r1, #0]
 800d964:	dc14      	bgt.n	800d990 <__b2d+0x50>
 800d966:	f1c0 0e0b 	rsb	lr, r0, #11
 800d96a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d96e:	42b7      	cmp	r7, r6
 800d970:	ea41 030c 	orr.w	r3, r1, ip
 800d974:	bf34      	ite	cc
 800d976:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d97a:	2100      	movcs	r1, #0
 800d97c:	3015      	adds	r0, #21
 800d97e:	fa04 f000 	lsl.w	r0, r4, r0
 800d982:	fa21 f10e 	lsr.w	r1, r1, lr
 800d986:	ea40 0201 	orr.w	r2, r0, r1
 800d98a:	ec43 2b10 	vmov	d0, r2, r3
 800d98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d990:	42b7      	cmp	r7, r6
 800d992:	bf3a      	itte	cc
 800d994:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d998:	f1a5 0608 	subcc.w	r6, r5, #8
 800d99c:	2100      	movcs	r1, #0
 800d99e:	380b      	subs	r0, #11
 800d9a0:	d017      	beq.n	800d9d2 <__b2d+0x92>
 800d9a2:	f1c0 0c20 	rsb	ip, r0, #32
 800d9a6:	fa04 f500 	lsl.w	r5, r4, r0
 800d9aa:	42be      	cmp	r6, r7
 800d9ac:	fa21 f40c 	lsr.w	r4, r1, ip
 800d9b0:	ea45 0504 	orr.w	r5, r5, r4
 800d9b4:	bf8c      	ite	hi
 800d9b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d9ba:	2400      	movls	r4, #0
 800d9bc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d9c0:	fa01 f000 	lsl.w	r0, r1, r0
 800d9c4:	fa24 f40c 	lsr.w	r4, r4, ip
 800d9c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d9cc:	ea40 0204 	orr.w	r2, r0, r4
 800d9d0:	e7db      	b.n	800d98a <__b2d+0x4a>
 800d9d2:	ea44 030c 	orr.w	r3, r4, ip
 800d9d6:	460a      	mov	r2, r1
 800d9d8:	e7d7      	b.n	800d98a <__b2d+0x4a>
 800d9da:	bf00      	nop
 800d9dc:	3ff00000 	.word	0x3ff00000

0800d9e0 <__d2b>:
 800d9e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d9e4:	4689      	mov	r9, r1
 800d9e6:	2101      	movs	r1, #1
 800d9e8:	ec57 6b10 	vmov	r6, r7, d0
 800d9ec:	4690      	mov	r8, r2
 800d9ee:	f7ff fc09 	bl	800d204 <_Balloc>
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	b930      	cbnz	r0, 800da04 <__d2b+0x24>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	4b25      	ldr	r3, [pc, #148]	; (800da90 <__d2b+0xb0>)
 800d9fa:	4826      	ldr	r0, [pc, #152]	; (800da94 <__d2b+0xb4>)
 800d9fc:	f240 310a 	movw	r1, #778	; 0x30a
 800da00:	f000 fb4c 	bl	800e09c <__assert_func>
 800da04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800da08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da0c:	bb35      	cbnz	r5, 800da5c <__d2b+0x7c>
 800da0e:	2e00      	cmp	r6, #0
 800da10:	9301      	str	r3, [sp, #4]
 800da12:	d028      	beq.n	800da66 <__d2b+0x86>
 800da14:	4668      	mov	r0, sp
 800da16:	9600      	str	r6, [sp, #0]
 800da18:	f7ff fd06 	bl	800d428 <__lo0bits>
 800da1c:	9900      	ldr	r1, [sp, #0]
 800da1e:	b300      	cbz	r0, 800da62 <__d2b+0x82>
 800da20:	9a01      	ldr	r2, [sp, #4]
 800da22:	f1c0 0320 	rsb	r3, r0, #32
 800da26:	fa02 f303 	lsl.w	r3, r2, r3
 800da2a:	430b      	orrs	r3, r1
 800da2c:	40c2      	lsrs	r2, r0
 800da2e:	6163      	str	r3, [r4, #20]
 800da30:	9201      	str	r2, [sp, #4]
 800da32:	9b01      	ldr	r3, [sp, #4]
 800da34:	61a3      	str	r3, [r4, #24]
 800da36:	2b00      	cmp	r3, #0
 800da38:	bf14      	ite	ne
 800da3a:	2202      	movne	r2, #2
 800da3c:	2201      	moveq	r2, #1
 800da3e:	6122      	str	r2, [r4, #16]
 800da40:	b1d5      	cbz	r5, 800da78 <__d2b+0x98>
 800da42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da46:	4405      	add	r5, r0
 800da48:	f8c9 5000 	str.w	r5, [r9]
 800da4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da50:	f8c8 0000 	str.w	r0, [r8]
 800da54:	4620      	mov	r0, r4
 800da56:	b003      	add	sp, #12
 800da58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da60:	e7d5      	b.n	800da0e <__d2b+0x2e>
 800da62:	6161      	str	r1, [r4, #20]
 800da64:	e7e5      	b.n	800da32 <__d2b+0x52>
 800da66:	a801      	add	r0, sp, #4
 800da68:	f7ff fcde 	bl	800d428 <__lo0bits>
 800da6c:	9b01      	ldr	r3, [sp, #4]
 800da6e:	6163      	str	r3, [r4, #20]
 800da70:	2201      	movs	r2, #1
 800da72:	6122      	str	r2, [r4, #16]
 800da74:	3020      	adds	r0, #32
 800da76:	e7e3      	b.n	800da40 <__d2b+0x60>
 800da78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da80:	f8c9 0000 	str.w	r0, [r9]
 800da84:	6918      	ldr	r0, [r3, #16]
 800da86:	f7ff fcaf 	bl	800d3e8 <__hi0bits>
 800da8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da8e:	e7df      	b.n	800da50 <__d2b+0x70>
 800da90:	0800f348 	.word	0x0800f348
 800da94:	0800f3d4 	.word	0x0800f3d4

0800da98 <__ratio>:
 800da98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da9c:	4688      	mov	r8, r1
 800da9e:	4669      	mov	r1, sp
 800daa0:	4681      	mov	r9, r0
 800daa2:	f7ff ff4d 	bl	800d940 <__b2d>
 800daa6:	a901      	add	r1, sp, #4
 800daa8:	4640      	mov	r0, r8
 800daaa:	ec55 4b10 	vmov	r4, r5, d0
 800daae:	ee10 aa10 	vmov	sl, s0
 800dab2:	f7ff ff45 	bl	800d940 <__b2d>
 800dab6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800daba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dabe:	1a59      	subs	r1, r3, r1
 800dac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800daca:	ec57 6b10 	vmov	r6, r7, d0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	bfd6      	itet	le
 800dad2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dad6:	462a      	movgt	r2, r5
 800dad8:	463a      	movle	r2, r7
 800dada:	46ab      	mov	fp, r5
 800dadc:	bfd6      	itet	le
 800dade:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800dae2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800dae6:	ee00 3a90 	vmovle	s1, r3
 800daea:	ec4b ab17 	vmov	d7, sl, fp
 800daee:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800daf2:	b003      	add	sp, #12
 800daf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800daf8 <__copybits>:
 800daf8:	3901      	subs	r1, #1
 800dafa:	b570      	push	{r4, r5, r6, lr}
 800dafc:	1149      	asrs	r1, r1, #5
 800dafe:	6914      	ldr	r4, [r2, #16]
 800db00:	3101      	adds	r1, #1
 800db02:	f102 0314 	add.w	r3, r2, #20
 800db06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800db0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800db0e:	1f05      	subs	r5, r0, #4
 800db10:	42a3      	cmp	r3, r4
 800db12:	d30c      	bcc.n	800db2e <__copybits+0x36>
 800db14:	1aa3      	subs	r3, r4, r2
 800db16:	3b11      	subs	r3, #17
 800db18:	f023 0303 	bic.w	r3, r3, #3
 800db1c:	3211      	adds	r2, #17
 800db1e:	42a2      	cmp	r2, r4
 800db20:	bf88      	it	hi
 800db22:	2300      	movhi	r3, #0
 800db24:	4418      	add	r0, r3
 800db26:	2300      	movs	r3, #0
 800db28:	4288      	cmp	r0, r1
 800db2a:	d305      	bcc.n	800db38 <__copybits+0x40>
 800db2c:	bd70      	pop	{r4, r5, r6, pc}
 800db2e:	f853 6b04 	ldr.w	r6, [r3], #4
 800db32:	f845 6f04 	str.w	r6, [r5, #4]!
 800db36:	e7eb      	b.n	800db10 <__copybits+0x18>
 800db38:	f840 3b04 	str.w	r3, [r0], #4
 800db3c:	e7f4      	b.n	800db28 <__copybits+0x30>

0800db3e <__any_on>:
 800db3e:	f100 0214 	add.w	r2, r0, #20
 800db42:	6900      	ldr	r0, [r0, #16]
 800db44:	114b      	asrs	r3, r1, #5
 800db46:	4298      	cmp	r0, r3
 800db48:	b510      	push	{r4, lr}
 800db4a:	db11      	blt.n	800db70 <__any_on+0x32>
 800db4c:	dd0a      	ble.n	800db64 <__any_on+0x26>
 800db4e:	f011 011f 	ands.w	r1, r1, #31
 800db52:	d007      	beq.n	800db64 <__any_on+0x26>
 800db54:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800db58:	fa24 f001 	lsr.w	r0, r4, r1
 800db5c:	fa00 f101 	lsl.w	r1, r0, r1
 800db60:	428c      	cmp	r4, r1
 800db62:	d10b      	bne.n	800db7c <__any_on+0x3e>
 800db64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800db68:	4293      	cmp	r3, r2
 800db6a:	d803      	bhi.n	800db74 <__any_on+0x36>
 800db6c:	2000      	movs	r0, #0
 800db6e:	bd10      	pop	{r4, pc}
 800db70:	4603      	mov	r3, r0
 800db72:	e7f7      	b.n	800db64 <__any_on+0x26>
 800db74:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800db78:	2900      	cmp	r1, #0
 800db7a:	d0f5      	beq.n	800db68 <__any_on+0x2a>
 800db7c:	2001      	movs	r0, #1
 800db7e:	e7f6      	b.n	800db6e <__any_on+0x30>

0800db80 <_calloc_r>:
 800db80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db82:	fba1 2402 	umull	r2, r4, r1, r2
 800db86:	b94c      	cbnz	r4, 800db9c <_calloc_r+0x1c>
 800db88:	4611      	mov	r1, r2
 800db8a:	9201      	str	r2, [sp, #4]
 800db8c:	f000 f87a 	bl	800dc84 <_malloc_r>
 800db90:	9a01      	ldr	r2, [sp, #4]
 800db92:	4605      	mov	r5, r0
 800db94:	b930      	cbnz	r0, 800dba4 <_calloc_r+0x24>
 800db96:	4628      	mov	r0, r5
 800db98:	b003      	add	sp, #12
 800db9a:	bd30      	pop	{r4, r5, pc}
 800db9c:	220c      	movs	r2, #12
 800db9e:	6002      	str	r2, [r0, #0]
 800dba0:	2500      	movs	r5, #0
 800dba2:	e7f8      	b.n	800db96 <_calloc_r+0x16>
 800dba4:	4621      	mov	r1, r4
 800dba6:	f7fc fcc7 	bl	800a538 <memset>
 800dbaa:	e7f4      	b.n	800db96 <_calloc_r+0x16>

0800dbac <_free_r>:
 800dbac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbae:	2900      	cmp	r1, #0
 800dbb0:	d044      	beq.n	800dc3c <_free_r+0x90>
 800dbb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbb6:	9001      	str	r0, [sp, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	f1a1 0404 	sub.w	r4, r1, #4
 800dbbe:	bfb8      	it	lt
 800dbc0:	18e4      	addlt	r4, r4, r3
 800dbc2:	f000 fab5 	bl	800e130 <__malloc_lock>
 800dbc6:	4a1e      	ldr	r2, [pc, #120]	; (800dc40 <_free_r+0x94>)
 800dbc8:	9801      	ldr	r0, [sp, #4]
 800dbca:	6813      	ldr	r3, [r2, #0]
 800dbcc:	b933      	cbnz	r3, 800dbdc <_free_r+0x30>
 800dbce:	6063      	str	r3, [r4, #4]
 800dbd0:	6014      	str	r4, [r2, #0]
 800dbd2:	b003      	add	sp, #12
 800dbd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbd8:	f000 bab0 	b.w	800e13c <__malloc_unlock>
 800dbdc:	42a3      	cmp	r3, r4
 800dbde:	d908      	bls.n	800dbf2 <_free_r+0x46>
 800dbe0:	6825      	ldr	r5, [r4, #0]
 800dbe2:	1961      	adds	r1, r4, r5
 800dbe4:	428b      	cmp	r3, r1
 800dbe6:	bf01      	itttt	eq
 800dbe8:	6819      	ldreq	r1, [r3, #0]
 800dbea:	685b      	ldreq	r3, [r3, #4]
 800dbec:	1949      	addeq	r1, r1, r5
 800dbee:	6021      	streq	r1, [r4, #0]
 800dbf0:	e7ed      	b.n	800dbce <_free_r+0x22>
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	b10b      	cbz	r3, 800dbfc <_free_r+0x50>
 800dbf8:	42a3      	cmp	r3, r4
 800dbfa:	d9fa      	bls.n	800dbf2 <_free_r+0x46>
 800dbfc:	6811      	ldr	r1, [r2, #0]
 800dbfe:	1855      	adds	r5, r2, r1
 800dc00:	42a5      	cmp	r5, r4
 800dc02:	d10b      	bne.n	800dc1c <_free_r+0x70>
 800dc04:	6824      	ldr	r4, [r4, #0]
 800dc06:	4421      	add	r1, r4
 800dc08:	1854      	adds	r4, r2, r1
 800dc0a:	42a3      	cmp	r3, r4
 800dc0c:	6011      	str	r1, [r2, #0]
 800dc0e:	d1e0      	bne.n	800dbd2 <_free_r+0x26>
 800dc10:	681c      	ldr	r4, [r3, #0]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	6053      	str	r3, [r2, #4]
 800dc16:	4421      	add	r1, r4
 800dc18:	6011      	str	r1, [r2, #0]
 800dc1a:	e7da      	b.n	800dbd2 <_free_r+0x26>
 800dc1c:	d902      	bls.n	800dc24 <_free_r+0x78>
 800dc1e:	230c      	movs	r3, #12
 800dc20:	6003      	str	r3, [r0, #0]
 800dc22:	e7d6      	b.n	800dbd2 <_free_r+0x26>
 800dc24:	6825      	ldr	r5, [r4, #0]
 800dc26:	1961      	adds	r1, r4, r5
 800dc28:	428b      	cmp	r3, r1
 800dc2a:	bf04      	itt	eq
 800dc2c:	6819      	ldreq	r1, [r3, #0]
 800dc2e:	685b      	ldreq	r3, [r3, #4]
 800dc30:	6063      	str	r3, [r4, #4]
 800dc32:	bf04      	itt	eq
 800dc34:	1949      	addeq	r1, r1, r5
 800dc36:	6021      	streq	r1, [r4, #0]
 800dc38:	6054      	str	r4, [r2, #4]
 800dc3a:	e7ca      	b.n	800dbd2 <_free_r+0x26>
 800dc3c:	b003      	add	sp, #12
 800dc3e:	bd30      	pop	{r4, r5, pc}
 800dc40:	2000298c 	.word	0x2000298c

0800dc44 <sbrk_aligned>:
 800dc44:	b570      	push	{r4, r5, r6, lr}
 800dc46:	4e0e      	ldr	r6, [pc, #56]	; (800dc80 <sbrk_aligned+0x3c>)
 800dc48:	460c      	mov	r4, r1
 800dc4a:	6831      	ldr	r1, [r6, #0]
 800dc4c:	4605      	mov	r5, r0
 800dc4e:	b911      	cbnz	r1, 800dc56 <sbrk_aligned+0x12>
 800dc50:	f000 f9f2 	bl	800e038 <_sbrk_r>
 800dc54:	6030      	str	r0, [r6, #0]
 800dc56:	4621      	mov	r1, r4
 800dc58:	4628      	mov	r0, r5
 800dc5a:	f000 f9ed 	bl	800e038 <_sbrk_r>
 800dc5e:	1c43      	adds	r3, r0, #1
 800dc60:	d00a      	beq.n	800dc78 <sbrk_aligned+0x34>
 800dc62:	1cc4      	adds	r4, r0, #3
 800dc64:	f024 0403 	bic.w	r4, r4, #3
 800dc68:	42a0      	cmp	r0, r4
 800dc6a:	d007      	beq.n	800dc7c <sbrk_aligned+0x38>
 800dc6c:	1a21      	subs	r1, r4, r0
 800dc6e:	4628      	mov	r0, r5
 800dc70:	f000 f9e2 	bl	800e038 <_sbrk_r>
 800dc74:	3001      	adds	r0, #1
 800dc76:	d101      	bne.n	800dc7c <sbrk_aligned+0x38>
 800dc78:	f04f 34ff 	mov.w	r4, #4294967295
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	bd70      	pop	{r4, r5, r6, pc}
 800dc80:	20002990 	.word	0x20002990

0800dc84 <_malloc_r>:
 800dc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc88:	1ccd      	adds	r5, r1, #3
 800dc8a:	f025 0503 	bic.w	r5, r5, #3
 800dc8e:	3508      	adds	r5, #8
 800dc90:	2d0c      	cmp	r5, #12
 800dc92:	bf38      	it	cc
 800dc94:	250c      	movcc	r5, #12
 800dc96:	2d00      	cmp	r5, #0
 800dc98:	4607      	mov	r7, r0
 800dc9a:	db01      	blt.n	800dca0 <_malloc_r+0x1c>
 800dc9c:	42a9      	cmp	r1, r5
 800dc9e:	d905      	bls.n	800dcac <_malloc_r+0x28>
 800dca0:	230c      	movs	r3, #12
 800dca2:	603b      	str	r3, [r7, #0]
 800dca4:	2600      	movs	r6, #0
 800dca6:	4630      	mov	r0, r6
 800dca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcac:	4e2e      	ldr	r6, [pc, #184]	; (800dd68 <_malloc_r+0xe4>)
 800dcae:	f000 fa3f 	bl	800e130 <__malloc_lock>
 800dcb2:	6833      	ldr	r3, [r6, #0]
 800dcb4:	461c      	mov	r4, r3
 800dcb6:	bb34      	cbnz	r4, 800dd06 <_malloc_r+0x82>
 800dcb8:	4629      	mov	r1, r5
 800dcba:	4638      	mov	r0, r7
 800dcbc:	f7ff ffc2 	bl	800dc44 <sbrk_aligned>
 800dcc0:	1c43      	adds	r3, r0, #1
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	d14d      	bne.n	800dd62 <_malloc_r+0xde>
 800dcc6:	6834      	ldr	r4, [r6, #0]
 800dcc8:	4626      	mov	r6, r4
 800dcca:	2e00      	cmp	r6, #0
 800dccc:	d140      	bne.n	800dd50 <_malloc_r+0xcc>
 800dcce:	6823      	ldr	r3, [r4, #0]
 800dcd0:	4631      	mov	r1, r6
 800dcd2:	4638      	mov	r0, r7
 800dcd4:	eb04 0803 	add.w	r8, r4, r3
 800dcd8:	f000 f9ae 	bl	800e038 <_sbrk_r>
 800dcdc:	4580      	cmp	r8, r0
 800dcde:	d13a      	bne.n	800dd56 <_malloc_r+0xd2>
 800dce0:	6821      	ldr	r1, [r4, #0]
 800dce2:	3503      	adds	r5, #3
 800dce4:	1a6d      	subs	r5, r5, r1
 800dce6:	f025 0503 	bic.w	r5, r5, #3
 800dcea:	3508      	adds	r5, #8
 800dcec:	2d0c      	cmp	r5, #12
 800dcee:	bf38      	it	cc
 800dcf0:	250c      	movcc	r5, #12
 800dcf2:	4629      	mov	r1, r5
 800dcf4:	4638      	mov	r0, r7
 800dcf6:	f7ff ffa5 	bl	800dc44 <sbrk_aligned>
 800dcfa:	3001      	adds	r0, #1
 800dcfc:	d02b      	beq.n	800dd56 <_malloc_r+0xd2>
 800dcfe:	6823      	ldr	r3, [r4, #0]
 800dd00:	442b      	add	r3, r5
 800dd02:	6023      	str	r3, [r4, #0]
 800dd04:	e00e      	b.n	800dd24 <_malloc_r+0xa0>
 800dd06:	6822      	ldr	r2, [r4, #0]
 800dd08:	1b52      	subs	r2, r2, r5
 800dd0a:	d41e      	bmi.n	800dd4a <_malloc_r+0xc6>
 800dd0c:	2a0b      	cmp	r2, #11
 800dd0e:	d916      	bls.n	800dd3e <_malloc_r+0xba>
 800dd10:	1961      	adds	r1, r4, r5
 800dd12:	42a3      	cmp	r3, r4
 800dd14:	6025      	str	r5, [r4, #0]
 800dd16:	bf18      	it	ne
 800dd18:	6059      	strne	r1, [r3, #4]
 800dd1a:	6863      	ldr	r3, [r4, #4]
 800dd1c:	bf08      	it	eq
 800dd1e:	6031      	streq	r1, [r6, #0]
 800dd20:	5162      	str	r2, [r4, r5]
 800dd22:	604b      	str	r3, [r1, #4]
 800dd24:	4638      	mov	r0, r7
 800dd26:	f104 060b 	add.w	r6, r4, #11
 800dd2a:	f000 fa07 	bl	800e13c <__malloc_unlock>
 800dd2e:	f026 0607 	bic.w	r6, r6, #7
 800dd32:	1d23      	adds	r3, r4, #4
 800dd34:	1af2      	subs	r2, r6, r3
 800dd36:	d0b6      	beq.n	800dca6 <_malloc_r+0x22>
 800dd38:	1b9b      	subs	r3, r3, r6
 800dd3a:	50a3      	str	r3, [r4, r2]
 800dd3c:	e7b3      	b.n	800dca6 <_malloc_r+0x22>
 800dd3e:	6862      	ldr	r2, [r4, #4]
 800dd40:	42a3      	cmp	r3, r4
 800dd42:	bf0c      	ite	eq
 800dd44:	6032      	streq	r2, [r6, #0]
 800dd46:	605a      	strne	r2, [r3, #4]
 800dd48:	e7ec      	b.n	800dd24 <_malloc_r+0xa0>
 800dd4a:	4623      	mov	r3, r4
 800dd4c:	6864      	ldr	r4, [r4, #4]
 800dd4e:	e7b2      	b.n	800dcb6 <_malloc_r+0x32>
 800dd50:	4634      	mov	r4, r6
 800dd52:	6876      	ldr	r6, [r6, #4]
 800dd54:	e7b9      	b.n	800dcca <_malloc_r+0x46>
 800dd56:	230c      	movs	r3, #12
 800dd58:	603b      	str	r3, [r7, #0]
 800dd5a:	4638      	mov	r0, r7
 800dd5c:	f000 f9ee 	bl	800e13c <__malloc_unlock>
 800dd60:	e7a1      	b.n	800dca6 <_malloc_r+0x22>
 800dd62:	6025      	str	r5, [r4, #0]
 800dd64:	e7de      	b.n	800dd24 <_malloc_r+0xa0>
 800dd66:	bf00      	nop
 800dd68:	2000298c 	.word	0x2000298c

0800dd6c <__ssputs_r>:
 800dd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd70:	688e      	ldr	r6, [r1, #8]
 800dd72:	429e      	cmp	r6, r3
 800dd74:	4682      	mov	sl, r0
 800dd76:	460c      	mov	r4, r1
 800dd78:	4690      	mov	r8, r2
 800dd7a:	461f      	mov	r7, r3
 800dd7c:	d838      	bhi.n	800ddf0 <__ssputs_r+0x84>
 800dd7e:	898a      	ldrh	r2, [r1, #12]
 800dd80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd84:	d032      	beq.n	800ddec <__ssputs_r+0x80>
 800dd86:	6825      	ldr	r5, [r4, #0]
 800dd88:	6909      	ldr	r1, [r1, #16]
 800dd8a:	eba5 0901 	sub.w	r9, r5, r1
 800dd8e:	6965      	ldr	r5, [r4, #20]
 800dd90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd98:	3301      	adds	r3, #1
 800dd9a:	444b      	add	r3, r9
 800dd9c:	106d      	asrs	r5, r5, #1
 800dd9e:	429d      	cmp	r5, r3
 800dda0:	bf38      	it	cc
 800dda2:	461d      	movcc	r5, r3
 800dda4:	0553      	lsls	r3, r2, #21
 800dda6:	d531      	bpl.n	800de0c <__ssputs_r+0xa0>
 800dda8:	4629      	mov	r1, r5
 800ddaa:	f7ff ff6b 	bl	800dc84 <_malloc_r>
 800ddae:	4606      	mov	r6, r0
 800ddb0:	b950      	cbnz	r0, 800ddc8 <__ssputs_r+0x5c>
 800ddb2:	230c      	movs	r3, #12
 800ddb4:	f8ca 3000 	str.w	r3, [sl]
 800ddb8:	89a3      	ldrh	r3, [r4, #12]
 800ddba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddbe:	81a3      	strh	r3, [r4, #12]
 800ddc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddc8:	6921      	ldr	r1, [r4, #16]
 800ddca:	464a      	mov	r2, r9
 800ddcc:	f7ff fa0c 	bl	800d1e8 <memcpy>
 800ddd0:	89a3      	ldrh	r3, [r4, #12]
 800ddd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ddd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddda:	81a3      	strh	r3, [r4, #12]
 800dddc:	6126      	str	r6, [r4, #16]
 800ddde:	6165      	str	r5, [r4, #20]
 800dde0:	444e      	add	r6, r9
 800dde2:	eba5 0509 	sub.w	r5, r5, r9
 800dde6:	6026      	str	r6, [r4, #0]
 800dde8:	60a5      	str	r5, [r4, #8]
 800ddea:	463e      	mov	r6, r7
 800ddec:	42be      	cmp	r6, r7
 800ddee:	d900      	bls.n	800ddf2 <__ssputs_r+0x86>
 800ddf0:	463e      	mov	r6, r7
 800ddf2:	6820      	ldr	r0, [r4, #0]
 800ddf4:	4632      	mov	r2, r6
 800ddf6:	4641      	mov	r1, r8
 800ddf8:	f000 f980 	bl	800e0fc <memmove>
 800ddfc:	68a3      	ldr	r3, [r4, #8]
 800ddfe:	1b9b      	subs	r3, r3, r6
 800de00:	60a3      	str	r3, [r4, #8]
 800de02:	6823      	ldr	r3, [r4, #0]
 800de04:	4433      	add	r3, r6
 800de06:	6023      	str	r3, [r4, #0]
 800de08:	2000      	movs	r0, #0
 800de0a:	e7db      	b.n	800ddc4 <__ssputs_r+0x58>
 800de0c:	462a      	mov	r2, r5
 800de0e:	f000 f99b 	bl	800e148 <_realloc_r>
 800de12:	4606      	mov	r6, r0
 800de14:	2800      	cmp	r0, #0
 800de16:	d1e1      	bne.n	800dddc <__ssputs_r+0x70>
 800de18:	6921      	ldr	r1, [r4, #16]
 800de1a:	4650      	mov	r0, sl
 800de1c:	f7ff fec6 	bl	800dbac <_free_r>
 800de20:	e7c7      	b.n	800ddb2 <__ssputs_r+0x46>
	...

0800de24 <_svfiprintf_r>:
 800de24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de28:	4698      	mov	r8, r3
 800de2a:	898b      	ldrh	r3, [r1, #12]
 800de2c:	061b      	lsls	r3, r3, #24
 800de2e:	b09d      	sub	sp, #116	; 0x74
 800de30:	4607      	mov	r7, r0
 800de32:	460d      	mov	r5, r1
 800de34:	4614      	mov	r4, r2
 800de36:	d50e      	bpl.n	800de56 <_svfiprintf_r+0x32>
 800de38:	690b      	ldr	r3, [r1, #16]
 800de3a:	b963      	cbnz	r3, 800de56 <_svfiprintf_r+0x32>
 800de3c:	2140      	movs	r1, #64	; 0x40
 800de3e:	f7ff ff21 	bl	800dc84 <_malloc_r>
 800de42:	6028      	str	r0, [r5, #0]
 800de44:	6128      	str	r0, [r5, #16]
 800de46:	b920      	cbnz	r0, 800de52 <_svfiprintf_r+0x2e>
 800de48:	230c      	movs	r3, #12
 800de4a:	603b      	str	r3, [r7, #0]
 800de4c:	f04f 30ff 	mov.w	r0, #4294967295
 800de50:	e0d1      	b.n	800dff6 <_svfiprintf_r+0x1d2>
 800de52:	2340      	movs	r3, #64	; 0x40
 800de54:	616b      	str	r3, [r5, #20]
 800de56:	2300      	movs	r3, #0
 800de58:	9309      	str	r3, [sp, #36]	; 0x24
 800de5a:	2320      	movs	r3, #32
 800de5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de60:	f8cd 800c 	str.w	r8, [sp, #12]
 800de64:	2330      	movs	r3, #48	; 0x30
 800de66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e010 <_svfiprintf_r+0x1ec>
 800de6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de6e:	f04f 0901 	mov.w	r9, #1
 800de72:	4623      	mov	r3, r4
 800de74:	469a      	mov	sl, r3
 800de76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de7a:	b10a      	cbz	r2, 800de80 <_svfiprintf_r+0x5c>
 800de7c:	2a25      	cmp	r2, #37	; 0x25
 800de7e:	d1f9      	bne.n	800de74 <_svfiprintf_r+0x50>
 800de80:	ebba 0b04 	subs.w	fp, sl, r4
 800de84:	d00b      	beq.n	800de9e <_svfiprintf_r+0x7a>
 800de86:	465b      	mov	r3, fp
 800de88:	4622      	mov	r2, r4
 800de8a:	4629      	mov	r1, r5
 800de8c:	4638      	mov	r0, r7
 800de8e:	f7ff ff6d 	bl	800dd6c <__ssputs_r>
 800de92:	3001      	adds	r0, #1
 800de94:	f000 80aa 	beq.w	800dfec <_svfiprintf_r+0x1c8>
 800de98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de9a:	445a      	add	r2, fp
 800de9c:	9209      	str	r2, [sp, #36]	; 0x24
 800de9e:	f89a 3000 	ldrb.w	r3, [sl]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	f000 80a2 	beq.w	800dfec <_svfiprintf_r+0x1c8>
 800dea8:	2300      	movs	r3, #0
 800deaa:	f04f 32ff 	mov.w	r2, #4294967295
 800deae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800deb2:	f10a 0a01 	add.w	sl, sl, #1
 800deb6:	9304      	str	r3, [sp, #16]
 800deb8:	9307      	str	r3, [sp, #28]
 800deba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800debe:	931a      	str	r3, [sp, #104]	; 0x68
 800dec0:	4654      	mov	r4, sl
 800dec2:	2205      	movs	r2, #5
 800dec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dec8:	4851      	ldr	r0, [pc, #324]	; (800e010 <_svfiprintf_r+0x1ec>)
 800deca:	f7f2 f9c1 	bl	8000250 <memchr>
 800dece:	9a04      	ldr	r2, [sp, #16]
 800ded0:	b9d8      	cbnz	r0, 800df0a <_svfiprintf_r+0xe6>
 800ded2:	06d0      	lsls	r0, r2, #27
 800ded4:	bf44      	itt	mi
 800ded6:	2320      	movmi	r3, #32
 800ded8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dedc:	0711      	lsls	r1, r2, #28
 800dede:	bf44      	itt	mi
 800dee0:	232b      	movmi	r3, #43	; 0x2b
 800dee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dee6:	f89a 3000 	ldrb.w	r3, [sl]
 800deea:	2b2a      	cmp	r3, #42	; 0x2a
 800deec:	d015      	beq.n	800df1a <_svfiprintf_r+0xf6>
 800deee:	9a07      	ldr	r2, [sp, #28]
 800def0:	4654      	mov	r4, sl
 800def2:	2000      	movs	r0, #0
 800def4:	f04f 0c0a 	mov.w	ip, #10
 800def8:	4621      	mov	r1, r4
 800defa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800defe:	3b30      	subs	r3, #48	; 0x30
 800df00:	2b09      	cmp	r3, #9
 800df02:	d94e      	bls.n	800dfa2 <_svfiprintf_r+0x17e>
 800df04:	b1b0      	cbz	r0, 800df34 <_svfiprintf_r+0x110>
 800df06:	9207      	str	r2, [sp, #28]
 800df08:	e014      	b.n	800df34 <_svfiprintf_r+0x110>
 800df0a:	eba0 0308 	sub.w	r3, r0, r8
 800df0e:	fa09 f303 	lsl.w	r3, r9, r3
 800df12:	4313      	orrs	r3, r2
 800df14:	9304      	str	r3, [sp, #16]
 800df16:	46a2      	mov	sl, r4
 800df18:	e7d2      	b.n	800dec0 <_svfiprintf_r+0x9c>
 800df1a:	9b03      	ldr	r3, [sp, #12]
 800df1c:	1d19      	adds	r1, r3, #4
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	9103      	str	r1, [sp, #12]
 800df22:	2b00      	cmp	r3, #0
 800df24:	bfbb      	ittet	lt
 800df26:	425b      	neglt	r3, r3
 800df28:	f042 0202 	orrlt.w	r2, r2, #2
 800df2c:	9307      	strge	r3, [sp, #28]
 800df2e:	9307      	strlt	r3, [sp, #28]
 800df30:	bfb8      	it	lt
 800df32:	9204      	strlt	r2, [sp, #16]
 800df34:	7823      	ldrb	r3, [r4, #0]
 800df36:	2b2e      	cmp	r3, #46	; 0x2e
 800df38:	d10c      	bne.n	800df54 <_svfiprintf_r+0x130>
 800df3a:	7863      	ldrb	r3, [r4, #1]
 800df3c:	2b2a      	cmp	r3, #42	; 0x2a
 800df3e:	d135      	bne.n	800dfac <_svfiprintf_r+0x188>
 800df40:	9b03      	ldr	r3, [sp, #12]
 800df42:	1d1a      	adds	r2, r3, #4
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	9203      	str	r2, [sp, #12]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	bfb8      	it	lt
 800df4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800df50:	3402      	adds	r4, #2
 800df52:	9305      	str	r3, [sp, #20]
 800df54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e020 <_svfiprintf_r+0x1fc>
 800df58:	7821      	ldrb	r1, [r4, #0]
 800df5a:	2203      	movs	r2, #3
 800df5c:	4650      	mov	r0, sl
 800df5e:	f7f2 f977 	bl	8000250 <memchr>
 800df62:	b140      	cbz	r0, 800df76 <_svfiprintf_r+0x152>
 800df64:	2340      	movs	r3, #64	; 0x40
 800df66:	eba0 000a 	sub.w	r0, r0, sl
 800df6a:	fa03 f000 	lsl.w	r0, r3, r0
 800df6e:	9b04      	ldr	r3, [sp, #16]
 800df70:	4303      	orrs	r3, r0
 800df72:	3401      	adds	r4, #1
 800df74:	9304      	str	r3, [sp, #16]
 800df76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df7a:	4826      	ldr	r0, [pc, #152]	; (800e014 <_svfiprintf_r+0x1f0>)
 800df7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df80:	2206      	movs	r2, #6
 800df82:	f7f2 f965 	bl	8000250 <memchr>
 800df86:	2800      	cmp	r0, #0
 800df88:	d038      	beq.n	800dffc <_svfiprintf_r+0x1d8>
 800df8a:	4b23      	ldr	r3, [pc, #140]	; (800e018 <_svfiprintf_r+0x1f4>)
 800df8c:	bb1b      	cbnz	r3, 800dfd6 <_svfiprintf_r+0x1b2>
 800df8e:	9b03      	ldr	r3, [sp, #12]
 800df90:	3307      	adds	r3, #7
 800df92:	f023 0307 	bic.w	r3, r3, #7
 800df96:	3308      	adds	r3, #8
 800df98:	9303      	str	r3, [sp, #12]
 800df9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df9c:	4433      	add	r3, r6
 800df9e:	9309      	str	r3, [sp, #36]	; 0x24
 800dfa0:	e767      	b.n	800de72 <_svfiprintf_r+0x4e>
 800dfa2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfa6:	460c      	mov	r4, r1
 800dfa8:	2001      	movs	r0, #1
 800dfaa:	e7a5      	b.n	800def8 <_svfiprintf_r+0xd4>
 800dfac:	2300      	movs	r3, #0
 800dfae:	3401      	adds	r4, #1
 800dfb0:	9305      	str	r3, [sp, #20]
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	f04f 0c0a 	mov.w	ip, #10
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfbe:	3a30      	subs	r2, #48	; 0x30
 800dfc0:	2a09      	cmp	r2, #9
 800dfc2:	d903      	bls.n	800dfcc <_svfiprintf_r+0x1a8>
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d0c5      	beq.n	800df54 <_svfiprintf_r+0x130>
 800dfc8:	9105      	str	r1, [sp, #20]
 800dfca:	e7c3      	b.n	800df54 <_svfiprintf_r+0x130>
 800dfcc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	e7f0      	b.n	800dfb8 <_svfiprintf_r+0x194>
 800dfd6:	ab03      	add	r3, sp, #12
 800dfd8:	9300      	str	r3, [sp, #0]
 800dfda:	462a      	mov	r2, r5
 800dfdc:	4b0f      	ldr	r3, [pc, #60]	; (800e01c <_svfiprintf_r+0x1f8>)
 800dfde:	a904      	add	r1, sp, #16
 800dfe0:	4638      	mov	r0, r7
 800dfe2:	f7fc fb41 	bl	800a668 <_printf_float>
 800dfe6:	1c42      	adds	r2, r0, #1
 800dfe8:	4606      	mov	r6, r0
 800dfea:	d1d6      	bne.n	800df9a <_svfiprintf_r+0x176>
 800dfec:	89ab      	ldrh	r3, [r5, #12]
 800dfee:	065b      	lsls	r3, r3, #25
 800dff0:	f53f af2c 	bmi.w	800de4c <_svfiprintf_r+0x28>
 800dff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dff6:	b01d      	add	sp, #116	; 0x74
 800dff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dffc:	ab03      	add	r3, sp, #12
 800dffe:	9300      	str	r3, [sp, #0]
 800e000:	462a      	mov	r2, r5
 800e002:	4b06      	ldr	r3, [pc, #24]	; (800e01c <_svfiprintf_r+0x1f8>)
 800e004:	a904      	add	r1, sp, #16
 800e006:	4638      	mov	r0, r7
 800e008:	f7fc fdba 	bl	800ab80 <_printf_i>
 800e00c:	e7eb      	b.n	800dfe6 <_svfiprintf_r+0x1c2>
 800e00e:	bf00      	nop
 800e010:	0800f52c 	.word	0x0800f52c
 800e014:	0800f536 	.word	0x0800f536
 800e018:	0800a669 	.word	0x0800a669
 800e01c:	0800dd6d 	.word	0x0800dd6d
 800e020:	0800f532 	.word	0x0800f532
 800e024:	00000000 	.word	0x00000000

0800e028 <nan>:
 800e028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e030 <nan+0x8>
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop
 800e030:	00000000 	.word	0x00000000
 800e034:	7ff80000 	.word	0x7ff80000

0800e038 <_sbrk_r>:
 800e038:	b538      	push	{r3, r4, r5, lr}
 800e03a:	4d06      	ldr	r5, [pc, #24]	; (800e054 <_sbrk_r+0x1c>)
 800e03c:	2300      	movs	r3, #0
 800e03e:	4604      	mov	r4, r0
 800e040:	4608      	mov	r0, r1
 800e042:	602b      	str	r3, [r5, #0]
 800e044:	f7f4 f900 	bl	8002248 <_sbrk>
 800e048:	1c43      	adds	r3, r0, #1
 800e04a:	d102      	bne.n	800e052 <_sbrk_r+0x1a>
 800e04c:	682b      	ldr	r3, [r5, #0]
 800e04e:	b103      	cbz	r3, 800e052 <_sbrk_r+0x1a>
 800e050:	6023      	str	r3, [r4, #0]
 800e052:	bd38      	pop	{r3, r4, r5, pc}
 800e054:	20002994 	.word	0x20002994

0800e058 <strncmp>:
 800e058:	b510      	push	{r4, lr}
 800e05a:	b17a      	cbz	r2, 800e07c <strncmp+0x24>
 800e05c:	4603      	mov	r3, r0
 800e05e:	3901      	subs	r1, #1
 800e060:	1884      	adds	r4, r0, r2
 800e062:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e066:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e06a:	4290      	cmp	r0, r2
 800e06c:	d101      	bne.n	800e072 <strncmp+0x1a>
 800e06e:	42a3      	cmp	r3, r4
 800e070:	d101      	bne.n	800e076 <strncmp+0x1e>
 800e072:	1a80      	subs	r0, r0, r2
 800e074:	bd10      	pop	{r4, pc}
 800e076:	2800      	cmp	r0, #0
 800e078:	d1f3      	bne.n	800e062 <strncmp+0xa>
 800e07a:	e7fa      	b.n	800e072 <strncmp+0x1a>
 800e07c:	4610      	mov	r0, r2
 800e07e:	e7f9      	b.n	800e074 <strncmp+0x1c>

0800e080 <__ascii_wctomb>:
 800e080:	b149      	cbz	r1, 800e096 <__ascii_wctomb+0x16>
 800e082:	2aff      	cmp	r2, #255	; 0xff
 800e084:	bf85      	ittet	hi
 800e086:	238a      	movhi	r3, #138	; 0x8a
 800e088:	6003      	strhi	r3, [r0, #0]
 800e08a:	700a      	strbls	r2, [r1, #0]
 800e08c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e090:	bf98      	it	ls
 800e092:	2001      	movls	r0, #1
 800e094:	4770      	bx	lr
 800e096:	4608      	mov	r0, r1
 800e098:	4770      	bx	lr
	...

0800e09c <__assert_func>:
 800e09c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e09e:	4614      	mov	r4, r2
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	4b09      	ldr	r3, [pc, #36]	; (800e0c8 <__assert_func+0x2c>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4605      	mov	r5, r0
 800e0a8:	68d8      	ldr	r0, [r3, #12]
 800e0aa:	b14c      	cbz	r4, 800e0c0 <__assert_func+0x24>
 800e0ac:	4b07      	ldr	r3, [pc, #28]	; (800e0cc <__assert_func+0x30>)
 800e0ae:	9100      	str	r1, [sp, #0]
 800e0b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0b4:	4906      	ldr	r1, [pc, #24]	; (800e0d0 <__assert_func+0x34>)
 800e0b6:	462b      	mov	r3, r5
 800e0b8:	f000 f80e 	bl	800e0d8 <fiprintf>
 800e0bc:	f000 fa8c 	bl	800e5d8 <abort>
 800e0c0:	4b04      	ldr	r3, [pc, #16]	; (800e0d4 <__assert_func+0x38>)
 800e0c2:	461c      	mov	r4, r3
 800e0c4:	e7f3      	b.n	800e0ae <__assert_func+0x12>
 800e0c6:	bf00      	nop
 800e0c8:	20000024 	.word	0x20000024
 800e0cc:	0800f53d 	.word	0x0800f53d
 800e0d0:	0800f54a 	.word	0x0800f54a
 800e0d4:	0800f578 	.word	0x0800f578

0800e0d8 <fiprintf>:
 800e0d8:	b40e      	push	{r1, r2, r3}
 800e0da:	b503      	push	{r0, r1, lr}
 800e0dc:	4601      	mov	r1, r0
 800e0de:	ab03      	add	r3, sp, #12
 800e0e0:	4805      	ldr	r0, [pc, #20]	; (800e0f8 <fiprintf+0x20>)
 800e0e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0e6:	6800      	ldr	r0, [r0, #0]
 800e0e8:	9301      	str	r3, [sp, #4]
 800e0ea:	f000 f885 	bl	800e1f8 <_vfiprintf_r>
 800e0ee:	b002      	add	sp, #8
 800e0f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0f4:	b003      	add	sp, #12
 800e0f6:	4770      	bx	lr
 800e0f8:	20000024 	.word	0x20000024

0800e0fc <memmove>:
 800e0fc:	4288      	cmp	r0, r1
 800e0fe:	b510      	push	{r4, lr}
 800e100:	eb01 0402 	add.w	r4, r1, r2
 800e104:	d902      	bls.n	800e10c <memmove+0x10>
 800e106:	4284      	cmp	r4, r0
 800e108:	4623      	mov	r3, r4
 800e10a:	d807      	bhi.n	800e11c <memmove+0x20>
 800e10c:	1e43      	subs	r3, r0, #1
 800e10e:	42a1      	cmp	r1, r4
 800e110:	d008      	beq.n	800e124 <memmove+0x28>
 800e112:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e116:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e11a:	e7f8      	b.n	800e10e <memmove+0x12>
 800e11c:	4402      	add	r2, r0
 800e11e:	4601      	mov	r1, r0
 800e120:	428a      	cmp	r2, r1
 800e122:	d100      	bne.n	800e126 <memmove+0x2a>
 800e124:	bd10      	pop	{r4, pc}
 800e126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e12a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e12e:	e7f7      	b.n	800e120 <memmove+0x24>

0800e130 <__malloc_lock>:
 800e130:	4801      	ldr	r0, [pc, #4]	; (800e138 <__malloc_lock+0x8>)
 800e132:	f000 bc11 	b.w	800e958 <__retarget_lock_acquire_recursive>
 800e136:	bf00      	nop
 800e138:	20002998 	.word	0x20002998

0800e13c <__malloc_unlock>:
 800e13c:	4801      	ldr	r0, [pc, #4]	; (800e144 <__malloc_unlock+0x8>)
 800e13e:	f000 bc0c 	b.w	800e95a <__retarget_lock_release_recursive>
 800e142:	bf00      	nop
 800e144:	20002998 	.word	0x20002998

0800e148 <_realloc_r>:
 800e148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e14c:	4680      	mov	r8, r0
 800e14e:	4614      	mov	r4, r2
 800e150:	460e      	mov	r6, r1
 800e152:	b921      	cbnz	r1, 800e15e <_realloc_r+0x16>
 800e154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e158:	4611      	mov	r1, r2
 800e15a:	f7ff bd93 	b.w	800dc84 <_malloc_r>
 800e15e:	b92a      	cbnz	r2, 800e16c <_realloc_r+0x24>
 800e160:	f7ff fd24 	bl	800dbac <_free_r>
 800e164:	4625      	mov	r5, r4
 800e166:	4628      	mov	r0, r5
 800e168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e16c:	f000 fc5c 	bl	800ea28 <_malloc_usable_size_r>
 800e170:	4284      	cmp	r4, r0
 800e172:	4607      	mov	r7, r0
 800e174:	d802      	bhi.n	800e17c <_realloc_r+0x34>
 800e176:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e17a:	d812      	bhi.n	800e1a2 <_realloc_r+0x5a>
 800e17c:	4621      	mov	r1, r4
 800e17e:	4640      	mov	r0, r8
 800e180:	f7ff fd80 	bl	800dc84 <_malloc_r>
 800e184:	4605      	mov	r5, r0
 800e186:	2800      	cmp	r0, #0
 800e188:	d0ed      	beq.n	800e166 <_realloc_r+0x1e>
 800e18a:	42bc      	cmp	r4, r7
 800e18c:	4622      	mov	r2, r4
 800e18e:	4631      	mov	r1, r6
 800e190:	bf28      	it	cs
 800e192:	463a      	movcs	r2, r7
 800e194:	f7ff f828 	bl	800d1e8 <memcpy>
 800e198:	4631      	mov	r1, r6
 800e19a:	4640      	mov	r0, r8
 800e19c:	f7ff fd06 	bl	800dbac <_free_r>
 800e1a0:	e7e1      	b.n	800e166 <_realloc_r+0x1e>
 800e1a2:	4635      	mov	r5, r6
 800e1a4:	e7df      	b.n	800e166 <_realloc_r+0x1e>

0800e1a6 <__sfputc_r>:
 800e1a6:	6893      	ldr	r3, [r2, #8]
 800e1a8:	3b01      	subs	r3, #1
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	b410      	push	{r4}
 800e1ae:	6093      	str	r3, [r2, #8]
 800e1b0:	da08      	bge.n	800e1c4 <__sfputc_r+0x1e>
 800e1b2:	6994      	ldr	r4, [r2, #24]
 800e1b4:	42a3      	cmp	r3, r4
 800e1b6:	db01      	blt.n	800e1bc <__sfputc_r+0x16>
 800e1b8:	290a      	cmp	r1, #10
 800e1ba:	d103      	bne.n	800e1c4 <__sfputc_r+0x1e>
 800e1bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1c0:	f000 b94a 	b.w	800e458 <__swbuf_r>
 800e1c4:	6813      	ldr	r3, [r2, #0]
 800e1c6:	1c58      	adds	r0, r3, #1
 800e1c8:	6010      	str	r0, [r2, #0]
 800e1ca:	7019      	strb	r1, [r3, #0]
 800e1cc:	4608      	mov	r0, r1
 800e1ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <__sfputs_r>:
 800e1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1d6:	4606      	mov	r6, r0
 800e1d8:	460f      	mov	r7, r1
 800e1da:	4614      	mov	r4, r2
 800e1dc:	18d5      	adds	r5, r2, r3
 800e1de:	42ac      	cmp	r4, r5
 800e1e0:	d101      	bne.n	800e1e6 <__sfputs_r+0x12>
 800e1e2:	2000      	movs	r0, #0
 800e1e4:	e007      	b.n	800e1f6 <__sfputs_r+0x22>
 800e1e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1ea:	463a      	mov	r2, r7
 800e1ec:	4630      	mov	r0, r6
 800e1ee:	f7ff ffda 	bl	800e1a6 <__sfputc_r>
 800e1f2:	1c43      	adds	r3, r0, #1
 800e1f4:	d1f3      	bne.n	800e1de <__sfputs_r+0xa>
 800e1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e1f8 <_vfiprintf_r>:
 800e1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1fc:	460d      	mov	r5, r1
 800e1fe:	b09d      	sub	sp, #116	; 0x74
 800e200:	4614      	mov	r4, r2
 800e202:	4698      	mov	r8, r3
 800e204:	4606      	mov	r6, r0
 800e206:	b118      	cbz	r0, 800e210 <_vfiprintf_r+0x18>
 800e208:	6983      	ldr	r3, [r0, #24]
 800e20a:	b90b      	cbnz	r3, 800e210 <_vfiprintf_r+0x18>
 800e20c:	f000 fb06 	bl	800e81c <__sinit>
 800e210:	4b89      	ldr	r3, [pc, #548]	; (800e438 <_vfiprintf_r+0x240>)
 800e212:	429d      	cmp	r5, r3
 800e214:	d11b      	bne.n	800e24e <_vfiprintf_r+0x56>
 800e216:	6875      	ldr	r5, [r6, #4]
 800e218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e21a:	07d9      	lsls	r1, r3, #31
 800e21c:	d405      	bmi.n	800e22a <_vfiprintf_r+0x32>
 800e21e:	89ab      	ldrh	r3, [r5, #12]
 800e220:	059a      	lsls	r2, r3, #22
 800e222:	d402      	bmi.n	800e22a <_vfiprintf_r+0x32>
 800e224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e226:	f000 fb97 	bl	800e958 <__retarget_lock_acquire_recursive>
 800e22a:	89ab      	ldrh	r3, [r5, #12]
 800e22c:	071b      	lsls	r3, r3, #28
 800e22e:	d501      	bpl.n	800e234 <_vfiprintf_r+0x3c>
 800e230:	692b      	ldr	r3, [r5, #16]
 800e232:	b9eb      	cbnz	r3, 800e270 <_vfiprintf_r+0x78>
 800e234:	4629      	mov	r1, r5
 800e236:	4630      	mov	r0, r6
 800e238:	f000 f960 	bl	800e4fc <__swsetup_r>
 800e23c:	b1c0      	cbz	r0, 800e270 <_vfiprintf_r+0x78>
 800e23e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e240:	07dc      	lsls	r4, r3, #31
 800e242:	d50e      	bpl.n	800e262 <_vfiprintf_r+0x6a>
 800e244:	f04f 30ff 	mov.w	r0, #4294967295
 800e248:	b01d      	add	sp, #116	; 0x74
 800e24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e24e:	4b7b      	ldr	r3, [pc, #492]	; (800e43c <_vfiprintf_r+0x244>)
 800e250:	429d      	cmp	r5, r3
 800e252:	d101      	bne.n	800e258 <_vfiprintf_r+0x60>
 800e254:	68b5      	ldr	r5, [r6, #8]
 800e256:	e7df      	b.n	800e218 <_vfiprintf_r+0x20>
 800e258:	4b79      	ldr	r3, [pc, #484]	; (800e440 <_vfiprintf_r+0x248>)
 800e25a:	429d      	cmp	r5, r3
 800e25c:	bf08      	it	eq
 800e25e:	68f5      	ldreq	r5, [r6, #12]
 800e260:	e7da      	b.n	800e218 <_vfiprintf_r+0x20>
 800e262:	89ab      	ldrh	r3, [r5, #12]
 800e264:	0598      	lsls	r0, r3, #22
 800e266:	d4ed      	bmi.n	800e244 <_vfiprintf_r+0x4c>
 800e268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e26a:	f000 fb76 	bl	800e95a <__retarget_lock_release_recursive>
 800e26e:	e7e9      	b.n	800e244 <_vfiprintf_r+0x4c>
 800e270:	2300      	movs	r3, #0
 800e272:	9309      	str	r3, [sp, #36]	; 0x24
 800e274:	2320      	movs	r3, #32
 800e276:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e27a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e27e:	2330      	movs	r3, #48	; 0x30
 800e280:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e444 <_vfiprintf_r+0x24c>
 800e284:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e288:	f04f 0901 	mov.w	r9, #1
 800e28c:	4623      	mov	r3, r4
 800e28e:	469a      	mov	sl, r3
 800e290:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e294:	b10a      	cbz	r2, 800e29a <_vfiprintf_r+0xa2>
 800e296:	2a25      	cmp	r2, #37	; 0x25
 800e298:	d1f9      	bne.n	800e28e <_vfiprintf_r+0x96>
 800e29a:	ebba 0b04 	subs.w	fp, sl, r4
 800e29e:	d00b      	beq.n	800e2b8 <_vfiprintf_r+0xc0>
 800e2a0:	465b      	mov	r3, fp
 800e2a2:	4622      	mov	r2, r4
 800e2a4:	4629      	mov	r1, r5
 800e2a6:	4630      	mov	r0, r6
 800e2a8:	f7ff ff94 	bl	800e1d4 <__sfputs_r>
 800e2ac:	3001      	adds	r0, #1
 800e2ae:	f000 80aa 	beq.w	800e406 <_vfiprintf_r+0x20e>
 800e2b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2b4:	445a      	add	r2, fp
 800e2b6:	9209      	str	r2, [sp, #36]	; 0x24
 800e2b8:	f89a 3000 	ldrb.w	r3, [sl]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	f000 80a2 	beq.w	800e406 <_vfiprintf_r+0x20e>
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2cc:	f10a 0a01 	add.w	sl, sl, #1
 800e2d0:	9304      	str	r3, [sp, #16]
 800e2d2:	9307      	str	r3, [sp, #28]
 800e2d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2d8:	931a      	str	r3, [sp, #104]	; 0x68
 800e2da:	4654      	mov	r4, sl
 800e2dc:	2205      	movs	r2, #5
 800e2de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2e2:	4858      	ldr	r0, [pc, #352]	; (800e444 <_vfiprintf_r+0x24c>)
 800e2e4:	f7f1 ffb4 	bl	8000250 <memchr>
 800e2e8:	9a04      	ldr	r2, [sp, #16]
 800e2ea:	b9d8      	cbnz	r0, 800e324 <_vfiprintf_r+0x12c>
 800e2ec:	06d1      	lsls	r1, r2, #27
 800e2ee:	bf44      	itt	mi
 800e2f0:	2320      	movmi	r3, #32
 800e2f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2f6:	0713      	lsls	r3, r2, #28
 800e2f8:	bf44      	itt	mi
 800e2fa:	232b      	movmi	r3, #43	; 0x2b
 800e2fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e300:	f89a 3000 	ldrb.w	r3, [sl]
 800e304:	2b2a      	cmp	r3, #42	; 0x2a
 800e306:	d015      	beq.n	800e334 <_vfiprintf_r+0x13c>
 800e308:	9a07      	ldr	r2, [sp, #28]
 800e30a:	4654      	mov	r4, sl
 800e30c:	2000      	movs	r0, #0
 800e30e:	f04f 0c0a 	mov.w	ip, #10
 800e312:	4621      	mov	r1, r4
 800e314:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e318:	3b30      	subs	r3, #48	; 0x30
 800e31a:	2b09      	cmp	r3, #9
 800e31c:	d94e      	bls.n	800e3bc <_vfiprintf_r+0x1c4>
 800e31e:	b1b0      	cbz	r0, 800e34e <_vfiprintf_r+0x156>
 800e320:	9207      	str	r2, [sp, #28]
 800e322:	e014      	b.n	800e34e <_vfiprintf_r+0x156>
 800e324:	eba0 0308 	sub.w	r3, r0, r8
 800e328:	fa09 f303 	lsl.w	r3, r9, r3
 800e32c:	4313      	orrs	r3, r2
 800e32e:	9304      	str	r3, [sp, #16]
 800e330:	46a2      	mov	sl, r4
 800e332:	e7d2      	b.n	800e2da <_vfiprintf_r+0xe2>
 800e334:	9b03      	ldr	r3, [sp, #12]
 800e336:	1d19      	adds	r1, r3, #4
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	9103      	str	r1, [sp, #12]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	bfbb      	ittet	lt
 800e340:	425b      	neglt	r3, r3
 800e342:	f042 0202 	orrlt.w	r2, r2, #2
 800e346:	9307      	strge	r3, [sp, #28]
 800e348:	9307      	strlt	r3, [sp, #28]
 800e34a:	bfb8      	it	lt
 800e34c:	9204      	strlt	r2, [sp, #16]
 800e34e:	7823      	ldrb	r3, [r4, #0]
 800e350:	2b2e      	cmp	r3, #46	; 0x2e
 800e352:	d10c      	bne.n	800e36e <_vfiprintf_r+0x176>
 800e354:	7863      	ldrb	r3, [r4, #1]
 800e356:	2b2a      	cmp	r3, #42	; 0x2a
 800e358:	d135      	bne.n	800e3c6 <_vfiprintf_r+0x1ce>
 800e35a:	9b03      	ldr	r3, [sp, #12]
 800e35c:	1d1a      	adds	r2, r3, #4
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	9203      	str	r2, [sp, #12]
 800e362:	2b00      	cmp	r3, #0
 800e364:	bfb8      	it	lt
 800e366:	f04f 33ff 	movlt.w	r3, #4294967295
 800e36a:	3402      	adds	r4, #2
 800e36c:	9305      	str	r3, [sp, #20]
 800e36e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e454 <_vfiprintf_r+0x25c>
 800e372:	7821      	ldrb	r1, [r4, #0]
 800e374:	2203      	movs	r2, #3
 800e376:	4650      	mov	r0, sl
 800e378:	f7f1 ff6a 	bl	8000250 <memchr>
 800e37c:	b140      	cbz	r0, 800e390 <_vfiprintf_r+0x198>
 800e37e:	2340      	movs	r3, #64	; 0x40
 800e380:	eba0 000a 	sub.w	r0, r0, sl
 800e384:	fa03 f000 	lsl.w	r0, r3, r0
 800e388:	9b04      	ldr	r3, [sp, #16]
 800e38a:	4303      	orrs	r3, r0
 800e38c:	3401      	adds	r4, #1
 800e38e:	9304      	str	r3, [sp, #16]
 800e390:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e394:	482c      	ldr	r0, [pc, #176]	; (800e448 <_vfiprintf_r+0x250>)
 800e396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e39a:	2206      	movs	r2, #6
 800e39c:	f7f1 ff58 	bl	8000250 <memchr>
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d03f      	beq.n	800e424 <_vfiprintf_r+0x22c>
 800e3a4:	4b29      	ldr	r3, [pc, #164]	; (800e44c <_vfiprintf_r+0x254>)
 800e3a6:	bb1b      	cbnz	r3, 800e3f0 <_vfiprintf_r+0x1f8>
 800e3a8:	9b03      	ldr	r3, [sp, #12]
 800e3aa:	3307      	adds	r3, #7
 800e3ac:	f023 0307 	bic.w	r3, r3, #7
 800e3b0:	3308      	adds	r3, #8
 800e3b2:	9303      	str	r3, [sp, #12]
 800e3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3b6:	443b      	add	r3, r7
 800e3b8:	9309      	str	r3, [sp, #36]	; 0x24
 800e3ba:	e767      	b.n	800e28c <_vfiprintf_r+0x94>
 800e3bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3c0:	460c      	mov	r4, r1
 800e3c2:	2001      	movs	r0, #1
 800e3c4:	e7a5      	b.n	800e312 <_vfiprintf_r+0x11a>
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	3401      	adds	r4, #1
 800e3ca:	9305      	str	r3, [sp, #20]
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	f04f 0c0a 	mov.w	ip, #10
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3d8:	3a30      	subs	r2, #48	; 0x30
 800e3da:	2a09      	cmp	r2, #9
 800e3dc:	d903      	bls.n	800e3e6 <_vfiprintf_r+0x1ee>
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d0c5      	beq.n	800e36e <_vfiprintf_r+0x176>
 800e3e2:	9105      	str	r1, [sp, #20]
 800e3e4:	e7c3      	b.n	800e36e <_vfiprintf_r+0x176>
 800e3e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e7f0      	b.n	800e3d2 <_vfiprintf_r+0x1da>
 800e3f0:	ab03      	add	r3, sp, #12
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	462a      	mov	r2, r5
 800e3f6:	4b16      	ldr	r3, [pc, #88]	; (800e450 <_vfiprintf_r+0x258>)
 800e3f8:	a904      	add	r1, sp, #16
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f7fc f934 	bl	800a668 <_printf_float>
 800e400:	4607      	mov	r7, r0
 800e402:	1c78      	adds	r0, r7, #1
 800e404:	d1d6      	bne.n	800e3b4 <_vfiprintf_r+0x1bc>
 800e406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e408:	07d9      	lsls	r1, r3, #31
 800e40a:	d405      	bmi.n	800e418 <_vfiprintf_r+0x220>
 800e40c:	89ab      	ldrh	r3, [r5, #12]
 800e40e:	059a      	lsls	r2, r3, #22
 800e410:	d402      	bmi.n	800e418 <_vfiprintf_r+0x220>
 800e412:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e414:	f000 faa1 	bl	800e95a <__retarget_lock_release_recursive>
 800e418:	89ab      	ldrh	r3, [r5, #12]
 800e41a:	065b      	lsls	r3, r3, #25
 800e41c:	f53f af12 	bmi.w	800e244 <_vfiprintf_r+0x4c>
 800e420:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e422:	e711      	b.n	800e248 <_vfiprintf_r+0x50>
 800e424:	ab03      	add	r3, sp, #12
 800e426:	9300      	str	r3, [sp, #0]
 800e428:	462a      	mov	r2, r5
 800e42a:	4b09      	ldr	r3, [pc, #36]	; (800e450 <_vfiprintf_r+0x258>)
 800e42c:	a904      	add	r1, sp, #16
 800e42e:	4630      	mov	r0, r6
 800e430:	f7fc fba6 	bl	800ab80 <_printf_i>
 800e434:	e7e4      	b.n	800e400 <_vfiprintf_r+0x208>
 800e436:	bf00      	nop
 800e438:	0800f59c 	.word	0x0800f59c
 800e43c:	0800f5bc 	.word	0x0800f5bc
 800e440:	0800f57c 	.word	0x0800f57c
 800e444:	0800f52c 	.word	0x0800f52c
 800e448:	0800f536 	.word	0x0800f536
 800e44c:	0800a669 	.word	0x0800a669
 800e450:	0800e1d5 	.word	0x0800e1d5
 800e454:	0800f532 	.word	0x0800f532

0800e458 <__swbuf_r>:
 800e458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e45a:	460e      	mov	r6, r1
 800e45c:	4614      	mov	r4, r2
 800e45e:	4605      	mov	r5, r0
 800e460:	b118      	cbz	r0, 800e46a <__swbuf_r+0x12>
 800e462:	6983      	ldr	r3, [r0, #24]
 800e464:	b90b      	cbnz	r3, 800e46a <__swbuf_r+0x12>
 800e466:	f000 f9d9 	bl	800e81c <__sinit>
 800e46a:	4b21      	ldr	r3, [pc, #132]	; (800e4f0 <__swbuf_r+0x98>)
 800e46c:	429c      	cmp	r4, r3
 800e46e:	d12b      	bne.n	800e4c8 <__swbuf_r+0x70>
 800e470:	686c      	ldr	r4, [r5, #4]
 800e472:	69a3      	ldr	r3, [r4, #24]
 800e474:	60a3      	str	r3, [r4, #8]
 800e476:	89a3      	ldrh	r3, [r4, #12]
 800e478:	071a      	lsls	r2, r3, #28
 800e47a:	d52f      	bpl.n	800e4dc <__swbuf_r+0x84>
 800e47c:	6923      	ldr	r3, [r4, #16]
 800e47e:	b36b      	cbz	r3, 800e4dc <__swbuf_r+0x84>
 800e480:	6923      	ldr	r3, [r4, #16]
 800e482:	6820      	ldr	r0, [r4, #0]
 800e484:	1ac0      	subs	r0, r0, r3
 800e486:	6963      	ldr	r3, [r4, #20]
 800e488:	b2f6      	uxtb	r6, r6
 800e48a:	4283      	cmp	r3, r0
 800e48c:	4637      	mov	r7, r6
 800e48e:	dc04      	bgt.n	800e49a <__swbuf_r+0x42>
 800e490:	4621      	mov	r1, r4
 800e492:	4628      	mov	r0, r5
 800e494:	f000 f92e 	bl	800e6f4 <_fflush_r>
 800e498:	bb30      	cbnz	r0, 800e4e8 <__swbuf_r+0x90>
 800e49a:	68a3      	ldr	r3, [r4, #8]
 800e49c:	3b01      	subs	r3, #1
 800e49e:	60a3      	str	r3, [r4, #8]
 800e4a0:	6823      	ldr	r3, [r4, #0]
 800e4a2:	1c5a      	adds	r2, r3, #1
 800e4a4:	6022      	str	r2, [r4, #0]
 800e4a6:	701e      	strb	r6, [r3, #0]
 800e4a8:	6963      	ldr	r3, [r4, #20]
 800e4aa:	3001      	adds	r0, #1
 800e4ac:	4283      	cmp	r3, r0
 800e4ae:	d004      	beq.n	800e4ba <__swbuf_r+0x62>
 800e4b0:	89a3      	ldrh	r3, [r4, #12]
 800e4b2:	07db      	lsls	r3, r3, #31
 800e4b4:	d506      	bpl.n	800e4c4 <__swbuf_r+0x6c>
 800e4b6:	2e0a      	cmp	r6, #10
 800e4b8:	d104      	bne.n	800e4c4 <__swbuf_r+0x6c>
 800e4ba:	4621      	mov	r1, r4
 800e4bc:	4628      	mov	r0, r5
 800e4be:	f000 f919 	bl	800e6f4 <_fflush_r>
 800e4c2:	b988      	cbnz	r0, 800e4e8 <__swbuf_r+0x90>
 800e4c4:	4638      	mov	r0, r7
 800e4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4c8:	4b0a      	ldr	r3, [pc, #40]	; (800e4f4 <__swbuf_r+0x9c>)
 800e4ca:	429c      	cmp	r4, r3
 800e4cc:	d101      	bne.n	800e4d2 <__swbuf_r+0x7a>
 800e4ce:	68ac      	ldr	r4, [r5, #8]
 800e4d0:	e7cf      	b.n	800e472 <__swbuf_r+0x1a>
 800e4d2:	4b09      	ldr	r3, [pc, #36]	; (800e4f8 <__swbuf_r+0xa0>)
 800e4d4:	429c      	cmp	r4, r3
 800e4d6:	bf08      	it	eq
 800e4d8:	68ec      	ldreq	r4, [r5, #12]
 800e4da:	e7ca      	b.n	800e472 <__swbuf_r+0x1a>
 800e4dc:	4621      	mov	r1, r4
 800e4de:	4628      	mov	r0, r5
 800e4e0:	f000 f80c 	bl	800e4fc <__swsetup_r>
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	d0cb      	beq.n	800e480 <__swbuf_r+0x28>
 800e4e8:	f04f 37ff 	mov.w	r7, #4294967295
 800e4ec:	e7ea      	b.n	800e4c4 <__swbuf_r+0x6c>
 800e4ee:	bf00      	nop
 800e4f0:	0800f59c 	.word	0x0800f59c
 800e4f4:	0800f5bc 	.word	0x0800f5bc
 800e4f8:	0800f57c 	.word	0x0800f57c

0800e4fc <__swsetup_r>:
 800e4fc:	4b32      	ldr	r3, [pc, #200]	; (800e5c8 <__swsetup_r+0xcc>)
 800e4fe:	b570      	push	{r4, r5, r6, lr}
 800e500:	681d      	ldr	r5, [r3, #0]
 800e502:	4606      	mov	r6, r0
 800e504:	460c      	mov	r4, r1
 800e506:	b125      	cbz	r5, 800e512 <__swsetup_r+0x16>
 800e508:	69ab      	ldr	r3, [r5, #24]
 800e50a:	b913      	cbnz	r3, 800e512 <__swsetup_r+0x16>
 800e50c:	4628      	mov	r0, r5
 800e50e:	f000 f985 	bl	800e81c <__sinit>
 800e512:	4b2e      	ldr	r3, [pc, #184]	; (800e5cc <__swsetup_r+0xd0>)
 800e514:	429c      	cmp	r4, r3
 800e516:	d10f      	bne.n	800e538 <__swsetup_r+0x3c>
 800e518:	686c      	ldr	r4, [r5, #4]
 800e51a:	89a3      	ldrh	r3, [r4, #12]
 800e51c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e520:	0719      	lsls	r1, r3, #28
 800e522:	d42c      	bmi.n	800e57e <__swsetup_r+0x82>
 800e524:	06dd      	lsls	r5, r3, #27
 800e526:	d411      	bmi.n	800e54c <__swsetup_r+0x50>
 800e528:	2309      	movs	r3, #9
 800e52a:	6033      	str	r3, [r6, #0]
 800e52c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e530:	81a3      	strh	r3, [r4, #12]
 800e532:	f04f 30ff 	mov.w	r0, #4294967295
 800e536:	e03e      	b.n	800e5b6 <__swsetup_r+0xba>
 800e538:	4b25      	ldr	r3, [pc, #148]	; (800e5d0 <__swsetup_r+0xd4>)
 800e53a:	429c      	cmp	r4, r3
 800e53c:	d101      	bne.n	800e542 <__swsetup_r+0x46>
 800e53e:	68ac      	ldr	r4, [r5, #8]
 800e540:	e7eb      	b.n	800e51a <__swsetup_r+0x1e>
 800e542:	4b24      	ldr	r3, [pc, #144]	; (800e5d4 <__swsetup_r+0xd8>)
 800e544:	429c      	cmp	r4, r3
 800e546:	bf08      	it	eq
 800e548:	68ec      	ldreq	r4, [r5, #12]
 800e54a:	e7e6      	b.n	800e51a <__swsetup_r+0x1e>
 800e54c:	0758      	lsls	r0, r3, #29
 800e54e:	d512      	bpl.n	800e576 <__swsetup_r+0x7a>
 800e550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e552:	b141      	cbz	r1, 800e566 <__swsetup_r+0x6a>
 800e554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e558:	4299      	cmp	r1, r3
 800e55a:	d002      	beq.n	800e562 <__swsetup_r+0x66>
 800e55c:	4630      	mov	r0, r6
 800e55e:	f7ff fb25 	bl	800dbac <_free_r>
 800e562:	2300      	movs	r3, #0
 800e564:	6363      	str	r3, [r4, #52]	; 0x34
 800e566:	89a3      	ldrh	r3, [r4, #12]
 800e568:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e56c:	81a3      	strh	r3, [r4, #12]
 800e56e:	2300      	movs	r3, #0
 800e570:	6063      	str	r3, [r4, #4]
 800e572:	6923      	ldr	r3, [r4, #16]
 800e574:	6023      	str	r3, [r4, #0]
 800e576:	89a3      	ldrh	r3, [r4, #12]
 800e578:	f043 0308 	orr.w	r3, r3, #8
 800e57c:	81a3      	strh	r3, [r4, #12]
 800e57e:	6923      	ldr	r3, [r4, #16]
 800e580:	b94b      	cbnz	r3, 800e596 <__swsetup_r+0x9a>
 800e582:	89a3      	ldrh	r3, [r4, #12]
 800e584:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e58c:	d003      	beq.n	800e596 <__swsetup_r+0x9a>
 800e58e:	4621      	mov	r1, r4
 800e590:	4630      	mov	r0, r6
 800e592:	f000 fa09 	bl	800e9a8 <__smakebuf_r>
 800e596:	89a0      	ldrh	r0, [r4, #12]
 800e598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e59c:	f010 0301 	ands.w	r3, r0, #1
 800e5a0:	d00a      	beq.n	800e5b8 <__swsetup_r+0xbc>
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	60a3      	str	r3, [r4, #8]
 800e5a6:	6963      	ldr	r3, [r4, #20]
 800e5a8:	425b      	negs	r3, r3
 800e5aa:	61a3      	str	r3, [r4, #24]
 800e5ac:	6923      	ldr	r3, [r4, #16]
 800e5ae:	b943      	cbnz	r3, 800e5c2 <__swsetup_r+0xc6>
 800e5b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e5b4:	d1ba      	bne.n	800e52c <__swsetup_r+0x30>
 800e5b6:	bd70      	pop	{r4, r5, r6, pc}
 800e5b8:	0781      	lsls	r1, r0, #30
 800e5ba:	bf58      	it	pl
 800e5bc:	6963      	ldrpl	r3, [r4, #20]
 800e5be:	60a3      	str	r3, [r4, #8]
 800e5c0:	e7f4      	b.n	800e5ac <__swsetup_r+0xb0>
 800e5c2:	2000      	movs	r0, #0
 800e5c4:	e7f7      	b.n	800e5b6 <__swsetup_r+0xba>
 800e5c6:	bf00      	nop
 800e5c8:	20000024 	.word	0x20000024
 800e5cc:	0800f59c 	.word	0x0800f59c
 800e5d0:	0800f5bc 	.word	0x0800f5bc
 800e5d4:	0800f57c 	.word	0x0800f57c

0800e5d8 <abort>:
 800e5d8:	b508      	push	{r3, lr}
 800e5da:	2006      	movs	r0, #6
 800e5dc:	f000 fa54 	bl	800ea88 <raise>
 800e5e0:	2001      	movs	r0, #1
 800e5e2:	f7f3 fdb9 	bl	8002158 <_exit>
	...

0800e5e8 <__sflush_r>:
 800e5e8:	898a      	ldrh	r2, [r1, #12]
 800e5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ee:	4605      	mov	r5, r0
 800e5f0:	0710      	lsls	r0, r2, #28
 800e5f2:	460c      	mov	r4, r1
 800e5f4:	d458      	bmi.n	800e6a8 <__sflush_r+0xc0>
 800e5f6:	684b      	ldr	r3, [r1, #4]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	dc05      	bgt.n	800e608 <__sflush_r+0x20>
 800e5fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	dc02      	bgt.n	800e608 <__sflush_r+0x20>
 800e602:	2000      	movs	r0, #0
 800e604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e60a:	2e00      	cmp	r6, #0
 800e60c:	d0f9      	beq.n	800e602 <__sflush_r+0x1a>
 800e60e:	2300      	movs	r3, #0
 800e610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e614:	682f      	ldr	r7, [r5, #0]
 800e616:	602b      	str	r3, [r5, #0]
 800e618:	d032      	beq.n	800e680 <__sflush_r+0x98>
 800e61a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e61c:	89a3      	ldrh	r3, [r4, #12]
 800e61e:	075a      	lsls	r2, r3, #29
 800e620:	d505      	bpl.n	800e62e <__sflush_r+0x46>
 800e622:	6863      	ldr	r3, [r4, #4]
 800e624:	1ac0      	subs	r0, r0, r3
 800e626:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e628:	b10b      	cbz	r3, 800e62e <__sflush_r+0x46>
 800e62a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e62c:	1ac0      	subs	r0, r0, r3
 800e62e:	2300      	movs	r3, #0
 800e630:	4602      	mov	r2, r0
 800e632:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e634:	6a21      	ldr	r1, [r4, #32]
 800e636:	4628      	mov	r0, r5
 800e638:	47b0      	blx	r6
 800e63a:	1c43      	adds	r3, r0, #1
 800e63c:	89a3      	ldrh	r3, [r4, #12]
 800e63e:	d106      	bne.n	800e64e <__sflush_r+0x66>
 800e640:	6829      	ldr	r1, [r5, #0]
 800e642:	291d      	cmp	r1, #29
 800e644:	d82c      	bhi.n	800e6a0 <__sflush_r+0xb8>
 800e646:	4a2a      	ldr	r2, [pc, #168]	; (800e6f0 <__sflush_r+0x108>)
 800e648:	40ca      	lsrs	r2, r1
 800e64a:	07d6      	lsls	r6, r2, #31
 800e64c:	d528      	bpl.n	800e6a0 <__sflush_r+0xb8>
 800e64e:	2200      	movs	r2, #0
 800e650:	6062      	str	r2, [r4, #4]
 800e652:	04d9      	lsls	r1, r3, #19
 800e654:	6922      	ldr	r2, [r4, #16]
 800e656:	6022      	str	r2, [r4, #0]
 800e658:	d504      	bpl.n	800e664 <__sflush_r+0x7c>
 800e65a:	1c42      	adds	r2, r0, #1
 800e65c:	d101      	bne.n	800e662 <__sflush_r+0x7a>
 800e65e:	682b      	ldr	r3, [r5, #0]
 800e660:	b903      	cbnz	r3, 800e664 <__sflush_r+0x7c>
 800e662:	6560      	str	r0, [r4, #84]	; 0x54
 800e664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e666:	602f      	str	r7, [r5, #0]
 800e668:	2900      	cmp	r1, #0
 800e66a:	d0ca      	beq.n	800e602 <__sflush_r+0x1a>
 800e66c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e670:	4299      	cmp	r1, r3
 800e672:	d002      	beq.n	800e67a <__sflush_r+0x92>
 800e674:	4628      	mov	r0, r5
 800e676:	f7ff fa99 	bl	800dbac <_free_r>
 800e67a:	2000      	movs	r0, #0
 800e67c:	6360      	str	r0, [r4, #52]	; 0x34
 800e67e:	e7c1      	b.n	800e604 <__sflush_r+0x1c>
 800e680:	6a21      	ldr	r1, [r4, #32]
 800e682:	2301      	movs	r3, #1
 800e684:	4628      	mov	r0, r5
 800e686:	47b0      	blx	r6
 800e688:	1c41      	adds	r1, r0, #1
 800e68a:	d1c7      	bne.n	800e61c <__sflush_r+0x34>
 800e68c:	682b      	ldr	r3, [r5, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d0c4      	beq.n	800e61c <__sflush_r+0x34>
 800e692:	2b1d      	cmp	r3, #29
 800e694:	d001      	beq.n	800e69a <__sflush_r+0xb2>
 800e696:	2b16      	cmp	r3, #22
 800e698:	d101      	bne.n	800e69e <__sflush_r+0xb6>
 800e69a:	602f      	str	r7, [r5, #0]
 800e69c:	e7b1      	b.n	800e602 <__sflush_r+0x1a>
 800e69e:	89a3      	ldrh	r3, [r4, #12]
 800e6a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6a4:	81a3      	strh	r3, [r4, #12]
 800e6a6:	e7ad      	b.n	800e604 <__sflush_r+0x1c>
 800e6a8:	690f      	ldr	r7, [r1, #16]
 800e6aa:	2f00      	cmp	r7, #0
 800e6ac:	d0a9      	beq.n	800e602 <__sflush_r+0x1a>
 800e6ae:	0793      	lsls	r3, r2, #30
 800e6b0:	680e      	ldr	r6, [r1, #0]
 800e6b2:	bf08      	it	eq
 800e6b4:	694b      	ldreq	r3, [r1, #20]
 800e6b6:	600f      	str	r7, [r1, #0]
 800e6b8:	bf18      	it	ne
 800e6ba:	2300      	movne	r3, #0
 800e6bc:	eba6 0807 	sub.w	r8, r6, r7
 800e6c0:	608b      	str	r3, [r1, #8]
 800e6c2:	f1b8 0f00 	cmp.w	r8, #0
 800e6c6:	dd9c      	ble.n	800e602 <__sflush_r+0x1a>
 800e6c8:	6a21      	ldr	r1, [r4, #32]
 800e6ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e6cc:	4643      	mov	r3, r8
 800e6ce:	463a      	mov	r2, r7
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	47b0      	blx	r6
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	dc06      	bgt.n	800e6e6 <__sflush_r+0xfe>
 800e6d8:	89a3      	ldrh	r3, [r4, #12]
 800e6da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6de:	81a3      	strh	r3, [r4, #12]
 800e6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e4:	e78e      	b.n	800e604 <__sflush_r+0x1c>
 800e6e6:	4407      	add	r7, r0
 800e6e8:	eba8 0800 	sub.w	r8, r8, r0
 800e6ec:	e7e9      	b.n	800e6c2 <__sflush_r+0xda>
 800e6ee:	bf00      	nop
 800e6f0:	20400001 	.word	0x20400001

0800e6f4 <_fflush_r>:
 800e6f4:	b538      	push	{r3, r4, r5, lr}
 800e6f6:	690b      	ldr	r3, [r1, #16]
 800e6f8:	4605      	mov	r5, r0
 800e6fa:	460c      	mov	r4, r1
 800e6fc:	b913      	cbnz	r3, 800e704 <_fflush_r+0x10>
 800e6fe:	2500      	movs	r5, #0
 800e700:	4628      	mov	r0, r5
 800e702:	bd38      	pop	{r3, r4, r5, pc}
 800e704:	b118      	cbz	r0, 800e70e <_fflush_r+0x1a>
 800e706:	6983      	ldr	r3, [r0, #24]
 800e708:	b90b      	cbnz	r3, 800e70e <_fflush_r+0x1a>
 800e70a:	f000 f887 	bl	800e81c <__sinit>
 800e70e:	4b14      	ldr	r3, [pc, #80]	; (800e760 <_fflush_r+0x6c>)
 800e710:	429c      	cmp	r4, r3
 800e712:	d11b      	bne.n	800e74c <_fflush_r+0x58>
 800e714:	686c      	ldr	r4, [r5, #4]
 800e716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d0ef      	beq.n	800e6fe <_fflush_r+0xa>
 800e71e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e720:	07d0      	lsls	r0, r2, #31
 800e722:	d404      	bmi.n	800e72e <_fflush_r+0x3a>
 800e724:	0599      	lsls	r1, r3, #22
 800e726:	d402      	bmi.n	800e72e <_fflush_r+0x3a>
 800e728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e72a:	f000 f915 	bl	800e958 <__retarget_lock_acquire_recursive>
 800e72e:	4628      	mov	r0, r5
 800e730:	4621      	mov	r1, r4
 800e732:	f7ff ff59 	bl	800e5e8 <__sflush_r>
 800e736:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e738:	07da      	lsls	r2, r3, #31
 800e73a:	4605      	mov	r5, r0
 800e73c:	d4e0      	bmi.n	800e700 <_fflush_r+0xc>
 800e73e:	89a3      	ldrh	r3, [r4, #12]
 800e740:	059b      	lsls	r3, r3, #22
 800e742:	d4dd      	bmi.n	800e700 <_fflush_r+0xc>
 800e744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e746:	f000 f908 	bl	800e95a <__retarget_lock_release_recursive>
 800e74a:	e7d9      	b.n	800e700 <_fflush_r+0xc>
 800e74c:	4b05      	ldr	r3, [pc, #20]	; (800e764 <_fflush_r+0x70>)
 800e74e:	429c      	cmp	r4, r3
 800e750:	d101      	bne.n	800e756 <_fflush_r+0x62>
 800e752:	68ac      	ldr	r4, [r5, #8]
 800e754:	e7df      	b.n	800e716 <_fflush_r+0x22>
 800e756:	4b04      	ldr	r3, [pc, #16]	; (800e768 <_fflush_r+0x74>)
 800e758:	429c      	cmp	r4, r3
 800e75a:	bf08      	it	eq
 800e75c:	68ec      	ldreq	r4, [r5, #12]
 800e75e:	e7da      	b.n	800e716 <_fflush_r+0x22>
 800e760:	0800f59c 	.word	0x0800f59c
 800e764:	0800f5bc 	.word	0x0800f5bc
 800e768:	0800f57c 	.word	0x0800f57c

0800e76c <std>:
 800e76c:	2300      	movs	r3, #0
 800e76e:	b510      	push	{r4, lr}
 800e770:	4604      	mov	r4, r0
 800e772:	e9c0 3300 	strd	r3, r3, [r0]
 800e776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e77a:	6083      	str	r3, [r0, #8]
 800e77c:	8181      	strh	r1, [r0, #12]
 800e77e:	6643      	str	r3, [r0, #100]	; 0x64
 800e780:	81c2      	strh	r2, [r0, #14]
 800e782:	6183      	str	r3, [r0, #24]
 800e784:	4619      	mov	r1, r3
 800e786:	2208      	movs	r2, #8
 800e788:	305c      	adds	r0, #92	; 0x5c
 800e78a:	f7fb fed5 	bl	800a538 <memset>
 800e78e:	4b05      	ldr	r3, [pc, #20]	; (800e7a4 <std+0x38>)
 800e790:	6263      	str	r3, [r4, #36]	; 0x24
 800e792:	4b05      	ldr	r3, [pc, #20]	; (800e7a8 <std+0x3c>)
 800e794:	62a3      	str	r3, [r4, #40]	; 0x28
 800e796:	4b05      	ldr	r3, [pc, #20]	; (800e7ac <std+0x40>)
 800e798:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e79a:	4b05      	ldr	r3, [pc, #20]	; (800e7b0 <std+0x44>)
 800e79c:	6224      	str	r4, [r4, #32]
 800e79e:	6323      	str	r3, [r4, #48]	; 0x30
 800e7a0:	bd10      	pop	{r4, pc}
 800e7a2:	bf00      	nop
 800e7a4:	0800eac1 	.word	0x0800eac1
 800e7a8:	0800eae3 	.word	0x0800eae3
 800e7ac:	0800eb1b 	.word	0x0800eb1b
 800e7b0:	0800eb3f 	.word	0x0800eb3f

0800e7b4 <_cleanup_r>:
 800e7b4:	4901      	ldr	r1, [pc, #4]	; (800e7bc <_cleanup_r+0x8>)
 800e7b6:	f000 b8af 	b.w	800e918 <_fwalk_reent>
 800e7ba:	bf00      	nop
 800e7bc:	0800e6f5 	.word	0x0800e6f5

0800e7c0 <__sfmoreglue>:
 800e7c0:	b570      	push	{r4, r5, r6, lr}
 800e7c2:	2268      	movs	r2, #104	; 0x68
 800e7c4:	1e4d      	subs	r5, r1, #1
 800e7c6:	4355      	muls	r5, r2
 800e7c8:	460e      	mov	r6, r1
 800e7ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e7ce:	f7ff fa59 	bl	800dc84 <_malloc_r>
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	b140      	cbz	r0, 800e7e8 <__sfmoreglue+0x28>
 800e7d6:	2100      	movs	r1, #0
 800e7d8:	e9c0 1600 	strd	r1, r6, [r0]
 800e7dc:	300c      	adds	r0, #12
 800e7de:	60a0      	str	r0, [r4, #8]
 800e7e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e7e4:	f7fb fea8 	bl	800a538 <memset>
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	bd70      	pop	{r4, r5, r6, pc}

0800e7ec <__sfp_lock_acquire>:
 800e7ec:	4801      	ldr	r0, [pc, #4]	; (800e7f4 <__sfp_lock_acquire+0x8>)
 800e7ee:	f000 b8b3 	b.w	800e958 <__retarget_lock_acquire_recursive>
 800e7f2:	bf00      	nop
 800e7f4:	20002999 	.word	0x20002999

0800e7f8 <__sfp_lock_release>:
 800e7f8:	4801      	ldr	r0, [pc, #4]	; (800e800 <__sfp_lock_release+0x8>)
 800e7fa:	f000 b8ae 	b.w	800e95a <__retarget_lock_release_recursive>
 800e7fe:	bf00      	nop
 800e800:	20002999 	.word	0x20002999

0800e804 <__sinit_lock_acquire>:
 800e804:	4801      	ldr	r0, [pc, #4]	; (800e80c <__sinit_lock_acquire+0x8>)
 800e806:	f000 b8a7 	b.w	800e958 <__retarget_lock_acquire_recursive>
 800e80a:	bf00      	nop
 800e80c:	2000299a 	.word	0x2000299a

0800e810 <__sinit_lock_release>:
 800e810:	4801      	ldr	r0, [pc, #4]	; (800e818 <__sinit_lock_release+0x8>)
 800e812:	f000 b8a2 	b.w	800e95a <__retarget_lock_release_recursive>
 800e816:	bf00      	nop
 800e818:	2000299a 	.word	0x2000299a

0800e81c <__sinit>:
 800e81c:	b510      	push	{r4, lr}
 800e81e:	4604      	mov	r4, r0
 800e820:	f7ff fff0 	bl	800e804 <__sinit_lock_acquire>
 800e824:	69a3      	ldr	r3, [r4, #24]
 800e826:	b11b      	cbz	r3, 800e830 <__sinit+0x14>
 800e828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e82c:	f7ff bff0 	b.w	800e810 <__sinit_lock_release>
 800e830:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e834:	6523      	str	r3, [r4, #80]	; 0x50
 800e836:	4b13      	ldr	r3, [pc, #76]	; (800e884 <__sinit+0x68>)
 800e838:	4a13      	ldr	r2, [pc, #76]	; (800e888 <__sinit+0x6c>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e83e:	42a3      	cmp	r3, r4
 800e840:	bf04      	itt	eq
 800e842:	2301      	moveq	r3, #1
 800e844:	61a3      	streq	r3, [r4, #24]
 800e846:	4620      	mov	r0, r4
 800e848:	f000 f820 	bl	800e88c <__sfp>
 800e84c:	6060      	str	r0, [r4, #4]
 800e84e:	4620      	mov	r0, r4
 800e850:	f000 f81c 	bl	800e88c <__sfp>
 800e854:	60a0      	str	r0, [r4, #8]
 800e856:	4620      	mov	r0, r4
 800e858:	f000 f818 	bl	800e88c <__sfp>
 800e85c:	2200      	movs	r2, #0
 800e85e:	60e0      	str	r0, [r4, #12]
 800e860:	2104      	movs	r1, #4
 800e862:	6860      	ldr	r0, [r4, #4]
 800e864:	f7ff ff82 	bl	800e76c <std>
 800e868:	68a0      	ldr	r0, [r4, #8]
 800e86a:	2201      	movs	r2, #1
 800e86c:	2109      	movs	r1, #9
 800e86e:	f7ff ff7d 	bl	800e76c <std>
 800e872:	68e0      	ldr	r0, [r4, #12]
 800e874:	2202      	movs	r2, #2
 800e876:	2112      	movs	r1, #18
 800e878:	f7ff ff78 	bl	800e76c <std>
 800e87c:	2301      	movs	r3, #1
 800e87e:	61a3      	str	r3, [r4, #24]
 800e880:	e7d2      	b.n	800e828 <__sinit+0xc>
 800e882:	bf00      	nop
 800e884:	0800f138 	.word	0x0800f138
 800e888:	0800e7b5 	.word	0x0800e7b5

0800e88c <__sfp>:
 800e88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e88e:	4607      	mov	r7, r0
 800e890:	f7ff ffac 	bl	800e7ec <__sfp_lock_acquire>
 800e894:	4b1e      	ldr	r3, [pc, #120]	; (800e910 <__sfp+0x84>)
 800e896:	681e      	ldr	r6, [r3, #0]
 800e898:	69b3      	ldr	r3, [r6, #24]
 800e89a:	b913      	cbnz	r3, 800e8a2 <__sfp+0x16>
 800e89c:	4630      	mov	r0, r6
 800e89e:	f7ff ffbd 	bl	800e81c <__sinit>
 800e8a2:	3648      	adds	r6, #72	; 0x48
 800e8a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e8a8:	3b01      	subs	r3, #1
 800e8aa:	d503      	bpl.n	800e8b4 <__sfp+0x28>
 800e8ac:	6833      	ldr	r3, [r6, #0]
 800e8ae:	b30b      	cbz	r3, 800e8f4 <__sfp+0x68>
 800e8b0:	6836      	ldr	r6, [r6, #0]
 800e8b2:	e7f7      	b.n	800e8a4 <__sfp+0x18>
 800e8b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e8b8:	b9d5      	cbnz	r5, 800e8f0 <__sfp+0x64>
 800e8ba:	4b16      	ldr	r3, [pc, #88]	; (800e914 <__sfp+0x88>)
 800e8bc:	60e3      	str	r3, [r4, #12]
 800e8be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e8c2:	6665      	str	r5, [r4, #100]	; 0x64
 800e8c4:	f000 f847 	bl	800e956 <__retarget_lock_init_recursive>
 800e8c8:	f7ff ff96 	bl	800e7f8 <__sfp_lock_release>
 800e8cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e8d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e8d4:	6025      	str	r5, [r4, #0]
 800e8d6:	61a5      	str	r5, [r4, #24]
 800e8d8:	2208      	movs	r2, #8
 800e8da:	4629      	mov	r1, r5
 800e8dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e8e0:	f7fb fe2a 	bl	800a538 <memset>
 800e8e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e8e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8f0:	3468      	adds	r4, #104	; 0x68
 800e8f2:	e7d9      	b.n	800e8a8 <__sfp+0x1c>
 800e8f4:	2104      	movs	r1, #4
 800e8f6:	4638      	mov	r0, r7
 800e8f8:	f7ff ff62 	bl	800e7c0 <__sfmoreglue>
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	6030      	str	r0, [r6, #0]
 800e900:	2800      	cmp	r0, #0
 800e902:	d1d5      	bne.n	800e8b0 <__sfp+0x24>
 800e904:	f7ff ff78 	bl	800e7f8 <__sfp_lock_release>
 800e908:	230c      	movs	r3, #12
 800e90a:	603b      	str	r3, [r7, #0]
 800e90c:	e7ee      	b.n	800e8ec <__sfp+0x60>
 800e90e:	bf00      	nop
 800e910:	0800f138 	.word	0x0800f138
 800e914:	ffff0001 	.word	0xffff0001

0800e918 <_fwalk_reent>:
 800e918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e91c:	4606      	mov	r6, r0
 800e91e:	4688      	mov	r8, r1
 800e920:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e924:	2700      	movs	r7, #0
 800e926:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e92a:	f1b9 0901 	subs.w	r9, r9, #1
 800e92e:	d505      	bpl.n	800e93c <_fwalk_reent+0x24>
 800e930:	6824      	ldr	r4, [r4, #0]
 800e932:	2c00      	cmp	r4, #0
 800e934:	d1f7      	bne.n	800e926 <_fwalk_reent+0xe>
 800e936:	4638      	mov	r0, r7
 800e938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e93c:	89ab      	ldrh	r3, [r5, #12]
 800e93e:	2b01      	cmp	r3, #1
 800e940:	d907      	bls.n	800e952 <_fwalk_reent+0x3a>
 800e942:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e946:	3301      	adds	r3, #1
 800e948:	d003      	beq.n	800e952 <_fwalk_reent+0x3a>
 800e94a:	4629      	mov	r1, r5
 800e94c:	4630      	mov	r0, r6
 800e94e:	47c0      	blx	r8
 800e950:	4307      	orrs	r7, r0
 800e952:	3568      	adds	r5, #104	; 0x68
 800e954:	e7e9      	b.n	800e92a <_fwalk_reent+0x12>

0800e956 <__retarget_lock_init_recursive>:
 800e956:	4770      	bx	lr

0800e958 <__retarget_lock_acquire_recursive>:
 800e958:	4770      	bx	lr

0800e95a <__retarget_lock_release_recursive>:
 800e95a:	4770      	bx	lr

0800e95c <__swhatbuf_r>:
 800e95c:	b570      	push	{r4, r5, r6, lr}
 800e95e:	460e      	mov	r6, r1
 800e960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e964:	2900      	cmp	r1, #0
 800e966:	b096      	sub	sp, #88	; 0x58
 800e968:	4614      	mov	r4, r2
 800e96a:	461d      	mov	r5, r3
 800e96c:	da08      	bge.n	800e980 <__swhatbuf_r+0x24>
 800e96e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e972:	2200      	movs	r2, #0
 800e974:	602a      	str	r2, [r5, #0]
 800e976:	061a      	lsls	r2, r3, #24
 800e978:	d410      	bmi.n	800e99c <__swhatbuf_r+0x40>
 800e97a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e97e:	e00e      	b.n	800e99e <__swhatbuf_r+0x42>
 800e980:	466a      	mov	r2, sp
 800e982:	f000 f903 	bl	800eb8c <_fstat_r>
 800e986:	2800      	cmp	r0, #0
 800e988:	dbf1      	blt.n	800e96e <__swhatbuf_r+0x12>
 800e98a:	9a01      	ldr	r2, [sp, #4]
 800e98c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e990:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e994:	425a      	negs	r2, r3
 800e996:	415a      	adcs	r2, r3
 800e998:	602a      	str	r2, [r5, #0]
 800e99a:	e7ee      	b.n	800e97a <__swhatbuf_r+0x1e>
 800e99c:	2340      	movs	r3, #64	; 0x40
 800e99e:	2000      	movs	r0, #0
 800e9a0:	6023      	str	r3, [r4, #0]
 800e9a2:	b016      	add	sp, #88	; 0x58
 800e9a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e9a8 <__smakebuf_r>:
 800e9a8:	898b      	ldrh	r3, [r1, #12]
 800e9aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e9ac:	079d      	lsls	r5, r3, #30
 800e9ae:	4606      	mov	r6, r0
 800e9b0:	460c      	mov	r4, r1
 800e9b2:	d507      	bpl.n	800e9c4 <__smakebuf_r+0x1c>
 800e9b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e9b8:	6023      	str	r3, [r4, #0]
 800e9ba:	6123      	str	r3, [r4, #16]
 800e9bc:	2301      	movs	r3, #1
 800e9be:	6163      	str	r3, [r4, #20]
 800e9c0:	b002      	add	sp, #8
 800e9c2:	bd70      	pop	{r4, r5, r6, pc}
 800e9c4:	ab01      	add	r3, sp, #4
 800e9c6:	466a      	mov	r2, sp
 800e9c8:	f7ff ffc8 	bl	800e95c <__swhatbuf_r>
 800e9cc:	9900      	ldr	r1, [sp, #0]
 800e9ce:	4605      	mov	r5, r0
 800e9d0:	4630      	mov	r0, r6
 800e9d2:	f7ff f957 	bl	800dc84 <_malloc_r>
 800e9d6:	b948      	cbnz	r0, 800e9ec <__smakebuf_r+0x44>
 800e9d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9dc:	059a      	lsls	r2, r3, #22
 800e9de:	d4ef      	bmi.n	800e9c0 <__smakebuf_r+0x18>
 800e9e0:	f023 0303 	bic.w	r3, r3, #3
 800e9e4:	f043 0302 	orr.w	r3, r3, #2
 800e9e8:	81a3      	strh	r3, [r4, #12]
 800e9ea:	e7e3      	b.n	800e9b4 <__smakebuf_r+0xc>
 800e9ec:	4b0d      	ldr	r3, [pc, #52]	; (800ea24 <__smakebuf_r+0x7c>)
 800e9ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800e9f0:	89a3      	ldrh	r3, [r4, #12]
 800e9f2:	6020      	str	r0, [r4, #0]
 800e9f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9f8:	81a3      	strh	r3, [r4, #12]
 800e9fa:	9b00      	ldr	r3, [sp, #0]
 800e9fc:	6163      	str	r3, [r4, #20]
 800e9fe:	9b01      	ldr	r3, [sp, #4]
 800ea00:	6120      	str	r0, [r4, #16]
 800ea02:	b15b      	cbz	r3, 800ea1c <__smakebuf_r+0x74>
 800ea04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea08:	4630      	mov	r0, r6
 800ea0a:	f000 f8d1 	bl	800ebb0 <_isatty_r>
 800ea0e:	b128      	cbz	r0, 800ea1c <__smakebuf_r+0x74>
 800ea10:	89a3      	ldrh	r3, [r4, #12]
 800ea12:	f023 0303 	bic.w	r3, r3, #3
 800ea16:	f043 0301 	orr.w	r3, r3, #1
 800ea1a:	81a3      	strh	r3, [r4, #12]
 800ea1c:	89a0      	ldrh	r0, [r4, #12]
 800ea1e:	4305      	orrs	r5, r0
 800ea20:	81a5      	strh	r5, [r4, #12]
 800ea22:	e7cd      	b.n	800e9c0 <__smakebuf_r+0x18>
 800ea24:	0800e7b5 	.word	0x0800e7b5

0800ea28 <_malloc_usable_size_r>:
 800ea28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea2c:	1f18      	subs	r0, r3, #4
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	bfbc      	itt	lt
 800ea32:	580b      	ldrlt	r3, [r1, r0]
 800ea34:	18c0      	addlt	r0, r0, r3
 800ea36:	4770      	bx	lr

0800ea38 <_raise_r>:
 800ea38:	291f      	cmp	r1, #31
 800ea3a:	b538      	push	{r3, r4, r5, lr}
 800ea3c:	4604      	mov	r4, r0
 800ea3e:	460d      	mov	r5, r1
 800ea40:	d904      	bls.n	800ea4c <_raise_r+0x14>
 800ea42:	2316      	movs	r3, #22
 800ea44:	6003      	str	r3, [r0, #0]
 800ea46:	f04f 30ff 	mov.w	r0, #4294967295
 800ea4a:	bd38      	pop	{r3, r4, r5, pc}
 800ea4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ea4e:	b112      	cbz	r2, 800ea56 <_raise_r+0x1e>
 800ea50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea54:	b94b      	cbnz	r3, 800ea6a <_raise_r+0x32>
 800ea56:	4620      	mov	r0, r4
 800ea58:	f000 f830 	bl	800eabc <_getpid_r>
 800ea5c:	462a      	mov	r2, r5
 800ea5e:	4601      	mov	r1, r0
 800ea60:	4620      	mov	r0, r4
 800ea62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea66:	f000 b817 	b.w	800ea98 <_kill_r>
 800ea6a:	2b01      	cmp	r3, #1
 800ea6c:	d00a      	beq.n	800ea84 <_raise_r+0x4c>
 800ea6e:	1c59      	adds	r1, r3, #1
 800ea70:	d103      	bne.n	800ea7a <_raise_r+0x42>
 800ea72:	2316      	movs	r3, #22
 800ea74:	6003      	str	r3, [r0, #0]
 800ea76:	2001      	movs	r0, #1
 800ea78:	e7e7      	b.n	800ea4a <_raise_r+0x12>
 800ea7a:	2400      	movs	r4, #0
 800ea7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ea80:	4628      	mov	r0, r5
 800ea82:	4798      	blx	r3
 800ea84:	2000      	movs	r0, #0
 800ea86:	e7e0      	b.n	800ea4a <_raise_r+0x12>

0800ea88 <raise>:
 800ea88:	4b02      	ldr	r3, [pc, #8]	; (800ea94 <raise+0xc>)
 800ea8a:	4601      	mov	r1, r0
 800ea8c:	6818      	ldr	r0, [r3, #0]
 800ea8e:	f7ff bfd3 	b.w	800ea38 <_raise_r>
 800ea92:	bf00      	nop
 800ea94:	20000024 	.word	0x20000024

0800ea98 <_kill_r>:
 800ea98:	b538      	push	{r3, r4, r5, lr}
 800ea9a:	4d07      	ldr	r5, [pc, #28]	; (800eab8 <_kill_r+0x20>)
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	4604      	mov	r4, r0
 800eaa0:	4608      	mov	r0, r1
 800eaa2:	4611      	mov	r1, r2
 800eaa4:	602b      	str	r3, [r5, #0]
 800eaa6:	f7f3 fb47 	bl	8002138 <_kill>
 800eaaa:	1c43      	adds	r3, r0, #1
 800eaac:	d102      	bne.n	800eab4 <_kill_r+0x1c>
 800eaae:	682b      	ldr	r3, [r5, #0]
 800eab0:	b103      	cbz	r3, 800eab4 <_kill_r+0x1c>
 800eab2:	6023      	str	r3, [r4, #0]
 800eab4:	bd38      	pop	{r3, r4, r5, pc}
 800eab6:	bf00      	nop
 800eab8:	20002994 	.word	0x20002994

0800eabc <_getpid_r>:
 800eabc:	f7f3 bb34 	b.w	8002128 <_getpid>

0800eac0 <__sread>:
 800eac0:	b510      	push	{r4, lr}
 800eac2:	460c      	mov	r4, r1
 800eac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eac8:	f000 f894 	bl	800ebf4 <_read_r>
 800eacc:	2800      	cmp	r0, #0
 800eace:	bfab      	itete	ge
 800ead0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ead2:	89a3      	ldrhlt	r3, [r4, #12]
 800ead4:	181b      	addge	r3, r3, r0
 800ead6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eada:	bfac      	ite	ge
 800eadc:	6563      	strge	r3, [r4, #84]	; 0x54
 800eade:	81a3      	strhlt	r3, [r4, #12]
 800eae0:	bd10      	pop	{r4, pc}

0800eae2 <__swrite>:
 800eae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae6:	461f      	mov	r7, r3
 800eae8:	898b      	ldrh	r3, [r1, #12]
 800eaea:	05db      	lsls	r3, r3, #23
 800eaec:	4605      	mov	r5, r0
 800eaee:	460c      	mov	r4, r1
 800eaf0:	4616      	mov	r6, r2
 800eaf2:	d505      	bpl.n	800eb00 <__swrite+0x1e>
 800eaf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaf8:	2302      	movs	r3, #2
 800eafa:	2200      	movs	r2, #0
 800eafc:	f000 f868 	bl	800ebd0 <_lseek_r>
 800eb00:	89a3      	ldrh	r3, [r4, #12]
 800eb02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb0a:	81a3      	strh	r3, [r4, #12]
 800eb0c:	4632      	mov	r2, r6
 800eb0e:	463b      	mov	r3, r7
 800eb10:	4628      	mov	r0, r5
 800eb12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb16:	f000 b817 	b.w	800eb48 <_write_r>

0800eb1a <__sseek>:
 800eb1a:	b510      	push	{r4, lr}
 800eb1c:	460c      	mov	r4, r1
 800eb1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb22:	f000 f855 	bl	800ebd0 <_lseek_r>
 800eb26:	1c43      	adds	r3, r0, #1
 800eb28:	89a3      	ldrh	r3, [r4, #12]
 800eb2a:	bf15      	itete	ne
 800eb2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb36:	81a3      	strheq	r3, [r4, #12]
 800eb38:	bf18      	it	ne
 800eb3a:	81a3      	strhne	r3, [r4, #12]
 800eb3c:	bd10      	pop	{r4, pc}

0800eb3e <__sclose>:
 800eb3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb42:	f000 b813 	b.w	800eb6c <_close_r>
	...

0800eb48 <_write_r>:
 800eb48:	b538      	push	{r3, r4, r5, lr}
 800eb4a:	4d07      	ldr	r5, [pc, #28]	; (800eb68 <_write_r+0x20>)
 800eb4c:	4604      	mov	r4, r0
 800eb4e:	4608      	mov	r0, r1
 800eb50:	4611      	mov	r1, r2
 800eb52:	2200      	movs	r2, #0
 800eb54:	602a      	str	r2, [r5, #0]
 800eb56:	461a      	mov	r2, r3
 800eb58:	f7f3 fb25 	bl	80021a6 <_write>
 800eb5c:	1c43      	adds	r3, r0, #1
 800eb5e:	d102      	bne.n	800eb66 <_write_r+0x1e>
 800eb60:	682b      	ldr	r3, [r5, #0]
 800eb62:	b103      	cbz	r3, 800eb66 <_write_r+0x1e>
 800eb64:	6023      	str	r3, [r4, #0]
 800eb66:	bd38      	pop	{r3, r4, r5, pc}
 800eb68:	20002994 	.word	0x20002994

0800eb6c <_close_r>:
 800eb6c:	b538      	push	{r3, r4, r5, lr}
 800eb6e:	4d06      	ldr	r5, [pc, #24]	; (800eb88 <_close_r+0x1c>)
 800eb70:	2300      	movs	r3, #0
 800eb72:	4604      	mov	r4, r0
 800eb74:	4608      	mov	r0, r1
 800eb76:	602b      	str	r3, [r5, #0]
 800eb78:	f7f3 fb31 	bl	80021de <_close>
 800eb7c:	1c43      	adds	r3, r0, #1
 800eb7e:	d102      	bne.n	800eb86 <_close_r+0x1a>
 800eb80:	682b      	ldr	r3, [r5, #0]
 800eb82:	b103      	cbz	r3, 800eb86 <_close_r+0x1a>
 800eb84:	6023      	str	r3, [r4, #0]
 800eb86:	bd38      	pop	{r3, r4, r5, pc}
 800eb88:	20002994 	.word	0x20002994

0800eb8c <_fstat_r>:
 800eb8c:	b538      	push	{r3, r4, r5, lr}
 800eb8e:	4d07      	ldr	r5, [pc, #28]	; (800ebac <_fstat_r+0x20>)
 800eb90:	2300      	movs	r3, #0
 800eb92:	4604      	mov	r4, r0
 800eb94:	4608      	mov	r0, r1
 800eb96:	4611      	mov	r1, r2
 800eb98:	602b      	str	r3, [r5, #0]
 800eb9a:	f7f3 fb2c 	bl	80021f6 <_fstat>
 800eb9e:	1c43      	adds	r3, r0, #1
 800eba0:	d102      	bne.n	800eba8 <_fstat_r+0x1c>
 800eba2:	682b      	ldr	r3, [r5, #0]
 800eba4:	b103      	cbz	r3, 800eba8 <_fstat_r+0x1c>
 800eba6:	6023      	str	r3, [r4, #0]
 800eba8:	bd38      	pop	{r3, r4, r5, pc}
 800ebaa:	bf00      	nop
 800ebac:	20002994 	.word	0x20002994

0800ebb0 <_isatty_r>:
 800ebb0:	b538      	push	{r3, r4, r5, lr}
 800ebb2:	4d06      	ldr	r5, [pc, #24]	; (800ebcc <_isatty_r+0x1c>)
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	4608      	mov	r0, r1
 800ebba:	602b      	str	r3, [r5, #0]
 800ebbc:	f7f3 fb2b 	bl	8002216 <_isatty>
 800ebc0:	1c43      	adds	r3, r0, #1
 800ebc2:	d102      	bne.n	800ebca <_isatty_r+0x1a>
 800ebc4:	682b      	ldr	r3, [r5, #0]
 800ebc6:	b103      	cbz	r3, 800ebca <_isatty_r+0x1a>
 800ebc8:	6023      	str	r3, [r4, #0]
 800ebca:	bd38      	pop	{r3, r4, r5, pc}
 800ebcc:	20002994 	.word	0x20002994

0800ebd0 <_lseek_r>:
 800ebd0:	b538      	push	{r3, r4, r5, lr}
 800ebd2:	4d07      	ldr	r5, [pc, #28]	; (800ebf0 <_lseek_r+0x20>)
 800ebd4:	4604      	mov	r4, r0
 800ebd6:	4608      	mov	r0, r1
 800ebd8:	4611      	mov	r1, r2
 800ebda:	2200      	movs	r2, #0
 800ebdc:	602a      	str	r2, [r5, #0]
 800ebde:	461a      	mov	r2, r3
 800ebe0:	f7f3 fb24 	bl	800222c <_lseek>
 800ebe4:	1c43      	adds	r3, r0, #1
 800ebe6:	d102      	bne.n	800ebee <_lseek_r+0x1e>
 800ebe8:	682b      	ldr	r3, [r5, #0]
 800ebea:	b103      	cbz	r3, 800ebee <_lseek_r+0x1e>
 800ebec:	6023      	str	r3, [r4, #0]
 800ebee:	bd38      	pop	{r3, r4, r5, pc}
 800ebf0:	20002994 	.word	0x20002994

0800ebf4 <_read_r>:
 800ebf4:	b538      	push	{r3, r4, r5, lr}
 800ebf6:	4d07      	ldr	r5, [pc, #28]	; (800ec14 <_read_r+0x20>)
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	4608      	mov	r0, r1
 800ebfc:	4611      	mov	r1, r2
 800ebfe:	2200      	movs	r2, #0
 800ec00:	602a      	str	r2, [r5, #0]
 800ec02:	461a      	mov	r2, r3
 800ec04:	f7f3 fab2 	bl	800216c <_read>
 800ec08:	1c43      	adds	r3, r0, #1
 800ec0a:	d102      	bne.n	800ec12 <_read_r+0x1e>
 800ec0c:	682b      	ldr	r3, [r5, #0]
 800ec0e:	b103      	cbz	r3, 800ec12 <_read_r+0x1e>
 800ec10:	6023      	str	r3, [r4, #0]
 800ec12:	bd38      	pop	{r3, r4, r5, pc}
 800ec14:	20002994 	.word	0x20002994

0800ec18 <_init>:
 800ec18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec1a:	bf00      	nop
 800ec1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec1e:	bc08      	pop	{r3}
 800ec20:	469e      	mov	lr, r3
 800ec22:	4770      	bx	lr

0800ec24 <_fini>:
 800ec24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec26:	bf00      	nop
 800ec28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec2a:	bc08      	pop	{r3}
 800ec2c:	469e      	mov	lr, r3
 800ec2e:	4770      	bx	lr
