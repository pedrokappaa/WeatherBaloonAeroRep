
Balloon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4a4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000918  0800f6a8  0800f6a8  000106a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ffc0  0800ffc0  000111ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ffc0  0800ffc0  00010fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ffc8  0800ffc8  000111ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ffc8  0800ffc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ffcc  0800ffcc  00010fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800ffd0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ca4  200001ec  080101bc  000111ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e90  080101bc  00011e90  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000111ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6c2  00000000  00000000  0001121a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000403c  00000000  00000000  0002b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  0002f918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001168  00000000  00000000  00030fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d06f  00000000  00000000  00032108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022315  00000000  00000000  0005f177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106cf3  00000000  00000000  0008148c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018817f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fb4  00000000  00000000  001881c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0018f178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ec 	.word	0x200001ec
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f68c 	.word	0x0800f68c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f0 	.word	0x200001f0
 800023c:	0800f68c 	.word	0x0800f68c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a2 	b.w	80009c4 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	460c      	mov	r4, r1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d14e      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000714:	4694      	mov	ip, r2
 8000716:	458c      	cmp	ip, r1
 8000718:	4686      	mov	lr, r0
 800071a:	fab2 f282 	clz	r2, r2
 800071e:	d962      	bls.n	80007e6 <__udivmoddi4+0xde>
 8000720:	b14a      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	4091      	lsls	r1, r2
 8000728:	fa20 f303 	lsr.w	r3, r0, r3
 800072c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000730:	4319      	orrs	r1, r3
 8000732:	fa00 fe02 	lsl.w	lr, r0, r2
 8000736:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800073a:	fa1f f68c 	uxth.w	r6, ip
 800073e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000742:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000746:	fb07 1114 	mls	r1, r7, r4, r1
 800074a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074e:	fb04 f106 	mul.w	r1, r4, r6
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f104 30ff 	add.w	r0, r4, #4294967295
 800075e:	f080 8112 	bcs.w	8000986 <__udivmoddi4+0x27e>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 810f 	bls.w	8000986 <__udivmoddi4+0x27e>
 8000768:	3c02      	subs	r4, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a59      	subs	r1, r3, r1
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb1 f0f7 	udiv	r0, r1, r7
 8000776:	fb07 1110 	mls	r1, r7, r0, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb00 f606 	mul.w	r6, r0, r6
 8000782:	429e      	cmp	r6, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x94>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 31ff 	add.w	r1, r0, #4294967295
 800078e:	f080 80fc 	bcs.w	800098a <__udivmoddi4+0x282>
 8000792:	429e      	cmp	r6, r3
 8000794:	f240 80f9 	bls.w	800098a <__udivmoddi4+0x282>
 8000798:	4463      	add	r3, ip
 800079a:	3802      	subs	r0, #2
 800079c:	1b9b      	subs	r3, r3, r6
 800079e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007a2:	2100      	movs	r1, #0
 80007a4:	b11d      	cbz	r5, 80007ae <__udivmoddi4+0xa6>
 80007a6:	40d3      	lsrs	r3, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	e9c5 3200 	strd	r3, r2, [r5]
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d905      	bls.n	80007c2 <__udivmoddi4+0xba>
 80007b6:	b10d      	cbz	r5, 80007bc <__udivmoddi4+0xb4>
 80007b8:	e9c5 0100 	strd	r0, r1, [r5]
 80007bc:	2100      	movs	r1, #0
 80007be:	4608      	mov	r0, r1
 80007c0:	e7f5      	b.n	80007ae <__udivmoddi4+0xa6>
 80007c2:	fab3 f183 	clz	r1, r3
 80007c6:	2900      	cmp	r1, #0
 80007c8:	d146      	bne.n	8000858 <__udivmoddi4+0x150>
 80007ca:	42a3      	cmp	r3, r4
 80007cc:	d302      	bcc.n	80007d4 <__udivmoddi4+0xcc>
 80007ce:	4290      	cmp	r0, r2
 80007d0:	f0c0 80f0 	bcc.w	80009b4 <__udivmoddi4+0x2ac>
 80007d4:	1a86      	subs	r6, r0, r2
 80007d6:	eb64 0303 	sbc.w	r3, r4, r3
 80007da:	2001      	movs	r0, #1
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d0e6      	beq.n	80007ae <__udivmoddi4+0xa6>
 80007e0:	e9c5 6300 	strd	r6, r3, [r5]
 80007e4:	e7e3      	b.n	80007ae <__udivmoddi4+0xa6>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	f040 8090 	bne.w	800090c <__udivmoddi4+0x204>
 80007ec:	eba1 040c 	sub.w	r4, r1, ip
 80007f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007f4:	fa1f f78c 	uxth.w	r7, ip
 80007f8:	2101      	movs	r1, #1
 80007fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80007fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000802:	fb08 4416 	mls	r4, r8, r6, r4
 8000806:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800080a:	fb07 f006 	mul.w	r0, r7, r6
 800080e:	4298      	cmp	r0, r3
 8000810:	d908      	bls.n	8000824 <__udivmoddi4+0x11c>
 8000812:	eb1c 0303 	adds.w	r3, ip, r3
 8000816:	f106 34ff 	add.w	r4, r6, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x11a>
 800081c:	4298      	cmp	r0, r3
 800081e:	f200 80cd 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 8000822:	4626      	mov	r6, r4
 8000824:	1a1c      	subs	r4, r3, r0
 8000826:	fa1f f38e 	uxth.w	r3, lr
 800082a:	fbb4 f0f8 	udiv	r0, r4, r8
 800082e:	fb08 4410 	mls	r4, r8, r0, r4
 8000832:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000836:	fb00 f707 	mul.w	r7, r0, r7
 800083a:	429f      	cmp	r7, r3
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x148>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 34ff 	add.w	r4, r0, #4294967295
 8000846:	d202      	bcs.n	800084e <__udivmoddi4+0x146>
 8000848:	429f      	cmp	r7, r3
 800084a:	f200 80b0 	bhi.w	80009ae <__udivmoddi4+0x2a6>
 800084e:	4620      	mov	r0, r4
 8000850:	1bdb      	subs	r3, r3, r7
 8000852:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000856:	e7a5      	b.n	80007a4 <__udivmoddi4+0x9c>
 8000858:	f1c1 0620 	rsb	r6, r1, #32
 800085c:	408b      	lsls	r3, r1
 800085e:	fa22 f706 	lsr.w	r7, r2, r6
 8000862:	431f      	orrs	r7, r3
 8000864:	fa20 fc06 	lsr.w	ip, r0, r6
 8000868:	fa04 f301 	lsl.w	r3, r4, r1
 800086c:	ea43 030c 	orr.w	r3, r3, ip
 8000870:	40f4      	lsrs	r4, r6
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	0c38      	lsrs	r0, r7, #16
 8000878:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800087c:	fbb4 fef0 	udiv	lr, r4, r0
 8000880:	fa1f fc87 	uxth.w	ip, r7
 8000884:	fb00 441e 	mls	r4, r0, lr, r4
 8000888:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800088c:	fb0e f90c 	mul.w	r9, lr, ip
 8000890:	45a1      	cmp	r9, r4
 8000892:	fa02 f201 	lsl.w	r2, r2, r1
 8000896:	d90a      	bls.n	80008ae <__udivmoddi4+0x1a6>
 8000898:	193c      	adds	r4, r7, r4
 800089a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800089e:	f080 8084 	bcs.w	80009aa <__udivmoddi4+0x2a2>
 80008a2:	45a1      	cmp	r9, r4
 80008a4:	f240 8081 	bls.w	80009aa <__udivmoddi4+0x2a2>
 80008a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008ac:	443c      	add	r4, r7
 80008ae:	eba4 0409 	sub.w	r4, r4, r9
 80008b2:	fa1f f983 	uxth.w	r9, r3
 80008b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ba:	fb00 4413 	mls	r4, r0, r3, r4
 80008be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c6:	45a4      	cmp	ip, r4
 80008c8:	d907      	bls.n	80008da <__udivmoddi4+0x1d2>
 80008ca:	193c      	adds	r4, r7, r4
 80008cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80008d0:	d267      	bcs.n	80009a2 <__udivmoddi4+0x29a>
 80008d2:	45a4      	cmp	ip, r4
 80008d4:	d965      	bls.n	80009a2 <__udivmoddi4+0x29a>
 80008d6:	3b02      	subs	r3, #2
 80008d8:	443c      	add	r4, r7
 80008da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008de:	fba0 9302 	umull	r9, r3, r0, r2
 80008e2:	eba4 040c 	sub.w	r4, r4, ip
 80008e6:	429c      	cmp	r4, r3
 80008e8:	46ce      	mov	lr, r9
 80008ea:	469c      	mov	ip, r3
 80008ec:	d351      	bcc.n	8000992 <__udivmoddi4+0x28a>
 80008ee:	d04e      	beq.n	800098e <__udivmoddi4+0x286>
 80008f0:	b155      	cbz	r5, 8000908 <__udivmoddi4+0x200>
 80008f2:	ebb8 030e 	subs.w	r3, r8, lr
 80008f6:	eb64 040c 	sbc.w	r4, r4, ip
 80008fa:	fa04 f606 	lsl.w	r6, r4, r6
 80008fe:	40cb      	lsrs	r3, r1
 8000900:	431e      	orrs	r6, r3
 8000902:	40cc      	lsrs	r4, r1
 8000904:	e9c5 6400 	strd	r6, r4, [r5]
 8000908:	2100      	movs	r1, #0
 800090a:	e750      	b.n	80007ae <__udivmoddi4+0xa6>
 800090c:	f1c2 0320 	rsb	r3, r2, #32
 8000910:	fa20 f103 	lsr.w	r1, r0, r3
 8000914:	fa0c fc02 	lsl.w	ip, ip, r2
 8000918:	fa24 f303 	lsr.w	r3, r4, r3
 800091c:	4094      	lsls	r4, r2
 800091e:	430c      	orrs	r4, r1
 8000920:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000924:	fa00 fe02 	lsl.w	lr, r0, r2
 8000928:	fa1f f78c 	uxth.w	r7, ip
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3110 	mls	r1, r8, r0, r3
 8000934:	0c23      	lsrs	r3, r4, #16
 8000936:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800093a:	fb00 f107 	mul.w	r1, r0, r7
 800093e:	4299      	cmp	r1, r3
 8000940:	d908      	bls.n	8000954 <__udivmoddi4+0x24c>
 8000942:	eb1c 0303 	adds.w	r3, ip, r3
 8000946:	f100 36ff 	add.w	r6, r0, #4294967295
 800094a:	d22c      	bcs.n	80009a6 <__udivmoddi4+0x29e>
 800094c:	4299      	cmp	r1, r3
 800094e:	d92a      	bls.n	80009a6 <__udivmoddi4+0x29e>
 8000950:	3802      	subs	r0, #2
 8000952:	4463      	add	r3, ip
 8000954:	1a5b      	subs	r3, r3, r1
 8000956:	b2a4      	uxth	r4, r4
 8000958:	fbb3 f1f8 	udiv	r1, r3, r8
 800095c:	fb08 3311 	mls	r3, r8, r1, r3
 8000960:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000964:	fb01 f307 	mul.w	r3, r1, r7
 8000968:	42a3      	cmp	r3, r4
 800096a:	d908      	bls.n	800097e <__udivmoddi4+0x276>
 800096c:	eb1c 0404 	adds.w	r4, ip, r4
 8000970:	f101 36ff 	add.w	r6, r1, #4294967295
 8000974:	d213      	bcs.n	800099e <__udivmoddi4+0x296>
 8000976:	42a3      	cmp	r3, r4
 8000978:	d911      	bls.n	800099e <__udivmoddi4+0x296>
 800097a:	3902      	subs	r1, #2
 800097c:	4464      	add	r4, ip
 800097e:	1ae4      	subs	r4, r4, r3
 8000980:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000984:	e739      	b.n	80007fa <__udivmoddi4+0xf2>
 8000986:	4604      	mov	r4, r0
 8000988:	e6f0      	b.n	800076c <__udivmoddi4+0x64>
 800098a:	4608      	mov	r0, r1
 800098c:	e706      	b.n	800079c <__udivmoddi4+0x94>
 800098e:	45c8      	cmp	r8, r9
 8000990:	d2ae      	bcs.n	80008f0 <__udivmoddi4+0x1e8>
 8000992:	ebb9 0e02 	subs.w	lr, r9, r2
 8000996:	eb63 0c07 	sbc.w	ip, r3, r7
 800099a:	3801      	subs	r0, #1
 800099c:	e7a8      	b.n	80008f0 <__udivmoddi4+0x1e8>
 800099e:	4631      	mov	r1, r6
 80009a0:	e7ed      	b.n	800097e <__udivmoddi4+0x276>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e799      	b.n	80008da <__udivmoddi4+0x1d2>
 80009a6:	4630      	mov	r0, r6
 80009a8:	e7d4      	b.n	8000954 <__udivmoddi4+0x24c>
 80009aa:	46d6      	mov	lr, sl
 80009ac:	e77f      	b.n	80008ae <__udivmoddi4+0x1a6>
 80009ae:	4463      	add	r3, ip
 80009b0:	3802      	subs	r0, #2
 80009b2:	e74d      	b.n	8000850 <__udivmoddi4+0x148>
 80009b4:	4606      	mov	r6, r0
 80009b6:	4623      	mov	r3, r4
 80009b8:	4608      	mov	r0, r1
 80009ba:	e70f      	b.n	80007dc <__udivmoddi4+0xd4>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	e730      	b.n	8000824 <__udivmoddi4+0x11c>
 80009c2:	bf00      	nop

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ce:	463b      	mov	r3, r7
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009da:	4b2f      	ldr	r3, [pc, #188]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 80009dc:	4a2f      	ldr	r2, [pc, #188]	@ (8000a9c <MX_ADC1_Init+0xd4>)
 80009de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009f2:	4b29      	ldr	r3, [pc, #164]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009f8:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a00:	4b25      	ldr	r3, [pc, #148]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a06:	4b24      	ldr	r3, [pc, #144]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a08:	4a25      	ldr	r2, [pc, #148]	@ (8000aa0 <MX_ADC1_Init+0xd8>)
 8000a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000a12:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a14:	2203      	movs	r2, #3
 8000a16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a26:	481c      	ldr	r0, [pc, #112]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a28:	f001 fed2 	bl	80027d0 <HAL_ADC_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a32:	f001 f937 	bl	8001ca4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	4619      	mov	r1, r3
 8000a46:	4814      	ldr	r0, [pc, #80]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a48:	f002 f988 	bl	8002d5c <HAL_ADC_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a52:	f001 f927 	bl	8001ca4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a56:	2303      	movs	r3, #3
 8000a58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4619      	mov	r1, r3
 8000a62:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a64:	f002 f97a 	bl	8002d5c <HAL_ADC_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a6e:	f001 f919 	bl	8001ca4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a72:	2306      	movs	r3, #6
 8000a74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a76:	2303      	movs	r3, #3
 8000a78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	@ (8000a98 <MX_ADC1_Init+0xd0>)
 8000a80:	f002 f96c 	bl	8002d5c <HAL_ADC_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000a8a:	f001 f90b 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000208 	.word	0x20000208
 8000a9c:	40012000 	.word	0x40012000
 8000aa0:	0f000001 	.word	0x0f000001

08000aa4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	@ 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a31      	ldr	r2, [pc, #196]	@ (8000b88 <HAL_ADC_MspInit+0xe4>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d15b      	bne.n	8000b7e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ac6:	4b31      	ldr	r3, [pc, #196]	@ (8000b8c <HAL_ADC_MspInit+0xe8>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	4a30      	ldr	r2, [pc, #192]	@ (8000b8c <HAL_ADC_MspInit+0xe8>)
 8000acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b8c <HAL_ADC_MspInit+0xe8>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b2b      	ldr	r3, [pc, #172]	@ (8000b8c <HAL_ADC_MspInit+0xe8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8000b8c <HAL_ADC_MspInit+0xe8>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b28      	ldr	r3, [pc, #160]	@ (8000b8c <HAL_ADC_MspInit+0xe8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_6;
 8000af6:	2349      	movs	r3, #73	@ 0x49
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afa:	2303      	movs	r3, #3
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4821      	ldr	r0, [pc, #132]	@ (8000b90 <HAL_ADC_MspInit+0xec>)
 8000b0a:	f003 f91f 	bl	8003d4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b10:	4a21      	ldr	r2, [pc, #132]	@ (8000b98 <HAL_ADC_MspInit+0xf4>)
 8000b12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b20:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b26:	4b1b      	ldr	r3, [pc, #108]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b36:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b52:	4810      	ldr	r0, [pc, #64]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b54:	f002 fcf0 	bl	8003538 <HAL_DMA_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000b5e:	f001 f8a1 	bl	8001ca4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a0b      	ldr	r2, [pc, #44]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b66:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b68:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <HAL_ADC_MspInit+0xf0>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2101      	movs	r1, #1
 8000b72:	2012      	movs	r0, #18
 8000b74:	f002 fca9 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b78:	2012      	movs	r0, #18
 8000b7a:	f002 fcc2 	bl	8003502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	@ 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40012000 	.word	0x40012000
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000
 8000b94:	20000250 	.word	0x20000250
 8000b98:	40026410 	.word	0x40026410

08000b9c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
extern uint8_t convCompleted;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 8000ba4:	4804      	ldr	r0, [pc, #16]	@ (8000bb8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000ba6:	f002 f861 	bl	8002c6c <HAL_ADC_Stop_DMA>
	convCompleted = 1;
 8000baa:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <HAL_ADC_ConvCpltCallback+0x20>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000208 	.word	0x20000208
 8000bbc:	2000232c 	.word	0x2000232c

08000bc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_DMA_Init+0x38>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf8 <MX_DMA_Init+0x38>)
 8000bcc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_DMA_Init+0x38>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2038      	movs	r0, #56	@ 0x38
 8000be4:	f002 fc71 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000be8:	2038      	movs	r0, #56	@ 0x38
 8000bea:	f002 fc8a 	bl	8003502 <HAL_NVIC_EnableIRQ>

}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c06:	4804      	ldr	r0, [pc, #16]	@ (8000c18 <SELECT+0x1c>)
 8000c08:	f003 fa4c 	bl	80040a4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f001 fdbb 	bl	8002788 <HAL_Delay>
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40020c00 	.word	0x40020c00

08000c1c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c26:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <DESELECT+0x1c>)
 8000c28:	f003 fa3c 	bl	80040a4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f001 fdab 	bl	8002788 <HAL_Delay>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40020c00 	.word	0x40020c00

08000c3c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c46:	bf00      	nop
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <SPI_TxByte+0x30>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d1f8      	bne.n	8000c48 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000c56:	1df9      	adds	r1, r7, #7
 8000c58:	2364      	movs	r3, #100	@ 0x64
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4803      	ldr	r0, [pc, #12]	@ (8000c6c <SPI_TxByte+0x30>)
 8000c5e:	f004 fc12 	bl	8005486 <HAL_SPI_Transmit>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000254c 	.word	0x2000254c

08000c70 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c7c:	bf00      	nop
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <SPI_TxBuffer+0x30>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d1f8      	bne.n	8000c7e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c8c:	887a      	ldrh	r2, [r7, #2]
 8000c8e:	2364      	movs	r3, #100	@ 0x64
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	4803      	ldr	r0, [pc, #12]	@ (8000ca0 <SPI_TxBuffer+0x30>)
 8000c94:	f004 fbf7 	bl	8005486 <HAL_SPI_Transmit>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000254c 	.word	0x2000254c

08000ca4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000caa:	23ff      	movs	r3, #255	@ 0xff
 8000cac:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000cae:	bf00      	nop
 8000cb0:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <SPI_RxByte+0x34>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d1f8      	bne.n	8000cb0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000cbe:	1dba      	adds	r2, r7, #6
 8000cc0:	1df9      	adds	r1, r7, #7
 8000cc2:	2364      	movs	r3, #100	@ 0x64
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	4803      	ldr	r0, [pc, #12]	@ (8000cd8 <SPI_RxByte+0x34>)
 8000cca:	f004 fd4a 	bl	8005762 <HAL_SPI_TransmitReceive>

	return data;
 8000cce:	79bb      	ldrb	r3, [r7, #6]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000254c 	.word	0x2000254c

08000cdc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000ce4:	f7ff ffde 	bl	8000ca4 <SPI_RxByte>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	701a      	strb	r2, [r3, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <SD_ReadyWait+0x30>)
 8000d00:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000d04:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000d06:	f7ff ffcd 	bl	8000ca4 <SPI_RxByte>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2bff      	cmp	r3, #255	@ 0xff
 8000d12:	d003      	beq.n	8000d1c <SD_ReadyWait+0x24>
 8000d14:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <SD_ReadyWait+0x30>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f4      	bne.n	8000d06 <SD_ReadyWait+0xe>

	return res;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20002618 	.word	0x20002618

08000d2c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000d32:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000d36:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000d38:	f7ff ff70 	bl	8000c1c <DESELECT>
	for(int i = 0; i < 10; i++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	e005      	b.n	8000d4e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000d42:	20ff      	movs	r0, #255	@ 0xff
 8000d44:	f7ff ff7a 	bl	8000c3c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	2b09      	cmp	r3, #9
 8000d52:	ddf6      	ble.n	8000d42 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000d54:	f7ff ff52 	bl	8000bfc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000d58:	2340      	movs	r3, #64	@ 0x40
 8000d5a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000d6c:	2395      	movs	r3, #149	@ 0x95
 8000d6e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000d70:	463b      	mov	r3, r7
 8000d72:	2106      	movs	r1, #6
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff7b 	bl	8000c70 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d7a:	e002      	b.n	8000d82 <SD_PowerOn+0x56>
	{
		cnt--;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d82:	f7ff ff8f 	bl	8000ca4 <SPI_RxByte>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d002      	beq.n	8000d92 <SD_PowerOn+0x66>
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f4      	bne.n	8000d7c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d92:	f7ff ff43 	bl	8000c1c <DESELECT>
	SPI_TxByte(0XFF);
 8000d96:	20ff      	movs	r0, #255	@ 0xff
 8000d98:	f7ff ff50 	bl	8000c3c <SPI_TxByte>

	PowerFlag = 1;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	@ (8000dac <SD_PowerOn+0x80>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200002b1 	.word	0x200002b1

08000db0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000db4:	4b03      	ldr	r3, [pc, #12]	@ (8000dc4 <SD_PowerOff+0x14>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	200002b1 	.word	0x200002b1

08000dc8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <SD_CheckPower+0x14>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	200002b1 	.word	0x200002b1

08000de0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000dea:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <SD_RxDataBlock+0x58>)
 8000dec:	22c8      	movs	r2, #200	@ 0xc8
 8000dee:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000df0:	f7ff ff58 	bl	8000ca4 <SPI_RxByte>
 8000df4:	4603      	mov	r3, r0
 8000df6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	2bff      	cmp	r3, #255	@ 0xff
 8000dfc:	d103      	bne.n	8000e06 <SD_RxDataBlock+0x26>
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <SD_RxDataBlock+0x58>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f4      	bne.n	8000df0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	2bfe      	cmp	r3, #254	@ 0xfe
 8000e0a:	d001      	beq.n	8000e10 <SD_RxDataBlock+0x30>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e00f      	b.n	8000e30 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff60 	bl	8000cdc <SPI_RxBytePtr>
	} while(len--);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	1e5a      	subs	r2, r3, #1
 8000e20:	603a      	str	r2, [r7, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f4      	bne.n	8000e10 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000e26:	f7ff ff3d 	bl	8000ca4 <SPI_RxByte>
	SPI_RxByte();
 8000e2a:	f7ff ff3b 	bl	8000ca4 <SPI_RxByte>

	return TRUE;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20002616 	.word	0x20002616

08000e3c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000e4c:	f7ff ff54 	bl	8000cf8 <SD_ReadyWait>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2bff      	cmp	r3, #255	@ 0xff
 8000e54:	d001      	beq.n	8000e5a <SD_TxDataBlock+0x1e>
 8000e56:	2300      	movs	r3, #0
 8000e58:	e02f      	b.n	8000eba <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000e5a:	78fb      	ldrb	r3, [r7, #3]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff feed 	bl	8000c3c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e66:	d020      	beq.n	8000eaa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000e68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff feff 	bl	8000c70 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000e72:	f7ff ff17 	bl	8000ca4 <SPI_RxByte>
		SPI_RxByte();
 8000e76:	f7ff ff15 	bl	8000ca4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000e7a:	e00b      	b.n	8000e94 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000e7c:	f7ff ff12 	bl	8000ca4 <SPI_RxByte>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	f003 031f 	and.w	r3, r3, #31
 8000e8a:	2b05      	cmp	r3, #5
 8000e8c:	d006      	beq.n	8000e9c <SD_TxDataBlock+0x60>
			i++;
 8000e8e:	7bbb      	ldrb	r3, [r7, #14]
 8000e90:	3301      	adds	r3, #1
 8000e92:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	2b40      	cmp	r3, #64	@ 0x40
 8000e98:	d9f0      	bls.n	8000e7c <SD_TxDataBlock+0x40>
 8000e9a:	e000      	b.n	8000e9e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e9c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e9e:	bf00      	nop
 8000ea0:	f7ff ff00 	bl	8000ca4 <SPI_RxByte>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0fa      	beq.n	8000ea0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	f003 031f 	and.w	r3, r3, #31
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d101      	bne.n	8000eb8 <SD_TxDataBlock+0x7c>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e000      	b.n	8000eba <SD_TxDataBlock+0x7e>

	return FALSE;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	6039      	str	r1, [r7, #0]
 8000ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000ece:	f7ff ff13 	bl	8000cf8 <SD_ReadyWait>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2bff      	cmp	r3, #255	@ 0xff
 8000ed6:	d001      	beq.n	8000edc <SD_SendCmd+0x1a>
 8000ed8:	23ff      	movs	r3, #255	@ 0xff
 8000eda:	e042      	b.n	8000f62 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff feac 	bl	8000c3c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	0e1b      	lsrs	r3, r3, #24
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fea6 	bl	8000c3c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	0c1b      	lsrs	r3, r3, #16
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fea0 	bl	8000c3c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	0a1b      	lsrs	r3, r3, #8
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fe9a 	bl	8000c3c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fe95 	bl	8000c3c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b40      	cmp	r3, #64	@ 0x40
 8000f16:	d102      	bne.n	8000f1e <SD_SendCmd+0x5c>
 8000f18:	2395      	movs	r3, #149	@ 0x95
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e007      	b.n	8000f2e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b48      	cmp	r3, #72	@ 0x48
 8000f22:	d102      	bne.n	8000f2a <SD_SendCmd+0x68>
 8000f24:	2387      	movs	r3, #135	@ 0x87
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e001      	b.n	8000f2e <SD_SendCmd+0x6c>
	else crc = 1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fe83 	bl	8000c3c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b4c      	cmp	r3, #76	@ 0x4c
 8000f3a:	d101      	bne.n	8000f40 <SD_SendCmd+0x7e>
 8000f3c:	f7ff feb2 	bl	8000ca4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000f40:	230a      	movs	r3, #10
 8000f42:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000f44:	f7ff feae 	bl	8000ca4 <SPI_RxByte>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000f4c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	da05      	bge.n	8000f60 <SD_SendCmd+0x9e>
 8000f54:	7bbb      	ldrb	r3, [r7, #14]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	73bb      	strb	r3, [r7, #14]
 8000f5a:	7bbb      	ldrb	r3, [r7, #14]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f1      	bne.n	8000f44 <SD_SendCmd+0x82>

	return res;
 8000f60:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SD_disk_initialize+0x14>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e0d1      	b.n	8001124 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000f80:	4b6a      	ldr	r3, [pc, #424]	@ (800112c <SD_disk_initialize+0x1c0>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <SD_disk_initialize+0x2a>
 8000f8e:	4b67      	ldr	r3, [pc, #412]	@ (800112c <SD_disk_initialize+0x1c0>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	e0c6      	b.n	8001124 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000f96:	f7ff fec9 	bl	8000d2c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f9a:	f7ff fe2f 	bl	8000bfc <SELECT>

	/* check disk type */
	type = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2040      	movs	r0, #64	@ 0x40
 8000fa6:	f7ff ff8c 	bl	8000ec2 <SD_SendCmd>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	f040 80a1 	bne.w	80010f4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000fb2:	4b5f      	ldr	r3, [pc, #380]	@ (8001130 <SD_disk_initialize+0x1c4>)
 8000fb4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fb8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000fba:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000fbe:	2048      	movs	r0, #72	@ 0x48
 8000fc0:	f7ff ff7f 	bl	8000ec2 <SD_SendCmd>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d155      	bne.n	8001076 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	e00c      	b.n	8000fea <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000fd0:	7bfc      	ldrb	r4, [r7, #15]
 8000fd2:	f7ff fe67 	bl	8000ca4 <SPI_RxByte>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	f104 0310 	add.w	r3, r4, #16
 8000fde:	443b      	add	r3, r7
 8000fe0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d9ef      	bls.n	8000fd0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000ff0:	7abb      	ldrb	r3, [r7, #10]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d17e      	bne.n	80010f4 <SD_disk_initialize+0x188>
 8000ff6:	7afb      	ldrb	r3, [r7, #11]
 8000ff8:	2baa      	cmp	r3, #170	@ 0xaa
 8000ffa:	d17b      	bne.n	80010f4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2077      	movs	r0, #119	@ 0x77
 8001000:	f7ff ff5f 	bl	8000ec2 <SD_SendCmd>
 8001004:	4603      	mov	r3, r0
 8001006:	2b01      	cmp	r3, #1
 8001008:	d807      	bhi.n	800101a <SD_disk_initialize+0xae>
 800100a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800100e:	2069      	movs	r0, #105	@ 0x69
 8001010:	f7ff ff57 	bl	8000ec2 <SD_SendCmd>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d004      	beq.n	8001024 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800101a:	4b45      	ldr	r3, [pc, #276]	@ (8001130 <SD_disk_initialize+0x1c4>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1ec      	bne.n	8000ffc <SD_disk_initialize+0x90>
 8001022:	e000      	b.n	8001026 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001024:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001026:	4b42      	ldr	r3, [pc, #264]	@ (8001130 <SD_disk_initialize+0x1c4>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d062      	beq.n	80010f4 <SD_disk_initialize+0x188>
 800102e:	2100      	movs	r1, #0
 8001030:	207a      	movs	r0, #122	@ 0x7a
 8001032:	f7ff ff46 	bl	8000ec2 <SD_SendCmd>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d15b      	bne.n	80010f4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e00c      	b.n	800105c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001042:	7bfc      	ldrb	r4, [r7, #15]
 8001044:	f7ff fe2e 	bl	8000ca4 <SPI_RxByte>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	f104 0310 	add.w	r3, r4, #16
 8001050:	443b      	add	r3, r7
 8001052:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	3301      	adds	r3, #1
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b03      	cmp	r3, #3
 8001060:	d9ef      	bls.n	8001042 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001062:	7a3b      	ldrb	r3, [r7, #8]
 8001064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SD_disk_initialize+0x104>
 800106c:	230c      	movs	r3, #12
 800106e:	e000      	b.n	8001072 <SD_disk_initialize+0x106>
 8001070:	2304      	movs	r3, #4
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	e03e      	b.n	80010f4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001076:	2100      	movs	r1, #0
 8001078:	2077      	movs	r0, #119	@ 0x77
 800107a:	f7ff ff22 	bl	8000ec2 <SD_SendCmd>
 800107e:	4603      	mov	r3, r0
 8001080:	2b01      	cmp	r3, #1
 8001082:	d808      	bhi.n	8001096 <SD_disk_initialize+0x12a>
 8001084:	2100      	movs	r1, #0
 8001086:	2069      	movs	r0, #105	@ 0x69
 8001088:	f7ff ff1b 	bl	8000ec2 <SD_SendCmd>
 800108c:	4603      	mov	r3, r0
 800108e:	2b01      	cmp	r3, #1
 8001090:	d801      	bhi.n	8001096 <SD_disk_initialize+0x12a>
 8001092:	2302      	movs	r3, #2
 8001094:	e000      	b.n	8001098 <SD_disk_initialize+0x12c>
 8001096:	2301      	movs	r3, #1
 8001098:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d10e      	bne.n	80010be <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80010a0:	2100      	movs	r1, #0
 80010a2:	2077      	movs	r0, #119	@ 0x77
 80010a4:	f7ff ff0d 	bl	8000ec2 <SD_SendCmd>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d80e      	bhi.n	80010cc <SD_disk_initialize+0x160>
 80010ae:	2100      	movs	r1, #0
 80010b0:	2069      	movs	r0, #105	@ 0x69
 80010b2:	f7ff ff06 	bl	8000ec2 <SD_SendCmd>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d107      	bne.n	80010cc <SD_disk_initialize+0x160>
 80010bc:	e00c      	b.n	80010d8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80010be:	2100      	movs	r1, #0
 80010c0:	2041      	movs	r0, #65	@ 0x41
 80010c2:	f7ff fefe 	bl	8000ec2 <SD_SendCmd>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d004      	beq.n	80010d6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <SD_disk_initialize+0x1c4>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1e2      	bne.n	800109a <SD_disk_initialize+0x12e>
 80010d4:	e000      	b.n	80010d8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80010d6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <SD_disk_initialize+0x1c4>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d007      	beq.n	80010f0 <SD_disk_initialize+0x184>
 80010e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e4:	2050      	movs	r0, #80	@ 0x50
 80010e6:	f7ff feec 	bl	8000ec2 <SD_SendCmd>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SD_disk_initialize+0x188>
 80010f0:	2300      	movs	r3, #0
 80010f2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80010f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <SD_disk_initialize+0x1c8>)
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80010fa:	f7ff fd8f 	bl	8000c1c <DESELECT>
	SPI_RxByte();
 80010fe:	f7ff fdd1 	bl	8000ca4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001102:	7bbb      	ldrb	r3, [r7, #14]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <SD_disk_initialize+0x1c0>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f023 0301 	bic.w	r3, r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <SD_disk_initialize+0x1c0>)
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	e001      	b.n	800111e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800111a:	f7ff fe49 	bl	8000db0 <SD_PowerOff>
	}

	return Stat;
 800111e:	4b03      	ldr	r3, [pc, #12]	@ (800112c <SD_disk_initialize+0x1c0>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b2db      	uxtb	r3, r3
}
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	20002616 	.word	0x20002616
 8001134:	200002b0 	.word	0x200002b0

08001138 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SD_disk_status+0x14>
 8001148:	2301      	movs	r3, #1
 800114a:	e002      	b.n	8001152 <SD_disk_status+0x1a>
	return Stat;
 800114c:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <SD_disk_status+0x28>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000000 	.word	0x20000000

08001164 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <SD_disk_read+0x1c>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <SD_disk_read+0x20>
 8001180:	2304      	movs	r3, #4
 8001182:	e051      	b.n	8001228 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001184:	4b2a      	ldr	r3, [pc, #168]	@ (8001230 <SD_disk_read+0xcc>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SD_disk_read+0x32>
 8001192:	2303      	movs	r3, #3
 8001194:	e048      	b.n	8001228 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001196:	4b27      	ldr	r3, [pc, #156]	@ (8001234 <SD_disk_read+0xd0>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d102      	bne.n	80011a8 <SD_disk_read+0x44>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	025b      	lsls	r3, r3, #9
 80011a6:	607b      	str	r3, [r7, #4]

	SELECT();
 80011a8:	f7ff fd28 	bl	8000bfc <SELECT>

	if (count == 1)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d111      	bne.n	80011d6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	2051      	movs	r0, #81	@ 0x51
 80011b6:	f7ff fe84 	bl	8000ec2 <SD_SendCmd>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d129      	bne.n	8001214 <SD_disk_read+0xb0>
 80011c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c4:	68b8      	ldr	r0, [r7, #8]
 80011c6:	f7ff fe0b 	bl	8000de0 <SD_RxDataBlock>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d021      	beq.n	8001214 <SD_disk_read+0xb0>
 80011d0:	2300      	movs	r3, #0
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	e01e      	b.n	8001214 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	2052      	movs	r0, #82	@ 0x52
 80011da:	f7ff fe72 	bl	8000ec2 <SD_SendCmd>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d117      	bne.n	8001214 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80011e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f7ff fdf9 	bl	8000de0 <SD_RxDataBlock>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00a      	beq.n	800120a <SD_disk_read+0xa6>
				buff += 512;
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80011fa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	3b01      	subs	r3, #1
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1ed      	bne.n	80011e4 <SD_disk_read+0x80>
 8001208:	e000      	b.n	800120c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800120a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800120c:	2100      	movs	r1, #0
 800120e:	204c      	movs	r0, #76	@ 0x4c
 8001210:	f7ff fe57 	bl	8000ec2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001214:	f7ff fd02 	bl	8000c1c <DESELECT>
	SPI_RxByte();
 8001218:	f7ff fd44 	bl	8000ca4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf14      	ite	ne
 8001222:	2301      	movne	r3, #1
 8001224:	2300      	moveq	r3, #0
 8001226:	b2db      	uxtb	r3, r3
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	200002b0 	.word	0x200002b0

08001238 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <SD_disk_write+0x1c>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <SD_disk_write+0x20>
 8001254:	2304      	movs	r3, #4
 8001256:	e06b      	b.n	8001330 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001258:	4b37      	ldr	r3, [pc, #220]	@ (8001338 <SD_disk_write+0x100>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SD_disk_write+0x32>
 8001266:	2303      	movs	r3, #3
 8001268:	e062      	b.n	8001330 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800126a:	4b33      	ldr	r3, [pc, #204]	@ (8001338 <SD_disk_write+0x100>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SD_disk_write+0x44>
 8001278:	2302      	movs	r3, #2
 800127a:	e059      	b.n	8001330 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800127c:	4b2f      	ldr	r3, [pc, #188]	@ (800133c <SD_disk_write+0x104>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <SD_disk_write+0x56>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	025b      	lsls	r3, r3, #9
 800128c:	607b      	str	r3, [r7, #4]

	SELECT();
 800128e:	f7ff fcb5 	bl	8000bfc <SELECT>

	if (count == 1)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d110      	bne.n	80012ba <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	2058      	movs	r0, #88	@ 0x58
 800129c:	f7ff fe11 	bl	8000ec2 <SD_SendCmd>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d13a      	bne.n	800131c <SD_disk_write+0xe4>
 80012a6:	21fe      	movs	r1, #254	@ 0xfe
 80012a8:	68b8      	ldr	r0, [r7, #8]
 80012aa:	f7ff fdc7 	bl	8000e3c <SD_TxDataBlock>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d033      	beq.n	800131c <SD_disk_write+0xe4>
			count = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	e030      	b.n	800131c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <SD_disk_write+0x104>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80012c6:	2100      	movs	r1, #0
 80012c8:	2077      	movs	r0, #119	@ 0x77
 80012ca:	f7ff fdfa 	bl	8000ec2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80012ce:	6839      	ldr	r1, [r7, #0]
 80012d0:	2057      	movs	r0, #87	@ 0x57
 80012d2:	f7ff fdf6 	bl	8000ec2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	2059      	movs	r0, #89	@ 0x59
 80012da:	f7ff fdf2 	bl	8000ec2 <SD_SendCmd>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d11b      	bne.n	800131c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012e4:	21fc      	movs	r1, #252	@ 0xfc
 80012e6:	68b8      	ldr	r0, [r7, #8]
 80012e8:	f7ff fda8 	bl	8000e3c <SD_TxDataBlock>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00a      	beq.n	8001308 <SD_disk_write+0xd0>
				buff += 512;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80012f8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1ee      	bne.n	80012e4 <SD_disk_write+0xac>
 8001306:	e000      	b.n	800130a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001308:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800130a:	21fd      	movs	r1, #253	@ 0xfd
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fd95 	bl	8000e3c <SD_TxDataBlock>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <SD_disk_write+0xe4>
			{
				count = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800131c:	f7ff fc7e 	bl	8000c1c <DESELECT>
	SPI_RxByte();
 8001320:	f7ff fcc0 	bl	8000ca4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2db      	uxtb	r3, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000000 	.word	0x20000000
 800133c:	200002b0 	.word	0x200002b0

08001340 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b08b      	sub	sp, #44	@ 0x2c
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	603a      	str	r2, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	460b      	mov	r3, r1
 800134e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SD_disk_ioctl+0x1e>
 800135a:	2304      	movs	r3, #4
 800135c:	e113      	b.n	8001586 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	2b05      	cmp	r3, #5
 8001368:	d124      	bne.n	80013b4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d012      	beq.n	8001398 <SD_disk_ioctl+0x58>
 8001372:	2b02      	cmp	r3, #2
 8001374:	dc1a      	bgt.n	80013ac <SD_disk_ioctl+0x6c>
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <SD_disk_ioctl+0x40>
 800137a:	2b01      	cmp	r3, #1
 800137c:	d006      	beq.n	800138c <SD_disk_ioctl+0x4c>
 800137e:	e015      	b.n	80013ac <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001380:	f7ff fd16 	bl	8000db0 <SD_PowerOff>
			res = RES_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800138a:	e0fa      	b.n	8001582 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 800138c:	f7ff fcce 	bl	8000d2c <SD_PowerOn>
			res = RES_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001396:	e0f4      	b.n	8001582 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	1c5c      	adds	r4, r3, #1
 800139c:	f7ff fd14 	bl	8000dc8 <SD_CheckPower>
 80013a0:	4603      	mov	r3, r0
 80013a2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80013aa:	e0ea      	b.n	8001582 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80013ac:	2304      	movs	r3, #4
 80013ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80013b2:	e0e6      	b.n	8001582 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80013b4:	4b76      	ldr	r3, [pc, #472]	@ (8001590 <SD_disk_ioctl+0x250>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SD_disk_ioctl+0x86>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e0df      	b.n	8001586 <SD_disk_ioctl+0x246>

		SELECT();
 80013c6:	f7ff fc19 	bl	8000bfc <SELECT>

		switch (ctrl)
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	2b0d      	cmp	r3, #13
 80013ce:	f200 80c9 	bhi.w	8001564 <SD_disk_ioctl+0x224>
 80013d2:	a201      	add	r2, pc, #4	@ (adr r2, 80013d8 <SD_disk_ioctl+0x98>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080014cf 	.word	0x080014cf
 80013dc:	08001411 	.word	0x08001411
 80013e0:	080014bf 	.word	0x080014bf
 80013e4:	08001565 	.word	0x08001565
 80013e8:	08001565 	.word	0x08001565
 80013ec:	08001565 	.word	0x08001565
 80013f0:	08001565 	.word	0x08001565
 80013f4:	08001565 	.word	0x08001565
 80013f8:	08001565 	.word	0x08001565
 80013fc:	08001565 	.word	0x08001565
 8001400:	08001565 	.word	0x08001565
 8001404:	080014e1 	.word	0x080014e1
 8001408:	08001505 	.word	0x08001505
 800140c:	08001529 	.word	0x08001529
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001410:	2100      	movs	r1, #0
 8001412:	2049      	movs	r0, #73	@ 0x49
 8001414:	f7ff fd55 	bl	8000ec2 <SD_SendCmd>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	f040 80a6 	bne.w	800156c <SD_disk_ioctl+0x22c>
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2110      	movs	r1, #16
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fcda 	bl	8000de0 <SD_RxDataBlock>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 809c 	beq.w	800156c <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001434:	7b3b      	ldrb	r3, [r7, #12]
 8001436:	099b      	lsrs	r3, r3, #6
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b01      	cmp	r3, #1
 800143c:	d10d      	bne.n	800145a <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800143e:	7d7b      	ldrb	r3, [r7, #21]
 8001440:	461a      	mov	r2, r3
 8001442:	7d3b      	ldrb	r3, [r7, #20]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	b29b      	uxth	r3, r3
 8001448:	4413      	add	r3, r2
 800144a:	b29b      	uxth	r3, r3
 800144c:	3301      	adds	r3, #1
 800144e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001450:	8bfb      	ldrh	r3, [r7, #30]
 8001452:	029a      	lsls	r2, r3, #10
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e02d      	b.n	80014b6 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800145a:	7c7b      	ldrb	r3, [r7, #17]
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	b2da      	uxtb	r2, r3
 8001462:	7dbb      	ldrb	r3, [r7, #22]
 8001464:	09db      	lsrs	r3, r3, #7
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4413      	add	r3, r2
 800146a:	b2da      	uxtb	r2, r3
 800146c:	7d7b      	ldrb	r3, [r7, #21]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 0306 	and.w	r3, r3, #6
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4413      	add	r3, r2
 800147a:	b2db      	uxtb	r3, r3
 800147c:	3302      	adds	r3, #2
 800147e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001482:	7d3b      	ldrb	r3, [r7, #20]
 8001484:	099b      	lsrs	r3, r3, #6
 8001486:	b2db      	uxtb	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	7cfb      	ldrb	r3, [r7, #19]
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	b29b      	uxth	r3, r3
 8001490:	4413      	add	r3, r2
 8001492:	b29a      	uxth	r2, r3
 8001494:	7cbb      	ldrb	r3, [r7, #18]
 8001496:	029b      	lsls	r3, r3, #10
 8001498:	b29b      	uxth	r3, r3
 800149a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3301      	adds	r3, #1
 80014a6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80014a8:	8bfa      	ldrh	r2, [r7, #30]
 80014aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014ae:	3b09      	subs	r3, #9
 80014b0:	409a      	lsls	r2, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80014bc:	e056      	b.n	800156c <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014c4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014cc:	e055      	b.n	800157a <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80014ce:	f7ff fc13 	bl	8000cf8 <SD_ReadyWait>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2bff      	cmp	r3, #255	@ 0xff
 80014d6:	d14b      	bne.n	8001570 <SD_disk_ioctl+0x230>
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014de:	e047      	b.n	8001570 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014e0:	2100      	movs	r1, #0
 80014e2:	2049      	movs	r0, #73	@ 0x49
 80014e4:	f7ff fced 	bl	8000ec2 <SD_SendCmd>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d142      	bne.n	8001574 <SD_disk_ioctl+0x234>
 80014ee:	2110      	movs	r1, #16
 80014f0:	6a38      	ldr	r0, [r7, #32]
 80014f2:	f7ff fc75 	bl	8000de0 <SD_RxDataBlock>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d03b      	beq.n	8001574 <SD_disk_ioctl+0x234>
 80014fc:	2300      	movs	r3, #0
 80014fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001502:	e037      	b.n	8001574 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001504:	2100      	movs	r1, #0
 8001506:	204a      	movs	r0, #74	@ 0x4a
 8001508:	f7ff fcdb 	bl	8000ec2 <SD_SendCmd>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d132      	bne.n	8001578 <SD_disk_ioctl+0x238>
 8001512:	2110      	movs	r1, #16
 8001514:	6a38      	ldr	r0, [r7, #32]
 8001516:	f7ff fc63 	bl	8000de0 <SD_RxDataBlock>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d02b      	beq.n	8001578 <SD_disk_ioctl+0x238>
 8001520:	2300      	movs	r3, #0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001526:	e027      	b.n	8001578 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001528:	2100      	movs	r1, #0
 800152a:	207a      	movs	r0, #122	@ 0x7a
 800152c:	f7ff fcc9 	bl	8000ec2 <SD_SendCmd>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d116      	bne.n	8001564 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001536:	2300      	movs	r3, #0
 8001538:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800153c:	e00b      	b.n	8001556 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800153e:	6a3c      	ldr	r4, [r7, #32]
 8001540:	1c63      	adds	r3, r4, #1
 8001542:	623b      	str	r3, [r7, #32]
 8001544:	f7ff fbae 	bl	8000ca4 <SPI_RxByte>
 8001548:	4603      	mov	r3, r0
 800154a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800154c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001550:	3301      	adds	r3, #1
 8001552:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001556:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800155a:	2b03      	cmp	r3, #3
 800155c:	d9ef      	bls.n	800153e <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001564:	2304      	movs	r3, #4
 8001566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800156a:	e006      	b.n	800157a <SD_disk_ioctl+0x23a>
			break;
 800156c:	bf00      	nop
 800156e:	e004      	b.n	800157a <SD_disk_ioctl+0x23a>
			break;
 8001570:	bf00      	nop
 8001572:	e002      	b.n	800157a <SD_disk_ioctl+0x23a>
			break;
 8001574:	bf00      	nop
 8001576:	e000      	b.n	800157a <SD_disk_ioctl+0x23a>
			break;
 8001578:	bf00      	nop
		}

		DESELECT();
 800157a:	f7ff fb4f 	bl	8000c1c <DESELECT>
		SPI_RxByte();
 800157e:	f7ff fb91 	bl	8000ca4 <SPI_RxByte>
	}

	return res;
 8001582:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001586:	4618      	mov	r0, r3
 8001588:	372c      	adds	r7, #44	@ 0x2c
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	bf00      	nop
 8001590:	20000000 	.word	0x20000000

08001594 <SDCardInit>:
FATFS *pfs;
DWORD fre_clust;
uint32_t totalSpace, freeSpace;

bool SDCardInit()
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	// Mount SD Card
	if(f_mount(&fs, "", 0) != FR_OK)
 8001598:	2200      	movs	r2, #0
 800159a:	490c      	ldr	r1, [pc, #48]	@ (80015cc <SDCardInit+0x38>)
 800159c:	480c      	ldr	r0, [pc, #48]	@ (80015d0 <SDCardInit+0x3c>)
 800159e:	f008 ff27 	bl	800a3f0 <f_mount>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SDCardInit+0x18>
		return false;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e00d      	b.n	80015c8 <SDCardInit+0x34>

	HAL_Delay(10);
 80015ac:	200a      	movs	r0, #10
 80015ae:	f001 f8eb 	bl	8002788 <HAL_Delay>

	// Open file to write
	if(f_open(&fil, "data.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 80015b2:	2213      	movs	r2, #19
 80015b4:	4907      	ldr	r1, [pc, #28]	@ (80015d4 <SDCardInit+0x40>)
 80015b6:	4808      	ldr	r0, [pc, #32]	@ (80015d8 <SDCardInit+0x44>)
 80015b8:	f008 ff60 	bl	800a47c <f_open>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SDCardInit+0x32>
		return false;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <SDCardInit+0x34>

	return true;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	0800f6a8 	.word	0x0800f6a8
 80015d0:	200002b4 	.word	0x200002b4
 80015d4:	0800f6ac 	.word	0x0800f6ac
 80015d8:	200012ec 	.word	0x200012ec

080015dc <SDCardWrite>:

bool SDCardWrite(const char* msg)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	f_puts(msg, &fil);
 80015e4:	4905      	ldr	r1, [pc, #20]	@ (80015fc <SDCardWrite+0x20>)
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f009 fc78 	bl	800aedc <f_puts>
	f_sync(&fil);
 80015ec:	4803      	ldr	r0, [pc, #12]	@ (80015fc <SDCardWrite+0x20>)
 80015ee:	f009 faa1 	bl	800ab34 <f_sync>

	return true;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200012ec 	.word	0x200012ec

08001600 <SDCardHasLowSpace>:

bool SDCardHasLowSpace()
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	if(f_getfree("", &fre_clust, &pfs) != FR_OK)
 8001604:	4a14      	ldr	r2, [pc, #80]	@ (8001658 <SDCardHasLowSpace+0x58>)
 8001606:	4915      	ldr	r1, [pc, #84]	@ (800165c <SDCardHasLowSpace+0x5c>)
 8001608:	4815      	ldr	r0, [pc, #84]	@ (8001660 <SDCardHasLowSpace+0x60>)
 800160a:	f009 fb3b 	bl	800ac84 <f_getfree>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SDCardHasLowSpace+0x18>
		return true;
 8001614:	2301      	movs	r3, #1
 8001616:	e01c      	b.n	8001652 <SDCardHasLowSpace+0x52>

	freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <SDCardHasLowSpace+0x58>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	895b      	ldrh	r3, [r3, #10]
 800161e:	461a      	mov	r2, r3
 8001620:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <SDCardHasLowSpace+0x5c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001630:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001634:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001638:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800163c:	ee17 2a90 	vmov	r2, s15
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <SDCardHasLowSpace+0x64>)
 8001642:	601a      	str	r2, [r3, #0]
	// totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);

	if(freeSpace < 1) // < 1kb
 8001644:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <SDCardHasLowSpace+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <SDCardHasLowSpace+0x50>
		return true;
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <SDCardHasLowSpace+0x52>
	else
		return false;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000231c 	.word	0x2000231c
 800165c:	20002320 	.word	0x20002320
 8001660:	0800f6a8 	.word	0x0800f6a8
 8001664:	20002324 	.word	0x20002324

08001668 <SDCardEnd>:

bool SDCardEnd()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	// Close file
	if(f_close(&fil) != FR_OK)
 800166c:	480b      	ldr	r0, [pc, #44]	@ (800169c <SDCardEnd+0x34>)
 800166e:	f009 fadf 	bl	800ac30 <f_close>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SDCardEnd+0x14>
		return false;
 8001678:	2300      	movs	r3, #0
 800167a:	e00d      	b.n	8001698 <SDCardEnd+0x30>

	HAL_Delay(10);
 800167c:	200a      	movs	r0, #10
 800167e:	f001 f883 	bl	8002788 <HAL_Delay>

	// Unmount SDCARD
	if(f_mount(NULL, "", 1) != FR_OK)
 8001682:	2201      	movs	r2, #1
 8001684:	4906      	ldr	r1, [pc, #24]	@ (80016a0 <SDCardEnd+0x38>)
 8001686:	2000      	movs	r0, #0
 8001688:	f008 feb2 	bl	800a3f0 <f_mount>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SDCardEnd+0x2e>
		return false;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <SDCardEnd+0x30>

	return true;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200012ec 	.word	0x200012ec
 80016a0:	0800f6a8 	.word	0x0800f6a8

080016a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08e      	sub	sp, #56	@ 0x38
 80016a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ba:	4b6e      	ldr	r3, [pc, #440]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a6d      	ldr	r2, [pc, #436]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016c0:	f043 0310 	orr.w	r3, r3, #16
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b6b      	ldr	r3, [pc, #428]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	623b      	str	r3, [r7, #32]
 80016d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	4b68      	ldr	r3, [pc, #416]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a67      	ldr	r2, [pc, #412]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b65      	ldr	r3, [pc, #404]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ea:	4b62      	ldr	r3, [pc, #392]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a61      	ldr	r2, [pc, #388]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016f0:	f043 0320 	orr.w	r3, r3, #32
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0320 	and.w	r3, r3, #32
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001702:	4b5c      	ldr	r3, [pc, #368]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a5b      	ldr	r2, [pc, #364]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b59      	ldr	r3, [pc, #356]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	4b56      	ldr	r3, [pc, #344]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a55      	ldr	r2, [pc, #340]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b53      	ldr	r3, [pc, #332]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4b50      	ldr	r3, [pc, #320]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a4f      	ldr	r2, [pc, #316]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b4d      	ldr	r3, [pc, #308]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800174a:	4b4a      	ldr	r3, [pc, #296]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a49      	ldr	r2, [pc, #292]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b47      	ldr	r3, [pc, #284]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001762:	4b44      	ldr	r3, [pc, #272]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a43      	ldr	r2, [pc, #268]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b41      	ldr	r3, [pc, #260]	@ (8001874 <MX_GPIO_Init+0x1d0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2110      	movs	r1, #16
 800177e:	483e      	ldr	r0, [pc, #248]	@ (8001878 <MX_GPIO_Init+0x1d4>)
 8001780:	f002 fc90 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	2110      	movs	r1, #16
 8001788:	483c      	ldr	r0, [pc, #240]	@ (800187c <MX_GPIO_Init+0x1d8>)
 800178a:	f002 fc8b 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	2104      	movs	r1, #4
 8001792:	483b      	ldr	r0, [pc, #236]	@ (8001880 <MX_GPIO_Init+0x1dc>)
 8001794:	f002 fc86 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|LD3_Pin|GPIO_PIN_6
 8001798:	2200      	movs	r2, #0
 800179a:	f244 01c3 	movw	r1, #16579	@ 0x40c3
 800179e:	4839      	ldr	r0, [pc, #228]	@ (8001884 <MX_GPIO_Init+0x1e0>)
 80017a0:	f002 fc80 	bl	80040a4 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017aa:	4837      	ldr	r0, [pc, #220]	@ (8001888 <MX_GPIO_Init+0x1e4>)
 80017ac:	f002 fc7a 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80017b0:	2310      	movs	r3, #16
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c4:	4619      	mov	r1, r3
 80017c6:	482c      	ldr	r0, [pc, #176]	@ (8001878 <MX_GPIO_Init+0x1d4>)
 80017c8:	f002 fac0 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e0:	4619      	mov	r1, r3
 80017e2:	4827      	ldr	r0, [pc, #156]	@ (8001880 <MX_GPIO_Init+0x1dc>)
 80017e4:	f002 fab2 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017e8:	2310      	movs	r3, #16
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	481f      	ldr	r0, [pc, #124]	@ (800187c <MX_GPIO_Init+0x1d8>)
 8001800:	f002 faa4 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001804:	2304      	movs	r3, #4
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001818:	4619      	mov	r1, r3
 800181a:	4819      	ldr	r0, [pc, #100]	@ (8001880 <MX_GPIO_Init+0x1dc>)
 800181c:	f002 fa96 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB1 PBPin PB6
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_1|LD3_Pin|GPIO_PIN_6
 8001820:	f244 03c3 	movw	r3, #16579	@ 0x40c3
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	4812      	ldr	r0, [pc, #72]	@ (8001884 <MX_GPIO_Init+0x1e0>)
 800183a:	f002 fa87 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800183e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	480c      	ldr	r0, [pc, #48]	@ (8001888 <MX_GPIO_Init+0x1e4>)
 8001858:	f002 fa78 	bl	8003d4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	2028      	movs	r0, #40	@ 0x28
 8001862:	f001 fe32 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001866:	2028      	movs	r0, #40	@ 0x28
 8001868:	f001 fe4b 	bl	8003502 <HAL_NVIC_EnableIRQ>

}
 800186c:	bf00      	nop
 800186e:	3738      	adds	r7, #56	@ 0x38
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	40021000 	.word	0x40021000
 800187c:	40021400 	.word	0x40021400
 8001880:	40020800 	.word	0x40020800
 8001884:	40020400 	.word	0x40020400
 8001888:	40020c00 	.word	0x40020c00

0800188c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */
float volts = 0;
int butPressed = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800189c:	d102      	bne.n	80018a4 <HAL_GPIO_EXTI_Callback+0x18>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		send_UART("{to:'Log',from:'Mst',reci:'headerValsCsv',dir:'g',rc:''}\r");
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		*/

		butPressed = 1;
 800189e:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x24>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]
	}
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	20002328 	.word	0x20002328

080018b4 <isButPressed>:

int isButPressed()
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
	return butPressed;
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <isButPressed+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20002328 	.word	0x20002328

080018cc <butClear>:

void butClear()
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
	butPressed = 0;
 80018d0:	4b03      	ldr	r3, [pc, #12]	@ (80018e0 <butClear+0x14>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	20002328 	.word	0x20002328

080018e4 <Build_MSG>:
float dT;//Temperature gradient provided by STM
int time; // to save the time -

bool flagSDEnd = false; //diz se o SD card End ja foi realizado

void Build_MSG(){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af06      	add	r7, sp, #24
	//builds the Message that will be sent from the STM(Master) to the Arduino(Slave)
	sprintf(MSG, "%d;%.1f;%.1f;%.1f",time, V_LC, V_AA, V_9V);
 80018ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <Build_MSG+0x44>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a0f      	ldr	r2, [pc, #60]	@ (800192c <Build_MSG+0x48>)
 80018f0:	edd2 7a00 	vldr	s15, [r2]
 80018f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001930 <Build_MSG+0x4c>)
 80018fa:	edd2 6a00 	vldr	s13, [r2]
 80018fe:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001902:	4a0c      	ldr	r2, [pc, #48]	@ (8001934 <Build_MSG+0x50>)
 8001904:	edd2 5a00 	vldr	s11, [r2]
 8001908:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800190c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001910:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001914:	ed8d 7b00 	vstr	d7, [sp]
 8001918:	461a      	mov	r2, r3
 800191a:	4907      	ldr	r1, [pc, #28]	@ (8001938 <Build_MSG+0x54>)
 800191c:	4807      	ldr	r0, [pc, #28]	@ (800193c <Build_MSG+0x58>)
 800191e:	f00a fb29 	bl	800bf74 <siprintf>
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20002544 	.word	0x20002544
 800192c:	20002538 	.word	0x20002538
 8001930:	2000253c 	.word	0x2000253c
 8001934:	20002540 	.word	0x20002540
 8001938:	0800f6b8 	.word	0x0800f6b8
 800193c:	20002338 	.word	0x20002338

08001940 <convert_adc_to_physicalvalue>:


void convert_adc_to_physicalvalue(){
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
	float aux2, aux3, aux4;

	//Pass ADC result from bits to tension
	//aux0 = ADC_results[0]*3.3/4096; //ADC result in Volts
	//aux1 = ADC_results[1]*3.3/4096;
	aux2 = ADC_results[0]*3.3/4096;
 8001946:	4b2e      	ldr	r3, [pc, #184]	@ (8001a00 <convert_adc_to_physicalvalue+0xc0>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001952:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 80019f0 <convert_adc_to_physicalvalue+0xb0>
 8001956:	ee27 6b06 	vmul.f64	d6, d7, d6
 800195a:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 80019f8 <convert_adc_to_physicalvalue+0xb8>
 800195e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001962:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001966:	edc7 7a03 	vstr	s15, [r7, #12]
	aux3 = ADC_results[1]*3.3/4096;
 800196a:	4b25      	ldr	r3, [pc, #148]	@ (8001a00 <convert_adc_to_physicalvalue+0xc0>)
 800196c:	885b      	ldrh	r3, [r3, #2]
 800196e:	ee07 3a90 	vmov	s15, r3
 8001972:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001976:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 80019f0 <convert_adc_to_physicalvalue+0xb0>
 800197a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800197e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 80019f8 <convert_adc_to_physicalvalue+0xb8>
 8001982:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001986:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800198a:	edc7 7a02 	vstr	s15, [r7, #8]
	aux4 = ADC_results[2]*3.3/4096;
 800198e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <convert_adc_to_physicalvalue+0xc0>)
 8001990:	889b      	ldrh	r3, [r3, #4]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800199a:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 80019f0 <convert_adc_to_physicalvalue+0xb0>
 800199e:	ee27 6b06 	vmul.f64	d6, d7, d6
 80019a2:	ed9f 5b15 	vldr	d5, [pc, #84]	@ 80019f8 <convert_adc_to_physicalvalue+0xb8>
 80019a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019ae:	edc7 7a01 	vstr	s15, [r7, #4]
	//Correction factor for V_9V: 3

	//Convert ADC result to temperature and voltages
	//dT = 34.469*aux0 - 67.653; //STM temperature variation
	//T_PT100 = 34.469*aux1 - 67.653; //PT100 temperature
	V_LC = aux2 * 3;
 80019b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80019ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019be:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <convert_adc_to_physicalvalue+0xc4>)
 80019c0:	edc3 7a00 	vstr	s15, [r3]
	V_AA = aux3 * 2;
 80019c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <convert_adc_to_physicalvalue+0xc8>)
 80019ce:	edc3 7a00 	vstr	s15, [r3]
	V_9V = aux4 * 3;
 80019d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019d6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80019da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019de:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <convert_adc_to_physicalvalue+0xcc>)
 80019e0:	edc3 7a00 	vstr	s15, [r3]

}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	66666666 	.word	0x66666666
 80019f4:	400a6666 	.word	0x400a6666
 80019f8:	00000000 	.word	0x00000000
 80019fc:	40b00000 	.word	0x40b00000
 8001a00:	20002330 	.word	0x20002330
 8001a04:	20002538 	.word	0x20002538
 8001a08:	2000253c 	.word	0x2000253c
 8001a0c:	20002540 	.word	0x20002540

08001a10 <print_adc>:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); // CS High => End communication

}

void print_adc()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	reset_UART();
 8001a14:	f000 fd4c 	bl	80024b0 <reset_UART>
	send_UART(MSG);
 8001a18:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <print_adc+0x14>)
 8001a1a:	f000 fd61 	bl	80024e0 <send_UART>
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20002338 	.word	0x20002338

08001a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2c:	f000 fe4f 	bl	80026ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a30:	f000 f8d0 	bl	8001bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a34:	f7ff fe36 	bl	80016a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a38:	f7ff f8c2 	bl	8000bc0 <MX_DMA_Init>
  MX_TIM1_Init();
 8001a3c:	f000 fbdc 	bl	80021f8 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001a40:	f000 f936 	bl	8001cb0 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001a44:	f006 fa8e 	bl	8007f64 <MX_FATFS_Init>
  MX_SPI4_Init();
 8001a48:	f000 f970 	bl	8001d2c <MX_SPI4_Init>
  MX_ADC1_Init();
 8001a4c:	f7fe ffbc 	bl	80009c8 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001a50:	f000 fc7e 	bl	8002350 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a54:	2201      	movs	r2, #1
 8001a56:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a5a:	4852      	ldr	r0, [pc, #328]	@ (8001ba4 <main+0x17c>)
 8001a5c:	f002 fb22 	bl	80040a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Acionado para alimentarmos a STM
 8001a60:	2201      	movs	r2, #1
 8001a62:	2102      	movs	r1, #2
 8001a64:	484f      	ldr	r0, [pc, #316]	@ (8001ba4 <main+0x17c>)
 8001a66:	f002 fb1d 	bl	80040a4 <HAL_GPIO_WritePin>

  while(!isButPressed()); //wait to press STM bottom to feed LoRa and Datalogger
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ff22 	bl	80018b4 <isButPressed>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0fa      	beq.n	8001a6c <main+0x44>
  butClear();
 8001a76:	f7ff ff29 	bl	80018cc <butClear>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//O Led vermelho (led dos erros) desligado
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a80:	4848      	ldr	r0, [pc, #288]	@ (8001ba4 <main+0x17c>)
 8001a82:	f002 fb0f 	bl	80040a4 <HAL_GPIO_WritePin>
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);//Feed Lora
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET); //Feed Datalogger
 8001a86:	2201      	movs	r2, #1
 8001a88:	2110      	movs	r1, #16
 8001a8a:	4847      	ldr	r0, [pc, #284]	@ (8001ba8 <main+0x180>)
 8001a8c:	f002 fb0a 	bl	80040a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //Alimentacao de BackUp off
 8001a90:	2200      	movs	r2, #0
 8001a92:	2140      	movs	r1, #64	@ 0x40
 8001a94:	4843      	ldr	r0, [pc, #268]	@ (8001ba4 <main+0x17c>)
 8001a96:	f002 fb05 	bl	80040a4 <HAL_GPIO_WritePin>


  if(!SDCardInit()){
 8001a9a:	f7ff fd7b 	bl	8001594 <SDCardInit>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f083 0301 	eor.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <main+0x8e>
	  //Error - Turn on Error Led
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ab0:	483c      	ldr	r0, [pc, #240]	@ (8001ba4 <main+0x17c>)
 8001ab2:	f002 faf7 	bl	80040a4 <HAL_GPIO_WritePin>
  }

  //SDCardWrite("time;V_LC;V_AA;V_9V\n");

//  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); //CS of SPI4 High => No communication between STM and Arduino
  time = 0; //start time counting
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bac <main+0x184>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]


	reset_UART();
 8001abc:	f000 fcf8 	bl	80024b0 <reset_UART>
	send_UART(PROMPT);
 8001ac0:	483b      	ldr	r0, [pc, #236]	@ (8001bb0 <main+0x188>)
 8001ac2:	f000 fd0d 	bl	80024e0 <send_UART>
	reset_UART();
 8001ac6:	f000 fcf3 	bl	80024b0 <reset_UART>
	send_UART("time;V_LC;V_AA;V_9V");
 8001aca:	483a      	ldr	r0, [pc, #232]	@ (8001bb4 <main+0x18c>)
 8001acc:	f000 fd08 	bl	80024e0 <send_UART>

	HAL_Delay(1000);
 8001ad0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ad4:	f000 fe58 	bl	8002788 <HAL_Delay>
	SDCardWrite("Hello\n");

	if(SDCardEnd())
		send_UART("true");
*/
  HAL_TIM_Base_Start_IT(&htim1); //start timer
 8001ad8:	4837      	ldr	r0, [pc, #220]	@ (8001bb8 <main+0x190>)
 8001ada:	f004 fa35 	bl	8005f48 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

	while (1)
	{

		if(ReturnFlagTimer()){
 8001ade:	f000 fc05 	bl	80022ec <ReturnFlagTimer>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d047      	beq.n	8001b78 <main+0x150>
			//2s Passed
			time += 2; //add 2s to time since 2s passed from the last measure
 8001ae8:	4b30      	ldr	r3, [pc, #192]	@ (8001bac <main+0x184>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3302      	adds	r3, #2
 8001aee:	4a2f      	ldr	r2, [pc, #188]	@ (8001bac <main+0x184>)
 8001af0:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC_results, 3);
 8001af2:	2203      	movs	r2, #3
 8001af4:	4931      	ldr	r1, [pc, #196]	@ (8001bbc <main+0x194>)
 8001af6:	4832      	ldr	r0, [pc, #200]	@ (8001bc0 <main+0x198>)
 8001af8:	f000 ffbe 	bl	8002a78 <HAL_ADC_Start_DMA>

			while(!convCompleted);
 8001afc:	bf00      	nop
 8001afe:	4b31      	ldr	r3, [pc, #196]	@ (8001bc4 <main+0x19c>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0fb      	beq.n	8001afe <main+0xd6>

			convCompleted = 0;
 8001b06:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc4 <main+0x19c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]

			convert_adc_to_physicalvalue(); // Convert adc values to Temperature and Voltages
 8001b0c:	f7ff ff18 	bl	8001940 <convert_adc_to_physicalvalue>
			Build_MSG(); //build Message before sending
 8001b10:	f7ff fee8 	bl	80018e4 <Build_MSG>
			print_adc();
 8001b14:	f7ff ff7c 	bl	8001a10 <print_adc>

			if(!flagSDEnd){
 8001b18:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc8 <main+0x1a0>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d026      	beq.n	8001b74 <main+0x14c>
				//Ainda nao foi realizado o End do cartao
				if(SDCardHasLowSpace()){
 8001b26:	f7ff fd6b 	bl	8001600 <SDCardHasLowSpace>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d012      	beq.n	8001b56 <main+0x12e>
					//Low space at the SD card => End SD card
					if(!SDCardEnd()){
 8001b30:	f7ff fd9a 	bl	8001668 <SDCardEnd>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f083 0301 	eor.w	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <main+0x126>
						//Nao conseguiu realizar o End com sucesso
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Acidionar led de erro
 8001b40:	2201      	movs	r2, #1
 8001b42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b46:	4817      	ldr	r0, [pc, #92]	@ (8001ba4 <main+0x17c>)
 8001b48:	f002 faac 	bl	80040a4 <HAL_GPIO_WritePin>
 8001b4c:	e012      	b.n	8001b74 <main+0x14c>
					}
					else{
						//Realizou-se o End do cartao
						flagSDEnd = true;
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <main+0x1a0>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	e00e      	b.n	8001b74 <main+0x14c>
					}
				}
				else{
					//O cartao tem espaco ainda
					if(!SDCardWrite(MSG)){
 8001b56:	481d      	ldr	r0, [pc, #116]	@ (8001bcc <main+0x1a4>)
 8001b58:	f7ff fd40 	bl	80015dc <SDCardWrite>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f083 0301 	eor.w	r3, r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <main+0x14c>
						//Nao conseguiu escrever
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Acidionar led de erro
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b6e:	480d      	ldr	r0, [pc, #52]	@ (8001ba4 <main+0x17c>)
 8001b70:	f002 fa98 	bl	80040a4 <HAL_GPIO_WritePin>
			}


//			Send_MSG(); //Send Message to Slave(Arduino)

			ClearFlagTimer(); //set flag = false
 8001b74:	f000 fbc6 	bl	8002304 <ClearFlagTimer>
		}


		//Ver se e necessario trocar a fonte de alimentacao do datalogger
		if(V_9V <= MINIMUM_VOLTAGE_DATALOGGER){
 8001b78:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <main+0x1a8>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8001b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8a:	d809      	bhi.n	8001ba0 <main+0x178>
			//A alimentacao do datalogger deve ser trocada para a backup
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Ativar a Alimentacao de backup
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2140      	movs	r1, #64	@ 0x40
 8001b90:	4804      	ldr	r0, [pc, #16]	@ (8001ba4 <main+0x17c>)
 8001b92:	f002 fa87 	bl	80040a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET); //Desligar a alimentacao inicial do datalogger
 8001b96:	2200      	movs	r2, #0
 8001b98:	2110      	movs	r1, #16
 8001b9a:	4803      	ldr	r0, [pc, #12]	@ (8001ba8 <main+0x180>)
 8001b9c:	f002 fa82 	bl	80040a4 <HAL_GPIO_WritePin>
		if(ReturnFlagTimer()){
 8001ba0:	e79d      	b.n	8001ade <main+0xb6>
 8001ba2:	bf00      	nop
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40021400 	.word	0x40021400
 8001bac:	20002544 	.word	0x20002544
 8001bb0:	0800f6cc 	.word	0x0800f6cc
 8001bb4:	0800f6d0 	.word	0x0800f6d0
 8001bb8:	20002620 	.word	0x20002620
 8001bbc:	20002330 	.word	0x20002330
 8001bc0:	20000208 	.word	0x20000208
 8001bc4:	2000232c 	.word	0x2000232c
 8001bc8:	20002548 	.word	0x20002548
 8001bcc:	20002338 	.word	0x20002338
 8001bd0:	20002540 	.word	0x20002540

08001bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b094      	sub	sp, #80	@ 0x50
 8001bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	2234      	movs	r2, #52	@ 0x34
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f00a fa29 	bl	800c03a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf8:	4b28      	ldr	r3, [pc, #160]	@ (8001c9c <SystemClock_Config+0xc8>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	4a27      	ldr	r2, [pc, #156]	@ (8001c9c <SystemClock_Config+0xc8>)
 8001bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c04:	4b25      	ldr	r3, [pc, #148]	@ (8001c9c <SystemClock_Config+0xc8>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c10:	4b23      	ldr	r3, [pc, #140]	@ (8001ca0 <SystemClock_Config+0xcc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c18:	4a21      	ldr	r2, [pc, #132]	@ (8001ca0 <SystemClock_Config+0xcc>)
 8001c1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca0 <SystemClock_Config+0xcc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c30:	2301      	movs	r3, #1
 8001c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c34:	2310      	movs	r3, #16
 8001c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c40:	2308      	movs	r3, #8
 8001c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c44:	2360      	movs	r3, #96	@ 0x60
 8001c46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001c48:	2306      	movs	r3, #6
 8001c4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c50:	2302      	movs	r3, #2
 8001c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f002 fa6f 	bl	800413c <HAL_RCC_OscConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c64:	f000 f81e 	bl	8001ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c68:	230f      	movs	r3, #15
 8001c6a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001c70:	2380      	movs	r3, #128	@ 0x80
 8001c72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f002 fd08 	bl	8004698 <HAL_RCC_ClockConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001c8e:	f000 f809 	bl	8001ca4 <Error_Handler>
  }
}
 8001c92:	bf00      	nop
 8001c94:	3750      	adds	r7, #80	@ 0x50
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40007000 	.word	0x40007000

08001ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca8:	b672      	cpsid	i
}
 8001caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <Error_Handler+0x8>

08001cb0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <MX_SPI1_Init+0x74>)
 8001cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d28 <MX_SPI1_Init+0x78>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cba:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <MX_SPI1_Init+0x74>)
 8001cbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc2:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <MX_SPI1_Init+0x74>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc8:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <MX_SPI1_Init+0x74>)
 8001cca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001cce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd0:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <MX_SPI1_Init+0x74>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <MX_SPI1_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <MX_SPI1_Init+0x74>)
 8001cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <MX_SPI1_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <MX_SPI1_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <MX_SPI1_Init+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <MX_SPI1_Init+0x74>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <MX_SPI1_Init+0x74>)
 8001cfe:	2207      	movs	r2, #7
 8001d00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <MX_SPI1_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <MX_SPI1_Init+0x74>)
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d0e:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <MX_SPI1_Init+0x74>)
 8001d10:	f003 fb0e 	bl	8005330 <HAL_SPI_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d1a:	f7ff ffc3 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000254c 	.word	0x2000254c
 8001d28:	40013000 	.word	0x40013000

08001d2c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001d30:	4b1b      	ldr	r3, [pc, #108]	@ (8001da0 <MX_SPI4_Init+0x74>)
 8001d32:	4a1c      	ldr	r2, [pc, #112]	@ (8001da4 <MX_SPI4_Init+0x78>)
 8001d34:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	@ (8001da0 <MX_SPI4_Init+0x74>)
 8001d38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d3c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001d3e:	4b18      	ldr	r3, [pc, #96]	@ (8001da0 <MX_SPI4_Init+0x74>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d44:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <MX_SPI4_Init+0x74>)
 8001d46:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001d4a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <MX_SPI4_Init+0x74>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d52:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <MX_SPI4_Init+0x74>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001d58:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <MX_SPI4_Init+0x74>)
 8001d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d5e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <MX_SPI4_Init+0x74>)
 8001d62:	2208      	movs	r2, #8
 8001d64:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <MX_SPI4_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <MX_SPI4_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <MX_SPI4_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001d78:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <MX_SPI4_Init+0x74>)
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <MX_SPI4_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <MX_SPI4_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001d8a:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <MX_SPI4_Init+0x74>)
 8001d8c:	f003 fad0 	bl	8005330 <HAL_SPI_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001d96:	f7ff ff85 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200025b0 	.word	0x200025b0
 8001da4:	40013400 	.word	0x40013400

08001da8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	@ 0x30
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a3c      	ldr	r2, [pc, #240]	@ (8001eb8 <HAL_SPI_MspInit+0x110>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d145      	bne.n	8001e56 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dca:	4b3c      	ldr	r3, [pc, #240]	@ (8001ebc <HAL_SPI_MspInit+0x114>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dce:	4a3b      	ldr	r2, [pc, #236]	@ (8001ebc <HAL_SPI_MspInit+0x114>)
 8001dd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dd6:	4b39      	ldr	r3, [pc, #228]	@ (8001ebc <HAL_SPI_MspInit+0x114>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	4b36      	ldr	r3, [pc, #216]	@ (8001ebc <HAL_SPI_MspInit+0x114>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	4a35      	ldr	r2, [pc, #212]	@ (8001ebc <HAL_SPI_MspInit+0x114>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dee:	4b33      	ldr	r3, [pc, #204]	@ (8001ebc <HAL_SPI_MspInit+0x114>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dfa:	4b30      	ldr	r3, [pc, #192]	@ (8001ebc <HAL_SPI_MspInit+0x114>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	4a2f      	ldr	r2, [pc, #188]	@ (8001ebc <HAL_SPI_MspInit+0x114>)
 8001e00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e06:	4b2d      	ldr	r3, [pc, #180]	@ (8001ebc <HAL_SPI_MspInit+0x114>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e12:	23a0      	movs	r3, #160	@ 0xa0
 8001e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e22:	2305      	movs	r3, #5
 8001e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4824      	ldr	r0, [pc, #144]	@ (8001ec0 <HAL_SPI_MspInit+0x118>)
 8001e2e:	f001 ff8d 	bl	8003d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e44:	2305      	movs	r3, #5
 8001e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	481d      	ldr	r0, [pc, #116]	@ (8001ec4 <HAL_SPI_MspInit+0x11c>)
 8001e50:	f001 ff7c 	bl	8003d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001e54:	e02c      	b.n	8001eb0 <HAL_SPI_MspInit+0x108>
  else if(spiHandle->Instance==SPI4)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec8 <HAL_SPI_MspInit+0x120>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d127      	bne.n	8001eb0 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001e60:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <HAL_SPI_MspInit+0x114>)
 8001e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e64:	4a15      	ldr	r2, [pc, #84]	@ (8001ebc <HAL_SPI_MspInit+0x114>)
 8001e66:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e6a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <HAL_SPI_MspInit+0x114>)
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e78:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <HAL_SPI_MspInit+0x114>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001ebc <HAL_SPI_MspInit+0x114>)
 8001e7e:	f043 0310 	orr.w	r3, r3, #16
 8001e82:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e84:	4b0d      	ldr	r3, [pc, #52]	@ (8001ebc <HAL_SPI_MspInit+0x114>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001e90:	2364      	movs	r3, #100	@ 0x64
 8001e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001ea0:	2305      	movs	r3, #5
 8001ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea4:	f107 031c 	add.w	r3, r7, #28
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4808      	ldr	r0, [pc, #32]	@ (8001ecc <HAL_SPI_MspInit+0x124>)
 8001eac:	f001 ff4e 	bl	8003d4c <HAL_GPIO_Init>
}
 8001eb0:	bf00      	nop
 8001eb2:	3730      	adds	r7, #48	@ 0x30
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40013000 	.word	0x40013000
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40021800 	.word	0x40021800
 8001ec8:	40013400 	.word	0x40013400
 8001ecc:	40021000 	.word	0x40021000

08001ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f14 <HAL_MspInit+0x44>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	4a0e      	ldr	r2, [pc, #56]	@ (8001f14 <HAL_MspInit+0x44>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <HAL_MspInit+0x44>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <HAL_MspInit+0x44>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	4a08      	ldr	r2, [pc, #32]	@ (8001f14 <HAL_MspInit+0x44>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_MspInit+0x44>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800

08001f18 <SDTimer_Handler>:

volatile uint8_t FatFSCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <SDTimer_Handler+0x40>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <SDTimer_Handler+0x1c>
		Timer1--;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <SDTimer_Handler+0x40>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <SDTimer_Handler+0x40>)
 8001f32:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001f34:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <SDTimer_Handler+0x44>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d006      	beq.n	8001f4c <SDTimer_Handler+0x34>
		Timer2--;
 8001f3e:	4b07      	ldr	r3, [pc, #28]	@ (8001f5c <SDTimer_Handler+0x44>)
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <SDTimer_Handler+0x44>)
 8001f4a:	801a      	strh	r2, [r3, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20002616 	.word	0x20002616
 8001f5c:	20002618 	.word	0x20002618

08001f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <NMI_Handler+0x4>

08001f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <HardFault_Handler+0x4>

08001f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <MemManage_Handler+0x4>

08001f78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <BusFault_Handler+0x4>

08001f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <UsageFault_Handler+0x4>

08001f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFSCnt++;
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <SysTick_Handler+0x30>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <SysTick_Handler+0x30>)
 8001fc4:	701a      	strb	r2, [r3, #0]
	if(FatFSCnt >= 10)
 8001fc6:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <SysTick_Handler+0x30>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b09      	cmp	r3, #9
 8001fce:	d904      	bls.n	8001fda <SysTick_Handler+0x26>
	{
		FatFSCnt = 0;
 8001fd0:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <SysTick_Handler+0x30>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001fd6:	f7ff ff9f 	bl	8001f18 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fda:	f000 fbb5 	bl	8002748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20002614 	.word	0x20002614

08001fe8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fec:	4802      	ldr	r0, [pc, #8]	@ (8001ff8 <ADC_IRQHandler+0x10>)
 8001fee:	f000 fc33 	bl	8002858 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000208 	.word	0x20000208

08001ffc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002000:	4802      	ldr	r0, [pc, #8]	@ (800200c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002002:	f004 f819 	bl	8006038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20002620 	.word	0x20002620

08002010 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002014:	4802      	ldr	r0, [pc, #8]	@ (8002020 <USART3_IRQHandler+0x10>)
 8002016:	f004 fcf7 	bl	8006a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20002a7c 	.word	0x20002a7c

08002024 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002028:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800202c:	f002 f86e 	bl	800410c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}

08002034 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002038:	4802      	ldr	r0, [pc, #8]	@ (8002044 <DMA2_Stream0_IRQHandler+0x10>)
 800203a:	f001 fc1d 	bl	8003878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000250 	.word	0x20000250

08002048 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return 1;
 800204c:	2301      	movs	r3, #1
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_kill>:

int _kill(int pid, int sig)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002062:	f00a f84f 	bl	800c104 <__errno>
 8002066:	4603      	mov	r3, r0
 8002068:	2216      	movs	r2, #22
 800206a:	601a      	str	r2, [r3, #0]
  return -1;
 800206c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <_exit>:

void _exit (int status)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002080:	f04f 31ff 	mov.w	r1, #4294967295
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ffe7 	bl	8002058 <_kill>
  while (1) {}    /* Make sure we hang here */
 800208a:	bf00      	nop
 800208c:	e7fd      	b.n	800208a <_exit+0x12>

0800208e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e00a      	b.n	80020b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020a0:	f3af 8000 	nop.w
 80020a4:	4601      	mov	r1, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	60ba      	str	r2, [r7, #8]
 80020ac:	b2ca      	uxtb	r2, r1
 80020ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3301      	adds	r3, #1
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	dbf0      	blt.n	80020a0 <_read+0x12>
  }

  return len;
 80020be:	687b      	ldr	r3, [r7, #4]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	e009      	b.n	80020ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	60ba      	str	r2, [r7, #8]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	3301      	adds	r3, #1
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	dbf1      	blt.n	80020da <_write+0x12>
  }
  return len;
 80020f6:	687b      	ldr	r3, [r7, #4]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <_close>:

int _close(int file)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002108:	f04f 33ff 	mov.w	r3, #4294967295
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002128:	605a      	str	r2, [r3, #4]
  return 0;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_isatty>:

int _isatty(int file)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002140:	2301      	movs	r3, #1
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800214e:	b480      	push	{r7}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002170:	4a14      	ldr	r2, [pc, #80]	@ (80021c4 <_sbrk+0x5c>)
 8002172:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <_sbrk+0x60>)
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800217c:	4b13      	ldr	r3, [pc, #76]	@ (80021cc <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <_sbrk+0x64>)
 8002186:	4a12      	ldr	r2, [pc, #72]	@ (80021d0 <_sbrk+0x68>)
 8002188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218a:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	429a      	cmp	r2, r3
 8002196:	d207      	bcs.n	80021a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002198:	f009 ffb4 	bl	800c104 <__errno>
 800219c:	4603      	mov	r3, r0
 800219e:	220c      	movs	r2, #12
 80021a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	e009      	b.n	80021bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	4a05      	ldr	r2, [pc, #20]	@ (80021cc <_sbrk+0x64>)
 80021b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ba:	68fb      	ldr	r3, [r7, #12]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20080000 	.word	0x20080000
 80021c8:	00000400 	.word	0x00000400
 80021cc:	2000261c 	.word	0x2000261c
 80021d0:	20002e90 	.word	0x20002e90

080021d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <SystemInit+0x20>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021de:	4a05      	ldr	r2, [pc, #20]	@ (80021f4 <SystemInit+0x20>)
 80021e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021fe:	f107 0310 	add.w	r3, r7, #16
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002216:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <MX_TIM1_Init+0xa0>)
 8002218:	4a20      	ldr	r2, [pc, #128]	@ (800229c <MX_TIM1_Init+0xa4>)
 800221a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600-1;
 800221c:	4b1e      	ldr	r3, [pc, #120]	@ (8002298 <MX_TIM1_Init+0xa0>)
 800221e:	f240 623f 	movw	r2, #1599	@ 0x63f
 8002222:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002224:	4b1c      	ldr	r3, [pc, #112]	@ (8002298 <MX_TIM1_Init+0xa0>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800222a:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <MX_TIM1_Init+0xa0>)
 800222c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002230:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002232:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <MX_TIM1_Init+0xa0>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002238:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <MX_TIM1_Init+0xa0>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223e:	4b16      	ldr	r3, [pc, #88]	@ (8002298 <MX_TIM1_Init+0xa0>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002244:	4814      	ldr	r0, [pc, #80]	@ (8002298 <MX_TIM1_Init+0xa0>)
 8002246:	f003 fe27 	bl	8005e98 <HAL_TIM_Base_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002250:	f7ff fd28 	bl	8001ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002254:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002258:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800225a:	f107 0310 	add.w	r3, r7, #16
 800225e:	4619      	mov	r1, r3
 8002260:	480d      	ldr	r0, [pc, #52]	@ (8002298 <MX_TIM1_Init+0xa0>)
 8002262:	f004 f809 	bl	8006278 <HAL_TIM_ConfigClockSource>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800226c:	f7ff fd1a 	bl	8001ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002270:	2320      	movs	r3, #32
 8002272:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	4619      	mov	r1, r3
 8002280:	4805      	ldr	r0, [pc, #20]	@ (8002298 <MX_TIM1_Init+0xa0>)
 8002282:	f004 fa25 	bl	80066d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800228c:	f7ff fd0a 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002290:	bf00      	nop
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20002620 	.word	0x20002620
 800229c:	40010000 	.word	0x40010000

080022a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0d      	ldr	r2, [pc, #52]	@ (80022e4 <HAL_TIM_Base_MspInit+0x44>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d113      	bne.n	80022da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022b2:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <HAL_TIM_Base_MspInit+0x48>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	4a0c      	ldr	r2, [pc, #48]	@ (80022e8 <HAL_TIM_Base_MspInit+0x48>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_TIM_Base_MspInit+0x48>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	2019      	movs	r0, #25
 80022d0:	f001 f8fb 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022d4:	2019      	movs	r0, #25
 80022d6:	f001 f914 	bl	8003502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40010000 	.word	0x40010000
 80022e8:	40023800 	.word	0x40023800

080022ec <ReturnFlagTimer>:

/* USER CODE BEGIN 1 */

volatile bool flag2s = false;

bool ReturnFlagTimer(){
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

	return flag2s;
 80022f0:	4b03      	ldr	r3, [pc, #12]	@ (8002300 <ReturnFlagTimer+0x14>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	b2db      	uxtb	r3, r3
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	2000266c 	.word	0x2000266c

08002304 <ClearFlagTimer>:

void ClearFlagTimer(){
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
	flag2s = false;
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <ClearFlagTimer+0x14>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	2000266c 	.word	0x2000266c

0800231c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	//This function will be executed when the Timer reaches 2s

	if(htim == &htim1){
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a07      	ldr	r2, [pc, #28]	@ (8002344 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d106      	bne.n	800233a <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800232c:	2101      	movs	r1, #1
 800232e:	4806      	ldr	r0, [pc, #24]	@ (8002348 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002330:	f001 fed1 	bl	80040d6 <HAL_GPIO_TogglePin>
		flag2s = true;
 8002334:	4b05      	ldr	r3, [pc, #20]	@ (800234c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
	}
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20002620 	.word	0x20002620
 8002348:	40020400 	.word	0x40020400
 800234c:	2000266c 	.word	0x2000266c

08002350 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 8002354:	4b1b      	ldr	r3, [pc, #108]	@ (80023c4 <MX_USART3_UART_Init+0x74>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 800235a:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <MX_USART3_UART_Init+0x78>)
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8002360:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <MX_USART3_UART_Init+0x7c>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 8002366:	4b1a      	ldr	r3, [pc, #104]	@ (80023d0 <MX_USART3_UART_Init+0x80>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 800236c:	4b19      	ldr	r3, [pc, #100]	@ (80023d4 <MX_USART3_UART_Init+0x84>)
 800236e:	220d      	movs	r2, #13
 8002370:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002372:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <MX_USART3_UART_Init+0x88>)
 8002374:	4a19      	ldr	r2, [pc, #100]	@ (80023dc <MX_USART3_UART_Init+0x8c>)
 8002376:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002378:	4b17      	ldr	r3, [pc, #92]	@ (80023d8 <MX_USART3_UART_Init+0x88>)
 800237a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800237e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002380:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <MX_USART3_UART_Init+0x88>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002386:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <MX_USART3_UART_Init+0x88>)
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800238c:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <MX_USART3_UART_Init+0x88>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002392:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <MX_USART3_UART_Init+0x88>)
 8002394:	220c      	movs	r2, #12
 8002396:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002398:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <MX_USART3_UART_Init+0x88>)
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800239e:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <MX_USART3_UART_Init+0x88>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <MX_USART3_UART_Init+0x88>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <MX_USART3_UART_Init+0x88>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023b0:	4809      	ldr	r0, [pc, #36]	@ (80023d8 <MX_USART3_UART_Init+0x88>)
 80023b2:	f004 fa39 	bl	8006828 <HAL_UART_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 80023bc:	f7ff fc72 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20002a78 	.word	0x20002a78
 80023c8:	20002a79 	.word	0x20002a79
 80023cc:	20002870 	.word	0x20002870
 80023d0:	20002a74 	.word	0x20002a74
 80023d4:	20002874 	.word	0x20002874
 80023d8:	20002a7c 	.word	0x20002a7c
 80023dc:	40004800 	.word	0x40004800

080023e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b0ae      	sub	sp, #184	@ 0xb8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	2290      	movs	r2, #144	@ 0x90
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f009 fe1a 	bl	800c03a <memset>
  if(uartHandle->Instance==USART3)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a26      	ldr	r2, [pc, #152]	@ (80024a4 <HAL_UART_MspInit+0xc4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d144      	bne.n	800249a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002410:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002414:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002416:	2300      	movs	r3, #0
 8002418:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800241a:	f107 0314 	add.w	r3, r7, #20
 800241e:	4618      	mov	r0, r3
 8002420:	f002 fb5e 	bl	8004ae0 <HAL_RCCEx_PeriphCLKConfig>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800242a:	f7ff fc3b 	bl	8001ca4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800242e:	4b1e      	ldr	r3, [pc, #120]	@ (80024a8 <HAL_UART_MspInit+0xc8>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	4a1d      	ldr	r2, [pc, #116]	@ (80024a8 <HAL_UART_MspInit+0xc8>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002438:	6413      	str	r3, [r2, #64]	@ 0x40
 800243a:	4b1b      	ldr	r3, [pc, #108]	@ (80024a8 <HAL_UART_MspInit+0xc8>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002446:	4b18      	ldr	r3, [pc, #96]	@ (80024a8 <HAL_UART_MspInit+0xc8>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	4a17      	ldr	r2, [pc, #92]	@ (80024a8 <HAL_UART_MspInit+0xc8>)
 800244c:	f043 0308 	orr.w	r3, r3, #8
 8002450:	6313      	str	r3, [r2, #48]	@ 0x30
 8002452:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <HAL_UART_MspInit+0xc8>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800245e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002462:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002478:	2307      	movs	r3, #7
 800247a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800247e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002482:	4619      	mov	r1, r3
 8002484:	4809      	ldr	r0, [pc, #36]	@ (80024ac <HAL_UART_MspInit+0xcc>)
 8002486:	f001 fc61 	bl	8003d4c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800248a:	2200      	movs	r2, #0
 800248c:	2100      	movs	r1, #0
 800248e:	2027      	movs	r0, #39	@ 0x27
 8002490:	f001 f81b 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002494:	2027      	movs	r0, #39	@ 0x27
 8002496:	f001 f834 	bl	8003502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800249a:	bf00      	nop
 800249c:	37b8      	adds	r7, #184	@ 0xb8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40004800 	.word	0x40004800
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020c00 	.word	0x40020c00

080024b0 <reset_UART>:
{
	return flagCPE;
}

void reset_UART()
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 80024b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b8:	2100      	movs	r1, #0
 80024ba:	4806      	ldr	r0, [pc, #24]	@ (80024d4 <reset_UART+0x24>)
 80024bc:	f009 fdbd 	bl	800c03a <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 80024c0:	2201      	movs	r2, #1
 80024c2:	4904      	ldr	r1, [pc, #16]	@ (80024d4 <reset_UART+0x24>)
 80024c4:	4804      	ldr	r0, [pc, #16]	@ (80024d8 <reset_UART+0x28>)
 80024c6:	f004 fa5b 	bl	8006980 <HAL_UART_Receive_IT>
	flagCPP = false;
 80024ca:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <reset_UART+0x2c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20002670 	.word	0x20002670
 80024d8:	20002a7c 	.word	0x20002a7c
 80024dc:	20002a78 	.word	0x20002a78

080024e0 <send_UART>:

void send_UART(const char* msg_to_send)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 80024e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	480d      	ldr	r0, [pc, #52]	@ (8002524 <send_UART+0x44>)
 80024f0:	f009 fdab 	bl	800c04a <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 80024f4:	480b      	ldr	r0, [pc, #44]	@ (8002524 <send_UART+0x44>)
 80024f6:	f7fd fef3 	bl	80002e0 <strlen>
 80024fa:	4603      	mov	r3, r0
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <send_UART+0x44>)
 8002500:	4413      	add	r3, r2
 8002502:	4909      	ldr	r1, [pc, #36]	@ (8002528 <send_UART+0x48>)
 8002504:	461a      	mov	r2, r3
 8002506:	460b      	mov	r3, r1
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 800250c:	4b07      	ldr	r3, [pc, #28]	@ (800252c <send_UART+0x4c>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 8002512:	2201      	movs	r2, #1
 8002514:	4903      	ldr	r1, [pc, #12]	@ (8002524 <send_UART+0x44>)
 8002516:	4806      	ldr	r0, [pc, #24]	@ (8002530 <send_UART+0x50>)
 8002518:	f004 f9d4 	bl	80068c4 <HAL_UART_Transmit_IT>
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20002874 	.word	0x20002874
 8002528:	0800f6e4 	.word	0x0800f6e4
 800252c:	20002a79 	.word	0x20002a79
 8002530:	20002a7c 	.word	0x20002a7c

08002534 <HAL_UART_RxCpltCallback>:
{
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 800253c:	4b2e      	ldr	r3, [pc, #184]	@ (80025f8 <HAL_UART_RxCpltCallback+0xc4>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d154      	bne.n	80025ee <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 8002544:	4b2d      	ldr	r3, [pc, #180]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2d      	ldr	r2, [pc, #180]	@ (8002600 <HAL_UART_RxCpltCallback+0xcc>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	2b0d      	cmp	r3, #13
 800254e:	d00b      	beq.n	8002568 <HAL_UART_RxCpltCallback+0x34>
 8002550:	4b2a      	ldr	r3, [pc, #168]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a2a      	ldr	r2, [pc, #168]	@ (8002600 <HAL_UART_RxCpltCallback+0xcc>)
 8002556:	5cd3      	ldrb	r3, [r2, r3]
 8002558:	2b5c      	cmp	r3, #92	@ 0x5c
 800255a:	d005      	beq.n	8002568 <HAL_UART_RxCpltCallback+0x34>
 800255c:	4b27      	ldr	r3, [pc, #156]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a27      	ldr	r2, [pc, #156]	@ (8002600 <HAL_UART_RxCpltCallback+0xcc>)
 8002562:	5cd3      	ldrb	r3, [r2, r3]
 8002564:	2b2f      	cmp	r3, #47	@ 0x2f
 8002566:	d106      	bne.n	8002576 <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 8002568:	4b24      	ldr	r3, [pc, #144]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 800256e:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <HAL_UART_RxCpltCallback+0xc4>)
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e03c      	b.n	80025f0 <HAL_UART_RxCpltCallback+0xbc>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 8002576:	4b21      	ldr	r3, [pc, #132]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a21      	ldr	r2, [pc, #132]	@ (8002600 <HAL_UART_RxCpltCallback+0xcc>)
 800257c:	5cd3      	ldrb	r3, [r2, r3]
 800257e:	2b08      	cmp	r3, #8
 8002580:	d10f      	bne.n	80025a2 <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 8002582:	4b1e      	ldr	r3, [pc, #120]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 800258a:	4b1c      	ldr	r3, [pc, #112]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3b01      	subs	r3, #1
 8002590:	4a1a      	ldr	r2, [pc, #104]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	e01c      	b.n	80025d0 <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 8002596:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	3b02      	subs	r3, #2
 800259c:	4a17      	ldr	r2, [pc, #92]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	e016      	b.n	80025d0 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 80025a2:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a16      	ldr	r2, [pc, #88]	@ (8002600 <HAL_UART_RxCpltCallback+0xcc>)
 80025a8:	5cd3      	ldrb	r3, [r2, r3]
 80025aa:	2b1b      	cmp	r3, #27
 80025ac:	d104      	bne.n	80025b8 <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 80025ae:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 80025b8:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a10      	ldr	r2, [pc, #64]	@ (8002600 <HAL_UART_RxCpltCallback+0xcc>)
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	2b24      	cmp	r3, #36	@ 0x24
 80025c2:	d105      	bne.n	80025d0 <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 80025c4:	4b0d      	ldr	r3, [pc, #52]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 80025ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002600 <HAL_UART_RxCpltCallback+0xcc>)
 80025cc:	2224      	movs	r2, #36	@ 0x24
 80025ce:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 80025d0:	4b0a      	ldr	r3, [pc, #40]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	4a09      	ldr	r2, [pc, #36]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <HAL_UART_RxCpltCallback+0xc8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a08      	ldr	r2, [pc, #32]	@ (8002600 <HAL_UART_RxCpltCallback+0xcc>)
 80025e0:	4413      	add	r3, r2
 80025e2:	2201      	movs	r2, #1
 80025e4:	4619      	mov	r1, r3
 80025e6:	4807      	ldr	r0, [pc, #28]	@ (8002604 <HAL_UART_RxCpltCallback+0xd0>)
 80025e8:	f004 f9ca 	bl	8006980 <HAL_UART_Receive_IT>
 80025ec:	e000      	b.n	80025f0 <HAL_UART_RxCpltCallback+0xbc>
		return;
 80025ee:	bf00      	nop
	}
}
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20002a78 	.word	0x20002a78
 80025fc:	20002870 	.word	0x20002870
 8002600:	20002670 	.word	0x20002670
 8002604:	20002a7c 	.word	0x20002a7c

08002608 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8002610:	4b16      	ldr	r3, [pc, #88]	@ (800266c <HAL_UART_TxCpltCallback+0x64>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	f083 0301 	eor.w	r3, r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d122      	bne.n	8002664 <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 800261e:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <HAL_UART_TxCpltCallback+0x68>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a14      	ldr	r2, [pc, #80]	@ (8002674 <HAL_UART_TxCpltCallback+0x6c>)
 8002624:	5cd3      	ldrb	r3, [r2, r3]
 8002626:	2b0d      	cmp	r3, #13
 8002628:	d10d      	bne.n	8002646 <HAL_UART_TxCpltCallback+0x3e>
 800262a:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <HAL_UART_TxCpltCallback+0x68>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3b01      	subs	r3, #1
 8002630:	4a10      	ldr	r2, [pc, #64]	@ (8002674 <HAL_UART_TxCpltCallback+0x6c>)
 8002632:	5cd3      	ldrb	r3, [r2, r3]
 8002634:	2b0a      	cmp	r3, #10
 8002636:	d006      	beq.n	8002646 <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8002638:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <HAL_UART_TxCpltCallback+0x68>)
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 800263e:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <HAL_UART_TxCpltCallback+0x64>)
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e00f      	b.n	8002666 <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 8002646:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <HAL_UART_TxCpltCallback+0x68>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	4a08      	ldr	r2, [pc, #32]	@ (8002670 <HAL_UART_TxCpltCallback+0x68>)
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <HAL_UART_TxCpltCallback+0x68>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a07      	ldr	r2, [pc, #28]	@ (8002674 <HAL_UART_TxCpltCallback+0x6c>)
 8002656:	4413      	add	r3, r2
 8002658:	2201      	movs	r2, #1
 800265a:	4619      	mov	r1, r3
 800265c:	4806      	ldr	r0, [pc, #24]	@ (8002678 <HAL_UART_TxCpltCallback+0x70>)
 800265e:	f004 f931 	bl	80068c4 <HAL_UART_Transmit_IT>
 8002662:	e000      	b.n	8002666 <HAL_UART_TxCpltCallback+0x5e>
		return;
 8002664:	bf00      	nop
}
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20002a79 	.word	0x20002a79
 8002670:	20002a74 	.word	0x20002a74
 8002674:	20002874 	.word	0x20002874
 8002678:	20002a7c 	.word	0x20002a7c

0800267c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800267c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002680:	480d      	ldr	r0, [pc, #52]	@ (80026b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002682:	490e      	ldr	r1, [pc, #56]	@ (80026bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002684:	4a0e      	ldr	r2, [pc, #56]	@ (80026c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002688:	e002      	b.n	8002690 <LoopCopyDataInit>

0800268a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800268c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268e:	3304      	adds	r3, #4

08002690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002694:	d3f9      	bcc.n	800268a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002696:	4a0b      	ldr	r2, [pc, #44]	@ (80026c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002698:	4c0b      	ldr	r4, [pc, #44]	@ (80026c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800269c:	e001      	b.n	80026a2 <LoopFillZerobss>

0800269e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a0:	3204      	adds	r2, #4

080026a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a4:	d3fb      	bcc.n	800269e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026a6:	f7ff fd95 	bl	80021d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026aa:	f009 fd31 	bl	800c110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ae:	f7ff f9bb 	bl	8001a28 <main>
  bx  lr    
 80026b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80026b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026bc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80026c0:	0800ffd0 	.word	0x0800ffd0
  ldr r2, =_sbss
 80026c4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80026c8:	20002e90 	.word	0x20002e90

080026cc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026cc:	e7fe      	b.n	80026cc <CAN1_RX0_IRQHandler>

080026ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d2:	2003      	movs	r0, #3
 80026d4:	f000 feee 	bl	80034b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026d8:	2000      	movs	r0, #0
 80026da:	f000 f805 	bl	80026e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026de:	f7ff fbf7 	bl	8001ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026f0:	4b12      	ldr	r3, [pc, #72]	@ (800273c <HAL_InitTick+0x54>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b12      	ldr	r3, [pc, #72]	@ (8002740 <HAL_InitTick+0x58>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	4618      	mov	r0, r3
 8002708:	f000 ff09 	bl	800351e <HAL_SYSTICK_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e00e      	b.n	8002734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b0f      	cmp	r3, #15
 800271a:	d80a      	bhi.n	8002732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800271c:	2200      	movs	r2, #0
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f000 fed1 	bl	80034ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002728:	4a06      	ldr	r2, [pc, #24]	@ (8002744 <HAL_InitTick+0x5c>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000004 	.word	0x20000004
 8002740:	2000000c 	.word	0x2000000c
 8002744:	20000008 	.word	0x20000008

08002748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800274c:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <HAL_IncTick+0x20>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_IncTick+0x24>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4413      	add	r3, r2
 8002758:	4a04      	ldr	r2, [pc, #16]	@ (800276c <HAL_IncTick+0x24>)
 800275a:	6013      	str	r3, [r2, #0]
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	2000000c 	.word	0x2000000c
 800276c:	20002b04 	.word	0x20002b04

08002770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return uwTick;
 8002774:	4b03      	ldr	r3, [pc, #12]	@ (8002784 <HAL_GetTick+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20002b04 	.word	0x20002b04

08002788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7ff ffee 	bl	8002770 <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d005      	beq.n	80027ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027a2:	4b0a      	ldr	r3, [pc, #40]	@ (80027cc <HAL_Delay+0x44>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ae:	bf00      	nop
 80027b0:	f7ff ffde 	bl	8002770 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d8f7      	bhi.n	80027b0 <HAL_Delay+0x28>
  {
  }
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	2000000c 	.word	0x2000000c

080027d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e031      	b.n	800284a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe f958 	bl	8000aa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b00      	cmp	r3, #0
 800280c:	d116      	bne.n	800283c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002812:	4b10      	ldr	r3, [pc, #64]	@ (8002854 <HAL_ADC_Init+0x84>)
 8002814:	4013      	ands	r3, r2
 8002816:	f043 0202 	orr.w	r2, r3, #2
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fbf2 	bl	8003008 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f023 0303 	bic.w	r3, r3, #3
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	641a      	str	r2, [r3, #64]	@ 0x40
 800283a:	e001      	b.n	8002840 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	ffffeefd 	.word	0xffffeefd

08002858 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	2300      	movs	r3, #0
 8002866:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d049      	beq.n	8002922 <HAL_ADC_IRQHandler+0xca>
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d046      	beq.n	8002922 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d12b      	bne.n	8002912 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d127      	bne.n	8002912 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d119      	bne.n	8002912 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0220 	bic.w	r2, r2, #32
 80028ec:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d105      	bne.n	8002912 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	f043 0201 	orr.w	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe f942 	bl	8000b9c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0212 	mvn.w	r2, #18
 8002920:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002930:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d057      	beq.n	80029e8 <HAL_ADC_IRQHandler+0x190>
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d054      	beq.n	80029e8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	d105      	bne.n	8002956 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d139      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800296e:	2b00      	cmp	r3, #0
 8002970:	d006      	beq.n	8002980 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800297c:	2b00      	cmp	r3, #0
 800297e:	d12b      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800298a:	2b00      	cmp	r3, #0
 800298c:	d124      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002998:	2b00      	cmp	r3, #0
 800299a:	d11d      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d119      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d105      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	f043 0201 	orr.w	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 fc91 	bl	8003300 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f06f 020c 	mvn.w	r2, #12
 80029e6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d017      	beq.n	8002a2e <HAL_ADC_IRQHandler+0x1d6>
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d014      	beq.n	8002a2e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d10d      	bne.n	8002a2e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f988 	bl	8002d34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0201 	mvn.w	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a3c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d015      	beq.n	8002a70 <HAL_ADC_IRQHandler+0x218>
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d012      	beq.n	8002a70 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4e:	f043 0202 	orr.w	r2, r3, #2
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f06f 0220 	mvn.w	r2, #32
 8002a5e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f971 	bl	8002d48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f06f 0220 	mvn.w	r2, #32
 8002a6e:	601a      	str	r2, [r3, #0]
  }
}
 8002a70:	bf00      	nop
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_Start_DMA+0x1e>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e0d4      	b.n	8002c40 <HAL_ADC_Start_DMA+0x1c8>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d018      	beq.n	8002ade <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002abc:	4b62      	ldr	r3, [pc, #392]	@ (8002c48 <HAL_ADC_Start_DMA+0x1d0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a62      	ldr	r2, [pc, #392]	@ (8002c4c <HAL_ADC_Start_DMA+0x1d4>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	0c9a      	lsrs	r2, r3, #18
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002ad0:	e002      	b.n	8002ad8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f9      	bne.n	8002ad2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	f040 809c 	bne.w	8002c26 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002af2:	4b57      	ldr	r3, [pc, #348]	@ (8002c50 <HAL_ADC_Start_DMA+0x1d8>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b14:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b28:	d106      	bne.n	8002b38 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	f023 0206 	bic.w	r2, r3, #6
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b36:	e002      	b.n	8002b3e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4a:	4a42      	ldr	r2, [pc, #264]	@ (8002c54 <HAL_ADC_Start_DMA+0x1dc>)
 8002b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b52:	4a41      	ldr	r2, [pc, #260]	@ (8002c58 <HAL_ADC_Start_DMA+0x1e0>)
 8002b54:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5a:	4a40      	ldr	r2, [pc, #256]	@ (8002c5c <HAL_ADC_Start_DMA+0x1e4>)
 8002b5c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b66:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002b76:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b86:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	334c      	adds	r3, #76	@ 0x4c
 8002b92:	4619      	mov	r1, r3
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f000 fd7c 	bl	8003694 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002b9c:	4b30      	ldr	r3, [pc, #192]	@ (8002c60 <HAL_ADC_Start_DMA+0x1e8>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10f      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d143      	bne.n	8002c3e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	e03a      	b.n	8002c3e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a25      	ldr	r2, [pc, #148]	@ (8002c64 <HAL_ADC_Start_DMA+0x1ec>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_ADC_Start_DMA+0x178>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d107      	bne.n	8002bf0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bee:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <HAL_ADC_Start_DMA+0x1e8>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d120      	bne.n	8002c3e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a19      	ldr	r2, [pc, #100]	@ (8002c68 <HAL_ADC_Start_DMA+0x1f0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d11b      	bne.n	8002c3e <HAL_ADC_Start_DMA+0x1c6>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d114      	bne.n	8002c3e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	e00b      	b.n	8002c3e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	f043 0210 	orr.w	r2, r3, #16
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	f043 0201 	orr.w	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20000004 	.word	0x20000004
 8002c4c:	431bde83 	.word	0x431bde83
 8002c50:	fffff8fe 	.word	0xfffff8fe
 8002c54:	080031fd 	.word	0x080031fd
 8002c58:	080032b7 	.word	0x080032b7
 8002c5c:	080032d3 	.word	0x080032d3
 8002c60:	40012300 	.word	0x40012300
 8002c64:	40012000 	.word	0x40012000
 8002c68:	40012200 	.word	0x40012200

08002c6c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_Stop_DMA+0x1a>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e046      	b.n	8002d14 <HAL_ADC_Stop_DMA+0xa8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0201 	bic.w	r2, r2, #1
 8002c9c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d12e      	bne.n	8002d0a <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cba:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d10f      	bne.n	8002cea <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fd40 	bl	8003754 <HAL_DMA_Abort>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002cf8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cfe:	4b07      	ldr	r3, [pc, #28]	@ (8002d1c <HAL_ADC_Stop_DMA+0xb0>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	ffffeefe 	.word	0xffffeefe

08002d20 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x1c>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e136      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x28a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b09      	cmp	r3, #9
 8002d86:	d93a      	bls.n	8002dfe <HAL_ADC_ConfigChannel+0xa2>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d90:	d035      	beq.n	8002dfe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68d9      	ldr	r1, [r3, #12]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	3b1e      	subs	r3, #30
 8002da8:	2207      	movs	r2, #7
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43da      	mvns	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	400a      	ands	r2, r1
 8002db6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a8d      	ldr	r2, [pc, #564]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x298>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d10a      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68d9      	ldr	r1, [r3, #12]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	061a      	lsls	r2, r3, #24
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dd6:	e035      	b.n	8002e44 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68d9      	ldr	r1, [r3, #12]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	4618      	mov	r0, r3
 8002dea:	4603      	mov	r3, r0
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4403      	add	r3, r0
 8002df0:	3b1e      	subs	r3, #30
 8002df2:	409a      	lsls	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dfc:	e022      	b.n	8002e44 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6919      	ldr	r1, [r3, #16]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	2207      	movs	r2, #7
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43da      	mvns	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	400a      	ands	r2, r1
 8002e20:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6919      	ldr	r1, [r3, #16]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	4618      	mov	r0, r3
 8002e34:	4603      	mov	r3, r0
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4403      	add	r3, r0
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b06      	cmp	r3, #6
 8002e4a:	d824      	bhi.n	8002e96 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3b05      	subs	r3, #5
 8002e5e:	221f      	movs	r2, #31
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43da      	mvns	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	400a      	ands	r2, r1
 8002e6c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	3b05      	subs	r3, #5
 8002e88:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e94:	e04c      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b0c      	cmp	r3, #12
 8002e9c:	d824      	bhi.n	8002ee8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	3b23      	subs	r3, #35	@ 0x23
 8002eb0:	221f      	movs	r2, #31
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	4618      	mov	r0, r3
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3b23      	subs	r3, #35	@ 0x23
 8002eda:	fa00 f203 	lsl.w	r2, r0, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ee6:	e023      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3b41      	subs	r3, #65	@ 0x41
 8002efa:	221f      	movs	r2, #31
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43da      	mvns	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	400a      	ands	r2, r1
 8002f08:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	3b41      	subs	r3, #65	@ 0x41
 8002f24:	fa00 f203 	lsl.w	r2, r0, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a30      	ldr	r2, [pc, #192]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x29c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10a      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x1f4>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f42:	d105      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f44:	4b2d      	ldr	r3, [pc, #180]	@ (8002ffc <HAL_ADC_ConfigChannel+0x2a0>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4a2c      	ldr	r2, [pc, #176]	@ (8002ffc <HAL_ADC_ConfigChannel+0x2a0>)
 8002f4a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f4e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a28      	ldr	r2, [pc, #160]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x29c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10f      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x21e>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b12      	cmp	r3, #18
 8002f60:	d10b      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f62:	4b26      	ldr	r3, [pc, #152]	@ (8002ffc <HAL_ADC_ConfigChannel+0x2a0>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4a25      	ldr	r2, [pc, #148]	@ (8002ffc <HAL_ADC_ConfigChannel+0x2a0>)
 8002f68:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002f6c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f6e:	4b23      	ldr	r3, [pc, #140]	@ (8002ffc <HAL_ADC_ConfigChannel+0x2a0>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4a22      	ldr	r2, [pc, #136]	@ (8002ffc <HAL_ADC_ConfigChannel+0x2a0>)
 8002f74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f78:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x29c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d12b      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x280>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x298>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <HAL_ADC_ConfigChannel+0x23a>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b11      	cmp	r3, #17
 8002f94:	d122      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f96:	4b19      	ldr	r3, [pc, #100]	@ (8002ffc <HAL_ADC_ConfigChannel+0x2a0>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4a18      	ldr	r2, [pc, #96]	@ (8002ffc <HAL_ADC_ConfigChannel+0x2a0>)
 8002f9c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002fa0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002fa2:	4b16      	ldr	r3, [pc, #88]	@ (8002ffc <HAL_ADC_ConfigChannel+0x2a0>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4a15      	ldr	r2, [pc, #84]	@ (8002ffc <HAL_ADC_ConfigChannel+0x2a0>)
 8002fa8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fac:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a10      	ldr	r2, [pc, #64]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x298>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d111      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002fb8:	4b11      	ldr	r3, [pc, #68]	@ (8003000 <HAL_ADC_ConfigChannel+0x2a4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a11      	ldr	r2, [pc, #68]	@ (8003004 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	0c9a      	lsrs	r2, r3, #18
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fce:	e002      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f9      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	10000012 	.word	0x10000012
 8002ff8:	40012000 	.word	0x40012000
 8002ffc:	40012300 	.word	0x40012300
 8003000:	20000004 	.word	0x20000004
 8003004:	431bde83 	.word	0x431bde83

08003008 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003010:	4b78      	ldr	r3, [pc, #480]	@ (80031f4 <ADC_Init+0x1ec>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4a77      	ldr	r2, [pc, #476]	@ (80031f4 <ADC_Init+0x1ec>)
 8003016:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800301a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800301c:	4b75      	ldr	r3, [pc, #468]	@ (80031f4 <ADC_Init+0x1ec>)
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4973      	ldr	r1, [pc, #460]	@ (80031f4 <ADC_Init+0x1ec>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003038:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6859      	ldr	r1, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	021a      	lsls	r2, r3, #8
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800305c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800307e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6899      	ldr	r1, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003096:	4a58      	ldr	r2, [pc, #352]	@ (80031f8 <ADC_Init+0x1f0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d022      	beq.n	80030e2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6899      	ldr	r1, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6899      	ldr	r1, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	e00f      	b.n	8003102 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003100:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0202 	bic.w	r2, r2, #2
 8003110:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6899      	ldr	r1, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	005a      	lsls	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01b      	beq.n	8003168 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800313e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800314e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6859      	ldr	r1, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	3b01      	subs	r3, #1
 800315c:	035a      	lsls	r2, r3, #13
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	e007      	b.n	8003178 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003176:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003186:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	3b01      	subs	r3, #1
 8003194:	051a      	lsls	r2, r3, #20
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6899      	ldr	r1, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031ba:	025a      	lsls	r2, r3, #9
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6899      	ldr	r1, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	029a      	lsls	r2, r3, #10
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	609a      	str	r2, [r3, #8]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	40012300 	.word	0x40012300
 80031f8:	0f000001 	.word	0x0f000001

080031fc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003208:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003212:	2b00      	cmp	r3, #0
 8003214:	d13c      	bne.n	8003290 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d12b      	bne.n	8003288 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003234:	2b00      	cmp	r3, #0
 8003236:	d127      	bne.n	8003288 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003242:	2b00      	cmp	r3, #0
 8003244:	d006      	beq.n	8003254 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003250:	2b00      	cmp	r3, #0
 8003252:	d119      	bne.n	8003288 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0220 	bic.w	r2, r2, #32
 8003262:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d105      	bne.n	8003288 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f7fd fc87 	bl	8000b9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800328e:	e00e      	b.n	80032ae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7ff fd53 	bl	8002d48 <HAL_ADC_ErrorCallback>
}
 80032a2:	e004      	b.n	80032ae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
}
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f7ff fd2b 	bl	8002d20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032de:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2240      	movs	r2, #64	@ 0x40
 80032e4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ea:	f043 0204 	orr.w	r2, r3, #4
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f7ff fd28 	bl	8002d48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003324:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <__NVIC_SetPriorityGrouping+0x40>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003330:	4013      	ands	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800333c:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 800333e:	4313      	orrs	r3, r2
 8003340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003342:	4a04      	ldr	r2, [pc, #16]	@ (8003354 <__NVIC_SetPriorityGrouping+0x40>)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	60d3      	str	r3, [r2, #12]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00
 8003358:	05fa0000 	.word	0x05fa0000

0800335c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003360:	4b04      	ldr	r3, [pc, #16]	@ (8003374 <__NVIC_GetPriorityGrouping+0x18>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	f003 0307 	and.w	r3, r3, #7
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	2b00      	cmp	r3, #0
 8003388:	db0b      	blt.n	80033a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	4907      	ldr	r1, [pc, #28]	@ (80033b0 <__NVIC_EnableIRQ+0x38>)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2001      	movs	r0, #1
 800339a:	fa00 f202 	lsl.w	r2, r0, r2
 800339e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000e100 	.word	0xe000e100

080033b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	db0a      	blt.n	80033de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	490c      	ldr	r1, [pc, #48]	@ (8003400 <__NVIC_SetPriority+0x4c>)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033dc:	e00a      	b.n	80033f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4908      	ldr	r1, [pc, #32]	@ (8003404 <__NVIC_SetPriority+0x50>)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3b04      	subs	r3, #4
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	440b      	add	r3, r1
 80033f2:	761a      	strb	r2, [r3, #24]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	@ 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f1c3 0307 	rsb	r3, r3, #7
 8003422:	2b04      	cmp	r3, #4
 8003424:	bf28      	it	cs
 8003426:	2304      	movcs	r3, #4
 8003428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3304      	adds	r3, #4
 800342e:	2b06      	cmp	r3, #6
 8003430:	d902      	bls.n	8003438 <NVIC_EncodePriority+0x30>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3b03      	subs	r3, #3
 8003436:	e000      	b.n	800343a <NVIC_EncodePriority+0x32>
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003450:	f04f 31ff 	mov.w	r1, #4294967295
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	43d9      	mvns	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	4313      	orrs	r3, r2
         );
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	@ 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003480:	d301      	bcc.n	8003486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003482:	2301      	movs	r3, #1
 8003484:	e00f      	b.n	80034a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003486:	4a0a      	ldr	r2, [pc, #40]	@ (80034b0 <SysTick_Config+0x40>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348e:	210f      	movs	r1, #15
 8003490:	f04f 30ff 	mov.w	r0, #4294967295
 8003494:	f7ff ff8e 	bl	80033b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003498:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <SysTick_Config+0x40>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349e:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <SysTick_Config+0x40>)
 80034a0:	2207      	movs	r2, #7
 80034a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000e010 	.word	0xe000e010

080034b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff29 	bl	8003314 <__NVIC_SetPriorityGrouping>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034dc:	f7ff ff3e 	bl	800335c <__NVIC_GetPriorityGrouping>
 80034e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	6978      	ldr	r0, [r7, #20]
 80034e8:	f7ff ff8e 	bl	8003408 <NVIC_EncodePriority>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff5d 	bl	80033b4 <__NVIC_SetPriority>
}
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff31 	bl	8003378 <__NVIC_EnableIRQ>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ffa2 	bl	8003470 <SysTick_Config>
 800352c:	4603      	mov	r3, r0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003544:	f7ff f914 	bl	8002770 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e099      	b.n	8003688 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003574:	e00f      	b.n	8003596 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003576:	f7ff f8fb 	bl	8002770 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b05      	cmp	r3, #5
 8003582:	d908      	bls.n	8003596 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2203      	movs	r2, #3
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e078      	b.n	8003688 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e8      	bne.n	8003576 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4b38      	ldr	r3, [pc, #224]	@ (8003690 <HAL_DMA_Init+0x158>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d107      	bne.n	8003600 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	4313      	orrs	r3, r2
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f023 0307 	bic.w	r3, r3, #7
 8003616:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	2b04      	cmp	r3, #4
 8003628:	d117      	bne.n	800365a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00e      	beq.n	800365a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fb09 	bl	8003c54 <DMA_CheckFifoParam>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2240      	movs	r2, #64	@ 0x40
 800364c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003656:	2301      	movs	r3, #1
 8003658:	e016      	b.n	8003688 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fac0 	bl	8003be8 <DMA_CalcBaseAndBitshift>
 8003668:	4603      	mov	r3, r0
 800366a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003670:	223f      	movs	r2, #63	@ 0x3f
 8003672:	409a      	lsls	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	e010803f 	.word	0xe010803f

08003694 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_DMA_Start_IT+0x26>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e048      	b.n	800374c <HAL_DMA_Start_IT+0xb8>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d137      	bne.n	800373e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2202      	movs	r2, #2
 80036d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fa52 	bl	8003b8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ec:	223f      	movs	r2, #63	@ 0x3f
 80036ee:	409a      	lsls	r2, r3
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0216 	orr.w	r2, r2, #22
 8003702:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003712:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0208 	orr.w	r2, r2, #8
 800372a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	e005      	b.n	800374a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003746:	2302      	movs	r3, #2
 8003748:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800374a:	7dfb      	ldrb	r3, [r7, #23]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003760:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003762:	f7ff f805 	bl	8002770 <HAL_GetTick>
 8003766:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d008      	beq.n	8003786 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2280      	movs	r2, #128	@ 0x80
 8003778:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e052      	b.n	800382c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0216 	bic.w	r2, r2, #22
 8003794:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <HAL_DMA_Abort+0x62>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0208 	bic.w	r2, r2, #8
 80037c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d6:	e013      	b.n	8003800 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037d8:	f7fe ffca 	bl	8002770 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	d90c      	bls.n	8003800 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2203      	movs	r2, #3
 80037f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e015      	b.n	800382c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e4      	bne.n	80037d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003812:	223f      	movs	r2, #63	@ 0x3f
 8003814:	409a      	lsls	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d004      	beq.n	8003852 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2280      	movs	r2, #128	@ 0x80
 800384c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e00c      	b.n	800386c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2205      	movs	r2, #5
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003884:	4b8e      	ldr	r3, [pc, #568]	@ (8003ac0 <HAL_DMA_IRQHandler+0x248>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a8e      	ldr	r2, [pc, #568]	@ (8003ac4 <HAL_DMA_IRQHandler+0x24c>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	0a9b      	lsrs	r3, r3, #10
 8003890:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003896:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a2:	2208      	movs	r2, #8
 80038a4:	409a      	lsls	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d01a      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d013      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0204 	bic.w	r2, r2, #4
 80038ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d0:	2208      	movs	r2, #8
 80038d2:	409a      	lsls	r2, r3
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	f043 0201 	orr.w	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e8:	2201      	movs	r2, #1
 80038ea:	409a      	lsls	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4013      	ands	r3, r2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d012      	beq.n	800391a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00b      	beq.n	800391a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003906:	2201      	movs	r2, #1
 8003908:	409a      	lsls	r2, r3
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003912:	f043 0202 	orr.w	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391e:	2204      	movs	r2, #4
 8003920:	409a      	lsls	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4013      	ands	r3, r2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d012      	beq.n	8003950 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00b      	beq.n	8003950 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393c:	2204      	movs	r2, #4
 800393e:	409a      	lsls	r2, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003948:	f043 0204 	orr.w	r2, r3, #4
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003954:	2210      	movs	r2, #16
 8003956:	409a      	lsls	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d043      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d03c      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003972:	2210      	movs	r2, #16
 8003974:	409a      	lsls	r2, r3
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d018      	beq.n	80039ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d108      	bne.n	80039a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d024      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	4798      	blx	r3
 80039a6:	e01f      	b.n	80039e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d01b      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4798      	blx	r3
 80039b8:	e016      	b.n	80039e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d107      	bne.n	80039d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0208 	bic.w	r2, r2, #8
 80039d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ec:	2220      	movs	r2, #32
 80039ee:	409a      	lsls	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 808f 	beq.w	8003b18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8087 	beq.w	8003b18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0e:	2220      	movs	r2, #32
 8003a10:	409a      	lsls	r2, r3
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b05      	cmp	r3, #5
 8003a20:	d136      	bne.n	8003a90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0216 	bic.w	r2, r2, #22
 8003a30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <HAL_DMA_IRQHandler+0x1da>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0208 	bic.w	r2, r2, #8
 8003a60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a66:	223f      	movs	r2, #63	@ 0x3f
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d07e      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
        }
        return;
 8003a8e:	e079      	b.n	8003b84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d01d      	beq.n	8003ada <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10d      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d031      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
 8003abc:	e02c      	b.n	8003b18 <HAL_DMA_IRQHandler+0x2a0>
 8003abe:	bf00      	nop
 8003ac0:	20000004 	.word	0x20000004
 8003ac4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d023      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4798      	blx	r3
 8003ad8:	e01e      	b.n	8003b18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10f      	bne.n	8003b08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0210 	bic.w	r2, r2, #16
 8003af6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d032      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d022      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2205      	movs	r2, #5
 8003b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0201 	bic.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	3301      	adds	r3, #1
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d307      	bcc.n	8003b60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f2      	bne.n	8003b44 <HAL_DMA_IRQHandler+0x2cc>
 8003b5e:	e000      	b.n	8003b62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	4798      	blx	r3
 8003b82:	e000      	b.n	8003b86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b84:	bf00      	nop
    }
  }
}
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ba8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b40      	cmp	r3, #64	@ 0x40
 8003bb8:	d108      	bne.n	8003bcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bca:	e007      	b.n	8003bdc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	60da      	str	r2, [r3, #12]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	3b10      	subs	r3, #16
 8003bf8:	4a13      	ldr	r2, [pc, #76]	@ (8003c48 <DMA_CalcBaseAndBitshift+0x60>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	091b      	lsrs	r3, r3, #4
 8003c00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c02:	4a12      	ldr	r2, [pc, #72]	@ (8003c4c <DMA_CalcBaseAndBitshift+0x64>)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d908      	bls.n	8003c28 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <DMA_CalcBaseAndBitshift+0x68>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	1d1a      	adds	r2, r3, #4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c26:	e006      	b.n	8003c36 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <DMA_CalcBaseAndBitshift+0x68>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	aaaaaaab 	.word	0xaaaaaaab
 8003c4c:	0800f748 	.word	0x0800f748
 8003c50:	fffffc00 	.word	0xfffffc00

08003c54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d11f      	bne.n	8003cae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d856      	bhi.n	8003d22 <DMA_CheckFifoParam+0xce>
 8003c74:	a201      	add	r2, pc, #4	@ (adr r2, 8003c7c <DMA_CheckFifoParam+0x28>)
 8003c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7a:	bf00      	nop
 8003c7c:	08003c8d 	.word	0x08003c8d
 8003c80:	08003c9f 	.word	0x08003c9f
 8003c84:	08003c8d 	.word	0x08003c8d
 8003c88:	08003d23 	.word	0x08003d23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d046      	beq.n	8003d26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c9c:	e043      	b.n	8003d26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ca6:	d140      	bne.n	8003d2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cac:	e03d      	b.n	8003d2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb6:	d121      	bne.n	8003cfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d837      	bhi.n	8003d2e <DMA_CheckFifoParam+0xda>
 8003cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc4 <DMA_CheckFifoParam+0x70>)
 8003cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc4:	08003cd5 	.word	0x08003cd5
 8003cc8:	08003cdb 	.word	0x08003cdb
 8003ccc:	08003cd5 	.word	0x08003cd5
 8003cd0:	08003ced 	.word	0x08003ced
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd8:	e030      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d025      	beq.n	8003d32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cea:	e022      	b.n	8003d32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003cf4:	d11f      	bne.n	8003d36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cfa:	e01c      	b.n	8003d36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d903      	bls.n	8003d0a <DMA_CheckFifoParam+0xb6>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d003      	beq.n	8003d10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d08:	e018      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d0e:	e015      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d20:	e00b      	b.n	8003d3a <DMA_CheckFifoParam+0xe6>
      break;
 8003d22:	bf00      	nop
 8003d24:	e00a      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
      break;
 8003d26:	bf00      	nop
 8003d28:	e008      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
      break;
 8003d2a:	bf00      	nop
 8003d2c:	e006      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
      break;
 8003d2e:	bf00      	nop
 8003d30:	e004      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
      break;
 8003d32:	bf00      	nop
 8003d34:	e002      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
      break;   
 8003d36:	bf00      	nop
 8003d38:	e000      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
      break;
 8003d3a:	bf00      	nop
    }
  } 
  
  return status; 
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop

08003d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b089      	sub	sp, #36	@ 0x24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	e175      	b.n	8004058 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	f040 8164 	bne.w	8004052 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d005      	beq.n	8003da2 <HAL_GPIO_Init+0x56>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d130      	bne.n	8003e04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	2203      	movs	r2, #3
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dd8:	2201      	movs	r2, #1
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 0201 	and.w	r2, r3, #1
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 0303 	and.w	r3, r3, #3
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d017      	beq.n	8003e40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d123      	bne.n	8003e94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	08da      	lsrs	r2, r3, #3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3208      	adds	r2, #8
 8003e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	220f      	movs	r2, #15
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	08da      	lsrs	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3208      	adds	r2, #8
 8003e8e:	69b9      	ldr	r1, [r7, #24]
 8003e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0203 	and.w	r2, r3, #3
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80be 	beq.w	8004052 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ed6:	4b66      	ldr	r3, [pc, #408]	@ (8004070 <HAL_GPIO_Init+0x324>)
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eda:	4a65      	ldr	r2, [pc, #404]	@ (8004070 <HAL_GPIO_Init+0x324>)
 8003edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ee2:	4b63      	ldr	r3, [pc, #396]	@ (8004070 <HAL_GPIO_Init+0x324>)
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003eee:	4a61      	ldr	r2, [pc, #388]	@ (8004074 <HAL_GPIO_Init+0x328>)
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	089b      	lsrs	r3, r3, #2
 8003ef4:	3302      	adds	r3, #2
 8003ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	220f      	movs	r2, #15
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a58      	ldr	r2, [pc, #352]	@ (8004078 <HAL_GPIO_Init+0x32c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d037      	beq.n	8003f8a <HAL_GPIO_Init+0x23e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a57      	ldr	r2, [pc, #348]	@ (800407c <HAL_GPIO_Init+0x330>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d031      	beq.n	8003f86 <HAL_GPIO_Init+0x23a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a56      	ldr	r2, [pc, #344]	@ (8004080 <HAL_GPIO_Init+0x334>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d02b      	beq.n	8003f82 <HAL_GPIO_Init+0x236>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a55      	ldr	r2, [pc, #340]	@ (8004084 <HAL_GPIO_Init+0x338>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d025      	beq.n	8003f7e <HAL_GPIO_Init+0x232>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a54      	ldr	r2, [pc, #336]	@ (8004088 <HAL_GPIO_Init+0x33c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01f      	beq.n	8003f7a <HAL_GPIO_Init+0x22e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a53      	ldr	r2, [pc, #332]	@ (800408c <HAL_GPIO_Init+0x340>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d019      	beq.n	8003f76 <HAL_GPIO_Init+0x22a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a52      	ldr	r2, [pc, #328]	@ (8004090 <HAL_GPIO_Init+0x344>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <HAL_GPIO_Init+0x226>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a51      	ldr	r2, [pc, #324]	@ (8004094 <HAL_GPIO_Init+0x348>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00d      	beq.n	8003f6e <HAL_GPIO_Init+0x222>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a50      	ldr	r2, [pc, #320]	@ (8004098 <HAL_GPIO_Init+0x34c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d007      	beq.n	8003f6a <HAL_GPIO_Init+0x21e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a4f      	ldr	r2, [pc, #316]	@ (800409c <HAL_GPIO_Init+0x350>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d101      	bne.n	8003f66 <HAL_GPIO_Init+0x21a>
 8003f62:	2309      	movs	r3, #9
 8003f64:	e012      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f66:	230a      	movs	r3, #10
 8003f68:	e010      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	e00e      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f6e:	2307      	movs	r3, #7
 8003f70:	e00c      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f72:	2306      	movs	r3, #6
 8003f74:	e00a      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f76:	2305      	movs	r3, #5
 8003f78:	e008      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f7a:	2304      	movs	r3, #4
 8003f7c:	e006      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e004      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e002      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	f002 0203 	and.w	r2, r2, #3
 8003f92:	0092      	lsls	r2, r2, #2
 8003f94:	4093      	lsls	r3, r2
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f9c:	4935      	ldr	r1, [pc, #212]	@ (8004074 <HAL_GPIO_Init+0x328>)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003faa:	4b3d      	ldr	r3, [pc, #244]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fce:	4a34      	ldr	r2, [pc, #208]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fd4:	4b32      	ldr	r3, [pc, #200]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ff8:	4a29      	ldr	r2, [pc, #164]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ffe:	4b28      	ldr	r3, [pc, #160]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	43db      	mvns	r3, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4013      	ands	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004022:	4a1f      	ldr	r2, [pc, #124]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004028:	4b1d      	ldr	r3, [pc, #116]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800404c:	4a14      	ldr	r2, [pc, #80]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3301      	adds	r3, #1
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b0f      	cmp	r3, #15
 800405c:	f67f ae86 	bls.w	8003d6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	3724      	adds	r7, #36	@ 0x24
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800
 8004074:	40013800 	.word	0x40013800
 8004078:	40020000 	.word	0x40020000
 800407c:	40020400 	.word	0x40020400
 8004080:	40020800 	.word	0x40020800
 8004084:	40020c00 	.word	0x40020c00
 8004088:	40021000 	.word	0x40021000
 800408c:	40021400 	.word	0x40021400
 8004090:	40021800 	.word	0x40021800
 8004094:	40021c00 	.word	0x40021c00
 8004098:	40022000 	.word	0x40022000
 800409c:	40022400 	.word	0x40022400
 80040a0:	40013c00 	.word	0x40013c00

080040a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	807b      	strh	r3, [r7, #2]
 80040b0:	4613      	mov	r3, r2
 80040b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040b4:	787b      	ldrb	r3, [r7, #1]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ba:	887a      	ldrh	r2, [r7, #2]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80040c0:	e003      	b.n	80040ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80040c2:	887b      	ldrh	r3, [r7, #2]
 80040c4:	041a      	lsls	r2, r3, #16
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	619a      	str	r2, [r3, #24]
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	460b      	mov	r3, r1
 80040e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040e8:	887a      	ldrh	r2, [r7, #2]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4013      	ands	r3, r2
 80040ee:	041a      	lsls	r2, r3, #16
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	43d9      	mvns	r1, r3
 80040f4:	887b      	ldrh	r3, [r7, #2]
 80040f6:	400b      	ands	r3, r1
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	619a      	str	r2, [r3, #24]
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004116:	4b08      	ldr	r3, [pc, #32]	@ (8004138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	4013      	ands	r3, r2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d006      	beq.n	8004130 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004122:	4a05      	ldr	r2, [pc, #20]	@ (8004138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004124:	88fb      	ldrh	r3, [r7, #6]
 8004126:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fd fbae 	bl	800188c <HAL_GPIO_EXTI_Callback>
  }
}
 8004130:	bf00      	nop
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40013c00 	.word	0x40013c00

0800413c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004144:	2300      	movs	r3, #0
 8004146:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e29b      	b.n	800468a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8087 	beq.w	800426e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004160:	4b96      	ldr	r3, [pc, #600]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b04      	cmp	r3, #4
 800416a:	d00c      	beq.n	8004186 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800416c:	4b93      	ldr	r3, [pc, #588]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b08      	cmp	r3, #8
 8004176:	d112      	bne.n	800419e <HAL_RCC_OscConfig+0x62>
 8004178:	4b90      	ldr	r3, [pc, #576]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004180:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004184:	d10b      	bne.n	800419e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004186:	4b8d      	ldr	r3, [pc, #564]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d06c      	beq.n	800426c <HAL_RCC_OscConfig+0x130>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d168      	bne.n	800426c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e275      	b.n	800468a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a6:	d106      	bne.n	80041b6 <HAL_RCC_OscConfig+0x7a>
 80041a8:	4b84      	ldr	r3, [pc, #528]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a83      	ldr	r2, [pc, #524]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80041ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	e02e      	b.n	8004214 <HAL_RCC_OscConfig+0xd8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCC_OscConfig+0x9c>
 80041be:	4b7f      	ldr	r3, [pc, #508]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a7e      	ldr	r2, [pc, #504]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80041c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b7c      	ldr	r3, [pc, #496]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a7b      	ldr	r2, [pc, #492]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80041d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e01d      	b.n	8004214 <HAL_RCC_OscConfig+0xd8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0xc0>
 80041e2:	4b76      	ldr	r3, [pc, #472]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a75      	ldr	r2, [pc, #468]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80041e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b73      	ldr	r3, [pc, #460]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a72      	ldr	r2, [pc, #456]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e00b      	b.n	8004214 <HAL_RCC_OscConfig+0xd8>
 80041fc:	4b6f      	ldr	r3, [pc, #444]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a6e      	ldr	r2, [pc, #440]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 8004202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	4b6c      	ldr	r3, [pc, #432]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a6b      	ldr	r2, [pc, #428]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 800420e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d013      	beq.n	8004244 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7fe faa8 	bl	8002770 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004224:	f7fe faa4 	bl	8002770 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	@ 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e229      	b.n	800468a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	4b61      	ldr	r3, [pc, #388]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0xe8>
 8004242:	e014      	b.n	800426e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fe fa94 	bl	8002770 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800424c:	f7fe fa90 	bl	8002770 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	@ 0x64
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e215      	b.n	800468a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425e:	4b57      	ldr	r3, [pc, #348]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x110>
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d069      	beq.n	800434e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800427a:	4b50      	ldr	r3, [pc, #320]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004286:	4b4d      	ldr	r3, [pc, #308]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b08      	cmp	r3, #8
 8004290:	d11c      	bne.n	80042cc <HAL_RCC_OscConfig+0x190>
 8004292:	4b4a      	ldr	r3, [pc, #296]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d116      	bne.n	80042cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429e:	4b47      	ldr	r3, [pc, #284]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_RCC_OscConfig+0x17a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d001      	beq.n	80042b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e1e9      	b.n	800468a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b6:	4b41      	ldr	r3, [pc, #260]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	493d      	ldr	r1, [pc, #244]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ca:	e040      	b.n	800434e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d023      	beq.n	800431c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d4:	4b39      	ldr	r3, [pc, #228]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a38      	ldr	r2, [pc, #224]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fe fa46 	bl	8002770 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e8:	f7fe fa42 	bl	8002770 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e1c7      	b.n	800468a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fa:	4b30      	ldr	r3, [pc, #192]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004306:	4b2d      	ldr	r3, [pc, #180]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	4929      	ldr	r1, [pc, #164]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]
 800431a:	e018      	b.n	800434e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431c:	4b27      	ldr	r3, [pc, #156]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a26      	ldr	r2, [pc, #152]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fe fa22 	bl	8002770 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004330:	f7fe fa1e 	bl	8002770 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e1a3      	b.n	800468a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004342:	4b1e      	ldr	r3, [pc, #120]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d038      	beq.n	80043cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d019      	beq.n	8004396 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004362:	4b16      	ldr	r3, [pc, #88]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 8004364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004366:	4a15      	ldr	r2, [pc, #84]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436e:	f7fe f9ff 	bl	8002770 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004376:	f7fe f9fb 	bl	8002770 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e180      	b.n	800468a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004388:	4b0c      	ldr	r3, [pc, #48]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 800438a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0f0      	beq.n	8004376 <HAL_RCC_OscConfig+0x23a>
 8004394:	e01a      	b.n	80043cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004396:	4b09      	ldr	r3, [pc, #36]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 8004398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800439a:	4a08      	ldr	r2, [pc, #32]	@ (80043bc <HAL_RCC_OscConfig+0x280>)
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a2:	f7fe f9e5 	bl	8002770 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a8:	e00a      	b.n	80043c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043aa:	f7fe f9e1 	bl	8002770 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d903      	bls.n	80043c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e166      	b.n	800468a <HAL_RCC_OscConfig+0x54e>
 80043bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c0:	4b92      	ldr	r3, [pc, #584]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 80043c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1ee      	bne.n	80043aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80a4 	beq.w	8004522 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043da:	4b8c      	ldr	r3, [pc, #560]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10d      	bne.n	8004402 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e6:	4b89      	ldr	r3, [pc, #548]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	4a88      	ldr	r2, [pc, #544]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 80043ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80043f2:	4b86      	ldr	r3, [pc, #536]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fe:	2301      	movs	r3, #1
 8004400:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004402:	4b83      	ldr	r3, [pc, #524]	@ (8004610 <HAL_RCC_OscConfig+0x4d4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440a:	2b00      	cmp	r3, #0
 800440c:	d118      	bne.n	8004440 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800440e:	4b80      	ldr	r3, [pc, #512]	@ (8004610 <HAL_RCC_OscConfig+0x4d4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a7f      	ldr	r2, [pc, #508]	@ (8004610 <HAL_RCC_OscConfig+0x4d4>)
 8004414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800441a:	f7fe f9a9 	bl	8002770 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004422:	f7fe f9a5 	bl	8002770 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b64      	cmp	r3, #100	@ 0x64
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e12a      	b.n	800468a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004434:	4b76      	ldr	r3, [pc, #472]	@ (8004610 <HAL_RCC_OscConfig+0x4d4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d106      	bne.n	8004456 <HAL_RCC_OscConfig+0x31a>
 8004448:	4b70      	ldr	r3, [pc, #448]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444c:	4a6f      	ldr	r2, [pc, #444]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6713      	str	r3, [r2, #112]	@ 0x70
 8004454:	e02d      	b.n	80044b2 <HAL_RCC_OscConfig+0x376>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0x33c>
 800445e:	4b6b      	ldr	r3, [pc, #428]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004462:	4a6a      	ldr	r2, [pc, #424]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	6713      	str	r3, [r2, #112]	@ 0x70
 800446a:	4b68      	ldr	r3, [pc, #416]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446e:	4a67      	ldr	r2, [pc, #412]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 8004470:	f023 0304 	bic.w	r3, r3, #4
 8004474:	6713      	str	r3, [r2, #112]	@ 0x70
 8004476:	e01c      	b.n	80044b2 <HAL_RCC_OscConfig+0x376>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b05      	cmp	r3, #5
 800447e:	d10c      	bne.n	800449a <HAL_RCC_OscConfig+0x35e>
 8004480:	4b62      	ldr	r3, [pc, #392]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004484:	4a61      	ldr	r2, [pc, #388]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 8004486:	f043 0304 	orr.w	r3, r3, #4
 800448a:	6713      	str	r3, [r2, #112]	@ 0x70
 800448c:	4b5f      	ldr	r3, [pc, #380]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004490:	4a5e      	ldr	r2, [pc, #376]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6713      	str	r3, [r2, #112]	@ 0x70
 8004498:	e00b      	b.n	80044b2 <HAL_RCC_OscConfig+0x376>
 800449a:	4b5c      	ldr	r3, [pc, #368]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449e:	4a5b      	ldr	r2, [pc, #364]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80044a6:	4b59      	ldr	r3, [pc, #356]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044aa:	4a58      	ldr	r2, [pc, #352]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 80044ac:	f023 0304 	bic.w	r3, r3, #4
 80044b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d015      	beq.n	80044e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ba:	f7fe f959 	bl	8002770 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c0:	e00a      	b.n	80044d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c2:	f7fe f955 	bl	8002770 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e0d8      	b.n	800468a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d8:	4b4c      	ldr	r3, [pc, #304]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0ee      	beq.n	80044c2 <HAL_RCC_OscConfig+0x386>
 80044e4:	e014      	b.n	8004510 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e6:	f7fe f943 	bl	8002770 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ec:	e00a      	b.n	8004504 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ee:	f7fe f93f 	bl	8002770 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e0c2      	b.n	800468a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004504:	4b41      	ldr	r3, [pc, #260]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1ee      	bne.n	80044ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004510:	7dfb      	ldrb	r3, [r7, #23]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d105      	bne.n	8004522 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004516:	4b3d      	ldr	r3, [pc, #244]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	4a3c      	ldr	r2, [pc, #240]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 800451c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004520:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 80ae 	beq.w	8004688 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800452c:	4b37      	ldr	r3, [pc, #220]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 030c 	and.w	r3, r3, #12
 8004534:	2b08      	cmp	r3, #8
 8004536:	d06d      	beq.n	8004614 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d14b      	bne.n	80045d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004540:	4b32      	ldr	r3, [pc, #200]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a31      	ldr	r2, [pc, #196]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 8004546:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800454a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fe f910 	bl	8002770 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004554:	f7fe f90c 	bl	8002770 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e091      	b.n	800468a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004566:	4b29      	ldr	r3, [pc, #164]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69da      	ldr	r2, [r3, #28]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	019b      	lsls	r3, r3, #6
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004588:	085b      	lsrs	r3, r3, #1
 800458a:	3b01      	subs	r3, #1
 800458c:	041b      	lsls	r3, r3, #16
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004594:	061b      	lsls	r3, r3, #24
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459c:	071b      	lsls	r3, r3, #28
 800459e:	491b      	ldr	r1, [pc, #108]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a4:	4b19      	ldr	r3, [pc, #100]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a18      	ldr	r2, [pc, #96]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 80045aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fe f8de 	bl	8002770 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fe f8da 	bl	8002770 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e05f      	b.n	800468a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ca:	4b10      	ldr	r3, [pc, #64]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x47c>
 80045d6:	e057      	b.n	8004688 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d8:	4b0c      	ldr	r3, [pc, #48]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a0b      	ldr	r2, [pc, #44]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 80045de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fe f8c4 	bl	8002770 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fe f8c0 	bl	8002770 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e045      	b.n	800468a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fe:	4b03      	ldr	r3, [pc, #12]	@ (800460c <HAL_RCC_OscConfig+0x4d0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x4b0>
 800460a:	e03d      	b.n	8004688 <HAL_RCC_OscConfig+0x54c>
 800460c:	40023800 	.word	0x40023800
 8004610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004614:	4b1f      	ldr	r3, [pc, #124]	@ (8004694 <HAL_RCC_OscConfig+0x558>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d030      	beq.n	8004684 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d129      	bne.n	8004684 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d122      	bne.n	8004684 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004644:	4013      	ands	r3, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800464a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800464c:	4293      	cmp	r3, r2
 800464e:	d119      	bne.n	8004684 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465a:	085b      	lsrs	r3, r3, #1
 800465c:	3b01      	subs	r3, #1
 800465e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d10f      	bne.n	8004684 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d107      	bne.n	8004684 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800

08004698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0d0      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046b0:	4b6a      	ldr	r3, [pc, #424]	@ (800485c <HAL_RCC_ClockConfig+0x1c4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d910      	bls.n	80046e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4b67      	ldr	r3, [pc, #412]	@ (800485c <HAL_RCC_ClockConfig+0x1c4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 020f 	bic.w	r2, r3, #15
 80046c6:	4965      	ldr	r1, [pc, #404]	@ (800485c <HAL_RCC_ClockConfig+0x1c4>)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ce:	4b63      	ldr	r3, [pc, #396]	@ (800485c <HAL_RCC_ClockConfig+0x1c4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d001      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0b8      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d020      	beq.n	800472e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046f8:	4b59      	ldr	r3, [pc, #356]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	4a58      	ldr	r2, [pc, #352]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 80046fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004702:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004710:	4b53      	ldr	r3, [pc, #332]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4a52      	ldr	r2, [pc, #328]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 8004716:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800471a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800471c:	4b50      	ldr	r3, [pc, #320]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	494d      	ldr	r1, [pc, #308]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 800472a:	4313      	orrs	r3, r2
 800472c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d040      	beq.n	80047bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d107      	bne.n	8004752 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004742:	4b47      	ldr	r3, [pc, #284]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d115      	bne.n	800477a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e07f      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475a:	4b41      	ldr	r3, [pc, #260]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e073      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476a:	4b3d      	ldr	r3, [pc, #244]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e06b      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800477a:	4b39      	ldr	r3, [pc, #228]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f023 0203 	bic.w	r2, r3, #3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	4936      	ldr	r1, [pc, #216]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 8004788:	4313      	orrs	r3, r2
 800478a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800478c:	f7fd fff0 	bl	8002770 <HAL_GetTick>
 8004790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004792:	e00a      	b.n	80047aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004794:	f7fd ffec 	bl	8002770 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e053      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047aa:	4b2d      	ldr	r3, [pc, #180]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 020c 	and.w	r2, r3, #12
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d1eb      	bne.n	8004794 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047bc:	4b27      	ldr	r3, [pc, #156]	@ (800485c <HAL_RCC_ClockConfig+0x1c4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d210      	bcs.n	80047ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ca:	4b24      	ldr	r3, [pc, #144]	@ (800485c <HAL_RCC_ClockConfig+0x1c4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 020f 	bic.w	r2, r3, #15
 80047d2:	4922      	ldr	r1, [pc, #136]	@ (800485c <HAL_RCC_ClockConfig+0x1c4>)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047da:	4b20      	ldr	r3, [pc, #128]	@ (800485c <HAL_RCC_ClockConfig+0x1c4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e032      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f8:	4b19      	ldr	r3, [pc, #100]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4916      	ldr	r1, [pc, #88]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 8004806:	4313      	orrs	r3, r2
 8004808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004816:	4b12      	ldr	r3, [pc, #72]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	490e      	ldr	r1, [pc, #56]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800482a:	f000 f821 	bl	8004870 <HAL_RCC_GetSysClockFreq>
 800482e:	4602      	mov	r2, r0
 8004830:	4b0b      	ldr	r3, [pc, #44]	@ (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	091b      	lsrs	r3, r3, #4
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	490a      	ldr	r1, [pc, #40]	@ (8004864 <HAL_RCC_ClockConfig+0x1cc>)
 800483c:	5ccb      	ldrb	r3, [r1, r3]
 800483e:	fa22 f303 	lsr.w	r3, r2, r3
 8004842:	4a09      	ldr	r2, [pc, #36]	@ (8004868 <HAL_RCC_ClockConfig+0x1d0>)
 8004844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004846:	4b09      	ldr	r3, [pc, #36]	@ (800486c <HAL_RCC_ClockConfig+0x1d4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f7fd ff4c 	bl	80026e8 <HAL_InitTick>

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40023c00 	.word	0x40023c00
 8004860:	40023800 	.word	0x40023800
 8004864:	0800f730 	.word	0x0800f730
 8004868:	20000004 	.word	0x20000004
 800486c:	20000008 	.word	0x20000008

08004870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004874:	b094      	sub	sp, #80	@ 0x50
 8004876:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	647b      	str	r3, [r7, #68]	@ 0x44
 800487c:	2300      	movs	r3, #0
 800487e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004880:	2300      	movs	r3, #0
 8004882:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004888:	4b79      	ldr	r3, [pc, #484]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x200>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 030c 	and.w	r3, r3, #12
 8004890:	2b08      	cmp	r3, #8
 8004892:	d00d      	beq.n	80048b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004894:	2b08      	cmp	r3, #8
 8004896:	f200 80e1 	bhi.w	8004a5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x34>
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d003      	beq.n	80048aa <HAL_RCC_GetSysClockFreq+0x3a>
 80048a2:	e0db      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048a4:	4b73      	ldr	r3, [pc, #460]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x204>)
 80048a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048a8:	e0db      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048aa:	4b72      	ldr	r3, [pc, #456]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x204>)
 80048ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048ae:	e0d8      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d063      	beq.n	800498e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	099b      	lsrs	r3, r3, #6
 80048cc:	2200      	movs	r2, #0
 80048ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80048da:	2300      	movs	r3, #0
 80048dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80048de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048e2:	4622      	mov	r2, r4
 80048e4:	462b      	mov	r3, r5
 80048e6:	f04f 0000 	mov.w	r0, #0
 80048ea:	f04f 0100 	mov.w	r1, #0
 80048ee:	0159      	lsls	r1, r3, #5
 80048f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048f4:	0150      	lsls	r0, r2, #5
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4621      	mov	r1, r4
 80048fc:	1a51      	subs	r1, r2, r1
 80048fe:	6139      	str	r1, [r7, #16]
 8004900:	4629      	mov	r1, r5
 8004902:	eb63 0301 	sbc.w	r3, r3, r1
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004914:	4659      	mov	r1, fp
 8004916:	018b      	lsls	r3, r1, #6
 8004918:	4651      	mov	r1, sl
 800491a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800491e:	4651      	mov	r1, sl
 8004920:	018a      	lsls	r2, r1, #6
 8004922:	4651      	mov	r1, sl
 8004924:	ebb2 0801 	subs.w	r8, r2, r1
 8004928:	4659      	mov	r1, fp
 800492a:	eb63 0901 	sbc.w	r9, r3, r1
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800493a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800493e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004942:	4690      	mov	r8, r2
 8004944:	4699      	mov	r9, r3
 8004946:	4623      	mov	r3, r4
 8004948:	eb18 0303 	adds.w	r3, r8, r3
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	462b      	mov	r3, r5
 8004950:	eb49 0303 	adc.w	r3, r9, r3
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004962:	4629      	mov	r1, r5
 8004964:	028b      	lsls	r3, r1, #10
 8004966:	4621      	mov	r1, r4
 8004968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800496c:	4621      	mov	r1, r4
 800496e:	028a      	lsls	r2, r1, #10
 8004970:	4610      	mov	r0, r2
 8004972:	4619      	mov	r1, r3
 8004974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004976:	2200      	movs	r2, #0
 8004978:	62bb      	str	r3, [r7, #40]	@ 0x28
 800497a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800497c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004980:	f7fb fe72 	bl	8000668 <__aeabi_uldivmod>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4613      	mov	r3, r2
 800498a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800498c:	e058      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800498e:	4b38      	ldr	r3, [pc, #224]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	099b      	lsrs	r3, r3, #6
 8004994:	2200      	movs	r2, #0
 8004996:	4618      	mov	r0, r3
 8004998:	4611      	mov	r1, r2
 800499a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800499e:	623b      	str	r3, [r7, #32]
 80049a0:	2300      	movs	r3, #0
 80049a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049a8:	4642      	mov	r2, r8
 80049aa:	464b      	mov	r3, r9
 80049ac:	f04f 0000 	mov.w	r0, #0
 80049b0:	f04f 0100 	mov.w	r1, #0
 80049b4:	0159      	lsls	r1, r3, #5
 80049b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ba:	0150      	lsls	r0, r2, #5
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4641      	mov	r1, r8
 80049c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80049c6:	4649      	mov	r1, r9
 80049c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049e0:	ebb2 040a 	subs.w	r4, r2, sl
 80049e4:	eb63 050b 	sbc.w	r5, r3, fp
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	00eb      	lsls	r3, r5, #3
 80049f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049f6:	00e2      	lsls	r2, r4, #3
 80049f8:	4614      	mov	r4, r2
 80049fa:	461d      	mov	r5, r3
 80049fc:	4643      	mov	r3, r8
 80049fe:	18e3      	adds	r3, r4, r3
 8004a00:	603b      	str	r3, [r7, #0]
 8004a02:	464b      	mov	r3, r9
 8004a04:	eb45 0303 	adc.w	r3, r5, r3
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a16:	4629      	mov	r1, r5
 8004a18:	028b      	lsls	r3, r1, #10
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a20:	4621      	mov	r1, r4
 8004a22:	028a      	lsls	r2, r1, #10
 8004a24:	4610      	mov	r0, r2
 8004a26:	4619      	mov	r1, r3
 8004a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	61fa      	str	r2, [r7, #28]
 8004a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a34:	f7fb fe18 	bl	8000668 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a40:	4b0b      	ldr	r3, [pc, #44]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	0c1b      	lsrs	r3, r3, #16
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a5a:	e002      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a5c:	4b05      	ldr	r3, [pc, #20]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3750      	adds	r7, #80	@ 0x50
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800
 8004a74:	00f42400 	.word	0x00f42400

08004a78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a7c:	4b03      	ldr	r3, [pc, #12]	@ (8004a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	20000004 	.word	0x20000004

08004a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a94:	f7ff fff0 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	0a9b      	lsrs	r3, r3, #10
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	4903      	ldr	r1, [pc, #12]	@ (8004ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	0800f740 	.word	0x0800f740

08004ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004abc:	f7ff ffdc 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	0b5b      	lsrs	r3, r3, #13
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4903      	ldr	r1, [pc, #12]	@ (8004adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ace:	5ccb      	ldrb	r3, [r1, r3]
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	0800f740 	.word	0x0800f740

08004ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d012      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b08:	4b69      	ldr	r3, [pc, #420]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	4a68      	ldr	r2, [pc, #416]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004b12:	6093      	str	r3, [r2, #8]
 8004b14:	4b66      	ldr	r3, [pc, #408]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b1c:	4964      	ldr	r1, [pc, #400]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d017      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b48:	4959      	ldr	r1, [pc, #356]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b58:	d101      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b66:	2301      	movs	r3, #1
 8004b68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d017      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b76:	4b4e      	ldr	r3, [pc, #312]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b7c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b84:	494a      	ldr	r1, [pc, #296]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b94:	d101      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b96:	2301      	movs	r3, #1
 8004b98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 808b 	beq.w	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bc4:	4b3a      	ldr	r3, [pc, #232]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc8:	4a39      	ldr	r2, [pc, #228]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bce:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bd0:	4b37      	ldr	r3, [pc, #220]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bdc:	4b35      	ldr	r3, [pc, #212]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a34      	ldr	r2, [pc, #208]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be8:	f7fd fdc2 	bl	8002770 <HAL_GetTick>
 8004bec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bee:	e008      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf0:	f7fd fdbe 	bl	8002770 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b64      	cmp	r3, #100	@ 0x64
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e38f      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c02:	4b2c      	ldr	r3, [pc, #176]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c0e:	4b28      	ldr	r3, [pc, #160]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d035      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d02e      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c2c:	4b20      	ldr	r3, [pc, #128]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c36:	4b1e      	ldr	r3, [pc, #120]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c40:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c42:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c46:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c4c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c4e:	4a18      	ldr	r2, [pc, #96]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c54:	4b16      	ldr	r3, [pc, #88]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d114      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c60:	f7fd fd86 	bl	8002770 <HAL_GetTick>
 8004c64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c66:	e00a      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c68:	f7fd fd82 	bl	8002770 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e351      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0ee      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c96:	d111      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c98:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ca4:	4b04      	ldr	r3, [pc, #16]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ca6:	400b      	ands	r3, r1
 8004ca8:	4901      	ldr	r1, [pc, #4]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	608b      	str	r3, [r1, #8]
 8004cae:	e00b      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	40007000 	.word	0x40007000
 8004cb8:	0ffffcff 	.word	0x0ffffcff
 8004cbc:	4bac      	ldr	r3, [pc, #688]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4aab      	ldr	r2, [pc, #684]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004cc6:	6093      	str	r3, [r2, #8]
 8004cc8:	4ba9      	ldr	r3, [pc, #676]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd4:	49a6      	ldr	r1, [pc, #664]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d010      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ce6:	4ba2      	ldr	r3, [pc, #648]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cec:	4aa0      	ldr	r2, [pc, #640]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cf2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004cf6:	4b9e      	ldr	r3, [pc, #632]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d00:	499b      	ldr	r1, [pc, #620]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d14:	4b96      	ldr	r3, [pc, #600]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d22:	4993      	ldr	r1, [pc, #588]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d36:	4b8e      	ldr	r3, [pc, #568]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d44:	498a      	ldr	r1, [pc, #552]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d58:	4b85      	ldr	r3, [pc, #532]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d66:	4982      	ldr	r1, [pc, #520]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d7a:	4b7d      	ldr	r3, [pc, #500]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d88:	4979      	ldr	r1, [pc, #484]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d9c:	4b74      	ldr	r3, [pc, #464]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da2:	f023 0203 	bic.w	r2, r3, #3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004daa:	4971      	ldr	r1, [pc, #452]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dbe:	4b6c      	ldr	r3, [pc, #432]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc4:	f023 020c 	bic.w	r2, r3, #12
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dcc:	4968      	ldr	r1, [pc, #416]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004de0:	4b63      	ldr	r3, [pc, #396]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dee:	4960      	ldr	r1, [pc, #384]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e02:	4b5b      	ldr	r3, [pc, #364]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e08:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e10:	4957      	ldr	r1, [pc, #348]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e24:	4b52      	ldr	r3, [pc, #328]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e32:	494f      	ldr	r1, [pc, #316]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e46:	4b4a      	ldr	r3, [pc, #296]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e54:	4946      	ldr	r1, [pc, #280]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e68:	4b41      	ldr	r3, [pc, #260]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e76:	493e      	ldr	r1, [pc, #248]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e8a:	4b39      	ldr	r3, [pc, #228]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e90:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e98:	4935      	ldr	r1, [pc, #212]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004eac:	4b30      	ldr	r3, [pc, #192]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eba:	492d      	ldr	r1, [pc, #180]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d011      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ece:	4b28      	ldr	r3, [pc, #160]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004edc:	4924      	ldr	r1, [pc, #144]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ee8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eec:	d101      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004efe:	2301      	movs	r3, #1
 8004f00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f0e:	4b18      	ldr	r3, [pc, #96]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f14:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f1c:	4914      	ldr	r1, [pc, #80]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00b      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f30:	4b0f      	ldr	r3, [pc, #60]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f36:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f40:	490b      	ldr	r1, [pc, #44]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00f      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004f54:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f64:	4902      	ldr	r1, [pc, #8]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f6c:	e002      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004f6e:	bf00      	nop
 8004f70:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00b      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f80:	4b8a      	ldr	r3, [pc, #552]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f90:	4986      	ldr	r1, [pc, #536]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00b      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004fa4:	4b81      	ldr	r3, [pc, #516]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004faa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fb4:	497d      	ldr	r1, [pc, #500]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d006      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80d6 	beq.w	800517c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fd0:	4b76      	ldr	r3, [pc, #472]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a75      	ldr	r2, [pc, #468]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fdc:	f7fd fbc8 	bl	8002770 <HAL_GetTick>
 8004fe0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fe4:	f7fd fbc4 	bl	8002770 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b64      	cmp	r3, #100	@ 0x64
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e195      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ff6:	4b6d      	ldr	r3, [pc, #436]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d021      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005012:	2b00      	cmp	r3, #0
 8005014:	d11d      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005016:	4b65      	ldr	r3, [pc, #404]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800501c:	0c1b      	lsrs	r3, r3, #16
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005024:	4b61      	ldr	r3, [pc, #388]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800502a:	0e1b      	lsrs	r3, r3, #24
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	019a      	lsls	r2, r3, #6
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	041b      	lsls	r3, r3, #16
 800503c:	431a      	orrs	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	061b      	lsls	r3, r3, #24
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	071b      	lsls	r3, r3, #28
 800504a:	4958      	ldr	r1, [pc, #352]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d004      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005062:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005070:	2b00      	cmp	r3, #0
 8005072:	d02e      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005078:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800507c:	d129      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800507e:	4b4b      	ldr	r3, [pc, #300]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005084:	0c1b      	lsrs	r3, r3, #16
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800508c:	4b47      	ldr	r3, [pc, #284]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800508e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005092:	0f1b      	lsrs	r3, r3, #28
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	019a      	lsls	r2, r3, #6
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	041b      	lsls	r3, r3, #16
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	061b      	lsls	r3, r3, #24
 80050ac:	431a      	orrs	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	071b      	lsls	r3, r3, #28
 80050b2:	493e      	ldr	r1, [pc, #248]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050ba:	4b3c      	ldr	r3, [pc, #240]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050c0:	f023 021f 	bic.w	r2, r3, #31
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c8:	3b01      	subs	r3, #1
 80050ca:	4938      	ldr	r1, [pc, #224]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01d      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050de:	4b33      	ldr	r3, [pc, #204]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e4:	0e1b      	lsrs	r3, r3, #24
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050ec:	4b2f      	ldr	r3, [pc, #188]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050f2:	0f1b      	lsrs	r3, r3, #28
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	019a      	lsls	r2, r3, #6
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	041b      	lsls	r3, r3, #16
 8005106:	431a      	orrs	r2, r3
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	061b      	lsls	r3, r3, #24
 800510c:	431a      	orrs	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	071b      	lsls	r3, r3, #28
 8005112:	4926      	ldr	r1, [pc, #152]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d011      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	019a      	lsls	r2, r3, #6
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	041b      	lsls	r3, r3, #16
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	061b      	lsls	r3, r3, #24
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	071b      	lsls	r3, r3, #28
 8005142:	491a      	ldr	r1, [pc, #104]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800514a:	4b18      	ldr	r3, [pc, #96]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a17      	ldr	r2, [pc, #92]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005150:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005156:	f7fd fb0b 	bl	8002770 <HAL_GetTick>
 800515a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800515c:	e008      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800515e:	f7fd fb07 	bl	8002770 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b64      	cmp	r3, #100	@ 0x64
 800516a:	d901      	bls.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e0d8      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005170:	4b0e      	ldr	r3, [pc, #56]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	2b01      	cmp	r3, #1
 8005180:	f040 80ce 	bne.w	8005320 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005184:	4b09      	ldr	r3, [pc, #36]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a08      	ldr	r2, [pc, #32]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800518a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800518e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005190:	f7fd faee 	bl	8002770 <HAL_GetTick>
 8005194:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005196:	e00b      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005198:	f7fd faea 	bl	8002770 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b64      	cmp	r3, #100	@ 0x64
 80051a4:	d904      	bls.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e0bb      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80051aa:	bf00      	nop
 80051ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051b0:	4b5e      	ldr	r3, [pc, #376]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051bc:	d0ec      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d02e      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d12a      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051e6:	4b51      	ldr	r3, [pc, #324]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ec:	0c1b      	lsrs	r3, r3, #16
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051f4:	4b4d      	ldr	r3, [pc, #308]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fa:	0f1b      	lsrs	r3, r3, #28
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	019a      	lsls	r2, r3, #6
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	041b      	lsls	r3, r3, #16
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	061b      	lsls	r3, r3, #24
 8005214:	431a      	orrs	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	071b      	lsls	r3, r3, #28
 800521a:	4944      	ldr	r1, [pc, #272]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005222:	4b42      	ldr	r3, [pc, #264]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005228:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005230:	3b01      	subs	r3, #1
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	493d      	ldr	r1, [pc, #244]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d022      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800524c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005250:	d11d      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005252:	4b36      	ldr	r3, [pc, #216]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005258:	0e1b      	lsrs	r3, r3, #24
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005260:	4b32      	ldr	r3, [pc, #200]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005266:	0f1b      	lsrs	r3, r3, #28
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	019a      	lsls	r2, r3, #6
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	041b      	lsls	r3, r3, #16
 800527a:	431a      	orrs	r2, r3
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	061b      	lsls	r3, r3, #24
 8005280:	431a      	orrs	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	071b      	lsls	r3, r3, #28
 8005286:	4929      	ldr	r1, [pc, #164]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d028      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800529a:	4b24      	ldr	r3, [pc, #144]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a0:	0e1b      	lsrs	r3, r3, #24
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052a8:	4b20      	ldr	r3, [pc, #128]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ae:	0c1b      	lsrs	r3, r3, #16
 80052b0:	f003 0303 	and.w	r3, r3, #3
 80052b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	019a      	lsls	r2, r3, #6
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	041b      	lsls	r3, r3, #16
 80052c0:	431a      	orrs	r2, r3
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	061b      	lsls	r3, r3, #24
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	071b      	lsls	r3, r3, #28
 80052ce:	4917      	ldr	r1, [pc, #92]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052d6:	4b15      	ldr	r3, [pc, #84]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e4:	4911      	ldr	r1, [pc, #68]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052ec:	4b0f      	ldr	r3, [pc, #60]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a0e      	ldr	r2, [pc, #56]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f8:	f7fd fa3a 	bl	8002770 <HAL_GetTick>
 80052fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005300:	f7fd fa36 	bl	8002770 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b64      	cmp	r3, #100	@ 0x64
 800530c:	d901      	bls.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e007      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005312:	4b06      	ldr	r3, [pc, #24]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800531a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800531e:	d1ef      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40023800 	.word	0x40023800

08005330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e09d      	b.n	800547e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005346:	2b00      	cmp	r3, #0
 8005348:	d108      	bne.n	800535c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005352:	d009      	beq.n	8005368 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	61da      	str	r2, [r3, #28]
 800535a:	e005      	b.n	8005368 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fc fd10 	bl	8001da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800539e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053a8:	d902      	bls.n	80053b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053aa:	2300      	movs	r3, #0
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	e002      	b.n	80053b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80053be:	d007      	beq.n	80053d0 <HAL_SPI_Init+0xa0>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053c8:	d002      	beq.n	80053d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053e0:	431a      	orrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005412:	ea42 0103 	orr.w	r1, r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	0c1b      	lsrs	r3, r3, #16
 800542c:	f003 0204 	and.w	r2, r3, #4
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800544c:	ea42 0103 	orr.w	r1, r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800546c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b088      	sub	sp, #32
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	4613      	mov	r3, r2
 8005494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_SPI_Transmit+0x22>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e158      	b.n	800575a <HAL_SPI_Transmit+0x2d4>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054b0:	f7fd f95e 	bl	8002770 <HAL_GetTick>
 80054b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d002      	beq.n	80054cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054c6:	2302      	movs	r3, #2
 80054c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054ca:	e13d      	b.n	8005748 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <HAL_SPI_Transmit+0x52>
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054dc:	e134      	b.n	8005748 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2203      	movs	r2, #3
 80054e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	88fa      	ldrh	r2, [r7, #6]
 80054f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005528:	d10f      	bne.n	800554a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005538:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005548:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005554:	2b40      	cmp	r3, #64	@ 0x40
 8005556:	d007      	beq.n	8005568 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005566:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005570:	d94b      	bls.n	800560a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_SPI_Transmit+0xfa>
 800557a:	8afb      	ldrh	r3, [r7, #22]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d13e      	bne.n	80055fe <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005584:	881a      	ldrh	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005590:	1c9a      	adds	r2, r3, #2
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800559a:	b29b      	uxth	r3, r3
 800559c:	3b01      	subs	r3, #1
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055a4:	e02b      	b.n	80055fe <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d112      	bne.n	80055da <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b8:	881a      	ldrh	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c4:	1c9a      	adds	r2, r3, #2
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055d8:	e011      	b.n	80055fe <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055da:	f7fd f8c9 	bl	8002770 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d803      	bhi.n	80055f2 <HAL_SPI_Transmit+0x16c>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d102      	bne.n	80055f8 <HAL_SPI_Transmit+0x172>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d102      	bne.n	80055fe <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055fc:	e0a4      	b.n	8005748 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1ce      	bne.n	80055a6 <HAL_SPI_Transmit+0x120>
 8005608:	e07c      	b.n	8005704 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <HAL_SPI_Transmit+0x192>
 8005612:	8afb      	ldrh	r3, [r7, #22]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d170      	bne.n	80056fa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b01      	cmp	r3, #1
 8005620:	d912      	bls.n	8005648 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005626:	881a      	ldrh	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005632:	1c9a      	adds	r2, r3, #2
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b02      	subs	r3, #2
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005646:	e058      	b.n	80056fa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	7812      	ldrb	r2, [r2, #0]
 8005654:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800566e:	e044      	b.n	80056fa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b02      	cmp	r3, #2
 800567c:	d12b      	bne.n	80056d6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	d912      	bls.n	80056ae <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568c:	881a      	ldrh	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005698:	1c9a      	adds	r2, r3, #2
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b02      	subs	r3, #2
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056ac:	e025      	b.n	80056fa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	330c      	adds	r3, #12
 80056b8:	7812      	ldrb	r2, [r2, #0]
 80056ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056d4:	e011      	b.n	80056fa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d6:	f7fd f84b 	bl	8002770 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d803      	bhi.n	80056ee <HAL_SPI_Transmit+0x268>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d102      	bne.n	80056f4 <HAL_SPI_Transmit+0x26e>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d102      	bne.n	80056fa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056f8:	e026      	b.n	8005748 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1b5      	bne.n	8005670 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	6839      	ldr	r1, [r7, #0]
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 fb5b 	bl	8005dc4 <SPI_EndRxTxTransaction>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005722:	2300      	movs	r3, #0
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	77fb      	strb	r3, [r7, #31]
 8005744:	e000      	b.n	8005748 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005746:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005758:	7ffb      	ldrb	r3, [r7, #31]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3720      	adds	r7, #32
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b08a      	sub	sp, #40	@ 0x28
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	607a      	str	r2, [r7, #4]
 800576e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005770:	2301      	movs	r3, #1
 8005772:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_SPI_TransmitReceive+0x26>
 8005784:	2302      	movs	r3, #2
 8005786:	e1fb      	b.n	8005b80 <HAL_SPI_TransmitReceive+0x41e>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005790:	f7fc ffee 	bl	8002770 <HAL_GetTick>
 8005794:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800579c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80057a4:	887b      	ldrh	r3, [r7, #2]
 80057a6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80057a8:	887b      	ldrh	r3, [r7, #2]
 80057aa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057ac:	7efb      	ldrb	r3, [r7, #27]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d00e      	beq.n	80057d0 <HAL_SPI_TransmitReceive+0x6e>
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057b8:	d106      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d102      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x66>
 80057c2:	7efb      	ldrb	r3, [r7, #27]
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d003      	beq.n	80057d0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80057c8:	2302      	movs	r3, #2
 80057ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80057ce:	e1cd      	b.n	8005b6c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d005      	beq.n	80057e2 <HAL_SPI_TransmitReceive+0x80>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_SPI_TransmitReceive+0x80>
 80057dc:	887b      	ldrh	r3, [r7, #2]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80057e8:	e1c0      	b.n	8005b6c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d003      	beq.n	80057fe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2205      	movs	r2, #5
 80057fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	887a      	ldrh	r2, [r7, #2]
 800580e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	887a      	ldrh	r2, [r7, #2]
 8005816:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	887a      	ldrh	r2, [r7, #2]
 8005824:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	887a      	ldrh	r2, [r7, #2]
 800582a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005840:	d802      	bhi.n	8005848 <HAL_SPI_TransmitReceive+0xe6>
 8005842:	8a3b      	ldrh	r3, [r7, #16]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d908      	bls.n	800585a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005856:	605a      	str	r2, [r3, #4]
 8005858:	e007      	b.n	800586a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005868:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005874:	2b40      	cmp	r3, #64	@ 0x40
 8005876:	d007      	beq.n	8005888 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005886:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005890:	d97c      	bls.n	800598c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_SPI_TransmitReceive+0x13e>
 800589a:	8a7b      	ldrh	r3, [r7, #18]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d169      	bne.n	8005974 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a4:	881a      	ldrh	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b0:	1c9a      	adds	r2, r3, #2
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c4:	e056      	b.n	8005974 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d11b      	bne.n	800590c <HAL_SPI_TransmitReceive+0x1aa>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d016      	beq.n	800590c <HAL_SPI_TransmitReceive+0x1aa>
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d113      	bne.n	800590c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e8:	881a      	ldrh	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f4:	1c9a      	adds	r2, r3, #2
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b01      	cmp	r3, #1
 8005918:	d11c      	bne.n	8005954 <HAL_SPI_TransmitReceive+0x1f2>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d016      	beq.n	8005954 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005930:	b292      	uxth	r2, r2
 8005932:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005938:	1c9a      	adds	r2, r3, #2
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005944:	b29b      	uxth	r3, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005950:	2301      	movs	r3, #1
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005954:	f7fc ff0c 	bl	8002770 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005960:	429a      	cmp	r2, r3
 8005962:	d807      	bhi.n	8005974 <HAL_SPI_TransmitReceive+0x212>
 8005964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596a:	d003      	beq.n	8005974 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8005972:	e0fb      	b.n	8005b6c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1a3      	bne.n	80058c6 <HAL_SPI_TransmitReceive+0x164>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d19d      	bne.n	80058c6 <HAL_SPI_TransmitReceive+0x164>
 800598a:	e0df      	b.n	8005b4c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <HAL_SPI_TransmitReceive+0x23a>
 8005994:	8a7b      	ldrh	r3, [r7, #18]
 8005996:	2b01      	cmp	r3, #1
 8005998:	f040 80cb 	bne.w	8005b32 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d912      	bls.n	80059cc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059aa:	881a      	ldrh	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b6:	1c9a      	adds	r2, r3, #2
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	3b02      	subs	r3, #2
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059ca:	e0b2      	b.n	8005b32 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	7812      	ldrb	r2, [r2, #0]
 80059d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059f2:	e09e      	b.n	8005b32 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d134      	bne.n	8005a6c <HAL_SPI_TransmitReceive+0x30a>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02f      	beq.n	8005a6c <HAL_SPI_TransmitReceive+0x30a>
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d12c      	bne.n	8005a6c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d912      	bls.n	8005a42 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a20:	881a      	ldrh	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2c:	1c9a      	adds	r2, r3, #2
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	3b02      	subs	r3, #2
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a40:	e012      	b.n	8005a68 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	330c      	adds	r3, #12
 8005a4c:	7812      	ldrb	r2, [r2, #0]
 8005a4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d148      	bne.n	8005b0c <HAL_SPI_TransmitReceive+0x3aa>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d042      	beq.n	8005b0c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d923      	bls.n	8005ada <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9c:	b292      	uxth	r2, r2
 8005a9e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa4:	1c9a      	adds	r2, r3, #2
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b02      	subs	r3, #2
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d81f      	bhi.n	8005b08 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ad6:	605a      	str	r2, [r3, #4]
 8005ad8:	e016      	b.n	8005b08 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f103 020c 	add.w	r2, r3, #12
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae6:	7812      	ldrb	r2, [r2, #0]
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b0c:	f7fc fe30 	bl	8002770 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d803      	bhi.n	8005b24 <HAL_SPI_TransmitReceive+0x3c2>
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b22:	d102      	bne.n	8005b2a <HAL_SPI_TransmitReceive+0x3c8>
 8005b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d103      	bne.n	8005b32 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8005b30:	e01c      	b.n	8005b6c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f47f af5b 	bne.w	80059f4 <HAL_SPI_TransmitReceive+0x292>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f47f af54 	bne.w	80059f4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 f937 	bl	8005dc4 <SPI_EndRxTxTransaction>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d006      	beq.n	8005b6a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	661a      	str	r2, [r3, #96]	@ 0x60
 8005b68:	e000      	b.n	8005b6c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005b6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005b7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3728      	adds	r7, #40	@ 0x28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	4613      	mov	r3, r2
 8005b96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b98:	f7fc fdea 	bl	8002770 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ba8:	f7fc fde2 	bl	8002770 <HAL_GetTick>
 8005bac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bae:	4b39      	ldr	r3, [pc, #228]	@ (8005c94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	015b      	lsls	r3, r3, #5
 8005bb4:	0d1b      	lsrs	r3, r3, #20
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	fb02 f303 	mul.w	r3, r2, r3
 8005bbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bbe:	e054      	b.n	8005c6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	d050      	beq.n	8005c6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bc8:	f7fc fdd2 	bl	8002770 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d902      	bls.n	8005bde <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d13d      	bne.n	8005c5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bf6:	d111      	bne.n	8005c1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c00:	d004      	beq.n	8005c0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c0a:	d107      	bne.n	8005c1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c24:	d10f      	bne.n	8005c46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e017      	b.n	8005c8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4013      	ands	r3, r2
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	bf0c      	ite	eq
 8005c7a:	2301      	moveq	r3, #1
 8005c7c:	2300      	movne	r3, #0
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	461a      	mov	r2, r3
 8005c82:	79fb      	ldrb	r3, [r7, #7]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d19b      	bne.n	8005bc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000004 	.word	0x20000004

08005c98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	@ 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005caa:	f7fc fd61 	bl	8002770 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb2:	1a9b      	subs	r3, r3, r2
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005cba:	f7fc fd59 	bl	8002770 <HAL_GetTick>
 8005cbe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8005dc0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	00da      	lsls	r2, r3, #3
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	0d1b      	lsrs	r3, r3, #20
 8005cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
 8005cde:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ce0:	e060      	b.n	8005da4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ce8:	d107      	bne.n	8005cfa <SPI_WaitFifoStateUntilTimeout+0x62>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d104      	bne.n	8005cfa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d00:	d050      	beq.n	8005da4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d02:	f7fc fd35 	bl	8002770 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d902      	bls.n	8005d18 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d13d      	bne.n	8005d94 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d30:	d111      	bne.n	8005d56 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d3a:	d004      	beq.n	8005d46 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d44:	d107      	bne.n	8005d56 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d5e:	d10f      	bne.n	8005d80 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e010      	b.n	8005db6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	4013      	ands	r3, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d196      	bne.n	8005ce2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3728      	adds	r7, #40	@ 0x28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000004 	.word	0x20000004

08005dc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7ff ff5b 	bl	8005c98 <SPI_WaitFifoStateUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d007      	beq.n	8005df8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dec:	f043 0220 	orr.w	r2, r3, #32
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e046      	b.n	8005e86 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005df8:	4b25      	ldr	r3, [pc, #148]	@ (8005e90 <SPI_EndRxTxTransaction+0xcc>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a25      	ldr	r2, [pc, #148]	@ (8005e94 <SPI_EndRxTxTransaction+0xd0>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	0d5b      	lsrs	r3, r3, #21
 8005e04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e08:	fb02 f303 	mul.w	r3, r2, r3
 8005e0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e16:	d112      	bne.n	8005e3e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2180      	movs	r1, #128	@ 0x80
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f7ff feb0 	bl	8005b88 <SPI_WaitFlagStateUntilTimeout>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d016      	beq.n	8005e5c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e32:	f043 0220 	orr.w	r2, r3, #32
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e023      	b.n	8005e86 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e54:	2b80      	cmp	r3, #128	@ 0x80
 8005e56:	d0f2      	beq.n	8005e3e <SPI_EndRxTxTransaction+0x7a>
 8005e58:	e000      	b.n	8005e5c <SPI_EndRxTxTransaction+0x98>
        break;
 8005e5a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7ff ff15 	bl	8005c98 <SPI_WaitFifoStateUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d007      	beq.n	8005e84 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e78:	f043 0220 	orr.w	r2, r3, #32
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e000      	b.n	8005e86 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000004 	.word	0x20000004
 8005e94:	165e9f81 	.word	0x165e9f81

08005e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e049      	b.n	8005f3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fc f9ee 	bl	80022a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	f000 fac0 	bl	800645c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d001      	beq.n	8005f60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e054      	b.n	800600a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a26      	ldr	r2, [pc, #152]	@ (8006018 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d022      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x80>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f8a:	d01d      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x80>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a22      	ldr	r2, [pc, #136]	@ (800601c <HAL_TIM_Base_Start_IT+0xd4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d018      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x80>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a21      	ldr	r2, [pc, #132]	@ (8006020 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d013      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x80>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8006024 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00e      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x80>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a1e      	ldr	r2, [pc, #120]	@ (8006028 <HAL_TIM_Base_Start_IT+0xe0>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d009      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x80>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800602c <HAL_TIM_Base_Start_IT+0xe4>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d004      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x80>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8006030 <HAL_TIM_Base_Start_IT+0xe8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d115      	bne.n	8005ff4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	4b19      	ldr	r3, [pc, #100]	@ (8006034 <HAL_TIM_Base_Start_IT+0xec>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b06      	cmp	r3, #6
 8005fd8:	d015      	beq.n	8006006 <HAL_TIM_Base_Start_IT+0xbe>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fe0:	d011      	beq.n	8006006 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f042 0201 	orr.w	r2, r2, #1
 8005ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff2:	e008      	b.n	8006006 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0201 	orr.w	r2, r2, #1
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e000      	b.n	8006008 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006006:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40010000 	.word	0x40010000
 800601c:	40000400 	.word	0x40000400
 8006020:	40000800 	.word	0x40000800
 8006024:	40000c00 	.word	0x40000c00
 8006028:	40010400 	.word	0x40010400
 800602c:	40014000 	.word	0x40014000
 8006030:	40001800 	.word	0x40001800
 8006034:	00010007 	.word	0x00010007

08006038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b02      	cmp	r3, #2
 800604c:	d122      	bne.n	8006094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b02      	cmp	r3, #2
 800605a:	d11b      	bne.n	8006094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0202 	mvn.w	r2, #2
 8006064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f9d0 	bl	8006420 <HAL_TIM_IC_CaptureCallback>
 8006080:	e005      	b.n	800608e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f9c2 	bl	800640c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f9d3 	bl	8006434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 0304 	and.w	r3, r3, #4
 800609e:	2b04      	cmp	r3, #4
 80060a0:	d122      	bne.n	80060e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	d11b      	bne.n	80060e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0204 	mvn.w	r2, #4
 80060b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2202      	movs	r2, #2
 80060be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f9a6 	bl	8006420 <HAL_TIM_IC_CaptureCallback>
 80060d4:	e005      	b.n	80060e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f998 	bl	800640c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f9a9 	bl	8006434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b08      	cmp	r3, #8
 80060f4:	d122      	bne.n	800613c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b08      	cmp	r3, #8
 8006102:	d11b      	bne.n	800613c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0208 	mvn.w	r2, #8
 800610c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2204      	movs	r2, #4
 8006112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f97c 	bl	8006420 <HAL_TIM_IC_CaptureCallback>
 8006128:	e005      	b.n	8006136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f96e 	bl	800640c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f97f 	bl	8006434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0310 	and.w	r3, r3, #16
 8006146:	2b10      	cmp	r3, #16
 8006148:	d122      	bne.n	8006190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	2b10      	cmp	r3, #16
 8006156:	d11b      	bne.n	8006190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0210 	mvn.w	r2, #16
 8006160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2208      	movs	r2, #8
 8006166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f952 	bl	8006420 <HAL_TIM_IC_CaptureCallback>
 800617c:	e005      	b.n	800618a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f944 	bl	800640c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f955 	bl	8006434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b01      	cmp	r3, #1
 800619c:	d10e      	bne.n	80061bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d107      	bne.n	80061bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0201 	mvn.w	r2, #1
 80061b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fc f8b0 	bl	800231c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c6:	2b80      	cmp	r3, #128	@ 0x80
 80061c8:	d10e      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d4:	2b80      	cmp	r3, #128	@ 0x80
 80061d6:	d107      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fb0c 	bl	8006800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061f6:	d10e      	bne.n	8006216 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006202:	2b80      	cmp	r3, #128	@ 0x80
 8006204:	d107      	bne.n	8006216 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800620e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 faff 	bl	8006814 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006220:	2b40      	cmp	r3, #64	@ 0x40
 8006222:	d10e      	bne.n	8006242 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800622e:	2b40      	cmp	r3, #64	@ 0x40
 8006230:	d107      	bne.n	8006242 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800623a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f903 	bl	8006448 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f003 0320 	and.w	r3, r3, #32
 800624c:	2b20      	cmp	r3, #32
 800624e:	d10e      	bne.n	800626e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b20      	cmp	r3, #32
 800625c:	d107      	bne.n	800626e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f06f 0220 	mvn.w	r2, #32
 8006266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fabf 	bl	80067ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <HAL_TIM_ConfigClockSource+0x1c>
 8006290:	2302      	movs	r3, #2
 8006292:	e0b4      	b.n	80063fe <HAL_TIM_ConfigClockSource+0x186>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	4b56      	ldr	r3, [pc, #344]	@ (8006408 <HAL_TIM_ConfigClockSource+0x190>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062cc:	d03e      	beq.n	800634c <HAL_TIM_ConfigClockSource+0xd4>
 80062ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062d2:	f200 8087 	bhi.w	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 80062d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062da:	f000 8086 	beq.w	80063ea <HAL_TIM_ConfigClockSource+0x172>
 80062de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e2:	d87f      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 80062e4:	2b70      	cmp	r3, #112	@ 0x70
 80062e6:	d01a      	beq.n	800631e <HAL_TIM_ConfigClockSource+0xa6>
 80062e8:	2b70      	cmp	r3, #112	@ 0x70
 80062ea:	d87b      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 80062ec:	2b60      	cmp	r3, #96	@ 0x60
 80062ee:	d050      	beq.n	8006392 <HAL_TIM_ConfigClockSource+0x11a>
 80062f0:	2b60      	cmp	r3, #96	@ 0x60
 80062f2:	d877      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 80062f4:	2b50      	cmp	r3, #80	@ 0x50
 80062f6:	d03c      	beq.n	8006372 <HAL_TIM_ConfigClockSource+0xfa>
 80062f8:	2b50      	cmp	r3, #80	@ 0x50
 80062fa:	d873      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 80062fc:	2b40      	cmp	r3, #64	@ 0x40
 80062fe:	d058      	beq.n	80063b2 <HAL_TIM_ConfigClockSource+0x13a>
 8006300:	2b40      	cmp	r3, #64	@ 0x40
 8006302:	d86f      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006304:	2b30      	cmp	r3, #48	@ 0x30
 8006306:	d064      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006308:	2b30      	cmp	r3, #48	@ 0x30
 800630a:	d86b      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 800630c:	2b20      	cmp	r3, #32
 800630e:	d060      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006310:	2b20      	cmp	r3, #32
 8006312:	d867      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d05c      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006318:	2b10      	cmp	r3, #16
 800631a:	d05a      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x15a>
 800631c:	e062      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800632e:	f000 f9af 	bl	8006690 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	609a      	str	r2, [r3, #8]
      break;
 800634a:	e04f      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800635c:	f000 f998 	bl	8006690 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800636e:	609a      	str	r2, [r3, #8]
      break;
 8006370:	e03c      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800637e:	461a      	mov	r2, r3
 8006380:	f000 f90c 	bl	800659c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2150      	movs	r1, #80	@ 0x50
 800638a:	4618      	mov	r0, r3
 800638c:	f000 f965 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 8006390:	e02c      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800639e:	461a      	mov	r2, r3
 80063a0:	f000 f92b 	bl	80065fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2160      	movs	r1, #96	@ 0x60
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 f955 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 80063b0:	e01c      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063be:	461a      	mov	r2, r3
 80063c0:	f000 f8ec 	bl	800659c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2140      	movs	r1, #64	@ 0x40
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 f945 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 80063d0:	e00c      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f000 f93c 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 80063e2:	e003      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
      break;
 80063e8:	e000      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	fffeff88 	.word	0xfffeff88

0800640c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a40      	ldr	r2, [pc, #256]	@ (8006570 <TIM_Base_SetConfig+0x114>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d013      	beq.n	800649c <TIM_Base_SetConfig+0x40>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800647a:	d00f      	beq.n	800649c <TIM_Base_SetConfig+0x40>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a3d      	ldr	r2, [pc, #244]	@ (8006574 <TIM_Base_SetConfig+0x118>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00b      	beq.n	800649c <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a3c      	ldr	r2, [pc, #240]	@ (8006578 <TIM_Base_SetConfig+0x11c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d007      	beq.n	800649c <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a3b      	ldr	r2, [pc, #236]	@ (800657c <TIM_Base_SetConfig+0x120>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d003      	beq.n	800649c <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a3a      	ldr	r2, [pc, #232]	@ (8006580 <TIM_Base_SetConfig+0x124>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d108      	bne.n	80064ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a2f      	ldr	r2, [pc, #188]	@ (8006570 <TIM_Base_SetConfig+0x114>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d02b      	beq.n	800650e <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064bc:	d027      	beq.n	800650e <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006574 <TIM_Base_SetConfig+0x118>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d023      	beq.n	800650e <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a2b      	ldr	r2, [pc, #172]	@ (8006578 <TIM_Base_SetConfig+0x11c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d01f      	beq.n	800650e <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a2a      	ldr	r2, [pc, #168]	@ (800657c <TIM_Base_SetConfig+0x120>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d01b      	beq.n	800650e <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a29      	ldr	r2, [pc, #164]	@ (8006580 <TIM_Base_SetConfig+0x124>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d017      	beq.n	800650e <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a28      	ldr	r2, [pc, #160]	@ (8006584 <TIM_Base_SetConfig+0x128>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d013      	beq.n	800650e <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a27      	ldr	r2, [pc, #156]	@ (8006588 <TIM_Base_SetConfig+0x12c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d00f      	beq.n	800650e <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a26      	ldr	r2, [pc, #152]	@ (800658c <TIM_Base_SetConfig+0x130>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00b      	beq.n	800650e <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a25      	ldr	r2, [pc, #148]	@ (8006590 <TIM_Base_SetConfig+0x134>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d007      	beq.n	800650e <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a24      	ldr	r2, [pc, #144]	@ (8006594 <TIM_Base_SetConfig+0x138>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d003      	beq.n	800650e <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a23      	ldr	r2, [pc, #140]	@ (8006598 <TIM_Base_SetConfig+0x13c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d108      	bne.n	8006520 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4313      	orrs	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a0a      	ldr	r2, [pc, #40]	@ (8006570 <TIM_Base_SetConfig+0x114>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_Base_SetConfig+0xf8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a0c      	ldr	r2, [pc, #48]	@ (8006580 <TIM_Base_SetConfig+0x124>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d103      	bne.n	800655c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	691a      	ldr	r2, [r3, #16]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	615a      	str	r2, [r3, #20]
}
 8006562:	bf00      	nop
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	40010000 	.word	0x40010000
 8006574:	40000400 	.word	0x40000400
 8006578:	40000800 	.word	0x40000800
 800657c:	40000c00 	.word	0x40000c00
 8006580:	40010400 	.word	0x40010400
 8006584:	40014000 	.word	0x40014000
 8006588:	40014400 	.word	0x40014400
 800658c:	40014800 	.word	0x40014800
 8006590:	40001800 	.word	0x40001800
 8006594:	40001c00 	.word	0x40001c00
 8006598:	40002000 	.word	0x40002000

0800659c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	f023 0201 	bic.w	r2, r3, #1
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f023 030a 	bic.w	r3, r3, #10
 80065d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b087      	sub	sp, #28
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	f023 0210 	bic.w	r2, r3, #16
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006624:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	031b      	lsls	r3, r3, #12
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	4313      	orrs	r3, r2
 800662e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006636:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	621a      	str	r2, [r3, #32]
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006670:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	f043 0307 	orr.w	r3, r3, #7
 800667c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	609a      	str	r2, [r3, #8]
}
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	021a      	lsls	r2, r3, #8
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	431a      	orrs	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	609a      	str	r2, [r3, #8]
}
 80066c4:	bf00      	nop
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066e4:	2302      	movs	r3, #2
 80066e6:	e06d      	b.n	80067c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a30      	ldr	r2, [pc, #192]	@ (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d004      	beq.n	800671c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a2f      	ldr	r2, [pc, #188]	@ (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d108      	bne.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006722:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006734:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a20      	ldr	r2, [pc, #128]	@ (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d022      	beq.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800675a:	d01d      	beq.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a1d      	ldr	r2, [pc, #116]	@ (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d018      	beq.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1c      	ldr	r2, [pc, #112]	@ (80067dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d013      	beq.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1a      	ldr	r2, [pc, #104]	@ (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00e      	beq.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a15      	ldr	r2, [pc, #84]	@ (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d009      	beq.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a16      	ldr	r2, [pc, #88]	@ (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d004      	beq.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a15      	ldr	r2, [pc, #84]	@ (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d10c      	bne.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800679e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	40010000 	.word	0x40010000
 80067d4:	40010400 	.word	0x40010400
 80067d8:	40000400 	.word	0x40000400
 80067dc:	40000800 	.word	0x40000800
 80067e0:	40000c00 	.word	0x40000c00
 80067e4:	40014000 	.word	0x40014000
 80067e8:	40001800 	.word	0x40001800

080067ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e040      	b.n	80068bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d106      	bne.n	8006850 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fb fdc8 	bl	80023e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2224      	movs	r2, #36	@ 0x24
 8006854:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0201 	bic.w	r2, r2, #1
 8006864:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fbd6 	bl	8007018 <UART_SetConfig>
 800686c:	4603      	mov	r3, r0
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e022      	b.n	80068bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fe2e 	bl	80074e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 feb5 	bl	8007624 <UART_CheckIdleState>
 80068ba:	4603      	mov	r3, r0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b08b      	sub	sp, #44	@ 0x2c
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	4613      	mov	r3, r2
 80068d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	d147      	bne.n	800696a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <HAL_UART_Transmit_IT+0x22>
 80068e0:	88fb      	ldrh	r3, [r7, #6]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e040      	b.n	800696c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	88fa      	ldrh	r2, [r7, #6]
 80068f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	88fa      	ldrh	r2, [r7, #6]
 80068fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2221      	movs	r2, #33	@ 0x21
 8006912:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800691c:	d107      	bne.n	800692e <HAL_UART_Transmit_IT+0x6a>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d103      	bne.n	800692e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4a13      	ldr	r2, [pc, #76]	@ (8006978 <HAL_UART_Transmit_IT+0xb4>)
 800692a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800692c:	e002      	b.n	8006934 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4a12      	ldr	r2, [pc, #72]	@ (800697c <HAL_UART_Transmit_IT+0xb8>)
 8006932:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	613b      	str	r3, [r7, #16]
   return(result);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006952:	623b      	str	r3, [r7, #32]
 8006954:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	69f9      	ldr	r1, [r7, #28]
 8006958:	6a3a      	ldr	r2, [r7, #32]
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e6      	bne.n	8006934 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	e000      	b.n	800696c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800696a:	2302      	movs	r3, #2
  }
}
 800696c:	4618      	mov	r0, r3
 800696e:	372c      	adds	r7, #44	@ 0x2c
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	08007b83 	.word	0x08007b83
 800697c:	08007acd 	.word	0x08007acd

08006980 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08a      	sub	sp, #40	@ 0x28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	4613      	mov	r3, r2
 800698c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006994:	2b20      	cmp	r3, #32
 8006996:	d132      	bne.n	80069fe <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <HAL_UART_Receive_IT+0x24>
 800699e:	88fb      	ldrh	r3, [r7, #6]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e02b      	b.n	8006a00 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d018      	beq.n	80069ee <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	613b      	str	r3, [r7, #16]
   return(result);
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069da:	623b      	str	r3, [r7, #32]
 80069dc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	69f9      	ldr	r1, [r7, #28]
 80069e0:	6a3a      	ldr	r2, [r7, #32]
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e6      	bne.n	80069bc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	461a      	mov	r2, r3
 80069f2:	68b9      	ldr	r1, [r7, #8]
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 ff29 	bl	800784c <UART_Start_Receive_IT>
 80069fa:	4603      	mov	r3, r0
 80069fc:	e000      	b.n	8006a00 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80069fe:	2302      	movs	r3, #2
  }
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3728      	adds	r7, #40	@ 0x28
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b0ba      	sub	sp, #232	@ 0xe8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006a32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006a36:	4013      	ands	r3, r2
 8006a38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d115      	bne.n	8006a70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a48:	f003 0320 	and.w	r3, r3, #32
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00f      	beq.n	8006a70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d009      	beq.n	8006a70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 82ac 	beq.w	8006fbe <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
      }
      return;
 8006a6e:	e2a6      	b.n	8006fbe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8117 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006a86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006a8a:	4b85      	ldr	r3, [pc, #532]	@ (8006ca0 <HAL_UART_IRQHandler+0x298>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 810a 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d011      	beq.n	8006ac4 <HAL_UART_IRQHandler+0xbc>
 8006aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aba:	f043 0201 	orr.w	r2, r3, #1
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d011      	beq.n	8006af4 <HAL_UART_IRQHandler+0xec>
 8006ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00b      	beq.n	8006af4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aea:	f043 0204 	orr.w	r2, r3, #4
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d011      	beq.n	8006b24 <HAL_UART_IRQHandler+0x11c>
 8006b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00b      	beq.n	8006b24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2204      	movs	r2, #4
 8006b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b1a:	f043 0202 	orr.w	r2, r3, #2
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d017      	beq.n	8006b60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b34:	f003 0320 	and.w	r3, r3, #32
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d105      	bne.n	8006b48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00b      	beq.n	8006b60 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2208      	movs	r2, #8
 8006b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b56:	f043 0208 	orr.w	r2, r3, #8
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d012      	beq.n	8006b92 <HAL_UART_IRQHandler+0x18a>
 8006b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00c      	beq.n	8006b92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b88:	f043 0220 	orr.w	r2, r3, #32
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8212 	beq.w	8006fc2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ba2:	f003 0320 	and.w	r3, r3, #32
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00d      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d007      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bda:	2b40      	cmp	r3, #64	@ 0x40
 8006bdc:	d005      	beq.n	8006bea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006be2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d04f      	beq.n	8006c8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fef4 	bl	80079d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bfa:	2b40      	cmp	r3, #64	@ 0x40
 8006bfc:	d141      	bne.n	8006c82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3308      	adds	r3, #8
 8006c04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3308      	adds	r3, #8
 8006c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1d9      	bne.n	8006bfe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d013      	beq.n	8006c7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c56:	4a13      	ldr	r2, [pc, #76]	@ (8006ca4 <HAL_UART_IRQHandler+0x29c>)
 8006c58:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fc fde8 	bl	8003834 <HAL_DMA_Abort_IT>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d017      	beq.n	8006c9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006c74:	4610      	mov	r0, r2
 8006c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c78:	e00f      	b.n	8006c9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f9ac 	bl	8006fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c80:	e00b      	b.n	8006c9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f9a8 	bl	8006fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c88:	e007      	b.n	8006c9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f9a4 	bl	8006fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006c98:	e193      	b.n	8006fc2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9a:	bf00      	nop
    return;
 8006c9c:	e191      	b.n	8006fc2 <HAL_UART_IRQHandler+0x5ba>
 8006c9e:	bf00      	nop
 8006ca0:	04000120 	.word	0x04000120
 8006ca4:	08007aa1 	.word	0x08007aa1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	f040 814c 	bne.w	8006f4a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cb6:	f003 0310 	and.w	r3, r3, #16
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 8145 	beq.w	8006f4a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc4:	f003 0310 	and.w	r3, r3, #16
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 813e 	beq.w	8006f4a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2210      	movs	r2, #16
 8006cd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce0:	2b40      	cmp	r3, #64	@ 0x40
 8006ce2:	f040 80b6 	bne.w	8006e52 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cf2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 8165 	beq.w	8006fc6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d06:	429a      	cmp	r2, r3
 8006d08:	f080 815d 	bcs.w	8006fc6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d20:	f000 8086 	beq.w	8006e30 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1da      	bne.n	8006d24 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3308      	adds	r3, #8
 8006d74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d80:	f023 0301 	bic.w	r3, r3, #1
 8006d84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006da4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e1      	bne.n	8006d6e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3308      	adds	r3, #8
 8006db0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006dba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3308      	adds	r3, #8
 8006dca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006dce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006dd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006dd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ddc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e3      	bne.n	8006daa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006df8:	e853 3f00 	ldrex	r3, [r3]
 8006dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e00:	f023 0310 	bic.w	r3, r3, #16
 8006e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e4      	bne.n	8006df0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fc fc92 	bl	8003754 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f8ce 	bl	8006fec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e50:	e0b9      	b.n	8006fc6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 80ab 	beq.w	8006fca <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006e74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 80a6 	beq.w	8006fca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ea2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ea6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ea8:	e841 2300 	strex	r3, r2, [r1]
 8006eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1e4      	bne.n	8006e7e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	f023 0301 	bic.w	r3, r3, #1
 8006eca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3308      	adds	r3, #8
 8006ed4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ed8:	633a      	str	r2, [r7, #48]	@ 0x30
 8006eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e3      	bne.n	8006eb4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	e853 3f00 	ldrex	r3, [r3]
 8006f0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f023 0310 	bic.w	r3, r3, #16
 8006f14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f22:	61fb      	str	r3, [r7, #28]
 8006f24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	69b9      	ldr	r1, [r7, #24]
 8006f28:	69fa      	ldr	r2, [r7, #28]
 8006f2a:	e841 2300 	strex	r3, r2, [r1]
 8006f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e4      	bne.n	8006f00 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2202      	movs	r2, #2
 8006f3a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f852 	bl	8006fec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f48:	e03f      	b.n	8006fca <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00e      	beq.n	8006f74 <HAL_UART_IRQHandler+0x56c>
 8006f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d008      	beq.n	8006f74 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006f6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f849 	bl	8007004 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f72:	e02d      	b.n	8006fd0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00e      	beq.n	8006f9e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d008      	beq.n	8006f9e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d01c      	beq.n	8006fce <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	4798      	blx	r3
    }
    return;
 8006f9c:	e017      	b.n	8006fce <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d012      	beq.n	8006fd0 <HAL_UART_IRQHandler+0x5c8>
 8006faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00c      	beq.n	8006fd0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fe43 	bl	8007c42 <UART_EndTransmit_IT>
    return;
 8006fbc:	e008      	b.n	8006fd0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006fbe:	bf00      	nop
 8006fc0:	e006      	b.n	8006fd0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006fc2:	bf00      	nop
 8006fc4:	e004      	b.n	8006fd0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006fc6:	bf00      	nop
 8006fc8:	e002      	b.n	8006fd0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006fca:	bf00      	nop
 8006fcc:	e000      	b.n	8006fd0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006fce:	bf00      	nop
  }

}
 8006fd0:	37e8      	adds	r7, #232	@ 0xe8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop

08006fd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007020:	2300      	movs	r3, #0
 8007022:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	431a      	orrs	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	4ba6      	ldr	r3, [pc, #664]	@ (80072dc <UART_SetConfig+0x2c4>)
 8007044:	4013      	ands	r3, r2
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	6812      	ldr	r2, [r2, #0]
 800704a:	6979      	ldr	r1, [r7, #20]
 800704c:	430b      	orrs	r3, r1
 800704e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	4313      	orrs	r3, r2
 8007074:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	430a      	orrs	r2, r1
 8007088:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a94      	ldr	r2, [pc, #592]	@ (80072e0 <UART_SetConfig+0x2c8>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d120      	bne.n	80070d6 <UART_SetConfig+0xbe>
 8007094:	4b93      	ldr	r3, [pc, #588]	@ (80072e4 <UART_SetConfig+0x2cc>)
 8007096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d816      	bhi.n	80070d0 <UART_SetConfig+0xb8>
 80070a2:	a201      	add	r2, pc, #4	@ (adr r2, 80070a8 <UART_SetConfig+0x90>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	080070b9 	.word	0x080070b9
 80070ac:	080070c5 	.word	0x080070c5
 80070b0:	080070bf 	.word	0x080070bf
 80070b4:	080070cb 	.word	0x080070cb
 80070b8:	2301      	movs	r3, #1
 80070ba:	77fb      	strb	r3, [r7, #31]
 80070bc:	e150      	b.n	8007360 <UART_SetConfig+0x348>
 80070be:	2302      	movs	r3, #2
 80070c0:	77fb      	strb	r3, [r7, #31]
 80070c2:	e14d      	b.n	8007360 <UART_SetConfig+0x348>
 80070c4:	2304      	movs	r3, #4
 80070c6:	77fb      	strb	r3, [r7, #31]
 80070c8:	e14a      	b.n	8007360 <UART_SetConfig+0x348>
 80070ca:	2308      	movs	r3, #8
 80070cc:	77fb      	strb	r3, [r7, #31]
 80070ce:	e147      	b.n	8007360 <UART_SetConfig+0x348>
 80070d0:	2310      	movs	r3, #16
 80070d2:	77fb      	strb	r3, [r7, #31]
 80070d4:	e144      	b.n	8007360 <UART_SetConfig+0x348>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a83      	ldr	r2, [pc, #524]	@ (80072e8 <UART_SetConfig+0x2d0>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d132      	bne.n	8007146 <UART_SetConfig+0x12e>
 80070e0:	4b80      	ldr	r3, [pc, #512]	@ (80072e4 <UART_SetConfig+0x2cc>)
 80070e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070e6:	f003 030c 	and.w	r3, r3, #12
 80070ea:	2b0c      	cmp	r3, #12
 80070ec:	d828      	bhi.n	8007140 <UART_SetConfig+0x128>
 80070ee:	a201      	add	r2, pc, #4	@ (adr r2, 80070f4 <UART_SetConfig+0xdc>)
 80070f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f4:	08007129 	.word	0x08007129
 80070f8:	08007141 	.word	0x08007141
 80070fc:	08007141 	.word	0x08007141
 8007100:	08007141 	.word	0x08007141
 8007104:	08007135 	.word	0x08007135
 8007108:	08007141 	.word	0x08007141
 800710c:	08007141 	.word	0x08007141
 8007110:	08007141 	.word	0x08007141
 8007114:	0800712f 	.word	0x0800712f
 8007118:	08007141 	.word	0x08007141
 800711c:	08007141 	.word	0x08007141
 8007120:	08007141 	.word	0x08007141
 8007124:	0800713b 	.word	0x0800713b
 8007128:	2300      	movs	r3, #0
 800712a:	77fb      	strb	r3, [r7, #31]
 800712c:	e118      	b.n	8007360 <UART_SetConfig+0x348>
 800712e:	2302      	movs	r3, #2
 8007130:	77fb      	strb	r3, [r7, #31]
 8007132:	e115      	b.n	8007360 <UART_SetConfig+0x348>
 8007134:	2304      	movs	r3, #4
 8007136:	77fb      	strb	r3, [r7, #31]
 8007138:	e112      	b.n	8007360 <UART_SetConfig+0x348>
 800713a:	2308      	movs	r3, #8
 800713c:	77fb      	strb	r3, [r7, #31]
 800713e:	e10f      	b.n	8007360 <UART_SetConfig+0x348>
 8007140:	2310      	movs	r3, #16
 8007142:	77fb      	strb	r3, [r7, #31]
 8007144:	e10c      	b.n	8007360 <UART_SetConfig+0x348>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a68      	ldr	r2, [pc, #416]	@ (80072ec <UART_SetConfig+0x2d4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d120      	bne.n	8007192 <UART_SetConfig+0x17a>
 8007150:	4b64      	ldr	r3, [pc, #400]	@ (80072e4 <UART_SetConfig+0x2cc>)
 8007152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007156:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800715a:	2b30      	cmp	r3, #48	@ 0x30
 800715c:	d013      	beq.n	8007186 <UART_SetConfig+0x16e>
 800715e:	2b30      	cmp	r3, #48	@ 0x30
 8007160:	d814      	bhi.n	800718c <UART_SetConfig+0x174>
 8007162:	2b20      	cmp	r3, #32
 8007164:	d009      	beq.n	800717a <UART_SetConfig+0x162>
 8007166:	2b20      	cmp	r3, #32
 8007168:	d810      	bhi.n	800718c <UART_SetConfig+0x174>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <UART_SetConfig+0x15c>
 800716e:	2b10      	cmp	r3, #16
 8007170:	d006      	beq.n	8007180 <UART_SetConfig+0x168>
 8007172:	e00b      	b.n	800718c <UART_SetConfig+0x174>
 8007174:	2300      	movs	r3, #0
 8007176:	77fb      	strb	r3, [r7, #31]
 8007178:	e0f2      	b.n	8007360 <UART_SetConfig+0x348>
 800717a:	2302      	movs	r3, #2
 800717c:	77fb      	strb	r3, [r7, #31]
 800717e:	e0ef      	b.n	8007360 <UART_SetConfig+0x348>
 8007180:	2304      	movs	r3, #4
 8007182:	77fb      	strb	r3, [r7, #31]
 8007184:	e0ec      	b.n	8007360 <UART_SetConfig+0x348>
 8007186:	2308      	movs	r3, #8
 8007188:	77fb      	strb	r3, [r7, #31]
 800718a:	e0e9      	b.n	8007360 <UART_SetConfig+0x348>
 800718c:	2310      	movs	r3, #16
 800718e:	77fb      	strb	r3, [r7, #31]
 8007190:	e0e6      	b.n	8007360 <UART_SetConfig+0x348>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a56      	ldr	r2, [pc, #344]	@ (80072f0 <UART_SetConfig+0x2d8>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d120      	bne.n	80071de <UART_SetConfig+0x1c6>
 800719c:	4b51      	ldr	r3, [pc, #324]	@ (80072e4 <UART_SetConfig+0x2cc>)
 800719e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80071a8:	d013      	beq.n	80071d2 <UART_SetConfig+0x1ba>
 80071aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80071ac:	d814      	bhi.n	80071d8 <UART_SetConfig+0x1c0>
 80071ae:	2b80      	cmp	r3, #128	@ 0x80
 80071b0:	d009      	beq.n	80071c6 <UART_SetConfig+0x1ae>
 80071b2:	2b80      	cmp	r3, #128	@ 0x80
 80071b4:	d810      	bhi.n	80071d8 <UART_SetConfig+0x1c0>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <UART_SetConfig+0x1a8>
 80071ba:	2b40      	cmp	r3, #64	@ 0x40
 80071bc:	d006      	beq.n	80071cc <UART_SetConfig+0x1b4>
 80071be:	e00b      	b.n	80071d8 <UART_SetConfig+0x1c0>
 80071c0:	2300      	movs	r3, #0
 80071c2:	77fb      	strb	r3, [r7, #31]
 80071c4:	e0cc      	b.n	8007360 <UART_SetConfig+0x348>
 80071c6:	2302      	movs	r3, #2
 80071c8:	77fb      	strb	r3, [r7, #31]
 80071ca:	e0c9      	b.n	8007360 <UART_SetConfig+0x348>
 80071cc:	2304      	movs	r3, #4
 80071ce:	77fb      	strb	r3, [r7, #31]
 80071d0:	e0c6      	b.n	8007360 <UART_SetConfig+0x348>
 80071d2:	2308      	movs	r3, #8
 80071d4:	77fb      	strb	r3, [r7, #31]
 80071d6:	e0c3      	b.n	8007360 <UART_SetConfig+0x348>
 80071d8:	2310      	movs	r3, #16
 80071da:	77fb      	strb	r3, [r7, #31]
 80071dc:	e0c0      	b.n	8007360 <UART_SetConfig+0x348>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a44      	ldr	r2, [pc, #272]	@ (80072f4 <UART_SetConfig+0x2dc>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d125      	bne.n	8007234 <UART_SetConfig+0x21c>
 80071e8:	4b3e      	ldr	r3, [pc, #248]	@ (80072e4 <UART_SetConfig+0x2cc>)
 80071ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071f6:	d017      	beq.n	8007228 <UART_SetConfig+0x210>
 80071f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071fc:	d817      	bhi.n	800722e <UART_SetConfig+0x216>
 80071fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007202:	d00b      	beq.n	800721c <UART_SetConfig+0x204>
 8007204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007208:	d811      	bhi.n	800722e <UART_SetConfig+0x216>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <UART_SetConfig+0x1fe>
 800720e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007212:	d006      	beq.n	8007222 <UART_SetConfig+0x20a>
 8007214:	e00b      	b.n	800722e <UART_SetConfig+0x216>
 8007216:	2300      	movs	r3, #0
 8007218:	77fb      	strb	r3, [r7, #31]
 800721a:	e0a1      	b.n	8007360 <UART_SetConfig+0x348>
 800721c:	2302      	movs	r3, #2
 800721e:	77fb      	strb	r3, [r7, #31]
 8007220:	e09e      	b.n	8007360 <UART_SetConfig+0x348>
 8007222:	2304      	movs	r3, #4
 8007224:	77fb      	strb	r3, [r7, #31]
 8007226:	e09b      	b.n	8007360 <UART_SetConfig+0x348>
 8007228:	2308      	movs	r3, #8
 800722a:	77fb      	strb	r3, [r7, #31]
 800722c:	e098      	b.n	8007360 <UART_SetConfig+0x348>
 800722e:	2310      	movs	r3, #16
 8007230:	77fb      	strb	r3, [r7, #31]
 8007232:	e095      	b.n	8007360 <UART_SetConfig+0x348>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a2f      	ldr	r2, [pc, #188]	@ (80072f8 <UART_SetConfig+0x2e0>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d125      	bne.n	800728a <UART_SetConfig+0x272>
 800723e:	4b29      	ldr	r3, [pc, #164]	@ (80072e4 <UART_SetConfig+0x2cc>)
 8007240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007244:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007248:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800724c:	d017      	beq.n	800727e <UART_SetConfig+0x266>
 800724e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007252:	d817      	bhi.n	8007284 <UART_SetConfig+0x26c>
 8007254:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007258:	d00b      	beq.n	8007272 <UART_SetConfig+0x25a>
 800725a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800725e:	d811      	bhi.n	8007284 <UART_SetConfig+0x26c>
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <UART_SetConfig+0x254>
 8007264:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007268:	d006      	beq.n	8007278 <UART_SetConfig+0x260>
 800726a:	e00b      	b.n	8007284 <UART_SetConfig+0x26c>
 800726c:	2301      	movs	r3, #1
 800726e:	77fb      	strb	r3, [r7, #31]
 8007270:	e076      	b.n	8007360 <UART_SetConfig+0x348>
 8007272:	2302      	movs	r3, #2
 8007274:	77fb      	strb	r3, [r7, #31]
 8007276:	e073      	b.n	8007360 <UART_SetConfig+0x348>
 8007278:	2304      	movs	r3, #4
 800727a:	77fb      	strb	r3, [r7, #31]
 800727c:	e070      	b.n	8007360 <UART_SetConfig+0x348>
 800727e:	2308      	movs	r3, #8
 8007280:	77fb      	strb	r3, [r7, #31]
 8007282:	e06d      	b.n	8007360 <UART_SetConfig+0x348>
 8007284:	2310      	movs	r3, #16
 8007286:	77fb      	strb	r3, [r7, #31]
 8007288:	e06a      	b.n	8007360 <UART_SetConfig+0x348>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1b      	ldr	r2, [pc, #108]	@ (80072fc <UART_SetConfig+0x2e4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d138      	bne.n	8007306 <UART_SetConfig+0x2ee>
 8007294:	4b13      	ldr	r3, [pc, #76]	@ (80072e4 <UART_SetConfig+0x2cc>)
 8007296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800729a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800729e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072a2:	d017      	beq.n	80072d4 <UART_SetConfig+0x2bc>
 80072a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072a8:	d82a      	bhi.n	8007300 <UART_SetConfig+0x2e8>
 80072aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ae:	d00b      	beq.n	80072c8 <UART_SetConfig+0x2b0>
 80072b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072b4:	d824      	bhi.n	8007300 <UART_SetConfig+0x2e8>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <UART_SetConfig+0x2aa>
 80072ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072be:	d006      	beq.n	80072ce <UART_SetConfig+0x2b6>
 80072c0:	e01e      	b.n	8007300 <UART_SetConfig+0x2e8>
 80072c2:	2300      	movs	r3, #0
 80072c4:	77fb      	strb	r3, [r7, #31]
 80072c6:	e04b      	b.n	8007360 <UART_SetConfig+0x348>
 80072c8:	2302      	movs	r3, #2
 80072ca:	77fb      	strb	r3, [r7, #31]
 80072cc:	e048      	b.n	8007360 <UART_SetConfig+0x348>
 80072ce:	2304      	movs	r3, #4
 80072d0:	77fb      	strb	r3, [r7, #31]
 80072d2:	e045      	b.n	8007360 <UART_SetConfig+0x348>
 80072d4:	2308      	movs	r3, #8
 80072d6:	77fb      	strb	r3, [r7, #31]
 80072d8:	e042      	b.n	8007360 <UART_SetConfig+0x348>
 80072da:	bf00      	nop
 80072dc:	efff69f3 	.word	0xefff69f3
 80072e0:	40011000 	.word	0x40011000
 80072e4:	40023800 	.word	0x40023800
 80072e8:	40004400 	.word	0x40004400
 80072ec:	40004800 	.word	0x40004800
 80072f0:	40004c00 	.word	0x40004c00
 80072f4:	40005000 	.word	0x40005000
 80072f8:	40011400 	.word	0x40011400
 80072fc:	40007800 	.word	0x40007800
 8007300:	2310      	movs	r3, #16
 8007302:	77fb      	strb	r3, [r7, #31]
 8007304:	e02c      	b.n	8007360 <UART_SetConfig+0x348>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a72      	ldr	r2, [pc, #456]	@ (80074d4 <UART_SetConfig+0x4bc>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d125      	bne.n	800735c <UART_SetConfig+0x344>
 8007310:	4b71      	ldr	r3, [pc, #452]	@ (80074d8 <UART_SetConfig+0x4c0>)
 8007312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007316:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800731a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800731e:	d017      	beq.n	8007350 <UART_SetConfig+0x338>
 8007320:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007324:	d817      	bhi.n	8007356 <UART_SetConfig+0x33e>
 8007326:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800732a:	d00b      	beq.n	8007344 <UART_SetConfig+0x32c>
 800732c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007330:	d811      	bhi.n	8007356 <UART_SetConfig+0x33e>
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <UART_SetConfig+0x326>
 8007336:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800733a:	d006      	beq.n	800734a <UART_SetConfig+0x332>
 800733c:	e00b      	b.n	8007356 <UART_SetConfig+0x33e>
 800733e:	2300      	movs	r3, #0
 8007340:	77fb      	strb	r3, [r7, #31]
 8007342:	e00d      	b.n	8007360 <UART_SetConfig+0x348>
 8007344:	2302      	movs	r3, #2
 8007346:	77fb      	strb	r3, [r7, #31]
 8007348:	e00a      	b.n	8007360 <UART_SetConfig+0x348>
 800734a:	2304      	movs	r3, #4
 800734c:	77fb      	strb	r3, [r7, #31]
 800734e:	e007      	b.n	8007360 <UART_SetConfig+0x348>
 8007350:	2308      	movs	r3, #8
 8007352:	77fb      	strb	r3, [r7, #31]
 8007354:	e004      	b.n	8007360 <UART_SetConfig+0x348>
 8007356:	2310      	movs	r3, #16
 8007358:	77fb      	strb	r3, [r7, #31]
 800735a:	e001      	b.n	8007360 <UART_SetConfig+0x348>
 800735c:	2310      	movs	r3, #16
 800735e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007368:	d15b      	bne.n	8007422 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800736a:	7ffb      	ldrb	r3, [r7, #31]
 800736c:	2b08      	cmp	r3, #8
 800736e:	d828      	bhi.n	80073c2 <UART_SetConfig+0x3aa>
 8007370:	a201      	add	r2, pc, #4	@ (adr r2, 8007378 <UART_SetConfig+0x360>)
 8007372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007376:	bf00      	nop
 8007378:	0800739d 	.word	0x0800739d
 800737c:	080073a5 	.word	0x080073a5
 8007380:	080073ad 	.word	0x080073ad
 8007384:	080073c3 	.word	0x080073c3
 8007388:	080073b3 	.word	0x080073b3
 800738c:	080073c3 	.word	0x080073c3
 8007390:	080073c3 	.word	0x080073c3
 8007394:	080073c3 	.word	0x080073c3
 8007398:	080073bb 	.word	0x080073bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800739c:	f7fd fb78 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 80073a0:	61b8      	str	r0, [r7, #24]
        break;
 80073a2:	e013      	b.n	80073cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073a4:	f7fd fb88 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 80073a8:	61b8      	str	r0, [r7, #24]
        break;
 80073aa:	e00f      	b.n	80073cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073ac:	4b4b      	ldr	r3, [pc, #300]	@ (80074dc <UART_SetConfig+0x4c4>)
 80073ae:	61bb      	str	r3, [r7, #24]
        break;
 80073b0:	e00c      	b.n	80073cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073b2:	f7fd fa5d 	bl	8004870 <HAL_RCC_GetSysClockFreq>
 80073b6:	61b8      	str	r0, [r7, #24]
        break;
 80073b8:	e008      	b.n	80073cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073be:	61bb      	str	r3, [r7, #24]
        break;
 80073c0:	e004      	b.n	80073cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	77bb      	strb	r3, [r7, #30]
        break;
 80073ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d074      	beq.n	80074bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	005a      	lsls	r2, r3, #1
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	085b      	lsrs	r3, r3, #1
 80073dc:	441a      	add	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	2b0f      	cmp	r3, #15
 80073ec:	d916      	bls.n	800741c <UART_SetConfig+0x404>
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073f4:	d212      	bcs.n	800741c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	f023 030f 	bic.w	r3, r3, #15
 80073fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	085b      	lsrs	r3, r3, #1
 8007404:	b29b      	uxth	r3, r3
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	b29a      	uxth	r2, r3
 800740c:	89fb      	ldrh	r3, [r7, #14]
 800740e:	4313      	orrs	r3, r2
 8007410:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	89fa      	ldrh	r2, [r7, #14]
 8007418:	60da      	str	r2, [r3, #12]
 800741a:	e04f      	b.n	80074bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	77bb      	strb	r3, [r7, #30]
 8007420:	e04c      	b.n	80074bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007422:	7ffb      	ldrb	r3, [r7, #31]
 8007424:	2b08      	cmp	r3, #8
 8007426:	d828      	bhi.n	800747a <UART_SetConfig+0x462>
 8007428:	a201      	add	r2, pc, #4	@ (adr r2, 8007430 <UART_SetConfig+0x418>)
 800742a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742e:	bf00      	nop
 8007430:	08007455 	.word	0x08007455
 8007434:	0800745d 	.word	0x0800745d
 8007438:	08007465 	.word	0x08007465
 800743c:	0800747b 	.word	0x0800747b
 8007440:	0800746b 	.word	0x0800746b
 8007444:	0800747b 	.word	0x0800747b
 8007448:	0800747b 	.word	0x0800747b
 800744c:	0800747b 	.word	0x0800747b
 8007450:	08007473 	.word	0x08007473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007454:	f7fd fb1c 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8007458:	61b8      	str	r0, [r7, #24]
        break;
 800745a:	e013      	b.n	8007484 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800745c:	f7fd fb2c 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8007460:	61b8      	str	r0, [r7, #24]
        break;
 8007462:	e00f      	b.n	8007484 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007464:	4b1d      	ldr	r3, [pc, #116]	@ (80074dc <UART_SetConfig+0x4c4>)
 8007466:	61bb      	str	r3, [r7, #24]
        break;
 8007468:	e00c      	b.n	8007484 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800746a:	f7fd fa01 	bl	8004870 <HAL_RCC_GetSysClockFreq>
 800746e:	61b8      	str	r0, [r7, #24]
        break;
 8007470:	e008      	b.n	8007484 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007476:	61bb      	str	r3, [r7, #24]
        break;
 8007478:	e004      	b.n	8007484 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	77bb      	strb	r3, [r7, #30]
        break;
 8007482:	bf00      	nop
    }

    if (pclk != 0U)
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d018      	beq.n	80074bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	085a      	lsrs	r2, r3, #1
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	441a      	add	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	fbb2 f3f3 	udiv	r3, r2, r3
 800749c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2b0f      	cmp	r3, #15
 80074a2:	d909      	bls.n	80074b8 <UART_SetConfig+0x4a0>
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074aa:	d205      	bcs.n	80074b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	60da      	str	r2, [r3, #12]
 80074b6:	e001      	b.n	80074bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80074c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3720      	adds	r7, #32
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	40007c00 	.word	0x40007c00
 80074d8:	40023800 	.word	0x40023800
 80074dc:	00f42400 	.word	0x00f42400

080074e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00a      	beq.n	800750a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00a      	beq.n	800754e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007552:	f003 0308 	and.w	r3, r3, #8
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007574:	f003 0310 	and.w	r3, r3, #16
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00a      	beq.n	8007592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01a      	beq.n	80075f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075de:	d10a      	bne.n	80075f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	605a      	str	r2, [r3, #4]
  }
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af02      	add	r7, sp, #8
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007634:	f7fb f89c 	bl	8002770 <HAL_GetTick>
 8007638:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0308 	and.w	r3, r3, #8
 8007644:	2b08      	cmp	r3, #8
 8007646:	d10e      	bne.n	8007666 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007648:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f831 	bl	80076be <UART_WaitOnFlagUntilTimeout>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e027      	b.n	80076b6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0304 	and.w	r3, r3, #4
 8007670:	2b04      	cmp	r3, #4
 8007672:	d10e      	bne.n	8007692 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007674:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f81b 	bl	80076be <UART_WaitOnFlagUntilTimeout>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e011      	b.n	80076b6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2220      	movs	r2, #32
 8007696:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b09c      	sub	sp, #112	@ 0x70
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	60f8      	str	r0, [r7, #12]
 80076c6:	60b9      	str	r1, [r7, #8]
 80076c8:	603b      	str	r3, [r7, #0]
 80076ca:	4613      	mov	r3, r2
 80076cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ce:	e0a7      	b.n	8007820 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d6:	f000 80a3 	beq.w	8007820 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076da:	f7fb f849 	bl	8002770 <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d302      	bcc.n	80076f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80076ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d13f      	bne.n	8007770 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80076fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007700:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007704:	667b      	str	r3, [r7, #100]	@ 0x64
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800770e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007710:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007714:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800771c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e6      	bne.n	80076f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3308      	adds	r3, #8
 8007728:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007734:	f023 0301 	bic.w	r3, r3, #1
 8007738:	663b      	str	r3, [r7, #96]	@ 0x60
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3308      	adds	r3, #8
 8007740:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007742:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007744:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007748:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e5      	bne.n	8007722 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2220      	movs	r2, #32
 800775a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2220      	movs	r2, #32
 8007760:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e068      	b.n	8007842 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	2b00      	cmp	r3, #0
 800777c:	d050      	beq.n	8007820 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800778c:	d148      	bne.n	8007820 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007796:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80077ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077b8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80077c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e6      	bne.n	8007798 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3308      	adds	r3, #8
 80077d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	613b      	str	r3, [r7, #16]
   return(result);
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	f023 0301 	bic.w	r3, r3, #1
 80077e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3308      	adds	r3, #8
 80077e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80077ea:	623a      	str	r2, [r7, #32]
 80077ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ee:	69f9      	ldr	r1, [r7, #28]
 80077f0:	6a3a      	ldr	r2, [r7, #32]
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e5      	bne.n	80077ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2220      	movs	r2, #32
 8007802:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2220      	movs	r2, #32
 8007808:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2220      	movs	r2, #32
 8007810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e010      	b.n	8007842 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	69da      	ldr	r2, [r3, #28]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	4013      	ands	r3, r2
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	429a      	cmp	r2, r3
 800782e:	bf0c      	ite	eq
 8007830:	2301      	moveq	r3, #1
 8007832:	2300      	movne	r3, #0
 8007834:	b2db      	uxtb	r3, r3
 8007836:	461a      	mov	r2, r3
 8007838:	79fb      	ldrb	r3, [r7, #7]
 800783a:	429a      	cmp	r2, r3
 800783c:	f43f af48 	beq.w	80076d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3770      	adds	r7, #112	@ 0x70
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800784c:	b480      	push	{r7}
 800784e:	b097      	sub	sp, #92	@ 0x5c
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	4613      	mov	r3, r2
 8007858:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	88fa      	ldrh	r2, [r7, #6]
 8007864:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	88fa      	ldrh	r2, [r7, #6]
 800786c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800787e:	d10e      	bne.n	800789e <UART_Start_Receive_IT+0x52>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d105      	bne.n	8007894 <UART_Start_Receive_IT+0x48>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800788e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007892:	e02d      	b.n	80078f0 <UART_Start_Receive_IT+0xa4>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	22ff      	movs	r2, #255	@ 0xff
 8007898:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800789c:	e028      	b.n	80078f0 <UART_Start_Receive_IT+0xa4>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10d      	bne.n	80078c2 <UART_Start_Receive_IT+0x76>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d104      	bne.n	80078b8 <UART_Start_Receive_IT+0x6c>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	22ff      	movs	r2, #255	@ 0xff
 80078b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078b6:	e01b      	b.n	80078f0 <UART_Start_Receive_IT+0xa4>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	227f      	movs	r2, #127	@ 0x7f
 80078bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078c0:	e016      	b.n	80078f0 <UART_Start_Receive_IT+0xa4>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078ca:	d10d      	bne.n	80078e8 <UART_Start_Receive_IT+0x9c>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d104      	bne.n	80078de <UART_Start_Receive_IT+0x92>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	227f      	movs	r2, #127	@ 0x7f
 80078d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078dc:	e008      	b.n	80078f0 <UART_Start_Receive_IT+0xa4>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	223f      	movs	r2, #63	@ 0x3f
 80078e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078e6:	e003      	b.n	80078f0 <UART_Start_Receive_IT+0xa4>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2222      	movs	r2, #34	@ 0x22
 80078fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3308      	adds	r3, #8
 8007906:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007912:	f043 0301 	orr.w	r3, r3, #1
 8007916:	657b      	str	r3, [r7, #84]	@ 0x54
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3308      	adds	r3, #8
 800791e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007920:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007922:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007926:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800792e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e5      	bne.n	8007900 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800793c:	d107      	bne.n	800794e <UART_Start_Receive_IT+0x102>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d103      	bne.n	800794e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4a21      	ldr	r2, [pc, #132]	@ (80079d0 <UART_Start_Receive_IT+0x184>)
 800794a:	669a      	str	r2, [r3, #104]	@ 0x68
 800794c:	e002      	b.n	8007954 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4a20      	ldr	r2, [pc, #128]	@ (80079d4 <UART_Start_Receive_IT+0x188>)
 8007952:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d019      	beq.n	8007990 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800796a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007970:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800797a:	637b      	str	r3, [r7, #52]	@ 0x34
 800797c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007980:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e6      	bne.n	800795c <UART_Start_Receive_IT+0x110>
 800798e:	e018      	b.n	80079c2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	613b      	str	r3, [r7, #16]
   return(result);
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	f043 0320 	orr.w	r3, r3, #32
 80079a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079ae:	623b      	str	r3, [r7, #32]
 80079b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	69f9      	ldr	r1, [r7, #28]
 80079b4:	6a3a      	ldr	r2, [r7, #32]
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e6      	bne.n	8007990 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	375c      	adds	r7, #92	@ 0x5c
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	08007dfd 	.word	0x08007dfd
 80079d4:	08007c97 	.word	0x08007c97

080079d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079d8:	b480      	push	{r7}
 80079da:	b095      	sub	sp, #84	@ 0x54
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e6      	bne.n	80079e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3308      	adds	r3, #8
 8007a18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	e853 3f00 	ldrex	r3, [r3]
 8007a20:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	f023 0301 	bic.w	r3, r3, #1
 8007a28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3308      	adds	r3, #8
 8007a30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a3a:	e841 2300 	strex	r3, r2, [r1]
 8007a3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1e5      	bne.n	8007a12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d118      	bne.n	8007a80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	e853 3f00 	ldrex	r3, [r3]
 8007a5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f023 0310 	bic.w	r3, r3, #16
 8007a62:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a6c:	61bb      	str	r3, [r7, #24]
 8007a6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	6979      	ldr	r1, [r7, #20]
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	e841 2300 	strex	r3, r2, [r1]
 8007a78:	613b      	str	r3, [r7, #16]
   return(result);
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e6      	bne.n	8007a4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007a94:	bf00      	nop
 8007a96:	3754      	adds	r7, #84	@ 0x54
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f7ff fa8a 	bl	8006fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ac4:	bf00      	nop
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b08f      	sub	sp, #60	@ 0x3c
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ad8:	2b21      	cmp	r3, #33	@ 0x21
 8007ada:	d14c      	bne.n	8007b76 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d132      	bne.n	8007b4e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	e853 3f00 	ldrex	r3, [r3]
 8007af4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b08:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e6      	bne.n	8007ae8 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	e853 3f00 	ldrex	r3, [r3]
 8007b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	461a      	mov	r2, r3
 8007b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b38:	61bb      	str	r3, [r7, #24]
 8007b3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	6979      	ldr	r1, [r7, #20]
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	e841 2300 	strex	r3, r2, [r1]
 8007b44:	613b      	str	r3, [r7, #16]
   return(result);
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e6      	bne.n	8007b1a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007b4c:	e013      	b.n	8007b76 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b52:	781a      	ldrb	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007b76:	bf00      	nop
 8007b78:	373c      	adds	r7, #60	@ 0x3c
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b091      	sub	sp, #68	@ 0x44
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b8e:	2b21      	cmp	r3, #33	@ 0x21
 8007b90:	d151      	bne.n	8007c36 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d132      	bne.n	8007c04 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	623b      	str	r3, [r7, #32]
   return(result);
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e6      	bne.n	8007b9e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bee:	61fb      	str	r3, [r7, #28]
 8007bf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	69b9      	ldr	r1, [r7, #24]
 8007bf4:	69fa      	ldr	r2, [r7, #28]
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	617b      	str	r3, [r7, #20]
   return(result);
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e6      	bne.n	8007bd0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007c02:	e018      	b.n	8007c36 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c18:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c1e:	1c9a      	adds	r2, r3, #2
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007c36:	bf00      	nop
 8007c38:	3744      	adds	r7, #68	@ 0x44
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b088      	sub	sp, #32
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	e853 3f00 	ldrex	r3, [r3]
 8007c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c5e:	61fb      	str	r3, [r7, #28]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	461a      	mov	r2, r3
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	61bb      	str	r3, [r7, #24]
 8007c6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6c:	6979      	ldr	r1, [r7, #20]
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	e841 2300 	strex	r3, r2, [r1]
 8007c74:	613b      	str	r3, [r7, #16]
   return(result);
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e6      	bne.n	8007c4a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7fa fcbd 	bl	8002608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c8e:	bf00      	nop
 8007c90:	3720      	adds	r7, #32
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b096      	sub	sp, #88	@ 0x58
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ca4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cae:	2b22      	cmp	r3, #34	@ 0x22
 8007cb0:	f040 8098 	bne.w	8007de4 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cba:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007cbe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8007cc2:	b2d9      	uxtb	r1, r3
 8007cc4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cce:	400a      	ands	r2, r1
 8007cd0:	b2d2      	uxtb	r2, r2
 8007cd2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d17b      	bne.n	8007df4 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d04:	e853 3f00 	ldrex	r3, [r3]
 8007d08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d10:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d1c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d22:	e841 2300 	strex	r3, r2, [r1]
 8007d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e6      	bne.n	8007cfc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3308      	adds	r3, #8
 8007d34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	f023 0301 	bic.w	r3, r3, #1
 8007d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1e5      	bne.n	8007d2e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2220      	movs	r2, #32
 8007d66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d12e      	bne.n	8007ddc <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	e853 3f00 	ldrex	r3, [r3]
 8007d90:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f023 0310 	bic.w	r3, r3, #16
 8007d98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007da2:	61fb      	str	r3, [r7, #28]
 8007da4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	69b9      	ldr	r1, [r7, #24]
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	e841 2300 	strex	r3, r2, [r1]
 8007dae:	617b      	str	r3, [r7, #20]
   return(result);
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e6      	bne.n	8007d84 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	f003 0310 	and.w	r3, r3, #16
 8007dc0:	2b10      	cmp	r3, #16
 8007dc2:	d103      	bne.n	8007dcc <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2210      	movs	r2, #16
 8007dca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7ff f909 	bl	8006fec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dda:	e00b      	b.n	8007df4 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7fa fba9 	bl	8002534 <HAL_UART_RxCpltCallback>
}
 8007de2:	e007      	b.n	8007df4 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699a      	ldr	r2, [r3, #24]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f042 0208 	orr.w	r2, r2, #8
 8007df2:	619a      	str	r2, [r3, #24]
}
 8007df4:	bf00      	nop
 8007df6:	3758      	adds	r7, #88	@ 0x58
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b096      	sub	sp, #88	@ 0x58
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e0a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e14:	2b22      	cmp	r3, #34	@ 0x22
 8007e16:	f040 8098 	bne.w	8007f4a <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e20:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e28:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e2a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8007e2e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007e32:	4013      	ands	r3, r2
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e3e:	1c9a      	adds	r2, r3, #2
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d17b      	bne.n	8007f5a <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e80:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e6      	bne.n	8007e62 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3308      	adds	r3, #8
 8007e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	e853 3f00 	ldrex	r3, [r3]
 8007ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	f023 0301 	bic.w	r3, r3, #1
 8007eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007eb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e5      	bne.n	8007e94 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d12e      	bne.n	8007f42 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	e853 3f00 	ldrex	r3, [r3]
 8007ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f023 0310 	bic.w	r3, r3, #16
 8007efe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	461a      	mov	r2, r3
 8007f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f08:	61bb      	str	r3, [r7, #24]
 8007f0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0c:	6979      	ldr	r1, [r7, #20]
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	e841 2300 	strex	r3, r2, [r1]
 8007f14:	613b      	str	r3, [r7, #16]
   return(result);
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1e6      	bne.n	8007eea <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	f003 0310 	and.w	r3, r3, #16
 8007f26:	2b10      	cmp	r3, #16
 8007f28:	d103      	bne.n	8007f32 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2210      	movs	r2, #16
 8007f30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff f856 	bl	8006fec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f40:	e00b      	b.n	8007f5a <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7fa faf6 	bl	8002534 <HAL_UART_RxCpltCallback>
}
 8007f48:	e007      	b.n	8007f5a <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	699a      	ldr	r2, [r3, #24]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f042 0208 	orr.w	r2, r2, #8
 8007f58:	619a      	str	r2, [r3, #24]
}
 8007f5a:	bf00      	nop
 8007f5c:	3758      	adds	r7, #88	@ 0x58
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007f68:	4904      	ldr	r1, [pc, #16]	@ (8007f7c <MX_FATFS_Init+0x18>)
 8007f6a:	4805      	ldr	r0, [pc, #20]	@ (8007f80 <MX_FATFS_Init+0x1c>)
 8007f6c:	f003 f826 	bl	800afbc <FATFS_LinkDriver>
 8007f70:	4603      	mov	r3, r0
 8007f72:	461a      	mov	r2, r3
 8007f74:	4b03      	ldr	r3, [pc, #12]	@ (8007f84 <MX_FATFS_Init+0x20>)
 8007f76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007f78:	bf00      	nop
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	20002b0c 	.word	0x20002b0c
 8007f80:	20000010 	.word	0x20000010
 8007f84:	20002b08 	.word	0x20002b08

08007f88 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007f8c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8007fa2:	79fb      	ldrb	r3, [r7, #7]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7f8 ffe1 	bl	8000f6c <SD_disk_initialize>
 8007faa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	4603      	mov	r3, r0
 8007fbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007fbe:	79fb      	ldrb	r3, [r7, #7]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7f9 f8b9 	bl	8001138 <SD_disk_status>
 8007fc6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60b9      	str	r1, [r7, #8]
 8007fd8:	607a      	str	r2, [r7, #4]
 8007fda:	603b      	str	r3, [r7, #0]
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007fe0:	7bf8      	ldrb	r0, [r7, #15]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	68b9      	ldr	r1, [r7, #8]
 8007fe8:	f7f9 f8bc 	bl	8001164 <SD_disk_read>
 8007fec:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]
 8008002:	4603      	mov	r3, r0
 8008004:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8008006:	7bf8      	ldrb	r0, [r7, #15]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	f7f9 f913 	bl	8001238 <SD_disk_write>
 8008012:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	603a      	str	r2, [r7, #0]
 8008026:	71fb      	strb	r3, [r7, #7]
 8008028:	460b      	mov	r3, r1
 800802a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800802c:	79b9      	ldrb	r1, [r7, #6]
 800802e:	79fb      	ldrb	r3, [r7, #7]
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	4618      	mov	r0, r3
 8008034:	f7f9 f984 	bl	8001340 <SD_disk_ioctl>
 8008038:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	4a08      	ldr	r2, [pc, #32]	@ (8008074 <disk_status+0x30>)
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	79fa      	ldrb	r2, [r7, #7]
 800805c:	4905      	ldr	r1, [pc, #20]	@ (8008074 <disk_status+0x30>)
 800805e:	440a      	add	r2, r1
 8008060:	7a12      	ldrb	r2, [r2, #8]
 8008062:	4610      	mov	r0, r2
 8008064:	4798      	blx	r3
 8008066:	4603      	mov	r3, r0
 8008068:	73fb      	strb	r3, [r7, #15]
  return stat;
 800806a:	7bfb      	ldrb	r3, [r7, #15]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20002d38 	.word	0x20002d38

08008078 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	4603      	mov	r3, r0
 8008080:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	4a0d      	ldr	r2, [pc, #52]	@ (80080c0 <disk_initialize+0x48>)
 800808a:	5cd3      	ldrb	r3, [r2, r3]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d111      	bne.n	80080b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	4a0b      	ldr	r2, [pc, #44]	@ (80080c0 <disk_initialize+0x48>)
 8008094:	2101      	movs	r1, #1
 8008096:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	4a09      	ldr	r2, [pc, #36]	@ (80080c0 <disk_initialize+0x48>)
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	79fa      	ldrb	r2, [r7, #7]
 80080a6:	4906      	ldr	r1, [pc, #24]	@ (80080c0 <disk_initialize+0x48>)
 80080a8:	440a      	add	r2, r1
 80080aa:	7a12      	ldrb	r2, [r2, #8]
 80080ac:	4610      	mov	r0, r2
 80080ae:	4798      	blx	r3
 80080b0:	4603      	mov	r3, r0
 80080b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20002d38 	.word	0x20002d38

080080c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80080c4:	b590      	push	{r4, r7, lr}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	607a      	str	r2, [r7, #4]
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	4a0a      	ldr	r2, [pc, #40]	@ (8008100 <disk_read+0x3c>)
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	689c      	ldr	r4, [r3, #8]
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	4a07      	ldr	r2, [pc, #28]	@ (8008100 <disk_read+0x3c>)
 80080e4:	4413      	add	r3, r2
 80080e6:	7a18      	ldrb	r0, [r3, #8]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	68b9      	ldr	r1, [r7, #8]
 80080ee:	47a0      	blx	r4
 80080f0:	4603      	mov	r3, r0
 80080f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd90      	pop	{r4, r7, pc}
 80080fe:	bf00      	nop
 8008100:	20002d38 	.word	0x20002d38

08008104 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008104:	b590      	push	{r4, r7, lr}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	60b9      	str	r1, [r7, #8]
 800810c:	607a      	str	r2, [r7, #4]
 800810e:	603b      	str	r3, [r7, #0]
 8008110:	4603      	mov	r3, r0
 8008112:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	4a0a      	ldr	r2, [pc, #40]	@ (8008140 <disk_write+0x3c>)
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	68dc      	ldr	r4, [r3, #12]
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	4a07      	ldr	r2, [pc, #28]	@ (8008140 <disk_write+0x3c>)
 8008124:	4413      	add	r3, r2
 8008126:	7a18      	ldrb	r0, [r3, #8]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	47a0      	blx	r4
 8008130:	4603      	mov	r3, r0
 8008132:	75fb      	strb	r3, [r7, #23]
  return res;
 8008134:	7dfb      	ldrb	r3, [r7, #23]
}
 8008136:	4618      	mov	r0, r3
 8008138:	371c      	adds	r7, #28
 800813a:	46bd      	mov	sp, r7
 800813c:	bd90      	pop	{r4, r7, pc}
 800813e:	bf00      	nop
 8008140:	20002d38 	.word	0x20002d38

08008144 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	4603      	mov	r3, r0
 800814c:	603a      	str	r2, [r7, #0]
 800814e:	71fb      	strb	r3, [r7, #7]
 8008150:	460b      	mov	r3, r1
 8008152:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	4a09      	ldr	r2, [pc, #36]	@ (800817c <disk_ioctl+0x38>)
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	79fa      	ldrb	r2, [r7, #7]
 8008162:	4906      	ldr	r1, [pc, #24]	@ (800817c <disk_ioctl+0x38>)
 8008164:	440a      	add	r2, r1
 8008166:	7a10      	ldrb	r0, [r2, #8]
 8008168:	79b9      	ldrb	r1, [r7, #6]
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	4798      	blx	r3
 800816e:	4603      	mov	r3, r0
 8008170:	73fb      	strb	r3, [r7, #15]
  return res;
 8008172:	7bfb      	ldrb	r3, [r7, #15]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20002d38 	.word	0x20002d38

08008180 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3301      	adds	r3, #1
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008190:	89fb      	ldrh	r3, [r7, #14]
 8008192:	021b      	lsls	r3, r3, #8
 8008194:	b21a      	sxth	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	b21b      	sxth	r3, r3
 800819c:	4313      	orrs	r3, r2
 800819e:	b21b      	sxth	r3, r3
 80081a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80081a2:	89fb      	ldrh	r3, [r7, #14]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3303      	adds	r3, #3
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	3202      	adds	r2, #2
 80081c8:	7812      	ldrb	r2, [r2, #0]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	3201      	adds	r2, #1
 80081d6:	7812      	ldrb	r2, [r2, #0]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	021b      	lsls	r3, r3, #8
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	7812      	ldrb	r2, [r2, #0]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80081e8:	68fb      	ldr	r3, [r7, #12]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80081f6:	b480      	push	{r7}
 80081f8:	b083      	sub	sp, #12
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	460b      	mov	r3, r1
 8008200:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	1c5a      	adds	r2, r3, #1
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	887a      	ldrh	r2, [r7, #2]
 800820a:	b2d2      	uxtb	r2, r2
 800820c:	701a      	strb	r2, [r3, #0]
 800820e:	887b      	ldrh	r3, [r7, #2]
 8008210:	0a1b      	lsrs	r3, r3, #8
 8008212:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	607a      	str	r2, [r7, #4]
 800821a:	887a      	ldrh	r2, [r7, #2]
 800821c:	b2d2      	uxtb	r2, r2
 800821e:	701a      	strb	r2, [r3, #0]
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	607a      	str	r2, [r7, #4]
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	701a      	strb	r2, [r3, #0]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	0a1b      	lsrs	r3, r3, #8
 8008246:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	607a      	str	r2, [r7, #4]
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	b2d2      	uxtb	r2, r2
 8008252:	701a      	strb	r2, [r3, #0]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	0a1b      	lsrs	r3, r3, #8
 8008258:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	1c5a      	adds	r2, r3, #1
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	b2d2      	uxtb	r2, r2
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	0a1b      	lsrs	r3, r3, #8
 800826a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	607a      	str	r2, [r7, #4]
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	b2d2      	uxtb	r2, r2
 8008276:	701a      	strb	r2, [r3, #0]
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00d      	beq.n	80082ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	1c53      	adds	r3, r2, #1
 80082a2:	613b      	str	r3, [r7, #16]
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	1c59      	adds	r1, r3, #1
 80082a8:	6179      	str	r1, [r7, #20]
 80082aa:	7812      	ldrb	r2, [r2, #0]
 80082ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3b01      	subs	r3, #1
 80082b2:	607b      	str	r3, [r7, #4]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1f1      	bne.n	800829e <mem_cpy+0x1a>
	}
}
 80082ba:	bf00      	nop
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80082c6:	b480      	push	{r7}
 80082c8:	b087      	sub	sp, #28
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	60f8      	str	r0, [r7, #12]
 80082ce:	60b9      	str	r1, [r7, #8]
 80082d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	1c5a      	adds	r2, r3, #1
 80082da:	617a      	str	r2, [r7, #20]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	b2d2      	uxtb	r2, r2
 80082e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3b01      	subs	r3, #1
 80082e6:	607b      	str	r3, [r7, #4]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1f3      	bne.n	80082d6 <mem_set+0x10>
}
 80082ee:	bf00      	nop
 80082f0:	bf00      	nop
 80082f2:	371c      	adds	r7, #28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80082fc:	b480      	push	{r7}
 80082fe:	b089      	sub	sp, #36	@ 0x24
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	61fb      	str	r3, [r7, #28]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	1c5a      	adds	r2, r3, #1
 8008318:	61fa      	str	r2, [r7, #28]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	4619      	mov	r1, r3
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	61ba      	str	r2, [r7, #24]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	1acb      	subs	r3, r1, r3
 8008328:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3b01      	subs	r3, #1
 800832e:	607b      	str	r3, [r7, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d002      	beq.n	800833c <mem_cmp+0x40>
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d0eb      	beq.n	8008314 <mem_cmp+0x18>

	return r;
 800833c:	697b      	ldr	r3, [r7, #20]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3724      	adds	r7, #36	@ 0x24
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008354:	e002      	b.n	800835c <chk_chr+0x12>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3301      	adds	r3, #1
 800835a:	607b      	str	r3, [r7, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d005      	beq.n	8008370 <chk_chr+0x26>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	461a      	mov	r2, r3
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	4293      	cmp	r3, r2
 800836e:	d1f2      	bne.n	8008356 <chk_chr+0xc>
	return *str;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	781b      	ldrb	r3, [r3, #0]
}
 8008374:	4618      	mov	r0, r3
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800838a:	2300      	movs	r3, #0
 800838c:	60bb      	str	r3, [r7, #8]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	60fb      	str	r3, [r7, #12]
 8008392:	e029      	b.n	80083e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008394:	4a27      	ldr	r2, [pc, #156]	@ (8008434 <chk_lock+0xb4>)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	011b      	lsls	r3, r3, #4
 800839a:	4413      	add	r3, r2
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d01d      	beq.n	80083de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80083a2:	4a24      	ldr	r2, [pc, #144]	@ (8008434 <chk_lock+0xb4>)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	011b      	lsls	r3, r3, #4
 80083a8:	4413      	add	r3, r2
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d116      	bne.n	80083e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80083b4:	4a1f      	ldr	r2, [pc, #124]	@ (8008434 <chk_lock+0xb4>)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	011b      	lsls	r3, r3, #4
 80083ba:	4413      	add	r3, r2
 80083bc:	3304      	adds	r3, #4
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d10c      	bne.n	80083e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80083c8:	4a1a      	ldr	r2, [pc, #104]	@ (8008434 <chk_lock+0xb4>)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	4413      	add	r3, r2
 80083d0:	3308      	adds	r3, #8
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80083d8:	429a      	cmp	r2, r3
 80083da:	d102      	bne.n	80083e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80083dc:	e007      	b.n	80083ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80083de:	2301      	movs	r3, #1
 80083e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3301      	adds	r3, #1
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d9d2      	bls.n	8008394 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d109      	bne.n	8008408 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d102      	bne.n	8008400 <chk_lock+0x80>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d101      	bne.n	8008404 <chk_lock+0x84>
 8008400:	2300      	movs	r3, #0
 8008402:	e010      	b.n	8008426 <chk_lock+0xa6>
 8008404:	2312      	movs	r3, #18
 8008406:	e00e      	b.n	8008426 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d108      	bne.n	8008420 <chk_lock+0xa0>
 800840e:	4a09      	ldr	r2, [pc, #36]	@ (8008434 <chk_lock+0xb4>)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	011b      	lsls	r3, r3, #4
 8008414:	4413      	add	r3, r2
 8008416:	330c      	adds	r3, #12
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800841e:	d101      	bne.n	8008424 <chk_lock+0xa4>
 8008420:	2310      	movs	r3, #16
 8008422:	e000      	b.n	8008426 <chk_lock+0xa6>
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	20002b18 	.word	0x20002b18

08008438 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800843e:	2300      	movs	r3, #0
 8008440:	607b      	str	r3, [r7, #4]
 8008442:	e002      	b.n	800844a <enq_lock+0x12>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3301      	adds	r3, #1
 8008448:	607b      	str	r3, [r7, #4]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d806      	bhi.n	800845e <enq_lock+0x26>
 8008450:	4a09      	ldr	r2, [pc, #36]	@ (8008478 <enq_lock+0x40>)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	011b      	lsls	r3, r3, #4
 8008456:	4413      	add	r3, r2
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1f2      	bne.n	8008444 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2b02      	cmp	r3, #2
 8008462:	bf14      	ite	ne
 8008464:	2301      	movne	r3, #1
 8008466:	2300      	moveq	r3, #0
 8008468:	b2db      	uxtb	r3, r3
}
 800846a:	4618      	mov	r0, r3
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	20002b18 	.word	0x20002b18

0800847c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008486:	2300      	movs	r3, #0
 8008488:	60fb      	str	r3, [r7, #12]
 800848a:	e01f      	b.n	80084cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800848c:	4a41      	ldr	r2, [pc, #260]	@ (8008594 <inc_lock+0x118>)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	4413      	add	r3, r2
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d113      	bne.n	80084c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800849e:	4a3d      	ldr	r2, [pc, #244]	@ (8008594 <inc_lock+0x118>)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	011b      	lsls	r3, r3, #4
 80084a4:	4413      	add	r3, r2
 80084a6:	3304      	adds	r3, #4
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d109      	bne.n	80084c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80084b2:	4a38      	ldr	r2, [pc, #224]	@ (8008594 <inc_lock+0x118>)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	4413      	add	r3, r2
 80084ba:	3308      	adds	r3, #8
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d006      	beq.n	80084d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3301      	adds	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d9dc      	bls.n	800848c <inc_lock+0x10>
 80084d2:	e000      	b.n	80084d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80084d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d132      	bne.n	8008542 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80084dc:	2300      	movs	r3, #0
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	e002      	b.n	80084e8 <inc_lock+0x6c>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3301      	adds	r3, #1
 80084e6:	60fb      	str	r3, [r7, #12]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d806      	bhi.n	80084fc <inc_lock+0x80>
 80084ee:	4a29      	ldr	r2, [pc, #164]	@ (8008594 <inc_lock+0x118>)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	011b      	lsls	r3, r3, #4
 80084f4:	4413      	add	r3, r2
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1f2      	bne.n	80084e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d101      	bne.n	8008506 <inc_lock+0x8a>
 8008502:	2300      	movs	r3, #0
 8008504:	e040      	b.n	8008588 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	4922      	ldr	r1, [pc, #136]	@ (8008594 <inc_lock+0x118>)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	440b      	add	r3, r1
 8008512:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689a      	ldr	r2, [r3, #8]
 8008518:	491e      	ldr	r1, [pc, #120]	@ (8008594 <inc_lock+0x118>)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	011b      	lsls	r3, r3, #4
 800851e:	440b      	add	r3, r1
 8008520:	3304      	adds	r3, #4
 8008522:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	695a      	ldr	r2, [r3, #20]
 8008528:	491a      	ldr	r1, [pc, #104]	@ (8008594 <inc_lock+0x118>)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	440b      	add	r3, r1
 8008530:	3308      	adds	r3, #8
 8008532:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008534:	4a17      	ldr	r2, [pc, #92]	@ (8008594 <inc_lock+0x118>)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	011b      	lsls	r3, r3, #4
 800853a:	4413      	add	r3, r2
 800853c:	330c      	adds	r3, #12
 800853e:	2200      	movs	r2, #0
 8008540:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d009      	beq.n	800855c <inc_lock+0xe0>
 8008548:	4a12      	ldr	r2, [pc, #72]	@ (8008594 <inc_lock+0x118>)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	011b      	lsls	r3, r3, #4
 800854e:	4413      	add	r3, r2
 8008550:	330c      	adds	r3, #12
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <inc_lock+0xe0>
 8008558:	2300      	movs	r3, #0
 800855a:	e015      	b.n	8008588 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d108      	bne.n	8008574 <inc_lock+0xf8>
 8008562:	4a0c      	ldr	r2, [pc, #48]	@ (8008594 <inc_lock+0x118>)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	011b      	lsls	r3, r3, #4
 8008568:	4413      	add	r3, r2
 800856a:	330c      	adds	r3, #12
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	3301      	adds	r3, #1
 8008570:	b29a      	uxth	r2, r3
 8008572:	e001      	b.n	8008578 <inc_lock+0xfc>
 8008574:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008578:	4906      	ldr	r1, [pc, #24]	@ (8008594 <inc_lock+0x118>)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	011b      	lsls	r3, r3, #4
 800857e:	440b      	add	r3, r1
 8008580:	330c      	adds	r3, #12
 8008582:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3301      	adds	r3, #1
}
 8008588:	4618      	mov	r0, r3
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	20002b18 	.word	0x20002b18

08008598 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	607b      	str	r3, [r7, #4]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d825      	bhi.n	80085f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80085ac:	4a17      	ldr	r2, [pc, #92]	@ (800860c <dec_lock+0x74>)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	4413      	add	r3, r2
 80085b4:	330c      	adds	r3, #12
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80085ba:	89fb      	ldrh	r3, [r7, #14]
 80085bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085c0:	d101      	bne.n	80085c6 <dec_lock+0x2e>
 80085c2:	2300      	movs	r3, #0
 80085c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80085c6:	89fb      	ldrh	r3, [r7, #14]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <dec_lock+0x3a>
 80085cc:	89fb      	ldrh	r3, [r7, #14]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80085d2:	4a0e      	ldr	r2, [pc, #56]	@ (800860c <dec_lock+0x74>)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	011b      	lsls	r3, r3, #4
 80085d8:	4413      	add	r3, r2
 80085da:	330c      	adds	r3, #12
 80085dc:	89fa      	ldrh	r2, [r7, #14]
 80085de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80085e0:	89fb      	ldrh	r3, [r7, #14]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d105      	bne.n	80085f2 <dec_lock+0x5a>
 80085e6:	4a09      	ldr	r2, [pc, #36]	@ (800860c <dec_lock+0x74>)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	011b      	lsls	r3, r3, #4
 80085ec:	4413      	add	r3, r2
 80085ee:	2200      	movs	r2, #0
 80085f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	737b      	strb	r3, [r7, #13]
 80085f6:	e001      	b.n	80085fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80085f8:	2302      	movs	r3, #2
 80085fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80085fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	20002b18 	.word	0x20002b18

08008610 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008618:	2300      	movs	r3, #0
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	e010      	b.n	8008640 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800861e:	4a0d      	ldr	r2, [pc, #52]	@ (8008654 <clear_lock+0x44>)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	011b      	lsls	r3, r3, #4
 8008624:	4413      	add	r3, r2
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	429a      	cmp	r2, r3
 800862c:	d105      	bne.n	800863a <clear_lock+0x2a>
 800862e:	4a09      	ldr	r2, [pc, #36]	@ (8008654 <clear_lock+0x44>)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	011b      	lsls	r3, r3, #4
 8008634:	4413      	add	r3, r2
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3301      	adds	r3, #1
 800863e:	60fb      	str	r3, [r7, #12]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d9eb      	bls.n	800861e <clear_lock+0xe>
	}
}
 8008646:	bf00      	nop
 8008648:	bf00      	nop
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr
 8008654:	20002b18 	.word	0x20002b18

08008658 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008660:	2300      	movs	r3, #0
 8008662:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	78db      	ldrb	r3, [r3, #3]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d034      	beq.n	80086d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008670:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	7858      	ldrb	r0, [r3, #1]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800867c:	2301      	movs	r3, #1
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	f7ff fd40 	bl	8008104 <disk_write>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <sync_window+0x38>
			res = FR_DISK_ERR;
 800868a:	2301      	movs	r3, #1
 800868c:	73fb      	strb	r3, [r7, #15]
 800868e:	e022      	b.n	80086d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	1ad2      	subs	r2, r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d217      	bcs.n	80086d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	789b      	ldrb	r3, [r3, #2]
 80086aa:	613b      	str	r3, [r7, #16]
 80086ac:	e010      	b.n	80086d0 <sync_window+0x78>
					wsect += fs->fsize;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	4413      	add	r3, r2
 80086b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	7858      	ldrb	r0, [r3, #1]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80086c2:	2301      	movs	r3, #1
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	f7ff fd1d 	bl	8008104 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	3b01      	subs	r3, #1
 80086ce:	613b      	str	r3, [r7, #16]
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d8eb      	bhi.n	80086ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d01b      	beq.n	8008730 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7ff ffad 	bl	8008658 <sync_window>
 80086fe:	4603      	mov	r3, r0
 8008700:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d113      	bne.n	8008730 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	7858      	ldrb	r0, [r3, #1]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008712:	2301      	movs	r3, #1
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	f7ff fcd5 	bl	80080c4 <disk_read>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d004      	beq.n	800872a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008720:	f04f 33ff 	mov.w	r3, #4294967295
 8008724:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008726:	2301      	movs	r3, #1
 8008728:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8008730:	7bfb      	ldrb	r3, [r7, #15]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff ff87 	bl	8008658 <sync_window>
 800874a:	4603      	mov	r3, r0
 800874c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d159      	bne.n	8008808 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	2b03      	cmp	r3, #3
 800875a:	d149      	bne.n	80087f0 <sync_fs+0xb4>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	791b      	ldrb	r3, [r3, #4]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d145      	bne.n	80087f0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	899b      	ldrh	r3, [r3, #12]
 800876e:	461a      	mov	r2, r3
 8008770:	2100      	movs	r1, #0
 8008772:	f7ff fda8 	bl	80082c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	3338      	adds	r3, #56	@ 0x38
 800877a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800877e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008782:	4618      	mov	r0, r3
 8008784:	f7ff fd37 	bl	80081f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	3338      	adds	r3, #56	@ 0x38
 800878c:	4921      	ldr	r1, [pc, #132]	@ (8008814 <sync_fs+0xd8>)
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff fd4c 	bl	800822c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3338      	adds	r3, #56	@ 0x38
 8008798:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800879c:	491e      	ldr	r1, [pc, #120]	@ (8008818 <sync_fs+0xdc>)
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff fd44 	bl	800822c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3338      	adds	r3, #56	@ 0x38
 80087a8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	4619      	mov	r1, r3
 80087b2:	4610      	mov	r0, r2
 80087b4:	f7ff fd3a 	bl	800822c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3338      	adds	r3, #56	@ 0x38
 80087bc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	4619      	mov	r1, r3
 80087c6:	4610      	mov	r0, r2
 80087c8:	f7ff fd30 	bl	800822c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	7858      	ldrb	r0, [r3, #1]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087e4:	2301      	movs	r3, #1
 80087e6:	f7ff fc8d 	bl	8008104 <disk_write>
			fs->fsi_flag = 0;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	785b      	ldrb	r3, [r3, #1]
 80087f4:	2200      	movs	r2, #0
 80087f6:	2100      	movs	r1, #0
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7ff fca3 	bl	8008144 <disk_ioctl>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <sync_fs+0xcc>
 8008804:	2301      	movs	r3, #1
 8008806:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008808:	7bfb      	ldrb	r3, [r7, #15]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	41615252 	.word	0x41615252
 8008818:	61417272 	.word	0x61417272

0800881c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	3b02      	subs	r3, #2
 800882a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	3b02      	subs	r3, #2
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	429a      	cmp	r2, r3
 8008836:	d301      	bcc.n	800883c <clust2sect+0x20>
 8008838:	2300      	movs	r3, #0
 800883a:	e008      	b.n	800884e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	895b      	ldrh	r3, [r3, #10]
 8008840:	461a      	mov	r2, r3
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	fb03 f202 	mul.w	r2, r3, r2
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800884c:	4413      	add	r3, r2
}
 800884e:	4618      	mov	r0, r3
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b086      	sub	sp, #24
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d904      	bls.n	800887a <get_fat+0x20>
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d302      	bcc.n	8008880 <get_fat+0x26>
		val = 1;	/* Internal error */
 800887a:	2301      	movs	r3, #1
 800887c:	617b      	str	r3, [r7, #20]
 800887e:	e0ba      	b.n	80089f6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008880:	f04f 33ff 	mov.w	r3, #4294967295
 8008884:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	2b03      	cmp	r3, #3
 800888c:	f000 8082 	beq.w	8008994 <get_fat+0x13a>
 8008890:	2b03      	cmp	r3, #3
 8008892:	f300 80a6 	bgt.w	80089e2 <get_fat+0x188>
 8008896:	2b01      	cmp	r3, #1
 8008898:	d002      	beq.n	80088a0 <get_fat+0x46>
 800889a:	2b02      	cmp	r3, #2
 800889c:	d055      	beq.n	800894a <get_fat+0xf0>
 800889e:	e0a0      	b.n	80089e2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	085b      	lsrs	r3, r3, #1
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	4413      	add	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	899b      	ldrh	r3, [r3, #12]
 80088b6:	4619      	mov	r1, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80088be:	4413      	add	r3, r2
 80088c0:	4619      	mov	r1, r3
 80088c2:	6938      	ldr	r0, [r7, #16]
 80088c4:	f7ff ff0c 	bl	80086e0 <move_window>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f040 808c 	bne.w	80089e8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	60fa      	str	r2, [r7, #12]
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	8992      	ldrh	r2, [r2, #12]
 80088da:	fbb3 f1f2 	udiv	r1, r3, r2
 80088de:	fb01 f202 	mul.w	r2, r1, r2
 80088e2:	1a9b      	subs	r3, r3, r2
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	4413      	add	r3, r2
 80088e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80088ec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	899b      	ldrh	r3, [r3, #12]
 80088f6:	4619      	mov	r1, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80088fe:	4413      	add	r3, r2
 8008900:	4619      	mov	r1, r3
 8008902:	6938      	ldr	r0, [r7, #16]
 8008904:	f7ff feec 	bl	80086e0 <move_window>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d16e      	bne.n	80089ec <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	899b      	ldrh	r3, [r3, #12]
 8008912:	461a      	mov	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	fbb3 f1f2 	udiv	r1, r3, r2
 800891a:	fb01 f202 	mul.w	r2, r1, r2
 800891e:	1a9b      	subs	r3, r3, r2
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	4413      	add	r3, r2
 8008924:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008928:	021b      	lsls	r3, r3, #8
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	4313      	orrs	r3, r2
 800892e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d002      	beq.n	8008940 <get_fat+0xe6>
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	091b      	lsrs	r3, r3, #4
 800893e:	e002      	b.n	8008946 <get_fat+0xec>
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008946:	617b      	str	r3, [r7, #20]
			break;
 8008948:	e055      	b.n	80089f6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	899b      	ldrh	r3, [r3, #12]
 8008952:	085b      	lsrs	r3, r3, #1
 8008954:	b29b      	uxth	r3, r3
 8008956:	4619      	mov	r1, r3
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	fbb3 f3f1 	udiv	r3, r3, r1
 800895e:	4413      	add	r3, r2
 8008960:	4619      	mov	r1, r3
 8008962:	6938      	ldr	r0, [r7, #16]
 8008964:	f7ff febc 	bl	80086e0 <move_window>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d140      	bne.n	80089f0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	8992      	ldrh	r2, [r2, #12]
 800897c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008980:	fb00 f202 	mul.w	r2, r0, r2
 8008984:	1a9b      	subs	r3, r3, r2
 8008986:	440b      	add	r3, r1
 8008988:	4618      	mov	r0, r3
 800898a:	f7ff fbf9 	bl	8008180 <ld_word>
 800898e:	4603      	mov	r3, r0
 8008990:	617b      	str	r3, [r7, #20]
			break;
 8008992:	e030      	b.n	80089f6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	899b      	ldrh	r3, [r3, #12]
 800899c:	089b      	lsrs	r3, r3, #2
 800899e:	b29b      	uxth	r3, r3
 80089a0:	4619      	mov	r1, r3
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80089a8:	4413      	add	r3, r2
 80089aa:	4619      	mov	r1, r3
 80089ac:	6938      	ldr	r0, [r7, #16]
 80089ae:	f7ff fe97 	bl	80086e0 <move_window>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d11d      	bne.n	80089f4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	8992      	ldrh	r2, [r2, #12]
 80089c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80089ca:	fb00 f202 	mul.w	r2, r0, r2
 80089ce:	1a9b      	subs	r3, r3, r2
 80089d0:	440b      	add	r3, r1
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7ff fbec 	bl	80081b0 <ld_dword>
 80089d8:	4603      	mov	r3, r0
 80089da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80089de:	617b      	str	r3, [r7, #20]
			break;
 80089e0:	e009      	b.n	80089f6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80089e2:	2301      	movs	r3, #1
 80089e4:	617b      	str	r3, [r7, #20]
 80089e6:	e006      	b.n	80089f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089e8:	bf00      	nop
 80089ea:	e004      	b.n	80089f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089ec:	bf00      	nop
 80089ee:	e002      	b.n	80089f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80089f0:	bf00      	nop
 80089f2:	e000      	b.n	80089f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80089f4:	bf00      	nop
		}
	}

	return val;
 80089f6:	697b      	ldr	r3, [r7, #20]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3718      	adds	r7, #24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008a00:	b590      	push	{r4, r7, lr}
 8008a02:	b089      	sub	sp, #36	@ 0x24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	f240 8109 	bls.w	8008c2a <put_fat+0x22a>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	f080 8103 	bcs.w	8008c2a <put_fat+0x22a>
		switch (fs->fs_type) {
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	f000 80b6 	beq.w	8008b9a <put_fat+0x19a>
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	f300 80fb 	bgt.w	8008c2a <put_fat+0x22a>
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d003      	beq.n	8008a40 <put_fat+0x40>
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	f000 8083 	beq.w	8008b44 <put_fat+0x144>
 8008a3e:	e0f4      	b.n	8008c2a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	61bb      	str	r3, [r7, #24]
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	085b      	lsrs	r3, r3, #1
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	899b      	ldrh	r3, [r3, #12]
 8008a56:	4619      	mov	r1, r3
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a5e:	4413      	add	r3, r2
 8008a60:	4619      	mov	r1, r3
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f7ff fe3c 	bl	80086e0 <move_window>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a6c:	7ffb      	ldrb	r3, [r7, #31]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f040 80d4 	bne.w	8008c1c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	61ba      	str	r2, [r7, #24]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	8992      	ldrh	r2, [r2, #12]
 8008a84:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a88:	fb00 f202 	mul.w	r2, r0, r2
 8008a8c:	1a9b      	subs	r3, r3, r2
 8008a8e:	440b      	add	r3, r1
 8008a90:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f003 0301 	and.w	r3, r3, #1
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00d      	beq.n	8008ab8 <put_fat+0xb8>
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	b25b      	sxtb	r3, r3
 8008aa2:	f003 030f 	and.w	r3, r3, #15
 8008aa6:	b25a      	sxtb	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	011b      	lsls	r3, r3, #4
 8008aae:	b25b      	sxtb	r3, r3
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	b25b      	sxtb	r3, r3
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	e001      	b.n	8008abc <put_fat+0xbc>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	899b      	ldrh	r3, [r3, #12]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ad6:	4413      	add	r3, r2
 8008ad8:	4619      	mov	r1, r3
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff fe00 	bl	80086e0 <move_window>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ae4:	7ffb      	ldrb	r3, [r7, #31]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f040 809a 	bne.w	8008c20 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	899b      	ldrh	r3, [r3, #12]
 8008af6:	461a      	mov	r2, r3
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	fbb3 f0f2 	udiv	r0, r3, r2
 8008afe:	fb00 f202 	mul.w	r2, r0, r2
 8008b02:	1a9b      	subs	r3, r3, r2
 8008b04:	440b      	add	r3, r1
 8008b06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <put_fat+0x11a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	091b      	lsrs	r3, r3, #4
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	e00e      	b.n	8008b38 <put_fat+0x138>
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	b25b      	sxtb	r3, r3
 8008b20:	f023 030f 	bic.w	r3, r3, #15
 8008b24:	b25a      	sxtb	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	0a1b      	lsrs	r3, r3, #8
 8008b2a:	b25b      	sxtb	r3, r3
 8008b2c:	f003 030f 	and.w	r3, r3, #15
 8008b30:	b25b      	sxtb	r3, r3
 8008b32:	4313      	orrs	r3, r2
 8008b34:	b25b      	sxtb	r3, r3
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	70da      	strb	r2, [r3, #3]
			break;
 8008b42:	e072      	b.n	8008c2a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	899b      	ldrh	r3, [r3, #12]
 8008b4c:	085b      	lsrs	r3, r3, #1
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	4619      	mov	r1, r3
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b58:	4413      	add	r3, r2
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7ff fdbf 	bl	80086e0 <move_window>
 8008b62:	4603      	mov	r3, r0
 8008b64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b66:	7ffb      	ldrb	r3, [r7, #31]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d15b      	bne.n	8008c24 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	8992      	ldrh	r2, [r2, #12]
 8008b7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b7e:	fb00 f202 	mul.w	r2, r0, r2
 8008b82:	1a9b      	subs	r3, r3, r2
 8008b84:	440b      	add	r3, r1
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	b292      	uxth	r2, r2
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7ff fb32 	bl	80081f6 <st_word>
			fs->wflag = 1;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2201      	movs	r2, #1
 8008b96:	70da      	strb	r2, [r3, #3]
			break;
 8008b98:	e047      	b.n	8008c2a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	899b      	ldrh	r3, [r3, #12]
 8008ba2:	089b      	lsrs	r3, r3, #2
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bae:	4413      	add	r3, r2
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f7ff fd94 	bl	80086e0 <move_window>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008bbc:	7ffb      	ldrb	r3, [r7, #31]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d132      	bne.n	8008c28 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	8992      	ldrh	r2, [r2, #12]
 8008bd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bda:	fb00 f202 	mul.w	r2, r0, r2
 8008bde:	1a9b      	subs	r3, r3, r2
 8008be0:	440b      	add	r3, r1
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff fae4 	bl	80081b0 <ld_dword>
 8008be8:	4603      	mov	r3, r0
 8008bea:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008bee:	4323      	orrs	r3, r4
 8008bf0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	8992      	ldrh	r2, [r2, #12]
 8008c00:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c04:	fb00 f202 	mul.w	r2, r0, r2
 8008c08:	1a9b      	subs	r3, r3, r2
 8008c0a:	440b      	add	r3, r1
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7ff fb0c 	bl	800822c <st_dword>
			fs->wflag = 1;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	70da      	strb	r2, [r3, #3]
			break;
 8008c1a:	e006      	b.n	8008c2a <put_fat+0x22a>
			if (res != FR_OK) break;
 8008c1c:	bf00      	nop
 8008c1e:	e004      	b.n	8008c2a <put_fat+0x22a>
			if (res != FR_OK) break;
 8008c20:	bf00      	nop
 8008c22:	e002      	b.n	8008c2a <put_fat+0x22a>
			if (res != FR_OK) break;
 8008c24:	bf00      	nop
 8008c26:	e000      	b.n	8008c2a <put_fat+0x22a>
			if (res != FR_OK) break;
 8008c28:	bf00      	nop
		}
	}
	return res;
 8008c2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3724      	adds	r7, #36	@ 0x24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd90      	pop	{r4, r7, pc}

08008c34 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d904      	bls.n	8008c5a <remove_chain+0x26>
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d301      	bcc.n	8008c5e <remove_chain+0x2a>
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	e04b      	b.n	8008cf6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00c      	beq.n	8008c7e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008c64:	f04f 32ff 	mov.w	r2, #4294967295
 8008c68:	6879      	ldr	r1, [r7, #4]
 8008c6a:	69b8      	ldr	r0, [r7, #24]
 8008c6c:	f7ff fec8 	bl	8008a00 <put_fat>
 8008c70:	4603      	mov	r3, r0
 8008c72:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008c74:	7ffb      	ldrb	r3, [r7, #31]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <remove_chain+0x4a>
 8008c7a:	7ffb      	ldrb	r3, [r7, #31]
 8008c7c:	e03b      	b.n	8008cf6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008c7e:	68b9      	ldr	r1, [r7, #8]
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f7ff fdea 	bl	800885a <get_fat>
 8008c86:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d031      	beq.n	8008cf2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d101      	bne.n	8008c98 <remove_chain+0x64>
 8008c94:	2302      	movs	r3, #2
 8008c96:	e02e      	b.n	8008cf6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9e:	d101      	bne.n	8008ca4 <remove_chain+0x70>
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e028      	b.n	8008cf6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	68b9      	ldr	r1, [r7, #8]
 8008ca8:	69b8      	ldr	r0, [r7, #24]
 8008caa:	f7ff fea9 	bl	8008a00 <put_fat>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008cb2:	7ffb      	ldrb	r3, [r7, #31]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <remove_chain+0x88>
 8008cb8:	7ffb      	ldrb	r3, [r7, #31]
 8008cba:	e01c      	b.n	8008cf6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	699a      	ldr	r2, [r3, #24]
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	3b02      	subs	r3, #2
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d20b      	bcs.n	8008ce2 <remove_chain+0xae>
			fs->free_clst++;
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	791b      	ldrb	r3, [r3, #4]
 8008cd8:	f043 0301 	orr.w	r3, r3, #1
 8008cdc:	b2da      	uxtb	r2, r3
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d3c6      	bcc.n	8008c7e <remove_chain+0x4a>
 8008cf0:	e000      	b.n	8008cf4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008cf2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3720      	adds	r7, #32
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b088      	sub	sp, #32
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10d      	bne.n	8008d30 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d004      	beq.n	8008d2a <create_chain+0x2c>
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d31b      	bcc.n	8008d62 <create_chain+0x64>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	61bb      	str	r3, [r7, #24]
 8008d2e:	e018      	b.n	8008d62 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7ff fd91 	bl	800885a <get_fat>
 8008d38:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d801      	bhi.n	8008d44 <create_chain+0x46>
 8008d40:	2301      	movs	r3, #1
 8008d42:	e070      	b.n	8008e26 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4a:	d101      	bne.n	8008d50 <create_chain+0x52>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	e06a      	b.n	8008e26 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d201      	bcs.n	8008d5e <create_chain+0x60>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	e063      	b.n	8008e26 <create_chain+0x128>
		scl = clst;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	69db      	ldr	r3, [r3, #28]
 8008d70:	69fa      	ldr	r2, [r7, #28]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d307      	bcc.n	8008d86 <create_chain+0x88>
				ncl = 2;
 8008d76:	2302      	movs	r3, #2
 8008d78:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008d7a:	69fa      	ldr	r2, [r7, #28]
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d901      	bls.n	8008d86 <create_chain+0x88>
 8008d82:	2300      	movs	r3, #0
 8008d84:	e04f      	b.n	8008e26 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008d86:	69f9      	ldr	r1, [r7, #28]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7ff fd66 	bl	800885a <get_fat>
 8008d8e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00e      	beq.n	8008db4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d003      	beq.n	8008da4 <create_chain+0xa6>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da2:	d101      	bne.n	8008da8 <create_chain+0xaa>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	e03e      	b.n	8008e26 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008da8:	69fa      	ldr	r2, [r7, #28]
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d1da      	bne.n	8008d66 <create_chain+0x68>
 8008db0:	2300      	movs	r3, #0
 8008db2:	e038      	b.n	8008e26 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008db4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008db6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dba:	69f9      	ldr	r1, [r7, #28]
 8008dbc:	6938      	ldr	r0, [r7, #16]
 8008dbe:	f7ff fe1f 	bl	8008a00 <put_fat>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d109      	bne.n	8008de0 <create_chain+0xe2>
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d006      	beq.n	8008de0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008dd2:	69fa      	ldr	r2, [r7, #28]
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6938      	ldr	r0, [r7, #16]
 8008dd8:	f7ff fe12 	bl	8008a00 <put_fat>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d116      	bne.n	8008e14 <create_chain+0x116>
		fs->last_clst = ncl;
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	69fa      	ldr	r2, [r7, #28]
 8008dea:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	699a      	ldr	r2, [r3, #24]
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	69db      	ldr	r3, [r3, #28]
 8008df4:	3b02      	subs	r3, #2
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d804      	bhi.n	8008e04 <create_chain+0x106>
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	1e5a      	subs	r2, r3, #1
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	791b      	ldrb	r3, [r3, #4]
 8008e08:	f043 0301 	orr.w	r3, r3, #1
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	711a      	strb	r2, [r3, #4]
 8008e12:	e007      	b.n	8008e24 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d102      	bne.n	8008e20 <create_chain+0x122>
 8008e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1e:	e000      	b.n	8008e22 <create_chain+0x124>
 8008e20:	2301      	movs	r3, #1
 8008e22:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008e24:	69fb      	ldr	r3, [r7, #28]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3720      	adds	r7, #32
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b087      	sub	sp, #28
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e42:	3304      	adds	r3, #4
 8008e44:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	899b      	ldrh	r3, [r3, #12]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	8952      	ldrh	r2, [r2, #10]
 8008e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e5a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	1d1a      	adds	r2, r3, #4
 8008e60:	613a      	str	r2, [r7, #16]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <clmt_clust+0x42>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	e010      	b.n	8008e92 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d307      	bcc.n	8008e88 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	617b      	str	r3, [r7, #20]
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	3304      	adds	r3, #4
 8008e84:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e86:	e7e9      	b.n	8008e5c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008e88:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	4413      	add	r3, r2
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	371c      	adds	r7, #28
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr

08008e9e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b086      	sub	sp, #24
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008eb4:	d204      	bcs.n	8008ec0 <dir_sdi+0x22>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	f003 031f 	and.w	r3, r3, #31
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	e071      	b.n	8008fa8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d106      	bne.n	8008ee4 <dir_sdi+0x46>
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d902      	bls.n	8008ee4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10c      	bne.n	8008f04 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	095b      	lsrs	r3, r3, #5
 8008eee:	693a      	ldr	r2, [r7, #16]
 8008ef0:	8912      	ldrh	r2, [r2, #8]
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d301      	bcc.n	8008efa <dir_sdi+0x5c>
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	e056      	b.n	8008fa8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	61da      	str	r2, [r3, #28]
 8008f02:	e02d      	b.n	8008f60 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	895b      	ldrh	r3, [r3, #10]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	899b      	ldrh	r3, [r3, #12]
 8008f0e:	fb02 f303 	mul.w	r3, r2, r3
 8008f12:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f14:	e019      	b.n	8008f4a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6979      	ldr	r1, [r7, #20]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7ff fc9d 	bl	800885a <get_fat>
 8008f20:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f28:	d101      	bne.n	8008f2e <dir_sdi+0x90>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e03c      	b.n	8008fa8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d904      	bls.n	8008f3e <dir_sdi+0xa0>
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d301      	bcc.n	8008f42 <dir_sdi+0xa4>
 8008f3e:	2302      	movs	r3, #2
 8008f40:	e032      	b.n	8008fa8 <dir_sdi+0x10a>
			ofs -= csz;
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d2e1      	bcs.n	8008f16 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008f52:	6979      	ldr	r1, [r7, #20]
 8008f54:	6938      	ldr	r0, [r7, #16]
 8008f56:	f7ff fc61 	bl	800881c <clust2sect>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	69db      	ldr	r3, [r3, #28]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d101      	bne.n	8008f72 <dir_sdi+0xd4>
 8008f6e:	2302      	movs	r3, #2
 8008f70:	e01a      	b.n	8008fa8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	69da      	ldr	r2, [r3, #28]
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	899b      	ldrh	r3, [r3, #12]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f82:	441a      	add	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	899b      	ldrh	r3, [r3, #12]
 8008f92:	461a      	mov	r2, r3
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f9a:	fb00 f202 	mul.w	r2, r0, r2
 8008f9e:	1a9b      	subs	r3, r3, r2
 8008fa0:	18ca      	adds	r2, r1, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	3320      	adds	r3, #32
 8008fc6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	69db      	ldr	r3, [r3, #28]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <dir_next+0x28>
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fd6:	d301      	bcc.n	8008fdc <dir_next+0x2c>
 8008fd8:	2304      	movs	r3, #4
 8008fda:	e0bb      	b.n	8009154 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	899b      	ldrh	r3, [r3, #12]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fe8:	fb01 f202 	mul.w	r2, r1, r2
 8008fec:	1a9b      	subs	r3, r3, r2
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f040 809d 	bne.w	800912e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	69db      	ldr	r3, [r3, #28]
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10b      	bne.n	800901e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	095b      	lsrs	r3, r3, #5
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	8912      	ldrh	r2, [r2, #8]
 800900e:	4293      	cmp	r3, r2
 8009010:	f0c0 808d 	bcc.w	800912e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	61da      	str	r2, [r3, #28]
 800901a:	2304      	movs	r3, #4
 800901c:	e09a      	b.n	8009154 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	899b      	ldrh	r3, [r3, #12]
 8009022:	461a      	mov	r2, r3
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	fbb3 f3f2 	udiv	r3, r3, r2
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	8952      	ldrh	r2, [r2, #10]
 800902e:	3a01      	subs	r2, #1
 8009030:	4013      	ands	r3, r2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d17b      	bne.n	800912e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	4619      	mov	r1, r3
 800903e:	4610      	mov	r0, r2
 8009040:	f7ff fc0b 	bl	800885a <get_fat>
 8009044:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d801      	bhi.n	8009050 <dir_next+0xa0>
 800904c:	2302      	movs	r3, #2
 800904e:	e081      	b.n	8009154 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009056:	d101      	bne.n	800905c <dir_next+0xac>
 8009058:	2301      	movs	r3, #1
 800905a:	e07b      	b.n	8009154 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	697a      	ldr	r2, [r7, #20]
 8009062:	429a      	cmp	r2, r3
 8009064:	d359      	bcc.n	800911a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d104      	bne.n	8009076 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	61da      	str	r2, [r3, #28]
 8009072:	2304      	movs	r3, #4
 8009074:	e06e      	b.n	8009154 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	4619      	mov	r1, r3
 800907e:	4610      	mov	r0, r2
 8009080:	f7ff fe3d 	bl	8008cfe <create_chain>
 8009084:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <dir_next+0xe0>
 800908c:	2307      	movs	r3, #7
 800908e:	e061      	b.n	8009154 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d101      	bne.n	800909a <dir_next+0xea>
 8009096:	2302      	movs	r3, #2
 8009098:	e05c      	b.n	8009154 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a0:	d101      	bne.n	80090a6 <dir_next+0xf6>
 80090a2:	2301      	movs	r3, #1
 80090a4:	e056      	b.n	8009154 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f7ff fad6 	bl	8008658 <sync_window>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <dir_next+0x106>
 80090b2:	2301      	movs	r3, #1
 80090b4:	e04e      	b.n	8009154 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	899b      	ldrh	r3, [r3, #12]
 80090c0:	461a      	mov	r2, r3
 80090c2:	2100      	movs	r1, #0
 80090c4:	f7ff f8ff 	bl	80082c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80090c8:	2300      	movs	r3, #0
 80090ca:	613b      	str	r3, [r7, #16]
 80090cc:	6979      	ldr	r1, [r7, #20]
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f7ff fba4 	bl	800881c <clust2sect>
 80090d4:	4602      	mov	r2, r0
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80090da:	e012      	b.n	8009102 <dir_next+0x152>
						fs->wflag = 1;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2201      	movs	r2, #1
 80090e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f7ff fab8 	bl	8008658 <sync_window>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <dir_next+0x142>
 80090ee:	2301      	movs	r3, #1
 80090f0:	e030      	b.n	8009154 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	3301      	adds	r3, #1
 80090f6:	613b      	str	r3, [r7, #16]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	635a      	str	r2, [r3, #52]	@ 0x34
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	895b      	ldrh	r3, [r3, #10]
 8009106:	461a      	mov	r2, r3
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	4293      	cmp	r3, r2
 800910c:	d3e6      	bcc.n	80090dc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	1ad2      	subs	r2, r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009120:	6979      	ldr	r1, [r7, #20]
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f7ff fb7a 	bl	800881c <clust2sect>
 8009128:	4602      	mov	r2, r0
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	899b      	ldrh	r3, [r3, #12]
 800913e:	461a      	mov	r2, r3
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	fbb3 f0f2 	udiv	r0, r3, r2
 8009146:	fb00 f202 	mul.w	r2, r0, r2
 800914a:	1a9b      	subs	r3, r3, r2
 800914c:	18ca      	adds	r2, r1, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3718      	adds	r7, #24
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800916c:	2100      	movs	r1, #0
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f7ff fe95 	bl	8008e9e <dir_sdi>
 8009174:	4603      	mov	r3, r0
 8009176:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009178:	7dfb      	ldrb	r3, [r7, #23]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d12b      	bne.n	80091d6 <dir_alloc+0x7a>
		n = 0;
 800917e:	2300      	movs	r3, #0
 8009180:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	4619      	mov	r1, r3
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f7ff faa9 	bl	80086e0 <move_window>
 800918e:	4603      	mov	r3, r0
 8009190:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009192:	7dfb      	ldrb	r3, [r7, #23]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d11d      	bne.n	80091d4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a1b      	ldr	r3, [r3, #32]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	2be5      	cmp	r3, #229	@ 0xe5
 80091a0:	d004      	beq.n	80091ac <dir_alloc+0x50>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d107      	bne.n	80091bc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	3301      	adds	r3, #1
 80091b0:	613b      	str	r3, [r7, #16]
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d102      	bne.n	80091c0 <dir_alloc+0x64>
 80091ba:	e00c      	b.n	80091d6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80091bc:	2300      	movs	r3, #0
 80091be:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80091c0:	2101      	movs	r1, #1
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7ff fef4 	bl	8008fb0 <dir_next>
 80091c8:	4603      	mov	r3, r0
 80091ca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d0d7      	beq.n	8009182 <dir_alloc+0x26>
 80091d2:	e000      	b.n	80091d6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80091d4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
 80091d8:	2b04      	cmp	r3, #4
 80091da:	d101      	bne.n	80091e0 <dir_alloc+0x84>
 80091dc:	2307      	movs	r3, #7
 80091de:	75fb      	strb	r3, [r7, #23]
	return res;
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	331a      	adds	r3, #26
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fe ffc1 	bl	8008180 <ld_word>
 80091fe:	4603      	mov	r3, r0
 8009200:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	2b03      	cmp	r3, #3
 8009208:	d109      	bne.n	800921e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	3314      	adds	r3, #20
 800920e:	4618      	mov	r0, r3
 8009210:	f7fe ffb6 	bl	8008180 <ld_word>
 8009214:	4603      	mov	r3, r0
 8009216:	041b      	lsls	r3, r3, #16
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	4313      	orrs	r3, r2
 800921c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800921e:	68fb      	ldr	r3, [r7, #12]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	331a      	adds	r3, #26
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	b292      	uxth	r2, r2
 800923c:	4611      	mov	r1, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f7fe ffd9 	bl	80081f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	2b03      	cmp	r3, #3
 800924a:	d109      	bne.n	8009260 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f103 0214 	add.w	r2, r3, #20
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	0c1b      	lsrs	r3, r3, #16
 8009256:	b29b      	uxth	r3, r3
 8009258:	4619      	mov	r1, r3
 800925a:	4610      	mov	r0, r2
 800925c:	f7fe ffcb 	bl	80081f6 <st_word>
	}
}
 8009260:	bf00      	nop
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009268:	b590      	push	{r4, r7, lr}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	331a      	adds	r3, #26
 8009276:	4618      	mov	r0, r3
 8009278:	f7fe ff82 	bl	8008180 <ld_word>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <cmp_lfn+0x1e>
 8009282:	2300      	movs	r3, #0
 8009284:	e059      	b.n	800933a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800928e:	1e5a      	subs	r2, r3, #1
 8009290:	4613      	mov	r3, r2
 8009292:	005b      	lsls	r3, r3, #1
 8009294:	4413      	add	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4413      	add	r3, r2
 800929a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800929c:	2301      	movs	r3, #1
 800929e:	81fb      	strh	r3, [r7, #14]
 80092a0:	2300      	movs	r3, #0
 80092a2:	613b      	str	r3, [r7, #16]
 80092a4:	e033      	b.n	800930e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80092a6:	4a27      	ldr	r2, [pc, #156]	@ (8009344 <cmp_lfn+0xdc>)
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	4413      	add	r3, r2
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	4413      	add	r3, r2
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fe ff63 	bl	8008180 <ld_word>
 80092ba:	4603      	mov	r3, r0
 80092bc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80092be:	89fb      	ldrh	r3, [r7, #14]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d01a      	beq.n	80092fa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	2bfe      	cmp	r3, #254	@ 0xfe
 80092c8:	d812      	bhi.n	80092f0 <cmp_lfn+0x88>
 80092ca:	89bb      	ldrh	r3, [r7, #12]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f001 fec1 	bl	800b054 <ff_wtoupper>
 80092d2:	4603      	mov	r3, r0
 80092d4:	461c      	mov	r4, r3
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	1c5a      	adds	r2, r3, #1
 80092da:	617a      	str	r2, [r7, #20]
 80092dc:	005b      	lsls	r3, r3, #1
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	4413      	add	r3, r2
 80092e2:	881b      	ldrh	r3, [r3, #0]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f001 feb5 	bl	800b054 <ff_wtoupper>
 80092ea:	4603      	mov	r3, r0
 80092ec:	429c      	cmp	r4, r3
 80092ee:	d001      	beq.n	80092f4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80092f0:	2300      	movs	r3, #0
 80092f2:	e022      	b.n	800933a <cmp_lfn+0xd2>
			}
			wc = uc;
 80092f4:	89bb      	ldrh	r3, [r7, #12]
 80092f6:	81fb      	strh	r3, [r7, #14]
 80092f8:	e006      	b.n	8009308 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80092fa:	89bb      	ldrh	r3, [r7, #12]
 80092fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009300:	4293      	cmp	r3, r2
 8009302:	d001      	beq.n	8009308 <cmp_lfn+0xa0>
 8009304:	2300      	movs	r3, #0
 8009306:	e018      	b.n	800933a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	3301      	adds	r3, #1
 800930c:	613b      	str	r3, [r7, #16]
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	2b0c      	cmp	r3, #12
 8009312:	d9c8      	bls.n	80092a6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00b      	beq.n	8009338 <cmp_lfn+0xd0>
 8009320:	89fb      	ldrh	r3, [r7, #14]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d008      	beq.n	8009338 <cmp_lfn+0xd0>
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	4413      	add	r3, r2
 800932e:	881b      	ldrh	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <cmp_lfn+0xd0>
 8009334:	2300      	movs	r3, #0
 8009336:	e000      	b.n	800933a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009338:	2301      	movs	r3, #1
}
 800933a:	4618      	mov	r0, r3
 800933c:	371c      	adds	r7, #28
 800933e:	46bd      	mov	sp, r7
 8009340:	bd90      	pop	{r4, r7, pc}
 8009342:	bf00      	nop
 8009344:	0800f7d0 	.word	0x0800f7d0

08009348 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b088      	sub	sp, #32
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	4611      	mov	r1, r2
 8009354:	461a      	mov	r2, r3
 8009356:	460b      	mov	r3, r1
 8009358:	71fb      	strb	r3, [r7, #7]
 800935a:	4613      	mov	r3, r2
 800935c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	330d      	adds	r3, #13
 8009362:	79ba      	ldrb	r2, [r7, #6]
 8009364:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	330b      	adds	r3, #11
 800936a:	220f      	movs	r2, #15
 800936c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	330c      	adds	r3, #12
 8009372:	2200      	movs	r2, #0
 8009374:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	331a      	adds	r3, #26
 800937a:	2100      	movs	r1, #0
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe ff3a 	bl	80081f6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009382:	79fb      	ldrb	r3, [r7, #7]
 8009384:	1e5a      	subs	r2, r3, #1
 8009386:	4613      	mov	r3, r2
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	4413      	add	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009392:	2300      	movs	r3, #0
 8009394:	82fb      	strh	r3, [r7, #22]
 8009396:	2300      	movs	r3, #0
 8009398:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800939a:	8afb      	ldrh	r3, [r7, #22]
 800939c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d007      	beq.n	80093b4 <put_lfn+0x6c>
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	1c5a      	adds	r2, r3, #1
 80093a8:	61fa      	str	r2, [r7, #28]
 80093aa:	005b      	lsls	r3, r3, #1
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	4413      	add	r3, r2
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80093b4:	4a17      	ldr	r2, [pc, #92]	@ (8009414 <put_lfn+0xcc>)
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	4413      	add	r3, r2
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	461a      	mov	r2, r3
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	4413      	add	r3, r2
 80093c2:	8afa      	ldrh	r2, [r7, #22]
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fe ff15 	bl	80081f6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80093cc:	8afb      	ldrh	r3, [r7, #22]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d102      	bne.n	80093d8 <put_lfn+0x90>
 80093d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80093d6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	3301      	adds	r3, #1
 80093dc:	61bb      	str	r3, [r7, #24]
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	2b0c      	cmp	r3, #12
 80093e2:	d9da      	bls.n	800939a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80093e4:	8afb      	ldrh	r3, [r7, #22]
 80093e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d006      	beq.n	80093fc <put_lfn+0xb4>
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	005b      	lsls	r3, r3, #1
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	4413      	add	r3, r2
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d103      	bne.n	8009404 <put_lfn+0xbc>
 80093fc:	79fb      	ldrb	r3, [r7, #7]
 80093fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009402:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	79fa      	ldrb	r2, [r7, #7]
 8009408:	701a      	strb	r2, [r3, #0]
}
 800940a:	bf00      	nop
 800940c:	3720      	adds	r7, #32
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	0800f7d0 	.word	0x0800f7d0

08009418 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b08c      	sub	sp, #48	@ 0x30
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009426:	220b      	movs	r2, #11
 8009428:	68b9      	ldr	r1, [r7, #8]
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f7fe ff2a 	bl	8008284 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	2b05      	cmp	r3, #5
 8009434:	d929      	bls.n	800948a <gen_numname+0x72>
		sr = seq;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800943a:	e020      	b.n	800947e <gen_numname+0x66>
			wc = *lfn++;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	1c9a      	adds	r2, r3, #2
 8009440:	607a      	str	r2, [r7, #4]
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8009446:	2300      	movs	r3, #0
 8009448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800944a:	e015      	b.n	8009478 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	005a      	lsls	r2, r3, #1
 8009450:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009452:	f003 0301 	and.w	r3, r3, #1
 8009456:	4413      	add	r3, r2
 8009458:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800945a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800945c:	085b      	lsrs	r3, r3, #1
 800945e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009466:	2b00      	cmp	r3, #0
 8009468:	d003      	beq.n	8009472 <gen_numname+0x5a>
 800946a:	69fa      	ldr	r2, [r7, #28]
 800946c:	4b30      	ldr	r3, [pc, #192]	@ (8009530 <gen_numname+0x118>)
 800946e:	4053      	eors	r3, r2
 8009470:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009474:	3301      	adds	r3, #1
 8009476:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947a:	2b0f      	cmp	r3, #15
 800947c:	d9e6      	bls.n	800944c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1da      	bne.n	800943c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800948a:	2307      	movs	r3, #7
 800948c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	b2db      	uxtb	r3, r3
 8009492:	f003 030f 	and.w	r3, r3, #15
 8009496:	b2db      	uxtb	r3, r3
 8009498:	3330      	adds	r3, #48	@ 0x30
 800949a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800949e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80094a2:	2b39      	cmp	r3, #57	@ 0x39
 80094a4:	d904      	bls.n	80094b0 <gen_numname+0x98>
 80094a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80094aa:	3307      	adds	r3, #7
 80094ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80094b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b2:	1e5a      	subs	r2, r3, #1
 80094b4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80094b6:	3330      	adds	r3, #48	@ 0x30
 80094b8:	443b      	add	r3, r7
 80094ba:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80094be:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	091b      	lsrs	r3, r3, #4
 80094c6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1df      	bne.n	800948e <gen_numname+0x76>
	ns[i] = '~';
 80094ce:	f107 0214 	add.w	r2, r7, #20
 80094d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d4:	4413      	add	r3, r2
 80094d6:	227e      	movs	r2, #126	@ 0x7e
 80094d8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80094da:	2300      	movs	r3, #0
 80094dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80094de:	e002      	b.n	80094e6 <gen_numname+0xce>
 80094e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e2:	3301      	adds	r3, #1
 80094e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80094e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d205      	bcs.n	80094fa <gen_numname+0xe2>
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f2:	4413      	add	r3, r2
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	2b20      	cmp	r3, #32
 80094f8:	d1f2      	bne.n	80094e0 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80094fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fc:	2b07      	cmp	r3, #7
 80094fe:	d807      	bhi.n	8009510 <gen_numname+0xf8>
 8009500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009506:	3330      	adds	r3, #48	@ 0x30
 8009508:	443b      	add	r3, r7
 800950a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800950e:	e000      	b.n	8009512 <gen_numname+0xfa>
 8009510:	2120      	movs	r1, #32
 8009512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009514:	1c5a      	adds	r2, r3, #1
 8009516:	627a      	str	r2, [r7, #36]	@ 0x24
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	4413      	add	r3, r2
 800951c:	460a      	mov	r2, r1
 800951e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009522:	2b07      	cmp	r3, #7
 8009524:	d9e9      	bls.n	80094fa <gen_numname+0xe2>
}
 8009526:	bf00      	nop
 8009528:	bf00      	nop
 800952a:	3730      	adds	r7, #48	@ 0x30
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	00011021 	.word	0x00011021

08009534 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009540:	230b      	movs	r3, #11
 8009542:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	b2da      	uxtb	r2, r3
 8009548:	0852      	lsrs	r2, r2, #1
 800954a:	01db      	lsls	r3, r3, #7
 800954c:	4313      	orrs	r3, r2
 800954e:	b2da      	uxtb	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	1c59      	adds	r1, r3, #1
 8009554:	6079      	str	r1, [r7, #4]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	4413      	add	r3, r2
 800955a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	3b01      	subs	r3, #1
 8009560:	60bb      	str	r3, [r7, #8]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1ed      	bne.n	8009544 <sum_sfn+0x10>
	return sum;
 8009568:	7bfb      	ldrb	r3, [r7, #15]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3714      	adds	r7, #20
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr

08009576 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b086      	sub	sp, #24
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009584:	2100      	movs	r1, #0
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7ff fc89 	bl	8008e9e <dir_sdi>
 800958c:	4603      	mov	r3, r0
 800958e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009590:	7dfb      	ldrb	r3, [r7, #23]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <dir_find+0x24>
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	e0a9      	b.n	80096ee <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800959a:	23ff      	movs	r3, #255	@ 0xff
 800959c:	753b      	strb	r3, [r7, #20]
 800959e:	7d3b      	ldrb	r3, [r7, #20]
 80095a0:	757b      	strb	r3, [r7, #21]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f04f 32ff 	mov.w	r2, #4294967295
 80095a8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	4619      	mov	r1, r3
 80095b0:	6938      	ldr	r0, [r7, #16]
 80095b2:	f7ff f895 	bl	80086e0 <move_window>
 80095b6:	4603      	mov	r3, r0
 80095b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f040 8090 	bne.w	80096e2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80095ca:	7dbb      	ldrb	r3, [r7, #22]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d102      	bne.n	80095d6 <dir_find+0x60>
 80095d0:	2304      	movs	r3, #4
 80095d2:	75fb      	strb	r3, [r7, #23]
 80095d4:	e08a      	b.n	80096ec <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	330b      	adds	r3, #11
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095e2:	73fb      	strb	r3, [r7, #15]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	7bfa      	ldrb	r2, [r7, #15]
 80095e8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80095ea:	7dbb      	ldrb	r3, [r7, #22]
 80095ec:	2be5      	cmp	r3, #229	@ 0xe5
 80095ee:	d007      	beq.n	8009600 <dir_find+0x8a>
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
 80095f2:	f003 0308 	and.w	r3, r3, #8
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d009      	beq.n	800960e <dir_find+0x98>
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
 80095fc:	2b0f      	cmp	r3, #15
 80095fe:	d006      	beq.n	800960e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009600:	23ff      	movs	r3, #255	@ 0xff
 8009602:	757b      	strb	r3, [r7, #21]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f04f 32ff 	mov.w	r2, #4294967295
 800960a:	631a      	str	r2, [r3, #48]	@ 0x30
 800960c:	e05e      	b.n	80096cc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800960e:	7bfb      	ldrb	r3, [r7, #15]
 8009610:	2b0f      	cmp	r3, #15
 8009612:	d136      	bne.n	8009682 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800961a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800961e:	2b00      	cmp	r3, #0
 8009620:	d154      	bne.n	80096cc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009622:	7dbb      	ldrb	r3, [r7, #22]
 8009624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00d      	beq.n	8009648 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	7b5b      	ldrb	r3, [r3, #13]
 8009632:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009634:	7dbb      	ldrb	r3, [r7, #22]
 8009636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800963a:	75bb      	strb	r3, [r7, #22]
 800963c:	7dbb      	ldrb	r3, [r7, #22]
 800963e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	695a      	ldr	r2, [r3, #20]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009648:	7dba      	ldrb	r2, [r7, #22]
 800964a:	7d7b      	ldrb	r3, [r7, #21]
 800964c:	429a      	cmp	r2, r3
 800964e:	d115      	bne.n	800967c <dir_find+0x106>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	330d      	adds	r3, #13
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	7d3a      	ldrb	r2, [r7, #20]
 800965a:	429a      	cmp	r2, r3
 800965c:	d10e      	bne.n	800967c <dir_find+0x106>
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	691a      	ldr	r2, [r3, #16]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	4619      	mov	r1, r3
 8009668:	4610      	mov	r0, r2
 800966a:	f7ff fdfd 	bl	8009268 <cmp_lfn>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d003      	beq.n	800967c <dir_find+0x106>
 8009674:	7d7b      	ldrb	r3, [r7, #21]
 8009676:	3b01      	subs	r3, #1
 8009678:	b2db      	uxtb	r3, r3
 800967a:	e000      	b.n	800967e <dir_find+0x108>
 800967c:	23ff      	movs	r3, #255	@ 0xff
 800967e:	757b      	strb	r3, [r7, #21]
 8009680:	e024      	b.n	80096cc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009682:	7d7b      	ldrb	r3, [r7, #21]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d109      	bne.n	800969c <dir_find+0x126>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	4618      	mov	r0, r3
 800968e:	f7ff ff51 	bl	8009534 <sum_sfn>
 8009692:	4603      	mov	r3, r0
 8009694:	461a      	mov	r2, r3
 8009696:	7d3b      	ldrb	r3, [r7, #20]
 8009698:	4293      	cmp	r3, r2
 800969a:	d024      	beq.n	80096e6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10a      	bne.n	80096c0 <dir_find+0x14a>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a18      	ldr	r0, [r3, #32]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	3324      	adds	r3, #36	@ 0x24
 80096b2:	220b      	movs	r2, #11
 80096b4:	4619      	mov	r1, r3
 80096b6:	f7fe fe21 	bl	80082fc <mem_cmp>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d014      	beq.n	80096ea <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80096c0:	23ff      	movs	r3, #255	@ 0xff
 80096c2:	757b      	strb	r3, [r7, #21]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f04f 32ff 	mov.w	r2, #4294967295
 80096ca:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80096cc:	2100      	movs	r1, #0
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7ff fc6e 	bl	8008fb0 <dir_next>
 80096d4:	4603      	mov	r3, r0
 80096d6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f43f af65 	beq.w	80095aa <dir_find+0x34>
 80096e0:	e004      	b.n	80096ec <dir_find+0x176>
		if (res != FR_OK) break;
 80096e2:	bf00      	nop
 80096e4:	e002      	b.n	80096ec <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80096e6:	bf00      	nop
 80096e8:	e000      	b.n	80096ec <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80096ea:	bf00      	nop

	return res;
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b08c      	sub	sp, #48	@ 0x30
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800970c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <dir_register+0x20>
 8009714:	2306      	movs	r3, #6
 8009716:	e0e0      	b.n	80098da <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009718:	2300      	movs	r3, #0
 800971a:	627b      	str	r3, [r7, #36]	@ 0x24
 800971c:	e002      	b.n	8009724 <dir_register+0x2c>
 800971e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009720:	3301      	adds	r3, #1
 8009722:	627b      	str	r3, [r7, #36]	@ 0x24
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	691a      	ldr	r2, [r3, #16]
 8009728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972a:	005b      	lsls	r3, r3, #1
 800972c:	4413      	add	r3, r2
 800972e:	881b      	ldrh	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1f4      	bne.n	800971e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800973a:	f107 030c 	add.w	r3, r7, #12
 800973e:	220c      	movs	r2, #12
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe fd9f 	bl	8008284 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	d032      	beq.n	80097b6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2240      	movs	r2, #64	@ 0x40
 8009754:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8009758:	2301      	movs	r3, #1
 800975a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800975c:	e016      	b.n	800978c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	691a      	ldr	r2, [r3, #16]
 8009768:	f107 010c 	add.w	r1, r7, #12
 800976c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976e:	f7ff fe53 	bl	8009418 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7ff feff 	bl	8009576 <dir_find>
 8009778:	4603      	mov	r3, r0
 800977a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800977e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009782:	2b00      	cmp	r3, #0
 8009784:	d106      	bne.n	8009794 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009788:	3301      	adds	r3, #1
 800978a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800978c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800978e:	2b63      	cmp	r3, #99	@ 0x63
 8009790:	d9e5      	bls.n	800975e <dir_register+0x66>
 8009792:	e000      	b.n	8009796 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009794:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009798:	2b64      	cmp	r3, #100	@ 0x64
 800979a:	d101      	bne.n	80097a0 <dir_register+0xa8>
 800979c:	2307      	movs	r3, #7
 800979e:	e09c      	b.n	80098da <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80097a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80097a4:	2b04      	cmp	r3, #4
 80097a6:	d002      	beq.n	80097ae <dir_register+0xb6>
 80097a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80097ac:	e095      	b.n	80098da <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80097ae:	7dfa      	ldrb	r2, [r7, #23]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	f003 0302 	and.w	r3, r3, #2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d007      	beq.n	80097d0 <dir_register+0xd8>
 80097c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c2:	330c      	adds	r3, #12
 80097c4:	4a47      	ldr	r2, [pc, #284]	@ (80098e4 <dir_register+0x1ec>)
 80097c6:	fba2 2303 	umull	r2, r3, r2, r3
 80097ca:	089b      	lsrs	r3, r3, #2
 80097cc:	3301      	adds	r3, #1
 80097ce:	e000      	b.n	80097d2 <dir_register+0xda>
 80097d0:	2301      	movs	r3, #1
 80097d2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80097d4:	6a39      	ldr	r1, [r7, #32]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7ff fcc0 	bl	800915c <dir_alloc>
 80097dc:	4603      	mov	r3, r0
 80097de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80097e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d148      	bne.n	800987c <dir_register+0x184>
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	3b01      	subs	r3, #1
 80097ee:	623b      	str	r3, [r7, #32]
 80097f0:	6a3b      	ldr	r3, [r7, #32]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d042      	beq.n	800987c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	695a      	ldr	r2, [r3, #20]
 80097fa:	6a3b      	ldr	r3, [r7, #32]
 80097fc:	015b      	lsls	r3, r3, #5
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	4619      	mov	r1, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7ff fb4b 	bl	8008e9e <dir_sdi>
 8009808:	4603      	mov	r3, r0
 800980a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800980e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009812:	2b00      	cmp	r3, #0
 8009814:	d132      	bne.n	800987c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	3324      	adds	r3, #36	@ 0x24
 800981a:	4618      	mov	r0, r3
 800981c:	f7ff fe8a 	bl	8009534 <sum_sfn>
 8009820:	4603      	mov	r3, r0
 8009822:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	69db      	ldr	r3, [r3, #28]
 8009828:	4619      	mov	r1, r3
 800982a:	69f8      	ldr	r0, [r7, #28]
 800982c:	f7fe ff58 	bl	80086e0 <move_window>
 8009830:	4603      	mov	r3, r0
 8009832:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8009836:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800983a:	2b00      	cmp	r3, #0
 800983c:	d11d      	bne.n	800987a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	6918      	ldr	r0, [r3, #16]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a19      	ldr	r1, [r3, #32]
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	b2da      	uxtb	r2, r3
 800984a:	7efb      	ldrb	r3, [r7, #27]
 800984c:	f7ff fd7c 	bl	8009348 <put_lfn>
				fs->wflag = 1;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	2201      	movs	r2, #1
 8009854:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009856:	2100      	movs	r1, #0
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7ff fba9 	bl	8008fb0 <dir_next>
 800985e:	4603      	mov	r3, r0
 8009860:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8009864:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009868:	2b00      	cmp	r3, #0
 800986a:	d107      	bne.n	800987c <dir_register+0x184>
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	3b01      	subs	r3, #1
 8009870:	623b      	str	r3, [r7, #32]
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1d5      	bne.n	8009824 <dir_register+0x12c>
 8009878:	e000      	b.n	800987c <dir_register+0x184>
				if (res != FR_OK) break;
 800987a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800987c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009880:	2b00      	cmp	r3, #0
 8009882:	d128      	bne.n	80098d6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	69db      	ldr	r3, [r3, #28]
 8009888:	4619      	mov	r1, r3
 800988a:	69f8      	ldr	r0, [r7, #28]
 800988c:	f7fe ff28 	bl	80086e0 <move_window>
 8009890:	4603      	mov	r3, r0
 8009892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8009896:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800989a:	2b00      	cmp	r3, #0
 800989c:	d11b      	bne.n	80098d6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	2220      	movs	r2, #32
 80098a4:	2100      	movs	r1, #0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe fd0d 	bl	80082c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a18      	ldr	r0, [r3, #32]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3324      	adds	r3, #36	@ 0x24
 80098b4:	220b      	movs	r2, #11
 80098b6:	4619      	mov	r1, r3
 80098b8:	f7fe fce4 	bl	8008284 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	330c      	adds	r3, #12
 80098c8:	f002 0218 	and.w	r2, r2, #24
 80098cc:	b2d2      	uxtb	r2, r2
 80098ce:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	2201      	movs	r2, #1
 80098d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80098d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3730      	adds	r7, #48	@ 0x30
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	4ec4ec4f 	.word	0x4ec4ec4f

080098e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b08a      	sub	sp, #40	@ 0x28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	613b      	str	r3, [r7, #16]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	2300      	movs	r3, #0
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	61ba      	str	r2, [r7, #24]
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	4413      	add	r3, r2
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009916:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009918:	2b1f      	cmp	r3, #31
 800991a:	d940      	bls.n	800999e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800991c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800991e:	2b2f      	cmp	r3, #47	@ 0x2f
 8009920:	d006      	beq.n	8009930 <create_name+0x48>
 8009922:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009924:	2b5c      	cmp	r3, #92	@ 0x5c
 8009926:	d110      	bne.n	800994a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009928:	e002      	b.n	8009930 <create_name+0x48>
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	3301      	adds	r3, #1
 800992e:	61bb      	str	r3, [r7, #24]
 8009930:	693a      	ldr	r2, [r7, #16]
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	4413      	add	r3, r2
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2b2f      	cmp	r3, #47	@ 0x2f
 800993a:	d0f6      	beq.n	800992a <create_name+0x42>
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	4413      	add	r3, r2
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	2b5c      	cmp	r3, #92	@ 0x5c
 8009946:	d0f0      	beq.n	800992a <create_name+0x42>
			break;
 8009948:	e02a      	b.n	80099a0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	2bfe      	cmp	r3, #254	@ 0xfe
 800994e:	d901      	bls.n	8009954 <create_name+0x6c>
 8009950:	2306      	movs	r3, #6
 8009952:	e17d      	b.n	8009c50 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009954:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009956:	b2db      	uxtb	r3, r3
 8009958:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800995a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800995c:	2101      	movs	r1, #1
 800995e:	4618      	mov	r0, r3
 8009960:	f001 fb3c 	bl	800afdc <ff_convert>
 8009964:	4603      	mov	r3, r0
 8009966:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009968:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <create_name+0x8a>
 800996e:	2306      	movs	r3, #6
 8009970:	e16e      	b.n	8009c50 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009972:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009974:	2b7f      	cmp	r3, #127	@ 0x7f
 8009976:	d809      	bhi.n	800998c <create_name+0xa4>
 8009978:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800997a:	4619      	mov	r1, r3
 800997c:	488d      	ldr	r0, [pc, #564]	@ (8009bb4 <create_name+0x2cc>)
 800997e:	f7fe fce4 	bl	800834a <chk_chr>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <create_name+0xa4>
 8009988:	2306      	movs	r3, #6
 800998a:	e161      	b.n	8009c50 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	617a      	str	r2, [r7, #20]
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	4413      	add	r3, r2
 8009998:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800999a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800999c:	e7b4      	b.n	8009908 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800999e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	441a      	add	r2, r3
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80099aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099ac:	2b1f      	cmp	r3, #31
 80099ae:	d801      	bhi.n	80099b4 <create_name+0xcc>
 80099b0:	2304      	movs	r3, #4
 80099b2:	e000      	b.n	80099b6 <create_name+0xce>
 80099b4:	2300      	movs	r3, #0
 80099b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80099ba:	e011      	b.n	80099e0 <create_name+0xf8>
		w = lfn[di - 1];
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80099c2:	4413      	add	r3, r2
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	4413      	add	r3, r2
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80099ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099d0:	2b20      	cmp	r3, #32
 80099d2:	d002      	beq.n	80099da <create_name+0xf2>
 80099d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80099d8:	d106      	bne.n	80099e8 <create_name+0x100>
		di--;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	3b01      	subs	r3, #1
 80099de:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1ea      	bne.n	80099bc <create_name+0xd4>
 80099e6:	e000      	b.n	80099ea <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80099e8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	4413      	add	r3, r2
 80099f2:	2200      	movs	r2, #0
 80099f4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <create_name+0x118>
 80099fc:	2306      	movs	r3, #6
 80099fe:	e127      	b.n	8009c50 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	3324      	adds	r3, #36	@ 0x24
 8009a04:	220b      	movs	r2, #11
 8009a06:	2120      	movs	r1, #32
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fe fc5c 	bl	80082c6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61bb      	str	r3, [r7, #24]
 8009a12:	e002      	b.n	8009a1a <create_name+0x132>
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	3301      	adds	r3, #1
 8009a18:	61bb      	str	r3, [r7, #24]
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	005b      	lsls	r3, r3, #1
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	4413      	add	r3, r2
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	2b20      	cmp	r3, #32
 8009a26:	d0f5      	beq.n	8009a14 <create_name+0x12c>
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	005b      	lsls	r3, r3, #1
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a34:	d0ee      	beq.n	8009a14 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d009      	beq.n	8009a50 <create_name+0x168>
 8009a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a40:	f043 0303 	orr.w	r3, r3, #3
 8009a44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009a48:	e002      	b.n	8009a50 <create_name+0x168>
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	617b      	str	r3, [r7, #20]
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d009      	beq.n	8009a6a <create_name+0x182>
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009a5c:	4413      	add	r3, r2
 8009a5e:	005b      	lsls	r3, r3, #1
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	4413      	add	r3, r2
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a68:	d1ef      	bne.n	8009a4a <create_name+0x162>

	i = b = 0; ni = 8;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009a70:	2300      	movs	r3, #0
 8009a72:	623b      	str	r3, [r7, #32]
 8009a74:	2308      	movs	r3, #8
 8009a76:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	1c5a      	adds	r2, r3, #1
 8009a7c:	61ba      	str	r2, [r7, #24]
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	4413      	add	r3, r2
 8009a84:	881b      	ldrh	r3, [r3, #0]
 8009a86:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009a88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 8090 	beq.w	8009bb0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009a90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a92:	2b20      	cmp	r3, #32
 8009a94:	d006      	beq.n	8009aa4 <create_name+0x1bc>
 8009a96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a98:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a9a:	d10a      	bne.n	8009ab2 <create_name+0x1ca>
 8009a9c:	69ba      	ldr	r2, [r7, #24]
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d006      	beq.n	8009ab2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009aa8:	f043 0303 	orr.w	r3, r3, #3
 8009aac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009ab0:	e07d      	b.n	8009bae <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009ab2:	6a3a      	ldr	r2, [r7, #32]
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d203      	bcs.n	8009ac2 <create_name+0x1da>
 8009aba:	69ba      	ldr	r2, [r7, #24]
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d123      	bne.n	8009b0a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	2b0b      	cmp	r3, #11
 8009ac6:	d106      	bne.n	8009ad6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009acc:	f043 0303 	orr.w	r3, r3, #3
 8009ad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009ad4:	e075      	b.n	8009bc2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d005      	beq.n	8009aea <create_name+0x202>
 8009ade:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ae2:	f043 0303 	orr.w	r3, r3, #3
 8009ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8009aea:	69ba      	ldr	r2, [r7, #24]
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d866      	bhi.n	8009bc0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	61bb      	str	r3, [r7, #24]
 8009af6:	2308      	movs	r3, #8
 8009af8:	623b      	str	r3, [r7, #32]
 8009afa:	230b      	movs	r3, #11
 8009afc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009afe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009b08:	e051      	b.n	8009bae <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009b0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b0e:	d914      	bls.n	8009b3a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009b10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b12:	2100      	movs	r1, #0
 8009b14:	4618      	mov	r0, r3
 8009b16:	f001 fa61 	bl	800afdc <ff_convert>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009b1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d004      	beq.n	8009b2e <create_name+0x246>
 8009b24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b26:	3b80      	subs	r3, #128	@ 0x80
 8009b28:	4a23      	ldr	r2, [pc, #140]	@ (8009bb8 <create_name+0x2d0>)
 8009b2a:	5cd3      	ldrb	r3, [r2, r3]
 8009b2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b32:	f043 0302 	orr.w	r3, r3, #2
 8009b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009b3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d007      	beq.n	8009b50 <create_name+0x268>
 8009b40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b42:	4619      	mov	r1, r3
 8009b44:	481d      	ldr	r0, [pc, #116]	@ (8009bbc <create_name+0x2d4>)
 8009b46:	f7fe fc00 	bl	800834a <chk_chr>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d008      	beq.n	8009b62 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009b50:	235f      	movs	r3, #95	@ 0x5f
 8009b52:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009b54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b58:	f043 0303 	orr.w	r3, r3, #3
 8009b5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009b60:	e01b      	b.n	8009b9a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009b62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b64:	2b40      	cmp	r3, #64	@ 0x40
 8009b66:	d909      	bls.n	8009b7c <create_name+0x294>
 8009b68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b6a:	2b5a      	cmp	r3, #90	@ 0x5a
 8009b6c:	d806      	bhi.n	8009b7c <create_name+0x294>
					b |= 2;
 8009b6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009b72:	f043 0302 	orr.w	r3, r3, #2
 8009b76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009b7a:	e00e      	b.n	8009b9a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009b7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b7e:	2b60      	cmp	r3, #96	@ 0x60
 8009b80:	d90b      	bls.n	8009b9a <create_name+0x2b2>
 8009b82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b84:	2b7a      	cmp	r3, #122	@ 0x7a
 8009b86:	d808      	bhi.n	8009b9a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009b88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009b8c:	f043 0301 	orr.w	r3, r3, #1
 8009b90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009b94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b96:	3b20      	subs	r3, #32
 8009b98:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	623a      	str	r2, [r7, #32]
 8009ba0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009ba2:	b2d1      	uxtb	r1, r2
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	460a      	mov	r2, r1
 8009baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009bae:	e763      	b.n	8009a78 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009bb0:	bf00      	nop
 8009bb2:	e006      	b.n	8009bc2 <create_name+0x2da>
 8009bb4:	0800f6e8 	.word	0x0800f6e8
 8009bb8:	0800f750 	.word	0x0800f750
 8009bbc:	0800f6f4 	.word	0x0800f6f4
			if (si > di) break;			/* No extension */
 8009bc0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009bc8:	2be5      	cmp	r3, #229	@ 0xe5
 8009bca:	d103      	bne.n	8009bd4 <create_name+0x2ec>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2205      	movs	r2, #5
 8009bd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	2b08      	cmp	r3, #8
 8009bd8:	d104      	bne.n	8009be4 <create_name+0x2fc>
 8009bda:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009be4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009be8:	f003 030c 	and.w	r3, r3, #12
 8009bec:	2b0c      	cmp	r3, #12
 8009bee:	d005      	beq.n	8009bfc <create_name+0x314>
 8009bf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009bf4:	f003 0303 	and.w	r3, r3, #3
 8009bf8:	2b03      	cmp	r3, #3
 8009bfa:	d105      	bne.n	8009c08 <create_name+0x320>
 8009bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c00:	f043 0302 	orr.w	r3, r3, #2
 8009c04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c0c:	f003 0302 	and.w	r3, r3, #2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d117      	bne.n	8009c44 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009c14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009c18:	f003 0303 	and.w	r3, r3, #3
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d105      	bne.n	8009c2c <create_name+0x344>
 8009c20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c24:	f043 0310 	orr.w	r3, r3, #16
 8009c28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009c2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009c30:	f003 030c 	and.w	r3, r3, #12
 8009c34:	2b04      	cmp	r3, #4
 8009c36:	d105      	bne.n	8009c44 <create_name+0x35c>
 8009c38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c3c:	f043 0308 	orr.w	r3, r3, #8
 8009c40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009c4a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8009c4e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3728      	adds	r7, #40	@ 0x28
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009c6c:	e002      	b.n	8009c74 <follow_path+0x1c>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	3301      	adds	r3, #1
 8009c72:	603b      	str	r3, [r7, #0]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b2f      	cmp	r3, #47	@ 0x2f
 8009c7a:	d0f8      	beq.n	8009c6e <follow_path+0x16>
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	2b5c      	cmp	r3, #92	@ 0x5c
 8009c82:	d0f4      	beq.n	8009c6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	2200      	movs	r2, #0
 8009c88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	2b1f      	cmp	r3, #31
 8009c90:	d80a      	bhi.n	8009ca8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2280      	movs	r2, #128	@ 0x80
 8009c96:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7ff f8fe 	bl	8008e9e <dir_sdi>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]
 8009ca6:	e048      	b.n	8009d3a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ca8:	463b      	mov	r3, r7
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7ff fe1b 	bl	80098e8 <create_name>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009cb6:	7dfb      	ldrb	r3, [r7, #23]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d139      	bne.n	8009d30 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff fc5a 	bl	8009576 <dir_find>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009ccc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00a      	beq.n	8009cea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
 8009cd6:	2b04      	cmp	r3, #4
 8009cd8:	d12c      	bne.n	8009d34 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009cda:	7afb      	ldrb	r3, [r7, #11]
 8009cdc:	f003 0304 	and.w	r3, r3, #4
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d127      	bne.n	8009d34 <follow_path+0xdc>
 8009ce4:	2305      	movs	r3, #5
 8009ce6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009ce8:	e024      	b.n	8009d34 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009cea:	7afb      	ldrb	r3, [r7, #11]
 8009cec:	f003 0304 	and.w	r3, r3, #4
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d121      	bne.n	8009d38 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	799b      	ldrb	r3, [r3, #6]
 8009cf8:	f003 0310 	and.w	r3, r3, #16
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d102      	bne.n	8009d06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009d00:	2305      	movs	r3, #5
 8009d02:	75fb      	strb	r3, [r7, #23]
 8009d04:	e019      	b.n	8009d3a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	8992      	ldrh	r2, [r2, #12]
 8009d14:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d18:	fb00 f202 	mul.w	r2, r0, r2
 8009d1c:	1a9b      	subs	r3, r3, r2
 8009d1e:	440b      	add	r3, r1
 8009d20:	4619      	mov	r1, r3
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f7ff fa61 	bl	80091ea <ld_clust>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009d2e:	e7bb      	b.n	8009ca8 <follow_path+0x50>
			if (res != FR_OK) break;
 8009d30:	bf00      	nop
 8009d32:	e002      	b.n	8009d3a <follow_path+0xe2>
				break;
 8009d34:	bf00      	nop
 8009d36:	e000      	b.n	8009d3a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009d38:	bf00      	nop
			}
		}
	}

	return res;
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d50:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d031      	beq.n	8009dbe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	617b      	str	r3, [r7, #20]
 8009d60:	e002      	b.n	8009d68 <get_ldnumber+0x24>
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	3301      	adds	r3, #1
 8009d66:	617b      	str	r3, [r7, #20]
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	2b1f      	cmp	r3, #31
 8009d6e:	d903      	bls.n	8009d78 <get_ldnumber+0x34>
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2b3a      	cmp	r3, #58	@ 0x3a
 8009d76:	d1f4      	bne.n	8009d62 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b3a      	cmp	r3, #58	@ 0x3a
 8009d7e:	d11c      	bne.n	8009dba <get_ldnumber+0x76>
			tp = *path;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	60fa      	str	r2, [r7, #12]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	3b30      	subs	r3, #48	@ 0x30
 8009d90:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2b09      	cmp	r3, #9
 8009d96:	d80e      	bhi.n	8009db6 <get_ldnumber+0x72>
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d10a      	bne.n	8009db6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d107      	bne.n	8009db6 <get_ldnumber+0x72>
					vol = (int)i;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	3301      	adds	r3, #1
 8009dae:	617b      	str	r3, [r7, #20]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	e002      	b.n	8009dc0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009dba:	2300      	movs	r3, #0
 8009dbc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009dbe:	693b      	ldr	r3, [r7, #16]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	371c      	adds	r7, #28
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	70da      	strb	r2, [r3, #3]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f04f 32ff 	mov.w	r2, #4294967295
 8009de2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7fe fc7a 	bl	80086e0 <move_window>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <check_fs+0x2a>
 8009df2:	2304      	movs	r3, #4
 8009df4:	e038      	b.n	8009e68 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	3338      	adds	r3, #56	@ 0x38
 8009dfa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fe f9be 	bl	8008180 <ld_word>
 8009e04:	4603      	mov	r3, r0
 8009e06:	461a      	mov	r2, r3
 8009e08:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d001      	beq.n	8009e14 <check_fs+0x48>
 8009e10:	2303      	movs	r3, #3
 8009e12:	e029      	b.n	8009e68 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009e1a:	2be9      	cmp	r3, #233	@ 0xe9
 8009e1c:	d009      	beq.n	8009e32 <check_fs+0x66>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009e24:	2beb      	cmp	r3, #235	@ 0xeb
 8009e26:	d11e      	bne.n	8009e66 <check_fs+0x9a>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009e2e:	2b90      	cmp	r3, #144	@ 0x90
 8009e30:	d119      	bne.n	8009e66 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	3338      	adds	r3, #56	@ 0x38
 8009e36:	3336      	adds	r3, #54	@ 0x36
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7fe f9b9 	bl	80081b0 <ld_dword>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009e44:	4a0a      	ldr	r2, [pc, #40]	@ (8009e70 <check_fs+0xa4>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d101      	bne.n	8009e4e <check_fs+0x82>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e00c      	b.n	8009e68 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	3338      	adds	r3, #56	@ 0x38
 8009e52:	3352      	adds	r3, #82	@ 0x52
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7fe f9ab 	bl	80081b0 <ld_dword>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	4a05      	ldr	r2, [pc, #20]	@ (8009e74 <check_fs+0xa8>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d101      	bne.n	8009e66 <check_fs+0x9a>
 8009e62:	2300      	movs	r3, #0
 8009e64:	e000      	b.n	8009e68 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009e66:	2302      	movs	r3, #2
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	00544146 	.word	0x00544146
 8009e74:	33544146 	.word	0x33544146

08009e78 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b096      	sub	sp, #88	@ 0x58
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	4613      	mov	r3, r2
 8009e84:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f7ff ff59 	bl	8009d44 <get_ldnumber>
 8009e92:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	da01      	bge.n	8009e9e <find_volume+0x26>
 8009e9a:	230b      	movs	r3, #11
 8009e9c:	e265      	b.n	800a36a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009e9e:	4a9f      	ldr	r2, [pc, #636]	@ (800a11c <find_volume+0x2a4>)
 8009ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <find_volume+0x3a>
 8009eae:	230c      	movs	r3, #12
 8009eb0:	e25b      	b.n	800a36a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009eb6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009eb8:	79fb      	ldrb	r3, [r7, #7]
 8009eba:	f023 0301 	bic.w	r3, r3, #1
 8009ebe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d01a      	beq.n	8009efe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eca:	785b      	ldrb	r3, [r3, #1]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fe f8b9 	bl	8008044 <disk_status>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009ed8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10c      	bne.n	8009efe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009ee4:	79fb      	ldrb	r3, [r7, #7]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d007      	beq.n	8009efa <find_volume+0x82>
 8009eea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009eee:	f003 0304 	and.w	r3, r3, #4
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009ef6:	230a      	movs	r3, #10
 8009ef8:	e237      	b.n	800a36a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8009efa:	2300      	movs	r3, #0
 8009efc:	e235      	b.n	800a36a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f00:	2200      	movs	r2, #0
 8009f02:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0e:	785b      	ldrb	r3, [r3, #1]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fe f8b1 	bl	8008078 <disk_initialize>
 8009f16:	4603      	mov	r3, r0
 8009f18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009f1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f20:	f003 0301 	and.w	r3, r3, #1
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009f28:	2303      	movs	r3, #3
 8009f2a:	e21e      	b.n	800a36a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009f2c:	79fb      	ldrb	r3, [r7, #7]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d007      	beq.n	8009f42 <find_volume+0xca>
 8009f32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f36:	f003 0304 	and.w	r3, r3, #4
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009f3e:	230a      	movs	r3, #10
 8009f40:	e213      	b.n	800a36a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f44:	7858      	ldrb	r0, [r3, #1]
 8009f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f48:	330c      	adds	r3, #12
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	2102      	movs	r1, #2
 8009f4e:	f7fe f8f9 	bl	8008144 <disk_ioctl>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <find_volume+0xe4>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e206      	b.n	800a36a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5e:	899b      	ldrh	r3, [r3, #12]
 8009f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f64:	d80d      	bhi.n	8009f82 <find_volume+0x10a>
 8009f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f68:	899b      	ldrh	r3, [r3, #12]
 8009f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f6e:	d308      	bcc.n	8009f82 <find_volume+0x10a>
 8009f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f72:	899b      	ldrh	r3, [r3, #12]
 8009f74:	461a      	mov	r2, r3
 8009f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f78:	899b      	ldrh	r3, [r3, #12]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d001      	beq.n	8009f86 <find_volume+0x10e>
 8009f82:	2301      	movs	r3, #1
 8009f84:	e1f1      	b.n	800a36a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009f86:	2300      	movs	r3, #0
 8009f88:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009f8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009f8c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009f8e:	f7ff ff1d 	bl	8009dcc <check_fs>
 8009f92:	4603      	mov	r3, r0
 8009f94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009f98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d149      	bne.n	800a034 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fa4:	e01e      	b.n	8009fe4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fae:	011b      	lsls	r3, r3, #4
 8009fb0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009fb4:	4413      	add	r3, r2
 8009fb6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fba:	3304      	adds	r3, #4
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d006      	beq.n	8009fd0 <find_volume+0x158>
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fe f8f2 	bl	80081b0 <ld_dword>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	e000      	b.n	8009fd2 <find_volume+0x15a>
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	3358      	adds	r3, #88	@ 0x58
 8009fd8:	443b      	add	r3, r7
 8009fda:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d9dd      	bls.n	8009fa6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009fea:	2300      	movs	r3, #0
 8009fec:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <find_volume+0x182>
 8009ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	3358      	adds	r3, #88	@ 0x58
 800a000:	443b      	add	r3, r7
 800a002:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a006:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <find_volume+0x1a2>
 800a00e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a010:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a012:	f7ff fedb 	bl	8009dcc <check_fs>
 800a016:	4603      	mov	r3, r0
 800a018:	e000      	b.n	800a01c <find_volume+0x1a4>
 800a01a:	2303      	movs	r3, #3
 800a01c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a020:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a024:	2b01      	cmp	r3, #1
 800a026:	d905      	bls.n	800a034 <find_volume+0x1bc>
 800a028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a02a:	3301      	adds	r3, #1
 800a02c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a02e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a030:	2b03      	cmp	r3, #3
 800a032:	d9e2      	bls.n	8009ffa <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a034:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a038:	2b04      	cmp	r3, #4
 800a03a:	d101      	bne.n	800a040 <find_volume+0x1c8>
 800a03c:	2301      	movs	r3, #1
 800a03e:	e194      	b.n	800a36a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a040:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a044:	2b01      	cmp	r3, #1
 800a046:	d901      	bls.n	800a04c <find_volume+0x1d4>
 800a048:	230d      	movs	r3, #13
 800a04a:	e18e      	b.n	800a36a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04e:	3338      	adds	r3, #56	@ 0x38
 800a050:	330b      	adds	r3, #11
 800a052:	4618      	mov	r0, r3
 800a054:	f7fe f894 	bl	8008180 <ld_word>
 800a058:	4603      	mov	r3, r0
 800a05a:	461a      	mov	r2, r3
 800a05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05e:	899b      	ldrh	r3, [r3, #12]
 800a060:	429a      	cmp	r2, r3
 800a062:	d001      	beq.n	800a068 <find_volume+0x1f0>
 800a064:	230d      	movs	r3, #13
 800a066:	e180      	b.n	800a36a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06a:	3338      	adds	r3, #56	@ 0x38
 800a06c:	3316      	adds	r3, #22
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fe f886 	bl	8008180 <ld_word>
 800a074:	4603      	mov	r3, r0
 800a076:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d106      	bne.n	800a08c <find_volume+0x214>
 800a07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a080:	3338      	adds	r3, #56	@ 0x38
 800a082:	3324      	adds	r3, #36	@ 0x24
 800a084:	4618      	mov	r0, r3
 800a086:	f7fe f893 	bl	80081b0 <ld_dword>
 800a08a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a090:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a094:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800a098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09e:	789b      	ldrb	r3, [r3, #2]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d005      	beq.n	800a0b0 <find_volume+0x238>
 800a0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a6:	789b      	ldrb	r3, [r3, #2]
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d001      	beq.n	800a0b0 <find_volume+0x238>
 800a0ac:	230d      	movs	r3, #13
 800a0ae:	e15c      	b.n	800a36a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b2:	789b      	ldrb	r3, [r3, #2]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0b8:	fb02 f303 	mul.w	r3, r2, r3
 800a0bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0cc:	895b      	ldrh	r3, [r3, #10]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d008      	beq.n	800a0e4 <find_volume+0x26c>
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d4:	895b      	ldrh	r3, [r3, #10]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0da:	895b      	ldrh	r3, [r3, #10]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	4013      	ands	r3, r2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <find_volume+0x270>
 800a0e4:	230d      	movs	r3, #13
 800a0e6:	e140      	b.n	800a36a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ea:	3338      	adds	r3, #56	@ 0x38
 800a0ec:	3311      	adds	r3, #17
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fe f846 	bl	8008180 <ld_word>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fe:	891b      	ldrh	r3, [r3, #8]
 800a100:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a102:	8992      	ldrh	r2, [r2, #12]
 800a104:	0952      	lsrs	r2, r2, #5
 800a106:	b292      	uxth	r2, r2
 800a108:	fbb3 f1f2 	udiv	r1, r3, r2
 800a10c:	fb01 f202 	mul.w	r2, r1, r2
 800a110:	1a9b      	subs	r3, r3, r2
 800a112:	b29b      	uxth	r3, r3
 800a114:	2b00      	cmp	r3, #0
 800a116:	d003      	beq.n	800a120 <find_volume+0x2a8>
 800a118:	230d      	movs	r3, #13
 800a11a:	e126      	b.n	800a36a <find_volume+0x4f2>
 800a11c:	20002b10 	.word	0x20002b10

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a122:	3338      	adds	r3, #56	@ 0x38
 800a124:	3313      	adds	r3, #19
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe f82a 	bl	8008180 <ld_word>
 800a12c:	4603      	mov	r3, r0
 800a12e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a130:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a132:	2b00      	cmp	r3, #0
 800a134:	d106      	bne.n	800a144 <find_volume+0x2cc>
 800a136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a138:	3338      	adds	r3, #56	@ 0x38
 800a13a:	3320      	adds	r3, #32
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fe f837 	bl	80081b0 <ld_dword>
 800a142:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a146:	3338      	adds	r3, #56	@ 0x38
 800a148:	330e      	adds	r3, #14
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fe f818 	bl	8008180 <ld_word>
 800a150:	4603      	mov	r3, r0
 800a152:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a154:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <find_volume+0x2e6>
 800a15a:	230d      	movs	r3, #13
 800a15c:	e105      	b.n	800a36a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a15e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a162:	4413      	add	r3, r2
 800a164:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a166:	8911      	ldrh	r1, [r2, #8]
 800a168:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a16a:	8992      	ldrh	r2, [r2, #12]
 800a16c:	0952      	lsrs	r2, r2, #5
 800a16e:	b292      	uxth	r2, r2
 800a170:	fbb1 f2f2 	udiv	r2, r1, r2
 800a174:	b292      	uxth	r2, r2
 800a176:	4413      	add	r3, r2
 800a178:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a17a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17e:	429a      	cmp	r2, r3
 800a180:	d201      	bcs.n	800a186 <find_volume+0x30e>
 800a182:	230d      	movs	r3, #13
 800a184:	e0f1      	b.n	800a36a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a186:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a18e:	8952      	ldrh	r2, [r2, #10]
 800a190:	fbb3 f3f2 	udiv	r3, r3, r2
 800a194:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <find_volume+0x328>
 800a19c:	230d      	movs	r3, #13
 800a19e:	e0e4      	b.n	800a36a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d802      	bhi.n	800a1b6 <find_volume+0x33e>
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d802      	bhi.n	800a1c6 <find_volume+0x34e>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c8:	1c9a      	adds	r2, r3, #2
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1cc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a1d2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a1d4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a1d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1d8:	441a      	add	r2, r3
 800a1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1dc:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a1de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e2:	441a      	add	r2, r3
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800a1e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a1ec:	2b03      	cmp	r3, #3
 800a1ee:	d11e      	bne.n	800a22e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f2:	3338      	adds	r3, #56	@ 0x38
 800a1f4:	332a      	adds	r3, #42	@ 0x2a
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fd ffc2 	bl	8008180 <ld_word>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d001      	beq.n	800a206 <find_volume+0x38e>
 800a202:	230d      	movs	r3, #13
 800a204:	e0b1      	b.n	800a36a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a208:	891b      	ldrh	r3, [r3, #8]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <find_volume+0x39a>
 800a20e:	230d      	movs	r3, #13
 800a210:	e0ab      	b.n	800a36a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a214:	3338      	adds	r3, #56	@ 0x38
 800a216:	332c      	adds	r3, #44	@ 0x2c
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fd ffc9 	bl	80081b0 <ld_dword>
 800a21e:	4602      	mov	r2, r0
 800a220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a222:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a22c:	e01f      	b.n	800a26e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a230:	891b      	ldrh	r3, [r3, #8]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d101      	bne.n	800a23a <find_volume+0x3c2>
 800a236:	230d      	movs	r3, #13
 800a238:	e097      	b.n	800a36a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a23e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a240:	441a      	add	r2, r3
 800a242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a244:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a246:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d103      	bne.n	800a256 <find_volume+0x3de>
 800a24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	005b      	lsls	r3, r3, #1
 800a254:	e00a      	b.n	800a26c <find_volume+0x3f4>
 800a256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a258:	69da      	ldr	r2, [r3, #28]
 800a25a:	4613      	mov	r3, r2
 800a25c:	005b      	lsls	r3, r3, #1
 800a25e:	4413      	add	r3, r2
 800a260:	085a      	lsrs	r2, r3, #1
 800a262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a264:	69db      	ldr	r3, [r3, #28]
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a26c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a270:	6a1a      	ldr	r2, [r3, #32]
 800a272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a274:	899b      	ldrh	r3, [r3, #12]
 800a276:	4619      	mov	r1, r3
 800a278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a27a:	440b      	add	r3, r1
 800a27c:	3b01      	subs	r3, #1
 800a27e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a280:	8989      	ldrh	r1, [r1, #12]
 800a282:	fbb3 f3f1 	udiv	r3, r3, r1
 800a286:	429a      	cmp	r2, r3
 800a288:	d201      	bcs.n	800a28e <find_volume+0x416>
 800a28a:	230d      	movs	r3, #13
 800a28c:	e06d      	b.n	800a36a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a290:	f04f 32ff 	mov.w	r2, #4294967295
 800a294:	619a      	str	r2, [r3, #24]
 800a296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a298:	699a      	ldr	r2, [r3, #24]
 800a29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a29c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a0:	2280      	movs	r2, #128	@ 0x80
 800a2a2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a2a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a2a8:	2b03      	cmp	r3, #3
 800a2aa:	d149      	bne.n	800a340 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ae:	3338      	adds	r3, #56	@ 0x38
 800a2b0:	3330      	adds	r3, #48	@ 0x30
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fd ff64 	bl	8008180 <ld_word>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d140      	bne.n	800a340 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a2be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a2c6:	f7fe fa0b 	bl	80086e0 <move_window>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d137      	bne.n	800a340 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d8:	3338      	adds	r3, #56	@ 0x38
 800a2da:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fd ff4e 	bl	8008180 <ld_word>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d127      	bne.n	800a340 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f2:	3338      	adds	r3, #56	@ 0x38
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fd ff5b 	bl	80081b0 <ld_dword>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	4a1d      	ldr	r2, [pc, #116]	@ (800a374 <find_volume+0x4fc>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d11e      	bne.n	800a340 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a304:	3338      	adds	r3, #56	@ 0x38
 800a306:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fd ff50 	bl	80081b0 <ld_dword>
 800a310:	4603      	mov	r3, r0
 800a312:	4a19      	ldr	r2, [pc, #100]	@ (800a378 <find_volume+0x500>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d113      	bne.n	800a340 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31a:	3338      	adds	r3, #56	@ 0x38
 800a31c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a320:	4618      	mov	r0, r3
 800a322:	f7fd ff45 	bl	80081b0 <ld_dword>
 800a326:	4602      	mov	r2, r0
 800a328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32e:	3338      	adds	r3, #56	@ 0x38
 800a330:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a334:	4618      	mov	r0, r3
 800a336:	f7fd ff3b 	bl	80081b0 <ld_dword>
 800a33a:	4602      	mov	r2, r0
 800a33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a33e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a342:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a346:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a348:	4b0c      	ldr	r3, [pc, #48]	@ (800a37c <find_volume+0x504>)
 800a34a:	881b      	ldrh	r3, [r3, #0]
 800a34c:	3301      	adds	r3, #1
 800a34e:	b29a      	uxth	r2, r3
 800a350:	4b0a      	ldr	r3, [pc, #40]	@ (800a37c <find_volume+0x504>)
 800a352:	801a      	strh	r2, [r3, #0]
 800a354:	4b09      	ldr	r3, [pc, #36]	@ (800a37c <find_volume+0x504>)
 800a356:	881a      	ldrh	r2, [r3, #0]
 800a358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35e:	4a08      	ldr	r2, [pc, #32]	@ (800a380 <find_volume+0x508>)
 800a360:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a362:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a364:	f7fe f954 	bl	8008610 <clear_lock>
#endif
	return FR_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3758      	adds	r7, #88	@ 0x58
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	41615252 	.word	0x41615252
 800a378:	61417272 	.word	0x61417272
 800a37c:	20002b14 	.word	0x20002b14
 800a380:	20002b38 	.word	0x20002b38

0800a384 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a38e:	2309      	movs	r3, #9
 800a390:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d01c      	beq.n	800a3d2 <validate+0x4e>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d018      	beq.n	800a3d2 <validate+0x4e>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d013      	beq.n	800a3d2 <validate+0x4e>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	889a      	ldrh	r2, [r3, #4]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	88db      	ldrh	r3, [r3, #6]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d10c      	bne.n	800a3d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	785b      	ldrb	r3, [r3, #1]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fd fe40 	bl	8008044 <disk_status>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	f003 0301 	and.w	r3, r3, #1
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d101      	bne.n	800a3d2 <validate+0x4e>
			res = FR_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d102      	bne.n	800a3de <validate+0x5a>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	e000      	b.n	800a3e0 <validate+0x5c>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	6013      	str	r3, [r2, #0]
	return res;
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b088      	sub	sp, #32
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a402:	f107 0310 	add.w	r3, r7, #16
 800a406:	4618      	mov	r0, r3
 800a408:	f7ff fc9c 	bl	8009d44 <get_ldnumber>
 800a40c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	2b00      	cmp	r3, #0
 800a412:	da01      	bge.n	800a418 <f_mount+0x28>
 800a414:	230b      	movs	r3, #11
 800a416:	e02b      	b.n	800a470 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a418:	4a17      	ldr	r2, [pc, #92]	@ (800a478 <f_mount+0x88>)
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a420:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d005      	beq.n	800a434 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a428:	69b8      	ldr	r0, [r7, #24]
 800a42a:	f7fe f8f1 	bl	8008610 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	2200      	movs	r2, #0
 800a432:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d002      	beq.n	800a440 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	490d      	ldr	r1, [pc, #52]	@ (800a478 <f_mount+0x88>)
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <f_mount+0x66>
 800a450:	79fb      	ldrb	r3, [r7, #7]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d001      	beq.n	800a45a <f_mount+0x6a>
 800a456:	2300      	movs	r3, #0
 800a458:	e00a      	b.n	800a470 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a45a:	f107 010c 	add.w	r1, r7, #12
 800a45e:	f107 0308 	add.w	r3, r7, #8
 800a462:	2200      	movs	r2, #0
 800a464:	4618      	mov	r0, r3
 800a466:	f7ff fd07 	bl	8009e78 <find_volume>
 800a46a:	4603      	mov	r3, r0
 800a46c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a46e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3720      	adds	r7, #32
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	20002b10 	.word	0x20002b10

0800a47c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b09a      	sub	sp, #104	@ 0x68
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	4613      	mov	r3, r2
 800a488:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <f_open+0x18>
 800a490:	2309      	movs	r3, #9
 800a492:	e1b7      	b.n	800a804 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a494:	79fb      	ldrb	r3, [r7, #7]
 800a496:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a49a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a49c:	79fa      	ldrb	r2, [r7, #7]
 800a49e:	f107 0114 	add.w	r1, r7, #20
 800a4a2:	f107 0308 	add.w	r3, r7, #8
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7ff fce6 	bl	8009e78 <find_volume>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800a4b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f040 819b 	bne.w	800a7f2 <f_open+0x376>
		dj.obj.fs = fs;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	f107 0318 	add.w	r3, r7, #24
 800a4c6:	4611      	mov	r1, r2
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7ff fbc5 	bl	8009c58 <follow_path>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a4d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d118      	bne.n	800a50e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a4dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a4e0:	b25b      	sxtb	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	da03      	bge.n	800a4ee <f_open+0x72>
				res = FR_INVALID_NAME;
 800a4e6:	2306      	movs	r3, #6
 800a4e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a4ec:	e00f      	b.n	800a50e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a4ee:	79fb      	ldrb	r3, [r7, #7]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	bf8c      	ite	hi
 800a4f4:	2301      	movhi	r3, #1
 800a4f6:	2300      	movls	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	f107 0318 	add.w	r3, r7, #24
 800a500:	4611      	mov	r1, r2
 800a502:	4618      	mov	r0, r3
 800a504:	f7fd ff3c 	bl	8008380 <chk_lock>
 800a508:	4603      	mov	r3, r0
 800a50a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a50e:	79fb      	ldrb	r3, [r7, #7]
 800a510:	f003 031c 	and.w	r3, r3, #28
 800a514:	2b00      	cmp	r3, #0
 800a516:	d07f      	beq.n	800a618 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a518:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d017      	beq.n	800a550 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a520:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a524:	2b04      	cmp	r3, #4
 800a526:	d10e      	bne.n	800a546 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a528:	f7fd ff86 	bl	8008438 <enq_lock>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d006      	beq.n	800a540 <f_open+0xc4>
 800a532:	f107 0318 	add.w	r3, r7, #24
 800a536:	4618      	mov	r0, r3
 800a538:	f7ff f8de 	bl	80096f8 <dir_register>
 800a53c:	4603      	mov	r3, r0
 800a53e:	e000      	b.n	800a542 <f_open+0xc6>
 800a540:	2312      	movs	r3, #18
 800a542:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a546:	79fb      	ldrb	r3, [r7, #7]
 800a548:	f043 0308 	orr.w	r3, r3, #8
 800a54c:	71fb      	strb	r3, [r7, #7]
 800a54e:	e010      	b.n	800a572 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a550:	7fbb      	ldrb	r3, [r7, #30]
 800a552:	f003 0311 	and.w	r3, r3, #17
 800a556:	2b00      	cmp	r3, #0
 800a558:	d003      	beq.n	800a562 <f_open+0xe6>
					res = FR_DENIED;
 800a55a:	2307      	movs	r3, #7
 800a55c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a560:	e007      	b.n	800a572 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a562:	79fb      	ldrb	r3, [r7, #7]
 800a564:	f003 0304 	and.w	r3, r3, #4
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d002      	beq.n	800a572 <f_open+0xf6>
 800a56c:	2308      	movs	r3, #8
 800a56e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a572:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a576:	2b00      	cmp	r3, #0
 800a578:	d168      	bne.n	800a64c <f_open+0x1d0>
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	f003 0308 	and.w	r3, r3, #8
 800a580:	2b00      	cmp	r3, #0
 800a582:	d063      	beq.n	800a64c <f_open+0x1d0>
				dw = GET_FATTIME();
 800a584:	f7fd fd00 	bl	8007f88 <get_fattime>
 800a588:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58c:	330e      	adds	r3, #14
 800a58e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a590:	4618      	mov	r0, r3
 800a592:	f7fd fe4b 	bl	800822c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a598:	3316      	adds	r3, #22
 800a59a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7fd fe45 	bl	800822c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a4:	330b      	adds	r3, #11
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe fe1a 	bl	80091ea <ld_clust>
 800a5b6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a5bc:	2200      	movs	r2, #0
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fe fe32 	bl	8009228 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c6:	331c      	adds	r3, #28
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fd fe2e 	bl	800822c <st_dword>
					fs->wflag = 1;
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a5d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d037      	beq.n	800a64c <f_open+0x1d0>
						dw = fs->winsect;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5e0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a5e2:	f107 0318 	add.w	r3, r7, #24
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fe fb22 	bl	8008c34 <remove_chain>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800a5f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d126      	bne.n	800a64c <f_open+0x1d0>
							res = move_window(fs, dw);
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a602:	4618      	mov	r0, r3
 800a604:	f7fe f86c 	bl	80086e0 <move_window>
 800a608:	4603      	mov	r3, r0
 800a60a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a612:	3a01      	subs	r2, #1
 800a614:	615a      	str	r2, [r3, #20]
 800a616:	e019      	b.n	800a64c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a618:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d115      	bne.n	800a64c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a620:	7fbb      	ldrb	r3, [r7, #30]
 800a622:	f003 0310 	and.w	r3, r3, #16
 800a626:	2b00      	cmp	r3, #0
 800a628:	d003      	beq.n	800a632 <f_open+0x1b6>
					res = FR_NO_FILE;
 800a62a:	2304      	movs	r3, #4
 800a62c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a630:	e00c      	b.n	800a64c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a632:	79fb      	ldrb	r3, [r7, #7]
 800a634:	f003 0302 	and.w	r3, r3, #2
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d007      	beq.n	800a64c <f_open+0x1d0>
 800a63c:	7fbb      	ldrb	r3, [r7, #30]
 800a63e:	f003 0301 	and.w	r3, r3, #1
 800a642:	2b00      	cmp	r3, #0
 800a644:	d002      	beq.n	800a64c <f_open+0x1d0>
						res = FR_DENIED;
 800a646:	2307      	movs	r3, #7
 800a648:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a64c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a650:	2b00      	cmp	r3, #0
 800a652:	d126      	bne.n	800a6a2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a654:	79fb      	ldrb	r3, [r7, #7]
 800a656:	f003 0308 	and.w	r3, r3, #8
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d003      	beq.n	800a666 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a65e:	79fb      	ldrb	r3, [r7, #7]
 800a660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a664:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a66e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a674:	79fb      	ldrb	r3, [r7, #7]
 800a676:	2b01      	cmp	r3, #1
 800a678:	bf8c      	ite	hi
 800a67a:	2301      	movhi	r3, #1
 800a67c:	2300      	movls	r3, #0
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	461a      	mov	r2, r3
 800a682:	f107 0318 	add.w	r3, r7, #24
 800a686:	4611      	mov	r1, r2
 800a688:	4618      	mov	r0, r3
 800a68a:	f7fd fef7 	bl	800847c <inc_lock>
 800a68e:	4602      	mov	r2, r0
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d102      	bne.n	800a6a2 <f_open+0x226>
 800a69c:	2302      	movs	r3, #2
 800a69e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a6a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f040 80a3 	bne.w	800a7f2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fe fd99 	bl	80091ea <ld_clust>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c0:	331c      	adds	r3, #28
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fd fd74 	bl	80081b0 <ld_dword>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	88da      	ldrh	r2, [r3, #6]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	79fa      	ldrb	r2, [r7, #7]
 800a6e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3330      	adds	r3, #48	@ 0x30
 800a6fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a702:	2100      	movs	r1, #0
 800a704:	4618      	mov	r0, r3
 800a706:	f7fd fdde 	bl	80082c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a70a:	79fb      	ldrb	r3, [r7, #7]
 800a70c:	f003 0320 	and.w	r3, r3, #32
 800a710:	2b00      	cmp	r3, #0
 800a712:	d06e      	beq.n	800a7f2 <f_open+0x376>
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d06a      	beq.n	800a7f2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	68da      	ldr	r2, [r3, #12]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	895b      	ldrh	r3, [r3, #10]
 800a728:	461a      	mov	r2, r3
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	899b      	ldrh	r3, [r3, #12]
 800a72e:	fb02 f303 	mul.w	r3, r2, r3
 800a732:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a740:	e016      	b.n	800a770 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a746:	4618      	mov	r0, r3
 800a748:	f7fe f887 	bl	800885a <get_fat>
 800a74c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a74e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a750:	2b01      	cmp	r3, #1
 800a752:	d802      	bhi.n	800a75a <f_open+0x2de>
 800a754:	2302      	movs	r3, #2
 800a756:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a75a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a760:	d102      	bne.n	800a768 <f_open+0x2ec>
 800a762:	2301      	movs	r3, #1
 800a764:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a768:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a76a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a770:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a774:	2b00      	cmp	r3, #0
 800a776:	d103      	bne.n	800a780 <f_open+0x304>
 800a778:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a77a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d8e0      	bhi.n	800a742 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a784:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a786:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d131      	bne.n	800a7f2 <f_open+0x376>
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	899b      	ldrh	r3, [r3, #12]
 800a792:	461a      	mov	r2, r3
 800a794:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a796:	fbb3 f1f2 	udiv	r1, r3, r2
 800a79a:	fb01 f202 	mul.w	r2, r1, r2
 800a79e:	1a9b      	subs	r3, r3, r2
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d026      	beq.n	800a7f2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fe f837 	bl	800881c <clust2sect>
 800a7ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800a7b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d103      	bne.n	800a7be <f_open+0x342>
						res = FR_INT_ERR;
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a7bc:	e019      	b.n	800a7f2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	899b      	ldrh	r3, [r3, #12]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7c6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a7ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7cc:	441a      	add	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	7858      	ldrb	r0, [r3, #1]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6a1a      	ldr	r2, [r3, #32]
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	f7fd fc6f 	bl	80080c4 <disk_read>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d002      	beq.n	800a7f2 <f_open+0x376>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a7f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d002      	beq.n	800a800 <f_open+0x384>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a800:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800a804:	4618      	mov	r0, r3
 800a806:	3768      	adds	r7, #104	@ 0x68
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08c      	sub	sp, #48	@ 0x30
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f107 0210 	add.w	r2, r7, #16
 800a82a:	4611      	mov	r1, r2
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7ff fda9 	bl	800a384 <validate>
 800a832:	4603      	mov	r3, r0
 800a834:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a838:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d107      	bne.n	800a850 <f_write+0x44>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	7d5b      	ldrb	r3, [r3, #21]
 800a844:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a848:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d002      	beq.n	800a856 <f_write+0x4a>
 800a850:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a854:	e16a      	b.n	800ab2c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	7d1b      	ldrb	r3, [r3, #20]
 800a85a:	f003 0302 	and.w	r3, r3, #2
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <f_write+0x5a>
 800a862:	2307      	movs	r3, #7
 800a864:	e162      	b.n	800ab2c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	699a      	ldr	r2, [r3, #24]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	441a      	add	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	429a      	cmp	r2, r3
 800a874:	f080 814c 	bcs.w	800ab10 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	43db      	mvns	r3, r3
 800a87e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a880:	e146      	b.n	800ab10 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	8992      	ldrh	r2, [r2, #12]
 800a88a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a88e:	fb01 f202 	mul.w	r2, r1, r2
 800a892:	1a9b      	subs	r3, r3, r2
 800a894:	2b00      	cmp	r3, #0
 800a896:	f040 80f1 	bne.w	800aa7c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	693a      	ldr	r2, [r7, #16]
 800a8a0:	8992      	ldrh	r2, [r2, #12]
 800a8a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	8952      	ldrh	r2, [r2, #10]
 800a8aa:	3a01      	subs	r2, #1
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d143      	bne.n	800a93e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10c      	bne.n	800a8d8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d11a      	bne.n	800a900 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fe fa15 	bl	8008cfe <create_chain>
 800a8d4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a8d6:	e013      	b.n	800a900 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d007      	beq.n	800a8f0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	699b      	ldr	r3, [r3, #24]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f7fe faa1 	bl	8008e2e <clmt_clust>
 800a8ec:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a8ee:	e007      	b.n	800a900 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	69db      	ldr	r3, [r3, #28]
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	4610      	mov	r0, r2
 800a8fa:	f7fe fa00 	bl	8008cfe <create_chain>
 800a8fe:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a902:	2b00      	cmp	r3, #0
 800a904:	f000 8109 	beq.w	800ab1a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d104      	bne.n	800a918 <f_write+0x10c>
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2202      	movs	r2, #2
 800a912:	755a      	strb	r2, [r3, #21]
 800a914:	2302      	movs	r3, #2
 800a916:	e109      	b.n	800ab2c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91e:	d104      	bne.n	800a92a <f_write+0x11e>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2201      	movs	r2, #1
 800a924:	755a      	strb	r2, [r3, #21]
 800a926:	2301      	movs	r3, #1
 800a928:	e100      	b.n	800ab2c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a92e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d102      	bne.n	800a93e <f_write+0x132>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a93c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	7d1b      	ldrb	r3, [r3, #20]
 800a942:	b25b      	sxtb	r3, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	da18      	bge.n	800a97a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	7858      	ldrb	r0, [r3, #1]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6a1a      	ldr	r2, [r3, #32]
 800a956:	2301      	movs	r3, #1
 800a958:	f7fd fbd4 	bl	8008104 <disk_write>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d004      	beq.n	800a96c <f_write+0x160>
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2201      	movs	r2, #1
 800a966:	755a      	strb	r2, [r3, #21]
 800a968:	2301      	movs	r3, #1
 800a96a:	e0df      	b.n	800ab2c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	7d1b      	ldrb	r3, [r3, #20]
 800a970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a974:	b2da      	uxtb	r2, r3
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	69db      	ldr	r3, [r3, #28]
 800a980:	4619      	mov	r1, r3
 800a982:	4610      	mov	r0, r2
 800a984:	f7fd ff4a 	bl	800881c <clust2sect>
 800a988:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d104      	bne.n	800a99a <f_write+0x18e>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2202      	movs	r2, #2
 800a994:	755a      	strb	r2, [r3, #21]
 800a996:	2302      	movs	r3, #2
 800a998:	e0c8      	b.n	800ab2c <f_write+0x320>
			sect += csect;
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	4413      	add	r3, r2
 800a9a0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	899b      	ldrh	r3, [r3, #12]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9ae:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a9b0:	6a3b      	ldr	r3, [r7, #32]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d043      	beq.n	800aa3e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a9b6:	69ba      	ldr	r2, [r7, #24]
 800a9b8:	6a3b      	ldr	r3, [r7, #32]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	8952      	ldrh	r2, [r2, #10]
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d905      	bls.n	800a9d0 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	895b      	ldrh	r3, [r3, #10]
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	7858      	ldrb	r0, [r3, #1]
 800a9d4:	6a3b      	ldr	r3, [r7, #32]
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	69f9      	ldr	r1, [r7, #28]
 800a9da:	f7fd fb93 	bl	8008104 <disk_write>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d004      	beq.n	800a9ee <f_write+0x1e2>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	755a      	strb	r2, [r3, #21]
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e09e      	b.n	800ab2c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6a1a      	ldr	r2, [r3, #32]
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	6a3a      	ldr	r2, [r7, #32]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d918      	bls.n	800aa2e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6a1a      	ldr	r2, [r3, #32]
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	8992      	ldrh	r2, [r2, #12]
 800aa0e:	fb02 f303 	mul.w	r3, r2, r3
 800aa12:	69fa      	ldr	r2, [r7, #28]
 800aa14:	18d1      	adds	r1, r2, r3
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	899b      	ldrh	r3, [r3, #12]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	f7fd fc32 	bl	8008284 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	7d1b      	ldrb	r3, [r3, #20]
 800aa24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa28:	b2da      	uxtb	r2, r3
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	899b      	ldrh	r3, [r3, #12]
 800aa32:	461a      	mov	r2, r3
 800aa34:	6a3b      	ldr	r3, [r7, #32]
 800aa36:	fb02 f303 	mul.w	r3, r2, r3
 800aa3a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800aa3c:	e04b      	b.n	800aad6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d016      	beq.n	800aa76 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	699a      	ldr	r2, [r3, #24]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d210      	bcs.n	800aa76 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	7858      	ldrb	r0, [r3, #1]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa5e:	2301      	movs	r3, #1
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	f7fd fb2f 	bl	80080c4 <disk_read>
 800aa66:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d004      	beq.n	800aa76 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	755a      	strb	r2, [r3, #21]
 800aa72:	2301      	movs	r3, #1
 800aa74:	e05a      	b.n	800ab2c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	899b      	ldrh	r3, [r3, #12]
 800aa80:	4618      	mov	r0, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	8992      	ldrh	r2, [r2, #12]
 800aa8a:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa8e:	fb01 f202 	mul.w	r2, r1, r2
 800aa92:	1a9b      	subs	r3, r3, r2
 800aa94:	1ac3      	subs	r3, r0, r3
 800aa96:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800aa98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d901      	bls.n	800aaa4 <f_write+0x298>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	693a      	ldr	r2, [r7, #16]
 800aab0:	8992      	ldrh	r2, [r2, #12]
 800aab2:	fbb3 f0f2 	udiv	r0, r3, r2
 800aab6:	fb00 f202 	mul.w	r2, r0, r2
 800aaba:	1a9b      	subs	r3, r3, r2
 800aabc:	440b      	add	r3, r1
 800aabe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aac0:	69f9      	ldr	r1, [r7, #28]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fd fbde 	bl	8008284 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	7d1b      	ldrb	r3, [r3, #20]
 800aacc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aad6:	69fa      	ldr	r2, [r7, #28]
 800aad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aada:	4413      	add	r3, r2
 800aadc:	61fb      	str	r3, [r7, #28]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	699a      	ldr	r2, [r3, #24]
 800aae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae4:	441a      	add	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	619a      	str	r2, [r3, #24]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	68da      	ldr	r2, [r3, #12]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	bf38      	it	cc
 800aaf6:	461a      	movcc	r2, r3
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	60da      	str	r2, [r3, #12]
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab02:	441a      	add	r2, r3
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f47f aeb5 	bne.w	800a882 <f_write+0x76>
 800ab18:	e000      	b.n	800ab1c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ab1a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	7d1b      	ldrb	r3, [r3, #20]
 800ab20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3730      	adds	r7, #48	@ 0x30
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b086      	sub	sp, #24
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f107 0208 	add.w	r2, r7, #8
 800ab42:	4611      	mov	r1, r2
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7ff fc1d 	bl	800a384 <validate>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab4e:	7dfb      	ldrb	r3, [r7, #23]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d168      	bne.n	800ac26 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	7d1b      	ldrb	r3, [r3, #20]
 800ab58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d062      	beq.n	800ac26 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	7d1b      	ldrb	r3, [r3, #20]
 800ab64:	b25b      	sxtb	r3, r3
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	da15      	bge.n	800ab96 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	7858      	ldrb	r0, [r3, #1]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a1a      	ldr	r2, [r3, #32]
 800ab78:	2301      	movs	r3, #1
 800ab7a:	f7fd fac3 	bl	8008104 <disk_write>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d001      	beq.n	800ab88 <f_sync+0x54>
 800ab84:	2301      	movs	r3, #1
 800ab86:	e04f      	b.n	800ac28 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	7d1b      	ldrb	r3, [r3, #20]
 800ab8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab90:	b2da      	uxtb	r2, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ab96:	f7fd f9f7 	bl	8007f88 <get_fattime>
 800ab9a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba2:	4619      	mov	r1, r3
 800aba4:	4610      	mov	r0, r2
 800aba6:	f7fd fd9b 	bl	80086e0 <move_window>
 800abaa:	4603      	mov	r3, r0
 800abac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800abae:	7dfb      	ldrb	r3, [r7, #23]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d138      	bne.n	800ac26 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	330b      	adds	r3, #11
 800abbe:	781a      	ldrb	r2, [r3, #0]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	330b      	adds	r3, #11
 800abc4:	f042 0220 	orr.w	r2, r2, #32
 800abc8:	b2d2      	uxtb	r2, r2
 800abca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6818      	ldr	r0, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	461a      	mov	r2, r3
 800abd6:	68f9      	ldr	r1, [r7, #12]
 800abd8:	f7fe fb26 	bl	8009228 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f103 021c 	add.w	r2, r3, #28
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	4619      	mov	r1, r3
 800abe8:	4610      	mov	r0, r2
 800abea:	f7fd fb1f 	bl	800822c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3316      	adds	r3, #22
 800abf2:	6939      	ldr	r1, [r7, #16]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fd fb19 	bl	800822c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	3312      	adds	r3, #18
 800abfe:	2100      	movs	r1, #0
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fd faf8 	bl	80081f6 <st_word>
					fs->wflag = 1;
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fd fd94 	bl	800873c <sync_fs>
 800ac14:	4603      	mov	r3, r0
 800ac16:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	7d1b      	ldrb	r3, [r3, #20]
 800ac1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ac26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3718      	adds	r7, #24
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f7ff ff7b 	bl	800ab34 <f_sync>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ac42:	7bfb      	ldrb	r3, [r7, #15]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d118      	bne.n	800ac7a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f107 0208 	add.w	r2, r7, #8
 800ac4e:	4611      	mov	r1, r2
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7ff fb97 	bl	800a384 <validate>
 800ac56:	4603      	mov	r3, r0
 800ac58:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10c      	bne.n	800ac7a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fd fc97 	bl	8008598 <dec_lock>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ac6e:	7bfb      	ldrb	r3, [r7, #15]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d102      	bne.n	800ac7a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b092      	sub	sp, #72	@ 0x48
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800ac90:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ac94:	f107 030c 	add.w	r3, r7, #12
 800ac98:	2200      	movs	r2, #0
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7ff f8ec 	bl	8009e78 <find_volume>
 800aca0:	4603      	mov	r3, r0
 800aca2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800aca6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f040 8099 	bne.w	800ade2 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800acb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800acb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb8:	699a      	ldr	r2, [r3, #24]
 800acba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acbc:	69db      	ldr	r3, [r3, #28]
 800acbe:	3b02      	subs	r3, #2
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d804      	bhi.n	800acce <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800acc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc6:	699a      	ldr	r2, [r3, #24]
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	601a      	str	r2, [r3, #0]
 800accc:	e089      	b.n	800ade2 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800acce:	2300      	movs	r3, #0
 800acd0:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800acd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d128      	bne.n	800ad2c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800acda:	2302      	movs	r3, #2
 800acdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace0:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ace2:	f107 0314 	add.w	r3, r7, #20
 800ace6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fd fdb6 	bl	800885a <get_fat>
 800acee:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800acf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf6:	d103      	bne.n	800ad00 <f_getfree+0x7c>
 800acf8:	2301      	movs	r3, #1
 800acfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800acfe:	e063      	b.n	800adc8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ad00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d103      	bne.n	800ad0e <f_getfree+0x8a>
 800ad06:	2302      	movs	r3, #2
 800ad08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ad0c:	e05c      	b.n	800adc8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ad0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d102      	bne.n	800ad1a <f_getfree+0x96>
 800ad14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad16:	3301      	adds	r3, #1
 800ad18:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800ad1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad22:	69db      	ldr	r3, [r3, #28]
 800ad24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d3db      	bcc.n	800ace2 <f_getfree+0x5e>
 800ad2a:	e04d      	b.n	800adc8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ad2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad2e:	69db      	ldr	r3, [r3, #28]
 800ad30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad36:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800ad40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d113      	bne.n	800ad6e <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ad46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ad4e:	4619      	mov	r1, r3
 800ad50:	f7fd fcc6 	bl	80086e0 <move_window>
 800ad54:	4603      	mov	r3, r0
 800ad56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800ad5a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d131      	bne.n	800adc6 <f_getfree+0x142>
							p = fs->win;
 800ad62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad64:	3338      	adds	r3, #56	@ 0x38
 800ad66:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800ad68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6a:	899b      	ldrh	r3, [r3, #12]
 800ad6c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ad6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d10f      	bne.n	800ad96 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ad76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad78:	f7fd fa02 	bl	8008180 <ld_word>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d102      	bne.n	800ad88 <f_getfree+0x104>
 800ad82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad84:	3301      	adds	r3, #1
 800ad86:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800ad88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8a:	3302      	adds	r3, #2
 800ad8c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad90:	3b02      	subs	r3, #2
 800ad92:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad94:	e010      	b.n	800adb8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ad96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad98:	f7fd fa0a 	bl	80081b0 <ld_dword>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d102      	bne.n	800adac <f_getfree+0x128>
 800ada6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ada8:	3301      	adds	r3, #1
 800adaa:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800adac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adae:	3304      	adds	r3, #4
 800adb0:	633b      	str	r3, [r7, #48]	@ 0x30
 800adb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adb4:	3b04      	subs	r3, #4
 800adb6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800adb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adba:	3b01      	subs	r3, #1
 800adbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1bd      	bne.n	800ad40 <f_getfree+0xbc>
 800adc4:	e000      	b.n	800adc8 <f_getfree+0x144>
							if (res != FR_OK) break;
 800adc6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800adcc:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800adce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800add2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800add4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add6:	791a      	ldrb	r2, [r3, #4]
 800add8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adda:	f042 0201 	orr.w	r2, r2, #1
 800adde:	b2d2      	uxtb	r2, r2
 800ade0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ade2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3748      	adds	r7, #72	@ 0x48
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b084      	sub	sp, #16
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	460b      	mov	r3, r1
 800adf8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800adfa:	78fb      	ldrb	r3, [r7, #3]
 800adfc:	2b0a      	cmp	r3, #10
 800adfe:	d103      	bne.n	800ae08 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ae00:	210d      	movs	r1, #13
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7ff fff3 	bl	800adee <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	db25      	blt.n	800ae60 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	1c5a      	adds	r2, r3, #1
 800ae18:	60fa      	str	r2, [r7, #12]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	78fa      	ldrb	r2, [r7, #3]
 800ae20:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b3c      	cmp	r3, #60	@ 0x3c
 800ae26:	dd12      	ble.n	800ae4e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6818      	ldr	r0, [r3, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f103 010c 	add.w	r1, r3, #12
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	f107 0308 	add.w	r3, r7, #8
 800ae38:	f7ff fce8 	bl	800a80c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d101      	bne.n	800ae48 <putc_bfd+0x5a>
 800ae44:	2300      	movs	r3, #0
 800ae46:	e001      	b.n	800ae4c <putc_bfd+0x5e>
 800ae48:	f04f 33ff 	mov.w	r3, #4294967295
 800ae4c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	1c5a      	adds	r2, r3, #1
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	609a      	str	r2, [r3, #8]
 800ae5e:	e000      	b.n	800ae62 <putc_bfd+0x74>
	if (i < 0) return;
 800ae60:	bf00      	nop
}
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	db16      	blt.n	800aea6 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6818      	ldr	r0, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f103 010c 	add.w	r1, r3, #12
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	461a      	mov	r2, r3
 800ae88:	f107 030c 	add.w	r3, r7, #12
 800ae8c:	f7ff fcbe 	bl	800a80c <f_write>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d107      	bne.n	800aea6 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d102      	bne.n	800aea6 <putc_flush+0x3e>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	e001      	b.n	800aeaa <putc_flush+0x42>
	return EOF;
 800aea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b083      	sub	sp, #12
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	605a      	str	r2, [r3, #4]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	685a      	ldr	r2, [r3, #4]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	609a      	str	r2, [r3, #8]
}
 800aed0:	bf00      	nop
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b096      	sub	sp, #88	@ 0x58
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800aee6:	f107 030c 	add.w	r3, r7, #12
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7ff ffe0 	bl	800aeb2 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800aef2:	e009      	b.n	800af08 <f_puts+0x2c>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	1c5a      	adds	r2, r3, #1
 800aef8:	607a      	str	r2, [r7, #4]
 800aefa:	781a      	ldrb	r2, [r3, #0]
 800aefc:	f107 030c 	add.w	r3, r7, #12
 800af00:	4611      	mov	r1, r2
 800af02:	4618      	mov	r0, r3
 800af04:	f7ff ff73 	bl	800adee <putc_bfd>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1f1      	bne.n	800aef4 <f_puts+0x18>
	return putc_flush(&pb);
 800af10:	f107 030c 	add.w	r3, r7, #12
 800af14:	4618      	mov	r0, r3
 800af16:	f7ff ffa7 	bl	800ae68 <putc_flush>
 800af1a:	4603      	mov	r3, r0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3758      	adds	r7, #88	@ 0x58
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800af24:	b480      	push	{r7}
 800af26:	b087      	sub	sp, #28
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	4613      	mov	r3, r2
 800af30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800af32:	2301      	movs	r3, #1
 800af34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800af3a:	4b1f      	ldr	r3, [pc, #124]	@ (800afb8 <FATFS_LinkDriverEx+0x94>)
 800af3c:	7a5b      	ldrb	r3, [r3, #9]
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	2b00      	cmp	r3, #0
 800af42:	d131      	bne.n	800afa8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800af44:	4b1c      	ldr	r3, [pc, #112]	@ (800afb8 <FATFS_LinkDriverEx+0x94>)
 800af46:	7a5b      	ldrb	r3, [r3, #9]
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	461a      	mov	r2, r3
 800af4c:	4b1a      	ldr	r3, [pc, #104]	@ (800afb8 <FATFS_LinkDriverEx+0x94>)
 800af4e:	2100      	movs	r1, #0
 800af50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800af52:	4b19      	ldr	r3, [pc, #100]	@ (800afb8 <FATFS_LinkDriverEx+0x94>)
 800af54:	7a5b      	ldrb	r3, [r3, #9]
 800af56:	b2db      	uxtb	r3, r3
 800af58:	4a17      	ldr	r2, [pc, #92]	@ (800afb8 <FATFS_LinkDriverEx+0x94>)
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	4413      	add	r3, r2
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800af62:	4b15      	ldr	r3, [pc, #84]	@ (800afb8 <FATFS_LinkDriverEx+0x94>)
 800af64:	7a5b      	ldrb	r3, [r3, #9]
 800af66:	b2db      	uxtb	r3, r3
 800af68:	461a      	mov	r2, r3
 800af6a:	4b13      	ldr	r3, [pc, #76]	@ (800afb8 <FATFS_LinkDriverEx+0x94>)
 800af6c:	4413      	add	r3, r2
 800af6e:	79fa      	ldrb	r2, [r7, #7]
 800af70:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800af72:	4b11      	ldr	r3, [pc, #68]	@ (800afb8 <FATFS_LinkDriverEx+0x94>)
 800af74:	7a5b      	ldrb	r3, [r3, #9]
 800af76:	b2db      	uxtb	r3, r3
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	b2d1      	uxtb	r1, r2
 800af7c:	4a0e      	ldr	r2, [pc, #56]	@ (800afb8 <FATFS_LinkDriverEx+0x94>)
 800af7e:	7251      	strb	r1, [r2, #9]
 800af80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800af82:	7dbb      	ldrb	r3, [r7, #22]
 800af84:	3330      	adds	r3, #48	@ 0x30
 800af86:	b2da      	uxtb	r2, r3
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	3301      	adds	r3, #1
 800af90:	223a      	movs	r2, #58	@ 0x3a
 800af92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	3302      	adds	r3, #2
 800af98:	222f      	movs	r2, #47	@ 0x2f
 800af9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	3303      	adds	r3, #3
 800afa0:	2200      	movs	r2, #0
 800afa2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800afa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	371c      	adds	r7, #28
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	20002d38 	.word	0x20002d38

0800afbc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800afc6:	2200      	movs	r2, #0
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7ff ffaa 	bl	800af24 <FATFS_LinkDriverEx>
 800afd0:	4603      	mov	r3, r0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3708      	adds	r7, #8
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
	...

0800afdc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	6039      	str	r1, [r7, #0]
 800afe6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800afe8:	88fb      	ldrh	r3, [r7, #6]
 800afea:	2b7f      	cmp	r3, #127	@ 0x7f
 800afec:	d802      	bhi.n	800aff4 <ff_convert+0x18>
		c = chr;
 800afee:	88fb      	ldrh	r3, [r7, #6]
 800aff0:	81fb      	strh	r3, [r7, #14]
 800aff2:	e025      	b.n	800b040 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00b      	beq.n	800b012 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800affa:	88fb      	ldrh	r3, [r7, #6]
 800affc:	2bff      	cmp	r3, #255	@ 0xff
 800affe:	d805      	bhi.n	800b00c <ff_convert+0x30>
 800b000:	88fb      	ldrh	r3, [r7, #6]
 800b002:	3b80      	subs	r3, #128	@ 0x80
 800b004:	4a12      	ldr	r2, [pc, #72]	@ (800b050 <ff_convert+0x74>)
 800b006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b00a:	e000      	b.n	800b00e <ff_convert+0x32>
 800b00c:	2300      	movs	r3, #0
 800b00e:	81fb      	strh	r3, [r7, #14]
 800b010:	e016      	b.n	800b040 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b012:	2300      	movs	r3, #0
 800b014:	81fb      	strh	r3, [r7, #14]
 800b016:	e009      	b.n	800b02c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b018:	89fb      	ldrh	r3, [r7, #14]
 800b01a:	4a0d      	ldr	r2, [pc, #52]	@ (800b050 <ff_convert+0x74>)
 800b01c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b020:	88fa      	ldrh	r2, [r7, #6]
 800b022:	429a      	cmp	r2, r3
 800b024:	d006      	beq.n	800b034 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b026:	89fb      	ldrh	r3, [r7, #14]
 800b028:	3301      	adds	r3, #1
 800b02a:	81fb      	strh	r3, [r7, #14]
 800b02c:	89fb      	ldrh	r3, [r7, #14]
 800b02e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b030:	d9f2      	bls.n	800b018 <ff_convert+0x3c>
 800b032:	e000      	b.n	800b036 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b034:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b036:	89fb      	ldrh	r3, [r7, #14]
 800b038:	3380      	adds	r3, #128	@ 0x80
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b040:	89fb      	ldrh	r3, [r7, #14]
}
 800b042:	4618      	mov	r0, r3
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	0800f7e0 	.word	0x0800f7e0

0800b054 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b054:	b480      	push	{r7}
 800b056:	b087      	sub	sp, #28
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b05e:	88fb      	ldrh	r3, [r7, #6]
 800b060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b064:	d201      	bcs.n	800b06a <ff_wtoupper+0x16>
 800b066:	4b3e      	ldr	r3, [pc, #248]	@ (800b160 <ff_wtoupper+0x10c>)
 800b068:	e000      	b.n	800b06c <ff_wtoupper+0x18>
 800b06a:	4b3e      	ldr	r3, [pc, #248]	@ (800b164 <ff_wtoupper+0x110>)
 800b06c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	1c9a      	adds	r2, r3, #2
 800b072:	617a      	str	r2, [r7, #20]
 800b074:	881b      	ldrh	r3, [r3, #0]
 800b076:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b078:	8a7b      	ldrh	r3, [r7, #18]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d068      	beq.n	800b150 <ff_wtoupper+0xfc>
 800b07e:	88fa      	ldrh	r2, [r7, #6]
 800b080:	8a7b      	ldrh	r3, [r7, #18]
 800b082:	429a      	cmp	r2, r3
 800b084:	d364      	bcc.n	800b150 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	1c9a      	adds	r2, r3, #2
 800b08a:	617a      	str	r2, [r7, #20]
 800b08c:	881b      	ldrh	r3, [r3, #0]
 800b08e:	823b      	strh	r3, [r7, #16]
 800b090:	8a3b      	ldrh	r3, [r7, #16]
 800b092:	0a1b      	lsrs	r3, r3, #8
 800b094:	81fb      	strh	r3, [r7, #14]
 800b096:	8a3b      	ldrh	r3, [r7, #16]
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b09c:	88fa      	ldrh	r2, [r7, #6]
 800b09e:	8a79      	ldrh	r1, [r7, #18]
 800b0a0:	8a3b      	ldrh	r3, [r7, #16]
 800b0a2:	440b      	add	r3, r1
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	da49      	bge.n	800b13c <ff_wtoupper+0xe8>
			switch (cmd) {
 800b0a8:	89fb      	ldrh	r3, [r7, #14]
 800b0aa:	2b08      	cmp	r3, #8
 800b0ac:	d84f      	bhi.n	800b14e <ff_wtoupper+0xfa>
 800b0ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b4 <ff_wtoupper+0x60>)
 800b0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b4:	0800b0d9 	.word	0x0800b0d9
 800b0b8:	0800b0eb 	.word	0x0800b0eb
 800b0bc:	0800b101 	.word	0x0800b101
 800b0c0:	0800b109 	.word	0x0800b109
 800b0c4:	0800b111 	.word	0x0800b111
 800b0c8:	0800b119 	.word	0x0800b119
 800b0cc:	0800b121 	.word	0x0800b121
 800b0d0:	0800b129 	.word	0x0800b129
 800b0d4:	0800b131 	.word	0x0800b131
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b0d8:	88fa      	ldrh	r2, [r7, #6]
 800b0da:	8a7b      	ldrh	r3, [r7, #18]
 800b0dc:	1ad3      	subs	r3, r2, r3
 800b0de:	005b      	lsls	r3, r3, #1
 800b0e0:	697a      	ldr	r2, [r7, #20]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	881b      	ldrh	r3, [r3, #0]
 800b0e6:	80fb      	strh	r3, [r7, #6]
 800b0e8:	e027      	b.n	800b13a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b0ea:	88fa      	ldrh	r2, [r7, #6]
 800b0ec:	8a7b      	ldrh	r3, [r7, #18]
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	f003 0301 	and.w	r3, r3, #1
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	88fa      	ldrh	r2, [r7, #6]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	80fb      	strh	r3, [r7, #6]
 800b0fe:	e01c      	b.n	800b13a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b100:	88fb      	ldrh	r3, [r7, #6]
 800b102:	3b10      	subs	r3, #16
 800b104:	80fb      	strh	r3, [r7, #6]
 800b106:	e018      	b.n	800b13a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b108:	88fb      	ldrh	r3, [r7, #6]
 800b10a:	3b20      	subs	r3, #32
 800b10c:	80fb      	strh	r3, [r7, #6]
 800b10e:	e014      	b.n	800b13a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b110:	88fb      	ldrh	r3, [r7, #6]
 800b112:	3b30      	subs	r3, #48	@ 0x30
 800b114:	80fb      	strh	r3, [r7, #6]
 800b116:	e010      	b.n	800b13a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b118:	88fb      	ldrh	r3, [r7, #6]
 800b11a:	3b1a      	subs	r3, #26
 800b11c:	80fb      	strh	r3, [r7, #6]
 800b11e:	e00c      	b.n	800b13a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b120:	88fb      	ldrh	r3, [r7, #6]
 800b122:	3308      	adds	r3, #8
 800b124:	80fb      	strh	r3, [r7, #6]
 800b126:	e008      	b.n	800b13a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b128:	88fb      	ldrh	r3, [r7, #6]
 800b12a:	3b50      	subs	r3, #80	@ 0x50
 800b12c:	80fb      	strh	r3, [r7, #6]
 800b12e:	e004      	b.n	800b13a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b130:	88fb      	ldrh	r3, [r7, #6]
 800b132:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800b136:	80fb      	strh	r3, [r7, #6]
 800b138:	bf00      	nop
			}
			break;
 800b13a:	e008      	b.n	800b14e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b13c:	89fb      	ldrh	r3, [r7, #14]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d195      	bne.n	800b06e <ff_wtoupper+0x1a>
 800b142:	8a3b      	ldrh	r3, [r7, #16]
 800b144:	005b      	lsls	r3, r3, #1
 800b146:	697a      	ldr	r2, [r7, #20]
 800b148:	4413      	add	r3, r2
 800b14a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b14c:	e78f      	b.n	800b06e <ff_wtoupper+0x1a>
			break;
 800b14e:	bf00      	nop
	}

	return chr;
 800b150:	88fb      	ldrh	r3, [r7, #6]
}
 800b152:	4618      	mov	r0, r3
 800b154:	371c      	adds	r7, #28
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	0800f8e0 	.word	0x0800f8e0
 800b164:	0800fad4 	.word	0x0800fad4

0800b168 <__cvt>:
 800b168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b16a:	ed2d 8b02 	vpush	{d8}
 800b16e:	eeb0 8b40 	vmov.f64	d8, d0
 800b172:	b085      	sub	sp, #20
 800b174:	4617      	mov	r7, r2
 800b176:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b178:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b17a:	ee18 2a90 	vmov	r2, s17
 800b17e:	f025 0520 	bic.w	r5, r5, #32
 800b182:	2a00      	cmp	r2, #0
 800b184:	bfb6      	itet	lt
 800b186:	222d      	movlt	r2, #45	@ 0x2d
 800b188:	2200      	movge	r2, #0
 800b18a:	eeb1 8b40 	vneglt.f64	d8, d0
 800b18e:	2d46      	cmp	r5, #70	@ 0x46
 800b190:	460c      	mov	r4, r1
 800b192:	701a      	strb	r2, [r3, #0]
 800b194:	d004      	beq.n	800b1a0 <__cvt+0x38>
 800b196:	2d45      	cmp	r5, #69	@ 0x45
 800b198:	d100      	bne.n	800b19c <__cvt+0x34>
 800b19a:	3401      	adds	r4, #1
 800b19c:	2102      	movs	r1, #2
 800b19e:	e000      	b.n	800b1a2 <__cvt+0x3a>
 800b1a0:	2103      	movs	r1, #3
 800b1a2:	ab03      	add	r3, sp, #12
 800b1a4:	9301      	str	r3, [sp, #4]
 800b1a6:	ab02      	add	r3, sp, #8
 800b1a8:	9300      	str	r3, [sp, #0]
 800b1aa:	4622      	mov	r2, r4
 800b1ac:	4633      	mov	r3, r6
 800b1ae:	eeb0 0b48 	vmov.f64	d0, d8
 800b1b2:	f001 f865 	bl	800c280 <_dtoa_r>
 800b1b6:	2d47      	cmp	r5, #71	@ 0x47
 800b1b8:	d114      	bne.n	800b1e4 <__cvt+0x7c>
 800b1ba:	07fb      	lsls	r3, r7, #31
 800b1bc:	d50a      	bpl.n	800b1d4 <__cvt+0x6c>
 800b1be:	1902      	adds	r2, r0, r4
 800b1c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1c8:	bf08      	it	eq
 800b1ca:	9203      	streq	r2, [sp, #12]
 800b1cc:	2130      	movs	r1, #48	@ 0x30
 800b1ce:	9b03      	ldr	r3, [sp, #12]
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d319      	bcc.n	800b208 <__cvt+0xa0>
 800b1d4:	9b03      	ldr	r3, [sp, #12]
 800b1d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1d8:	1a1b      	subs	r3, r3, r0
 800b1da:	6013      	str	r3, [r2, #0]
 800b1dc:	b005      	add	sp, #20
 800b1de:	ecbd 8b02 	vpop	{d8}
 800b1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1e4:	2d46      	cmp	r5, #70	@ 0x46
 800b1e6:	eb00 0204 	add.w	r2, r0, r4
 800b1ea:	d1e9      	bne.n	800b1c0 <__cvt+0x58>
 800b1ec:	7803      	ldrb	r3, [r0, #0]
 800b1ee:	2b30      	cmp	r3, #48	@ 0x30
 800b1f0:	d107      	bne.n	800b202 <__cvt+0x9a>
 800b1f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1fa:	bf1c      	itt	ne
 800b1fc:	f1c4 0401 	rsbne	r4, r4, #1
 800b200:	6034      	strne	r4, [r6, #0]
 800b202:	6833      	ldr	r3, [r6, #0]
 800b204:	441a      	add	r2, r3
 800b206:	e7db      	b.n	800b1c0 <__cvt+0x58>
 800b208:	1c5c      	adds	r4, r3, #1
 800b20a:	9403      	str	r4, [sp, #12]
 800b20c:	7019      	strb	r1, [r3, #0]
 800b20e:	e7de      	b.n	800b1ce <__cvt+0x66>

0800b210 <__exponent>:
 800b210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b212:	2900      	cmp	r1, #0
 800b214:	bfba      	itte	lt
 800b216:	4249      	neglt	r1, r1
 800b218:	232d      	movlt	r3, #45	@ 0x2d
 800b21a:	232b      	movge	r3, #43	@ 0x2b
 800b21c:	2909      	cmp	r1, #9
 800b21e:	7002      	strb	r2, [r0, #0]
 800b220:	7043      	strb	r3, [r0, #1]
 800b222:	dd29      	ble.n	800b278 <__exponent+0x68>
 800b224:	f10d 0307 	add.w	r3, sp, #7
 800b228:	461d      	mov	r5, r3
 800b22a:	270a      	movs	r7, #10
 800b22c:	461a      	mov	r2, r3
 800b22e:	fbb1 f6f7 	udiv	r6, r1, r7
 800b232:	fb07 1416 	mls	r4, r7, r6, r1
 800b236:	3430      	adds	r4, #48	@ 0x30
 800b238:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b23c:	460c      	mov	r4, r1
 800b23e:	2c63      	cmp	r4, #99	@ 0x63
 800b240:	f103 33ff 	add.w	r3, r3, #4294967295
 800b244:	4631      	mov	r1, r6
 800b246:	dcf1      	bgt.n	800b22c <__exponent+0x1c>
 800b248:	3130      	adds	r1, #48	@ 0x30
 800b24a:	1e94      	subs	r4, r2, #2
 800b24c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b250:	1c41      	adds	r1, r0, #1
 800b252:	4623      	mov	r3, r4
 800b254:	42ab      	cmp	r3, r5
 800b256:	d30a      	bcc.n	800b26e <__exponent+0x5e>
 800b258:	f10d 0309 	add.w	r3, sp, #9
 800b25c:	1a9b      	subs	r3, r3, r2
 800b25e:	42ac      	cmp	r4, r5
 800b260:	bf88      	it	hi
 800b262:	2300      	movhi	r3, #0
 800b264:	3302      	adds	r3, #2
 800b266:	4403      	add	r3, r0
 800b268:	1a18      	subs	r0, r3, r0
 800b26a:	b003      	add	sp, #12
 800b26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b26e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b272:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b276:	e7ed      	b.n	800b254 <__exponent+0x44>
 800b278:	2330      	movs	r3, #48	@ 0x30
 800b27a:	3130      	adds	r1, #48	@ 0x30
 800b27c:	7083      	strb	r3, [r0, #2]
 800b27e:	70c1      	strb	r1, [r0, #3]
 800b280:	1d03      	adds	r3, r0, #4
 800b282:	e7f1      	b.n	800b268 <__exponent+0x58>
 800b284:	0000      	movs	r0, r0
	...

0800b288 <_printf_float>:
 800b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28c:	b08d      	sub	sp, #52	@ 0x34
 800b28e:	460c      	mov	r4, r1
 800b290:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b294:	4616      	mov	r6, r2
 800b296:	461f      	mov	r7, r3
 800b298:	4605      	mov	r5, r0
 800b29a:	f000 fee9 	bl	800c070 <_localeconv_r>
 800b29e:	f8d0 b000 	ldr.w	fp, [r0]
 800b2a2:	4658      	mov	r0, fp
 800b2a4:	f7f5 f81c 	bl	80002e0 <strlen>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2ac:	f8d8 3000 	ldr.w	r3, [r8]
 800b2b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b2b4:	6822      	ldr	r2, [r4, #0]
 800b2b6:	9005      	str	r0, [sp, #20]
 800b2b8:	3307      	adds	r3, #7
 800b2ba:	f023 0307 	bic.w	r3, r3, #7
 800b2be:	f103 0108 	add.w	r1, r3, #8
 800b2c2:	f8c8 1000 	str.w	r1, [r8]
 800b2c6:	ed93 0b00 	vldr	d0, [r3]
 800b2ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b528 <_printf_float+0x2a0>
 800b2ce:	eeb0 7bc0 	vabs.f64	d7, d0
 800b2d2:	eeb4 7b46 	vcmp.f64	d7, d6
 800b2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800b2de:	dd24      	ble.n	800b32a <_printf_float+0xa2>
 800b2e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b2e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2e8:	d502      	bpl.n	800b2f0 <_printf_float+0x68>
 800b2ea:	232d      	movs	r3, #45	@ 0x2d
 800b2ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2f0:	498f      	ldr	r1, [pc, #572]	@ (800b530 <_printf_float+0x2a8>)
 800b2f2:	4b90      	ldr	r3, [pc, #576]	@ (800b534 <_printf_float+0x2ac>)
 800b2f4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800b2f8:	bf94      	ite	ls
 800b2fa:	4688      	movls	r8, r1
 800b2fc:	4698      	movhi	r8, r3
 800b2fe:	f022 0204 	bic.w	r2, r2, #4
 800b302:	2303      	movs	r3, #3
 800b304:	6123      	str	r3, [r4, #16]
 800b306:	6022      	str	r2, [r4, #0]
 800b308:	f04f 0a00 	mov.w	sl, #0
 800b30c:	9700      	str	r7, [sp, #0]
 800b30e:	4633      	mov	r3, r6
 800b310:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b312:	4621      	mov	r1, r4
 800b314:	4628      	mov	r0, r5
 800b316:	f000 f9d1 	bl	800b6bc <_printf_common>
 800b31a:	3001      	adds	r0, #1
 800b31c:	f040 8089 	bne.w	800b432 <_printf_float+0x1aa>
 800b320:	f04f 30ff 	mov.w	r0, #4294967295
 800b324:	b00d      	add	sp, #52	@ 0x34
 800b326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b32a:	eeb4 0b40 	vcmp.f64	d0, d0
 800b32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b332:	d709      	bvc.n	800b348 <_printf_float+0xc0>
 800b334:	ee10 3a90 	vmov	r3, s1
 800b338:	2b00      	cmp	r3, #0
 800b33a:	bfbc      	itt	lt
 800b33c:	232d      	movlt	r3, #45	@ 0x2d
 800b33e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b342:	497d      	ldr	r1, [pc, #500]	@ (800b538 <_printf_float+0x2b0>)
 800b344:	4b7d      	ldr	r3, [pc, #500]	@ (800b53c <_printf_float+0x2b4>)
 800b346:	e7d5      	b.n	800b2f4 <_printf_float+0x6c>
 800b348:	6863      	ldr	r3, [r4, #4]
 800b34a:	1c59      	adds	r1, r3, #1
 800b34c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800b350:	d139      	bne.n	800b3c6 <_printf_float+0x13e>
 800b352:	2306      	movs	r3, #6
 800b354:	6063      	str	r3, [r4, #4]
 800b356:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b35a:	2300      	movs	r3, #0
 800b35c:	6022      	str	r2, [r4, #0]
 800b35e:	9303      	str	r3, [sp, #12]
 800b360:	ab0a      	add	r3, sp, #40	@ 0x28
 800b362:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b366:	ab09      	add	r3, sp, #36	@ 0x24
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	6861      	ldr	r1, [r4, #4]
 800b36c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b370:	4628      	mov	r0, r5
 800b372:	f7ff fef9 	bl	800b168 <__cvt>
 800b376:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b37a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b37c:	4680      	mov	r8, r0
 800b37e:	d129      	bne.n	800b3d4 <_printf_float+0x14c>
 800b380:	1cc8      	adds	r0, r1, #3
 800b382:	db02      	blt.n	800b38a <_printf_float+0x102>
 800b384:	6863      	ldr	r3, [r4, #4]
 800b386:	4299      	cmp	r1, r3
 800b388:	dd41      	ble.n	800b40e <_printf_float+0x186>
 800b38a:	f1a9 0902 	sub.w	r9, r9, #2
 800b38e:	fa5f f989 	uxtb.w	r9, r9
 800b392:	3901      	subs	r1, #1
 800b394:	464a      	mov	r2, r9
 800b396:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b39a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b39c:	f7ff ff38 	bl	800b210 <__exponent>
 800b3a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3a2:	1813      	adds	r3, r2, r0
 800b3a4:	2a01      	cmp	r2, #1
 800b3a6:	4682      	mov	sl, r0
 800b3a8:	6123      	str	r3, [r4, #16]
 800b3aa:	dc02      	bgt.n	800b3b2 <_printf_float+0x12a>
 800b3ac:	6822      	ldr	r2, [r4, #0]
 800b3ae:	07d2      	lsls	r2, r2, #31
 800b3b0:	d501      	bpl.n	800b3b6 <_printf_float+0x12e>
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	6123      	str	r3, [r4, #16]
 800b3b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d0a6      	beq.n	800b30c <_printf_float+0x84>
 800b3be:	232d      	movs	r3, #45	@ 0x2d
 800b3c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3c4:	e7a2      	b.n	800b30c <_printf_float+0x84>
 800b3c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b3ca:	d1c4      	bne.n	800b356 <_printf_float+0xce>
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1c2      	bne.n	800b356 <_printf_float+0xce>
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e7bf      	b.n	800b354 <_printf_float+0xcc>
 800b3d4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b3d8:	d9db      	bls.n	800b392 <_printf_float+0x10a>
 800b3da:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800b3de:	d118      	bne.n	800b412 <_printf_float+0x18a>
 800b3e0:	2900      	cmp	r1, #0
 800b3e2:	6863      	ldr	r3, [r4, #4]
 800b3e4:	dd0b      	ble.n	800b3fe <_printf_float+0x176>
 800b3e6:	6121      	str	r1, [r4, #16]
 800b3e8:	b913      	cbnz	r3, 800b3f0 <_printf_float+0x168>
 800b3ea:	6822      	ldr	r2, [r4, #0]
 800b3ec:	07d0      	lsls	r0, r2, #31
 800b3ee:	d502      	bpl.n	800b3f6 <_printf_float+0x16e>
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	440b      	add	r3, r1
 800b3f4:	6123      	str	r3, [r4, #16]
 800b3f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b3f8:	f04f 0a00 	mov.w	sl, #0
 800b3fc:	e7db      	b.n	800b3b6 <_printf_float+0x12e>
 800b3fe:	b913      	cbnz	r3, 800b406 <_printf_float+0x17e>
 800b400:	6822      	ldr	r2, [r4, #0]
 800b402:	07d2      	lsls	r2, r2, #31
 800b404:	d501      	bpl.n	800b40a <_printf_float+0x182>
 800b406:	3302      	adds	r3, #2
 800b408:	e7f4      	b.n	800b3f4 <_printf_float+0x16c>
 800b40a:	2301      	movs	r3, #1
 800b40c:	e7f2      	b.n	800b3f4 <_printf_float+0x16c>
 800b40e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800b412:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b414:	4299      	cmp	r1, r3
 800b416:	db05      	blt.n	800b424 <_printf_float+0x19c>
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	6121      	str	r1, [r4, #16]
 800b41c:	07d8      	lsls	r0, r3, #31
 800b41e:	d5ea      	bpl.n	800b3f6 <_printf_float+0x16e>
 800b420:	1c4b      	adds	r3, r1, #1
 800b422:	e7e7      	b.n	800b3f4 <_printf_float+0x16c>
 800b424:	2900      	cmp	r1, #0
 800b426:	bfd4      	ite	le
 800b428:	f1c1 0202 	rsble	r2, r1, #2
 800b42c:	2201      	movgt	r2, #1
 800b42e:	4413      	add	r3, r2
 800b430:	e7e0      	b.n	800b3f4 <_printf_float+0x16c>
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	055a      	lsls	r2, r3, #21
 800b436:	d407      	bmi.n	800b448 <_printf_float+0x1c0>
 800b438:	6923      	ldr	r3, [r4, #16]
 800b43a:	4642      	mov	r2, r8
 800b43c:	4631      	mov	r1, r6
 800b43e:	4628      	mov	r0, r5
 800b440:	47b8      	blx	r7
 800b442:	3001      	adds	r0, #1
 800b444:	d12a      	bne.n	800b49c <_printf_float+0x214>
 800b446:	e76b      	b.n	800b320 <_printf_float+0x98>
 800b448:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b44c:	f240 80e0 	bls.w	800b610 <_printf_float+0x388>
 800b450:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b454:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b45c:	d133      	bne.n	800b4c6 <_printf_float+0x23e>
 800b45e:	4a38      	ldr	r2, [pc, #224]	@ (800b540 <_printf_float+0x2b8>)
 800b460:	2301      	movs	r3, #1
 800b462:	4631      	mov	r1, r6
 800b464:	4628      	mov	r0, r5
 800b466:	47b8      	blx	r7
 800b468:	3001      	adds	r0, #1
 800b46a:	f43f af59 	beq.w	800b320 <_printf_float+0x98>
 800b46e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b472:	4543      	cmp	r3, r8
 800b474:	db02      	blt.n	800b47c <_printf_float+0x1f4>
 800b476:	6823      	ldr	r3, [r4, #0]
 800b478:	07d8      	lsls	r0, r3, #31
 800b47a:	d50f      	bpl.n	800b49c <_printf_float+0x214>
 800b47c:	9b05      	ldr	r3, [sp, #20]
 800b47e:	465a      	mov	r2, fp
 800b480:	4631      	mov	r1, r6
 800b482:	4628      	mov	r0, r5
 800b484:	47b8      	blx	r7
 800b486:	3001      	adds	r0, #1
 800b488:	f43f af4a 	beq.w	800b320 <_printf_float+0x98>
 800b48c:	f04f 0900 	mov.w	r9, #0
 800b490:	f108 38ff 	add.w	r8, r8, #4294967295
 800b494:	f104 0a1a 	add.w	sl, r4, #26
 800b498:	45c8      	cmp	r8, r9
 800b49a:	dc09      	bgt.n	800b4b0 <_printf_float+0x228>
 800b49c:	6823      	ldr	r3, [r4, #0]
 800b49e:	079b      	lsls	r3, r3, #30
 800b4a0:	f100 8107 	bmi.w	800b6b2 <_printf_float+0x42a>
 800b4a4:	68e0      	ldr	r0, [r4, #12]
 800b4a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4a8:	4298      	cmp	r0, r3
 800b4aa:	bfb8      	it	lt
 800b4ac:	4618      	movlt	r0, r3
 800b4ae:	e739      	b.n	800b324 <_printf_float+0x9c>
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	4652      	mov	r2, sl
 800b4b4:	4631      	mov	r1, r6
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	47b8      	blx	r7
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	f43f af30 	beq.w	800b320 <_printf_float+0x98>
 800b4c0:	f109 0901 	add.w	r9, r9, #1
 800b4c4:	e7e8      	b.n	800b498 <_printf_float+0x210>
 800b4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	dc3b      	bgt.n	800b544 <_printf_float+0x2bc>
 800b4cc:	4a1c      	ldr	r2, [pc, #112]	@ (800b540 <_printf_float+0x2b8>)
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	4631      	mov	r1, r6
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	47b8      	blx	r7
 800b4d6:	3001      	adds	r0, #1
 800b4d8:	f43f af22 	beq.w	800b320 <_printf_float+0x98>
 800b4dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b4e0:	ea59 0303 	orrs.w	r3, r9, r3
 800b4e4:	d102      	bne.n	800b4ec <_printf_float+0x264>
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	07d9      	lsls	r1, r3, #31
 800b4ea:	d5d7      	bpl.n	800b49c <_printf_float+0x214>
 800b4ec:	9b05      	ldr	r3, [sp, #20]
 800b4ee:	465a      	mov	r2, fp
 800b4f0:	4631      	mov	r1, r6
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	47b8      	blx	r7
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	f43f af12 	beq.w	800b320 <_printf_float+0x98>
 800b4fc:	f04f 0a00 	mov.w	sl, #0
 800b500:	f104 0b1a 	add.w	fp, r4, #26
 800b504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b506:	425b      	negs	r3, r3
 800b508:	4553      	cmp	r3, sl
 800b50a:	dc01      	bgt.n	800b510 <_printf_float+0x288>
 800b50c:	464b      	mov	r3, r9
 800b50e:	e794      	b.n	800b43a <_printf_float+0x1b2>
 800b510:	2301      	movs	r3, #1
 800b512:	465a      	mov	r2, fp
 800b514:	4631      	mov	r1, r6
 800b516:	4628      	mov	r0, r5
 800b518:	47b8      	blx	r7
 800b51a:	3001      	adds	r0, #1
 800b51c:	f43f af00 	beq.w	800b320 <_printf_float+0x98>
 800b520:	f10a 0a01 	add.w	sl, sl, #1
 800b524:	e7ee      	b.n	800b504 <_printf_float+0x27c>
 800b526:	bf00      	nop
 800b528:	ffffffff 	.word	0xffffffff
 800b52c:	7fefffff 	.word	0x7fefffff
 800b530:	0800fb90 	.word	0x0800fb90
 800b534:	0800fb94 	.word	0x0800fb94
 800b538:	0800fb98 	.word	0x0800fb98
 800b53c:	0800fb9c 	.word	0x0800fb9c
 800b540:	0800fba0 	.word	0x0800fba0
 800b544:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b546:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b54a:	4553      	cmp	r3, sl
 800b54c:	bfa8      	it	ge
 800b54e:	4653      	movge	r3, sl
 800b550:	2b00      	cmp	r3, #0
 800b552:	4699      	mov	r9, r3
 800b554:	dc37      	bgt.n	800b5c6 <_printf_float+0x33e>
 800b556:	2300      	movs	r3, #0
 800b558:	9307      	str	r3, [sp, #28]
 800b55a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b55e:	f104 021a 	add.w	r2, r4, #26
 800b562:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b564:	9907      	ldr	r1, [sp, #28]
 800b566:	9306      	str	r3, [sp, #24]
 800b568:	eba3 0309 	sub.w	r3, r3, r9
 800b56c:	428b      	cmp	r3, r1
 800b56e:	dc31      	bgt.n	800b5d4 <_printf_float+0x34c>
 800b570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b572:	459a      	cmp	sl, r3
 800b574:	dc3b      	bgt.n	800b5ee <_printf_float+0x366>
 800b576:	6823      	ldr	r3, [r4, #0]
 800b578:	07da      	lsls	r2, r3, #31
 800b57a:	d438      	bmi.n	800b5ee <_printf_float+0x366>
 800b57c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b57e:	ebaa 0903 	sub.w	r9, sl, r3
 800b582:	9b06      	ldr	r3, [sp, #24]
 800b584:	ebaa 0303 	sub.w	r3, sl, r3
 800b588:	4599      	cmp	r9, r3
 800b58a:	bfa8      	it	ge
 800b58c:	4699      	movge	r9, r3
 800b58e:	f1b9 0f00 	cmp.w	r9, #0
 800b592:	dc34      	bgt.n	800b5fe <_printf_float+0x376>
 800b594:	f04f 0800 	mov.w	r8, #0
 800b598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b59c:	f104 0b1a 	add.w	fp, r4, #26
 800b5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5a2:	ebaa 0303 	sub.w	r3, sl, r3
 800b5a6:	eba3 0309 	sub.w	r3, r3, r9
 800b5aa:	4543      	cmp	r3, r8
 800b5ac:	f77f af76 	ble.w	800b49c <_printf_float+0x214>
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	465a      	mov	r2, fp
 800b5b4:	4631      	mov	r1, r6
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	47b8      	blx	r7
 800b5ba:	3001      	adds	r0, #1
 800b5bc:	f43f aeb0 	beq.w	800b320 <_printf_float+0x98>
 800b5c0:	f108 0801 	add.w	r8, r8, #1
 800b5c4:	e7ec      	b.n	800b5a0 <_printf_float+0x318>
 800b5c6:	4642      	mov	r2, r8
 800b5c8:	4631      	mov	r1, r6
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	47b8      	blx	r7
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	d1c1      	bne.n	800b556 <_printf_float+0x2ce>
 800b5d2:	e6a5      	b.n	800b320 <_printf_float+0x98>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4628      	mov	r0, r5
 800b5da:	9206      	str	r2, [sp, #24]
 800b5dc:	47b8      	blx	r7
 800b5de:	3001      	adds	r0, #1
 800b5e0:	f43f ae9e 	beq.w	800b320 <_printf_float+0x98>
 800b5e4:	9b07      	ldr	r3, [sp, #28]
 800b5e6:	9a06      	ldr	r2, [sp, #24]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	9307      	str	r3, [sp, #28]
 800b5ec:	e7b9      	b.n	800b562 <_printf_float+0x2da>
 800b5ee:	9b05      	ldr	r3, [sp, #20]
 800b5f0:	465a      	mov	r2, fp
 800b5f2:	4631      	mov	r1, r6
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	47b8      	blx	r7
 800b5f8:	3001      	adds	r0, #1
 800b5fa:	d1bf      	bne.n	800b57c <_printf_float+0x2f4>
 800b5fc:	e690      	b.n	800b320 <_printf_float+0x98>
 800b5fe:	9a06      	ldr	r2, [sp, #24]
 800b600:	464b      	mov	r3, r9
 800b602:	4442      	add	r2, r8
 800b604:	4631      	mov	r1, r6
 800b606:	4628      	mov	r0, r5
 800b608:	47b8      	blx	r7
 800b60a:	3001      	adds	r0, #1
 800b60c:	d1c2      	bne.n	800b594 <_printf_float+0x30c>
 800b60e:	e687      	b.n	800b320 <_printf_float+0x98>
 800b610:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b614:	f1b9 0f01 	cmp.w	r9, #1
 800b618:	dc01      	bgt.n	800b61e <_printf_float+0x396>
 800b61a:	07db      	lsls	r3, r3, #31
 800b61c:	d536      	bpl.n	800b68c <_printf_float+0x404>
 800b61e:	2301      	movs	r3, #1
 800b620:	4642      	mov	r2, r8
 800b622:	4631      	mov	r1, r6
 800b624:	4628      	mov	r0, r5
 800b626:	47b8      	blx	r7
 800b628:	3001      	adds	r0, #1
 800b62a:	f43f ae79 	beq.w	800b320 <_printf_float+0x98>
 800b62e:	9b05      	ldr	r3, [sp, #20]
 800b630:	465a      	mov	r2, fp
 800b632:	4631      	mov	r1, r6
 800b634:	4628      	mov	r0, r5
 800b636:	47b8      	blx	r7
 800b638:	3001      	adds	r0, #1
 800b63a:	f43f ae71 	beq.w	800b320 <_printf_float+0x98>
 800b63e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b642:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b64a:	f109 39ff 	add.w	r9, r9, #4294967295
 800b64e:	d018      	beq.n	800b682 <_printf_float+0x3fa>
 800b650:	464b      	mov	r3, r9
 800b652:	f108 0201 	add.w	r2, r8, #1
 800b656:	4631      	mov	r1, r6
 800b658:	4628      	mov	r0, r5
 800b65a:	47b8      	blx	r7
 800b65c:	3001      	adds	r0, #1
 800b65e:	d10c      	bne.n	800b67a <_printf_float+0x3f2>
 800b660:	e65e      	b.n	800b320 <_printf_float+0x98>
 800b662:	2301      	movs	r3, #1
 800b664:	465a      	mov	r2, fp
 800b666:	4631      	mov	r1, r6
 800b668:	4628      	mov	r0, r5
 800b66a:	47b8      	blx	r7
 800b66c:	3001      	adds	r0, #1
 800b66e:	f43f ae57 	beq.w	800b320 <_printf_float+0x98>
 800b672:	f108 0801 	add.w	r8, r8, #1
 800b676:	45c8      	cmp	r8, r9
 800b678:	dbf3      	blt.n	800b662 <_printf_float+0x3da>
 800b67a:	4653      	mov	r3, sl
 800b67c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b680:	e6dc      	b.n	800b43c <_printf_float+0x1b4>
 800b682:	f04f 0800 	mov.w	r8, #0
 800b686:	f104 0b1a 	add.w	fp, r4, #26
 800b68a:	e7f4      	b.n	800b676 <_printf_float+0x3ee>
 800b68c:	2301      	movs	r3, #1
 800b68e:	4642      	mov	r2, r8
 800b690:	e7e1      	b.n	800b656 <_printf_float+0x3ce>
 800b692:	2301      	movs	r3, #1
 800b694:	464a      	mov	r2, r9
 800b696:	4631      	mov	r1, r6
 800b698:	4628      	mov	r0, r5
 800b69a:	47b8      	blx	r7
 800b69c:	3001      	adds	r0, #1
 800b69e:	f43f ae3f 	beq.w	800b320 <_printf_float+0x98>
 800b6a2:	f108 0801 	add.w	r8, r8, #1
 800b6a6:	68e3      	ldr	r3, [r4, #12]
 800b6a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6aa:	1a5b      	subs	r3, r3, r1
 800b6ac:	4543      	cmp	r3, r8
 800b6ae:	dcf0      	bgt.n	800b692 <_printf_float+0x40a>
 800b6b0:	e6f8      	b.n	800b4a4 <_printf_float+0x21c>
 800b6b2:	f04f 0800 	mov.w	r8, #0
 800b6b6:	f104 0919 	add.w	r9, r4, #25
 800b6ba:	e7f4      	b.n	800b6a6 <_printf_float+0x41e>

0800b6bc <_printf_common>:
 800b6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6c0:	4616      	mov	r6, r2
 800b6c2:	4698      	mov	r8, r3
 800b6c4:	688a      	ldr	r2, [r1, #8]
 800b6c6:	690b      	ldr	r3, [r1, #16]
 800b6c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	bfb8      	it	lt
 800b6d0:	4613      	movlt	r3, r2
 800b6d2:	6033      	str	r3, [r6, #0]
 800b6d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b6d8:	4607      	mov	r7, r0
 800b6da:	460c      	mov	r4, r1
 800b6dc:	b10a      	cbz	r2, 800b6e2 <_printf_common+0x26>
 800b6de:	3301      	adds	r3, #1
 800b6e0:	6033      	str	r3, [r6, #0]
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	0699      	lsls	r1, r3, #26
 800b6e6:	bf42      	ittt	mi
 800b6e8:	6833      	ldrmi	r3, [r6, #0]
 800b6ea:	3302      	addmi	r3, #2
 800b6ec:	6033      	strmi	r3, [r6, #0]
 800b6ee:	6825      	ldr	r5, [r4, #0]
 800b6f0:	f015 0506 	ands.w	r5, r5, #6
 800b6f4:	d106      	bne.n	800b704 <_printf_common+0x48>
 800b6f6:	f104 0a19 	add.w	sl, r4, #25
 800b6fa:	68e3      	ldr	r3, [r4, #12]
 800b6fc:	6832      	ldr	r2, [r6, #0]
 800b6fe:	1a9b      	subs	r3, r3, r2
 800b700:	42ab      	cmp	r3, r5
 800b702:	dc26      	bgt.n	800b752 <_printf_common+0x96>
 800b704:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b708:	6822      	ldr	r2, [r4, #0]
 800b70a:	3b00      	subs	r3, #0
 800b70c:	bf18      	it	ne
 800b70e:	2301      	movne	r3, #1
 800b710:	0692      	lsls	r2, r2, #26
 800b712:	d42b      	bmi.n	800b76c <_printf_common+0xb0>
 800b714:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b718:	4641      	mov	r1, r8
 800b71a:	4638      	mov	r0, r7
 800b71c:	47c8      	blx	r9
 800b71e:	3001      	adds	r0, #1
 800b720:	d01e      	beq.n	800b760 <_printf_common+0xa4>
 800b722:	6823      	ldr	r3, [r4, #0]
 800b724:	6922      	ldr	r2, [r4, #16]
 800b726:	f003 0306 	and.w	r3, r3, #6
 800b72a:	2b04      	cmp	r3, #4
 800b72c:	bf02      	ittt	eq
 800b72e:	68e5      	ldreq	r5, [r4, #12]
 800b730:	6833      	ldreq	r3, [r6, #0]
 800b732:	1aed      	subeq	r5, r5, r3
 800b734:	68a3      	ldr	r3, [r4, #8]
 800b736:	bf0c      	ite	eq
 800b738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b73c:	2500      	movne	r5, #0
 800b73e:	4293      	cmp	r3, r2
 800b740:	bfc4      	itt	gt
 800b742:	1a9b      	subgt	r3, r3, r2
 800b744:	18ed      	addgt	r5, r5, r3
 800b746:	2600      	movs	r6, #0
 800b748:	341a      	adds	r4, #26
 800b74a:	42b5      	cmp	r5, r6
 800b74c:	d11a      	bne.n	800b784 <_printf_common+0xc8>
 800b74e:	2000      	movs	r0, #0
 800b750:	e008      	b.n	800b764 <_printf_common+0xa8>
 800b752:	2301      	movs	r3, #1
 800b754:	4652      	mov	r2, sl
 800b756:	4641      	mov	r1, r8
 800b758:	4638      	mov	r0, r7
 800b75a:	47c8      	blx	r9
 800b75c:	3001      	adds	r0, #1
 800b75e:	d103      	bne.n	800b768 <_printf_common+0xac>
 800b760:	f04f 30ff 	mov.w	r0, #4294967295
 800b764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b768:	3501      	adds	r5, #1
 800b76a:	e7c6      	b.n	800b6fa <_printf_common+0x3e>
 800b76c:	18e1      	adds	r1, r4, r3
 800b76e:	1c5a      	adds	r2, r3, #1
 800b770:	2030      	movs	r0, #48	@ 0x30
 800b772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b776:	4422      	add	r2, r4
 800b778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b77c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b780:	3302      	adds	r3, #2
 800b782:	e7c7      	b.n	800b714 <_printf_common+0x58>
 800b784:	2301      	movs	r3, #1
 800b786:	4622      	mov	r2, r4
 800b788:	4641      	mov	r1, r8
 800b78a:	4638      	mov	r0, r7
 800b78c:	47c8      	blx	r9
 800b78e:	3001      	adds	r0, #1
 800b790:	d0e6      	beq.n	800b760 <_printf_common+0xa4>
 800b792:	3601      	adds	r6, #1
 800b794:	e7d9      	b.n	800b74a <_printf_common+0x8e>
	...

0800b798 <_printf_i>:
 800b798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b79c:	7e0f      	ldrb	r7, [r1, #24]
 800b79e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b7a0:	2f78      	cmp	r7, #120	@ 0x78
 800b7a2:	4691      	mov	r9, r2
 800b7a4:	4680      	mov	r8, r0
 800b7a6:	460c      	mov	r4, r1
 800b7a8:	469a      	mov	sl, r3
 800b7aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b7ae:	d807      	bhi.n	800b7c0 <_printf_i+0x28>
 800b7b0:	2f62      	cmp	r7, #98	@ 0x62
 800b7b2:	d80a      	bhi.n	800b7ca <_printf_i+0x32>
 800b7b4:	2f00      	cmp	r7, #0
 800b7b6:	f000 80d2 	beq.w	800b95e <_printf_i+0x1c6>
 800b7ba:	2f58      	cmp	r7, #88	@ 0x58
 800b7bc:	f000 80b9 	beq.w	800b932 <_printf_i+0x19a>
 800b7c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b7c8:	e03a      	b.n	800b840 <_printf_i+0xa8>
 800b7ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b7ce:	2b15      	cmp	r3, #21
 800b7d0:	d8f6      	bhi.n	800b7c0 <_printf_i+0x28>
 800b7d2:	a101      	add	r1, pc, #4	@ (adr r1, 800b7d8 <_printf_i+0x40>)
 800b7d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7d8:	0800b831 	.word	0x0800b831
 800b7dc:	0800b845 	.word	0x0800b845
 800b7e0:	0800b7c1 	.word	0x0800b7c1
 800b7e4:	0800b7c1 	.word	0x0800b7c1
 800b7e8:	0800b7c1 	.word	0x0800b7c1
 800b7ec:	0800b7c1 	.word	0x0800b7c1
 800b7f0:	0800b845 	.word	0x0800b845
 800b7f4:	0800b7c1 	.word	0x0800b7c1
 800b7f8:	0800b7c1 	.word	0x0800b7c1
 800b7fc:	0800b7c1 	.word	0x0800b7c1
 800b800:	0800b7c1 	.word	0x0800b7c1
 800b804:	0800b945 	.word	0x0800b945
 800b808:	0800b86f 	.word	0x0800b86f
 800b80c:	0800b8ff 	.word	0x0800b8ff
 800b810:	0800b7c1 	.word	0x0800b7c1
 800b814:	0800b7c1 	.word	0x0800b7c1
 800b818:	0800b967 	.word	0x0800b967
 800b81c:	0800b7c1 	.word	0x0800b7c1
 800b820:	0800b86f 	.word	0x0800b86f
 800b824:	0800b7c1 	.word	0x0800b7c1
 800b828:	0800b7c1 	.word	0x0800b7c1
 800b82c:	0800b907 	.word	0x0800b907
 800b830:	6833      	ldr	r3, [r6, #0]
 800b832:	1d1a      	adds	r2, r3, #4
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	6032      	str	r2, [r6, #0]
 800b838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b83c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b840:	2301      	movs	r3, #1
 800b842:	e09d      	b.n	800b980 <_printf_i+0x1e8>
 800b844:	6833      	ldr	r3, [r6, #0]
 800b846:	6820      	ldr	r0, [r4, #0]
 800b848:	1d19      	adds	r1, r3, #4
 800b84a:	6031      	str	r1, [r6, #0]
 800b84c:	0606      	lsls	r6, r0, #24
 800b84e:	d501      	bpl.n	800b854 <_printf_i+0xbc>
 800b850:	681d      	ldr	r5, [r3, #0]
 800b852:	e003      	b.n	800b85c <_printf_i+0xc4>
 800b854:	0645      	lsls	r5, r0, #25
 800b856:	d5fb      	bpl.n	800b850 <_printf_i+0xb8>
 800b858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b85c:	2d00      	cmp	r5, #0
 800b85e:	da03      	bge.n	800b868 <_printf_i+0xd0>
 800b860:	232d      	movs	r3, #45	@ 0x2d
 800b862:	426d      	negs	r5, r5
 800b864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b868:	4859      	ldr	r0, [pc, #356]	@ (800b9d0 <_printf_i+0x238>)
 800b86a:	230a      	movs	r3, #10
 800b86c:	e011      	b.n	800b892 <_printf_i+0xfa>
 800b86e:	6821      	ldr	r1, [r4, #0]
 800b870:	6833      	ldr	r3, [r6, #0]
 800b872:	0608      	lsls	r0, r1, #24
 800b874:	f853 5b04 	ldr.w	r5, [r3], #4
 800b878:	d402      	bmi.n	800b880 <_printf_i+0xe8>
 800b87a:	0649      	lsls	r1, r1, #25
 800b87c:	bf48      	it	mi
 800b87e:	b2ad      	uxthmi	r5, r5
 800b880:	2f6f      	cmp	r7, #111	@ 0x6f
 800b882:	4853      	ldr	r0, [pc, #332]	@ (800b9d0 <_printf_i+0x238>)
 800b884:	6033      	str	r3, [r6, #0]
 800b886:	bf14      	ite	ne
 800b888:	230a      	movne	r3, #10
 800b88a:	2308      	moveq	r3, #8
 800b88c:	2100      	movs	r1, #0
 800b88e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b892:	6866      	ldr	r6, [r4, #4]
 800b894:	60a6      	str	r6, [r4, #8]
 800b896:	2e00      	cmp	r6, #0
 800b898:	bfa2      	ittt	ge
 800b89a:	6821      	ldrge	r1, [r4, #0]
 800b89c:	f021 0104 	bicge.w	r1, r1, #4
 800b8a0:	6021      	strge	r1, [r4, #0]
 800b8a2:	b90d      	cbnz	r5, 800b8a8 <_printf_i+0x110>
 800b8a4:	2e00      	cmp	r6, #0
 800b8a6:	d04b      	beq.n	800b940 <_printf_i+0x1a8>
 800b8a8:	4616      	mov	r6, r2
 800b8aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8ae:	fb03 5711 	mls	r7, r3, r1, r5
 800b8b2:	5dc7      	ldrb	r7, [r0, r7]
 800b8b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b8b8:	462f      	mov	r7, r5
 800b8ba:	42bb      	cmp	r3, r7
 800b8bc:	460d      	mov	r5, r1
 800b8be:	d9f4      	bls.n	800b8aa <_printf_i+0x112>
 800b8c0:	2b08      	cmp	r3, #8
 800b8c2:	d10b      	bne.n	800b8dc <_printf_i+0x144>
 800b8c4:	6823      	ldr	r3, [r4, #0]
 800b8c6:	07df      	lsls	r7, r3, #31
 800b8c8:	d508      	bpl.n	800b8dc <_printf_i+0x144>
 800b8ca:	6923      	ldr	r3, [r4, #16]
 800b8cc:	6861      	ldr	r1, [r4, #4]
 800b8ce:	4299      	cmp	r1, r3
 800b8d0:	bfde      	ittt	le
 800b8d2:	2330      	movle	r3, #48	@ 0x30
 800b8d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b8d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b8dc:	1b92      	subs	r2, r2, r6
 800b8de:	6122      	str	r2, [r4, #16]
 800b8e0:	f8cd a000 	str.w	sl, [sp]
 800b8e4:	464b      	mov	r3, r9
 800b8e6:	aa03      	add	r2, sp, #12
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	4640      	mov	r0, r8
 800b8ec:	f7ff fee6 	bl	800b6bc <_printf_common>
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	d14a      	bne.n	800b98a <_printf_i+0x1f2>
 800b8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f8:	b004      	add	sp, #16
 800b8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	f043 0320 	orr.w	r3, r3, #32
 800b904:	6023      	str	r3, [r4, #0]
 800b906:	4833      	ldr	r0, [pc, #204]	@ (800b9d4 <_printf_i+0x23c>)
 800b908:	2778      	movs	r7, #120	@ 0x78
 800b90a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b90e:	6823      	ldr	r3, [r4, #0]
 800b910:	6831      	ldr	r1, [r6, #0]
 800b912:	061f      	lsls	r7, r3, #24
 800b914:	f851 5b04 	ldr.w	r5, [r1], #4
 800b918:	d402      	bmi.n	800b920 <_printf_i+0x188>
 800b91a:	065f      	lsls	r7, r3, #25
 800b91c:	bf48      	it	mi
 800b91e:	b2ad      	uxthmi	r5, r5
 800b920:	6031      	str	r1, [r6, #0]
 800b922:	07d9      	lsls	r1, r3, #31
 800b924:	bf44      	itt	mi
 800b926:	f043 0320 	orrmi.w	r3, r3, #32
 800b92a:	6023      	strmi	r3, [r4, #0]
 800b92c:	b11d      	cbz	r5, 800b936 <_printf_i+0x19e>
 800b92e:	2310      	movs	r3, #16
 800b930:	e7ac      	b.n	800b88c <_printf_i+0xf4>
 800b932:	4827      	ldr	r0, [pc, #156]	@ (800b9d0 <_printf_i+0x238>)
 800b934:	e7e9      	b.n	800b90a <_printf_i+0x172>
 800b936:	6823      	ldr	r3, [r4, #0]
 800b938:	f023 0320 	bic.w	r3, r3, #32
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	e7f6      	b.n	800b92e <_printf_i+0x196>
 800b940:	4616      	mov	r6, r2
 800b942:	e7bd      	b.n	800b8c0 <_printf_i+0x128>
 800b944:	6833      	ldr	r3, [r6, #0]
 800b946:	6825      	ldr	r5, [r4, #0]
 800b948:	6961      	ldr	r1, [r4, #20]
 800b94a:	1d18      	adds	r0, r3, #4
 800b94c:	6030      	str	r0, [r6, #0]
 800b94e:	062e      	lsls	r6, r5, #24
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	d501      	bpl.n	800b958 <_printf_i+0x1c0>
 800b954:	6019      	str	r1, [r3, #0]
 800b956:	e002      	b.n	800b95e <_printf_i+0x1c6>
 800b958:	0668      	lsls	r0, r5, #25
 800b95a:	d5fb      	bpl.n	800b954 <_printf_i+0x1bc>
 800b95c:	8019      	strh	r1, [r3, #0]
 800b95e:	2300      	movs	r3, #0
 800b960:	6123      	str	r3, [r4, #16]
 800b962:	4616      	mov	r6, r2
 800b964:	e7bc      	b.n	800b8e0 <_printf_i+0x148>
 800b966:	6833      	ldr	r3, [r6, #0]
 800b968:	1d1a      	adds	r2, r3, #4
 800b96a:	6032      	str	r2, [r6, #0]
 800b96c:	681e      	ldr	r6, [r3, #0]
 800b96e:	6862      	ldr	r2, [r4, #4]
 800b970:	2100      	movs	r1, #0
 800b972:	4630      	mov	r0, r6
 800b974:	f7f4 fc64 	bl	8000240 <memchr>
 800b978:	b108      	cbz	r0, 800b97e <_printf_i+0x1e6>
 800b97a:	1b80      	subs	r0, r0, r6
 800b97c:	6060      	str	r0, [r4, #4]
 800b97e:	6863      	ldr	r3, [r4, #4]
 800b980:	6123      	str	r3, [r4, #16]
 800b982:	2300      	movs	r3, #0
 800b984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b988:	e7aa      	b.n	800b8e0 <_printf_i+0x148>
 800b98a:	6923      	ldr	r3, [r4, #16]
 800b98c:	4632      	mov	r2, r6
 800b98e:	4649      	mov	r1, r9
 800b990:	4640      	mov	r0, r8
 800b992:	47d0      	blx	sl
 800b994:	3001      	adds	r0, #1
 800b996:	d0ad      	beq.n	800b8f4 <_printf_i+0x15c>
 800b998:	6823      	ldr	r3, [r4, #0]
 800b99a:	079b      	lsls	r3, r3, #30
 800b99c:	d413      	bmi.n	800b9c6 <_printf_i+0x22e>
 800b99e:	68e0      	ldr	r0, [r4, #12]
 800b9a0:	9b03      	ldr	r3, [sp, #12]
 800b9a2:	4298      	cmp	r0, r3
 800b9a4:	bfb8      	it	lt
 800b9a6:	4618      	movlt	r0, r3
 800b9a8:	e7a6      	b.n	800b8f8 <_printf_i+0x160>
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	4632      	mov	r2, r6
 800b9ae:	4649      	mov	r1, r9
 800b9b0:	4640      	mov	r0, r8
 800b9b2:	47d0      	blx	sl
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	d09d      	beq.n	800b8f4 <_printf_i+0x15c>
 800b9b8:	3501      	adds	r5, #1
 800b9ba:	68e3      	ldr	r3, [r4, #12]
 800b9bc:	9903      	ldr	r1, [sp, #12]
 800b9be:	1a5b      	subs	r3, r3, r1
 800b9c0:	42ab      	cmp	r3, r5
 800b9c2:	dcf2      	bgt.n	800b9aa <_printf_i+0x212>
 800b9c4:	e7eb      	b.n	800b99e <_printf_i+0x206>
 800b9c6:	2500      	movs	r5, #0
 800b9c8:	f104 0619 	add.w	r6, r4, #25
 800b9cc:	e7f5      	b.n	800b9ba <_printf_i+0x222>
 800b9ce:	bf00      	nop
 800b9d0:	0800fba2 	.word	0x0800fba2
 800b9d4:	0800fbb3 	.word	0x0800fbb3

0800b9d8 <_scanf_float>:
 800b9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9dc:	b087      	sub	sp, #28
 800b9de:	4617      	mov	r7, r2
 800b9e0:	9303      	str	r3, [sp, #12]
 800b9e2:	688b      	ldr	r3, [r1, #8]
 800b9e4:	1e5a      	subs	r2, r3, #1
 800b9e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b9ea:	bf81      	itttt	hi
 800b9ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b9f0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b9f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b9f8:	608b      	strhi	r3, [r1, #8]
 800b9fa:	680b      	ldr	r3, [r1, #0]
 800b9fc:	460a      	mov	r2, r1
 800b9fe:	f04f 0500 	mov.w	r5, #0
 800ba02:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ba06:	f842 3b1c 	str.w	r3, [r2], #28
 800ba0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ba0e:	4680      	mov	r8, r0
 800ba10:	460c      	mov	r4, r1
 800ba12:	bf98      	it	ls
 800ba14:	f04f 0b00 	movls.w	fp, #0
 800ba18:	9201      	str	r2, [sp, #4]
 800ba1a:	4616      	mov	r6, r2
 800ba1c:	46aa      	mov	sl, r5
 800ba1e:	46a9      	mov	r9, r5
 800ba20:	9502      	str	r5, [sp, #8]
 800ba22:	68a2      	ldr	r2, [r4, #8]
 800ba24:	b152      	cbz	r2, 800ba3c <_scanf_float+0x64>
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	2b4e      	cmp	r3, #78	@ 0x4e
 800ba2c:	d864      	bhi.n	800baf8 <_scanf_float+0x120>
 800ba2e:	2b40      	cmp	r3, #64	@ 0x40
 800ba30:	d83c      	bhi.n	800baac <_scanf_float+0xd4>
 800ba32:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ba36:	b2c8      	uxtb	r0, r1
 800ba38:	280e      	cmp	r0, #14
 800ba3a:	d93a      	bls.n	800bab2 <_scanf_float+0xda>
 800ba3c:	f1b9 0f00 	cmp.w	r9, #0
 800ba40:	d003      	beq.n	800ba4a <_scanf_float+0x72>
 800ba42:	6823      	ldr	r3, [r4, #0]
 800ba44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba48:	6023      	str	r3, [r4, #0]
 800ba4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba4e:	f1ba 0f01 	cmp.w	sl, #1
 800ba52:	f200 8117 	bhi.w	800bc84 <_scanf_float+0x2ac>
 800ba56:	9b01      	ldr	r3, [sp, #4]
 800ba58:	429e      	cmp	r6, r3
 800ba5a:	f200 8108 	bhi.w	800bc6e <_scanf_float+0x296>
 800ba5e:	2001      	movs	r0, #1
 800ba60:	b007      	add	sp, #28
 800ba62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba66:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ba6a:	2a0d      	cmp	r2, #13
 800ba6c:	d8e6      	bhi.n	800ba3c <_scanf_float+0x64>
 800ba6e:	a101      	add	r1, pc, #4	@ (adr r1, 800ba74 <_scanf_float+0x9c>)
 800ba70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ba74:	0800bbbb 	.word	0x0800bbbb
 800ba78:	0800ba3d 	.word	0x0800ba3d
 800ba7c:	0800ba3d 	.word	0x0800ba3d
 800ba80:	0800ba3d 	.word	0x0800ba3d
 800ba84:	0800bc1b 	.word	0x0800bc1b
 800ba88:	0800bbf3 	.word	0x0800bbf3
 800ba8c:	0800ba3d 	.word	0x0800ba3d
 800ba90:	0800ba3d 	.word	0x0800ba3d
 800ba94:	0800bbc9 	.word	0x0800bbc9
 800ba98:	0800ba3d 	.word	0x0800ba3d
 800ba9c:	0800ba3d 	.word	0x0800ba3d
 800baa0:	0800ba3d 	.word	0x0800ba3d
 800baa4:	0800ba3d 	.word	0x0800ba3d
 800baa8:	0800bb81 	.word	0x0800bb81
 800baac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800bab0:	e7db      	b.n	800ba6a <_scanf_float+0x92>
 800bab2:	290e      	cmp	r1, #14
 800bab4:	d8c2      	bhi.n	800ba3c <_scanf_float+0x64>
 800bab6:	a001      	add	r0, pc, #4	@ (adr r0, 800babc <_scanf_float+0xe4>)
 800bab8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800babc:	0800bb71 	.word	0x0800bb71
 800bac0:	0800ba3d 	.word	0x0800ba3d
 800bac4:	0800bb71 	.word	0x0800bb71
 800bac8:	0800bc07 	.word	0x0800bc07
 800bacc:	0800ba3d 	.word	0x0800ba3d
 800bad0:	0800bb19 	.word	0x0800bb19
 800bad4:	0800bb57 	.word	0x0800bb57
 800bad8:	0800bb57 	.word	0x0800bb57
 800badc:	0800bb57 	.word	0x0800bb57
 800bae0:	0800bb57 	.word	0x0800bb57
 800bae4:	0800bb57 	.word	0x0800bb57
 800bae8:	0800bb57 	.word	0x0800bb57
 800baec:	0800bb57 	.word	0x0800bb57
 800baf0:	0800bb57 	.word	0x0800bb57
 800baf4:	0800bb57 	.word	0x0800bb57
 800baf8:	2b6e      	cmp	r3, #110	@ 0x6e
 800bafa:	d809      	bhi.n	800bb10 <_scanf_float+0x138>
 800bafc:	2b60      	cmp	r3, #96	@ 0x60
 800bafe:	d8b2      	bhi.n	800ba66 <_scanf_float+0x8e>
 800bb00:	2b54      	cmp	r3, #84	@ 0x54
 800bb02:	d07b      	beq.n	800bbfc <_scanf_float+0x224>
 800bb04:	2b59      	cmp	r3, #89	@ 0x59
 800bb06:	d199      	bne.n	800ba3c <_scanf_float+0x64>
 800bb08:	2d07      	cmp	r5, #7
 800bb0a:	d197      	bne.n	800ba3c <_scanf_float+0x64>
 800bb0c:	2508      	movs	r5, #8
 800bb0e:	e02c      	b.n	800bb6a <_scanf_float+0x192>
 800bb10:	2b74      	cmp	r3, #116	@ 0x74
 800bb12:	d073      	beq.n	800bbfc <_scanf_float+0x224>
 800bb14:	2b79      	cmp	r3, #121	@ 0x79
 800bb16:	e7f6      	b.n	800bb06 <_scanf_float+0x12e>
 800bb18:	6821      	ldr	r1, [r4, #0]
 800bb1a:	05c8      	lsls	r0, r1, #23
 800bb1c:	d51b      	bpl.n	800bb56 <_scanf_float+0x17e>
 800bb1e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bb22:	6021      	str	r1, [r4, #0]
 800bb24:	f109 0901 	add.w	r9, r9, #1
 800bb28:	f1bb 0f00 	cmp.w	fp, #0
 800bb2c:	d003      	beq.n	800bb36 <_scanf_float+0x15e>
 800bb2e:	3201      	adds	r2, #1
 800bb30:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb34:	60a2      	str	r2, [r4, #8]
 800bb36:	68a3      	ldr	r3, [r4, #8]
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	60a3      	str	r3, [r4, #8]
 800bb3c:	6923      	ldr	r3, [r4, #16]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	6123      	str	r3, [r4, #16]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	3b01      	subs	r3, #1
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	607b      	str	r3, [r7, #4]
 800bb4a:	f340 8087 	ble.w	800bc5c <_scanf_float+0x284>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	3301      	adds	r3, #1
 800bb52:	603b      	str	r3, [r7, #0]
 800bb54:	e765      	b.n	800ba22 <_scanf_float+0x4a>
 800bb56:	eb1a 0105 	adds.w	r1, sl, r5
 800bb5a:	f47f af6f 	bne.w	800ba3c <_scanf_float+0x64>
 800bb5e:	6822      	ldr	r2, [r4, #0]
 800bb60:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bb64:	6022      	str	r2, [r4, #0]
 800bb66:	460d      	mov	r5, r1
 800bb68:	468a      	mov	sl, r1
 800bb6a:	f806 3b01 	strb.w	r3, [r6], #1
 800bb6e:	e7e2      	b.n	800bb36 <_scanf_float+0x15e>
 800bb70:	6822      	ldr	r2, [r4, #0]
 800bb72:	0610      	lsls	r0, r2, #24
 800bb74:	f57f af62 	bpl.w	800ba3c <_scanf_float+0x64>
 800bb78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bb7c:	6022      	str	r2, [r4, #0]
 800bb7e:	e7f4      	b.n	800bb6a <_scanf_float+0x192>
 800bb80:	f1ba 0f00 	cmp.w	sl, #0
 800bb84:	d10e      	bne.n	800bba4 <_scanf_float+0x1cc>
 800bb86:	f1b9 0f00 	cmp.w	r9, #0
 800bb8a:	d10e      	bne.n	800bbaa <_scanf_float+0x1d2>
 800bb8c:	6822      	ldr	r2, [r4, #0]
 800bb8e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bb92:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bb96:	d108      	bne.n	800bbaa <_scanf_float+0x1d2>
 800bb98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bb9c:	6022      	str	r2, [r4, #0]
 800bb9e:	f04f 0a01 	mov.w	sl, #1
 800bba2:	e7e2      	b.n	800bb6a <_scanf_float+0x192>
 800bba4:	f1ba 0f02 	cmp.w	sl, #2
 800bba8:	d055      	beq.n	800bc56 <_scanf_float+0x27e>
 800bbaa:	2d01      	cmp	r5, #1
 800bbac:	d002      	beq.n	800bbb4 <_scanf_float+0x1dc>
 800bbae:	2d04      	cmp	r5, #4
 800bbb0:	f47f af44 	bne.w	800ba3c <_scanf_float+0x64>
 800bbb4:	3501      	adds	r5, #1
 800bbb6:	b2ed      	uxtb	r5, r5
 800bbb8:	e7d7      	b.n	800bb6a <_scanf_float+0x192>
 800bbba:	f1ba 0f01 	cmp.w	sl, #1
 800bbbe:	f47f af3d 	bne.w	800ba3c <_scanf_float+0x64>
 800bbc2:	f04f 0a02 	mov.w	sl, #2
 800bbc6:	e7d0      	b.n	800bb6a <_scanf_float+0x192>
 800bbc8:	b97d      	cbnz	r5, 800bbea <_scanf_float+0x212>
 800bbca:	f1b9 0f00 	cmp.w	r9, #0
 800bbce:	f47f af38 	bne.w	800ba42 <_scanf_float+0x6a>
 800bbd2:	6822      	ldr	r2, [r4, #0]
 800bbd4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bbd8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bbdc:	f040 8101 	bne.w	800bde2 <_scanf_float+0x40a>
 800bbe0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bbe4:	6022      	str	r2, [r4, #0]
 800bbe6:	2501      	movs	r5, #1
 800bbe8:	e7bf      	b.n	800bb6a <_scanf_float+0x192>
 800bbea:	2d03      	cmp	r5, #3
 800bbec:	d0e2      	beq.n	800bbb4 <_scanf_float+0x1dc>
 800bbee:	2d05      	cmp	r5, #5
 800bbf0:	e7de      	b.n	800bbb0 <_scanf_float+0x1d8>
 800bbf2:	2d02      	cmp	r5, #2
 800bbf4:	f47f af22 	bne.w	800ba3c <_scanf_float+0x64>
 800bbf8:	2503      	movs	r5, #3
 800bbfa:	e7b6      	b.n	800bb6a <_scanf_float+0x192>
 800bbfc:	2d06      	cmp	r5, #6
 800bbfe:	f47f af1d 	bne.w	800ba3c <_scanf_float+0x64>
 800bc02:	2507      	movs	r5, #7
 800bc04:	e7b1      	b.n	800bb6a <_scanf_float+0x192>
 800bc06:	6822      	ldr	r2, [r4, #0]
 800bc08:	0591      	lsls	r1, r2, #22
 800bc0a:	f57f af17 	bpl.w	800ba3c <_scanf_float+0x64>
 800bc0e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bc12:	6022      	str	r2, [r4, #0]
 800bc14:	f8cd 9008 	str.w	r9, [sp, #8]
 800bc18:	e7a7      	b.n	800bb6a <_scanf_float+0x192>
 800bc1a:	6822      	ldr	r2, [r4, #0]
 800bc1c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bc20:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bc24:	d006      	beq.n	800bc34 <_scanf_float+0x25c>
 800bc26:	0550      	lsls	r0, r2, #21
 800bc28:	f57f af08 	bpl.w	800ba3c <_scanf_float+0x64>
 800bc2c:	f1b9 0f00 	cmp.w	r9, #0
 800bc30:	f000 80d7 	beq.w	800bde2 <_scanf_float+0x40a>
 800bc34:	0591      	lsls	r1, r2, #22
 800bc36:	bf58      	it	pl
 800bc38:	9902      	ldrpl	r1, [sp, #8]
 800bc3a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bc3e:	bf58      	it	pl
 800bc40:	eba9 0101 	subpl.w	r1, r9, r1
 800bc44:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bc48:	bf58      	it	pl
 800bc4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bc4e:	6022      	str	r2, [r4, #0]
 800bc50:	f04f 0900 	mov.w	r9, #0
 800bc54:	e789      	b.n	800bb6a <_scanf_float+0x192>
 800bc56:	f04f 0a03 	mov.w	sl, #3
 800bc5a:	e786      	b.n	800bb6a <_scanf_float+0x192>
 800bc5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bc60:	4639      	mov	r1, r7
 800bc62:	4640      	mov	r0, r8
 800bc64:	4798      	blx	r3
 800bc66:	2800      	cmp	r0, #0
 800bc68:	f43f aedb 	beq.w	800ba22 <_scanf_float+0x4a>
 800bc6c:	e6e6      	b.n	800ba3c <_scanf_float+0x64>
 800bc6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc76:	463a      	mov	r2, r7
 800bc78:	4640      	mov	r0, r8
 800bc7a:	4798      	blx	r3
 800bc7c:	6923      	ldr	r3, [r4, #16]
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	6123      	str	r3, [r4, #16]
 800bc82:	e6e8      	b.n	800ba56 <_scanf_float+0x7e>
 800bc84:	1e6b      	subs	r3, r5, #1
 800bc86:	2b06      	cmp	r3, #6
 800bc88:	d824      	bhi.n	800bcd4 <_scanf_float+0x2fc>
 800bc8a:	2d02      	cmp	r5, #2
 800bc8c:	d836      	bhi.n	800bcfc <_scanf_float+0x324>
 800bc8e:	9b01      	ldr	r3, [sp, #4]
 800bc90:	429e      	cmp	r6, r3
 800bc92:	f67f aee4 	bls.w	800ba5e <_scanf_float+0x86>
 800bc96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc9e:	463a      	mov	r2, r7
 800bca0:	4640      	mov	r0, r8
 800bca2:	4798      	blx	r3
 800bca4:	6923      	ldr	r3, [r4, #16]
 800bca6:	3b01      	subs	r3, #1
 800bca8:	6123      	str	r3, [r4, #16]
 800bcaa:	e7f0      	b.n	800bc8e <_scanf_float+0x2b6>
 800bcac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bcb0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bcb4:	463a      	mov	r2, r7
 800bcb6:	4640      	mov	r0, r8
 800bcb8:	4798      	blx	r3
 800bcba:	6923      	ldr	r3, [r4, #16]
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	6123      	str	r3, [r4, #16]
 800bcc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bcc4:	fa5f fa8a 	uxtb.w	sl, sl
 800bcc8:	f1ba 0f02 	cmp.w	sl, #2
 800bccc:	d1ee      	bne.n	800bcac <_scanf_float+0x2d4>
 800bcce:	3d03      	subs	r5, #3
 800bcd0:	b2ed      	uxtb	r5, r5
 800bcd2:	1b76      	subs	r6, r6, r5
 800bcd4:	6823      	ldr	r3, [r4, #0]
 800bcd6:	05da      	lsls	r2, r3, #23
 800bcd8:	d530      	bpl.n	800bd3c <_scanf_float+0x364>
 800bcda:	055b      	lsls	r3, r3, #21
 800bcdc:	d511      	bpl.n	800bd02 <_scanf_float+0x32a>
 800bcde:	9b01      	ldr	r3, [sp, #4]
 800bce0:	429e      	cmp	r6, r3
 800bce2:	f67f aebc 	bls.w	800ba5e <_scanf_float+0x86>
 800bce6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bcea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bcee:	463a      	mov	r2, r7
 800bcf0:	4640      	mov	r0, r8
 800bcf2:	4798      	blx	r3
 800bcf4:	6923      	ldr	r3, [r4, #16]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	6123      	str	r3, [r4, #16]
 800bcfa:	e7f0      	b.n	800bcde <_scanf_float+0x306>
 800bcfc:	46aa      	mov	sl, r5
 800bcfe:	46b3      	mov	fp, r6
 800bd00:	e7de      	b.n	800bcc0 <_scanf_float+0x2e8>
 800bd02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bd06:	6923      	ldr	r3, [r4, #16]
 800bd08:	2965      	cmp	r1, #101	@ 0x65
 800bd0a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd0e:	f106 35ff 	add.w	r5, r6, #4294967295
 800bd12:	6123      	str	r3, [r4, #16]
 800bd14:	d00c      	beq.n	800bd30 <_scanf_float+0x358>
 800bd16:	2945      	cmp	r1, #69	@ 0x45
 800bd18:	d00a      	beq.n	800bd30 <_scanf_float+0x358>
 800bd1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd1e:	463a      	mov	r2, r7
 800bd20:	4640      	mov	r0, r8
 800bd22:	4798      	blx	r3
 800bd24:	6923      	ldr	r3, [r4, #16]
 800bd26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	1eb5      	subs	r5, r6, #2
 800bd2e:	6123      	str	r3, [r4, #16]
 800bd30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd34:	463a      	mov	r2, r7
 800bd36:	4640      	mov	r0, r8
 800bd38:	4798      	blx	r3
 800bd3a:	462e      	mov	r6, r5
 800bd3c:	6822      	ldr	r2, [r4, #0]
 800bd3e:	f012 0210 	ands.w	r2, r2, #16
 800bd42:	d001      	beq.n	800bd48 <_scanf_float+0x370>
 800bd44:	2000      	movs	r0, #0
 800bd46:	e68b      	b.n	800ba60 <_scanf_float+0x88>
 800bd48:	7032      	strb	r2, [r6, #0]
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bd50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd54:	d11a      	bne.n	800bd8c <_scanf_float+0x3b4>
 800bd56:	9b02      	ldr	r3, [sp, #8]
 800bd58:	454b      	cmp	r3, r9
 800bd5a:	eba3 0209 	sub.w	r2, r3, r9
 800bd5e:	d121      	bne.n	800bda4 <_scanf_float+0x3cc>
 800bd60:	9901      	ldr	r1, [sp, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	4640      	mov	r0, r8
 800bd66:	f002 fb41 	bl	800e3ec <_strtod_r>
 800bd6a:	9b03      	ldr	r3, [sp, #12]
 800bd6c:	6821      	ldr	r1, [r4, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f011 0f02 	tst.w	r1, #2
 800bd74:	f103 0204 	add.w	r2, r3, #4
 800bd78:	d01f      	beq.n	800bdba <_scanf_float+0x3e2>
 800bd7a:	9903      	ldr	r1, [sp, #12]
 800bd7c:	600a      	str	r2, [r1, #0]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	ed83 0b00 	vstr	d0, [r3]
 800bd84:	68e3      	ldr	r3, [r4, #12]
 800bd86:	3301      	adds	r3, #1
 800bd88:	60e3      	str	r3, [r4, #12]
 800bd8a:	e7db      	b.n	800bd44 <_scanf_float+0x36c>
 800bd8c:	9b04      	ldr	r3, [sp, #16]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d0e6      	beq.n	800bd60 <_scanf_float+0x388>
 800bd92:	9905      	ldr	r1, [sp, #20]
 800bd94:	230a      	movs	r3, #10
 800bd96:	3101      	adds	r1, #1
 800bd98:	4640      	mov	r0, r8
 800bd9a:	f002 fba7 	bl	800e4ec <_strtol_r>
 800bd9e:	9b04      	ldr	r3, [sp, #16]
 800bda0:	9e05      	ldr	r6, [sp, #20]
 800bda2:	1ac2      	subs	r2, r0, r3
 800bda4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bda8:	429e      	cmp	r6, r3
 800bdaa:	bf28      	it	cs
 800bdac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bdb0:	490d      	ldr	r1, [pc, #52]	@ (800bde8 <_scanf_float+0x410>)
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f000 f8de 	bl	800bf74 <siprintf>
 800bdb8:	e7d2      	b.n	800bd60 <_scanf_float+0x388>
 800bdba:	f011 0f04 	tst.w	r1, #4
 800bdbe:	9903      	ldr	r1, [sp, #12]
 800bdc0:	600a      	str	r2, [r1, #0]
 800bdc2:	d1dc      	bne.n	800bd7e <_scanf_float+0x3a6>
 800bdc4:	eeb4 0b40 	vcmp.f64	d0, d0
 800bdc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdcc:	681d      	ldr	r5, [r3, #0]
 800bdce:	d705      	bvc.n	800bddc <_scanf_float+0x404>
 800bdd0:	4806      	ldr	r0, [pc, #24]	@ (800bdec <_scanf_float+0x414>)
 800bdd2:	f000 f9c5 	bl	800c160 <nanf>
 800bdd6:	ed85 0a00 	vstr	s0, [r5]
 800bdda:	e7d3      	b.n	800bd84 <_scanf_float+0x3ac>
 800bddc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bde0:	e7f9      	b.n	800bdd6 <_scanf_float+0x3fe>
 800bde2:	f04f 0900 	mov.w	r9, #0
 800bde6:	e630      	b.n	800ba4a <_scanf_float+0x72>
 800bde8:	0800fbc4 	.word	0x0800fbc4
 800bdec:	0800ff5d 	.word	0x0800ff5d

0800bdf0 <std>:
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	b510      	push	{r4, lr}
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	e9c0 3300 	strd	r3, r3, [r0]
 800bdfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdfe:	6083      	str	r3, [r0, #8]
 800be00:	8181      	strh	r1, [r0, #12]
 800be02:	6643      	str	r3, [r0, #100]	@ 0x64
 800be04:	81c2      	strh	r2, [r0, #14]
 800be06:	6183      	str	r3, [r0, #24]
 800be08:	4619      	mov	r1, r3
 800be0a:	2208      	movs	r2, #8
 800be0c:	305c      	adds	r0, #92	@ 0x5c
 800be0e:	f000 f914 	bl	800c03a <memset>
 800be12:	4b0d      	ldr	r3, [pc, #52]	@ (800be48 <std+0x58>)
 800be14:	6263      	str	r3, [r4, #36]	@ 0x24
 800be16:	4b0d      	ldr	r3, [pc, #52]	@ (800be4c <std+0x5c>)
 800be18:	62a3      	str	r3, [r4, #40]	@ 0x28
 800be1a:	4b0d      	ldr	r3, [pc, #52]	@ (800be50 <std+0x60>)
 800be1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800be1e:	4b0d      	ldr	r3, [pc, #52]	@ (800be54 <std+0x64>)
 800be20:	6323      	str	r3, [r4, #48]	@ 0x30
 800be22:	4b0d      	ldr	r3, [pc, #52]	@ (800be58 <std+0x68>)
 800be24:	6224      	str	r4, [r4, #32]
 800be26:	429c      	cmp	r4, r3
 800be28:	d006      	beq.n	800be38 <std+0x48>
 800be2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be2e:	4294      	cmp	r4, r2
 800be30:	d002      	beq.n	800be38 <std+0x48>
 800be32:	33d0      	adds	r3, #208	@ 0xd0
 800be34:	429c      	cmp	r4, r3
 800be36:	d105      	bne.n	800be44 <std+0x54>
 800be38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be40:	f000 b98a 	b.w	800c158 <__retarget_lock_init_recursive>
 800be44:	bd10      	pop	{r4, pc}
 800be46:	bf00      	nop
 800be48:	0800bfb5 	.word	0x0800bfb5
 800be4c:	0800bfd7 	.word	0x0800bfd7
 800be50:	0800c00f 	.word	0x0800c00f
 800be54:	0800c033 	.word	0x0800c033
 800be58:	20002d44 	.word	0x20002d44

0800be5c <stdio_exit_handler>:
 800be5c:	4a02      	ldr	r2, [pc, #8]	@ (800be68 <stdio_exit_handler+0xc>)
 800be5e:	4903      	ldr	r1, [pc, #12]	@ (800be6c <stdio_exit_handler+0x10>)
 800be60:	4803      	ldr	r0, [pc, #12]	@ (800be70 <stdio_exit_handler+0x14>)
 800be62:	f000 b869 	b.w	800bf38 <_fwalk_sglue>
 800be66:	bf00      	nop
 800be68:	20000024 	.word	0x20000024
 800be6c:	0800e8a9 	.word	0x0800e8a9
 800be70:	20000034 	.word	0x20000034

0800be74 <cleanup_stdio>:
 800be74:	6841      	ldr	r1, [r0, #4]
 800be76:	4b0c      	ldr	r3, [pc, #48]	@ (800bea8 <cleanup_stdio+0x34>)
 800be78:	4299      	cmp	r1, r3
 800be7a:	b510      	push	{r4, lr}
 800be7c:	4604      	mov	r4, r0
 800be7e:	d001      	beq.n	800be84 <cleanup_stdio+0x10>
 800be80:	f002 fd12 	bl	800e8a8 <_fflush_r>
 800be84:	68a1      	ldr	r1, [r4, #8]
 800be86:	4b09      	ldr	r3, [pc, #36]	@ (800beac <cleanup_stdio+0x38>)
 800be88:	4299      	cmp	r1, r3
 800be8a:	d002      	beq.n	800be92 <cleanup_stdio+0x1e>
 800be8c:	4620      	mov	r0, r4
 800be8e:	f002 fd0b 	bl	800e8a8 <_fflush_r>
 800be92:	68e1      	ldr	r1, [r4, #12]
 800be94:	4b06      	ldr	r3, [pc, #24]	@ (800beb0 <cleanup_stdio+0x3c>)
 800be96:	4299      	cmp	r1, r3
 800be98:	d004      	beq.n	800bea4 <cleanup_stdio+0x30>
 800be9a:	4620      	mov	r0, r4
 800be9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bea0:	f002 bd02 	b.w	800e8a8 <_fflush_r>
 800bea4:	bd10      	pop	{r4, pc}
 800bea6:	bf00      	nop
 800bea8:	20002d44 	.word	0x20002d44
 800beac:	20002dac 	.word	0x20002dac
 800beb0:	20002e14 	.word	0x20002e14

0800beb4 <global_stdio_init.part.0>:
 800beb4:	b510      	push	{r4, lr}
 800beb6:	4b0b      	ldr	r3, [pc, #44]	@ (800bee4 <global_stdio_init.part.0+0x30>)
 800beb8:	4c0b      	ldr	r4, [pc, #44]	@ (800bee8 <global_stdio_init.part.0+0x34>)
 800beba:	4a0c      	ldr	r2, [pc, #48]	@ (800beec <global_stdio_init.part.0+0x38>)
 800bebc:	601a      	str	r2, [r3, #0]
 800bebe:	4620      	mov	r0, r4
 800bec0:	2200      	movs	r2, #0
 800bec2:	2104      	movs	r1, #4
 800bec4:	f7ff ff94 	bl	800bdf0 <std>
 800bec8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800becc:	2201      	movs	r2, #1
 800bece:	2109      	movs	r1, #9
 800bed0:	f7ff ff8e 	bl	800bdf0 <std>
 800bed4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bed8:	2202      	movs	r2, #2
 800beda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bede:	2112      	movs	r1, #18
 800bee0:	f7ff bf86 	b.w	800bdf0 <std>
 800bee4:	20002e7c 	.word	0x20002e7c
 800bee8:	20002d44 	.word	0x20002d44
 800beec:	0800be5d 	.word	0x0800be5d

0800bef0 <__sfp_lock_acquire>:
 800bef0:	4801      	ldr	r0, [pc, #4]	@ (800bef8 <__sfp_lock_acquire+0x8>)
 800bef2:	f000 b932 	b.w	800c15a <__retarget_lock_acquire_recursive>
 800bef6:	bf00      	nop
 800bef8:	20002e85 	.word	0x20002e85

0800befc <__sfp_lock_release>:
 800befc:	4801      	ldr	r0, [pc, #4]	@ (800bf04 <__sfp_lock_release+0x8>)
 800befe:	f000 b92d 	b.w	800c15c <__retarget_lock_release_recursive>
 800bf02:	bf00      	nop
 800bf04:	20002e85 	.word	0x20002e85

0800bf08 <__sinit>:
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	f7ff fff0 	bl	800bef0 <__sfp_lock_acquire>
 800bf10:	6a23      	ldr	r3, [r4, #32]
 800bf12:	b11b      	cbz	r3, 800bf1c <__sinit+0x14>
 800bf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf18:	f7ff bff0 	b.w	800befc <__sfp_lock_release>
 800bf1c:	4b04      	ldr	r3, [pc, #16]	@ (800bf30 <__sinit+0x28>)
 800bf1e:	6223      	str	r3, [r4, #32]
 800bf20:	4b04      	ldr	r3, [pc, #16]	@ (800bf34 <__sinit+0x2c>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d1f5      	bne.n	800bf14 <__sinit+0xc>
 800bf28:	f7ff ffc4 	bl	800beb4 <global_stdio_init.part.0>
 800bf2c:	e7f2      	b.n	800bf14 <__sinit+0xc>
 800bf2e:	bf00      	nop
 800bf30:	0800be75 	.word	0x0800be75
 800bf34:	20002e7c 	.word	0x20002e7c

0800bf38 <_fwalk_sglue>:
 800bf38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf3c:	4607      	mov	r7, r0
 800bf3e:	4688      	mov	r8, r1
 800bf40:	4614      	mov	r4, r2
 800bf42:	2600      	movs	r6, #0
 800bf44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf48:	f1b9 0901 	subs.w	r9, r9, #1
 800bf4c:	d505      	bpl.n	800bf5a <_fwalk_sglue+0x22>
 800bf4e:	6824      	ldr	r4, [r4, #0]
 800bf50:	2c00      	cmp	r4, #0
 800bf52:	d1f7      	bne.n	800bf44 <_fwalk_sglue+0xc>
 800bf54:	4630      	mov	r0, r6
 800bf56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf5a:	89ab      	ldrh	r3, [r5, #12]
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d907      	bls.n	800bf70 <_fwalk_sglue+0x38>
 800bf60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf64:	3301      	adds	r3, #1
 800bf66:	d003      	beq.n	800bf70 <_fwalk_sglue+0x38>
 800bf68:	4629      	mov	r1, r5
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	47c0      	blx	r8
 800bf6e:	4306      	orrs	r6, r0
 800bf70:	3568      	adds	r5, #104	@ 0x68
 800bf72:	e7e9      	b.n	800bf48 <_fwalk_sglue+0x10>

0800bf74 <siprintf>:
 800bf74:	b40e      	push	{r1, r2, r3}
 800bf76:	b500      	push	{lr}
 800bf78:	b09c      	sub	sp, #112	@ 0x70
 800bf7a:	ab1d      	add	r3, sp, #116	@ 0x74
 800bf7c:	9002      	str	r0, [sp, #8]
 800bf7e:	9006      	str	r0, [sp, #24]
 800bf80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bf84:	4809      	ldr	r0, [pc, #36]	@ (800bfac <siprintf+0x38>)
 800bf86:	9107      	str	r1, [sp, #28]
 800bf88:	9104      	str	r1, [sp, #16]
 800bf8a:	4909      	ldr	r1, [pc, #36]	@ (800bfb0 <siprintf+0x3c>)
 800bf8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf90:	9105      	str	r1, [sp, #20]
 800bf92:	6800      	ldr	r0, [r0, #0]
 800bf94:	9301      	str	r3, [sp, #4]
 800bf96:	a902      	add	r1, sp, #8
 800bf98:	f002 fb06 	bl	800e5a8 <_svfiprintf_r>
 800bf9c:	9b02      	ldr	r3, [sp, #8]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	701a      	strb	r2, [r3, #0]
 800bfa2:	b01c      	add	sp, #112	@ 0x70
 800bfa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfa8:	b003      	add	sp, #12
 800bfaa:	4770      	bx	lr
 800bfac:	20000030 	.word	0x20000030
 800bfb0:	ffff0208 	.word	0xffff0208

0800bfb4 <__sread>:
 800bfb4:	b510      	push	{r4, lr}
 800bfb6:	460c      	mov	r4, r1
 800bfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfbc:	f000 f87e 	bl	800c0bc <_read_r>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	bfab      	itete	ge
 800bfc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bfc6:	89a3      	ldrhlt	r3, [r4, #12]
 800bfc8:	181b      	addge	r3, r3, r0
 800bfca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bfce:	bfac      	ite	ge
 800bfd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bfd2:	81a3      	strhlt	r3, [r4, #12]
 800bfd4:	bd10      	pop	{r4, pc}

0800bfd6 <__swrite>:
 800bfd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfda:	461f      	mov	r7, r3
 800bfdc:	898b      	ldrh	r3, [r1, #12]
 800bfde:	05db      	lsls	r3, r3, #23
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	4616      	mov	r6, r2
 800bfe6:	d505      	bpl.n	800bff4 <__swrite+0x1e>
 800bfe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfec:	2302      	movs	r3, #2
 800bfee:	2200      	movs	r2, #0
 800bff0:	f000 f852 	bl	800c098 <_lseek_r>
 800bff4:	89a3      	ldrh	r3, [r4, #12]
 800bff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bffa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bffe:	81a3      	strh	r3, [r4, #12]
 800c000:	4632      	mov	r2, r6
 800c002:	463b      	mov	r3, r7
 800c004:	4628      	mov	r0, r5
 800c006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c00a:	f000 b869 	b.w	800c0e0 <_write_r>

0800c00e <__sseek>:
 800c00e:	b510      	push	{r4, lr}
 800c010:	460c      	mov	r4, r1
 800c012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c016:	f000 f83f 	bl	800c098 <_lseek_r>
 800c01a:	1c43      	adds	r3, r0, #1
 800c01c:	89a3      	ldrh	r3, [r4, #12]
 800c01e:	bf15      	itete	ne
 800c020:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c022:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c026:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c02a:	81a3      	strheq	r3, [r4, #12]
 800c02c:	bf18      	it	ne
 800c02e:	81a3      	strhne	r3, [r4, #12]
 800c030:	bd10      	pop	{r4, pc}

0800c032 <__sclose>:
 800c032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c036:	f000 b81f 	b.w	800c078 <_close_r>

0800c03a <memset>:
 800c03a:	4402      	add	r2, r0
 800c03c:	4603      	mov	r3, r0
 800c03e:	4293      	cmp	r3, r2
 800c040:	d100      	bne.n	800c044 <memset+0xa>
 800c042:	4770      	bx	lr
 800c044:	f803 1b01 	strb.w	r1, [r3], #1
 800c048:	e7f9      	b.n	800c03e <memset+0x4>

0800c04a <strncpy>:
 800c04a:	b510      	push	{r4, lr}
 800c04c:	3901      	subs	r1, #1
 800c04e:	4603      	mov	r3, r0
 800c050:	b132      	cbz	r2, 800c060 <strncpy+0x16>
 800c052:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c056:	f803 4b01 	strb.w	r4, [r3], #1
 800c05a:	3a01      	subs	r2, #1
 800c05c:	2c00      	cmp	r4, #0
 800c05e:	d1f7      	bne.n	800c050 <strncpy+0x6>
 800c060:	441a      	add	r2, r3
 800c062:	2100      	movs	r1, #0
 800c064:	4293      	cmp	r3, r2
 800c066:	d100      	bne.n	800c06a <strncpy+0x20>
 800c068:	bd10      	pop	{r4, pc}
 800c06a:	f803 1b01 	strb.w	r1, [r3], #1
 800c06e:	e7f9      	b.n	800c064 <strncpy+0x1a>

0800c070 <_localeconv_r>:
 800c070:	4800      	ldr	r0, [pc, #0]	@ (800c074 <_localeconv_r+0x4>)
 800c072:	4770      	bx	lr
 800c074:	20000170 	.word	0x20000170

0800c078 <_close_r>:
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	4d06      	ldr	r5, [pc, #24]	@ (800c094 <_close_r+0x1c>)
 800c07c:	2300      	movs	r3, #0
 800c07e:	4604      	mov	r4, r0
 800c080:	4608      	mov	r0, r1
 800c082:	602b      	str	r3, [r5, #0]
 800c084:	f7f6 f83c 	bl	8002100 <_close>
 800c088:	1c43      	adds	r3, r0, #1
 800c08a:	d102      	bne.n	800c092 <_close_r+0x1a>
 800c08c:	682b      	ldr	r3, [r5, #0]
 800c08e:	b103      	cbz	r3, 800c092 <_close_r+0x1a>
 800c090:	6023      	str	r3, [r4, #0]
 800c092:	bd38      	pop	{r3, r4, r5, pc}
 800c094:	20002e80 	.word	0x20002e80

0800c098 <_lseek_r>:
 800c098:	b538      	push	{r3, r4, r5, lr}
 800c09a:	4d07      	ldr	r5, [pc, #28]	@ (800c0b8 <_lseek_r+0x20>)
 800c09c:	4604      	mov	r4, r0
 800c09e:	4608      	mov	r0, r1
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	602a      	str	r2, [r5, #0]
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	f7f6 f851 	bl	800214e <_lseek>
 800c0ac:	1c43      	adds	r3, r0, #1
 800c0ae:	d102      	bne.n	800c0b6 <_lseek_r+0x1e>
 800c0b0:	682b      	ldr	r3, [r5, #0]
 800c0b2:	b103      	cbz	r3, 800c0b6 <_lseek_r+0x1e>
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	bd38      	pop	{r3, r4, r5, pc}
 800c0b8:	20002e80 	.word	0x20002e80

0800c0bc <_read_r>:
 800c0bc:	b538      	push	{r3, r4, r5, lr}
 800c0be:	4d07      	ldr	r5, [pc, #28]	@ (800c0dc <_read_r+0x20>)
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	4608      	mov	r0, r1
 800c0c4:	4611      	mov	r1, r2
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	602a      	str	r2, [r5, #0]
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	f7f5 ffdf 	bl	800208e <_read>
 800c0d0:	1c43      	adds	r3, r0, #1
 800c0d2:	d102      	bne.n	800c0da <_read_r+0x1e>
 800c0d4:	682b      	ldr	r3, [r5, #0]
 800c0d6:	b103      	cbz	r3, 800c0da <_read_r+0x1e>
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	bd38      	pop	{r3, r4, r5, pc}
 800c0dc:	20002e80 	.word	0x20002e80

0800c0e0 <_write_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4d07      	ldr	r5, [pc, #28]	@ (800c100 <_write_r+0x20>)
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	4608      	mov	r0, r1
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	602a      	str	r2, [r5, #0]
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	f7f5 ffea 	bl	80020c8 <_write>
 800c0f4:	1c43      	adds	r3, r0, #1
 800c0f6:	d102      	bne.n	800c0fe <_write_r+0x1e>
 800c0f8:	682b      	ldr	r3, [r5, #0]
 800c0fa:	b103      	cbz	r3, 800c0fe <_write_r+0x1e>
 800c0fc:	6023      	str	r3, [r4, #0]
 800c0fe:	bd38      	pop	{r3, r4, r5, pc}
 800c100:	20002e80 	.word	0x20002e80

0800c104 <__errno>:
 800c104:	4b01      	ldr	r3, [pc, #4]	@ (800c10c <__errno+0x8>)
 800c106:	6818      	ldr	r0, [r3, #0]
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	20000030 	.word	0x20000030

0800c110 <__libc_init_array>:
 800c110:	b570      	push	{r4, r5, r6, lr}
 800c112:	4d0d      	ldr	r5, [pc, #52]	@ (800c148 <__libc_init_array+0x38>)
 800c114:	4c0d      	ldr	r4, [pc, #52]	@ (800c14c <__libc_init_array+0x3c>)
 800c116:	1b64      	subs	r4, r4, r5
 800c118:	10a4      	asrs	r4, r4, #2
 800c11a:	2600      	movs	r6, #0
 800c11c:	42a6      	cmp	r6, r4
 800c11e:	d109      	bne.n	800c134 <__libc_init_array+0x24>
 800c120:	4d0b      	ldr	r5, [pc, #44]	@ (800c150 <__libc_init_array+0x40>)
 800c122:	4c0c      	ldr	r4, [pc, #48]	@ (800c154 <__libc_init_array+0x44>)
 800c124:	f003 fab2 	bl	800f68c <_init>
 800c128:	1b64      	subs	r4, r4, r5
 800c12a:	10a4      	asrs	r4, r4, #2
 800c12c:	2600      	movs	r6, #0
 800c12e:	42a6      	cmp	r6, r4
 800c130:	d105      	bne.n	800c13e <__libc_init_array+0x2e>
 800c132:	bd70      	pop	{r4, r5, r6, pc}
 800c134:	f855 3b04 	ldr.w	r3, [r5], #4
 800c138:	4798      	blx	r3
 800c13a:	3601      	adds	r6, #1
 800c13c:	e7ee      	b.n	800c11c <__libc_init_array+0xc>
 800c13e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c142:	4798      	blx	r3
 800c144:	3601      	adds	r6, #1
 800c146:	e7f2      	b.n	800c12e <__libc_init_array+0x1e>
 800c148:	0800ffc8 	.word	0x0800ffc8
 800c14c:	0800ffc8 	.word	0x0800ffc8
 800c150:	0800ffc8 	.word	0x0800ffc8
 800c154:	0800ffcc 	.word	0x0800ffcc

0800c158 <__retarget_lock_init_recursive>:
 800c158:	4770      	bx	lr

0800c15a <__retarget_lock_acquire_recursive>:
 800c15a:	4770      	bx	lr

0800c15c <__retarget_lock_release_recursive>:
 800c15c:	4770      	bx	lr
	...

0800c160 <nanf>:
 800c160:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c168 <nanf+0x8>
 800c164:	4770      	bx	lr
 800c166:	bf00      	nop
 800c168:	7fc00000 	.word	0x7fc00000

0800c16c <quorem>:
 800c16c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c170:	6903      	ldr	r3, [r0, #16]
 800c172:	690c      	ldr	r4, [r1, #16]
 800c174:	42a3      	cmp	r3, r4
 800c176:	4607      	mov	r7, r0
 800c178:	db7e      	blt.n	800c278 <quorem+0x10c>
 800c17a:	3c01      	subs	r4, #1
 800c17c:	f101 0814 	add.w	r8, r1, #20
 800c180:	00a3      	lsls	r3, r4, #2
 800c182:	f100 0514 	add.w	r5, r0, #20
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c18c:	9301      	str	r3, [sp, #4]
 800c18e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c192:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c196:	3301      	adds	r3, #1
 800c198:	429a      	cmp	r2, r3
 800c19a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c19e:	fbb2 f6f3 	udiv	r6, r2, r3
 800c1a2:	d32e      	bcc.n	800c202 <quorem+0x96>
 800c1a4:	f04f 0a00 	mov.w	sl, #0
 800c1a8:	46c4      	mov	ip, r8
 800c1aa:	46ae      	mov	lr, r5
 800c1ac:	46d3      	mov	fp, sl
 800c1ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c1b2:	b298      	uxth	r0, r3
 800c1b4:	fb06 a000 	mla	r0, r6, r0, sl
 800c1b8:	0c02      	lsrs	r2, r0, #16
 800c1ba:	0c1b      	lsrs	r3, r3, #16
 800c1bc:	fb06 2303 	mla	r3, r6, r3, r2
 800c1c0:	f8de 2000 	ldr.w	r2, [lr]
 800c1c4:	b280      	uxth	r0, r0
 800c1c6:	b292      	uxth	r2, r2
 800c1c8:	1a12      	subs	r2, r2, r0
 800c1ca:	445a      	add	r2, fp
 800c1cc:	f8de 0000 	ldr.w	r0, [lr]
 800c1d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c1da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c1de:	b292      	uxth	r2, r2
 800c1e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c1e4:	45e1      	cmp	r9, ip
 800c1e6:	f84e 2b04 	str.w	r2, [lr], #4
 800c1ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c1ee:	d2de      	bcs.n	800c1ae <quorem+0x42>
 800c1f0:	9b00      	ldr	r3, [sp, #0]
 800c1f2:	58eb      	ldr	r3, [r5, r3]
 800c1f4:	b92b      	cbnz	r3, 800c202 <quorem+0x96>
 800c1f6:	9b01      	ldr	r3, [sp, #4]
 800c1f8:	3b04      	subs	r3, #4
 800c1fa:	429d      	cmp	r5, r3
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	d32f      	bcc.n	800c260 <quorem+0xf4>
 800c200:	613c      	str	r4, [r7, #16]
 800c202:	4638      	mov	r0, r7
 800c204:	f001 f956 	bl	800d4b4 <__mcmp>
 800c208:	2800      	cmp	r0, #0
 800c20a:	db25      	blt.n	800c258 <quorem+0xec>
 800c20c:	4629      	mov	r1, r5
 800c20e:	2000      	movs	r0, #0
 800c210:	f858 2b04 	ldr.w	r2, [r8], #4
 800c214:	f8d1 c000 	ldr.w	ip, [r1]
 800c218:	fa1f fe82 	uxth.w	lr, r2
 800c21c:	fa1f f38c 	uxth.w	r3, ip
 800c220:	eba3 030e 	sub.w	r3, r3, lr
 800c224:	4403      	add	r3, r0
 800c226:	0c12      	lsrs	r2, r2, #16
 800c228:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c22c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c230:	b29b      	uxth	r3, r3
 800c232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c236:	45c1      	cmp	r9, r8
 800c238:	f841 3b04 	str.w	r3, [r1], #4
 800c23c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c240:	d2e6      	bcs.n	800c210 <quorem+0xa4>
 800c242:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c246:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c24a:	b922      	cbnz	r2, 800c256 <quorem+0xea>
 800c24c:	3b04      	subs	r3, #4
 800c24e:	429d      	cmp	r5, r3
 800c250:	461a      	mov	r2, r3
 800c252:	d30b      	bcc.n	800c26c <quorem+0x100>
 800c254:	613c      	str	r4, [r7, #16]
 800c256:	3601      	adds	r6, #1
 800c258:	4630      	mov	r0, r6
 800c25a:	b003      	add	sp, #12
 800c25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c260:	6812      	ldr	r2, [r2, #0]
 800c262:	3b04      	subs	r3, #4
 800c264:	2a00      	cmp	r2, #0
 800c266:	d1cb      	bne.n	800c200 <quorem+0x94>
 800c268:	3c01      	subs	r4, #1
 800c26a:	e7c6      	b.n	800c1fa <quorem+0x8e>
 800c26c:	6812      	ldr	r2, [r2, #0]
 800c26e:	3b04      	subs	r3, #4
 800c270:	2a00      	cmp	r2, #0
 800c272:	d1ef      	bne.n	800c254 <quorem+0xe8>
 800c274:	3c01      	subs	r4, #1
 800c276:	e7ea      	b.n	800c24e <quorem+0xe2>
 800c278:	2000      	movs	r0, #0
 800c27a:	e7ee      	b.n	800c25a <quorem+0xee>
 800c27c:	0000      	movs	r0, r0
	...

0800c280 <_dtoa_r>:
 800c280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c284:	ed2d 8b02 	vpush	{d8}
 800c288:	69c7      	ldr	r7, [r0, #28]
 800c28a:	b091      	sub	sp, #68	@ 0x44
 800c28c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c290:	ec55 4b10 	vmov	r4, r5, d0
 800c294:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c296:	9107      	str	r1, [sp, #28]
 800c298:	4681      	mov	r9, r0
 800c29a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c29c:	930d      	str	r3, [sp, #52]	@ 0x34
 800c29e:	b97f      	cbnz	r7, 800c2c0 <_dtoa_r+0x40>
 800c2a0:	2010      	movs	r0, #16
 800c2a2:	f000 fd8d 	bl	800cdc0 <malloc>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	f8c9 001c 	str.w	r0, [r9, #28]
 800c2ac:	b920      	cbnz	r0, 800c2b8 <_dtoa_r+0x38>
 800c2ae:	4ba0      	ldr	r3, [pc, #640]	@ (800c530 <_dtoa_r+0x2b0>)
 800c2b0:	21ef      	movs	r1, #239	@ 0xef
 800c2b2:	48a0      	ldr	r0, [pc, #640]	@ (800c534 <_dtoa_r+0x2b4>)
 800c2b4:	f002 fb74 	bl	800e9a0 <__assert_func>
 800c2b8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c2bc:	6007      	str	r7, [r0, #0]
 800c2be:	60c7      	str	r7, [r0, #12]
 800c2c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c2c4:	6819      	ldr	r1, [r3, #0]
 800c2c6:	b159      	cbz	r1, 800c2e0 <_dtoa_r+0x60>
 800c2c8:	685a      	ldr	r2, [r3, #4]
 800c2ca:	604a      	str	r2, [r1, #4]
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	4093      	lsls	r3, r2
 800c2d0:	608b      	str	r3, [r1, #8]
 800c2d2:	4648      	mov	r0, r9
 800c2d4:	f000 fe6a 	bl	800cfac <_Bfree>
 800c2d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	601a      	str	r2, [r3, #0]
 800c2e0:	1e2b      	subs	r3, r5, #0
 800c2e2:	bfbb      	ittet	lt
 800c2e4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c2e8:	9303      	strlt	r3, [sp, #12]
 800c2ea:	2300      	movge	r3, #0
 800c2ec:	2201      	movlt	r2, #1
 800c2ee:	bfac      	ite	ge
 800c2f0:	6033      	strge	r3, [r6, #0]
 800c2f2:	6032      	strlt	r2, [r6, #0]
 800c2f4:	4b90      	ldr	r3, [pc, #576]	@ (800c538 <_dtoa_r+0x2b8>)
 800c2f6:	9e03      	ldr	r6, [sp, #12]
 800c2f8:	43b3      	bics	r3, r6
 800c2fa:	d110      	bne.n	800c31e <_dtoa_r+0x9e>
 800c2fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c2fe:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c302:	6013      	str	r3, [r2, #0]
 800c304:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c308:	4323      	orrs	r3, r4
 800c30a:	f000 84de 	beq.w	800ccca <_dtoa_r+0xa4a>
 800c30e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c310:	4f8a      	ldr	r7, [pc, #552]	@ (800c53c <_dtoa_r+0x2bc>)
 800c312:	2b00      	cmp	r3, #0
 800c314:	f000 84e0 	beq.w	800ccd8 <_dtoa_r+0xa58>
 800c318:	1cfb      	adds	r3, r7, #3
 800c31a:	f000 bcdb 	b.w	800ccd4 <_dtoa_r+0xa54>
 800c31e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c322:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c32a:	d10a      	bne.n	800c342 <_dtoa_r+0xc2>
 800c32c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c32e:	2301      	movs	r3, #1
 800c330:	6013      	str	r3, [r2, #0]
 800c332:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c334:	b113      	cbz	r3, 800c33c <_dtoa_r+0xbc>
 800c336:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c338:	4b81      	ldr	r3, [pc, #516]	@ (800c540 <_dtoa_r+0x2c0>)
 800c33a:	6013      	str	r3, [r2, #0]
 800c33c:	4f81      	ldr	r7, [pc, #516]	@ (800c544 <_dtoa_r+0x2c4>)
 800c33e:	f000 bccb 	b.w	800ccd8 <_dtoa_r+0xa58>
 800c342:	aa0e      	add	r2, sp, #56	@ 0x38
 800c344:	a90f      	add	r1, sp, #60	@ 0x3c
 800c346:	4648      	mov	r0, r9
 800c348:	eeb0 0b48 	vmov.f64	d0, d8
 800c34c:	f001 f9d2 	bl	800d6f4 <__d2b>
 800c350:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c354:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c356:	9001      	str	r0, [sp, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d045      	beq.n	800c3e8 <_dtoa_r+0x168>
 800c35c:	eeb0 7b48 	vmov.f64	d7, d8
 800c360:	ee18 1a90 	vmov	r1, s17
 800c364:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c368:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c36c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c370:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c374:	2500      	movs	r5, #0
 800c376:	ee07 1a90 	vmov	s15, r1
 800c37a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c37e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c518 <_dtoa_r+0x298>
 800c382:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c386:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c520 <_dtoa_r+0x2a0>
 800c38a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c38e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c528 <_dtoa_r+0x2a8>
 800c392:	ee07 3a90 	vmov	s15, r3
 800c396:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c39a:	eeb0 7b46 	vmov.f64	d7, d6
 800c39e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c3a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c3a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ae:	ee16 8a90 	vmov	r8, s13
 800c3b2:	d508      	bpl.n	800c3c6 <_dtoa_r+0x146>
 800c3b4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c3b8:	eeb4 6b47 	vcmp.f64	d6, d7
 800c3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c0:	bf18      	it	ne
 800c3c2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800c3c6:	f1b8 0f16 	cmp.w	r8, #22
 800c3ca:	d82b      	bhi.n	800c424 <_dtoa_r+0x1a4>
 800c3cc:	495e      	ldr	r1, [pc, #376]	@ (800c548 <_dtoa_r+0x2c8>)
 800c3ce:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c3d2:	ed91 7b00 	vldr	d7, [r1]
 800c3d6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3de:	d501      	bpl.n	800c3e4 <_dtoa_r+0x164>
 800c3e0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	e01e      	b.n	800c426 <_dtoa_r+0x1a6>
 800c3e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3ea:	4413      	add	r3, r2
 800c3ec:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c3f0:	2920      	cmp	r1, #32
 800c3f2:	bfc1      	itttt	gt
 800c3f4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c3f8:	408e      	lslgt	r6, r1
 800c3fa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c3fe:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c402:	bfd6      	itet	le
 800c404:	f1c1 0120 	rsble	r1, r1, #32
 800c408:	4331      	orrgt	r1, r6
 800c40a:	fa04 f101 	lslle.w	r1, r4, r1
 800c40e:	ee07 1a90 	vmov	s15, r1
 800c412:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c416:	3b01      	subs	r3, #1
 800c418:	ee17 1a90 	vmov	r1, s15
 800c41c:	2501      	movs	r5, #1
 800c41e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c422:	e7a8      	b.n	800c376 <_dtoa_r+0xf6>
 800c424:	2101      	movs	r1, #1
 800c426:	1ad2      	subs	r2, r2, r3
 800c428:	1e53      	subs	r3, r2, #1
 800c42a:	9306      	str	r3, [sp, #24]
 800c42c:	bf45      	ittet	mi
 800c42e:	f1c2 0301 	rsbmi	r3, r2, #1
 800c432:	9305      	strmi	r3, [sp, #20]
 800c434:	2300      	movpl	r3, #0
 800c436:	2300      	movmi	r3, #0
 800c438:	bf4c      	ite	mi
 800c43a:	9306      	strmi	r3, [sp, #24]
 800c43c:	9305      	strpl	r3, [sp, #20]
 800c43e:	f1b8 0f00 	cmp.w	r8, #0
 800c442:	910c      	str	r1, [sp, #48]	@ 0x30
 800c444:	db18      	blt.n	800c478 <_dtoa_r+0x1f8>
 800c446:	9b06      	ldr	r3, [sp, #24]
 800c448:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c44c:	4443      	add	r3, r8
 800c44e:	9306      	str	r3, [sp, #24]
 800c450:	2300      	movs	r3, #0
 800c452:	9a07      	ldr	r2, [sp, #28]
 800c454:	2a09      	cmp	r2, #9
 800c456:	d849      	bhi.n	800c4ec <_dtoa_r+0x26c>
 800c458:	2a05      	cmp	r2, #5
 800c45a:	bfc4      	itt	gt
 800c45c:	3a04      	subgt	r2, #4
 800c45e:	9207      	strgt	r2, [sp, #28]
 800c460:	9a07      	ldr	r2, [sp, #28]
 800c462:	f1a2 0202 	sub.w	r2, r2, #2
 800c466:	bfcc      	ite	gt
 800c468:	2400      	movgt	r4, #0
 800c46a:	2401      	movle	r4, #1
 800c46c:	2a03      	cmp	r2, #3
 800c46e:	d848      	bhi.n	800c502 <_dtoa_r+0x282>
 800c470:	e8df f002 	tbb	[pc, r2]
 800c474:	3a2c2e0b 	.word	0x3a2c2e0b
 800c478:	9b05      	ldr	r3, [sp, #20]
 800c47a:	2200      	movs	r2, #0
 800c47c:	eba3 0308 	sub.w	r3, r3, r8
 800c480:	9305      	str	r3, [sp, #20]
 800c482:	920a      	str	r2, [sp, #40]	@ 0x28
 800c484:	f1c8 0300 	rsb	r3, r8, #0
 800c488:	e7e3      	b.n	800c452 <_dtoa_r+0x1d2>
 800c48a:	2200      	movs	r2, #0
 800c48c:	9208      	str	r2, [sp, #32]
 800c48e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c490:	2a00      	cmp	r2, #0
 800c492:	dc39      	bgt.n	800c508 <_dtoa_r+0x288>
 800c494:	f04f 0b01 	mov.w	fp, #1
 800c498:	46da      	mov	sl, fp
 800c49a:	465a      	mov	r2, fp
 800c49c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c4a0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	2004      	movs	r0, #4
 800c4a8:	f100 0614 	add.w	r6, r0, #20
 800c4ac:	4296      	cmp	r6, r2
 800c4ae:	d930      	bls.n	800c512 <_dtoa_r+0x292>
 800c4b0:	6079      	str	r1, [r7, #4]
 800c4b2:	4648      	mov	r0, r9
 800c4b4:	9304      	str	r3, [sp, #16]
 800c4b6:	f000 fd39 	bl	800cf2c <_Balloc>
 800c4ba:	9b04      	ldr	r3, [sp, #16]
 800c4bc:	4607      	mov	r7, r0
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	d146      	bne.n	800c550 <_dtoa_r+0x2d0>
 800c4c2:	4b22      	ldr	r3, [pc, #136]	@ (800c54c <_dtoa_r+0x2cc>)
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	f240 11af 	movw	r1, #431	@ 0x1af
 800c4ca:	e6f2      	b.n	800c2b2 <_dtoa_r+0x32>
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	e7dd      	b.n	800c48c <_dtoa_r+0x20c>
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	9208      	str	r2, [sp, #32]
 800c4d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4d6:	eb08 0b02 	add.w	fp, r8, r2
 800c4da:	f10b 0a01 	add.w	sl, fp, #1
 800c4de:	4652      	mov	r2, sl
 800c4e0:	2a01      	cmp	r2, #1
 800c4e2:	bfb8      	it	lt
 800c4e4:	2201      	movlt	r2, #1
 800c4e6:	e7db      	b.n	800c4a0 <_dtoa_r+0x220>
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	e7f2      	b.n	800c4d2 <_dtoa_r+0x252>
 800c4ec:	2401      	movs	r4, #1
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c4f4:	f04f 3bff 	mov.w	fp, #4294967295
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	46da      	mov	sl, fp
 800c4fc:	2212      	movs	r2, #18
 800c4fe:	9109      	str	r1, [sp, #36]	@ 0x24
 800c500:	e7ce      	b.n	800c4a0 <_dtoa_r+0x220>
 800c502:	2201      	movs	r2, #1
 800c504:	9208      	str	r2, [sp, #32]
 800c506:	e7f5      	b.n	800c4f4 <_dtoa_r+0x274>
 800c508:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800c50c:	46da      	mov	sl, fp
 800c50e:	465a      	mov	r2, fp
 800c510:	e7c6      	b.n	800c4a0 <_dtoa_r+0x220>
 800c512:	3101      	adds	r1, #1
 800c514:	0040      	lsls	r0, r0, #1
 800c516:	e7c7      	b.n	800c4a8 <_dtoa_r+0x228>
 800c518:	636f4361 	.word	0x636f4361
 800c51c:	3fd287a7 	.word	0x3fd287a7
 800c520:	8b60c8b3 	.word	0x8b60c8b3
 800c524:	3fc68a28 	.word	0x3fc68a28
 800c528:	509f79fb 	.word	0x509f79fb
 800c52c:	3fd34413 	.word	0x3fd34413
 800c530:	0800fbd6 	.word	0x0800fbd6
 800c534:	0800fbed 	.word	0x0800fbed
 800c538:	7ff00000 	.word	0x7ff00000
 800c53c:	0800fbd2 	.word	0x0800fbd2
 800c540:	0800fba1 	.word	0x0800fba1
 800c544:	0800fba0 	.word	0x0800fba0
 800c548:	0800fce8 	.word	0x0800fce8
 800c54c:	0800fc45 	.word	0x0800fc45
 800c550:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c554:	f1ba 0f0e 	cmp.w	sl, #14
 800c558:	6010      	str	r0, [r2, #0]
 800c55a:	d86f      	bhi.n	800c63c <_dtoa_r+0x3bc>
 800c55c:	2c00      	cmp	r4, #0
 800c55e:	d06d      	beq.n	800c63c <_dtoa_r+0x3bc>
 800c560:	f1b8 0f00 	cmp.w	r8, #0
 800c564:	f340 80c2 	ble.w	800c6ec <_dtoa_r+0x46c>
 800c568:	4aca      	ldr	r2, [pc, #808]	@ (800c894 <_dtoa_r+0x614>)
 800c56a:	f008 010f 	and.w	r1, r8, #15
 800c56e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c572:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c576:	ed92 7b00 	vldr	d7, [r2]
 800c57a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c57e:	f000 80a9 	beq.w	800c6d4 <_dtoa_r+0x454>
 800c582:	4ac5      	ldr	r2, [pc, #788]	@ (800c898 <_dtoa_r+0x618>)
 800c584:	ed92 6b08 	vldr	d6, [r2, #32]
 800c588:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c58c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c590:	f001 010f 	and.w	r1, r1, #15
 800c594:	2203      	movs	r2, #3
 800c596:	48c0      	ldr	r0, [pc, #768]	@ (800c898 <_dtoa_r+0x618>)
 800c598:	2900      	cmp	r1, #0
 800c59a:	f040 809d 	bne.w	800c6d8 <_dtoa_r+0x458>
 800c59e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c5a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c5a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c5aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c5ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c5b0:	2900      	cmp	r1, #0
 800c5b2:	f000 80c1 	beq.w	800c738 <_dtoa_r+0x4b8>
 800c5b6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c5ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c2:	f140 80b9 	bpl.w	800c738 <_dtoa_r+0x4b8>
 800c5c6:	f1ba 0f00 	cmp.w	sl, #0
 800c5ca:	f000 80b5 	beq.w	800c738 <_dtoa_r+0x4b8>
 800c5ce:	f1bb 0f00 	cmp.w	fp, #0
 800c5d2:	dd31      	ble.n	800c638 <_dtoa_r+0x3b8>
 800c5d4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c5d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c5dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c5e0:	f108 31ff 	add.w	r1, r8, #4294967295
 800c5e4:	9104      	str	r1, [sp, #16]
 800c5e6:	3201      	adds	r2, #1
 800c5e8:	465c      	mov	r4, fp
 800c5ea:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c5ee:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c5f2:	ee07 2a90 	vmov	s15, r2
 800c5f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c5fa:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c5fe:	ee15 2a90 	vmov	r2, s11
 800c602:	ec51 0b15 	vmov	r0, r1, d5
 800c606:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c60a:	2c00      	cmp	r4, #0
 800c60c:	f040 8098 	bne.w	800c740 <_dtoa_r+0x4c0>
 800c610:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c614:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c618:	ec41 0b17 	vmov	d7, r0, r1
 800c61c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c624:	f300 8261 	bgt.w	800caea <_dtoa_r+0x86a>
 800c628:	eeb1 7b47 	vneg.f64	d7, d7
 800c62c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c634:	f100 80f5 	bmi.w	800c822 <_dtoa_r+0x5a2>
 800c638:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c63c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c63e:	2a00      	cmp	r2, #0
 800c640:	f2c0 812c 	blt.w	800c89c <_dtoa_r+0x61c>
 800c644:	f1b8 0f0e 	cmp.w	r8, #14
 800c648:	f300 8128 	bgt.w	800c89c <_dtoa_r+0x61c>
 800c64c:	4b91      	ldr	r3, [pc, #580]	@ (800c894 <_dtoa_r+0x614>)
 800c64e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c652:	ed93 6b00 	vldr	d6, [r3]
 800c656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c658:	2b00      	cmp	r3, #0
 800c65a:	da03      	bge.n	800c664 <_dtoa_r+0x3e4>
 800c65c:	f1ba 0f00 	cmp.w	sl, #0
 800c660:	f340 80d2 	ble.w	800c808 <_dtoa_r+0x588>
 800c664:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c668:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c66c:	463e      	mov	r6, r7
 800c66e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c672:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c676:	ee15 3a10 	vmov	r3, s10
 800c67a:	3330      	adds	r3, #48	@ 0x30
 800c67c:	f806 3b01 	strb.w	r3, [r6], #1
 800c680:	1bf3      	subs	r3, r6, r7
 800c682:	459a      	cmp	sl, r3
 800c684:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c688:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c68c:	f040 80f8 	bne.w	800c880 <_dtoa_r+0x600>
 800c690:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c694:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c69c:	f300 80dd 	bgt.w	800c85a <_dtoa_r+0x5da>
 800c6a0:	eeb4 7b46 	vcmp.f64	d7, d6
 800c6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6a8:	d104      	bne.n	800c6b4 <_dtoa_r+0x434>
 800c6aa:	ee15 3a10 	vmov	r3, s10
 800c6ae:	07db      	lsls	r3, r3, #31
 800c6b0:	f100 80d3 	bmi.w	800c85a <_dtoa_r+0x5da>
 800c6b4:	9901      	ldr	r1, [sp, #4]
 800c6b6:	4648      	mov	r0, r9
 800c6b8:	f000 fc78 	bl	800cfac <_Bfree>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c6c0:	7033      	strb	r3, [r6, #0]
 800c6c2:	f108 0301 	add.w	r3, r8, #1
 800c6c6:	6013      	str	r3, [r2, #0]
 800c6c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f000 8304 	beq.w	800ccd8 <_dtoa_r+0xa58>
 800c6d0:	601e      	str	r6, [r3, #0]
 800c6d2:	e301      	b.n	800ccd8 <_dtoa_r+0xa58>
 800c6d4:	2202      	movs	r2, #2
 800c6d6:	e75e      	b.n	800c596 <_dtoa_r+0x316>
 800c6d8:	07cc      	lsls	r4, r1, #31
 800c6da:	d504      	bpl.n	800c6e6 <_dtoa_r+0x466>
 800c6dc:	ed90 6b00 	vldr	d6, [r0]
 800c6e0:	3201      	adds	r2, #1
 800c6e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c6e6:	1049      	asrs	r1, r1, #1
 800c6e8:	3008      	adds	r0, #8
 800c6ea:	e755      	b.n	800c598 <_dtoa_r+0x318>
 800c6ec:	d022      	beq.n	800c734 <_dtoa_r+0x4b4>
 800c6ee:	f1c8 0100 	rsb	r1, r8, #0
 800c6f2:	4a68      	ldr	r2, [pc, #416]	@ (800c894 <_dtoa_r+0x614>)
 800c6f4:	f001 000f 	and.w	r0, r1, #15
 800c6f8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c6fc:	ed92 7b00 	vldr	d7, [r2]
 800c700:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c704:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c708:	4863      	ldr	r0, [pc, #396]	@ (800c898 <_dtoa_r+0x618>)
 800c70a:	1109      	asrs	r1, r1, #4
 800c70c:	2400      	movs	r4, #0
 800c70e:	2202      	movs	r2, #2
 800c710:	b929      	cbnz	r1, 800c71e <_dtoa_r+0x49e>
 800c712:	2c00      	cmp	r4, #0
 800c714:	f43f af49 	beq.w	800c5aa <_dtoa_r+0x32a>
 800c718:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c71c:	e745      	b.n	800c5aa <_dtoa_r+0x32a>
 800c71e:	07ce      	lsls	r6, r1, #31
 800c720:	d505      	bpl.n	800c72e <_dtoa_r+0x4ae>
 800c722:	ed90 6b00 	vldr	d6, [r0]
 800c726:	3201      	adds	r2, #1
 800c728:	2401      	movs	r4, #1
 800c72a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c72e:	1049      	asrs	r1, r1, #1
 800c730:	3008      	adds	r0, #8
 800c732:	e7ed      	b.n	800c710 <_dtoa_r+0x490>
 800c734:	2202      	movs	r2, #2
 800c736:	e738      	b.n	800c5aa <_dtoa_r+0x32a>
 800c738:	f8cd 8010 	str.w	r8, [sp, #16]
 800c73c:	4654      	mov	r4, sl
 800c73e:	e754      	b.n	800c5ea <_dtoa_r+0x36a>
 800c740:	4a54      	ldr	r2, [pc, #336]	@ (800c894 <_dtoa_r+0x614>)
 800c742:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c746:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c74a:	9a08      	ldr	r2, [sp, #32]
 800c74c:	ec41 0b17 	vmov	d7, r0, r1
 800c750:	443c      	add	r4, r7
 800c752:	b34a      	cbz	r2, 800c7a8 <_dtoa_r+0x528>
 800c754:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c758:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c75c:	463e      	mov	r6, r7
 800c75e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c762:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c766:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c76a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c76e:	ee14 2a90 	vmov	r2, s9
 800c772:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c776:	3230      	adds	r2, #48	@ 0x30
 800c778:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c77c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c784:	f806 2b01 	strb.w	r2, [r6], #1
 800c788:	d438      	bmi.n	800c7fc <_dtoa_r+0x57c>
 800c78a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c78e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c796:	d462      	bmi.n	800c85e <_dtoa_r+0x5de>
 800c798:	42a6      	cmp	r6, r4
 800c79a:	f43f af4d 	beq.w	800c638 <_dtoa_r+0x3b8>
 800c79e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c7a2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c7a6:	e7e0      	b.n	800c76a <_dtoa_r+0x4ea>
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	463e      	mov	r6, r7
 800c7ac:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c7b0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c7b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c7b8:	ee14 2a90 	vmov	r2, s9
 800c7bc:	3230      	adds	r2, #48	@ 0x30
 800c7be:	f806 2b01 	strb.w	r2, [r6], #1
 800c7c2:	42a6      	cmp	r6, r4
 800c7c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c7c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c7cc:	d119      	bne.n	800c802 <_dtoa_r+0x582>
 800c7ce:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c7d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c7d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7de:	dc3e      	bgt.n	800c85e <_dtoa_r+0x5de>
 800c7e0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c7e4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ec:	f57f af24 	bpl.w	800c638 <_dtoa_r+0x3b8>
 800c7f0:	460e      	mov	r6, r1
 800c7f2:	3901      	subs	r1, #1
 800c7f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c7f8:	2b30      	cmp	r3, #48	@ 0x30
 800c7fa:	d0f9      	beq.n	800c7f0 <_dtoa_r+0x570>
 800c7fc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c800:	e758      	b.n	800c6b4 <_dtoa_r+0x434>
 800c802:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c806:	e7d5      	b.n	800c7b4 <_dtoa_r+0x534>
 800c808:	d10b      	bne.n	800c822 <_dtoa_r+0x5a2>
 800c80a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c80e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c812:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c816:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c81e:	f2c0 8161 	blt.w	800cae4 <_dtoa_r+0x864>
 800c822:	2400      	movs	r4, #0
 800c824:	4625      	mov	r5, r4
 800c826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c828:	43db      	mvns	r3, r3
 800c82a:	9304      	str	r3, [sp, #16]
 800c82c:	463e      	mov	r6, r7
 800c82e:	f04f 0800 	mov.w	r8, #0
 800c832:	4621      	mov	r1, r4
 800c834:	4648      	mov	r0, r9
 800c836:	f000 fbb9 	bl	800cfac <_Bfree>
 800c83a:	2d00      	cmp	r5, #0
 800c83c:	d0de      	beq.n	800c7fc <_dtoa_r+0x57c>
 800c83e:	f1b8 0f00 	cmp.w	r8, #0
 800c842:	d005      	beq.n	800c850 <_dtoa_r+0x5d0>
 800c844:	45a8      	cmp	r8, r5
 800c846:	d003      	beq.n	800c850 <_dtoa_r+0x5d0>
 800c848:	4641      	mov	r1, r8
 800c84a:	4648      	mov	r0, r9
 800c84c:	f000 fbae 	bl	800cfac <_Bfree>
 800c850:	4629      	mov	r1, r5
 800c852:	4648      	mov	r0, r9
 800c854:	f000 fbaa 	bl	800cfac <_Bfree>
 800c858:	e7d0      	b.n	800c7fc <_dtoa_r+0x57c>
 800c85a:	f8cd 8010 	str.w	r8, [sp, #16]
 800c85e:	4633      	mov	r3, r6
 800c860:	461e      	mov	r6, r3
 800c862:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c866:	2a39      	cmp	r2, #57	@ 0x39
 800c868:	d106      	bne.n	800c878 <_dtoa_r+0x5f8>
 800c86a:	429f      	cmp	r7, r3
 800c86c:	d1f8      	bne.n	800c860 <_dtoa_r+0x5e0>
 800c86e:	9a04      	ldr	r2, [sp, #16]
 800c870:	3201      	adds	r2, #1
 800c872:	9204      	str	r2, [sp, #16]
 800c874:	2230      	movs	r2, #48	@ 0x30
 800c876:	703a      	strb	r2, [r7, #0]
 800c878:	781a      	ldrb	r2, [r3, #0]
 800c87a:	3201      	adds	r2, #1
 800c87c:	701a      	strb	r2, [r3, #0]
 800c87e:	e7bd      	b.n	800c7fc <_dtoa_r+0x57c>
 800c880:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c884:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c88c:	f47f aeef 	bne.w	800c66e <_dtoa_r+0x3ee>
 800c890:	e710      	b.n	800c6b4 <_dtoa_r+0x434>
 800c892:	bf00      	nop
 800c894:	0800fce8 	.word	0x0800fce8
 800c898:	0800fcc0 	.word	0x0800fcc0
 800c89c:	9908      	ldr	r1, [sp, #32]
 800c89e:	2900      	cmp	r1, #0
 800c8a0:	f000 80e3 	beq.w	800ca6a <_dtoa_r+0x7ea>
 800c8a4:	9907      	ldr	r1, [sp, #28]
 800c8a6:	2901      	cmp	r1, #1
 800c8a8:	f300 80c8 	bgt.w	800ca3c <_dtoa_r+0x7bc>
 800c8ac:	2d00      	cmp	r5, #0
 800c8ae:	f000 80c1 	beq.w	800ca34 <_dtoa_r+0x7b4>
 800c8b2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c8b6:	9e05      	ldr	r6, [sp, #20]
 800c8b8:	461c      	mov	r4, r3
 800c8ba:	9304      	str	r3, [sp, #16]
 800c8bc:	9b05      	ldr	r3, [sp, #20]
 800c8be:	4413      	add	r3, r2
 800c8c0:	9305      	str	r3, [sp, #20]
 800c8c2:	9b06      	ldr	r3, [sp, #24]
 800c8c4:	2101      	movs	r1, #1
 800c8c6:	4413      	add	r3, r2
 800c8c8:	4648      	mov	r0, r9
 800c8ca:	9306      	str	r3, [sp, #24]
 800c8cc:	f000 fc6c 	bl	800d1a8 <__i2b>
 800c8d0:	9b04      	ldr	r3, [sp, #16]
 800c8d2:	4605      	mov	r5, r0
 800c8d4:	b166      	cbz	r6, 800c8f0 <_dtoa_r+0x670>
 800c8d6:	9a06      	ldr	r2, [sp, #24]
 800c8d8:	2a00      	cmp	r2, #0
 800c8da:	dd09      	ble.n	800c8f0 <_dtoa_r+0x670>
 800c8dc:	42b2      	cmp	r2, r6
 800c8de:	9905      	ldr	r1, [sp, #20]
 800c8e0:	bfa8      	it	ge
 800c8e2:	4632      	movge	r2, r6
 800c8e4:	1a89      	subs	r1, r1, r2
 800c8e6:	9105      	str	r1, [sp, #20]
 800c8e8:	9906      	ldr	r1, [sp, #24]
 800c8ea:	1ab6      	subs	r6, r6, r2
 800c8ec:	1a8a      	subs	r2, r1, r2
 800c8ee:	9206      	str	r2, [sp, #24]
 800c8f0:	b1fb      	cbz	r3, 800c932 <_dtoa_r+0x6b2>
 800c8f2:	9a08      	ldr	r2, [sp, #32]
 800c8f4:	2a00      	cmp	r2, #0
 800c8f6:	f000 80bc 	beq.w	800ca72 <_dtoa_r+0x7f2>
 800c8fa:	b19c      	cbz	r4, 800c924 <_dtoa_r+0x6a4>
 800c8fc:	4629      	mov	r1, r5
 800c8fe:	4622      	mov	r2, r4
 800c900:	4648      	mov	r0, r9
 800c902:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c904:	f000 fd10 	bl	800d328 <__pow5mult>
 800c908:	9a01      	ldr	r2, [sp, #4]
 800c90a:	4601      	mov	r1, r0
 800c90c:	4605      	mov	r5, r0
 800c90e:	4648      	mov	r0, r9
 800c910:	f000 fc60 	bl	800d1d4 <__multiply>
 800c914:	9901      	ldr	r1, [sp, #4]
 800c916:	9004      	str	r0, [sp, #16]
 800c918:	4648      	mov	r0, r9
 800c91a:	f000 fb47 	bl	800cfac <_Bfree>
 800c91e:	9a04      	ldr	r2, [sp, #16]
 800c920:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c922:	9201      	str	r2, [sp, #4]
 800c924:	1b1a      	subs	r2, r3, r4
 800c926:	d004      	beq.n	800c932 <_dtoa_r+0x6b2>
 800c928:	9901      	ldr	r1, [sp, #4]
 800c92a:	4648      	mov	r0, r9
 800c92c:	f000 fcfc 	bl	800d328 <__pow5mult>
 800c930:	9001      	str	r0, [sp, #4]
 800c932:	2101      	movs	r1, #1
 800c934:	4648      	mov	r0, r9
 800c936:	f000 fc37 	bl	800d1a8 <__i2b>
 800c93a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c93c:	4604      	mov	r4, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f000 81d0 	beq.w	800cce4 <_dtoa_r+0xa64>
 800c944:	461a      	mov	r2, r3
 800c946:	4601      	mov	r1, r0
 800c948:	4648      	mov	r0, r9
 800c94a:	f000 fced 	bl	800d328 <__pow5mult>
 800c94e:	9b07      	ldr	r3, [sp, #28]
 800c950:	2b01      	cmp	r3, #1
 800c952:	4604      	mov	r4, r0
 800c954:	f300 8095 	bgt.w	800ca82 <_dtoa_r+0x802>
 800c958:	9b02      	ldr	r3, [sp, #8]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	f040 808b 	bne.w	800ca76 <_dtoa_r+0x7f6>
 800c960:	9b03      	ldr	r3, [sp, #12]
 800c962:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c966:	2a00      	cmp	r2, #0
 800c968:	f040 8087 	bne.w	800ca7a <_dtoa_r+0x7fa>
 800c96c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c970:	0d12      	lsrs	r2, r2, #20
 800c972:	0512      	lsls	r2, r2, #20
 800c974:	2a00      	cmp	r2, #0
 800c976:	f000 8082 	beq.w	800ca7e <_dtoa_r+0x7fe>
 800c97a:	9b05      	ldr	r3, [sp, #20]
 800c97c:	3301      	adds	r3, #1
 800c97e:	9305      	str	r3, [sp, #20]
 800c980:	9b06      	ldr	r3, [sp, #24]
 800c982:	3301      	adds	r3, #1
 800c984:	9306      	str	r3, [sp, #24]
 800c986:	2301      	movs	r3, #1
 800c988:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c98a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f000 81af 	beq.w	800ccf0 <_dtoa_r+0xa70>
 800c992:	6922      	ldr	r2, [r4, #16]
 800c994:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c998:	6910      	ldr	r0, [r2, #16]
 800c99a:	f000 fbb9 	bl	800d110 <__hi0bits>
 800c99e:	f1c0 0020 	rsb	r0, r0, #32
 800c9a2:	9b06      	ldr	r3, [sp, #24]
 800c9a4:	4418      	add	r0, r3
 800c9a6:	f010 001f 	ands.w	r0, r0, #31
 800c9aa:	d076      	beq.n	800ca9a <_dtoa_r+0x81a>
 800c9ac:	f1c0 0220 	rsb	r2, r0, #32
 800c9b0:	2a04      	cmp	r2, #4
 800c9b2:	dd69      	ble.n	800ca88 <_dtoa_r+0x808>
 800c9b4:	9b05      	ldr	r3, [sp, #20]
 800c9b6:	f1c0 001c 	rsb	r0, r0, #28
 800c9ba:	4403      	add	r3, r0
 800c9bc:	9305      	str	r3, [sp, #20]
 800c9be:	9b06      	ldr	r3, [sp, #24]
 800c9c0:	4406      	add	r6, r0
 800c9c2:	4403      	add	r3, r0
 800c9c4:	9306      	str	r3, [sp, #24]
 800c9c6:	9b05      	ldr	r3, [sp, #20]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	dd05      	ble.n	800c9d8 <_dtoa_r+0x758>
 800c9cc:	9901      	ldr	r1, [sp, #4]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	4648      	mov	r0, r9
 800c9d2:	f000 fd03 	bl	800d3dc <__lshift>
 800c9d6:	9001      	str	r0, [sp, #4]
 800c9d8:	9b06      	ldr	r3, [sp, #24]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	dd05      	ble.n	800c9ea <_dtoa_r+0x76a>
 800c9de:	4621      	mov	r1, r4
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	4648      	mov	r0, r9
 800c9e4:	f000 fcfa 	bl	800d3dc <__lshift>
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d056      	beq.n	800ca9e <_dtoa_r+0x81e>
 800c9f0:	9801      	ldr	r0, [sp, #4]
 800c9f2:	4621      	mov	r1, r4
 800c9f4:	f000 fd5e 	bl	800d4b4 <__mcmp>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	da50      	bge.n	800ca9e <_dtoa_r+0x81e>
 800c9fc:	f108 33ff 	add.w	r3, r8, #4294967295
 800ca00:	9304      	str	r3, [sp, #16]
 800ca02:	9901      	ldr	r1, [sp, #4]
 800ca04:	2300      	movs	r3, #0
 800ca06:	220a      	movs	r2, #10
 800ca08:	4648      	mov	r0, r9
 800ca0a:	f000 faf1 	bl	800cff0 <__multadd>
 800ca0e:	9b08      	ldr	r3, [sp, #32]
 800ca10:	9001      	str	r0, [sp, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f000 816e 	beq.w	800ccf4 <_dtoa_r+0xa74>
 800ca18:	4629      	mov	r1, r5
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	220a      	movs	r2, #10
 800ca1e:	4648      	mov	r0, r9
 800ca20:	f000 fae6 	bl	800cff0 <__multadd>
 800ca24:	f1bb 0f00 	cmp.w	fp, #0
 800ca28:	4605      	mov	r5, r0
 800ca2a:	dc64      	bgt.n	800caf6 <_dtoa_r+0x876>
 800ca2c:	9b07      	ldr	r3, [sp, #28]
 800ca2e:	2b02      	cmp	r3, #2
 800ca30:	dc3e      	bgt.n	800cab0 <_dtoa_r+0x830>
 800ca32:	e060      	b.n	800caf6 <_dtoa_r+0x876>
 800ca34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca36:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ca3a:	e73c      	b.n	800c8b6 <_dtoa_r+0x636>
 800ca3c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800ca40:	42a3      	cmp	r3, r4
 800ca42:	bfbf      	itttt	lt
 800ca44:	1ae2      	sublt	r2, r4, r3
 800ca46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ca48:	189b      	addlt	r3, r3, r2
 800ca4a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800ca4c:	bfae      	itee	ge
 800ca4e:	1b1c      	subge	r4, r3, r4
 800ca50:	4623      	movlt	r3, r4
 800ca52:	2400      	movlt	r4, #0
 800ca54:	f1ba 0f00 	cmp.w	sl, #0
 800ca58:	bfb5      	itete	lt
 800ca5a:	9a05      	ldrlt	r2, [sp, #20]
 800ca5c:	9e05      	ldrge	r6, [sp, #20]
 800ca5e:	eba2 060a 	sublt.w	r6, r2, sl
 800ca62:	4652      	movge	r2, sl
 800ca64:	bfb8      	it	lt
 800ca66:	2200      	movlt	r2, #0
 800ca68:	e727      	b.n	800c8ba <_dtoa_r+0x63a>
 800ca6a:	9e05      	ldr	r6, [sp, #20]
 800ca6c:	9d08      	ldr	r5, [sp, #32]
 800ca6e:	461c      	mov	r4, r3
 800ca70:	e730      	b.n	800c8d4 <_dtoa_r+0x654>
 800ca72:	461a      	mov	r2, r3
 800ca74:	e758      	b.n	800c928 <_dtoa_r+0x6a8>
 800ca76:	2300      	movs	r3, #0
 800ca78:	e786      	b.n	800c988 <_dtoa_r+0x708>
 800ca7a:	9b02      	ldr	r3, [sp, #8]
 800ca7c:	e784      	b.n	800c988 <_dtoa_r+0x708>
 800ca7e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ca80:	e783      	b.n	800c98a <_dtoa_r+0x70a>
 800ca82:	2300      	movs	r3, #0
 800ca84:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca86:	e784      	b.n	800c992 <_dtoa_r+0x712>
 800ca88:	d09d      	beq.n	800c9c6 <_dtoa_r+0x746>
 800ca8a:	9b05      	ldr	r3, [sp, #20]
 800ca8c:	321c      	adds	r2, #28
 800ca8e:	4413      	add	r3, r2
 800ca90:	9305      	str	r3, [sp, #20]
 800ca92:	9b06      	ldr	r3, [sp, #24]
 800ca94:	4416      	add	r6, r2
 800ca96:	4413      	add	r3, r2
 800ca98:	e794      	b.n	800c9c4 <_dtoa_r+0x744>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	e7f5      	b.n	800ca8a <_dtoa_r+0x80a>
 800ca9e:	f1ba 0f00 	cmp.w	sl, #0
 800caa2:	f8cd 8010 	str.w	r8, [sp, #16]
 800caa6:	46d3      	mov	fp, sl
 800caa8:	dc21      	bgt.n	800caee <_dtoa_r+0x86e>
 800caaa:	9b07      	ldr	r3, [sp, #28]
 800caac:	2b02      	cmp	r3, #2
 800caae:	dd1e      	ble.n	800caee <_dtoa_r+0x86e>
 800cab0:	f1bb 0f00 	cmp.w	fp, #0
 800cab4:	f47f aeb7 	bne.w	800c826 <_dtoa_r+0x5a6>
 800cab8:	4621      	mov	r1, r4
 800caba:	465b      	mov	r3, fp
 800cabc:	2205      	movs	r2, #5
 800cabe:	4648      	mov	r0, r9
 800cac0:	f000 fa96 	bl	800cff0 <__multadd>
 800cac4:	4601      	mov	r1, r0
 800cac6:	4604      	mov	r4, r0
 800cac8:	9801      	ldr	r0, [sp, #4]
 800caca:	f000 fcf3 	bl	800d4b4 <__mcmp>
 800cace:	2800      	cmp	r0, #0
 800cad0:	f77f aea9 	ble.w	800c826 <_dtoa_r+0x5a6>
 800cad4:	463e      	mov	r6, r7
 800cad6:	2331      	movs	r3, #49	@ 0x31
 800cad8:	f806 3b01 	strb.w	r3, [r6], #1
 800cadc:	9b04      	ldr	r3, [sp, #16]
 800cade:	3301      	adds	r3, #1
 800cae0:	9304      	str	r3, [sp, #16]
 800cae2:	e6a4      	b.n	800c82e <_dtoa_r+0x5ae>
 800cae4:	f8cd 8010 	str.w	r8, [sp, #16]
 800cae8:	4654      	mov	r4, sl
 800caea:	4625      	mov	r5, r4
 800caec:	e7f2      	b.n	800cad4 <_dtoa_r+0x854>
 800caee:	9b08      	ldr	r3, [sp, #32]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f000 8103 	beq.w	800ccfc <_dtoa_r+0xa7c>
 800caf6:	2e00      	cmp	r6, #0
 800caf8:	dd05      	ble.n	800cb06 <_dtoa_r+0x886>
 800cafa:	4629      	mov	r1, r5
 800cafc:	4632      	mov	r2, r6
 800cafe:	4648      	mov	r0, r9
 800cb00:	f000 fc6c 	bl	800d3dc <__lshift>
 800cb04:	4605      	mov	r5, r0
 800cb06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d058      	beq.n	800cbbe <_dtoa_r+0x93e>
 800cb0c:	6869      	ldr	r1, [r5, #4]
 800cb0e:	4648      	mov	r0, r9
 800cb10:	f000 fa0c 	bl	800cf2c <_Balloc>
 800cb14:	4606      	mov	r6, r0
 800cb16:	b928      	cbnz	r0, 800cb24 <_dtoa_r+0x8a4>
 800cb18:	4b82      	ldr	r3, [pc, #520]	@ (800cd24 <_dtoa_r+0xaa4>)
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cb20:	f7ff bbc7 	b.w	800c2b2 <_dtoa_r+0x32>
 800cb24:	692a      	ldr	r2, [r5, #16]
 800cb26:	3202      	adds	r2, #2
 800cb28:	0092      	lsls	r2, r2, #2
 800cb2a:	f105 010c 	add.w	r1, r5, #12
 800cb2e:	300c      	adds	r0, #12
 800cb30:	f001 ff1e 	bl	800e970 <memcpy>
 800cb34:	2201      	movs	r2, #1
 800cb36:	4631      	mov	r1, r6
 800cb38:	4648      	mov	r0, r9
 800cb3a:	f000 fc4f 	bl	800d3dc <__lshift>
 800cb3e:	1c7b      	adds	r3, r7, #1
 800cb40:	9305      	str	r3, [sp, #20]
 800cb42:	eb07 030b 	add.w	r3, r7, fp
 800cb46:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb48:	9b02      	ldr	r3, [sp, #8]
 800cb4a:	f003 0301 	and.w	r3, r3, #1
 800cb4e:	46a8      	mov	r8, r5
 800cb50:	9308      	str	r3, [sp, #32]
 800cb52:	4605      	mov	r5, r0
 800cb54:	9b05      	ldr	r3, [sp, #20]
 800cb56:	9801      	ldr	r0, [sp, #4]
 800cb58:	4621      	mov	r1, r4
 800cb5a:	f103 3bff 	add.w	fp, r3, #4294967295
 800cb5e:	f7ff fb05 	bl	800c16c <quorem>
 800cb62:	4641      	mov	r1, r8
 800cb64:	9002      	str	r0, [sp, #8]
 800cb66:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800cb6a:	9801      	ldr	r0, [sp, #4]
 800cb6c:	f000 fca2 	bl	800d4b4 <__mcmp>
 800cb70:	462a      	mov	r2, r5
 800cb72:	9006      	str	r0, [sp, #24]
 800cb74:	4621      	mov	r1, r4
 800cb76:	4648      	mov	r0, r9
 800cb78:	f000 fcb8 	bl	800d4ec <__mdiff>
 800cb7c:	68c2      	ldr	r2, [r0, #12]
 800cb7e:	4606      	mov	r6, r0
 800cb80:	b9fa      	cbnz	r2, 800cbc2 <_dtoa_r+0x942>
 800cb82:	4601      	mov	r1, r0
 800cb84:	9801      	ldr	r0, [sp, #4]
 800cb86:	f000 fc95 	bl	800d4b4 <__mcmp>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	4631      	mov	r1, r6
 800cb8e:	4648      	mov	r0, r9
 800cb90:	920a      	str	r2, [sp, #40]	@ 0x28
 800cb92:	f000 fa0b 	bl	800cfac <_Bfree>
 800cb96:	9b07      	ldr	r3, [sp, #28]
 800cb98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb9a:	9e05      	ldr	r6, [sp, #20]
 800cb9c:	ea43 0102 	orr.w	r1, r3, r2
 800cba0:	9b08      	ldr	r3, [sp, #32]
 800cba2:	4319      	orrs	r1, r3
 800cba4:	d10f      	bne.n	800cbc6 <_dtoa_r+0x946>
 800cba6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cbaa:	d028      	beq.n	800cbfe <_dtoa_r+0x97e>
 800cbac:	9b06      	ldr	r3, [sp, #24]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	dd02      	ble.n	800cbb8 <_dtoa_r+0x938>
 800cbb2:	9b02      	ldr	r3, [sp, #8]
 800cbb4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800cbb8:	f88b a000 	strb.w	sl, [fp]
 800cbbc:	e639      	b.n	800c832 <_dtoa_r+0x5b2>
 800cbbe:	4628      	mov	r0, r5
 800cbc0:	e7bd      	b.n	800cb3e <_dtoa_r+0x8be>
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	e7e2      	b.n	800cb8c <_dtoa_r+0x90c>
 800cbc6:	9b06      	ldr	r3, [sp, #24]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	db04      	blt.n	800cbd6 <_dtoa_r+0x956>
 800cbcc:	9907      	ldr	r1, [sp, #28]
 800cbce:	430b      	orrs	r3, r1
 800cbd0:	9908      	ldr	r1, [sp, #32]
 800cbd2:	430b      	orrs	r3, r1
 800cbd4:	d120      	bne.n	800cc18 <_dtoa_r+0x998>
 800cbd6:	2a00      	cmp	r2, #0
 800cbd8:	ddee      	ble.n	800cbb8 <_dtoa_r+0x938>
 800cbda:	9901      	ldr	r1, [sp, #4]
 800cbdc:	2201      	movs	r2, #1
 800cbde:	4648      	mov	r0, r9
 800cbe0:	f000 fbfc 	bl	800d3dc <__lshift>
 800cbe4:	4621      	mov	r1, r4
 800cbe6:	9001      	str	r0, [sp, #4]
 800cbe8:	f000 fc64 	bl	800d4b4 <__mcmp>
 800cbec:	2800      	cmp	r0, #0
 800cbee:	dc03      	bgt.n	800cbf8 <_dtoa_r+0x978>
 800cbf0:	d1e2      	bne.n	800cbb8 <_dtoa_r+0x938>
 800cbf2:	f01a 0f01 	tst.w	sl, #1
 800cbf6:	d0df      	beq.n	800cbb8 <_dtoa_r+0x938>
 800cbf8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cbfc:	d1d9      	bne.n	800cbb2 <_dtoa_r+0x932>
 800cbfe:	2339      	movs	r3, #57	@ 0x39
 800cc00:	f88b 3000 	strb.w	r3, [fp]
 800cc04:	4633      	mov	r3, r6
 800cc06:	461e      	mov	r6, r3
 800cc08:	3b01      	subs	r3, #1
 800cc0a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cc0e:	2a39      	cmp	r2, #57	@ 0x39
 800cc10:	d053      	beq.n	800ccba <_dtoa_r+0xa3a>
 800cc12:	3201      	adds	r2, #1
 800cc14:	701a      	strb	r2, [r3, #0]
 800cc16:	e60c      	b.n	800c832 <_dtoa_r+0x5b2>
 800cc18:	2a00      	cmp	r2, #0
 800cc1a:	dd07      	ble.n	800cc2c <_dtoa_r+0x9ac>
 800cc1c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cc20:	d0ed      	beq.n	800cbfe <_dtoa_r+0x97e>
 800cc22:	f10a 0301 	add.w	r3, sl, #1
 800cc26:	f88b 3000 	strb.w	r3, [fp]
 800cc2a:	e602      	b.n	800c832 <_dtoa_r+0x5b2>
 800cc2c:	9b05      	ldr	r3, [sp, #20]
 800cc2e:	9a05      	ldr	r2, [sp, #20]
 800cc30:	f803 ac01 	strb.w	sl, [r3, #-1]
 800cc34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d029      	beq.n	800cc8e <_dtoa_r+0xa0e>
 800cc3a:	9901      	ldr	r1, [sp, #4]
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	220a      	movs	r2, #10
 800cc40:	4648      	mov	r0, r9
 800cc42:	f000 f9d5 	bl	800cff0 <__multadd>
 800cc46:	45a8      	cmp	r8, r5
 800cc48:	9001      	str	r0, [sp, #4]
 800cc4a:	f04f 0300 	mov.w	r3, #0
 800cc4e:	f04f 020a 	mov.w	r2, #10
 800cc52:	4641      	mov	r1, r8
 800cc54:	4648      	mov	r0, r9
 800cc56:	d107      	bne.n	800cc68 <_dtoa_r+0x9e8>
 800cc58:	f000 f9ca 	bl	800cff0 <__multadd>
 800cc5c:	4680      	mov	r8, r0
 800cc5e:	4605      	mov	r5, r0
 800cc60:	9b05      	ldr	r3, [sp, #20]
 800cc62:	3301      	adds	r3, #1
 800cc64:	9305      	str	r3, [sp, #20]
 800cc66:	e775      	b.n	800cb54 <_dtoa_r+0x8d4>
 800cc68:	f000 f9c2 	bl	800cff0 <__multadd>
 800cc6c:	4629      	mov	r1, r5
 800cc6e:	4680      	mov	r8, r0
 800cc70:	2300      	movs	r3, #0
 800cc72:	220a      	movs	r2, #10
 800cc74:	4648      	mov	r0, r9
 800cc76:	f000 f9bb 	bl	800cff0 <__multadd>
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	e7f0      	b.n	800cc60 <_dtoa_r+0x9e0>
 800cc7e:	f1bb 0f00 	cmp.w	fp, #0
 800cc82:	bfcc      	ite	gt
 800cc84:	465e      	movgt	r6, fp
 800cc86:	2601      	movle	r6, #1
 800cc88:	443e      	add	r6, r7
 800cc8a:	f04f 0800 	mov.w	r8, #0
 800cc8e:	9901      	ldr	r1, [sp, #4]
 800cc90:	2201      	movs	r2, #1
 800cc92:	4648      	mov	r0, r9
 800cc94:	f000 fba2 	bl	800d3dc <__lshift>
 800cc98:	4621      	mov	r1, r4
 800cc9a:	9001      	str	r0, [sp, #4]
 800cc9c:	f000 fc0a 	bl	800d4b4 <__mcmp>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	dcaf      	bgt.n	800cc04 <_dtoa_r+0x984>
 800cca4:	d102      	bne.n	800ccac <_dtoa_r+0xa2c>
 800cca6:	f01a 0f01 	tst.w	sl, #1
 800ccaa:	d1ab      	bne.n	800cc04 <_dtoa_r+0x984>
 800ccac:	4633      	mov	r3, r6
 800ccae:	461e      	mov	r6, r3
 800ccb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccb4:	2a30      	cmp	r2, #48	@ 0x30
 800ccb6:	d0fa      	beq.n	800ccae <_dtoa_r+0xa2e>
 800ccb8:	e5bb      	b.n	800c832 <_dtoa_r+0x5b2>
 800ccba:	429f      	cmp	r7, r3
 800ccbc:	d1a3      	bne.n	800cc06 <_dtoa_r+0x986>
 800ccbe:	9b04      	ldr	r3, [sp, #16]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	9304      	str	r3, [sp, #16]
 800ccc4:	2331      	movs	r3, #49	@ 0x31
 800ccc6:	703b      	strb	r3, [r7, #0]
 800ccc8:	e5b3      	b.n	800c832 <_dtoa_r+0x5b2>
 800ccca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cccc:	4f16      	ldr	r7, [pc, #88]	@ (800cd28 <_dtoa_r+0xaa8>)
 800ccce:	b11b      	cbz	r3, 800ccd8 <_dtoa_r+0xa58>
 800ccd0:	f107 0308 	add.w	r3, r7, #8
 800ccd4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ccd6:	6013      	str	r3, [r2, #0]
 800ccd8:	4638      	mov	r0, r7
 800ccda:	b011      	add	sp, #68	@ 0x44
 800ccdc:	ecbd 8b02 	vpop	{d8}
 800cce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce4:	9b07      	ldr	r3, [sp, #28]
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	f77f ae36 	ble.w	800c958 <_dtoa_r+0x6d8>
 800ccec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccf0:	2001      	movs	r0, #1
 800ccf2:	e656      	b.n	800c9a2 <_dtoa_r+0x722>
 800ccf4:	f1bb 0f00 	cmp.w	fp, #0
 800ccf8:	f77f aed7 	ble.w	800caaa <_dtoa_r+0x82a>
 800ccfc:	463e      	mov	r6, r7
 800ccfe:	9801      	ldr	r0, [sp, #4]
 800cd00:	4621      	mov	r1, r4
 800cd02:	f7ff fa33 	bl	800c16c <quorem>
 800cd06:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800cd0a:	f806 ab01 	strb.w	sl, [r6], #1
 800cd0e:	1bf2      	subs	r2, r6, r7
 800cd10:	4593      	cmp	fp, r2
 800cd12:	ddb4      	ble.n	800cc7e <_dtoa_r+0x9fe>
 800cd14:	9901      	ldr	r1, [sp, #4]
 800cd16:	2300      	movs	r3, #0
 800cd18:	220a      	movs	r2, #10
 800cd1a:	4648      	mov	r0, r9
 800cd1c:	f000 f968 	bl	800cff0 <__multadd>
 800cd20:	9001      	str	r0, [sp, #4]
 800cd22:	e7ec      	b.n	800ccfe <_dtoa_r+0xa7e>
 800cd24:	0800fc45 	.word	0x0800fc45
 800cd28:	0800fbc9 	.word	0x0800fbc9

0800cd2c <_free_r>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	4605      	mov	r5, r0
 800cd30:	2900      	cmp	r1, #0
 800cd32:	d041      	beq.n	800cdb8 <_free_r+0x8c>
 800cd34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd38:	1f0c      	subs	r4, r1, #4
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	bfb8      	it	lt
 800cd3e:	18e4      	addlt	r4, r4, r3
 800cd40:	f000 f8e8 	bl	800cf14 <__malloc_lock>
 800cd44:	4a1d      	ldr	r2, [pc, #116]	@ (800cdbc <_free_r+0x90>)
 800cd46:	6813      	ldr	r3, [r2, #0]
 800cd48:	b933      	cbnz	r3, 800cd58 <_free_r+0x2c>
 800cd4a:	6063      	str	r3, [r4, #4]
 800cd4c:	6014      	str	r4, [r2, #0]
 800cd4e:	4628      	mov	r0, r5
 800cd50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd54:	f000 b8e4 	b.w	800cf20 <__malloc_unlock>
 800cd58:	42a3      	cmp	r3, r4
 800cd5a:	d908      	bls.n	800cd6e <_free_r+0x42>
 800cd5c:	6820      	ldr	r0, [r4, #0]
 800cd5e:	1821      	adds	r1, r4, r0
 800cd60:	428b      	cmp	r3, r1
 800cd62:	bf01      	itttt	eq
 800cd64:	6819      	ldreq	r1, [r3, #0]
 800cd66:	685b      	ldreq	r3, [r3, #4]
 800cd68:	1809      	addeq	r1, r1, r0
 800cd6a:	6021      	streq	r1, [r4, #0]
 800cd6c:	e7ed      	b.n	800cd4a <_free_r+0x1e>
 800cd6e:	461a      	mov	r2, r3
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	b10b      	cbz	r3, 800cd78 <_free_r+0x4c>
 800cd74:	42a3      	cmp	r3, r4
 800cd76:	d9fa      	bls.n	800cd6e <_free_r+0x42>
 800cd78:	6811      	ldr	r1, [r2, #0]
 800cd7a:	1850      	adds	r0, r2, r1
 800cd7c:	42a0      	cmp	r0, r4
 800cd7e:	d10b      	bne.n	800cd98 <_free_r+0x6c>
 800cd80:	6820      	ldr	r0, [r4, #0]
 800cd82:	4401      	add	r1, r0
 800cd84:	1850      	adds	r0, r2, r1
 800cd86:	4283      	cmp	r3, r0
 800cd88:	6011      	str	r1, [r2, #0]
 800cd8a:	d1e0      	bne.n	800cd4e <_free_r+0x22>
 800cd8c:	6818      	ldr	r0, [r3, #0]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	6053      	str	r3, [r2, #4]
 800cd92:	4408      	add	r0, r1
 800cd94:	6010      	str	r0, [r2, #0]
 800cd96:	e7da      	b.n	800cd4e <_free_r+0x22>
 800cd98:	d902      	bls.n	800cda0 <_free_r+0x74>
 800cd9a:	230c      	movs	r3, #12
 800cd9c:	602b      	str	r3, [r5, #0]
 800cd9e:	e7d6      	b.n	800cd4e <_free_r+0x22>
 800cda0:	6820      	ldr	r0, [r4, #0]
 800cda2:	1821      	adds	r1, r4, r0
 800cda4:	428b      	cmp	r3, r1
 800cda6:	bf04      	itt	eq
 800cda8:	6819      	ldreq	r1, [r3, #0]
 800cdaa:	685b      	ldreq	r3, [r3, #4]
 800cdac:	6063      	str	r3, [r4, #4]
 800cdae:	bf04      	itt	eq
 800cdb0:	1809      	addeq	r1, r1, r0
 800cdb2:	6021      	streq	r1, [r4, #0]
 800cdb4:	6054      	str	r4, [r2, #4]
 800cdb6:	e7ca      	b.n	800cd4e <_free_r+0x22>
 800cdb8:	bd38      	pop	{r3, r4, r5, pc}
 800cdba:	bf00      	nop
 800cdbc:	20002e8c 	.word	0x20002e8c

0800cdc0 <malloc>:
 800cdc0:	4b02      	ldr	r3, [pc, #8]	@ (800cdcc <malloc+0xc>)
 800cdc2:	4601      	mov	r1, r0
 800cdc4:	6818      	ldr	r0, [r3, #0]
 800cdc6:	f000 b825 	b.w	800ce14 <_malloc_r>
 800cdca:	bf00      	nop
 800cdcc:	20000030 	.word	0x20000030

0800cdd0 <sbrk_aligned>:
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	4e0f      	ldr	r6, [pc, #60]	@ (800ce10 <sbrk_aligned+0x40>)
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	6831      	ldr	r1, [r6, #0]
 800cdd8:	4605      	mov	r5, r0
 800cdda:	b911      	cbnz	r1, 800cde2 <sbrk_aligned+0x12>
 800cddc:	f001 fdb8 	bl	800e950 <_sbrk_r>
 800cde0:	6030      	str	r0, [r6, #0]
 800cde2:	4621      	mov	r1, r4
 800cde4:	4628      	mov	r0, r5
 800cde6:	f001 fdb3 	bl	800e950 <_sbrk_r>
 800cdea:	1c43      	adds	r3, r0, #1
 800cdec:	d103      	bne.n	800cdf6 <sbrk_aligned+0x26>
 800cdee:	f04f 34ff 	mov.w	r4, #4294967295
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	bd70      	pop	{r4, r5, r6, pc}
 800cdf6:	1cc4      	adds	r4, r0, #3
 800cdf8:	f024 0403 	bic.w	r4, r4, #3
 800cdfc:	42a0      	cmp	r0, r4
 800cdfe:	d0f8      	beq.n	800cdf2 <sbrk_aligned+0x22>
 800ce00:	1a21      	subs	r1, r4, r0
 800ce02:	4628      	mov	r0, r5
 800ce04:	f001 fda4 	bl	800e950 <_sbrk_r>
 800ce08:	3001      	adds	r0, #1
 800ce0a:	d1f2      	bne.n	800cdf2 <sbrk_aligned+0x22>
 800ce0c:	e7ef      	b.n	800cdee <sbrk_aligned+0x1e>
 800ce0e:	bf00      	nop
 800ce10:	20002e88 	.word	0x20002e88

0800ce14 <_malloc_r>:
 800ce14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce18:	1ccd      	adds	r5, r1, #3
 800ce1a:	f025 0503 	bic.w	r5, r5, #3
 800ce1e:	3508      	adds	r5, #8
 800ce20:	2d0c      	cmp	r5, #12
 800ce22:	bf38      	it	cc
 800ce24:	250c      	movcc	r5, #12
 800ce26:	2d00      	cmp	r5, #0
 800ce28:	4606      	mov	r6, r0
 800ce2a:	db01      	blt.n	800ce30 <_malloc_r+0x1c>
 800ce2c:	42a9      	cmp	r1, r5
 800ce2e:	d904      	bls.n	800ce3a <_malloc_r+0x26>
 800ce30:	230c      	movs	r3, #12
 800ce32:	6033      	str	r3, [r6, #0]
 800ce34:	2000      	movs	r0, #0
 800ce36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf10 <_malloc_r+0xfc>
 800ce3e:	f000 f869 	bl	800cf14 <__malloc_lock>
 800ce42:	f8d8 3000 	ldr.w	r3, [r8]
 800ce46:	461c      	mov	r4, r3
 800ce48:	bb44      	cbnz	r4, 800ce9c <_malloc_r+0x88>
 800ce4a:	4629      	mov	r1, r5
 800ce4c:	4630      	mov	r0, r6
 800ce4e:	f7ff ffbf 	bl	800cdd0 <sbrk_aligned>
 800ce52:	1c43      	adds	r3, r0, #1
 800ce54:	4604      	mov	r4, r0
 800ce56:	d158      	bne.n	800cf0a <_malloc_r+0xf6>
 800ce58:	f8d8 4000 	ldr.w	r4, [r8]
 800ce5c:	4627      	mov	r7, r4
 800ce5e:	2f00      	cmp	r7, #0
 800ce60:	d143      	bne.n	800ceea <_malloc_r+0xd6>
 800ce62:	2c00      	cmp	r4, #0
 800ce64:	d04b      	beq.n	800cefe <_malloc_r+0xea>
 800ce66:	6823      	ldr	r3, [r4, #0]
 800ce68:	4639      	mov	r1, r7
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	eb04 0903 	add.w	r9, r4, r3
 800ce70:	f001 fd6e 	bl	800e950 <_sbrk_r>
 800ce74:	4581      	cmp	r9, r0
 800ce76:	d142      	bne.n	800cefe <_malloc_r+0xea>
 800ce78:	6821      	ldr	r1, [r4, #0]
 800ce7a:	1a6d      	subs	r5, r5, r1
 800ce7c:	4629      	mov	r1, r5
 800ce7e:	4630      	mov	r0, r6
 800ce80:	f7ff ffa6 	bl	800cdd0 <sbrk_aligned>
 800ce84:	3001      	adds	r0, #1
 800ce86:	d03a      	beq.n	800cefe <_malloc_r+0xea>
 800ce88:	6823      	ldr	r3, [r4, #0]
 800ce8a:	442b      	add	r3, r5
 800ce8c:	6023      	str	r3, [r4, #0]
 800ce8e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce92:	685a      	ldr	r2, [r3, #4]
 800ce94:	bb62      	cbnz	r2, 800cef0 <_malloc_r+0xdc>
 800ce96:	f8c8 7000 	str.w	r7, [r8]
 800ce9a:	e00f      	b.n	800cebc <_malloc_r+0xa8>
 800ce9c:	6822      	ldr	r2, [r4, #0]
 800ce9e:	1b52      	subs	r2, r2, r5
 800cea0:	d420      	bmi.n	800cee4 <_malloc_r+0xd0>
 800cea2:	2a0b      	cmp	r2, #11
 800cea4:	d917      	bls.n	800ced6 <_malloc_r+0xc2>
 800cea6:	1961      	adds	r1, r4, r5
 800cea8:	42a3      	cmp	r3, r4
 800ceaa:	6025      	str	r5, [r4, #0]
 800ceac:	bf18      	it	ne
 800ceae:	6059      	strne	r1, [r3, #4]
 800ceb0:	6863      	ldr	r3, [r4, #4]
 800ceb2:	bf08      	it	eq
 800ceb4:	f8c8 1000 	streq.w	r1, [r8]
 800ceb8:	5162      	str	r2, [r4, r5]
 800ceba:	604b      	str	r3, [r1, #4]
 800cebc:	4630      	mov	r0, r6
 800cebe:	f000 f82f 	bl	800cf20 <__malloc_unlock>
 800cec2:	f104 000b 	add.w	r0, r4, #11
 800cec6:	1d23      	adds	r3, r4, #4
 800cec8:	f020 0007 	bic.w	r0, r0, #7
 800cecc:	1ac2      	subs	r2, r0, r3
 800cece:	bf1c      	itt	ne
 800ced0:	1a1b      	subne	r3, r3, r0
 800ced2:	50a3      	strne	r3, [r4, r2]
 800ced4:	e7af      	b.n	800ce36 <_malloc_r+0x22>
 800ced6:	6862      	ldr	r2, [r4, #4]
 800ced8:	42a3      	cmp	r3, r4
 800ceda:	bf0c      	ite	eq
 800cedc:	f8c8 2000 	streq.w	r2, [r8]
 800cee0:	605a      	strne	r2, [r3, #4]
 800cee2:	e7eb      	b.n	800cebc <_malloc_r+0xa8>
 800cee4:	4623      	mov	r3, r4
 800cee6:	6864      	ldr	r4, [r4, #4]
 800cee8:	e7ae      	b.n	800ce48 <_malloc_r+0x34>
 800ceea:	463c      	mov	r4, r7
 800ceec:	687f      	ldr	r7, [r7, #4]
 800ceee:	e7b6      	b.n	800ce5e <_malloc_r+0x4a>
 800cef0:	461a      	mov	r2, r3
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	42a3      	cmp	r3, r4
 800cef6:	d1fb      	bne.n	800cef0 <_malloc_r+0xdc>
 800cef8:	2300      	movs	r3, #0
 800cefa:	6053      	str	r3, [r2, #4]
 800cefc:	e7de      	b.n	800cebc <_malloc_r+0xa8>
 800cefe:	230c      	movs	r3, #12
 800cf00:	6033      	str	r3, [r6, #0]
 800cf02:	4630      	mov	r0, r6
 800cf04:	f000 f80c 	bl	800cf20 <__malloc_unlock>
 800cf08:	e794      	b.n	800ce34 <_malloc_r+0x20>
 800cf0a:	6005      	str	r5, [r0, #0]
 800cf0c:	e7d6      	b.n	800cebc <_malloc_r+0xa8>
 800cf0e:	bf00      	nop
 800cf10:	20002e8c 	.word	0x20002e8c

0800cf14 <__malloc_lock>:
 800cf14:	4801      	ldr	r0, [pc, #4]	@ (800cf1c <__malloc_lock+0x8>)
 800cf16:	f7ff b920 	b.w	800c15a <__retarget_lock_acquire_recursive>
 800cf1a:	bf00      	nop
 800cf1c:	20002e84 	.word	0x20002e84

0800cf20 <__malloc_unlock>:
 800cf20:	4801      	ldr	r0, [pc, #4]	@ (800cf28 <__malloc_unlock+0x8>)
 800cf22:	f7ff b91b 	b.w	800c15c <__retarget_lock_release_recursive>
 800cf26:	bf00      	nop
 800cf28:	20002e84 	.word	0x20002e84

0800cf2c <_Balloc>:
 800cf2c:	b570      	push	{r4, r5, r6, lr}
 800cf2e:	69c6      	ldr	r6, [r0, #28]
 800cf30:	4604      	mov	r4, r0
 800cf32:	460d      	mov	r5, r1
 800cf34:	b976      	cbnz	r6, 800cf54 <_Balloc+0x28>
 800cf36:	2010      	movs	r0, #16
 800cf38:	f7ff ff42 	bl	800cdc0 <malloc>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	61e0      	str	r0, [r4, #28]
 800cf40:	b920      	cbnz	r0, 800cf4c <_Balloc+0x20>
 800cf42:	4b18      	ldr	r3, [pc, #96]	@ (800cfa4 <_Balloc+0x78>)
 800cf44:	4818      	ldr	r0, [pc, #96]	@ (800cfa8 <_Balloc+0x7c>)
 800cf46:	216b      	movs	r1, #107	@ 0x6b
 800cf48:	f001 fd2a 	bl	800e9a0 <__assert_func>
 800cf4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf50:	6006      	str	r6, [r0, #0]
 800cf52:	60c6      	str	r6, [r0, #12]
 800cf54:	69e6      	ldr	r6, [r4, #28]
 800cf56:	68f3      	ldr	r3, [r6, #12]
 800cf58:	b183      	cbz	r3, 800cf7c <_Balloc+0x50>
 800cf5a:	69e3      	ldr	r3, [r4, #28]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf62:	b9b8      	cbnz	r0, 800cf94 <_Balloc+0x68>
 800cf64:	2101      	movs	r1, #1
 800cf66:	fa01 f605 	lsl.w	r6, r1, r5
 800cf6a:	1d72      	adds	r2, r6, #5
 800cf6c:	0092      	lsls	r2, r2, #2
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f001 fd34 	bl	800e9dc <_calloc_r>
 800cf74:	b160      	cbz	r0, 800cf90 <_Balloc+0x64>
 800cf76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf7a:	e00e      	b.n	800cf9a <_Balloc+0x6e>
 800cf7c:	2221      	movs	r2, #33	@ 0x21
 800cf7e:	2104      	movs	r1, #4
 800cf80:	4620      	mov	r0, r4
 800cf82:	f001 fd2b 	bl	800e9dc <_calloc_r>
 800cf86:	69e3      	ldr	r3, [r4, #28]
 800cf88:	60f0      	str	r0, [r6, #12]
 800cf8a:	68db      	ldr	r3, [r3, #12]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d1e4      	bne.n	800cf5a <_Balloc+0x2e>
 800cf90:	2000      	movs	r0, #0
 800cf92:	bd70      	pop	{r4, r5, r6, pc}
 800cf94:	6802      	ldr	r2, [r0, #0]
 800cf96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cfa0:	e7f7      	b.n	800cf92 <_Balloc+0x66>
 800cfa2:	bf00      	nop
 800cfa4:	0800fbd6 	.word	0x0800fbd6
 800cfa8:	0800fc56 	.word	0x0800fc56

0800cfac <_Bfree>:
 800cfac:	b570      	push	{r4, r5, r6, lr}
 800cfae:	69c6      	ldr	r6, [r0, #28]
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	460c      	mov	r4, r1
 800cfb4:	b976      	cbnz	r6, 800cfd4 <_Bfree+0x28>
 800cfb6:	2010      	movs	r0, #16
 800cfb8:	f7ff ff02 	bl	800cdc0 <malloc>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	61e8      	str	r0, [r5, #28]
 800cfc0:	b920      	cbnz	r0, 800cfcc <_Bfree+0x20>
 800cfc2:	4b09      	ldr	r3, [pc, #36]	@ (800cfe8 <_Bfree+0x3c>)
 800cfc4:	4809      	ldr	r0, [pc, #36]	@ (800cfec <_Bfree+0x40>)
 800cfc6:	218f      	movs	r1, #143	@ 0x8f
 800cfc8:	f001 fcea 	bl	800e9a0 <__assert_func>
 800cfcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfd0:	6006      	str	r6, [r0, #0]
 800cfd2:	60c6      	str	r6, [r0, #12]
 800cfd4:	b13c      	cbz	r4, 800cfe6 <_Bfree+0x3a>
 800cfd6:	69eb      	ldr	r3, [r5, #28]
 800cfd8:	6862      	ldr	r2, [r4, #4]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfe0:	6021      	str	r1, [r4, #0]
 800cfe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfe6:	bd70      	pop	{r4, r5, r6, pc}
 800cfe8:	0800fbd6 	.word	0x0800fbd6
 800cfec:	0800fc56 	.word	0x0800fc56

0800cff0 <__multadd>:
 800cff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff4:	690d      	ldr	r5, [r1, #16]
 800cff6:	4607      	mov	r7, r0
 800cff8:	460c      	mov	r4, r1
 800cffa:	461e      	mov	r6, r3
 800cffc:	f101 0c14 	add.w	ip, r1, #20
 800d000:	2000      	movs	r0, #0
 800d002:	f8dc 3000 	ldr.w	r3, [ip]
 800d006:	b299      	uxth	r1, r3
 800d008:	fb02 6101 	mla	r1, r2, r1, r6
 800d00c:	0c1e      	lsrs	r6, r3, #16
 800d00e:	0c0b      	lsrs	r3, r1, #16
 800d010:	fb02 3306 	mla	r3, r2, r6, r3
 800d014:	b289      	uxth	r1, r1
 800d016:	3001      	adds	r0, #1
 800d018:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d01c:	4285      	cmp	r5, r0
 800d01e:	f84c 1b04 	str.w	r1, [ip], #4
 800d022:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d026:	dcec      	bgt.n	800d002 <__multadd+0x12>
 800d028:	b30e      	cbz	r6, 800d06e <__multadd+0x7e>
 800d02a:	68a3      	ldr	r3, [r4, #8]
 800d02c:	42ab      	cmp	r3, r5
 800d02e:	dc19      	bgt.n	800d064 <__multadd+0x74>
 800d030:	6861      	ldr	r1, [r4, #4]
 800d032:	4638      	mov	r0, r7
 800d034:	3101      	adds	r1, #1
 800d036:	f7ff ff79 	bl	800cf2c <_Balloc>
 800d03a:	4680      	mov	r8, r0
 800d03c:	b928      	cbnz	r0, 800d04a <__multadd+0x5a>
 800d03e:	4602      	mov	r2, r0
 800d040:	4b0c      	ldr	r3, [pc, #48]	@ (800d074 <__multadd+0x84>)
 800d042:	480d      	ldr	r0, [pc, #52]	@ (800d078 <__multadd+0x88>)
 800d044:	21ba      	movs	r1, #186	@ 0xba
 800d046:	f001 fcab 	bl	800e9a0 <__assert_func>
 800d04a:	6922      	ldr	r2, [r4, #16]
 800d04c:	3202      	adds	r2, #2
 800d04e:	f104 010c 	add.w	r1, r4, #12
 800d052:	0092      	lsls	r2, r2, #2
 800d054:	300c      	adds	r0, #12
 800d056:	f001 fc8b 	bl	800e970 <memcpy>
 800d05a:	4621      	mov	r1, r4
 800d05c:	4638      	mov	r0, r7
 800d05e:	f7ff ffa5 	bl	800cfac <_Bfree>
 800d062:	4644      	mov	r4, r8
 800d064:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d068:	3501      	adds	r5, #1
 800d06a:	615e      	str	r6, [r3, #20]
 800d06c:	6125      	str	r5, [r4, #16]
 800d06e:	4620      	mov	r0, r4
 800d070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d074:	0800fc45 	.word	0x0800fc45
 800d078:	0800fc56 	.word	0x0800fc56

0800d07c <__s2b>:
 800d07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d080:	460c      	mov	r4, r1
 800d082:	4615      	mov	r5, r2
 800d084:	461f      	mov	r7, r3
 800d086:	2209      	movs	r2, #9
 800d088:	3308      	adds	r3, #8
 800d08a:	4606      	mov	r6, r0
 800d08c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d090:	2100      	movs	r1, #0
 800d092:	2201      	movs	r2, #1
 800d094:	429a      	cmp	r2, r3
 800d096:	db09      	blt.n	800d0ac <__s2b+0x30>
 800d098:	4630      	mov	r0, r6
 800d09a:	f7ff ff47 	bl	800cf2c <_Balloc>
 800d09e:	b940      	cbnz	r0, 800d0b2 <__s2b+0x36>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	4b19      	ldr	r3, [pc, #100]	@ (800d108 <__s2b+0x8c>)
 800d0a4:	4819      	ldr	r0, [pc, #100]	@ (800d10c <__s2b+0x90>)
 800d0a6:	21d3      	movs	r1, #211	@ 0xd3
 800d0a8:	f001 fc7a 	bl	800e9a0 <__assert_func>
 800d0ac:	0052      	lsls	r2, r2, #1
 800d0ae:	3101      	adds	r1, #1
 800d0b0:	e7f0      	b.n	800d094 <__s2b+0x18>
 800d0b2:	9b08      	ldr	r3, [sp, #32]
 800d0b4:	6143      	str	r3, [r0, #20]
 800d0b6:	2d09      	cmp	r5, #9
 800d0b8:	f04f 0301 	mov.w	r3, #1
 800d0bc:	6103      	str	r3, [r0, #16]
 800d0be:	dd16      	ble.n	800d0ee <__s2b+0x72>
 800d0c0:	f104 0909 	add.w	r9, r4, #9
 800d0c4:	46c8      	mov	r8, r9
 800d0c6:	442c      	add	r4, r5
 800d0c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d0cc:	4601      	mov	r1, r0
 800d0ce:	3b30      	subs	r3, #48	@ 0x30
 800d0d0:	220a      	movs	r2, #10
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	f7ff ff8c 	bl	800cff0 <__multadd>
 800d0d8:	45a0      	cmp	r8, r4
 800d0da:	d1f5      	bne.n	800d0c8 <__s2b+0x4c>
 800d0dc:	f1a5 0408 	sub.w	r4, r5, #8
 800d0e0:	444c      	add	r4, r9
 800d0e2:	1b2d      	subs	r5, r5, r4
 800d0e4:	1963      	adds	r3, r4, r5
 800d0e6:	42bb      	cmp	r3, r7
 800d0e8:	db04      	blt.n	800d0f4 <__s2b+0x78>
 800d0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ee:	340a      	adds	r4, #10
 800d0f0:	2509      	movs	r5, #9
 800d0f2:	e7f6      	b.n	800d0e2 <__s2b+0x66>
 800d0f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d0f8:	4601      	mov	r1, r0
 800d0fa:	3b30      	subs	r3, #48	@ 0x30
 800d0fc:	220a      	movs	r2, #10
 800d0fe:	4630      	mov	r0, r6
 800d100:	f7ff ff76 	bl	800cff0 <__multadd>
 800d104:	e7ee      	b.n	800d0e4 <__s2b+0x68>
 800d106:	bf00      	nop
 800d108:	0800fc45 	.word	0x0800fc45
 800d10c:	0800fc56 	.word	0x0800fc56

0800d110 <__hi0bits>:
 800d110:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d114:	4603      	mov	r3, r0
 800d116:	bf36      	itet	cc
 800d118:	0403      	lslcc	r3, r0, #16
 800d11a:	2000      	movcs	r0, #0
 800d11c:	2010      	movcc	r0, #16
 800d11e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d122:	bf3c      	itt	cc
 800d124:	021b      	lslcc	r3, r3, #8
 800d126:	3008      	addcc	r0, #8
 800d128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d12c:	bf3c      	itt	cc
 800d12e:	011b      	lslcc	r3, r3, #4
 800d130:	3004      	addcc	r0, #4
 800d132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d136:	bf3c      	itt	cc
 800d138:	009b      	lslcc	r3, r3, #2
 800d13a:	3002      	addcc	r0, #2
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	db05      	blt.n	800d14c <__hi0bits+0x3c>
 800d140:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d144:	f100 0001 	add.w	r0, r0, #1
 800d148:	bf08      	it	eq
 800d14a:	2020      	moveq	r0, #32
 800d14c:	4770      	bx	lr

0800d14e <__lo0bits>:
 800d14e:	6803      	ldr	r3, [r0, #0]
 800d150:	4602      	mov	r2, r0
 800d152:	f013 0007 	ands.w	r0, r3, #7
 800d156:	d00b      	beq.n	800d170 <__lo0bits+0x22>
 800d158:	07d9      	lsls	r1, r3, #31
 800d15a:	d421      	bmi.n	800d1a0 <__lo0bits+0x52>
 800d15c:	0798      	lsls	r0, r3, #30
 800d15e:	bf49      	itett	mi
 800d160:	085b      	lsrmi	r3, r3, #1
 800d162:	089b      	lsrpl	r3, r3, #2
 800d164:	2001      	movmi	r0, #1
 800d166:	6013      	strmi	r3, [r2, #0]
 800d168:	bf5c      	itt	pl
 800d16a:	6013      	strpl	r3, [r2, #0]
 800d16c:	2002      	movpl	r0, #2
 800d16e:	4770      	bx	lr
 800d170:	b299      	uxth	r1, r3
 800d172:	b909      	cbnz	r1, 800d178 <__lo0bits+0x2a>
 800d174:	0c1b      	lsrs	r3, r3, #16
 800d176:	2010      	movs	r0, #16
 800d178:	b2d9      	uxtb	r1, r3
 800d17a:	b909      	cbnz	r1, 800d180 <__lo0bits+0x32>
 800d17c:	3008      	adds	r0, #8
 800d17e:	0a1b      	lsrs	r3, r3, #8
 800d180:	0719      	lsls	r1, r3, #28
 800d182:	bf04      	itt	eq
 800d184:	091b      	lsreq	r3, r3, #4
 800d186:	3004      	addeq	r0, #4
 800d188:	0799      	lsls	r1, r3, #30
 800d18a:	bf04      	itt	eq
 800d18c:	089b      	lsreq	r3, r3, #2
 800d18e:	3002      	addeq	r0, #2
 800d190:	07d9      	lsls	r1, r3, #31
 800d192:	d403      	bmi.n	800d19c <__lo0bits+0x4e>
 800d194:	085b      	lsrs	r3, r3, #1
 800d196:	f100 0001 	add.w	r0, r0, #1
 800d19a:	d003      	beq.n	800d1a4 <__lo0bits+0x56>
 800d19c:	6013      	str	r3, [r2, #0]
 800d19e:	4770      	bx	lr
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	4770      	bx	lr
 800d1a4:	2020      	movs	r0, #32
 800d1a6:	4770      	bx	lr

0800d1a8 <__i2b>:
 800d1a8:	b510      	push	{r4, lr}
 800d1aa:	460c      	mov	r4, r1
 800d1ac:	2101      	movs	r1, #1
 800d1ae:	f7ff febd 	bl	800cf2c <_Balloc>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	b928      	cbnz	r0, 800d1c2 <__i2b+0x1a>
 800d1b6:	4b05      	ldr	r3, [pc, #20]	@ (800d1cc <__i2b+0x24>)
 800d1b8:	4805      	ldr	r0, [pc, #20]	@ (800d1d0 <__i2b+0x28>)
 800d1ba:	f240 1145 	movw	r1, #325	@ 0x145
 800d1be:	f001 fbef 	bl	800e9a0 <__assert_func>
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	6144      	str	r4, [r0, #20]
 800d1c6:	6103      	str	r3, [r0, #16]
 800d1c8:	bd10      	pop	{r4, pc}
 800d1ca:	bf00      	nop
 800d1cc:	0800fc45 	.word	0x0800fc45
 800d1d0:	0800fc56 	.word	0x0800fc56

0800d1d4 <__multiply>:
 800d1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d8:	4614      	mov	r4, r2
 800d1da:	690a      	ldr	r2, [r1, #16]
 800d1dc:	6923      	ldr	r3, [r4, #16]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	bfa8      	it	ge
 800d1e2:	4623      	movge	r3, r4
 800d1e4:	460f      	mov	r7, r1
 800d1e6:	bfa4      	itt	ge
 800d1e8:	460c      	movge	r4, r1
 800d1ea:	461f      	movge	r7, r3
 800d1ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d1f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d1f4:	68a3      	ldr	r3, [r4, #8]
 800d1f6:	6861      	ldr	r1, [r4, #4]
 800d1f8:	eb0a 0609 	add.w	r6, sl, r9
 800d1fc:	42b3      	cmp	r3, r6
 800d1fe:	b085      	sub	sp, #20
 800d200:	bfb8      	it	lt
 800d202:	3101      	addlt	r1, #1
 800d204:	f7ff fe92 	bl	800cf2c <_Balloc>
 800d208:	b930      	cbnz	r0, 800d218 <__multiply+0x44>
 800d20a:	4602      	mov	r2, r0
 800d20c:	4b44      	ldr	r3, [pc, #272]	@ (800d320 <__multiply+0x14c>)
 800d20e:	4845      	ldr	r0, [pc, #276]	@ (800d324 <__multiply+0x150>)
 800d210:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d214:	f001 fbc4 	bl	800e9a0 <__assert_func>
 800d218:	f100 0514 	add.w	r5, r0, #20
 800d21c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d220:	462b      	mov	r3, r5
 800d222:	2200      	movs	r2, #0
 800d224:	4543      	cmp	r3, r8
 800d226:	d321      	bcc.n	800d26c <__multiply+0x98>
 800d228:	f107 0114 	add.w	r1, r7, #20
 800d22c:	f104 0214 	add.w	r2, r4, #20
 800d230:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d234:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d238:	9302      	str	r3, [sp, #8]
 800d23a:	1b13      	subs	r3, r2, r4
 800d23c:	3b15      	subs	r3, #21
 800d23e:	f023 0303 	bic.w	r3, r3, #3
 800d242:	3304      	adds	r3, #4
 800d244:	f104 0715 	add.w	r7, r4, #21
 800d248:	42ba      	cmp	r2, r7
 800d24a:	bf38      	it	cc
 800d24c:	2304      	movcc	r3, #4
 800d24e:	9301      	str	r3, [sp, #4]
 800d250:	9b02      	ldr	r3, [sp, #8]
 800d252:	9103      	str	r1, [sp, #12]
 800d254:	428b      	cmp	r3, r1
 800d256:	d80c      	bhi.n	800d272 <__multiply+0x9e>
 800d258:	2e00      	cmp	r6, #0
 800d25a:	dd03      	ble.n	800d264 <__multiply+0x90>
 800d25c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d260:	2b00      	cmp	r3, #0
 800d262:	d05b      	beq.n	800d31c <__multiply+0x148>
 800d264:	6106      	str	r6, [r0, #16]
 800d266:	b005      	add	sp, #20
 800d268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d26c:	f843 2b04 	str.w	r2, [r3], #4
 800d270:	e7d8      	b.n	800d224 <__multiply+0x50>
 800d272:	f8b1 a000 	ldrh.w	sl, [r1]
 800d276:	f1ba 0f00 	cmp.w	sl, #0
 800d27a:	d024      	beq.n	800d2c6 <__multiply+0xf2>
 800d27c:	f104 0e14 	add.w	lr, r4, #20
 800d280:	46a9      	mov	r9, r5
 800d282:	f04f 0c00 	mov.w	ip, #0
 800d286:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d28a:	f8d9 3000 	ldr.w	r3, [r9]
 800d28e:	fa1f fb87 	uxth.w	fp, r7
 800d292:	b29b      	uxth	r3, r3
 800d294:	fb0a 330b 	mla	r3, sl, fp, r3
 800d298:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d29c:	f8d9 7000 	ldr.w	r7, [r9]
 800d2a0:	4463      	add	r3, ip
 800d2a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d2a6:	fb0a c70b 	mla	r7, sl, fp, ip
 800d2aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d2b4:	4572      	cmp	r2, lr
 800d2b6:	f849 3b04 	str.w	r3, [r9], #4
 800d2ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d2be:	d8e2      	bhi.n	800d286 <__multiply+0xb2>
 800d2c0:	9b01      	ldr	r3, [sp, #4]
 800d2c2:	f845 c003 	str.w	ip, [r5, r3]
 800d2c6:	9b03      	ldr	r3, [sp, #12]
 800d2c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d2cc:	3104      	adds	r1, #4
 800d2ce:	f1b9 0f00 	cmp.w	r9, #0
 800d2d2:	d021      	beq.n	800d318 <__multiply+0x144>
 800d2d4:	682b      	ldr	r3, [r5, #0]
 800d2d6:	f104 0c14 	add.w	ip, r4, #20
 800d2da:	46ae      	mov	lr, r5
 800d2dc:	f04f 0a00 	mov.w	sl, #0
 800d2e0:	f8bc b000 	ldrh.w	fp, [ip]
 800d2e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d2e8:	fb09 770b 	mla	r7, r9, fp, r7
 800d2ec:	4457      	add	r7, sl
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d2f4:	f84e 3b04 	str.w	r3, [lr], #4
 800d2f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d2fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d300:	f8be 3000 	ldrh.w	r3, [lr]
 800d304:	fb09 330a 	mla	r3, r9, sl, r3
 800d308:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d30c:	4562      	cmp	r2, ip
 800d30e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d312:	d8e5      	bhi.n	800d2e0 <__multiply+0x10c>
 800d314:	9f01      	ldr	r7, [sp, #4]
 800d316:	51eb      	str	r3, [r5, r7]
 800d318:	3504      	adds	r5, #4
 800d31a:	e799      	b.n	800d250 <__multiply+0x7c>
 800d31c:	3e01      	subs	r6, #1
 800d31e:	e79b      	b.n	800d258 <__multiply+0x84>
 800d320:	0800fc45 	.word	0x0800fc45
 800d324:	0800fc56 	.word	0x0800fc56

0800d328 <__pow5mult>:
 800d328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d32c:	4615      	mov	r5, r2
 800d32e:	f012 0203 	ands.w	r2, r2, #3
 800d332:	4607      	mov	r7, r0
 800d334:	460e      	mov	r6, r1
 800d336:	d007      	beq.n	800d348 <__pow5mult+0x20>
 800d338:	4c25      	ldr	r4, [pc, #148]	@ (800d3d0 <__pow5mult+0xa8>)
 800d33a:	3a01      	subs	r2, #1
 800d33c:	2300      	movs	r3, #0
 800d33e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d342:	f7ff fe55 	bl	800cff0 <__multadd>
 800d346:	4606      	mov	r6, r0
 800d348:	10ad      	asrs	r5, r5, #2
 800d34a:	d03d      	beq.n	800d3c8 <__pow5mult+0xa0>
 800d34c:	69fc      	ldr	r4, [r7, #28]
 800d34e:	b97c      	cbnz	r4, 800d370 <__pow5mult+0x48>
 800d350:	2010      	movs	r0, #16
 800d352:	f7ff fd35 	bl	800cdc0 <malloc>
 800d356:	4602      	mov	r2, r0
 800d358:	61f8      	str	r0, [r7, #28]
 800d35a:	b928      	cbnz	r0, 800d368 <__pow5mult+0x40>
 800d35c:	4b1d      	ldr	r3, [pc, #116]	@ (800d3d4 <__pow5mult+0xac>)
 800d35e:	481e      	ldr	r0, [pc, #120]	@ (800d3d8 <__pow5mult+0xb0>)
 800d360:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d364:	f001 fb1c 	bl	800e9a0 <__assert_func>
 800d368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d36c:	6004      	str	r4, [r0, #0]
 800d36e:	60c4      	str	r4, [r0, #12]
 800d370:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d378:	b94c      	cbnz	r4, 800d38e <__pow5mult+0x66>
 800d37a:	f240 2171 	movw	r1, #625	@ 0x271
 800d37e:	4638      	mov	r0, r7
 800d380:	f7ff ff12 	bl	800d1a8 <__i2b>
 800d384:	2300      	movs	r3, #0
 800d386:	f8c8 0008 	str.w	r0, [r8, #8]
 800d38a:	4604      	mov	r4, r0
 800d38c:	6003      	str	r3, [r0, #0]
 800d38e:	f04f 0900 	mov.w	r9, #0
 800d392:	07eb      	lsls	r3, r5, #31
 800d394:	d50a      	bpl.n	800d3ac <__pow5mult+0x84>
 800d396:	4631      	mov	r1, r6
 800d398:	4622      	mov	r2, r4
 800d39a:	4638      	mov	r0, r7
 800d39c:	f7ff ff1a 	bl	800d1d4 <__multiply>
 800d3a0:	4631      	mov	r1, r6
 800d3a2:	4680      	mov	r8, r0
 800d3a4:	4638      	mov	r0, r7
 800d3a6:	f7ff fe01 	bl	800cfac <_Bfree>
 800d3aa:	4646      	mov	r6, r8
 800d3ac:	106d      	asrs	r5, r5, #1
 800d3ae:	d00b      	beq.n	800d3c8 <__pow5mult+0xa0>
 800d3b0:	6820      	ldr	r0, [r4, #0]
 800d3b2:	b938      	cbnz	r0, 800d3c4 <__pow5mult+0x9c>
 800d3b4:	4622      	mov	r2, r4
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	4638      	mov	r0, r7
 800d3ba:	f7ff ff0b 	bl	800d1d4 <__multiply>
 800d3be:	6020      	str	r0, [r4, #0]
 800d3c0:	f8c0 9000 	str.w	r9, [r0]
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	e7e4      	b.n	800d392 <__pow5mult+0x6a>
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3ce:	bf00      	nop
 800d3d0:	0800fcb0 	.word	0x0800fcb0
 800d3d4:	0800fbd6 	.word	0x0800fbd6
 800d3d8:	0800fc56 	.word	0x0800fc56

0800d3dc <__lshift>:
 800d3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3e0:	460c      	mov	r4, r1
 800d3e2:	6849      	ldr	r1, [r1, #4]
 800d3e4:	6923      	ldr	r3, [r4, #16]
 800d3e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d3ea:	68a3      	ldr	r3, [r4, #8]
 800d3ec:	4607      	mov	r7, r0
 800d3ee:	4691      	mov	r9, r2
 800d3f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d3f4:	f108 0601 	add.w	r6, r8, #1
 800d3f8:	42b3      	cmp	r3, r6
 800d3fa:	db0b      	blt.n	800d414 <__lshift+0x38>
 800d3fc:	4638      	mov	r0, r7
 800d3fe:	f7ff fd95 	bl	800cf2c <_Balloc>
 800d402:	4605      	mov	r5, r0
 800d404:	b948      	cbnz	r0, 800d41a <__lshift+0x3e>
 800d406:	4602      	mov	r2, r0
 800d408:	4b28      	ldr	r3, [pc, #160]	@ (800d4ac <__lshift+0xd0>)
 800d40a:	4829      	ldr	r0, [pc, #164]	@ (800d4b0 <__lshift+0xd4>)
 800d40c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d410:	f001 fac6 	bl	800e9a0 <__assert_func>
 800d414:	3101      	adds	r1, #1
 800d416:	005b      	lsls	r3, r3, #1
 800d418:	e7ee      	b.n	800d3f8 <__lshift+0x1c>
 800d41a:	2300      	movs	r3, #0
 800d41c:	f100 0114 	add.w	r1, r0, #20
 800d420:	f100 0210 	add.w	r2, r0, #16
 800d424:	4618      	mov	r0, r3
 800d426:	4553      	cmp	r3, sl
 800d428:	db33      	blt.n	800d492 <__lshift+0xb6>
 800d42a:	6920      	ldr	r0, [r4, #16]
 800d42c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d430:	f104 0314 	add.w	r3, r4, #20
 800d434:	f019 091f 	ands.w	r9, r9, #31
 800d438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d43c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d440:	d02b      	beq.n	800d49a <__lshift+0xbe>
 800d442:	f1c9 0e20 	rsb	lr, r9, #32
 800d446:	468a      	mov	sl, r1
 800d448:	2200      	movs	r2, #0
 800d44a:	6818      	ldr	r0, [r3, #0]
 800d44c:	fa00 f009 	lsl.w	r0, r0, r9
 800d450:	4310      	orrs	r0, r2
 800d452:	f84a 0b04 	str.w	r0, [sl], #4
 800d456:	f853 2b04 	ldr.w	r2, [r3], #4
 800d45a:	459c      	cmp	ip, r3
 800d45c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d460:	d8f3      	bhi.n	800d44a <__lshift+0x6e>
 800d462:	ebac 0304 	sub.w	r3, ip, r4
 800d466:	3b15      	subs	r3, #21
 800d468:	f023 0303 	bic.w	r3, r3, #3
 800d46c:	3304      	adds	r3, #4
 800d46e:	f104 0015 	add.w	r0, r4, #21
 800d472:	4584      	cmp	ip, r0
 800d474:	bf38      	it	cc
 800d476:	2304      	movcc	r3, #4
 800d478:	50ca      	str	r2, [r1, r3]
 800d47a:	b10a      	cbz	r2, 800d480 <__lshift+0xa4>
 800d47c:	f108 0602 	add.w	r6, r8, #2
 800d480:	3e01      	subs	r6, #1
 800d482:	4638      	mov	r0, r7
 800d484:	612e      	str	r6, [r5, #16]
 800d486:	4621      	mov	r1, r4
 800d488:	f7ff fd90 	bl	800cfac <_Bfree>
 800d48c:	4628      	mov	r0, r5
 800d48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d492:	f842 0f04 	str.w	r0, [r2, #4]!
 800d496:	3301      	adds	r3, #1
 800d498:	e7c5      	b.n	800d426 <__lshift+0x4a>
 800d49a:	3904      	subs	r1, #4
 800d49c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4a4:	459c      	cmp	ip, r3
 800d4a6:	d8f9      	bhi.n	800d49c <__lshift+0xc0>
 800d4a8:	e7ea      	b.n	800d480 <__lshift+0xa4>
 800d4aa:	bf00      	nop
 800d4ac:	0800fc45 	.word	0x0800fc45
 800d4b0:	0800fc56 	.word	0x0800fc56

0800d4b4 <__mcmp>:
 800d4b4:	690a      	ldr	r2, [r1, #16]
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	6900      	ldr	r0, [r0, #16]
 800d4ba:	1a80      	subs	r0, r0, r2
 800d4bc:	b530      	push	{r4, r5, lr}
 800d4be:	d10e      	bne.n	800d4de <__mcmp+0x2a>
 800d4c0:	3314      	adds	r3, #20
 800d4c2:	3114      	adds	r1, #20
 800d4c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d4c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d4cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d4d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d4d4:	4295      	cmp	r5, r2
 800d4d6:	d003      	beq.n	800d4e0 <__mcmp+0x2c>
 800d4d8:	d205      	bcs.n	800d4e6 <__mcmp+0x32>
 800d4da:	f04f 30ff 	mov.w	r0, #4294967295
 800d4de:	bd30      	pop	{r4, r5, pc}
 800d4e0:	42a3      	cmp	r3, r4
 800d4e2:	d3f3      	bcc.n	800d4cc <__mcmp+0x18>
 800d4e4:	e7fb      	b.n	800d4de <__mcmp+0x2a>
 800d4e6:	2001      	movs	r0, #1
 800d4e8:	e7f9      	b.n	800d4de <__mcmp+0x2a>
	...

0800d4ec <__mdiff>:
 800d4ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f0:	4689      	mov	r9, r1
 800d4f2:	4606      	mov	r6, r0
 800d4f4:	4611      	mov	r1, r2
 800d4f6:	4648      	mov	r0, r9
 800d4f8:	4614      	mov	r4, r2
 800d4fa:	f7ff ffdb 	bl	800d4b4 <__mcmp>
 800d4fe:	1e05      	subs	r5, r0, #0
 800d500:	d112      	bne.n	800d528 <__mdiff+0x3c>
 800d502:	4629      	mov	r1, r5
 800d504:	4630      	mov	r0, r6
 800d506:	f7ff fd11 	bl	800cf2c <_Balloc>
 800d50a:	4602      	mov	r2, r0
 800d50c:	b928      	cbnz	r0, 800d51a <__mdiff+0x2e>
 800d50e:	4b3f      	ldr	r3, [pc, #252]	@ (800d60c <__mdiff+0x120>)
 800d510:	f240 2137 	movw	r1, #567	@ 0x237
 800d514:	483e      	ldr	r0, [pc, #248]	@ (800d610 <__mdiff+0x124>)
 800d516:	f001 fa43 	bl	800e9a0 <__assert_func>
 800d51a:	2301      	movs	r3, #1
 800d51c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d520:	4610      	mov	r0, r2
 800d522:	b003      	add	sp, #12
 800d524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d528:	bfbc      	itt	lt
 800d52a:	464b      	movlt	r3, r9
 800d52c:	46a1      	movlt	r9, r4
 800d52e:	4630      	mov	r0, r6
 800d530:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d534:	bfba      	itte	lt
 800d536:	461c      	movlt	r4, r3
 800d538:	2501      	movlt	r5, #1
 800d53a:	2500      	movge	r5, #0
 800d53c:	f7ff fcf6 	bl	800cf2c <_Balloc>
 800d540:	4602      	mov	r2, r0
 800d542:	b918      	cbnz	r0, 800d54c <__mdiff+0x60>
 800d544:	4b31      	ldr	r3, [pc, #196]	@ (800d60c <__mdiff+0x120>)
 800d546:	f240 2145 	movw	r1, #581	@ 0x245
 800d54a:	e7e3      	b.n	800d514 <__mdiff+0x28>
 800d54c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d550:	6926      	ldr	r6, [r4, #16]
 800d552:	60c5      	str	r5, [r0, #12]
 800d554:	f109 0310 	add.w	r3, r9, #16
 800d558:	f109 0514 	add.w	r5, r9, #20
 800d55c:	f104 0e14 	add.w	lr, r4, #20
 800d560:	f100 0b14 	add.w	fp, r0, #20
 800d564:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d568:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d56c:	9301      	str	r3, [sp, #4]
 800d56e:	46d9      	mov	r9, fp
 800d570:	f04f 0c00 	mov.w	ip, #0
 800d574:	9b01      	ldr	r3, [sp, #4]
 800d576:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d57a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d57e:	9301      	str	r3, [sp, #4]
 800d580:	fa1f f38a 	uxth.w	r3, sl
 800d584:	4619      	mov	r1, r3
 800d586:	b283      	uxth	r3, r0
 800d588:	1acb      	subs	r3, r1, r3
 800d58a:	0c00      	lsrs	r0, r0, #16
 800d58c:	4463      	add	r3, ip
 800d58e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d592:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d596:	b29b      	uxth	r3, r3
 800d598:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d59c:	4576      	cmp	r6, lr
 800d59e:	f849 3b04 	str.w	r3, [r9], #4
 800d5a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d5a6:	d8e5      	bhi.n	800d574 <__mdiff+0x88>
 800d5a8:	1b33      	subs	r3, r6, r4
 800d5aa:	3b15      	subs	r3, #21
 800d5ac:	f023 0303 	bic.w	r3, r3, #3
 800d5b0:	3415      	adds	r4, #21
 800d5b2:	3304      	adds	r3, #4
 800d5b4:	42a6      	cmp	r6, r4
 800d5b6:	bf38      	it	cc
 800d5b8:	2304      	movcc	r3, #4
 800d5ba:	441d      	add	r5, r3
 800d5bc:	445b      	add	r3, fp
 800d5be:	461e      	mov	r6, r3
 800d5c0:	462c      	mov	r4, r5
 800d5c2:	4544      	cmp	r4, r8
 800d5c4:	d30e      	bcc.n	800d5e4 <__mdiff+0xf8>
 800d5c6:	f108 0103 	add.w	r1, r8, #3
 800d5ca:	1b49      	subs	r1, r1, r5
 800d5cc:	f021 0103 	bic.w	r1, r1, #3
 800d5d0:	3d03      	subs	r5, #3
 800d5d2:	45a8      	cmp	r8, r5
 800d5d4:	bf38      	it	cc
 800d5d6:	2100      	movcc	r1, #0
 800d5d8:	440b      	add	r3, r1
 800d5da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5de:	b191      	cbz	r1, 800d606 <__mdiff+0x11a>
 800d5e0:	6117      	str	r7, [r2, #16]
 800d5e2:	e79d      	b.n	800d520 <__mdiff+0x34>
 800d5e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d5e8:	46e6      	mov	lr, ip
 800d5ea:	0c08      	lsrs	r0, r1, #16
 800d5ec:	fa1c fc81 	uxtah	ip, ip, r1
 800d5f0:	4471      	add	r1, lr
 800d5f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d5f6:	b289      	uxth	r1, r1
 800d5f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d5fc:	f846 1b04 	str.w	r1, [r6], #4
 800d600:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d604:	e7dd      	b.n	800d5c2 <__mdiff+0xd6>
 800d606:	3f01      	subs	r7, #1
 800d608:	e7e7      	b.n	800d5da <__mdiff+0xee>
 800d60a:	bf00      	nop
 800d60c:	0800fc45 	.word	0x0800fc45
 800d610:	0800fc56 	.word	0x0800fc56

0800d614 <__ulp>:
 800d614:	b082      	sub	sp, #8
 800d616:	ed8d 0b00 	vstr	d0, [sp]
 800d61a:	9a01      	ldr	r2, [sp, #4]
 800d61c:	4b0f      	ldr	r3, [pc, #60]	@ (800d65c <__ulp+0x48>)
 800d61e:	4013      	ands	r3, r2
 800d620:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d624:	2b00      	cmp	r3, #0
 800d626:	dc08      	bgt.n	800d63a <__ulp+0x26>
 800d628:	425b      	negs	r3, r3
 800d62a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d62e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d632:	da04      	bge.n	800d63e <__ulp+0x2a>
 800d634:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d638:	4113      	asrs	r3, r2
 800d63a:	2200      	movs	r2, #0
 800d63c:	e008      	b.n	800d650 <__ulp+0x3c>
 800d63e:	f1a2 0314 	sub.w	r3, r2, #20
 800d642:	2b1e      	cmp	r3, #30
 800d644:	bfda      	itte	le
 800d646:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d64a:	40da      	lsrle	r2, r3
 800d64c:	2201      	movgt	r2, #1
 800d64e:	2300      	movs	r3, #0
 800d650:	4619      	mov	r1, r3
 800d652:	4610      	mov	r0, r2
 800d654:	ec41 0b10 	vmov	d0, r0, r1
 800d658:	b002      	add	sp, #8
 800d65a:	4770      	bx	lr
 800d65c:	7ff00000 	.word	0x7ff00000

0800d660 <__b2d>:
 800d660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d664:	6906      	ldr	r6, [r0, #16]
 800d666:	f100 0814 	add.w	r8, r0, #20
 800d66a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d66e:	1f37      	subs	r7, r6, #4
 800d670:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d674:	4610      	mov	r0, r2
 800d676:	f7ff fd4b 	bl	800d110 <__hi0bits>
 800d67a:	f1c0 0320 	rsb	r3, r0, #32
 800d67e:	280a      	cmp	r0, #10
 800d680:	600b      	str	r3, [r1, #0]
 800d682:	491b      	ldr	r1, [pc, #108]	@ (800d6f0 <__b2d+0x90>)
 800d684:	dc15      	bgt.n	800d6b2 <__b2d+0x52>
 800d686:	f1c0 0c0b 	rsb	ip, r0, #11
 800d68a:	fa22 f30c 	lsr.w	r3, r2, ip
 800d68e:	45b8      	cmp	r8, r7
 800d690:	ea43 0501 	orr.w	r5, r3, r1
 800d694:	bf34      	ite	cc
 800d696:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d69a:	2300      	movcs	r3, #0
 800d69c:	3015      	adds	r0, #21
 800d69e:	fa02 f000 	lsl.w	r0, r2, r0
 800d6a2:	fa23 f30c 	lsr.w	r3, r3, ip
 800d6a6:	4303      	orrs	r3, r0
 800d6a8:	461c      	mov	r4, r3
 800d6aa:	ec45 4b10 	vmov	d0, r4, r5
 800d6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b2:	45b8      	cmp	r8, r7
 800d6b4:	bf3a      	itte	cc
 800d6b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d6ba:	f1a6 0708 	subcc.w	r7, r6, #8
 800d6be:	2300      	movcs	r3, #0
 800d6c0:	380b      	subs	r0, #11
 800d6c2:	d012      	beq.n	800d6ea <__b2d+0x8a>
 800d6c4:	f1c0 0120 	rsb	r1, r0, #32
 800d6c8:	fa23 f401 	lsr.w	r4, r3, r1
 800d6cc:	4082      	lsls	r2, r0
 800d6ce:	4322      	orrs	r2, r4
 800d6d0:	4547      	cmp	r7, r8
 800d6d2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d6d6:	bf8c      	ite	hi
 800d6d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d6dc:	2200      	movls	r2, #0
 800d6de:	4083      	lsls	r3, r0
 800d6e0:	40ca      	lsrs	r2, r1
 800d6e2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	e7de      	b.n	800d6a8 <__b2d+0x48>
 800d6ea:	ea42 0501 	orr.w	r5, r2, r1
 800d6ee:	e7db      	b.n	800d6a8 <__b2d+0x48>
 800d6f0:	3ff00000 	.word	0x3ff00000

0800d6f4 <__d2b>:
 800d6f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d6f8:	460f      	mov	r7, r1
 800d6fa:	2101      	movs	r1, #1
 800d6fc:	ec59 8b10 	vmov	r8, r9, d0
 800d700:	4616      	mov	r6, r2
 800d702:	f7ff fc13 	bl	800cf2c <_Balloc>
 800d706:	4604      	mov	r4, r0
 800d708:	b930      	cbnz	r0, 800d718 <__d2b+0x24>
 800d70a:	4602      	mov	r2, r0
 800d70c:	4b23      	ldr	r3, [pc, #140]	@ (800d79c <__d2b+0xa8>)
 800d70e:	4824      	ldr	r0, [pc, #144]	@ (800d7a0 <__d2b+0xac>)
 800d710:	f240 310f 	movw	r1, #783	@ 0x30f
 800d714:	f001 f944 	bl	800e9a0 <__assert_func>
 800d718:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d71c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d720:	b10d      	cbz	r5, 800d726 <__d2b+0x32>
 800d722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d726:	9301      	str	r3, [sp, #4]
 800d728:	f1b8 0300 	subs.w	r3, r8, #0
 800d72c:	d023      	beq.n	800d776 <__d2b+0x82>
 800d72e:	4668      	mov	r0, sp
 800d730:	9300      	str	r3, [sp, #0]
 800d732:	f7ff fd0c 	bl	800d14e <__lo0bits>
 800d736:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d73a:	b1d0      	cbz	r0, 800d772 <__d2b+0x7e>
 800d73c:	f1c0 0320 	rsb	r3, r0, #32
 800d740:	fa02 f303 	lsl.w	r3, r2, r3
 800d744:	430b      	orrs	r3, r1
 800d746:	40c2      	lsrs	r2, r0
 800d748:	6163      	str	r3, [r4, #20]
 800d74a:	9201      	str	r2, [sp, #4]
 800d74c:	9b01      	ldr	r3, [sp, #4]
 800d74e:	61a3      	str	r3, [r4, #24]
 800d750:	2b00      	cmp	r3, #0
 800d752:	bf0c      	ite	eq
 800d754:	2201      	moveq	r2, #1
 800d756:	2202      	movne	r2, #2
 800d758:	6122      	str	r2, [r4, #16]
 800d75a:	b1a5      	cbz	r5, 800d786 <__d2b+0x92>
 800d75c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d760:	4405      	add	r5, r0
 800d762:	603d      	str	r5, [r7, #0]
 800d764:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d768:	6030      	str	r0, [r6, #0]
 800d76a:	4620      	mov	r0, r4
 800d76c:	b003      	add	sp, #12
 800d76e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d772:	6161      	str	r1, [r4, #20]
 800d774:	e7ea      	b.n	800d74c <__d2b+0x58>
 800d776:	a801      	add	r0, sp, #4
 800d778:	f7ff fce9 	bl	800d14e <__lo0bits>
 800d77c:	9b01      	ldr	r3, [sp, #4]
 800d77e:	6163      	str	r3, [r4, #20]
 800d780:	3020      	adds	r0, #32
 800d782:	2201      	movs	r2, #1
 800d784:	e7e8      	b.n	800d758 <__d2b+0x64>
 800d786:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d78a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d78e:	6038      	str	r0, [r7, #0]
 800d790:	6918      	ldr	r0, [r3, #16]
 800d792:	f7ff fcbd 	bl	800d110 <__hi0bits>
 800d796:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d79a:	e7e5      	b.n	800d768 <__d2b+0x74>
 800d79c:	0800fc45 	.word	0x0800fc45
 800d7a0:	0800fc56 	.word	0x0800fc56

0800d7a4 <__ratio>:
 800d7a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a8:	4688      	mov	r8, r1
 800d7aa:	4669      	mov	r1, sp
 800d7ac:	4681      	mov	r9, r0
 800d7ae:	f7ff ff57 	bl	800d660 <__b2d>
 800d7b2:	a901      	add	r1, sp, #4
 800d7b4:	4640      	mov	r0, r8
 800d7b6:	ec55 4b10 	vmov	r4, r5, d0
 800d7ba:	f7ff ff51 	bl	800d660 <__b2d>
 800d7be:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d7c2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d7c6:	1ad2      	subs	r2, r2, r3
 800d7c8:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d7cc:	1a5b      	subs	r3, r3, r1
 800d7ce:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800d7d2:	ec57 6b10 	vmov	r6, r7, d0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	bfd6      	itet	le
 800d7da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d7de:	462a      	movgt	r2, r5
 800d7e0:	463a      	movle	r2, r7
 800d7e2:	46ab      	mov	fp, r5
 800d7e4:	46a2      	mov	sl, r4
 800d7e6:	bfce      	itee	gt
 800d7e8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d7ec:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d7f0:	ee00 3a90 	vmovle	s1, r3
 800d7f4:	ec4b ab17 	vmov	d7, sl, fp
 800d7f8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d7fc:	b003      	add	sp, #12
 800d7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d802 <__copybits>:
 800d802:	3901      	subs	r1, #1
 800d804:	b570      	push	{r4, r5, r6, lr}
 800d806:	1149      	asrs	r1, r1, #5
 800d808:	6914      	ldr	r4, [r2, #16]
 800d80a:	3101      	adds	r1, #1
 800d80c:	f102 0314 	add.w	r3, r2, #20
 800d810:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d814:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d818:	1f05      	subs	r5, r0, #4
 800d81a:	42a3      	cmp	r3, r4
 800d81c:	d30c      	bcc.n	800d838 <__copybits+0x36>
 800d81e:	1aa3      	subs	r3, r4, r2
 800d820:	3b11      	subs	r3, #17
 800d822:	f023 0303 	bic.w	r3, r3, #3
 800d826:	3211      	adds	r2, #17
 800d828:	42a2      	cmp	r2, r4
 800d82a:	bf88      	it	hi
 800d82c:	2300      	movhi	r3, #0
 800d82e:	4418      	add	r0, r3
 800d830:	2300      	movs	r3, #0
 800d832:	4288      	cmp	r0, r1
 800d834:	d305      	bcc.n	800d842 <__copybits+0x40>
 800d836:	bd70      	pop	{r4, r5, r6, pc}
 800d838:	f853 6b04 	ldr.w	r6, [r3], #4
 800d83c:	f845 6f04 	str.w	r6, [r5, #4]!
 800d840:	e7eb      	b.n	800d81a <__copybits+0x18>
 800d842:	f840 3b04 	str.w	r3, [r0], #4
 800d846:	e7f4      	b.n	800d832 <__copybits+0x30>

0800d848 <__any_on>:
 800d848:	f100 0214 	add.w	r2, r0, #20
 800d84c:	6900      	ldr	r0, [r0, #16]
 800d84e:	114b      	asrs	r3, r1, #5
 800d850:	4298      	cmp	r0, r3
 800d852:	b510      	push	{r4, lr}
 800d854:	db11      	blt.n	800d87a <__any_on+0x32>
 800d856:	dd0a      	ble.n	800d86e <__any_on+0x26>
 800d858:	f011 011f 	ands.w	r1, r1, #31
 800d85c:	d007      	beq.n	800d86e <__any_on+0x26>
 800d85e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d862:	fa24 f001 	lsr.w	r0, r4, r1
 800d866:	fa00 f101 	lsl.w	r1, r0, r1
 800d86a:	428c      	cmp	r4, r1
 800d86c:	d10b      	bne.n	800d886 <__any_on+0x3e>
 800d86e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d872:	4293      	cmp	r3, r2
 800d874:	d803      	bhi.n	800d87e <__any_on+0x36>
 800d876:	2000      	movs	r0, #0
 800d878:	bd10      	pop	{r4, pc}
 800d87a:	4603      	mov	r3, r0
 800d87c:	e7f7      	b.n	800d86e <__any_on+0x26>
 800d87e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d882:	2900      	cmp	r1, #0
 800d884:	d0f5      	beq.n	800d872 <__any_on+0x2a>
 800d886:	2001      	movs	r0, #1
 800d888:	e7f6      	b.n	800d878 <__any_on+0x30>

0800d88a <sulp>:
 800d88a:	b570      	push	{r4, r5, r6, lr}
 800d88c:	4604      	mov	r4, r0
 800d88e:	460d      	mov	r5, r1
 800d890:	4616      	mov	r6, r2
 800d892:	ec45 4b10 	vmov	d0, r4, r5
 800d896:	f7ff febd 	bl	800d614 <__ulp>
 800d89a:	b17e      	cbz	r6, 800d8bc <sulp+0x32>
 800d89c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d8a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	dd09      	ble.n	800d8bc <sulp+0x32>
 800d8a8:	051b      	lsls	r3, r3, #20
 800d8aa:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d8b4:	ec41 0b17 	vmov	d7, r0, r1
 800d8b8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d8bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d8c0 <_strtod_l>:
 800d8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c4:	ed2d 8b0a 	vpush	{d8-d12}
 800d8c8:	b097      	sub	sp, #92	@ 0x5c
 800d8ca:	4688      	mov	r8, r1
 800d8cc:	920e      	str	r2, [sp, #56]	@ 0x38
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	9212      	str	r2, [sp, #72]	@ 0x48
 800d8d2:	9005      	str	r0, [sp, #20]
 800d8d4:	f04f 0a00 	mov.w	sl, #0
 800d8d8:	f04f 0b00 	mov.w	fp, #0
 800d8dc:	460a      	mov	r2, r1
 800d8de:	9211      	str	r2, [sp, #68]	@ 0x44
 800d8e0:	7811      	ldrb	r1, [r2, #0]
 800d8e2:	292b      	cmp	r1, #43	@ 0x2b
 800d8e4:	d04c      	beq.n	800d980 <_strtod_l+0xc0>
 800d8e6:	d839      	bhi.n	800d95c <_strtod_l+0x9c>
 800d8e8:	290d      	cmp	r1, #13
 800d8ea:	d833      	bhi.n	800d954 <_strtod_l+0x94>
 800d8ec:	2908      	cmp	r1, #8
 800d8ee:	d833      	bhi.n	800d958 <_strtod_l+0x98>
 800d8f0:	2900      	cmp	r1, #0
 800d8f2:	d03c      	beq.n	800d96e <_strtod_l+0xae>
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	9208      	str	r2, [sp, #32]
 800d8f8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800d8fa:	782a      	ldrb	r2, [r5, #0]
 800d8fc:	2a30      	cmp	r2, #48	@ 0x30
 800d8fe:	f040 80b5 	bne.w	800da6c <_strtod_l+0x1ac>
 800d902:	786a      	ldrb	r2, [r5, #1]
 800d904:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d908:	2a58      	cmp	r2, #88	@ 0x58
 800d90a:	d170      	bne.n	800d9ee <_strtod_l+0x12e>
 800d90c:	9302      	str	r3, [sp, #8]
 800d90e:	9b08      	ldr	r3, [sp, #32]
 800d910:	9301      	str	r3, [sp, #4]
 800d912:	ab12      	add	r3, sp, #72	@ 0x48
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	4a8b      	ldr	r2, [pc, #556]	@ (800db44 <_strtod_l+0x284>)
 800d918:	9805      	ldr	r0, [sp, #20]
 800d91a:	ab13      	add	r3, sp, #76	@ 0x4c
 800d91c:	a911      	add	r1, sp, #68	@ 0x44
 800d91e:	f001 f8d9 	bl	800ead4 <__gethex>
 800d922:	f010 060f 	ands.w	r6, r0, #15
 800d926:	4604      	mov	r4, r0
 800d928:	d005      	beq.n	800d936 <_strtod_l+0x76>
 800d92a:	2e06      	cmp	r6, #6
 800d92c:	d12a      	bne.n	800d984 <_strtod_l+0xc4>
 800d92e:	3501      	adds	r5, #1
 800d930:	2300      	movs	r3, #0
 800d932:	9511      	str	r5, [sp, #68]	@ 0x44
 800d934:	9308      	str	r3, [sp, #32]
 800d936:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f040 852f 	bne.w	800e39c <_strtod_l+0xadc>
 800d93e:	9b08      	ldr	r3, [sp, #32]
 800d940:	ec4b ab10 	vmov	d0, sl, fp
 800d944:	b1cb      	cbz	r3, 800d97a <_strtod_l+0xba>
 800d946:	eeb1 0b40 	vneg.f64	d0, d0
 800d94a:	b017      	add	sp, #92	@ 0x5c
 800d94c:	ecbd 8b0a 	vpop	{d8-d12}
 800d950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d954:	2920      	cmp	r1, #32
 800d956:	d1cd      	bne.n	800d8f4 <_strtod_l+0x34>
 800d958:	3201      	adds	r2, #1
 800d95a:	e7c0      	b.n	800d8de <_strtod_l+0x1e>
 800d95c:	292d      	cmp	r1, #45	@ 0x2d
 800d95e:	d1c9      	bne.n	800d8f4 <_strtod_l+0x34>
 800d960:	2101      	movs	r1, #1
 800d962:	9108      	str	r1, [sp, #32]
 800d964:	1c51      	adds	r1, r2, #1
 800d966:	9111      	str	r1, [sp, #68]	@ 0x44
 800d968:	7852      	ldrb	r2, [r2, #1]
 800d96a:	2a00      	cmp	r2, #0
 800d96c:	d1c4      	bne.n	800d8f8 <_strtod_l+0x38>
 800d96e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d970:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d974:	2b00      	cmp	r3, #0
 800d976:	f040 850f 	bne.w	800e398 <_strtod_l+0xad8>
 800d97a:	ec4b ab10 	vmov	d0, sl, fp
 800d97e:	e7e4      	b.n	800d94a <_strtod_l+0x8a>
 800d980:	2100      	movs	r1, #0
 800d982:	e7ee      	b.n	800d962 <_strtod_l+0xa2>
 800d984:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d986:	b13a      	cbz	r2, 800d998 <_strtod_l+0xd8>
 800d988:	2135      	movs	r1, #53	@ 0x35
 800d98a:	a814      	add	r0, sp, #80	@ 0x50
 800d98c:	f7ff ff39 	bl	800d802 <__copybits>
 800d990:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d992:	9805      	ldr	r0, [sp, #20]
 800d994:	f7ff fb0a 	bl	800cfac <_Bfree>
 800d998:	1e73      	subs	r3, r6, #1
 800d99a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d99c:	2b04      	cmp	r3, #4
 800d99e:	d806      	bhi.n	800d9ae <_strtod_l+0xee>
 800d9a0:	e8df f003 	tbb	[pc, r3]
 800d9a4:	201d0314 	.word	0x201d0314
 800d9a8:	14          	.byte	0x14
 800d9a9:	00          	.byte	0x00
 800d9aa:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800d9ae:	05e3      	lsls	r3, r4, #23
 800d9b0:	bf48      	it	mi
 800d9b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d9b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d9ba:	0d1b      	lsrs	r3, r3, #20
 800d9bc:	051b      	lsls	r3, r3, #20
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d1b9      	bne.n	800d936 <_strtod_l+0x76>
 800d9c2:	f7fe fb9f 	bl	800c104 <__errno>
 800d9c6:	2322      	movs	r3, #34	@ 0x22
 800d9c8:	6003      	str	r3, [r0, #0]
 800d9ca:	e7b4      	b.n	800d936 <_strtod_l+0x76>
 800d9cc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800d9d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d9d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d9d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d9dc:	e7e7      	b.n	800d9ae <_strtod_l+0xee>
 800d9de:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800db4c <_strtod_l+0x28c>
 800d9e2:	e7e4      	b.n	800d9ae <_strtod_l+0xee>
 800d9e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d9e8:	f04f 3aff 	mov.w	sl, #4294967295
 800d9ec:	e7df      	b.n	800d9ae <_strtod_l+0xee>
 800d9ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d9f0:	1c5a      	adds	r2, r3, #1
 800d9f2:	9211      	str	r2, [sp, #68]	@ 0x44
 800d9f4:	785b      	ldrb	r3, [r3, #1]
 800d9f6:	2b30      	cmp	r3, #48	@ 0x30
 800d9f8:	d0f9      	beq.n	800d9ee <_strtod_l+0x12e>
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d09b      	beq.n	800d936 <_strtod_l+0x76>
 800d9fe:	2301      	movs	r3, #1
 800da00:	2600      	movs	r6, #0
 800da02:	9307      	str	r3, [sp, #28]
 800da04:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da06:	930a      	str	r3, [sp, #40]	@ 0x28
 800da08:	46b1      	mov	r9, r6
 800da0a:	4635      	mov	r5, r6
 800da0c:	220a      	movs	r2, #10
 800da0e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800da10:	7804      	ldrb	r4, [r0, #0]
 800da12:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800da16:	b2d9      	uxtb	r1, r3
 800da18:	2909      	cmp	r1, #9
 800da1a:	d929      	bls.n	800da70 <_strtod_l+0x1b0>
 800da1c:	494a      	ldr	r1, [pc, #296]	@ (800db48 <_strtod_l+0x288>)
 800da1e:	2201      	movs	r2, #1
 800da20:	f000 ff84 	bl	800e92c <strncmp>
 800da24:	b378      	cbz	r0, 800da86 <_strtod_l+0x1c6>
 800da26:	2000      	movs	r0, #0
 800da28:	4622      	mov	r2, r4
 800da2a:	462b      	mov	r3, r5
 800da2c:	4607      	mov	r7, r0
 800da2e:	9006      	str	r0, [sp, #24]
 800da30:	2a65      	cmp	r2, #101	@ 0x65
 800da32:	d001      	beq.n	800da38 <_strtod_l+0x178>
 800da34:	2a45      	cmp	r2, #69	@ 0x45
 800da36:	d117      	bne.n	800da68 <_strtod_l+0x1a8>
 800da38:	b91b      	cbnz	r3, 800da42 <_strtod_l+0x182>
 800da3a:	9b07      	ldr	r3, [sp, #28]
 800da3c:	4303      	orrs	r3, r0
 800da3e:	d096      	beq.n	800d96e <_strtod_l+0xae>
 800da40:	2300      	movs	r3, #0
 800da42:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800da46:	f108 0201 	add.w	r2, r8, #1
 800da4a:	9211      	str	r2, [sp, #68]	@ 0x44
 800da4c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800da50:	2a2b      	cmp	r2, #43	@ 0x2b
 800da52:	d06b      	beq.n	800db2c <_strtod_l+0x26c>
 800da54:	2a2d      	cmp	r2, #45	@ 0x2d
 800da56:	d071      	beq.n	800db3c <_strtod_l+0x27c>
 800da58:	f04f 0e00 	mov.w	lr, #0
 800da5c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800da60:	2c09      	cmp	r4, #9
 800da62:	d979      	bls.n	800db58 <_strtod_l+0x298>
 800da64:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800da68:	2400      	movs	r4, #0
 800da6a:	e094      	b.n	800db96 <_strtod_l+0x2d6>
 800da6c:	2300      	movs	r3, #0
 800da6e:	e7c7      	b.n	800da00 <_strtod_l+0x140>
 800da70:	2d08      	cmp	r5, #8
 800da72:	f100 0001 	add.w	r0, r0, #1
 800da76:	bfd4      	ite	le
 800da78:	fb02 3909 	mlale	r9, r2, r9, r3
 800da7c:	fb02 3606 	mlagt	r6, r2, r6, r3
 800da80:	3501      	adds	r5, #1
 800da82:	9011      	str	r0, [sp, #68]	@ 0x44
 800da84:	e7c3      	b.n	800da0e <_strtod_l+0x14e>
 800da86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da88:	1c5a      	adds	r2, r3, #1
 800da8a:	9211      	str	r2, [sp, #68]	@ 0x44
 800da8c:	785a      	ldrb	r2, [r3, #1]
 800da8e:	b375      	cbz	r5, 800daee <_strtod_l+0x22e>
 800da90:	4607      	mov	r7, r0
 800da92:	462b      	mov	r3, r5
 800da94:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800da98:	2909      	cmp	r1, #9
 800da9a:	d913      	bls.n	800dac4 <_strtod_l+0x204>
 800da9c:	2101      	movs	r1, #1
 800da9e:	9106      	str	r1, [sp, #24]
 800daa0:	e7c6      	b.n	800da30 <_strtod_l+0x170>
 800daa2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800daa4:	1c5a      	adds	r2, r3, #1
 800daa6:	9211      	str	r2, [sp, #68]	@ 0x44
 800daa8:	785a      	ldrb	r2, [r3, #1]
 800daaa:	3001      	adds	r0, #1
 800daac:	2a30      	cmp	r2, #48	@ 0x30
 800daae:	d0f8      	beq.n	800daa2 <_strtod_l+0x1e2>
 800dab0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dab4:	2b08      	cmp	r3, #8
 800dab6:	f200 8476 	bhi.w	800e3a6 <_strtod_l+0xae6>
 800daba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dabc:	930a      	str	r3, [sp, #40]	@ 0x28
 800dabe:	4607      	mov	r7, r0
 800dac0:	2000      	movs	r0, #0
 800dac2:	4603      	mov	r3, r0
 800dac4:	3a30      	subs	r2, #48	@ 0x30
 800dac6:	f100 0101 	add.w	r1, r0, #1
 800daca:	d023      	beq.n	800db14 <_strtod_l+0x254>
 800dacc:	440f      	add	r7, r1
 800dace:	eb00 0c03 	add.w	ip, r0, r3
 800dad2:	4619      	mov	r1, r3
 800dad4:	240a      	movs	r4, #10
 800dad6:	4561      	cmp	r1, ip
 800dad8:	d10b      	bne.n	800daf2 <_strtod_l+0x232>
 800dada:	1c5c      	adds	r4, r3, #1
 800dadc:	4403      	add	r3, r0
 800dade:	2b08      	cmp	r3, #8
 800dae0:	4404      	add	r4, r0
 800dae2:	dc11      	bgt.n	800db08 <_strtod_l+0x248>
 800dae4:	230a      	movs	r3, #10
 800dae6:	fb03 2909 	mla	r9, r3, r9, r2
 800daea:	2100      	movs	r1, #0
 800daec:	e013      	b.n	800db16 <_strtod_l+0x256>
 800daee:	4628      	mov	r0, r5
 800daf0:	e7dc      	b.n	800daac <_strtod_l+0x1ec>
 800daf2:	2908      	cmp	r1, #8
 800daf4:	f101 0101 	add.w	r1, r1, #1
 800daf8:	dc02      	bgt.n	800db00 <_strtod_l+0x240>
 800dafa:	fb04 f909 	mul.w	r9, r4, r9
 800dafe:	e7ea      	b.n	800dad6 <_strtod_l+0x216>
 800db00:	2910      	cmp	r1, #16
 800db02:	bfd8      	it	le
 800db04:	4366      	mulle	r6, r4
 800db06:	e7e6      	b.n	800dad6 <_strtod_l+0x216>
 800db08:	2b0f      	cmp	r3, #15
 800db0a:	dcee      	bgt.n	800daea <_strtod_l+0x22a>
 800db0c:	230a      	movs	r3, #10
 800db0e:	fb03 2606 	mla	r6, r3, r6, r2
 800db12:	e7ea      	b.n	800daea <_strtod_l+0x22a>
 800db14:	461c      	mov	r4, r3
 800db16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db18:	1c5a      	adds	r2, r3, #1
 800db1a:	9211      	str	r2, [sp, #68]	@ 0x44
 800db1c:	785a      	ldrb	r2, [r3, #1]
 800db1e:	4608      	mov	r0, r1
 800db20:	4623      	mov	r3, r4
 800db22:	e7b7      	b.n	800da94 <_strtod_l+0x1d4>
 800db24:	2301      	movs	r3, #1
 800db26:	2700      	movs	r7, #0
 800db28:	9306      	str	r3, [sp, #24]
 800db2a:	e786      	b.n	800da3a <_strtod_l+0x17a>
 800db2c:	f04f 0e00 	mov.w	lr, #0
 800db30:	f108 0202 	add.w	r2, r8, #2
 800db34:	9211      	str	r2, [sp, #68]	@ 0x44
 800db36:	f898 2002 	ldrb.w	r2, [r8, #2]
 800db3a:	e78f      	b.n	800da5c <_strtod_l+0x19c>
 800db3c:	f04f 0e01 	mov.w	lr, #1
 800db40:	e7f6      	b.n	800db30 <_strtod_l+0x270>
 800db42:	bf00      	nop
 800db44:	0800fdc8 	.word	0x0800fdc8
 800db48:	0800fdb0 	.word	0x0800fdb0
 800db4c:	7ff00000 	.word	0x7ff00000
 800db50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800db52:	1c54      	adds	r4, r2, #1
 800db54:	9411      	str	r4, [sp, #68]	@ 0x44
 800db56:	7852      	ldrb	r2, [r2, #1]
 800db58:	2a30      	cmp	r2, #48	@ 0x30
 800db5a:	d0f9      	beq.n	800db50 <_strtod_l+0x290>
 800db5c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800db60:	2c08      	cmp	r4, #8
 800db62:	d881      	bhi.n	800da68 <_strtod_l+0x1a8>
 800db64:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800db68:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800db6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800db6c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800db6e:	1c51      	adds	r1, r2, #1
 800db70:	9111      	str	r1, [sp, #68]	@ 0x44
 800db72:	7852      	ldrb	r2, [r2, #1]
 800db74:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800db78:	2c09      	cmp	r4, #9
 800db7a:	d938      	bls.n	800dbee <_strtod_l+0x32e>
 800db7c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800db7e:	1b0c      	subs	r4, r1, r4
 800db80:	2c08      	cmp	r4, #8
 800db82:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800db86:	dc02      	bgt.n	800db8e <_strtod_l+0x2ce>
 800db88:	4564      	cmp	r4, ip
 800db8a:	bfa8      	it	ge
 800db8c:	4664      	movge	r4, ip
 800db8e:	f1be 0f00 	cmp.w	lr, #0
 800db92:	d000      	beq.n	800db96 <_strtod_l+0x2d6>
 800db94:	4264      	negs	r4, r4
 800db96:	2b00      	cmp	r3, #0
 800db98:	d14e      	bne.n	800dc38 <_strtod_l+0x378>
 800db9a:	9b07      	ldr	r3, [sp, #28]
 800db9c:	4318      	orrs	r0, r3
 800db9e:	f47f aeca 	bne.w	800d936 <_strtod_l+0x76>
 800dba2:	9b06      	ldr	r3, [sp, #24]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f47f aee2 	bne.w	800d96e <_strtod_l+0xae>
 800dbaa:	2a69      	cmp	r2, #105	@ 0x69
 800dbac:	d027      	beq.n	800dbfe <_strtod_l+0x33e>
 800dbae:	dc24      	bgt.n	800dbfa <_strtod_l+0x33a>
 800dbb0:	2a49      	cmp	r2, #73	@ 0x49
 800dbb2:	d024      	beq.n	800dbfe <_strtod_l+0x33e>
 800dbb4:	2a4e      	cmp	r2, #78	@ 0x4e
 800dbb6:	f47f aeda 	bne.w	800d96e <_strtod_l+0xae>
 800dbba:	4997      	ldr	r1, [pc, #604]	@ (800de18 <_strtod_l+0x558>)
 800dbbc:	a811      	add	r0, sp, #68	@ 0x44
 800dbbe:	f001 f9ab 	bl	800ef18 <__match>
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	f43f aed3 	beq.w	800d96e <_strtod_l+0xae>
 800dbc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	2b28      	cmp	r3, #40	@ 0x28
 800dbce:	d12d      	bne.n	800dc2c <_strtod_l+0x36c>
 800dbd0:	4992      	ldr	r1, [pc, #584]	@ (800de1c <_strtod_l+0x55c>)
 800dbd2:	aa14      	add	r2, sp, #80	@ 0x50
 800dbd4:	a811      	add	r0, sp, #68	@ 0x44
 800dbd6:	f001 f9b3 	bl	800ef40 <__hexnan>
 800dbda:	2805      	cmp	r0, #5
 800dbdc:	d126      	bne.n	800dc2c <_strtod_l+0x36c>
 800dbde:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dbe0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800dbe4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dbe8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dbec:	e6a3      	b.n	800d936 <_strtod_l+0x76>
 800dbee:	240a      	movs	r4, #10
 800dbf0:	fb04 2c0c 	mla	ip, r4, ip, r2
 800dbf4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800dbf8:	e7b8      	b.n	800db6c <_strtod_l+0x2ac>
 800dbfa:	2a6e      	cmp	r2, #110	@ 0x6e
 800dbfc:	e7db      	b.n	800dbb6 <_strtod_l+0x2f6>
 800dbfe:	4988      	ldr	r1, [pc, #544]	@ (800de20 <_strtod_l+0x560>)
 800dc00:	a811      	add	r0, sp, #68	@ 0x44
 800dc02:	f001 f989 	bl	800ef18 <__match>
 800dc06:	2800      	cmp	r0, #0
 800dc08:	f43f aeb1 	beq.w	800d96e <_strtod_l+0xae>
 800dc0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dc0e:	4985      	ldr	r1, [pc, #532]	@ (800de24 <_strtod_l+0x564>)
 800dc10:	3b01      	subs	r3, #1
 800dc12:	a811      	add	r0, sp, #68	@ 0x44
 800dc14:	9311      	str	r3, [sp, #68]	@ 0x44
 800dc16:	f001 f97f 	bl	800ef18 <__match>
 800dc1a:	b910      	cbnz	r0, 800dc22 <_strtod_l+0x362>
 800dc1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dc1e:	3301      	adds	r3, #1
 800dc20:	9311      	str	r3, [sp, #68]	@ 0x44
 800dc22:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800de38 <_strtod_l+0x578>
 800dc26:	f04f 0a00 	mov.w	sl, #0
 800dc2a:	e684      	b.n	800d936 <_strtod_l+0x76>
 800dc2c:	487e      	ldr	r0, [pc, #504]	@ (800de28 <_strtod_l+0x568>)
 800dc2e:	f000 feaf 	bl	800e990 <nan>
 800dc32:	ec5b ab10 	vmov	sl, fp, d0
 800dc36:	e67e      	b.n	800d936 <_strtod_l+0x76>
 800dc38:	ee07 9a90 	vmov	s15, r9
 800dc3c:	1be2      	subs	r2, r4, r7
 800dc3e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dc42:	2d00      	cmp	r5, #0
 800dc44:	bf08      	it	eq
 800dc46:	461d      	moveq	r5, r3
 800dc48:	2b10      	cmp	r3, #16
 800dc4a:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	bfa8      	it	ge
 800dc50:	2210      	movge	r2, #16
 800dc52:	2b09      	cmp	r3, #9
 800dc54:	ec5b ab17 	vmov	sl, fp, d7
 800dc58:	dc15      	bgt.n	800dc86 <_strtod_l+0x3c6>
 800dc5a:	1be1      	subs	r1, r4, r7
 800dc5c:	2900      	cmp	r1, #0
 800dc5e:	f43f ae6a 	beq.w	800d936 <_strtod_l+0x76>
 800dc62:	eba4 0107 	sub.w	r1, r4, r7
 800dc66:	dd72      	ble.n	800dd4e <_strtod_l+0x48e>
 800dc68:	2916      	cmp	r1, #22
 800dc6a:	dc59      	bgt.n	800dd20 <_strtod_l+0x460>
 800dc6c:	4b6f      	ldr	r3, [pc, #444]	@ (800de2c <_strtod_l+0x56c>)
 800dc6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc74:	ed93 7b00 	vldr	d7, [r3]
 800dc78:	ec4b ab16 	vmov	d6, sl, fp
 800dc7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc80:	ec5b ab17 	vmov	sl, fp, d7
 800dc84:	e657      	b.n	800d936 <_strtod_l+0x76>
 800dc86:	4969      	ldr	r1, [pc, #420]	@ (800de2c <_strtod_l+0x56c>)
 800dc88:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800dc8c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800dc90:	ee06 6a90 	vmov	s13, r6
 800dc94:	2b0f      	cmp	r3, #15
 800dc96:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800dc9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800dc9e:	ec5b ab16 	vmov	sl, fp, d6
 800dca2:	ddda      	ble.n	800dc5a <_strtod_l+0x39a>
 800dca4:	1a9a      	subs	r2, r3, r2
 800dca6:	1be1      	subs	r1, r4, r7
 800dca8:	440a      	add	r2, r1
 800dcaa:	2a00      	cmp	r2, #0
 800dcac:	f340 8094 	ble.w	800ddd8 <_strtod_l+0x518>
 800dcb0:	f012 000f 	ands.w	r0, r2, #15
 800dcb4:	d00a      	beq.n	800dccc <_strtod_l+0x40c>
 800dcb6:	495d      	ldr	r1, [pc, #372]	@ (800de2c <_strtod_l+0x56c>)
 800dcb8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dcbc:	ed91 7b00 	vldr	d7, [r1]
 800dcc0:	ec4b ab16 	vmov	d6, sl, fp
 800dcc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dcc8:	ec5b ab17 	vmov	sl, fp, d7
 800dccc:	f032 020f 	bics.w	r2, r2, #15
 800dcd0:	d073      	beq.n	800ddba <_strtod_l+0x4fa>
 800dcd2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800dcd6:	dd47      	ble.n	800dd68 <_strtod_l+0x4a8>
 800dcd8:	2400      	movs	r4, #0
 800dcda:	4625      	mov	r5, r4
 800dcdc:	9407      	str	r4, [sp, #28]
 800dcde:	4626      	mov	r6, r4
 800dce0:	9a05      	ldr	r2, [sp, #20]
 800dce2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800de38 <_strtod_l+0x578>
 800dce6:	2322      	movs	r3, #34	@ 0x22
 800dce8:	6013      	str	r3, [r2, #0]
 800dcea:	f04f 0a00 	mov.w	sl, #0
 800dcee:	9b07      	ldr	r3, [sp, #28]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f43f ae20 	beq.w	800d936 <_strtod_l+0x76>
 800dcf6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dcf8:	9805      	ldr	r0, [sp, #20]
 800dcfa:	f7ff f957 	bl	800cfac <_Bfree>
 800dcfe:	9805      	ldr	r0, [sp, #20]
 800dd00:	4631      	mov	r1, r6
 800dd02:	f7ff f953 	bl	800cfac <_Bfree>
 800dd06:	9805      	ldr	r0, [sp, #20]
 800dd08:	4629      	mov	r1, r5
 800dd0a:	f7ff f94f 	bl	800cfac <_Bfree>
 800dd0e:	9907      	ldr	r1, [sp, #28]
 800dd10:	9805      	ldr	r0, [sp, #20]
 800dd12:	f7ff f94b 	bl	800cfac <_Bfree>
 800dd16:	9805      	ldr	r0, [sp, #20]
 800dd18:	4621      	mov	r1, r4
 800dd1a:	f7ff f947 	bl	800cfac <_Bfree>
 800dd1e:	e60a      	b.n	800d936 <_strtod_l+0x76>
 800dd20:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800dd24:	1be0      	subs	r0, r4, r7
 800dd26:	4281      	cmp	r1, r0
 800dd28:	dbbc      	blt.n	800dca4 <_strtod_l+0x3e4>
 800dd2a:	4a40      	ldr	r2, [pc, #256]	@ (800de2c <_strtod_l+0x56c>)
 800dd2c:	f1c3 030f 	rsb	r3, r3, #15
 800dd30:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800dd34:	ed91 7b00 	vldr	d7, [r1]
 800dd38:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd3a:	ec4b ab16 	vmov	d6, sl, fp
 800dd3e:	1acb      	subs	r3, r1, r3
 800dd40:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800dd44:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd48:	ed92 6b00 	vldr	d6, [r2]
 800dd4c:	e796      	b.n	800dc7c <_strtod_l+0x3bc>
 800dd4e:	3116      	adds	r1, #22
 800dd50:	dba8      	blt.n	800dca4 <_strtod_l+0x3e4>
 800dd52:	4b36      	ldr	r3, [pc, #216]	@ (800de2c <_strtod_l+0x56c>)
 800dd54:	1b3c      	subs	r4, r7, r4
 800dd56:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800dd5a:	ed94 7b00 	vldr	d7, [r4]
 800dd5e:	ec4b ab16 	vmov	d6, sl, fp
 800dd62:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dd66:	e78b      	b.n	800dc80 <_strtod_l+0x3c0>
 800dd68:	2000      	movs	r0, #0
 800dd6a:	ec4b ab17 	vmov	d7, sl, fp
 800dd6e:	4e30      	ldr	r6, [pc, #192]	@ (800de30 <_strtod_l+0x570>)
 800dd70:	1112      	asrs	r2, r2, #4
 800dd72:	4601      	mov	r1, r0
 800dd74:	2a01      	cmp	r2, #1
 800dd76:	dc23      	bgt.n	800ddc0 <_strtod_l+0x500>
 800dd78:	b108      	cbz	r0, 800dd7e <_strtod_l+0x4be>
 800dd7a:	ec5b ab17 	vmov	sl, fp, d7
 800dd7e:	4a2c      	ldr	r2, [pc, #176]	@ (800de30 <_strtod_l+0x570>)
 800dd80:	482c      	ldr	r0, [pc, #176]	@ (800de34 <_strtod_l+0x574>)
 800dd82:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800dd86:	ed92 7b00 	vldr	d7, [r2]
 800dd8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dd8e:	ec4b ab16 	vmov	d6, sl, fp
 800dd92:	4a29      	ldr	r2, [pc, #164]	@ (800de38 <_strtod_l+0x578>)
 800dd94:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd98:	ee17 1a90 	vmov	r1, s15
 800dd9c:	400a      	ands	r2, r1
 800dd9e:	4282      	cmp	r2, r0
 800dda0:	ec5b ab17 	vmov	sl, fp, d7
 800dda4:	d898      	bhi.n	800dcd8 <_strtod_l+0x418>
 800dda6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800ddaa:	4282      	cmp	r2, r0
 800ddac:	bf86      	itte	hi
 800ddae:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800de3c <_strtod_l+0x57c>
 800ddb2:	f04f 3aff 	movhi.w	sl, #4294967295
 800ddb6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800ddba:	2200      	movs	r2, #0
 800ddbc:	9206      	str	r2, [sp, #24]
 800ddbe:	e076      	b.n	800deae <_strtod_l+0x5ee>
 800ddc0:	f012 0f01 	tst.w	r2, #1
 800ddc4:	d004      	beq.n	800ddd0 <_strtod_l+0x510>
 800ddc6:	ed96 6b00 	vldr	d6, [r6]
 800ddca:	2001      	movs	r0, #1
 800ddcc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ddd0:	3101      	adds	r1, #1
 800ddd2:	1052      	asrs	r2, r2, #1
 800ddd4:	3608      	adds	r6, #8
 800ddd6:	e7cd      	b.n	800dd74 <_strtod_l+0x4b4>
 800ddd8:	d0ef      	beq.n	800ddba <_strtod_l+0x4fa>
 800ddda:	4252      	negs	r2, r2
 800dddc:	f012 000f 	ands.w	r0, r2, #15
 800dde0:	d00a      	beq.n	800ddf8 <_strtod_l+0x538>
 800dde2:	4912      	ldr	r1, [pc, #72]	@ (800de2c <_strtod_l+0x56c>)
 800dde4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dde8:	ed91 7b00 	vldr	d7, [r1]
 800ddec:	ec4b ab16 	vmov	d6, sl, fp
 800ddf0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ddf4:	ec5b ab17 	vmov	sl, fp, d7
 800ddf8:	1112      	asrs	r2, r2, #4
 800ddfa:	d0de      	beq.n	800ddba <_strtod_l+0x4fa>
 800ddfc:	2a1f      	cmp	r2, #31
 800ddfe:	dd1f      	ble.n	800de40 <_strtod_l+0x580>
 800de00:	2400      	movs	r4, #0
 800de02:	4625      	mov	r5, r4
 800de04:	9407      	str	r4, [sp, #28]
 800de06:	4626      	mov	r6, r4
 800de08:	9a05      	ldr	r2, [sp, #20]
 800de0a:	2322      	movs	r3, #34	@ 0x22
 800de0c:	f04f 0a00 	mov.w	sl, #0
 800de10:	f04f 0b00 	mov.w	fp, #0
 800de14:	6013      	str	r3, [r2, #0]
 800de16:	e76a      	b.n	800dcee <_strtod_l+0x42e>
 800de18:	0800fb9d 	.word	0x0800fb9d
 800de1c:	0800fdb4 	.word	0x0800fdb4
 800de20:	0800fb95 	.word	0x0800fb95
 800de24:	0800fbcc 	.word	0x0800fbcc
 800de28:	0800ff5d 	.word	0x0800ff5d
 800de2c:	0800fce8 	.word	0x0800fce8
 800de30:	0800fcc0 	.word	0x0800fcc0
 800de34:	7ca00000 	.word	0x7ca00000
 800de38:	7ff00000 	.word	0x7ff00000
 800de3c:	7fefffff 	.word	0x7fefffff
 800de40:	f012 0110 	ands.w	r1, r2, #16
 800de44:	bf18      	it	ne
 800de46:	216a      	movne	r1, #106	@ 0x6a
 800de48:	9106      	str	r1, [sp, #24]
 800de4a:	ec4b ab17 	vmov	d7, sl, fp
 800de4e:	49b0      	ldr	r1, [pc, #704]	@ (800e110 <_strtod_l+0x850>)
 800de50:	2000      	movs	r0, #0
 800de52:	07d6      	lsls	r6, r2, #31
 800de54:	d504      	bpl.n	800de60 <_strtod_l+0x5a0>
 800de56:	ed91 6b00 	vldr	d6, [r1]
 800de5a:	2001      	movs	r0, #1
 800de5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de60:	1052      	asrs	r2, r2, #1
 800de62:	f101 0108 	add.w	r1, r1, #8
 800de66:	d1f4      	bne.n	800de52 <_strtod_l+0x592>
 800de68:	b108      	cbz	r0, 800de6e <_strtod_l+0x5ae>
 800de6a:	ec5b ab17 	vmov	sl, fp, d7
 800de6e:	9a06      	ldr	r2, [sp, #24]
 800de70:	b1b2      	cbz	r2, 800dea0 <_strtod_l+0x5e0>
 800de72:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800de76:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800de7a:	2a00      	cmp	r2, #0
 800de7c:	4658      	mov	r0, fp
 800de7e:	dd0f      	ble.n	800dea0 <_strtod_l+0x5e0>
 800de80:	2a1f      	cmp	r2, #31
 800de82:	dd55      	ble.n	800df30 <_strtod_l+0x670>
 800de84:	2a34      	cmp	r2, #52	@ 0x34
 800de86:	bfde      	ittt	le
 800de88:	f04f 32ff 	movle.w	r2, #4294967295
 800de8c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800de90:	408a      	lslle	r2, r1
 800de92:	f04f 0a00 	mov.w	sl, #0
 800de96:	bfcc      	ite	gt
 800de98:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800de9c:	ea02 0b00 	andle.w	fp, r2, r0
 800dea0:	ec4b ab17 	vmov	d7, sl, fp
 800dea4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deac:	d0a8      	beq.n	800de00 <_strtod_l+0x540>
 800deae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800deb0:	9805      	ldr	r0, [sp, #20]
 800deb2:	f8cd 9000 	str.w	r9, [sp]
 800deb6:	462a      	mov	r2, r5
 800deb8:	f7ff f8e0 	bl	800d07c <__s2b>
 800debc:	9007      	str	r0, [sp, #28]
 800debe:	2800      	cmp	r0, #0
 800dec0:	f43f af0a 	beq.w	800dcd8 <_strtod_l+0x418>
 800dec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dec6:	1b3f      	subs	r7, r7, r4
 800dec8:	2b00      	cmp	r3, #0
 800deca:	bfb4      	ite	lt
 800decc:	463b      	movlt	r3, r7
 800dece:	2300      	movge	r3, #0
 800ded0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ded2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ded4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800e100 <_strtod_l+0x840>
 800ded8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dedc:	2400      	movs	r4, #0
 800dede:	930d      	str	r3, [sp, #52]	@ 0x34
 800dee0:	4625      	mov	r5, r4
 800dee2:	9b07      	ldr	r3, [sp, #28]
 800dee4:	9805      	ldr	r0, [sp, #20]
 800dee6:	6859      	ldr	r1, [r3, #4]
 800dee8:	f7ff f820 	bl	800cf2c <_Balloc>
 800deec:	4606      	mov	r6, r0
 800deee:	2800      	cmp	r0, #0
 800def0:	f43f aef6 	beq.w	800dce0 <_strtod_l+0x420>
 800def4:	9b07      	ldr	r3, [sp, #28]
 800def6:	691a      	ldr	r2, [r3, #16]
 800def8:	ec4b ab19 	vmov	d9, sl, fp
 800defc:	3202      	adds	r2, #2
 800defe:	f103 010c 	add.w	r1, r3, #12
 800df02:	0092      	lsls	r2, r2, #2
 800df04:	300c      	adds	r0, #12
 800df06:	f000 fd33 	bl	800e970 <memcpy>
 800df0a:	eeb0 0b49 	vmov.f64	d0, d9
 800df0e:	9805      	ldr	r0, [sp, #20]
 800df10:	aa14      	add	r2, sp, #80	@ 0x50
 800df12:	a913      	add	r1, sp, #76	@ 0x4c
 800df14:	f7ff fbee 	bl	800d6f4 <__d2b>
 800df18:	9012      	str	r0, [sp, #72]	@ 0x48
 800df1a:	2800      	cmp	r0, #0
 800df1c:	f43f aee0 	beq.w	800dce0 <_strtod_l+0x420>
 800df20:	9805      	ldr	r0, [sp, #20]
 800df22:	2101      	movs	r1, #1
 800df24:	f7ff f940 	bl	800d1a8 <__i2b>
 800df28:	4605      	mov	r5, r0
 800df2a:	b940      	cbnz	r0, 800df3e <_strtod_l+0x67e>
 800df2c:	2500      	movs	r5, #0
 800df2e:	e6d7      	b.n	800dce0 <_strtod_l+0x420>
 800df30:	f04f 31ff 	mov.w	r1, #4294967295
 800df34:	fa01 f202 	lsl.w	r2, r1, r2
 800df38:	ea02 0a0a 	and.w	sl, r2, sl
 800df3c:	e7b0      	b.n	800dea0 <_strtod_l+0x5e0>
 800df3e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800df40:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800df42:	2f00      	cmp	r7, #0
 800df44:	bfab      	itete	ge
 800df46:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800df48:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800df4a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800df4e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800df52:	bfac      	ite	ge
 800df54:	eb07 0903 	addge.w	r9, r7, r3
 800df58:	eba3 0807 	sublt.w	r8, r3, r7
 800df5c:	9b06      	ldr	r3, [sp, #24]
 800df5e:	1aff      	subs	r7, r7, r3
 800df60:	4417      	add	r7, r2
 800df62:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800df66:	4a6b      	ldr	r2, [pc, #428]	@ (800e114 <_strtod_l+0x854>)
 800df68:	3f01      	subs	r7, #1
 800df6a:	4297      	cmp	r7, r2
 800df6c:	da51      	bge.n	800e012 <_strtod_l+0x752>
 800df6e:	1bd1      	subs	r1, r2, r7
 800df70:	291f      	cmp	r1, #31
 800df72:	eba3 0301 	sub.w	r3, r3, r1
 800df76:	f04f 0201 	mov.w	r2, #1
 800df7a:	dc3e      	bgt.n	800dffa <_strtod_l+0x73a>
 800df7c:	408a      	lsls	r2, r1
 800df7e:	920c      	str	r2, [sp, #48]	@ 0x30
 800df80:	2200      	movs	r2, #0
 800df82:	920b      	str	r2, [sp, #44]	@ 0x2c
 800df84:	eb09 0703 	add.w	r7, r9, r3
 800df88:	4498      	add	r8, r3
 800df8a:	9b06      	ldr	r3, [sp, #24]
 800df8c:	45b9      	cmp	r9, r7
 800df8e:	4498      	add	r8, r3
 800df90:	464b      	mov	r3, r9
 800df92:	bfa8      	it	ge
 800df94:	463b      	movge	r3, r7
 800df96:	4543      	cmp	r3, r8
 800df98:	bfa8      	it	ge
 800df9a:	4643      	movge	r3, r8
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	bfc2      	ittt	gt
 800dfa0:	1aff      	subgt	r7, r7, r3
 800dfa2:	eba8 0803 	subgt.w	r8, r8, r3
 800dfa6:	eba9 0903 	subgt.w	r9, r9, r3
 800dfaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	dd16      	ble.n	800dfde <_strtod_l+0x71e>
 800dfb0:	4629      	mov	r1, r5
 800dfb2:	9805      	ldr	r0, [sp, #20]
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	f7ff f9b7 	bl	800d328 <__pow5mult>
 800dfba:	4605      	mov	r5, r0
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d0b5      	beq.n	800df2c <_strtod_l+0x66c>
 800dfc0:	4601      	mov	r1, r0
 800dfc2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dfc4:	9805      	ldr	r0, [sp, #20]
 800dfc6:	f7ff f905 	bl	800d1d4 <__multiply>
 800dfca:	900f      	str	r0, [sp, #60]	@ 0x3c
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	f43f ae87 	beq.w	800dce0 <_strtod_l+0x420>
 800dfd2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dfd4:	9805      	ldr	r0, [sp, #20]
 800dfd6:	f7fe ffe9 	bl	800cfac <_Bfree>
 800dfda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfdc:	9312      	str	r3, [sp, #72]	@ 0x48
 800dfde:	2f00      	cmp	r7, #0
 800dfe0:	dc1b      	bgt.n	800e01a <_strtod_l+0x75a>
 800dfe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	dd21      	ble.n	800e02c <_strtod_l+0x76c>
 800dfe8:	4631      	mov	r1, r6
 800dfea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dfec:	9805      	ldr	r0, [sp, #20]
 800dfee:	f7ff f99b 	bl	800d328 <__pow5mult>
 800dff2:	4606      	mov	r6, r0
 800dff4:	b9d0      	cbnz	r0, 800e02c <_strtod_l+0x76c>
 800dff6:	2600      	movs	r6, #0
 800dff8:	e672      	b.n	800dce0 <_strtod_l+0x420>
 800dffa:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800dffe:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800e002:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800e006:	37e2      	adds	r7, #226	@ 0xe2
 800e008:	fa02 f107 	lsl.w	r1, r2, r7
 800e00c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e00e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e010:	e7b8      	b.n	800df84 <_strtod_l+0x6c4>
 800e012:	2200      	movs	r2, #0
 800e014:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e016:	2201      	movs	r2, #1
 800e018:	e7f9      	b.n	800e00e <_strtod_l+0x74e>
 800e01a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e01c:	9805      	ldr	r0, [sp, #20]
 800e01e:	463a      	mov	r2, r7
 800e020:	f7ff f9dc 	bl	800d3dc <__lshift>
 800e024:	9012      	str	r0, [sp, #72]	@ 0x48
 800e026:	2800      	cmp	r0, #0
 800e028:	d1db      	bne.n	800dfe2 <_strtod_l+0x722>
 800e02a:	e659      	b.n	800dce0 <_strtod_l+0x420>
 800e02c:	f1b8 0f00 	cmp.w	r8, #0
 800e030:	dd07      	ble.n	800e042 <_strtod_l+0x782>
 800e032:	4631      	mov	r1, r6
 800e034:	9805      	ldr	r0, [sp, #20]
 800e036:	4642      	mov	r2, r8
 800e038:	f7ff f9d0 	bl	800d3dc <__lshift>
 800e03c:	4606      	mov	r6, r0
 800e03e:	2800      	cmp	r0, #0
 800e040:	d0d9      	beq.n	800dff6 <_strtod_l+0x736>
 800e042:	f1b9 0f00 	cmp.w	r9, #0
 800e046:	dd08      	ble.n	800e05a <_strtod_l+0x79a>
 800e048:	4629      	mov	r1, r5
 800e04a:	9805      	ldr	r0, [sp, #20]
 800e04c:	464a      	mov	r2, r9
 800e04e:	f7ff f9c5 	bl	800d3dc <__lshift>
 800e052:	4605      	mov	r5, r0
 800e054:	2800      	cmp	r0, #0
 800e056:	f43f ae43 	beq.w	800dce0 <_strtod_l+0x420>
 800e05a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e05c:	9805      	ldr	r0, [sp, #20]
 800e05e:	4632      	mov	r2, r6
 800e060:	f7ff fa44 	bl	800d4ec <__mdiff>
 800e064:	4604      	mov	r4, r0
 800e066:	2800      	cmp	r0, #0
 800e068:	f43f ae3a 	beq.w	800dce0 <_strtod_l+0x420>
 800e06c:	2300      	movs	r3, #0
 800e06e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800e072:	60c3      	str	r3, [r0, #12]
 800e074:	4629      	mov	r1, r5
 800e076:	f7ff fa1d 	bl	800d4b4 <__mcmp>
 800e07a:	2800      	cmp	r0, #0
 800e07c:	da4e      	bge.n	800e11c <_strtod_l+0x85c>
 800e07e:	ea58 080a 	orrs.w	r8, r8, sl
 800e082:	d174      	bne.n	800e16e <_strtod_l+0x8ae>
 800e084:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d170      	bne.n	800e16e <_strtod_l+0x8ae>
 800e08c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e090:	0d1b      	lsrs	r3, r3, #20
 800e092:	051b      	lsls	r3, r3, #20
 800e094:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e098:	d969      	bls.n	800e16e <_strtod_l+0x8ae>
 800e09a:	6963      	ldr	r3, [r4, #20]
 800e09c:	b913      	cbnz	r3, 800e0a4 <_strtod_l+0x7e4>
 800e09e:	6923      	ldr	r3, [r4, #16]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	dd64      	ble.n	800e16e <_strtod_l+0x8ae>
 800e0a4:	4621      	mov	r1, r4
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	9805      	ldr	r0, [sp, #20]
 800e0aa:	f7ff f997 	bl	800d3dc <__lshift>
 800e0ae:	4629      	mov	r1, r5
 800e0b0:	4604      	mov	r4, r0
 800e0b2:	f7ff f9ff 	bl	800d4b4 <__mcmp>
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	dd59      	ble.n	800e16e <_strtod_l+0x8ae>
 800e0ba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e0be:	9a06      	ldr	r2, [sp, #24]
 800e0c0:	0d1b      	lsrs	r3, r3, #20
 800e0c2:	051b      	lsls	r3, r3, #20
 800e0c4:	2a00      	cmp	r2, #0
 800e0c6:	d070      	beq.n	800e1aa <_strtod_l+0x8ea>
 800e0c8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e0cc:	d86d      	bhi.n	800e1aa <_strtod_l+0x8ea>
 800e0ce:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e0d2:	f67f ae99 	bls.w	800de08 <_strtod_l+0x548>
 800e0d6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800e108 <_strtod_l+0x848>
 800e0da:	ec4b ab16 	vmov	d6, sl, fp
 800e0de:	4b0e      	ldr	r3, [pc, #56]	@ (800e118 <_strtod_l+0x858>)
 800e0e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e0e4:	ee17 2a90 	vmov	r2, s15
 800e0e8:	4013      	ands	r3, r2
 800e0ea:	ec5b ab17 	vmov	sl, fp, d7
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	f47f ae01 	bne.w	800dcf6 <_strtod_l+0x436>
 800e0f4:	9a05      	ldr	r2, [sp, #20]
 800e0f6:	2322      	movs	r3, #34	@ 0x22
 800e0f8:	6013      	str	r3, [r2, #0]
 800e0fa:	e5fc      	b.n	800dcf6 <_strtod_l+0x436>
 800e0fc:	f3af 8000 	nop.w
 800e100:	ffc00000 	.word	0xffc00000
 800e104:	41dfffff 	.word	0x41dfffff
 800e108:	00000000 	.word	0x00000000
 800e10c:	39500000 	.word	0x39500000
 800e110:	0800fde0 	.word	0x0800fde0
 800e114:	fffffc02 	.word	0xfffffc02
 800e118:	7ff00000 	.word	0x7ff00000
 800e11c:	46d9      	mov	r9, fp
 800e11e:	d15d      	bne.n	800e1dc <_strtod_l+0x91c>
 800e120:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e124:	f1b8 0f00 	cmp.w	r8, #0
 800e128:	d02a      	beq.n	800e180 <_strtod_l+0x8c0>
 800e12a:	4aab      	ldr	r2, [pc, #684]	@ (800e3d8 <_strtod_l+0xb18>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d12a      	bne.n	800e186 <_strtod_l+0x8c6>
 800e130:	9b06      	ldr	r3, [sp, #24]
 800e132:	4652      	mov	r2, sl
 800e134:	b1fb      	cbz	r3, 800e176 <_strtod_l+0x8b6>
 800e136:	4ba9      	ldr	r3, [pc, #676]	@ (800e3dc <_strtod_l+0xb1c>)
 800e138:	ea0b 0303 	and.w	r3, fp, r3
 800e13c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e140:	f04f 31ff 	mov.w	r1, #4294967295
 800e144:	d81a      	bhi.n	800e17c <_strtod_l+0x8bc>
 800e146:	0d1b      	lsrs	r3, r3, #20
 800e148:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e14c:	fa01 f303 	lsl.w	r3, r1, r3
 800e150:	429a      	cmp	r2, r3
 800e152:	d118      	bne.n	800e186 <_strtod_l+0x8c6>
 800e154:	4ba2      	ldr	r3, [pc, #648]	@ (800e3e0 <_strtod_l+0xb20>)
 800e156:	4599      	cmp	r9, r3
 800e158:	d102      	bne.n	800e160 <_strtod_l+0x8a0>
 800e15a:	3201      	adds	r2, #1
 800e15c:	f43f adc0 	beq.w	800dce0 <_strtod_l+0x420>
 800e160:	4b9e      	ldr	r3, [pc, #632]	@ (800e3dc <_strtod_l+0xb1c>)
 800e162:	ea09 0303 	and.w	r3, r9, r3
 800e166:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800e16a:	f04f 0a00 	mov.w	sl, #0
 800e16e:	9b06      	ldr	r3, [sp, #24]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d1b0      	bne.n	800e0d6 <_strtod_l+0x816>
 800e174:	e5bf      	b.n	800dcf6 <_strtod_l+0x436>
 800e176:	f04f 33ff 	mov.w	r3, #4294967295
 800e17a:	e7e9      	b.n	800e150 <_strtod_l+0x890>
 800e17c:	460b      	mov	r3, r1
 800e17e:	e7e7      	b.n	800e150 <_strtod_l+0x890>
 800e180:	ea53 030a 	orrs.w	r3, r3, sl
 800e184:	d099      	beq.n	800e0ba <_strtod_l+0x7fa>
 800e186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e188:	b1c3      	cbz	r3, 800e1bc <_strtod_l+0x8fc>
 800e18a:	ea13 0f09 	tst.w	r3, r9
 800e18e:	d0ee      	beq.n	800e16e <_strtod_l+0x8ae>
 800e190:	9a06      	ldr	r2, [sp, #24]
 800e192:	4650      	mov	r0, sl
 800e194:	4659      	mov	r1, fp
 800e196:	f1b8 0f00 	cmp.w	r8, #0
 800e19a:	d013      	beq.n	800e1c4 <_strtod_l+0x904>
 800e19c:	f7ff fb75 	bl	800d88a <sulp>
 800e1a0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800e1a4:	ec5b ab17 	vmov	sl, fp, d7
 800e1a8:	e7e1      	b.n	800e16e <_strtod_l+0x8ae>
 800e1aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e1ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e1b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e1b6:	f04f 3aff 	mov.w	sl, #4294967295
 800e1ba:	e7d8      	b.n	800e16e <_strtod_l+0x8ae>
 800e1bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1be:	ea13 0f0a 	tst.w	r3, sl
 800e1c2:	e7e4      	b.n	800e18e <_strtod_l+0x8ce>
 800e1c4:	f7ff fb61 	bl	800d88a <sulp>
 800e1c8:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e1cc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d4:	ec5b ab10 	vmov	sl, fp, d0
 800e1d8:	d1c9      	bne.n	800e16e <_strtod_l+0x8ae>
 800e1da:	e615      	b.n	800de08 <_strtod_l+0x548>
 800e1dc:	4629      	mov	r1, r5
 800e1de:	4620      	mov	r0, r4
 800e1e0:	f7ff fae0 	bl	800d7a4 <__ratio>
 800e1e4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800e1e8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f0:	d85d      	bhi.n	800e2ae <_strtod_l+0x9ee>
 800e1f2:	f1b8 0f00 	cmp.w	r8, #0
 800e1f6:	d164      	bne.n	800e2c2 <_strtod_l+0xa02>
 800e1f8:	f1ba 0f00 	cmp.w	sl, #0
 800e1fc:	d14b      	bne.n	800e296 <_strtod_l+0x9d6>
 800e1fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e202:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e206:	2b00      	cmp	r3, #0
 800e208:	d160      	bne.n	800e2cc <_strtod_l+0xa0c>
 800e20a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800e20e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e216:	d401      	bmi.n	800e21c <_strtod_l+0x95c>
 800e218:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e21c:	eeb1 ab48 	vneg.f64	d10, d8
 800e220:	486e      	ldr	r0, [pc, #440]	@ (800e3dc <_strtod_l+0xb1c>)
 800e222:	4970      	ldr	r1, [pc, #448]	@ (800e3e4 <_strtod_l+0xb24>)
 800e224:	ea09 0700 	and.w	r7, r9, r0
 800e228:	428f      	cmp	r7, r1
 800e22a:	ec53 2b1a 	vmov	r2, r3, d10
 800e22e:	d17d      	bne.n	800e32c <_strtod_l+0xa6c>
 800e230:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800e234:	ec4b ab1c 	vmov	d12, sl, fp
 800e238:	eeb0 0b4c 	vmov.f64	d0, d12
 800e23c:	f7ff f9ea 	bl	800d614 <__ulp>
 800e240:	4866      	ldr	r0, [pc, #408]	@ (800e3dc <_strtod_l+0xb1c>)
 800e242:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800e246:	ee1c 3a90 	vmov	r3, s25
 800e24a:	4a67      	ldr	r2, [pc, #412]	@ (800e3e8 <_strtod_l+0xb28>)
 800e24c:	ea03 0100 	and.w	r1, r3, r0
 800e250:	4291      	cmp	r1, r2
 800e252:	ec5b ab1c 	vmov	sl, fp, d12
 800e256:	d93c      	bls.n	800e2d2 <_strtod_l+0xa12>
 800e258:	ee19 2a90 	vmov	r2, s19
 800e25c:	4b60      	ldr	r3, [pc, #384]	@ (800e3e0 <_strtod_l+0xb20>)
 800e25e:	429a      	cmp	r2, r3
 800e260:	d104      	bne.n	800e26c <_strtod_l+0x9ac>
 800e262:	ee19 3a10 	vmov	r3, s18
 800e266:	3301      	adds	r3, #1
 800e268:	f43f ad3a 	beq.w	800dce0 <_strtod_l+0x420>
 800e26c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800e3e0 <_strtod_l+0xb20>
 800e270:	f04f 3aff 	mov.w	sl, #4294967295
 800e274:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e276:	9805      	ldr	r0, [sp, #20]
 800e278:	f7fe fe98 	bl	800cfac <_Bfree>
 800e27c:	9805      	ldr	r0, [sp, #20]
 800e27e:	4631      	mov	r1, r6
 800e280:	f7fe fe94 	bl	800cfac <_Bfree>
 800e284:	9805      	ldr	r0, [sp, #20]
 800e286:	4629      	mov	r1, r5
 800e288:	f7fe fe90 	bl	800cfac <_Bfree>
 800e28c:	9805      	ldr	r0, [sp, #20]
 800e28e:	4621      	mov	r1, r4
 800e290:	f7fe fe8c 	bl	800cfac <_Bfree>
 800e294:	e625      	b.n	800dee2 <_strtod_l+0x622>
 800e296:	f1ba 0f01 	cmp.w	sl, #1
 800e29a:	d103      	bne.n	800e2a4 <_strtod_l+0x9e4>
 800e29c:	f1bb 0f00 	cmp.w	fp, #0
 800e2a0:	f43f adb2 	beq.w	800de08 <_strtod_l+0x548>
 800e2a4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e2a8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e2ac:	e7b8      	b.n	800e220 <_strtod_l+0x960>
 800e2ae:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e2b2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e2b6:	f1b8 0f00 	cmp.w	r8, #0
 800e2ba:	d0af      	beq.n	800e21c <_strtod_l+0x95c>
 800e2bc:	eeb0 ab48 	vmov.f64	d10, d8
 800e2c0:	e7ae      	b.n	800e220 <_strtod_l+0x960>
 800e2c2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800e2c6:	eeb0 8b4a 	vmov.f64	d8, d10
 800e2ca:	e7a9      	b.n	800e220 <_strtod_l+0x960>
 800e2cc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e2d0:	e7a6      	b.n	800e220 <_strtod_l+0x960>
 800e2d2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e2d6:	9b06      	ldr	r3, [sp, #24]
 800e2d8:	46d9      	mov	r9, fp
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d1ca      	bne.n	800e274 <_strtod_l+0x9b4>
 800e2de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e2e2:	0d1b      	lsrs	r3, r3, #20
 800e2e4:	051b      	lsls	r3, r3, #20
 800e2e6:	429f      	cmp	r7, r3
 800e2e8:	d1c4      	bne.n	800e274 <_strtod_l+0x9b4>
 800e2ea:	ec51 0b18 	vmov	r0, r1, d8
 800e2ee:	f7f2 f9d3 	bl	8000698 <__aeabi_d2lz>
 800e2f2:	f7f2 f98b 	bl	800060c <__aeabi_l2d>
 800e2f6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800e2fa:	ec41 0b17 	vmov	d7, r0, r1
 800e2fe:	ea49 090a 	orr.w	r9, r9, sl
 800e302:	ea59 0908 	orrs.w	r9, r9, r8
 800e306:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e30a:	d03c      	beq.n	800e386 <_strtod_l+0xac6>
 800e30c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800e3c0 <_strtod_l+0xb00>
 800e310:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e318:	f53f aced 	bmi.w	800dcf6 <_strtod_l+0x436>
 800e31c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e3c8 <_strtod_l+0xb08>
 800e320:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e328:	dda4      	ble.n	800e274 <_strtod_l+0x9b4>
 800e32a:	e4e4      	b.n	800dcf6 <_strtod_l+0x436>
 800e32c:	9906      	ldr	r1, [sp, #24]
 800e32e:	b1e1      	cbz	r1, 800e36a <_strtod_l+0xaaa>
 800e330:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800e334:	d819      	bhi.n	800e36a <_strtod_l+0xaaa>
 800e336:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e33e:	d811      	bhi.n	800e364 <_strtod_l+0xaa4>
 800e340:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800e344:	ee18 3a10 	vmov	r3, s16
 800e348:	2b01      	cmp	r3, #1
 800e34a:	bf38      	it	cc
 800e34c:	2301      	movcc	r3, #1
 800e34e:	ee08 3a10 	vmov	s16, r3
 800e352:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800e356:	f1b8 0f00 	cmp.w	r8, #0
 800e35a:	d111      	bne.n	800e380 <_strtod_l+0xac0>
 800e35c:	eeb1 7b48 	vneg.f64	d7, d8
 800e360:	ec53 2b17 	vmov	r2, r3, d7
 800e364:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800e368:	1bcb      	subs	r3, r1, r7
 800e36a:	eeb0 0b49 	vmov.f64	d0, d9
 800e36e:	ec43 2b1a 	vmov	d10, r2, r3
 800e372:	f7ff f94f 	bl	800d614 <__ulp>
 800e376:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800e37a:	ec5b ab19 	vmov	sl, fp, d9
 800e37e:	e7aa      	b.n	800e2d6 <_strtod_l+0xa16>
 800e380:	eeb0 7b48 	vmov.f64	d7, d8
 800e384:	e7ec      	b.n	800e360 <_strtod_l+0xaa0>
 800e386:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800e3d0 <_strtod_l+0xb10>
 800e38a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e392:	f57f af6f 	bpl.w	800e274 <_strtod_l+0x9b4>
 800e396:	e4ae      	b.n	800dcf6 <_strtod_l+0x436>
 800e398:	2300      	movs	r3, #0
 800e39a:	9308      	str	r3, [sp, #32]
 800e39c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e39e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e3a0:	6013      	str	r3, [r2, #0]
 800e3a2:	f7ff bacc 	b.w	800d93e <_strtod_l+0x7e>
 800e3a6:	2a65      	cmp	r2, #101	@ 0x65
 800e3a8:	f43f abbc 	beq.w	800db24 <_strtod_l+0x264>
 800e3ac:	2a45      	cmp	r2, #69	@ 0x45
 800e3ae:	f43f abb9 	beq.w	800db24 <_strtod_l+0x264>
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	9306      	str	r3, [sp, #24]
 800e3b6:	f7ff bbf0 	b.w	800db9a <_strtod_l+0x2da>
 800e3ba:	bf00      	nop
 800e3bc:	f3af 8000 	nop.w
 800e3c0:	94a03595 	.word	0x94a03595
 800e3c4:	3fdfffff 	.word	0x3fdfffff
 800e3c8:	35afe535 	.word	0x35afe535
 800e3cc:	3fe00000 	.word	0x3fe00000
 800e3d0:	94a03595 	.word	0x94a03595
 800e3d4:	3fcfffff 	.word	0x3fcfffff
 800e3d8:	000fffff 	.word	0x000fffff
 800e3dc:	7ff00000 	.word	0x7ff00000
 800e3e0:	7fefffff 	.word	0x7fefffff
 800e3e4:	7fe00000 	.word	0x7fe00000
 800e3e8:	7c9fffff 	.word	0x7c9fffff

0800e3ec <_strtod_r>:
 800e3ec:	4b01      	ldr	r3, [pc, #4]	@ (800e3f4 <_strtod_r+0x8>)
 800e3ee:	f7ff ba67 	b.w	800d8c0 <_strtod_l>
 800e3f2:	bf00      	nop
 800e3f4:	20000080 	.word	0x20000080

0800e3f8 <_strtol_l.constprop.0>:
 800e3f8:	2b24      	cmp	r3, #36	@ 0x24
 800e3fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3fe:	4686      	mov	lr, r0
 800e400:	4690      	mov	r8, r2
 800e402:	d801      	bhi.n	800e408 <_strtol_l.constprop.0+0x10>
 800e404:	2b01      	cmp	r3, #1
 800e406:	d106      	bne.n	800e416 <_strtol_l.constprop.0+0x1e>
 800e408:	f7fd fe7c 	bl	800c104 <__errno>
 800e40c:	2316      	movs	r3, #22
 800e40e:	6003      	str	r3, [r0, #0]
 800e410:	2000      	movs	r0, #0
 800e412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e416:	4834      	ldr	r0, [pc, #208]	@ (800e4e8 <_strtol_l.constprop.0+0xf0>)
 800e418:	460d      	mov	r5, r1
 800e41a:	462a      	mov	r2, r5
 800e41c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e420:	5d06      	ldrb	r6, [r0, r4]
 800e422:	f016 0608 	ands.w	r6, r6, #8
 800e426:	d1f8      	bne.n	800e41a <_strtol_l.constprop.0+0x22>
 800e428:	2c2d      	cmp	r4, #45	@ 0x2d
 800e42a:	d12d      	bne.n	800e488 <_strtol_l.constprop.0+0x90>
 800e42c:	782c      	ldrb	r4, [r5, #0]
 800e42e:	2601      	movs	r6, #1
 800e430:	1c95      	adds	r5, r2, #2
 800e432:	f033 0210 	bics.w	r2, r3, #16
 800e436:	d109      	bne.n	800e44c <_strtol_l.constprop.0+0x54>
 800e438:	2c30      	cmp	r4, #48	@ 0x30
 800e43a:	d12a      	bne.n	800e492 <_strtol_l.constprop.0+0x9a>
 800e43c:	782a      	ldrb	r2, [r5, #0]
 800e43e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e442:	2a58      	cmp	r2, #88	@ 0x58
 800e444:	d125      	bne.n	800e492 <_strtol_l.constprop.0+0x9a>
 800e446:	786c      	ldrb	r4, [r5, #1]
 800e448:	2310      	movs	r3, #16
 800e44a:	3502      	adds	r5, #2
 800e44c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e450:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e454:	2200      	movs	r2, #0
 800e456:	fbbc f9f3 	udiv	r9, ip, r3
 800e45a:	4610      	mov	r0, r2
 800e45c:	fb03 ca19 	mls	sl, r3, r9, ip
 800e460:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e464:	2f09      	cmp	r7, #9
 800e466:	d81b      	bhi.n	800e4a0 <_strtol_l.constprop.0+0xa8>
 800e468:	463c      	mov	r4, r7
 800e46a:	42a3      	cmp	r3, r4
 800e46c:	dd27      	ble.n	800e4be <_strtol_l.constprop.0+0xc6>
 800e46e:	1c57      	adds	r7, r2, #1
 800e470:	d007      	beq.n	800e482 <_strtol_l.constprop.0+0x8a>
 800e472:	4581      	cmp	r9, r0
 800e474:	d320      	bcc.n	800e4b8 <_strtol_l.constprop.0+0xc0>
 800e476:	d101      	bne.n	800e47c <_strtol_l.constprop.0+0x84>
 800e478:	45a2      	cmp	sl, r4
 800e47a:	db1d      	blt.n	800e4b8 <_strtol_l.constprop.0+0xc0>
 800e47c:	fb00 4003 	mla	r0, r0, r3, r4
 800e480:	2201      	movs	r2, #1
 800e482:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e486:	e7eb      	b.n	800e460 <_strtol_l.constprop.0+0x68>
 800e488:	2c2b      	cmp	r4, #43	@ 0x2b
 800e48a:	bf04      	itt	eq
 800e48c:	782c      	ldrbeq	r4, [r5, #0]
 800e48e:	1c95      	addeq	r5, r2, #2
 800e490:	e7cf      	b.n	800e432 <_strtol_l.constprop.0+0x3a>
 800e492:	2b00      	cmp	r3, #0
 800e494:	d1da      	bne.n	800e44c <_strtol_l.constprop.0+0x54>
 800e496:	2c30      	cmp	r4, #48	@ 0x30
 800e498:	bf0c      	ite	eq
 800e49a:	2308      	moveq	r3, #8
 800e49c:	230a      	movne	r3, #10
 800e49e:	e7d5      	b.n	800e44c <_strtol_l.constprop.0+0x54>
 800e4a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e4a4:	2f19      	cmp	r7, #25
 800e4a6:	d801      	bhi.n	800e4ac <_strtol_l.constprop.0+0xb4>
 800e4a8:	3c37      	subs	r4, #55	@ 0x37
 800e4aa:	e7de      	b.n	800e46a <_strtol_l.constprop.0+0x72>
 800e4ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e4b0:	2f19      	cmp	r7, #25
 800e4b2:	d804      	bhi.n	800e4be <_strtol_l.constprop.0+0xc6>
 800e4b4:	3c57      	subs	r4, #87	@ 0x57
 800e4b6:	e7d8      	b.n	800e46a <_strtol_l.constprop.0+0x72>
 800e4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e4bc:	e7e1      	b.n	800e482 <_strtol_l.constprop.0+0x8a>
 800e4be:	1c53      	adds	r3, r2, #1
 800e4c0:	d108      	bne.n	800e4d4 <_strtol_l.constprop.0+0xdc>
 800e4c2:	2322      	movs	r3, #34	@ 0x22
 800e4c4:	f8ce 3000 	str.w	r3, [lr]
 800e4c8:	4660      	mov	r0, ip
 800e4ca:	f1b8 0f00 	cmp.w	r8, #0
 800e4ce:	d0a0      	beq.n	800e412 <_strtol_l.constprop.0+0x1a>
 800e4d0:	1e69      	subs	r1, r5, #1
 800e4d2:	e006      	b.n	800e4e2 <_strtol_l.constprop.0+0xea>
 800e4d4:	b106      	cbz	r6, 800e4d8 <_strtol_l.constprop.0+0xe0>
 800e4d6:	4240      	negs	r0, r0
 800e4d8:	f1b8 0f00 	cmp.w	r8, #0
 800e4dc:	d099      	beq.n	800e412 <_strtol_l.constprop.0+0x1a>
 800e4de:	2a00      	cmp	r2, #0
 800e4e0:	d1f6      	bne.n	800e4d0 <_strtol_l.constprop.0+0xd8>
 800e4e2:	f8c8 1000 	str.w	r1, [r8]
 800e4e6:	e794      	b.n	800e412 <_strtol_l.constprop.0+0x1a>
 800e4e8:	0800fe09 	.word	0x0800fe09

0800e4ec <_strtol_r>:
 800e4ec:	f7ff bf84 	b.w	800e3f8 <_strtol_l.constprop.0>

0800e4f0 <__ssputs_r>:
 800e4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f4:	688e      	ldr	r6, [r1, #8]
 800e4f6:	461f      	mov	r7, r3
 800e4f8:	42be      	cmp	r6, r7
 800e4fa:	680b      	ldr	r3, [r1, #0]
 800e4fc:	4682      	mov	sl, r0
 800e4fe:	460c      	mov	r4, r1
 800e500:	4690      	mov	r8, r2
 800e502:	d82d      	bhi.n	800e560 <__ssputs_r+0x70>
 800e504:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e508:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e50c:	d026      	beq.n	800e55c <__ssputs_r+0x6c>
 800e50e:	6965      	ldr	r5, [r4, #20]
 800e510:	6909      	ldr	r1, [r1, #16]
 800e512:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e516:	eba3 0901 	sub.w	r9, r3, r1
 800e51a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e51e:	1c7b      	adds	r3, r7, #1
 800e520:	444b      	add	r3, r9
 800e522:	106d      	asrs	r5, r5, #1
 800e524:	429d      	cmp	r5, r3
 800e526:	bf38      	it	cc
 800e528:	461d      	movcc	r5, r3
 800e52a:	0553      	lsls	r3, r2, #21
 800e52c:	d527      	bpl.n	800e57e <__ssputs_r+0x8e>
 800e52e:	4629      	mov	r1, r5
 800e530:	f7fe fc70 	bl	800ce14 <_malloc_r>
 800e534:	4606      	mov	r6, r0
 800e536:	b360      	cbz	r0, 800e592 <__ssputs_r+0xa2>
 800e538:	6921      	ldr	r1, [r4, #16]
 800e53a:	464a      	mov	r2, r9
 800e53c:	f000 fa18 	bl	800e970 <memcpy>
 800e540:	89a3      	ldrh	r3, [r4, #12]
 800e542:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e54a:	81a3      	strh	r3, [r4, #12]
 800e54c:	6126      	str	r6, [r4, #16]
 800e54e:	6165      	str	r5, [r4, #20]
 800e550:	444e      	add	r6, r9
 800e552:	eba5 0509 	sub.w	r5, r5, r9
 800e556:	6026      	str	r6, [r4, #0]
 800e558:	60a5      	str	r5, [r4, #8]
 800e55a:	463e      	mov	r6, r7
 800e55c:	42be      	cmp	r6, r7
 800e55e:	d900      	bls.n	800e562 <__ssputs_r+0x72>
 800e560:	463e      	mov	r6, r7
 800e562:	6820      	ldr	r0, [r4, #0]
 800e564:	4632      	mov	r2, r6
 800e566:	4641      	mov	r1, r8
 800e568:	f000 f9c6 	bl	800e8f8 <memmove>
 800e56c:	68a3      	ldr	r3, [r4, #8]
 800e56e:	1b9b      	subs	r3, r3, r6
 800e570:	60a3      	str	r3, [r4, #8]
 800e572:	6823      	ldr	r3, [r4, #0]
 800e574:	4433      	add	r3, r6
 800e576:	6023      	str	r3, [r4, #0]
 800e578:	2000      	movs	r0, #0
 800e57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e57e:	462a      	mov	r2, r5
 800e580:	f000 fd8b 	bl	800f09a <_realloc_r>
 800e584:	4606      	mov	r6, r0
 800e586:	2800      	cmp	r0, #0
 800e588:	d1e0      	bne.n	800e54c <__ssputs_r+0x5c>
 800e58a:	6921      	ldr	r1, [r4, #16]
 800e58c:	4650      	mov	r0, sl
 800e58e:	f7fe fbcd 	bl	800cd2c <_free_r>
 800e592:	230c      	movs	r3, #12
 800e594:	f8ca 3000 	str.w	r3, [sl]
 800e598:	89a3      	ldrh	r3, [r4, #12]
 800e59a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e59e:	81a3      	strh	r3, [r4, #12]
 800e5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5a4:	e7e9      	b.n	800e57a <__ssputs_r+0x8a>
	...

0800e5a8 <_svfiprintf_r>:
 800e5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ac:	4698      	mov	r8, r3
 800e5ae:	898b      	ldrh	r3, [r1, #12]
 800e5b0:	061b      	lsls	r3, r3, #24
 800e5b2:	b09d      	sub	sp, #116	@ 0x74
 800e5b4:	4607      	mov	r7, r0
 800e5b6:	460d      	mov	r5, r1
 800e5b8:	4614      	mov	r4, r2
 800e5ba:	d510      	bpl.n	800e5de <_svfiprintf_r+0x36>
 800e5bc:	690b      	ldr	r3, [r1, #16]
 800e5be:	b973      	cbnz	r3, 800e5de <_svfiprintf_r+0x36>
 800e5c0:	2140      	movs	r1, #64	@ 0x40
 800e5c2:	f7fe fc27 	bl	800ce14 <_malloc_r>
 800e5c6:	6028      	str	r0, [r5, #0]
 800e5c8:	6128      	str	r0, [r5, #16]
 800e5ca:	b930      	cbnz	r0, 800e5da <_svfiprintf_r+0x32>
 800e5cc:	230c      	movs	r3, #12
 800e5ce:	603b      	str	r3, [r7, #0]
 800e5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d4:	b01d      	add	sp, #116	@ 0x74
 800e5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5da:	2340      	movs	r3, #64	@ 0x40
 800e5dc:	616b      	str	r3, [r5, #20]
 800e5de:	2300      	movs	r3, #0
 800e5e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5e2:	2320      	movs	r3, #32
 800e5e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e5e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5ec:	2330      	movs	r3, #48	@ 0x30
 800e5ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e78c <_svfiprintf_r+0x1e4>
 800e5f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e5f6:	f04f 0901 	mov.w	r9, #1
 800e5fa:	4623      	mov	r3, r4
 800e5fc:	469a      	mov	sl, r3
 800e5fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e602:	b10a      	cbz	r2, 800e608 <_svfiprintf_r+0x60>
 800e604:	2a25      	cmp	r2, #37	@ 0x25
 800e606:	d1f9      	bne.n	800e5fc <_svfiprintf_r+0x54>
 800e608:	ebba 0b04 	subs.w	fp, sl, r4
 800e60c:	d00b      	beq.n	800e626 <_svfiprintf_r+0x7e>
 800e60e:	465b      	mov	r3, fp
 800e610:	4622      	mov	r2, r4
 800e612:	4629      	mov	r1, r5
 800e614:	4638      	mov	r0, r7
 800e616:	f7ff ff6b 	bl	800e4f0 <__ssputs_r>
 800e61a:	3001      	adds	r0, #1
 800e61c:	f000 80a7 	beq.w	800e76e <_svfiprintf_r+0x1c6>
 800e620:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e622:	445a      	add	r2, fp
 800e624:	9209      	str	r2, [sp, #36]	@ 0x24
 800e626:	f89a 3000 	ldrb.w	r3, [sl]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	f000 809f 	beq.w	800e76e <_svfiprintf_r+0x1c6>
 800e630:	2300      	movs	r3, #0
 800e632:	f04f 32ff 	mov.w	r2, #4294967295
 800e636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e63a:	f10a 0a01 	add.w	sl, sl, #1
 800e63e:	9304      	str	r3, [sp, #16]
 800e640:	9307      	str	r3, [sp, #28]
 800e642:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e646:	931a      	str	r3, [sp, #104]	@ 0x68
 800e648:	4654      	mov	r4, sl
 800e64a:	2205      	movs	r2, #5
 800e64c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e650:	484e      	ldr	r0, [pc, #312]	@ (800e78c <_svfiprintf_r+0x1e4>)
 800e652:	f7f1 fdf5 	bl	8000240 <memchr>
 800e656:	9a04      	ldr	r2, [sp, #16]
 800e658:	b9d8      	cbnz	r0, 800e692 <_svfiprintf_r+0xea>
 800e65a:	06d0      	lsls	r0, r2, #27
 800e65c:	bf44      	itt	mi
 800e65e:	2320      	movmi	r3, #32
 800e660:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e664:	0711      	lsls	r1, r2, #28
 800e666:	bf44      	itt	mi
 800e668:	232b      	movmi	r3, #43	@ 0x2b
 800e66a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e66e:	f89a 3000 	ldrb.w	r3, [sl]
 800e672:	2b2a      	cmp	r3, #42	@ 0x2a
 800e674:	d015      	beq.n	800e6a2 <_svfiprintf_r+0xfa>
 800e676:	9a07      	ldr	r2, [sp, #28]
 800e678:	4654      	mov	r4, sl
 800e67a:	2000      	movs	r0, #0
 800e67c:	f04f 0c0a 	mov.w	ip, #10
 800e680:	4621      	mov	r1, r4
 800e682:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e686:	3b30      	subs	r3, #48	@ 0x30
 800e688:	2b09      	cmp	r3, #9
 800e68a:	d94b      	bls.n	800e724 <_svfiprintf_r+0x17c>
 800e68c:	b1b0      	cbz	r0, 800e6bc <_svfiprintf_r+0x114>
 800e68e:	9207      	str	r2, [sp, #28]
 800e690:	e014      	b.n	800e6bc <_svfiprintf_r+0x114>
 800e692:	eba0 0308 	sub.w	r3, r0, r8
 800e696:	fa09 f303 	lsl.w	r3, r9, r3
 800e69a:	4313      	orrs	r3, r2
 800e69c:	9304      	str	r3, [sp, #16]
 800e69e:	46a2      	mov	sl, r4
 800e6a0:	e7d2      	b.n	800e648 <_svfiprintf_r+0xa0>
 800e6a2:	9b03      	ldr	r3, [sp, #12]
 800e6a4:	1d19      	adds	r1, r3, #4
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	9103      	str	r1, [sp, #12]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	bfbb      	ittet	lt
 800e6ae:	425b      	neglt	r3, r3
 800e6b0:	f042 0202 	orrlt.w	r2, r2, #2
 800e6b4:	9307      	strge	r3, [sp, #28]
 800e6b6:	9307      	strlt	r3, [sp, #28]
 800e6b8:	bfb8      	it	lt
 800e6ba:	9204      	strlt	r2, [sp, #16]
 800e6bc:	7823      	ldrb	r3, [r4, #0]
 800e6be:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6c0:	d10a      	bne.n	800e6d8 <_svfiprintf_r+0x130>
 800e6c2:	7863      	ldrb	r3, [r4, #1]
 800e6c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6c6:	d132      	bne.n	800e72e <_svfiprintf_r+0x186>
 800e6c8:	9b03      	ldr	r3, [sp, #12]
 800e6ca:	1d1a      	adds	r2, r3, #4
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	9203      	str	r2, [sp, #12]
 800e6d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6d4:	3402      	adds	r4, #2
 800e6d6:	9305      	str	r3, [sp, #20]
 800e6d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e79c <_svfiprintf_r+0x1f4>
 800e6dc:	7821      	ldrb	r1, [r4, #0]
 800e6de:	2203      	movs	r2, #3
 800e6e0:	4650      	mov	r0, sl
 800e6e2:	f7f1 fdad 	bl	8000240 <memchr>
 800e6e6:	b138      	cbz	r0, 800e6f8 <_svfiprintf_r+0x150>
 800e6e8:	9b04      	ldr	r3, [sp, #16]
 800e6ea:	eba0 000a 	sub.w	r0, r0, sl
 800e6ee:	2240      	movs	r2, #64	@ 0x40
 800e6f0:	4082      	lsls	r2, r0
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	3401      	adds	r4, #1
 800e6f6:	9304      	str	r3, [sp, #16]
 800e6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6fc:	4824      	ldr	r0, [pc, #144]	@ (800e790 <_svfiprintf_r+0x1e8>)
 800e6fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e702:	2206      	movs	r2, #6
 800e704:	f7f1 fd9c 	bl	8000240 <memchr>
 800e708:	2800      	cmp	r0, #0
 800e70a:	d036      	beq.n	800e77a <_svfiprintf_r+0x1d2>
 800e70c:	4b21      	ldr	r3, [pc, #132]	@ (800e794 <_svfiprintf_r+0x1ec>)
 800e70e:	bb1b      	cbnz	r3, 800e758 <_svfiprintf_r+0x1b0>
 800e710:	9b03      	ldr	r3, [sp, #12]
 800e712:	3307      	adds	r3, #7
 800e714:	f023 0307 	bic.w	r3, r3, #7
 800e718:	3308      	adds	r3, #8
 800e71a:	9303      	str	r3, [sp, #12]
 800e71c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e71e:	4433      	add	r3, r6
 800e720:	9309      	str	r3, [sp, #36]	@ 0x24
 800e722:	e76a      	b.n	800e5fa <_svfiprintf_r+0x52>
 800e724:	fb0c 3202 	mla	r2, ip, r2, r3
 800e728:	460c      	mov	r4, r1
 800e72a:	2001      	movs	r0, #1
 800e72c:	e7a8      	b.n	800e680 <_svfiprintf_r+0xd8>
 800e72e:	2300      	movs	r3, #0
 800e730:	3401      	adds	r4, #1
 800e732:	9305      	str	r3, [sp, #20]
 800e734:	4619      	mov	r1, r3
 800e736:	f04f 0c0a 	mov.w	ip, #10
 800e73a:	4620      	mov	r0, r4
 800e73c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e740:	3a30      	subs	r2, #48	@ 0x30
 800e742:	2a09      	cmp	r2, #9
 800e744:	d903      	bls.n	800e74e <_svfiprintf_r+0x1a6>
 800e746:	2b00      	cmp	r3, #0
 800e748:	d0c6      	beq.n	800e6d8 <_svfiprintf_r+0x130>
 800e74a:	9105      	str	r1, [sp, #20]
 800e74c:	e7c4      	b.n	800e6d8 <_svfiprintf_r+0x130>
 800e74e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e752:	4604      	mov	r4, r0
 800e754:	2301      	movs	r3, #1
 800e756:	e7f0      	b.n	800e73a <_svfiprintf_r+0x192>
 800e758:	ab03      	add	r3, sp, #12
 800e75a:	9300      	str	r3, [sp, #0]
 800e75c:	462a      	mov	r2, r5
 800e75e:	4b0e      	ldr	r3, [pc, #56]	@ (800e798 <_svfiprintf_r+0x1f0>)
 800e760:	a904      	add	r1, sp, #16
 800e762:	4638      	mov	r0, r7
 800e764:	f7fc fd90 	bl	800b288 <_printf_float>
 800e768:	1c42      	adds	r2, r0, #1
 800e76a:	4606      	mov	r6, r0
 800e76c:	d1d6      	bne.n	800e71c <_svfiprintf_r+0x174>
 800e76e:	89ab      	ldrh	r3, [r5, #12]
 800e770:	065b      	lsls	r3, r3, #25
 800e772:	f53f af2d 	bmi.w	800e5d0 <_svfiprintf_r+0x28>
 800e776:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e778:	e72c      	b.n	800e5d4 <_svfiprintf_r+0x2c>
 800e77a:	ab03      	add	r3, sp, #12
 800e77c:	9300      	str	r3, [sp, #0]
 800e77e:	462a      	mov	r2, r5
 800e780:	4b05      	ldr	r3, [pc, #20]	@ (800e798 <_svfiprintf_r+0x1f0>)
 800e782:	a904      	add	r1, sp, #16
 800e784:	4638      	mov	r0, r7
 800e786:	f7fd f807 	bl	800b798 <_printf_i>
 800e78a:	e7ed      	b.n	800e768 <_svfiprintf_r+0x1c0>
 800e78c:	0800ff09 	.word	0x0800ff09
 800e790:	0800ff13 	.word	0x0800ff13
 800e794:	0800b289 	.word	0x0800b289
 800e798:	0800e4f1 	.word	0x0800e4f1
 800e79c:	0800ff0f 	.word	0x0800ff0f

0800e7a0 <__sflush_r>:
 800e7a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a8:	0716      	lsls	r6, r2, #28
 800e7aa:	4605      	mov	r5, r0
 800e7ac:	460c      	mov	r4, r1
 800e7ae:	d454      	bmi.n	800e85a <__sflush_r+0xba>
 800e7b0:	684b      	ldr	r3, [r1, #4]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	dc02      	bgt.n	800e7bc <__sflush_r+0x1c>
 800e7b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	dd48      	ble.n	800e84e <__sflush_r+0xae>
 800e7bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e7be:	2e00      	cmp	r6, #0
 800e7c0:	d045      	beq.n	800e84e <__sflush_r+0xae>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e7c8:	682f      	ldr	r7, [r5, #0]
 800e7ca:	6a21      	ldr	r1, [r4, #32]
 800e7cc:	602b      	str	r3, [r5, #0]
 800e7ce:	d030      	beq.n	800e832 <__sflush_r+0x92>
 800e7d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e7d2:	89a3      	ldrh	r3, [r4, #12]
 800e7d4:	0759      	lsls	r1, r3, #29
 800e7d6:	d505      	bpl.n	800e7e4 <__sflush_r+0x44>
 800e7d8:	6863      	ldr	r3, [r4, #4]
 800e7da:	1ad2      	subs	r2, r2, r3
 800e7dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e7de:	b10b      	cbz	r3, 800e7e4 <__sflush_r+0x44>
 800e7e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e7e2:	1ad2      	subs	r2, r2, r3
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e7e8:	6a21      	ldr	r1, [r4, #32]
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	47b0      	blx	r6
 800e7ee:	1c43      	adds	r3, r0, #1
 800e7f0:	89a3      	ldrh	r3, [r4, #12]
 800e7f2:	d106      	bne.n	800e802 <__sflush_r+0x62>
 800e7f4:	6829      	ldr	r1, [r5, #0]
 800e7f6:	291d      	cmp	r1, #29
 800e7f8:	d82b      	bhi.n	800e852 <__sflush_r+0xb2>
 800e7fa:	4a2a      	ldr	r2, [pc, #168]	@ (800e8a4 <__sflush_r+0x104>)
 800e7fc:	410a      	asrs	r2, r1
 800e7fe:	07d6      	lsls	r6, r2, #31
 800e800:	d427      	bmi.n	800e852 <__sflush_r+0xb2>
 800e802:	2200      	movs	r2, #0
 800e804:	6062      	str	r2, [r4, #4]
 800e806:	04d9      	lsls	r1, r3, #19
 800e808:	6922      	ldr	r2, [r4, #16]
 800e80a:	6022      	str	r2, [r4, #0]
 800e80c:	d504      	bpl.n	800e818 <__sflush_r+0x78>
 800e80e:	1c42      	adds	r2, r0, #1
 800e810:	d101      	bne.n	800e816 <__sflush_r+0x76>
 800e812:	682b      	ldr	r3, [r5, #0]
 800e814:	b903      	cbnz	r3, 800e818 <__sflush_r+0x78>
 800e816:	6560      	str	r0, [r4, #84]	@ 0x54
 800e818:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e81a:	602f      	str	r7, [r5, #0]
 800e81c:	b1b9      	cbz	r1, 800e84e <__sflush_r+0xae>
 800e81e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e822:	4299      	cmp	r1, r3
 800e824:	d002      	beq.n	800e82c <__sflush_r+0x8c>
 800e826:	4628      	mov	r0, r5
 800e828:	f7fe fa80 	bl	800cd2c <_free_r>
 800e82c:	2300      	movs	r3, #0
 800e82e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e830:	e00d      	b.n	800e84e <__sflush_r+0xae>
 800e832:	2301      	movs	r3, #1
 800e834:	4628      	mov	r0, r5
 800e836:	47b0      	blx	r6
 800e838:	4602      	mov	r2, r0
 800e83a:	1c50      	adds	r0, r2, #1
 800e83c:	d1c9      	bne.n	800e7d2 <__sflush_r+0x32>
 800e83e:	682b      	ldr	r3, [r5, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d0c6      	beq.n	800e7d2 <__sflush_r+0x32>
 800e844:	2b1d      	cmp	r3, #29
 800e846:	d001      	beq.n	800e84c <__sflush_r+0xac>
 800e848:	2b16      	cmp	r3, #22
 800e84a:	d11e      	bne.n	800e88a <__sflush_r+0xea>
 800e84c:	602f      	str	r7, [r5, #0]
 800e84e:	2000      	movs	r0, #0
 800e850:	e022      	b.n	800e898 <__sflush_r+0xf8>
 800e852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e856:	b21b      	sxth	r3, r3
 800e858:	e01b      	b.n	800e892 <__sflush_r+0xf2>
 800e85a:	690f      	ldr	r7, [r1, #16]
 800e85c:	2f00      	cmp	r7, #0
 800e85e:	d0f6      	beq.n	800e84e <__sflush_r+0xae>
 800e860:	0793      	lsls	r3, r2, #30
 800e862:	680e      	ldr	r6, [r1, #0]
 800e864:	bf08      	it	eq
 800e866:	694b      	ldreq	r3, [r1, #20]
 800e868:	600f      	str	r7, [r1, #0]
 800e86a:	bf18      	it	ne
 800e86c:	2300      	movne	r3, #0
 800e86e:	eba6 0807 	sub.w	r8, r6, r7
 800e872:	608b      	str	r3, [r1, #8]
 800e874:	f1b8 0f00 	cmp.w	r8, #0
 800e878:	dde9      	ble.n	800e84e <__sflush_r+0xae>
 800e87a:	6a21      	ldr	r1, [r4, #32]
 800e87c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e87e:	4643      	mov	r3, r8
 800e880:	463a      	mov	r2, r7
 800e882:	4628      	mov	r0, r5
 800e884:	47b0      	blx	r6
 800e886:	2800      	cmp	r0, #0
 800e888:	dc08      	bgt.n	800e89c <__sflush_r+0xfc>
 800e88a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e88e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e892:	81a3      	strh	r3, [r4, #12]
 800e894:	f04f 30ff 	mov.w	r0, #4294967295
 800e898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e89c:	4407      	add	r7, r0
 800e89e:	eba8 0800 	sub.w	r8, r8, r0
 800e8a2:	e7e7      	b.n	800e874 <__sflush_r+0xd4>
 800e8a4:	dfbffffe 	.word	0xdfbffffe

0800e8a8 <_fflush_r>:
 800e8a8:	b538      	push	{r3, r4, r5, lr}
 800e8aa:	690b      	ldr	r3, [r1, #16]
 800e8ac:	4605      	mov	r5, r0
 800e8ae:	460c      	mov	r4, r1
 800e8b0:	b913      	cbnz	r3, 800e8b8 <_fflush_r+0x10>
 800e8b2:	2500      	movs	r5, #0
 800e8b4:	4628      	mov	r0, r5
 800e8b6:	bd38      	pop	{r3, r4, r5, pc}
 800e8b8:	b118      	cbz	r0, 800e8c2 <_fflush_r+0x1a>
 800e8ba:	6a03      	ldr	r3, [r0, #32]
 800e8bc:	b90b      	cbnz	r3, 800e8c2 <_fflush_r+0x1a>
 800e8be:	f7fd fb23 	bl	800bf08 <__sinit>
 800e8c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d0f3      	beq.n	800e8b2 <_fflush_r+0xa>
 800e8ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e8cc:	07d0      	lsls	r0, r2, #31
 800e8ce:	d404      	bmi.n	800e8da <_fflush_r+0x32>
 800e8d0:	0599      	lsls	r1, r3, #22
 800e8d2:	d402      	bmi.n	800e8da <_fflush_r+0x32>
 800e8d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e8d6:	f7fd fc40 	bl	800c15a <__retarget_lock_acquire_recursive>
 800e8da:	4628      	mov	r0, r5
 800e8dc:	4621      	mov	r1, r4
 800e8de:	f7ff ff5f 	bl	800e7a0 <__sflush_r>
 800e8e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e8e4:	07da      	lsls	r2, r3, #31
 800e8e6:	4605      	mov	r5, r0
 800e8e8:	d4e4      	bmi.n	800e8b4 <_fflush_r+0xc>
 800e8ea:	89a3      	ldrh	r3, [r4, #12]
 800e8ec:	059b      	lsls	r3, r3, #22
 800e8ee:	d4e1      	bmi.n	800e8b4 <_fflush_r+0xc>
 800e8f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e8f2:	f7fd fc33 	bl	800c15c <__retarget_lock_release_recursive>
 800e8f6:	e7dd      	b.n	800e8b4 <_fflush_r+0xc>

0800e8f8 <memmove>:
 800e8f8:	4288      	cmp	r0, r1
 800e8fa:	b510      	push	{r4, lr}
 800e8fc:	eb01 0402 	add.w	r4, r1, r2
 800e900:	d902      	bls.n	800e908 <memmove+0x10>
 800e902:	4284      	cmp	r4, r0
 800e904:	4623      	mov	r3, r4
 800e906:	d807      	bhi.n	800e918 <memmove+0x20>
 800e908:	1e43      	subs	r3, r0, #1
 800e90a:	42a1      	cmp	r1, r4
 800e90c:	d008      	beq.n	800e920 <memmove+0x28>
 800e90e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e912:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e916:	e7f8      	b.n	800e90a <memmove+0x12>
 800e918:	4402      	add	r2, r0
 800e91a:	4601      	mov	r1, r0
 800e91c:	428a      	cmp	r2, r1
 800e91e:	d100      	bne.n	800e922 <memmove+0x2a>
 800e920:	bd10      	pop	{r4, pc}
 800e922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e92a:	e7f7      	b.n	800e91c <memmove+0x24>

0800e92c <strncmp>:
 800e92c:	b510      	push	{r4, lr}
 800e92e:	b16a      	cbz	r2, 800e94c <strncmp+0x20>
 800e930:	3901      	subs	r1, #1
 800e932:	1884      	adds	r4, r0, r2
 800e934:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e938:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d103      	bne.n	800e948 <strncmp+0x1c>
 800e940:	42a0      	cmp	r0, r4
 800e942:	d001      	beq.n	800e948 <strncmp+0x1c>
 800e944:	2a00      	cmp	r2, #0
 800e946:	d1f5      	bne.n	800e934 <strncmp+0x8>
 800e948:	1ad0      	subs	r0, r2, r3
 800e94a:	bd10      	pop	{r4, pc}
 800e94c:	4610      	mov	r0, r2
 800e94e:	e7fc      	b.n	800e94a <strncmp+0x1e>

0800e950 <_sbrk_r>:
 800e950:	b538      	push	{r3, r4, r5, lr}
 800e952:	4d06      	ldr	r5, [pc, #24]	@ (800e96c <_sbrk_r+0x1c>)
 800e954:	2300      	movs	r3, #0
 800e956:	4604      	mov	r4, r0
 800e958:	4608      	mov	r0, r1
 800e95a:	602b      	str	r3, [r5, #0]
 800e95c:	f7f3 fc04 	bl	8002168 <_sbrk>
 800e960:	1c43      	adds	r3, r0, #1
 800e962:	d102      	bne.n	800e96a <_sbrk_r+0x1a>
 800e964:	682b      	ldr	r3, [r5, #0]
 800e966:	b103      	cbz	r3, 800e96a <_sbrk_r+0x1a>
 800e968:	6023      	str	r3, [r4, #0]
 800e96a:	bd38      	pop	{r3, r4, r5, pc}
 800e96c:	20002e80 	.word	0x20002e80

0800e970 <memcpy>:
 800e970:	440a      	add	r2, r1
 800e972:	4291      	cmp	r1, r2
 800e974:	f100 33ff 	add.w	r3, r0, #4294967295
 800e978:	d100      	bne.n	800e97c <memcpy+0xc>
 800e97a:	4770      	bx	lr
 800e97c:	b510      	push	{r4, lr}
 800e97e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e982:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e986:	4291      	cmp	r1, r2
 800e988:	d1f9      	bne.n	800e97e <memcpy+0xe>
 800e98a:	bd10      	pop	{r4, pc}
 800e98c:	0000      	movs	r0, r0
	...

0800e990 <nan>:
 800e990:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e998 <nan+0x8>
 800e994:	4770      	bx	lr
 800e996:	bf00      	nop
 800e998:	00000000 	.word	0x00000000
 800e99c:	7ff80000 	.word	0x7ff80000

0800e9a0 <__assert_func>:
 800e9a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9a2:	4614      	mov	r4, r2
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	4b09      	ldr	r3, [pc, #36]	@ (800e9cc <__assert_func+0x2c>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	4605      	mov	r5, r0
 800e9ac:	68d8      	ldr	r0, [r3, #12]
 800e9ae:	b954      	cbnz	r4, 800e9c6 <__assert_func+0x26>
 800e9b0:	4b07      	ldr	r3, [pc, #28]	@ (800e9d0 <__assert_func+0x30>)
 800e9b2:	461c      	mov	r4, r3
 800e9b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e9b8:	9100      	str	r1, [sp, #0]
 800e9ba:	462b      	mov	r3, r5
 800e9bc:	4905      	ldr	r1, [pc, #20]	@ (800e9d4 <__assert_func+0x34>)
 800e9be:	f000 fba7 	bl	800f110 <fiprintf>
 800e9c2:	f000 fbb7 	bl	800f134 <abort>
 800e9c6:	4b04      	ldr	r3, [pc, #16]	@ (800e9d8 <__assert_func+0x38>)
 800e9c8:	e7f4      	b.n	800e9b4 <__assert_func+0x14>
 800e9ca:	bf00      	nop
 800e9cc:	20000030 	.word	0x20000030
 800e9d0:	0800ff5d 	.word	0x0800ff5d
 800e9d4:	0800ff2f 	.word	0x0800ff2f
 800e9d8:	0800ff22 	.word	0x0800ff22

0800e9dc <_calloc_r>:
 800e9dc:	b570      	push	{r4, r5, r6, lr}
 800e9de:	fba1 5402 	umull	r5, r4, r1, r2
 800e9e2:	b93c      	cbnz	r4, 800e9f4 <_calloc_r+0x18>
 800e9e4:	4629      	mov	r1, r5
 800e9e6:	f7fe fa15 	bl	800ce14 <_malloc_r>
 800e9ea:	4606      	mov	r6, r0
 800e9ec:	b928      	cbnz	r0, 800e9fa <_calloc_r+0x1e>
 800e9ee:	2600      	movs	r6, #0
 800e9f0:	4630      	mov	r0, r6
 800e9f2:	bd70      	pop	{r4, r5, r6, pc}
 800e9f4:	220c      	movs	r2, #12
 800e9f6:	6002      	str	r2, [r0, #0]
 800e9f8:	e7f9      	b.n	800e9ee <_calloc_r+0x12>
 800e9fa:	462a      	mov	r2, r5
 800e9fc:	4621      	mov	r1, r4
 800e9fe:	f7fd fb1c 	bl	800c03a <memset>
 800ea02:	e7f5      	b.n	800e9f0 <_calloc_r+0x14>

0800ea04 <rshift>:
 800ea04:	6903      	ldr	r3, [r0, #16]
 800ea06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ea0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ea12:	f100 0414 	add.w	r4, r0, #20
 800ea16:	dd45      	ble.n	800eaa4 <rshift+0xa0>
 800ea18:	f011 011f 	ands.w	r1, r1, #31
 800ea1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ea20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ea24:	d10c      	bne.n	800ea40 <rshift+0x3c>
 800ea26:	f100 0710 	add.w	r7, r0, #16
 800ea2a:	4629      	mov	r1, r5
 800ea2c:	42b1      	cmp	r1, r6
 800ea2e:	d334      	bcc.n	800ea9a <rshift+0x96>
 800ea30:	1a9b      	subs	r3, r3, r2
 800ea32:	009b      	lsls	r3, r3, #2
 800ea34:	1eea      	subs	r2, r5, #3
 800ea36:	4296      	cmp	r6, r2
 800ea38:	bf38      	it	cc
 800ea3a:	2300      	movcc	r3, #0
 800ea3c:	4423      	add	r3, r4
 800ea3e:	e015      	b.n	800ea6c <rshift+0x68>
 800ea40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ea44:	f1c1 0820 	rsb	r8, r1, #32
 800ea48:	40cf      	lsrs	r7, r1
 800ea4a:	f105 0e04 	add.w	lr, r5, #4
 800ea4e:	46a1      	mov	r9, r4
 800ea50:	4576      	cmp	r6, lr
 800ea52:	46f4      	mov	ip, lr
 800ea54:	d815      	bhi.n	800ea82 <rshift+0x7e>
 800ea56:	1a9a      	subs	r2, r3, r2
 800ea58:	0092      	lsls	r2, r2, #2
 800ea5a:	3a04      	subs	r2, #4
 800ea5c:	3501      	adds	r5, #1
 800ea5e:	42ae      	cmp	r6, r5
 800ea60:	bf38      	it	cc
 800ea62:	2200      	movcc	r2, #0
 800ea64:	18a3      	adds	r3, r4, r2
 800ea66:	50a7      	str	r7, [r4, r2]
 800ea68:	b107      	cbz	r7, 800ea6c <rshift+0x68>
 800ea6a:	3304      	adds	r3, #4
 800ea6c:	1b1a      	subs	r2, r3, r4
 800ea6e:	42a3      	cmp	r3, r4
 800ea70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ea74:	bf08      	it	eq
 800ea76:	2300      	moveq	r3, #0
 800ea78:	6102      	str	r2, [r0, #16]
 800ea7a:	bf08      	it	eq
 800ea7c:	6143      	streq	r3, [r0, #20]
 800ea7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea82:	f8dc c000 	ldr.w	ip, [ip]
 800ea86:	fa0c fc08 	lsl.w	ip, ip, r8
 800ea8a:	ea4c 0707 	orr.w	r7, ip, r7
 800ea8e:	f849 7b04 	str.w	r7, [r9], #4
 800ea92:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea96:	40cf      	lsrs	r7, r1
 800ea98:	e7da      	b.n	800ea50 <rshift+0x4c>
 800ea9a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ea9e:	f847 cf04 	str.w	ip, [r7, #4]!
 800eaa2:	e7c3      	b.n	800ea2c <rshift+0x28>
 800eaa4:	4623      	mov	r3, r4
 800eaa6:	e7e1      	b.n	800ea6c <rshift+0x68>

0800eaa8 <__hexdig_fun>:
 800eaa8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800eaac:	2b09      	cmp	r3, #9
 800eaae:	d802      	bhi.n	800eab6 <__hexdig_fun+0xe>
 800eab0:	3820      	subs	r0, #32
 800eab2:	b2c0      	uxtb	r0, r0
 800eab4:	4770      	bx	lr
 800eab6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800eaba:	2b05      	cmp	r3, #5
 800eabc:	d801      	bhi.n	800eac2 <__hexdig_fun+0x1a>
 800eabe:	3847      	subs	r0, #71	@ 0x47
 800eac0:	e7f7      	b.n	800eab2 <__hexdig_fun+0xa>
 800eac2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800eac6:	2b05      	cmp	r3, #5
 800eac8:	d801      	bhi.n	800eace <__hexdig_fun+0x26>
 800eaca:	3827      	subs	r0, #39	@ 0x27
 800eacc:	e7f1      	b.n	800eab2 <__hexdig_fun+0xa>
 800eace:	2000      	movs	r0, #0
 800ead0:	4770      	bx	lr
	...

0800ead4 <__gethex>:
 800ead4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ead8:	b085      	sub	sp, #20
 800eada:	468a      	mov	sl, r1
 800eadc:	9302      	str	r3, [sp, #8]
 800eade:	680b      	ldr	r3, [r1, #0]
 800eae0:	9001      	str	r0, [sp, #4]
 800eae2:	4690      	mov	r8, r2
 800eae4:	1c9c      	adds	r4, r3, #2
 800eae6:	46a1      	mov	r9, r4
 800eae8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800eaec:	2830      	cmp	r0, #48	@ 0x30
 800eaee:	d0fa      	beq.n	800eae6 <__gethex+0x12>
 800eaf0:	eba9 0303 	sub.w	r3, r9, r3
 800eaf4:	f1a3 0b02 	sub.w	fp, r3, #2
 800eaf8:	f7ff ffd6 	bl	800eaa8 <__hexdig_fun>
 800eafc:	4605      	mov	r5, r0
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d168      	bne.n	800ebd4 <__gethex+0x100>
 800eb02:	49a0      	ldr	r1, [pc, #640]	@ (800ed84 <__gethex+0x2b0>)
 800eb04:	2201      	movs	r2, #1
 800eb06:	4648      	mov	r0, r9
 800eb08:	f7ff ff10 	bl	800e92c <strncmp>
 800eb0c:	4607      	mov	r7, r0
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	d167      	bne.n	800ebe2 <__gethex+0x10e>
 800eb12:	f899 0001 	ldrb.w	r0, [r9, #1]
 800eb16:	4626      	mov	r6, r4
 800eb18:	f7ff ffc6 	bl	800eaa8 <__hexdig_fun>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d062      	beq.n	800ebe6 <__gethex+0x112>
 800eb20:	4623      	mov	r3, r4
 800eb22:	7818      	ldrb	r0, [r3, #0]
 800eb24:	2830      	cmp	r0, #48	@ 0x30
 800eb26:	4699      	mov	r9, r3
 800eb28:	f103 0301 	add.w	r3, r3, #1
 800eb2c:	d0f9      	beq.n	800eb22 <__gethex+0x4e>
 800eb2e:	f7ff ffbb 	bl	800eaa8 <__hexdig_fun>
 800eb32:	fab0 f580 	clz	r5, r0
 800eb36:	096d      	lsrs	r5, r5, #5
 800eb38:	f04f 0b01 	mov.w	fp, #1
 800eb3c:	464a      	mov	r2, r9
 800eb3e:	4616      	mov	r6, r2
 800eb40:	3201      	adds	r2, #1
 800eb42:	7830      	ldrb	r0, [r6, #0]
 800eb44:	f7ff ffb0 	bl	800eaa8 <__hexdig_fun>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d1f8      	bne.n	800eb3e <__gethex+0x6a>
 800eb4c:	498d      	ldr	r1, [pc, #564]	@ (800ed84 <__gethex+0x2b0>)
 800eb4e:	2201      	movs	r2, #1
 800eb50:	4630      	mov	r0, r6
 800eb52:	f7ff feeb 	bl	800e92c <strncmp>
 800eb56:	2800      	cmp	r0, #0
 800eb58:	d13f      	bne.n	800ebda <__gethex+0x106>
 800eb5a:	b944      	cbnz	r4, 800eb6e <__gethex+0x9a>
 800eb5c:	1c74      	adds	r4, r6, #1
 800eb5e:	4622      	mov	r2, r4
 800eb60:	4616      	mov	r6, r2
 800eb62:	3201      	adds	r2, #1
 800eb64:	7830      	ldrb	r0, [r6, #0]
 800eb66:	f7ff ff9f 	bl	800eaa8 <__hexdig_fun>
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	d1f8      	bne.n	800eb60 <__gethex+0x8c>
 800eb6e:	1ba4      	subs	r4, r4, r6
 800eb70:	00a7      	lsls	r7, r4, #2
 800eb72:	7833      	ldrb	r3, [r6, #0]
 800eb74:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eb78:	2b50      	cmp	r3, #80	@ 0x50
 800eb7a:	d13e      	bne.n	800ebfa <__gethex+0x126>
 800eb7c:	7873      	ldrb	r3, [r6, #1]
 800eb7e:	2b2b      	cmp	r3, #43	@ 0x2b
 800eb80:	d033      	beq.n	800ebea <__gethex+0x116>
 800eb82:	2b2d      	cmp	r3, #45	@ 0x2d
 800eb84:	d034      	beq.n	800ebf0 <__gethex+0x11c>
 800eb86:	1c71      	adds	r1, r6, #1
 800eb88:	2400      	movs	r4, #0
 800eb8a:	7808      	ldrb	r0, [r1, #0]
 800eb8c:	f7ff ff8c 	bl	800eaa8 <__hexdig_fun>
 800eb90:	1e43      	subs	r3, r0, #1
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	2b18      	cmp	r3, #24
 800eb96:	d830      	bhi.n	800ebfa <__gethex+0x126>
 800eb98:	f1a0 0210 	sub.w	r2, r0, #16
 800eb9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eba0:	f7ff ff82 	bl	800eaa8 <__hexdig_fun>
 800eba4:	f100 3cff 	add.w	ip, r0, #4294967295
 800eba8:	fa5f fc8c 	uxtb.w	ip, ip
 800ebac:	f1bc 0f18 	cmp.w	ip, #24
 800ebb0:	f04f 030a 	mov.w	r3, #10
 800ebb4:	d91e      	bls.n	800ebf4 <__gethex+0x120>
 800ebb6:	b104      	cbz	r4, 800ebba <__gethex+0xe6>
 800ebb8:	4252      	negs	r2, r2
 800ebba:	4417      	add	r7, r2
 800ebbc:	f8ca 1000 	str.w	r1, [sl]
 800ebc0:	b1ed      	cbz	r5, 800ebfe <__gethex+0x12a>
 800ebc2:	f1bb 0f00 	cmp.w	fp, #0
 800ebc6:	bf0c      	ite	eq
 800ebc8:	2506      	moveq	r5, #6
 800ebca:	2500      	movne	r5, #0
 800ebcc:	4628      	mov	r0, r5
 800ebce:	b005      	add	sp, #20
 800ebd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebd4:	2500      	movs	r5, #0
 800ebd6:	462c      	mov	r4, r5
 800ebd8:	e7b0      	b.n	800eb3c <__gethex+0x68>
 800ebda:	2c00      	cmp	r4, #0
 800ebdc:	d1c7      	bne.n	800eb6e <__gethex+0x9a>
 800ebde:	4627      	mov	r7, r4
 800ebe0:	e7c7      	b.n	800eb72 <__gethex+0x9e>
 800ebe2:	464e      	mov	r6, r9
 800ebe4:	462f      	mov	r7, r5
 800ebe6:	2501      	movs	r5, #1
 800ebe8:	e7c3      	b.n	800eb72 <__gethex+0x9e>
 800ebea:	2400      	movs	r4, #0
 800ebec:	1cb1      	adds	r1, r6, #2
 800ebee:	e7cc      	b.n	800eb8a <__gethex+0xb6>
 800ebf0:	2401      	movs	r4, #1
 800ebf2:	e7fb      	b.n	800ebec <__gethex+0x118>
 800ebf4:	fb03 0002 	mla	r0, r3, r2, r0
 800ebf8:	e7ce      	b.n	800eb98 <__gethex+0xc4>
 800ebfa:	4631      	mov	r1, r6
 800ebfc:	e7de      	b.n	800ebbc <__gethex+0xe8>
 800ebfe:	eba6 0309 	sub.w	r3, r6, r9
 800ec02:	3b01      	subs	r3, #1
 800ec04:	4629      	mov	r1, r5
 800ec06:	2b07      	cmp	r3, #7
 800ec08:	dc0a      	bgt.n	800ec20 <__gethex+0x14c>
 800ec0a:	9801      	ldr	r0, [sp, #4]
 800ec0c:	f7fe f98e 	bl	800cf2c <_Balloc>
 800ec10:	4604      	mov	r4, r0
 800ec12:	b940      	cbnz	r0, 800ec26 <__gethex+0x152>
 800ec14:	4b5c      	ldr	r3, [pc, #368]	@ (800ed88 <__gethex+0x2b4>)
 800ec16:	4602      	mov	r2, r0
 800ec18:	21e4      	movs	r1, #228	@ 0xe4
 800ec1a:	485c      	ldr	r0, [pc, #368]	@ (800ed8c <__gethex+0x2b8>)
 800ec1c:	f7ff fec0 	bl	800e9a0 <__assert_func>
 800ec20:	3101      	adds	r1, #1
 800ec22:	105b      	asrs	r3, r3, #1
 800ec24:	e7ef      	b.n	800ec06 <__gethex+0x132>
 800ec26:	f100 0a14 	add.w	sl, r0, #20
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	4655      	mov	r5, sl
 800ec2e:	469b      	mov	fp, r3
 800ec30:	45b1      	cmp	r9, r6
 800ec32:	d337      	bcc.n	800eca4 <__gethex+0x1d0>
 800ec34:	f845 bb04 	str.w	fp, [r5], #4
 800ec38:	eba5 050a 	sub.w	r5, r5, sl
 800ec3c:	10ad      	asrs	r5, r5, #2
 800ec3e:	6125      	str	r5, [r4, #16]
 800ec40:	4658      	mov	r0, fp
 800ec42:	f7fe fa65 	bl	800d110 <__hi0bits>
 800ec46:	016d      	lsls	r5, r5, #5
 800ec48:	f8d8 6000 	ldr.w	r6, [r8]
 800ec4c:	1a2d      	subs	r5, r5, r0
 800ec4e:	42b5      	cmp	r5, r6
 800ec50:	dd54      	ble.n	800ecfc <__gethex+0x228>
 800ec52:	1bad      	subs	r5, r5, r6
 800ec54:	4629      	mov	r1, r5
 800ec56:	4620      	mov	r0, r4
 800ec58:	f7fe fdf6 	bl	800d848 <__any_on>
 800ec5c:	4681      	mov	r9, r0
 800ec5e:	b178      	cbz	r0, 800ec80 <__gethex+0x1ac>
 800ec60:	1e6b      	subs	r3, r5, #1
 800ec62:	1159      	asrs	r1, r3, #5
 800ec64:	f003 021f 	and.w	r2, r3, #31
 800ec68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ec6c:	f04f 0901 	mov.w	r9, #1
 800ec70:	fa09 f202 	lsl.w	r2, r9, r2
 800ec74:	420a      	tst	r2, r1
 800ec76:	d003      	beq.n	800ec80 <__gethex+0x1ac>
 800ec78:	454b      	cmp	r3, r9
 800ec7a:	dc36      	bgt.n	800ecea <__gethex+0x216>
 800ec7c:	f04f 0902 	mov.w	r9, #2
 800ec80:	4629      	mov	r1, r5
 800ec82:	4620      	mov	r0, r4
 800ec84:	f7ff febe 	bl	800ea04 <rshift>
 800ec88:	442f      	add	r7, r5
 800ec8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec8e:	42bb      	cmp	r3, r7
 800ec90:	da42      	bge.n	800ed18 <__gethex+0x244>
 800ec92:	9801      	ldr	r0, [sp, #4]
 800ec94:	4621      	mov	r1, r4
 800ec96:	f7fe f989 	bl	800cfac <_Bfree>
 800ec9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	6013      	str	r3, [r2, #0]
 800eca0:	25a3      	movs	r5, #163	@ 0xa3
 800eca2:	e793      	b.n	800ebcc <__gethex+0xf8>
 800eca4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800eca8:	2a2e      	cmp	r2, #46	@ 0x2e
 800ecaa:	d012      	beq.n	800ecd2 <__gethex+0x1fe>
 800ecac:	2b20      	cmp	r3, #32
 800ecae:	d104      	bne.n	800ecba <__gethex+0x1e6>
 800ecb0:	f845 bb04 	str.w	fp, [r5], #4
 800ecb4:	f04f 0b00 	mov.w	fp, #0
 800ecb8:	465b      	mov	r3, fp
 800ecba:	7830      	ldrb	r0, [r6, #0]
 800ecbc:	9303      	str	r3, [sp, #12]
 800ecbe:	f7ff fef3 	bl	800eaa8 <__hexdig_fun>
 800ecc2:	9b03      	ldr	r3, [sp, #12]
 800ecc4:	f000 000f 	and.w	r0, r0, #15
 800ecc8:	4098      	lsls	r0, r3
 800ecca:	ea4b 0b00 	orr.w	fp, fp, r0
 800ecce:	3304      	adds	r3, #4
 800ecd0:	e7ae      	b.n	800ec30 <__gethex+0x15c>
 800ecd2:	45b1      	cmp	r9, r6
 800ecd4:	d8ea      	bhi.n	800ecac <__gethex+0x1d8>
 800ecd6:	492b      	ldr	r1, [pc, #172]	@ (800ed84 <__gethex+0x2b0>)
 800ecd8:	9303      	str	r3, [sp, #12]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	4630      	mov	r0, r6
 800ecde:	f7ff fe25 	bl	800e92c <strncmp>
 800ece2:	9b03      	ldr	r3, [sp, #12]
 800ece4:	2800      	cmp	r0, #0
 800ece6:	d1e1      	bne.n	800ecac <__gethex+0x1d8>
 800ece8:	e7a2      	b.n	800ec30 <__gethex+0x15c>
 800ecea:	1ea9      	subs	r1, r5, #2
 800ecec:	4620      	mov	r0, r4
 800ecee:	f7fe fdab 	bl	800d848 <__any_on>
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	d0c2      	beq.n	800ec7c <__gethex+0x1a8>
 800ecf6:	f04f 0903 	mov.w	r9, #3
 800ecfa:	e7c1      	b.n	800ec80 <__gethex+0x1ac>
 800ecfc:	da09      	bge.n	800ed12 <__gethex+0x23e>
 800ecfe:	1b75      	subs	r5, r6, r5
 800ed00:	4621      	mov	r1, r4
 800ed02:	9801      	ldr	r0, [sp, #4]
 800ed04:	462a      	mov	r2, r5
 800ed06:	f7fe fb69 	bl	800d3dc <__lshift>
 800ed0a:	1b7f      	subs	r7, r7, r5
 800ed0c:	4604      	mov	r4, r0
 800ed0e:	f100 0a14 	add.w	sl, r0, #20
 800ed12:	f04f 0900 	mov.w	r9, #0
 800ed16:	e7b8      	b.n	800ec8a <__gethex+0x1b6>
 800ed18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ed1c:	42bd      	cmp	r5, r7
 800ed1e:	dd6f      	ble.n	800ee00 <__gethex+0x32c>
 800ed20:	1bed      	subs	r5, r5, r7
 800ed22:	42ae      	cmp	r6, r5
 800ed24:	dc34      	bgt.n	800ed90 <__gethex+0x2bc>
 800ed26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed2a:	2b02      	cmp	r3, #2
 800ed2c:	d022      	beq.n	800ed74 <__gethex+0x2a0>
 800ed2e:	2b03      	cmp	r3, #3
 800ed30:	d024      	beq.n	800ed7c <__gethex+0x2a8>
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	d115      	bne.n	800ed62 <__gethex+0x28e>
 800ed36:	42ae      	cmp	r6, r5
 800ed38:	d113      	bne.n	800ed62 <__gethex+0x28e>
 800ed3a:	2e01      	cmp	r6, #1
 800ed3c:	d10b      	bne.n	800ed56 <__gethex+0x282>
 800ed3e:	9a02      	ldr	r2, [sp, #8]
 800ed40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ed44:	6013      	str	r3, [r2, #0]
 800ed46:	2301      	movs	r3, #1
 800ed48:	6123      	str	r3, [r4, #16]
 800ed4a:	f8ca 3000 	str.w	r3, [sl]
 800ed4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed50:	2562      	movs	r5, #98	@ 0x62
 800ed52:	601c      	str	r4, [r3, #0]
 800ed54:	e73a      	b.n	800ebcc <__gethex+0xf8>
 800ed56:	1e71      	subs	r1, r6, #1
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f7fe fd75 	bl	800d848 <__any_on>
 800ed5e:	2800      	cmp	r0, #0
 800ed60:	d1ed      	bne.n	800ed3e <__gethex+0x26a>
 800ed62:	9801      	ldr	r0, [sp, #4]
 800ed64:	4621      	mov	r1, r4
 800ed66:	f7fe f921 	bl	800cfac <_Bfree>
 800ed6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	6013      	str	r3, [r2, #0]
 800ed70:	2550      	movs	r5, #80	@ 0x50
 800ed72:	e72b      	b.n	800ebcc <__gethex+0xf8>
 800ed74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d1f3      	bne.n	800ed62 <__gethex+0x28e>
 800ed7a:	e7e0      	b.n	800ed3e <__gethex+0x26a>
 800ed7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d1dd      	bne.n	800ed3e <__gethex+0x26a>
 800ed82:	e7ee      	b.n	800ed62 <__gethex+0x28e>
 800ed84:	0800fdb0 	.word	0x0800fdb0
 800ed88:	0800fc45 	.word	0x0800fc45
 800ed8c:	0800ff5e 	.word	0x0800ff5e
 800ed90:	1e6f      	subs	r7, r5, #1
 800ed92:	f1b9 0f00 	cmp.w	r9, #0
 800ed96:	d130      	bne.n	800edfa <__gethex+0x326>
 800ed98:	b127      	cbz	r7, 800eda4 <__gethex+0x2d0>
 800ed9a:	4639      	mov	r1, r7
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	f7fe fd53 	bl	800d848 <__any_on>
 800eda2:	4681      	mov	r9, r0
 800eda4:	117a      	asrs	r2, r7, #5
 800eda6:	2301      	movs	r3, #1
 800eda8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800edac:	f007 071f 	and.w	r7, r7, #31
 800edb0:	40bb      	lsls	r3, r7
 800edb2:	4213      	tst	r3, r2
 800edb4:	4629      	mov	r1, r5
 800edb6:	4620      	mov	r0, r4
 800edb8:	bf18      	it	ne
 800edba:	f049 0902 	orrne.w	r9, r9, #2
 800edbe:	f7ff fe21 	bl	800ea04 <rshift>
 800edc2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800edc6:	1b76      	subs	r6, r6, r5
 800edc8:	2502      	movs	r5, #2
 800edca:	f1b9 0f00 	cmp.w	r9, #0
 800edce:	d047      	beq.n	800ee60 <__gethex+0x38c>
 800edd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800edd4:	2b02      	cmp	r3, #2
 800edd6:	d015      	beq.n	800ee04 <__gethex+0x330>
 800edd8:	2b03      	cmp	r3, #3
 800edda:	d017      	beq.n	800ee0c <__gethex+0x338>
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d109      	bne.n	800edf4 <__gethex+0x320>
 800ede0:	f019 0f02 	tst.w	r9, #2
 800ede4:	d006      	beq.n	800edf4 <__gethex+0x320>
 800ede6:	f8da 3000 	ldr.w	r3, [sl]
 800edea:	ea49 0903 	orr.w	r9, r9, r3
 800edee:	f019 0f01 	tst.w	r9, #1
 800edf2:	d10e      	bne.n	800ee12 <__gethex+0x33e>
 800edf4:	f045 0510 	orr.w	r5, r5, #16
 800edf8:	e032      	b.n	800ee60 <__gethex+0x38c>
 800edfa:	f04f 0901 	mov.w	r9, #1
 800edfe:	e7d1      	b.n	800eda4 <__gethex+0x2d0>
 800ee00:	2501      	movs	r5, #1
 800ee02:	e7e2      	b.n	800edca <__gethex+0x2f6>
 800ee04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee06:	f1c3 0301 	rsb	r3, r3, #1
 800ee0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d0f0      	beq.n	800edf4 <__gethex+0x320>
 800ee12:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ee16:	f104 0314 	add.w	r3, r4, #20
 800ee1a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ee1e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ee22:	f04f 0c00 	mov.w	ip, #0
 800ee26:	4618      	mov	r0, r3
 800ee28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee2c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ee30:	d01b      	beq.n	800ee6a <__gethex+0x396>
 800ee32:	3201      	adds	r2, #1
 800ee34:	6002      	str	r2, [r0, #0]
 800ee36:	2d02      	cmp	r5, #2
 800ee38:	f104 0314 	add.w	r3, r4, #20
 800ee3c:	d13c      	bne.n	800eeb8 <__gethex+0x3e4>
 800ee3e:	f8d8 2000 	ldr.w	r2, [r8]
 800ee42:	3a01      	subs	r2, #1
 800ee44:	42b2      	cmp	r2, r6
 800ee46:	d109      	bne.n	800ee5c <__gethex+0x388>
 800ee48:	1171      	asrs	r1, r6, #5
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee50:	f006 061f 	and.w	r6, r6, #31
 800ee54:	fa02 f606 	lsl.w	r6, r2, r6
 800ee58:	421e      	tst	r6, r3
 800ee5a:	d13a      	bne.n	800eed2 <__gethex+0x3fe>
 800ee5c:	f045 0520 	orr.w	r5, r5, #32
 800ee60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee62:	601c      	str	r4, [r3, #0]
 800ee64:	9b02      	ldr	r3, [sp, #8]
 800ee66:	601f      	str	r7, [r3, #0]
 800ee68:	e6b0      	b.n	800ebcc <__gethex+0xf8>
 800ee6a:	4299      	cmp	r1, r3
 800ee6c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ee70:	d8d9      	bhi.n	800ee26 <__gethex+0x352>
 800ee72:	68a3      	ldr	r3, [r4, #8]
 800ee74:	459b      	cmp	fp, r3
 800ee76:	db17      	blt.n	800eea8 <__gethex+0x3d4>
 800ee78:	6861      	ldr	r1, [r4, #4]
 800ee7a:	9801      	ldr	r0, [sp, #4]
 800ee7c:	3101      	adds	r1, #1
 800ee7e:	f7fe f855 	bl	800cf2c <_Balloc>
 800ee82:	4681      	mov	r9, r0
 800ee84:	b918      	cbnz	r0, 800ee8e <__gethex+0x3ba>
 800ee86:	4b1a      	ldr	r3, [pc, #104]	@ (800eef0 <__gethex+0x41c>)
 800ee88:	4602      	mov	r2, r0
 800ee8a:	2184      	movs	r1, #132	@ 0x84
 800ee8c:	e6c5      	b.n	800ec1a <__gethex+0x146>
 800ee8e:	6922      	ldr	r2, [r4, #16]
 800ee90:	3202      	adds	r2, #2
 800ee92:	f104 010c 	add.w	r1, r4, #12
 800ee96:	0092      	lsls	r2, r2, #2
 800ee98:	300c      	adds	r0, #12
 800ee9a:	f7ff fd69 	bl	800e970 <memcpy>
 800ee9e:	4621      	mov	r1, r4
 800eea0:	9801      	ldr	r0, [sp, #4]
 800eea2:	f7fe f883 	bl	800cfac <_Bfree>
 800eea6:	464c      	mov	r4, r9
 800eea8:	6923      	ldr	r3, [r4, #16]
 800eeaa:	1c5a      	adds	r2, r3, #1
 800eeac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eeb0:	6122      	str	r2, [r4, #16]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	615a      	str	r2, [r3, #20]
 800eeb6:	e7be      	b.n	800ee36 <__gethex+0x362>
 800eeb8:	6922      	ldr	r2, [r4, #16]
 800eeba:	455a      	cmp	r2, fp
 800eebc:	dd0b      	ble.n	800eed6 <__gethex+0x402>
 800eebe:	2101      	movs	r1, #1
 800eec0:	4620      	mov	r0, r4
 800eec2:	f7ff fd9f 	bl	800ea04 <rshift>
 800eec6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eeca:	3701      	adds	r7, #1
 800eecc:	42bb      	cmp	r3, r7
 800eece:	f6ff aee0 	blt.w	800ec92 <__gethex+0x1be>
 800eed2:	2501      	movs	r5, #1
 800eed4:	e7c2      	b.n	800ee5c <__gethex+0x388>
 800eed6:	f016 061f 	ands.w	r6, r6, #31
 800eeda:	d0fa      	beq.n	800eed2 <__gethex+0x3fe>
 800eedc:	4453      	add	r3, sl
 800eede:	f1c6 0620 	rsb	r6, r6, #32
 800eee2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eee6:	f7fe f913 	bl	800d110 <__hi0bits>
 800eeea:	42b0      	cmp	r0, r6
 800eeec:	dbe7      	blt.n	800eebe <__gethex+0x3ea>
 800eeee:	e7f0      	b.n	800eed2 <__gethex+0x3fe>
 800eef0:	0800fc45 	.word	0x0800fc45

0800eef4 <L_shift>:
 800eef4:	f1c2 0208 	rsb	r2, r2, #8
 800eef8:	0092      	lsls	r2, r2, #2
 800eefa:	b570      	push	{r4, r5, r6, lr}
 800eefc:	f1c2 0620 	rsb	r6, r2, #32
 800ef00:	6843      	ldr	r3, [r0, #4]
 800ef02:	6804      	ldr	r4, [r0, #0]
 800ef04:	fa03 f506 	lsl.w	r5, r3, r6
 800ef08:	432c      	orrs	r4, r5
 800ef0a:	40d3      	lsrs	r3, r2
 800ef0c:	6004      	str	r4, [r0, #0]
 800ef0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ef12:	4288      	cmp	r0, r1
 800ef14:	d3f4      	bcc.n	800ef00 <L_shift+0xc>
 800ef16:	bd70      	pop	{r4, r5, r6, pc}

0800ef18 <__match>:
 800ef18:	b530      	push	{r4, r5, lr}
 800ef1a:	6803      	ldr	r3, [r0, #0]
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef22:	b914      	cbnz	r4, 800ef2a <__match+0x12>
 800ef24:	6003      	str	r3, [r0, #0]
 800ef26:	2001      	movs	r0, #1
 800ef28:	bd30      	pop	{r4, r5, pc}
 800ef2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ef32:	2d19      	cmp	r5, #25
 800ef34:	bf98      	it	ls
 800ef36:	3220      	addls	r2, #32
 800ef38:	42a2      	cmp	r2, r4
 800ef3a:	d0f0      	beq.n	800ef1e <__match+0x6>
 800ef3c:	2000      	movs	r0, #0
 800ef3e:	e7f3      	b.n	800ef28 <__match+0x10>

0800ef40 <__hexnan>:
 800ef40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef44:	680b      	ldr	r3, [r1, #0]
 800ef46:	6801      	ldr	r1, [r0, #0]
 800ef48:	115e      	asrs	r6, r3, #5
 800ef4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ef4e:	f013 031f 	ands.w	r3, r3, #31
 800ef52:	b087      	sub	sp, #28
 800ef54:	bf18      	it	ne
 800ef56:	3604      	addne	r6, #4
 800ef58:	2500      	movs	r5, #0
 800ef5a:	1f37      	subs	r7, r6, #4
 800ef5c:	4682      	mov	sl, r0
 800ef5e:	4690      	mov	r8, r2
 800ef60:	9301      	str	r3, [sp, #4]
 800ef62:	f846 5c04 	str.w	r5, [r6, #-4]
 800ef66:	46b9      	mov	r9, r7
 800ef68:	463c      	mov	r4, r7
 800ef6a:	9502      	str	r5, [sp, #8]
 800ef6c:	46ab      	mov	fp, r5
 800ef6e:	784a      	ldrb	r2, [r1, #1]
 800ef70:	1c4b      	adds	r3, r1, #1
 800ef72:	9303      	str	r3, [sp, #12]
 800ef74:	b342      	cbz	r2, 800efc8 <__hexnan+0x88>
 800ef76:	4610      	mov	r0, r2
 800ef78:	9105      	str	r1, [sp, #20]
 800ef7a:	9204      	str	r2, [sp, #16]
 800ef7c:	f7ff fd94 	bl	800eaa8 <__hexdig_fun>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	d151      	bne.n	800f028 <__hexnan+0xe8>
 800ef84:	9a04      	ldr	r2, [sp, #16]
 800ef86:	9905      	ldr	r1, [sp, #20]
 800ef88:	2a20      	cmp	r2, #32
 800ef8a:	d818      	bhi.n	800efbe <__hexnan+0x7e>
 800ef8c:	9b02      	ldr	r3, [sp, #8]
 800ef8e:	459b      	cmp	fp, r3
 800ef90:	dd13      	ble.n	800efba <__hexnan+0x7a>
 800ef92:	454c      	cmp	r4, r9
 800ef94:	d206      	bcs.n	800efa4 <__hexnan+0x64>
 800ef96:	2d07      	cmp	r5, #7
 800ef98:	dc04      	bgt.n	800efa4 <__hexnan+0x64>
 800ef9a:	462a      	mov	r2, r5
 800ef9c:	4649      	mov	r1, r9
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f7ff ffa8 	bl	800eef4 <L_shift>
 800efa4:	4544      	cmp	r4, r8
 800efa6:	d952      	bls.n	800f04e <__hexnan+0x10e>
 800efa8:	2300      	movs	r3, #0
 800efaa:	f1a4 0904 	sub.w	r9, r4, #4
 800efae:	f844 3c04 	str.w	r3, [r4, #-4]
 800efb2:	f8cd b008 	str.w	fp, [sp, #8]
 800efb6:	464c      	mov	r4, r9
 800efb8:	461d      	mov	r5, r3
 800efba:	9903      	ldr	r1, [sp, #12]
 800efbc:	e7d7      	b.n	800ef6e <__hexnan+0x2e>
 800efbe:	2a29      	cmp	r2, #41	@ 0x29
 800efc0:	d157      	bne.n	800f072 <__hexnan+0x132>
 800efc2:	3102      	adds	r1, #2
 800efc4:	f8ca 1000 	str.w	r1, [sl]
 800efc8:	f1bb 0f00 	cmp.w	fp, #0
 800efcc:	d051      	beq.n	800f072 <__hexnan+0x132>
 800efce:	454c      	cmp	r4, r9
 800efd0:	d206      	bcs.n	800efe0 <__hexnan+0xa0>
 800efd2:	2d07      	cmp	r5, #7
 800efd4:	dc04      	bgt.n	800efe0 <__hexnan+0xa0>
 800efd6:	462a      	mov	r2, r5
 800efd8:	4649      	mov	r1, r9
 800efda:	4620      	mov	r0, r4
 800efdc:	f7ff ff8a 	bl	800eef4 <L_shift>
 800efe0:	4544      	cmp	r4, r8
 800efe2:	d936      	bls.n	800f052 <__hexnan+0x112>
 800efe4:	f1a8 0204 	sub.w	r2, r8, #4
 800efe8:	4623      	mov	r3, r4
 800efea:	f853 1b04 	ldr.w	r1, [r3], #4
 800efee:	f842 1f04 	str.w	r1, [r2, #4]!
 800eff2:	429f      	cmp	r7, r3
 800eff4:	d2f9      	bcs.n	800efea <__hexnan+0xaa>
 800eff6:	1b3b      	subs	r3, r7, r4
 800eff8:	f023 0303 	bic.w	r3, r3, #3
 800effc:	3304      	adds	r3, #4
 800effe:	3401      	adds	r4, #1
 800f000:	3e03      	subs	r6, #3
 800f002:	42b4      	cmp	r4, r6
 800f004:	bf88      	it	hi
 800f006:	2304      	movhi	r3, #4
 800f008:	4443      	add	r3, r8
 800f00a:	2200      	movs	r2, #0
 800f00c:	f843 2b04 	str.w	r2, [r3], #4
 800f010:	429f      	cmp	r7, r3
 800f012:	d2fb      	bcs.n	800f00c <__hexnan+0xcc>
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	b91b      	cbnz	r3, 800f020 <__hexnan+0xe0>
 800f018:	4547      	cmp	r7, r8
 800f01a:	d128      	bne.n	800f06e <__hexnan+0x12e>
 800f01c:	2301      	movs	r3, #1
 800f01e:	603b      	str	r3, [r7, #0]
 800f020:	2005      	movs	r0, #5
 800f022:	b007      	add	sp, #28
 800f024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f028:	3501      	adds	r5, #1
 800f02a:	2d08      	cmp	r5, #8
 800f02c:	f10b 0b01 	add.w	fp, fp, #1
 800f030:	dd06      	ble.n	800f040 <__hexnan+0x100>
 800f032:	4544      	cmp	r4, r8
 800f034:	d9c1      	bls.n	800efba <__hexnan+0x7a>
 800f036:	2300      	movs	r3, #0
 800f038:	f844 3c04 	str.w	r3, [r4, #-4]
 800f03c:	2501      	movs	r5, #1
 800f03e:	3c04      	subs	r4, #4
 800f040:	6822      	ldr	r2, [r4, #0]
 800f042:	f000 000f 	and.w	r0, r0, #15
 800f046:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f04a:	6020      	str	r0, [r4, #0]
 800f04c:	e7b5      	b.n	800efba <__hexnan+0x7a>
 800f04e:	2508      	movs	r5, #8
 800f050:	e7b3      	b.n	800efba <__hexnan+0x7a>
 800f052:	9b01      	ldr	r3, [sp, #4]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d0dd      	beq.n	800f014 <__hexnan+0xd4>
 800f058:	f1c3 0320 	rsb	r3, r3, #32
 800f05c:	f04f 32ff 	mov.w	r2, #4294967295
 800f060:	40da      	lsrs	r2, r3
 800f062:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f066:	4013      	ands	r3, r2
 800f068:	f846 3c04 	str.w	r3, [r6, #-4]
 800f06c:	e7d2      	b.n	800f014 <__hexnan+0xd4>
 800f06e:	3f04      	subs	r7, #4
 800f070:	e7d0      	b.n	800f014 <__hexnan+0xd4>
 800f072:	2004      	movs	r0, #4
 800f074:	e7d5      	b.n	800f022 <__hexnan+0xe2>

0800f076 <__ascii_mbtowc>:
 800f076:	b082      	sub	sp, #8
 800f078:	b901      	cbnz	r1, 800f07c <__ascii_mbtowc+0x6>
 800f07a:	a901      	add	r1, sp, #4
 800f07c:	b142      	cbz	r2, 800f090 <__ascii_mbtowc+0x1a>
 800f07e:	b14b      	cbz	r3, 800f094 <__ascii_mbtowc+0x1e>
 800f080:	7813      	ldrb	r3, [r2, #0]
 800f082:	600b      	str	r3, [r1, #0]
 800f084:	7812      	ldrb	r2, [r2, #0]
 800f086:	1e10      	subs	r0, r2, #0
 800f088:	bf18      	it	ne
 800f08a:	2001      	movne	r0, #1
 800f08c:	b002      	add	sp, #8
 800f08e:	4770      	bx	lr
 800f090:	4610      	mov	r0, r2
 800f092:	e7fb      	b.n	800f08c <__ascii_mbtowc+0x16>
 800f094:	f06f 0001 	mvn.w	r0, #1
 800f098:	e7f8      	b.n	800f08c <__ascii_mbtowc+0x16>

0800f09a <_realloc_r>:
 800f09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f09e:	4680      	mov	r8, r0
 800f0a0:	4615      	mov	r5, r2
 800f0a2:	460c      	mov	r4, r1
 800f0a4:	b921      	cbnz	r1, 800f0b0 <_realloc_r+0x16>
 800f0a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0aa:	4611      	mov	r1, r2
 800f0ac:	f7fd beb2 	b.w	800ce14 <_malloc_r>
 800f0b0:	b92a      	cbnz	r2, 800f0be <_realloc_r+0x24>
 800f0b2:	f7fd fe3b 	bl	800cd2c <_free_r>
 800f0b6:	2400      	movs	r4, #0
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0be:	f000 f840 	bl	800f142 <_malloc_usable_size_r>
 800f0c2:	4285      	cmp	r5, r0
 800f0c4:	4606      	mov	r6, r0
 800f0c6:	d802      	bhi.n	800f0ce <_realloc_r+0x34>
 800f0c8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f0cc:	d8f4      	bhi.n	800f0b8 <_realloc_r+0x1e>
 800f0ce:	4629      	mov	r1, r5
 800f0d0:	4640      	mov	r0, r8
 800f0d2:	f7fd fe9f 	bl	800ce14 <_malloc_r>
 800f0d6:	4607      	mov	r7, r0
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	d0ec      	beq.n	800f0b6 <_realloc_r+0x1c>
 800f0dc:	42b5      	cmp	r5, r6
 800f0de:	462a      	mov	r2, r5
 800f0e0:	4621      	mov	r1, r4
 800f0e2:	bf28      	it	cs
 800f0e4:	4632      	movcs	r2, r6
 800f0e6:	f7ff fc43 	bl	800e970 <memcpy>
 800f0ea:	4621      	mov	r1, r4
 800f0ec:	4640      	mov	r0, r8
 800f0ee:	f7fd fe1d 	bl	800cd2c <_free_r>
 800f0f2:	463c      	mov	r4, r7
 800f0f4:	e7e0      	b.n	800f0b8 <_realloc_r+0x1e>

0800f0f6 <__ascii_wctomb>:
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	4608      	mov	r0, r1
 800f0fa:	b141      	cbz	r1, 800f10e <__ascii_wctomb+0x18>
 800f0fc:	2aff      	cmp	r2, #255	@ 0xff
 800f0fe:	d904      	bls.n	800f10a <__ascii_wctomb+0x14>
 800f100:	228a      	movs	r2, #138	@ 0x8a
 800f102:	601a      	str	r2, [r3, #0]
 800f104:	f04f 30ff 	mov.w	r0, #4294967295
 800f108:	4770      	bx	lr
 800f10a:	700a      	strb	r2, [r1, #0]
 800f10c:	2001      	movs	r0, #1
 800f10e:	4770      	bx	lr

0800f110 <fiprintf>:
 800f110:	b40e      	push	{r1, r2, r3}
 800f112:	b503      	push	{r0, r1, lr}
 800f114:	4601      	mov	r1, r0
 800f116:	ab03      	add	r3, sp, #12
 800f118:	4805      	ldr	r0, [pc, #20]	@ (800f130 <fiprintf+0x20>)
 800f11a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f11e:	6800      	ldr	r0, [r0, #0]
 800f120:	9301      	str	r3, [sp, #4]
 800f122:	f000 f83f 	bl	800f1a4 <_vfiprintf_r>
 800f126:	b002      	add	sp, #8
 800f128:	f85d eb04 	ldr.w	lr, [sp], #4
 800f12c:	b003      	add	sp, #12
 800f12e:	4770      	bx	lr
 800f130:	20000030 	.word	0x20000030

0800f134 <abort>:
 800f134:	b508      	push	{r3, lr}
 800f136:	2006      	movs	r0, #6
 800f138:	f000 fa08 	bl	800f54c <raise>
 800f13c:	2001      	movs	r0, #1
 800f13e:	f7f2 ff9b 	bl	8002078 <_exit>

0800f142 <_malloc_usable_size_r>:
 800f142:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f146:	1f18      	subs	r0, r3, #4
 800f148:	2b00      	cmp	r3, #0
 800f14a:	bfbc      	itt	lt
 800f14c:	580b      	ldrlt	r3, [r1, r0]
 800f14e:	18c0      	addlt	r0, r0, r3
 800f150:	4770      	bx	lr

0800f152 <__sfputc_r>:
 800f152:	6893      	ldr	r3, [r2, #8]
 800f154:	3b01      	subs	r3, #1
 800f156:	2b00      	cmp	r3, #0
 800f158:	b410      	push	{r4}
 800f15a:	6093      	str	r3, [r2, #8]
 800f15c:	da08      	bge.n	800f170 <__sfputc_r+0x1e>
 800f15e:	6994      	ldr	r4, [r2, #24]
 800f160:	42a3      	cmp	r3, r4
 800f162:	db01      	blt.n	800f168 <__sfputc_r+0x16>
 800f164:	290a      	cmp	r1, #10
 800f166:	d103      	bne.n	800f170 <__sfputc_r+0x1e>
 800f168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f16c:	f000 b932 	b.w	800f3d4 <__swbuf_r>
 800f170:	6813      	ldr	r3, [r2, #0]
 800f172:	1c58      	adds	r0, r3, #1
 800f174:	6010      	str	r0, [r2, #0]
 800f176:	7019      	strb	r1, [r3, #0]
 800f178:	4608      	mov	r0, r1
 800f17a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f17e:	4770      	bx	lr

0800f180 <__sfputs_r>:
 800f180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f182:	4606      	mov	r6, r0
 800f184:	460f      	mov	r7, r1
 800f186:	4614      	mov	r4, r2
 800f188:	18d5      	adds	r5, r2, r3
 800f18a:	42ac      	cmp	r4, r5
 800f18c:	d101      	bne.n	800f192 <__sfputs_r+0x12>
 800f18e:	2000      	movs	r0, #0
 800f190:	e007      	b.n	800f1a2 <__sfputs_r+0x22>
 800f192:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f196:	463a      	mov	r2, r7
 800f198:	4630      	mov	r0, r6
 800f19a:	f7ff ffda 	bl	800f152 <__sfputc_r>
 800f19e:	1c43      	adds	r3, r0, #1
 800f1a0:	d1f3      	bne.n	800f18a <__sfputs_r+0xa>
 800f1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1a4 <_vfiprintf_r>:
 800f1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a8:	460d      	mov	r5, r1
 800f1aa:	b09d      	sub	sp, #116	@ 0x74
 800f1ac:	4614      	mov	r4, r2
 800f1ae:	4698      	mov	r8, r3
 800f1b0:	4606      	mov	r6, r0
 800f1b2:	b118      	cbz	r0, 800f1bc <_vfiprintf_r+0x18>
 800f1b4:	6a03      	ldr	r3, [r0, #32]
 800f1b6:	b90b      	cbnz	r3, 800f1bc <_vfiprintf_r+0x18>
 800f1b8:	f7fc fea6 	bl	800bf08 <__sinit>
 800f1bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1be:	07d9      	lsls	r1, r3, #31
 800f1c0:	d405      	bmi.n	800f1ce <_vfiprintf_r+0x2a>
 800f1c2:	89ab      	ldrh	r3, [r5, #12]
 800f1c4:	059a      	lsls	r2, r3, #22
 800f1c6:	d402      	bmi.n	800f1ce <_vfiprintf_r+0x2a>
 800f1c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1ca:	f7fc ffc6 	bl	800c15a <__retarget_lock_acquire_recursive>
 800f1ce:	89ab      	ldrh	r3, [r5, #12]
 800f1d0:	071b      	lsls	r3, r3, #28
 800f1d2:	d501      	bpl.n	800f1d8 <_vfiprintf_r+0x34>
 800f1d4:	692b      	ldr	r3, [r5, #16]
 800f1d6:	b99b      	cbnz	r3, 800f200 <_vfiprintf_r+0x5c>
 800f1d8:	4629      	mov	r1, r5
 800f1da:	4630      	mov	r0, r6
 800f1dc:	f000 f938 	bl	800f450 <__swsetup_r>
 800f1e0:	b170      	cbz	r0, 800f200 <_vfiprintf_r+0x5c>
 800f1e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1e4:	07dc      	lsls	r4, r3, #31
 800f1e6:	d504      	bpl.n	800f1f2 <_vfiprintf_r+0x4e>
 800f1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ec:	b01d      	add	sp, #116	@ 0x74
 800f1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f2:	89ab      	ldrh	r3, [r5, #12]
 800f1f4:	0598      	lsls	r0, r3, #22
 800f1f6:	d4f7      	bmi.n	800f1e8 <_vfiprintf_r+0x44>
 800f1f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1fa:	f7fc ffaf 	bl	800c15c <__retarget_lock_release_recursive>
 800f1fe:	e7f3      	b.n	800f1e8 <_vfiprintf_r+0x44>
 800f200:	2300      	movs	r3, #0
 800f202:	9309      	str	r3, [sp, #36]	@ 0x24
 800f204:	2320      	movs	r3, #32
 800f206:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f20a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f20e:	2330      	movs	r3, #48	@ 0x30
 800f210:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f3c0 <_vfiprintf_r+0x21c>
 800f214:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f218:	f04f 0901 	mov.w	r9, #1
 800f21c:	4623      	mov	r3, r4
 800f21e:	469a      	mov	sl, r3
 800f220:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f224:	b10a      	cbz	r2, 800f22a <_vfiprintf_r+0x86>
 800f226:	2a25      	cmp	r2, #37	@ 0x25
 800f228:	d1f9      	bne.n	800f21e <_vfiprintf_r+0x7a>
 800f22a:	ebba 0b04 	subs.w	fp, sl, r4
 800f22e:	d00b      	beq.n	800f248 <_vfiprintf_r+0xa4>
 800f230:	465b      	mov	r3, fp
 800f232:	4622      	mov	r2, r4
 800f234:	4629      	mov	r1, r5
 800f236:	4630      	mov	r0, r6
 800f238:	f7ff ffa2 	bl	800f180 <__sfputs_r>
 800f23c:	3001      	adds	r0, #1
 800f23e:	f000 80a7 	beq.w	800f390 <_vfiprintf_r+0x1ec>
 800f242:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f244:	445a      	add	r2, fp
 800f246:	9209      	str	r2, [sp, #36]	@ 0x24
 800f248:	f89a 3000 	ldrb.w	r3, [sl]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	f000 809f 	beq.w	800f390 <_vfiprintf_r+0x1ec>
 800f252:	2300      	movs	r3, #0
 800f254:	f04f 32ff 	mov.w	r2, #4294967295
 800f258:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f25c:	f10a 0a01 	add.w	sl, sl, #1
 800f260:	9304      	str	r3, [sp, #16]
 800f262:	9307      	str	r3, [sp, #28]
 800f264:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f268:	931a      	str	r3, [sp, #104]	@ 0x68
 800f26a:	4654      	mov	r4, sl
 800f26c:	2205      	movs	r2, #5
 800f26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f272:	4853      	ldr	r0, [pc, #332]	@ (800f3c0 <_vfiprintf_r+0x21c>)
 800f274:	f7f0 ffe4 	bl	8000240 <memchr>
 800f278:	9a04      	ldr	r2, [sp, #16]
 800f27a:	b9d8      	cbnz	r0, 800f2b4 <_vfiprintf_r+0x110>
 800f27c:	06d1      	lsls	r1, r2, #27
 800f27e:	bf44      	itt	mi
 800f280:	2320      	movmi	r3, #32
 800f282:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f286:	0713      	lsls	r3, r2, #28
 800f288:	bf44      	itt	mi
 800f28a:	232b      	movmi	r3, #43	@ 0x2b
 800f28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f290:	f89a 3000 	ldrb.w	r3, [sl]
 800f294:	2b2a      	cmp	r3, #42	@ 0x2a
 800f296:	d015      	beq.n	800f2c4 <_vfiprintf_r+0x120>
 800f298:	9a07      	ldr	r2, [sp, #28]
 800f29a:	4654      	mov	r4, sl
 800f29c:	2000      	movs	r0, #0
 800f29e:	f04f 0c0a 	mov.w	ip, #10
 800f2a2:	4621      	mov	r1, r4
 800f2a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2a8:	3b30      	subs	r3, #48	@ 0x30
 800f2aa:	2b09      	cmp	r3, #9
 800f2ac:	d94b      	bls.n	800f346 <_vfiprintf_r+0x1a2>
 800f2ae:	b1b0      	cbz	r0, 800f2de <_vfiprintf_r+0x13a>
 800f2b0:	9207      	str	r2, [sp, #28]
 800f2b2:	e014      	b.n	800f2de <_vfiprintf_r+0x13a>
 800f2b4:	eba0 0308 	sub.w	r3, r0, r8
 800f2b8:	fa09 f303 	lsl.w	r3, r9, r3
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	9304      	str	r3, [sp, #16]
 800f2c0:	46a2      	mov	sl, r4
 800f2c2:	e7d2      	b.n	800f26a <_vfiprintf_r+0xc6>
 800f2c4:	9b03      	ldr	r3, [sp, #12]
 800f2c6:	1d19      	adds	r1, r3, #4
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	9103      	str	r1, [sp, #12]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	bfbb      	ittet	lt
 800f2d0:	425b      	neglt	r3, r3
 800f2d2:	f042 0202 	orrlt.w	r2, r2, #2
 800f2d6:	9307      	strge	r3, [sp, #28]
 800f2d8:	9307      	strlt	r3, [sp, #28]
 800f2da:	bfb8      	it	lt
 800f2dc:	9204      	strlt	r2, [sp, #16]
 800f2de:	7823      	ldrb	r3, [r4, #0]
 800f2e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2e2:	d10a      	bne.n	800f2fa <_vfiprintf_r+0x156>
 800f2e4:	7863      	ldrb	r3, [r4, #1]
 800f2e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2e8:	d132      	bne.n	800f350 <_vfiprintf_r+0x1ac>
 800f2ea:	9b03      	ldr	r3, [sp, #12]
 800f2ec:	1d1a      	adds	r2, r3, #4
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	9203      	str	r2, [sp, #12]
 800f2f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f2f6:	3402      	adds	r4, #2
 800f2f8:	9305      	str	r3, [sp, #20]
 800f2fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f3d0 <_vfiprintf_r+0x22c>
 800f2fe:	7821      	ldrb	r1, [r4, #0]
 800f300:	2203      	movs	r2, #3
 800f302:	4650      	mov	r0, sl
 800f304:	f7f0 ff9c 	bl	8000240 <memchr>
 800f308:	b138      	cbz	r0, 800f31a <_vfiprintf_r+0x176>
 800f30a:	9b04      	ldr	r3, [sp, #16]
 800f30c:	eba0 000a 	sub.w	r0, r0, sl
 800f310:	2240      	movs	r2, #64	@ 0x40
 800f312:	4082      	lsls	r2, r0
 800f314:	4313      	orrs	r3, r2
 800f316:	3401      	adds	r4, #1
 800f318:	9304      	str	r3, [sp, #16]
 800f31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f31e:	4829      	ldr	r0, [pc, #164]	@ (800f3c4 <_vfiprintf_r+0x220>)
 800f320:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f324:	2206      	movs	r2, #6
 800f326:	f7f0 ff8b 	bl	8000240 <memchr>
 800f32a:	2800      	cmp	r0, #0
 800f32c:	d03f      	beq.n	800f3ae <_vfiprintf_r+0x20a>
 800f32e:	4b26      	ldr	r3, [pc, #152]	@ (800f3c8 <_vfiprintf_r+0x224>)
 800f330:	bb1b      	cbnz	r3, 800f37a <_vfiprintf_r+0x1d6>
 800f332:	9b03      	ldr	r3, [sp, #12]
 800f334:	3307      	adds	r3, #7
 800f336:	f023 0307 	bic.w	r3, r3, #7
 800f33a:	3308      	adds	r3, #8
 800f33c:	9303      	str	r3, [sp, #12]
 800f33e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f340:	443b      	add	r3, r7
 800f342:	9309      	str	r3, [sp, #36]	@ 0x24
 800f344:	e76a      	b.n	800f21c <_vfiprintf_r+0x78>
 800f346:	fb0c 3202 	mla	r2, ip, r2, r3
 800f34a:	460c      	mov	r4, r1
 800f34c:	2001      	movs	r0, #1
 800f34e:	e7a8      	b.n	800f2a2 <_vfiprintf_r+0xfe>
 800f350:	2300      	movs	r3, #0
 800f352:	3401      	adds	r4, #1
 800f354:	9305      	str	r3, [sp, #20]
 800f356:	4619      	mov	r1, r3
 800f358:	f04f 0c0a 	mov.w	ip, #10
 800f35c:	4620      	mov	r0, r4
 800f35e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f362:	3a30      	subs	r2, #48	@ 0x30
 800f364:	2a09      	cmp	r2, #9
 800f366:	d903      	bls.n	800f370 <_vfiprintf_r+0x1cc>
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d0c6      	beq.n	800f2fa <_vfiprintf_r+0x156>
 800f36c:	9105      	str	r1, [sp, #20]
 800f36e:	e7c4      	b.n	800f2fa <_vfiprintf_r+0x156>
 800f370:	fb0c 2101 	mla	r1, ip, r1, r2
 800f374:	4604      	mov	r4, r0
 800f376:	2301      	movs	r3, #1
 800f378:	e7f0      	b.n	800f35c <_vfiprintf_r+0x1b8>
 800f37a:	ab03      	add	r3, sp, #12
 800f37c:	9300      	str	r3, [sp, #0]
 800f37e:	462a      	mov	r2, r5
 800f380:	4b12      	ldr	r3, [pc, #72]	@ (800f3cc <_vfiprintf_r+0x228>)
 800f382:	a904      	add	r1, sp, #16
 800f384:	4630      	mov	r0, r6
 800f386:	f7fb ff7f 	bl	800b288 <_printf_float>
 800f38a:	4607      	mov	r7, r0
 800f38c:	1c78      	adds	r0, r7, #1
 800f38e:	d1d6      	bne.n	800f33e <_vfiprintf_r+0x19a>
 800f390:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f392:	07d9      	lsls	r1, r3, #31
 800f394:	d405      	bmi.n	800f3a2 <_vfiprintf_r+0x1fe>
 800f396:	89ab      	ldrh	r3, [r5, #12]
 800f398:	059a      	lsls	r2, r3, #22
 800f39a:	d402      	bmi.n	800f3a2 <_vfiprintf_r+0x1fe>
 800f39c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f39e:	f7fc fedd 	bl	800c15c <__retarget_lock_release_recursive>
 800f3a2:	89ab      	ldrh	r3, [r5, #12]
 800f3a4:	065b      	lsls	r3, r3, #25
 800f3a6:	f53f af1f 	bmi.w	800f1e8 <_vfiprintf_r+0x44>
 800f3aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f3ac:	e71e      	b.n	800f1ec <_vfiprintf_r+0x48>
 800f3ae:	ab03      	add	r3, sp, #12
 800f3b0:	9300      	str	r3, [sp, #0]
 800f3b2:	462a      	mov	r2, r5
 800f3b4:	4b05      	ldr	r3, [pc, #20]	@ (800f3cc <_vfiprintf_r+0x228>)
 800f3b6:	a904      	add	r1, sp, #16
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	f7fc f9ed 	bl	800b798 <_printf_i>
 800f3be:	e7e4      	b.n	800f38a <_vfiprintf_r+0x1e6>
 800f3c0:	0800ff09 	.word	0x0800ff09
 800f3c4:	0800ff13 	.word	0x0800ff13
 800f3c8:	0800b289 	.word	0x0800b289
 800f3cc:	0800f181 	.word	0x0800f181
 800f3d0:	0800ff0f 	.word	0x0800ff0f

0800f3d4 <__swbuf_r>:
 800f3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3d6:	460e      	mov	r6, r1
 800f3d8:	4614      	mov	r4, r2
 800f3da:	4605      	mov	r5, r0
 800f3dc:	b118      	cbz	r0, 800f3e6 <__swbuf_r+0x12>
 800f3de:	6a03      	ldr	r3, [r0, #32]
 800f3e0:	b90b      	cbnz	r3, 800f3e6 <__swbuf_r+0x12>
 800f3e2:	f7fc fd91 	bl	800bf08 <__sinit>
 800f3e6:	69a3      	ldr	r3, [r4, #24]
 800f3e8:	60a3      	str	r3, [r4, #8]
 800f3ea:	89a3      	ldrh	r3, [r4, #12]
 800f3ec:	071a      	lsls	r2, r3, #28
 800f3ee:	d501      	bpl.n	800f3f4 <__swbuf_r+0x20>
 800f3f0:	6923      	ldr	r3, [r4, #16]
 800f3f2:	b943      	cbnz	r3, 800f406 <__swbuf_r+0x32>
 800f3f4:	4621      	mov	r1, r4
 800f3f6:	4628      	mov	r0, r5
 800f3f8:	f000 f82a 	bl	800f450 <__swsetup_r>
 800f3fc:	b118      	cbz	r0, 800f406 <__swbuf_r+0x32>
 800f3fe:	f04f 37ff 	mov.w	r7, #4294967295
 800f402:	4638      	mov	r0, r7
 800f404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f406:	6823      	ldr	r3, [r4, #0]
 800f408:	6922      	ldr	r2, [r4, #16]
 800f40a:	1a98      	subs	r0, r3, r2
 800f40c:	6963      	ldr	r3, [r4, #20]
 800f40e:	b2f6      	uxtb	r6, r6
 800f410:	4283      	cmp	r3, r0
 800f412:	4637      	mov	r7, r6
 800f414:	dc05      	bgt.n	800f422 <__swbuf_r+0x4e>
 800f416:	4621      	mov	r1, r4
 800f418:	4628      	mov	r0, r5
 800f41a:	f7ff fa45 	bl	800e8a8 <_fflush_r>
 800f41e:	2800      	cmp	r0, #0
 800f420:	d1ed      	bne.n	800f3fe <__swbuf_r+0x2a>
 800f422:	68a3      	ldr	r3, [r4, #8]
 800f424:	3b01      	subs	r3, #1
 800f426:	60a3      	str	r3, [r4, #8]
 800f428:	6823      	ldr	r3, [r4, #0]
 800f42a:	1c5a      	adds	r2, r3, #1
 800f42c:	6022      	str	r2, [r4, #0]
 800f42e:	701e      	strb	r6, [r3, #0]
 800f430:	6962      	ldr	r2, [r4, #20]
 800f432:	1c43      	adds	r3, r0, #1
 800f434:	429a      	cmp	r2, r3
 800f436:	d004      	beq.n	800f442 <__swbuf_r+0x6e>
 800f438:	89a3      	ldrh	r3, [r4, #12]
 800f43a:	07db      	lsls	r3, r3, #31
 800f43c:	d5e1      	bpl.n	800f402 <__swbuf_r+0x2e>
 800f43e:	2e0a      	cmp	r6, #10
 800f440:	d1df      	bne.n	800f402 <__swbuf_r+0x2e>
 800f442:	4621      	mov	r1, r4
 800f444:	4628      	mov	r0, r5
 800f446:	f7ff fa2f 	bl	800e8a8 <_fflush_r>
 800f44a:	2800      	cmp	r0, #0
 800f44c:	d0d9      	beq.n	800f402 <__swbuf_r+0x2e>
 800f44e:	e7d6      	b.n	800f3fe <__swbuf_r+0x2a>

0800f450 <__swsetup_r>:
 800f450:	b538      	push	{r3, r4, r5, lr}
 800f452:	4b29      	ldr	r3, [pc, #164]	@ (800f4f8 <__swsetup_r+0xa8>)
 800f454:	4605      	mov	r5, r0
 800f456:	6818      	ldr	r0, [r3, #0]
 800f458:	460c      	mov	r4, r1
 800f45a:	b118      	cbz	r0, 800f464 <__swsetup_r+0x14>
 800f45c:	6a03      	ldr	r3, [r0, #32]
 800f45e:	b90b      	cbnz	r3, 800f464 <__swsetup_r+0x14>
 800f460:	f7fc fd52 	bl	800bf08 <__sinit>
 800f464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f468:	0719      	lsls	r1, r3, #28
 800f46a:	d422      	bmi.n	800f4b2 <__swsetup_r+0x62>
 800f46c:	06da      	lsls	r2, r3, #27
 800f46e:	d407      	bmi.n	800f480 <__swsetup_r+0x30>
 800f470:	2209      	movs	r2, #9
 800f472:	602a      	str	r2, [r5, #0]
 800f474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f478:	81a3      	strh	r3, [r4, #12]
 800f47a:	f04f 30ff 	mov.w	r0, #4294967295
 800f47e:	e033      	b.n	800f4e8 <__swsetup_r+0x98>
 800f480:	0758      	lsls	r0, r3, #29
 800f482:	d512      	bpl.n	800f4aa <__swsetup_r+0x5a>
 800f484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f486:	b141      	cbz	r1, 800f49a <__swsetup_r+0x4a>
 800f488:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f48c:	4299      	cmp	r1, r3
 800f48e:	d002      	beq.n	800f496 <__swsetup_r+0x46>
 800f490:	4628      	mov	r0, r5
 800f492:	f7fd fc4b 	bl	800cd2c <_free_r>
 800f496:	2300      	movs	r3, #0
 800f498:	6363      	str	r3, [r4, #52]	@ 0x34
 800f49a:	89a3      	ldrh	r3, [r4, #12]
 800f49c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f4a0:	81a3      	strh	r3, [r4, #12]
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	6063      	str	r3, [r4, #4]
 800f4a6:	6923      	ldr	r3, [r4, #16]
 800f4a8:	6023      	str	r3, [r4, #0]
 800f4aa:	89a3      	ldrh	r3, [r4, #12]
 800f4ac:	f043 0308 	orr.w	r3, r3, #8
 800f4b0:	81a3      	strh	r3, [r4, #12]
 800f4b2:	6923      	ldr	r3, [r4, #16]
 800f4b4:	b94b      	cbnz	r3, 800f4ca <__swsetup_r+0x7a>
 800f4b6:	89a3      	ldrh	r3, [r4, #12]
 800f4b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f4bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4c0:	d003      	beq.n	800f4ca <__swsetup_r+0x7a>
 800f4c2:	4621      	mov	r1, r4
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	f000 f883 	bl	800f5d0 <__smakebuf_r>
 800f4ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4ce:	f013 0201 	ands.w	r2, r3, #1
 800f4d2:	d00a      	beq.n	800f4ea <__swsetup_r+0x9a>
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	60a2      	str	r2, [r4, #8]
 800f4d8:	6962      	ldr	r2, [r4, #20]
 800f4da:	4252      	negs	r2, r2
 800f4dc:	61a2      	str	r2, [r4, #24]
 800f4de:	6922      	ldr	r2, [r4, #16]
 800f4e0:	b942      	cbnz	r2, 800f4f4 <__swsetup_r+0xa4>
 800f4e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f4e6:	d1c5      	bne.n	800f474 <__swsetup_r+0x24>
 800f4e8:	bd38      	pop	{r3, r4, r5, pc}
 800f4ea:	0799      	lsls	r1, r3, #30
 800f4ec:	bf58      	it	pl
 800f4ee:	6962      	ldrpl	r2, [r4, #20]
 800f4f0:	60a2      	str	r2, [r4, #8]
 800f4f2:	e7f4      	b.n	800f4de <__swsetup_r+0x8e>
 800f4f4:	2000      	movs	r0, #0
 800f4f6:	e7f7      	b.n	800f4e8 <__swsetup_r+0x98>
 800f4f8:	20000030 	.word	0x20000030

0800f4fc <_raise_r>:
 800f4fc:	291f      	cmp	r1, #31
 800f4fe:	b538      	push	{r3, r4, r5, lr}
 800f500:	4605      	mov	r5, r0
 800f502:	460c      	mov	r4, r1
 800f504:	d904      	bls.n	800f510 <_raise_r+0x14>
 800f506:	2316      	movs	r3, #22
 800f508:	6003      	str	r3, [r0, #0]
 800f50a:	f04f 30ff 	mov.w	r0, #4294967295
 800f50e:	bd38      	pop	{r3, r4, r5, pc}
 800f510:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f512:	b112      	cbz	r2, 800f51a <_raise_r+0x1e>
 800f514:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f518:	b94b      	cbnz	r3, 800f52e <_raise_r+0x32>
 800f51a:	4628      	mov	r0, r5
 800f51c:	f000 f830 	bl	800f580 <_getpid_r>
 800f520:	4622      	mov	r2, r4
 800f522:	4601      	mov	r1, r0
 800f524:	4628      	mov	r0, r5
 800f526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f52a:	f000 b817 	b.w	800f55c <_kill_r>
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d00a      	beq.n	800f548 <_raise_r+0x4c>
 800f532:	1c59      	adds	r1, r3, #1
 800f534:	d103      	bne.n	800f53e <_raise_r+0x42>
 800f536:	2316      	movs	r3, #22
 800f538:	6003      	str	r3, [r0, #0]
 800f53a:	2001      	movs	r0, #1
 800f53c:	e7e7      	b.n	800f50e <_raise_r+0x12>
 800f53e:	2100      	movs	r1, #0
 800f540:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f544:	4620      	mov	r0, r4
 800f546:	4798      	blx	r3
 800f548:	2000      	movs	r0, #0
 800f54a:	e7e0      	b.n	800f50e <_raise_r+0x12>

0800f54c <raise>:
 800f54c:	4b02      	ldr	r3, [pc, #8]	@ (800f558 <raise+0xc>)
 800f54e:	4601      	mov	r1, r0
 800f550:	6818      	ldr	r0, [r3, #0]
 800f552:	f7ff bfd3 	b.w	800f4fc <_raise_r>
 800f556:	bf00      	nop
 800f558:	20000030 	.word	0x20000030

0800f55c <_kill_r>:
 800f55c:	b538      	push	{r3, r4, r5, lr}
 800f55e:	4d07      	ldr	r5, [pc, #28]	@ (800f57c <_kill_r+0x20>)
 800f560:	2300      	movs	r3, #0
 800f562:	4604      	mov	r4, r0
 800f564:	4608      	mov	r0, r1
 800f566:	4611      	mov	r1, r2
 800f568:	602b      	str	r3, [r5, #0]
 800f56a:	f7f2 fd75 	bl	8002058 <_kill>
 800f56e:	1c43      	adds	r3, r0, #1
 800f570:	d102      	bne.n	800f578 <_kill_r+0x1c>
 800f572:	682b      	ldr	r3, [r5, #0]
 800f574:	b103      	cbz	r3, 800f578 <_kill_r+0x1c>
 800f576:	6023      	str	r3, [r4, #0]
 800f578:	bd38      	pop	{r3, r4, r5, pc}
 800f57a:	bf00      	nop
 800f57c:	20002e80 	.word	0x20002e80

0800f580 <_getpid_r>:
 800f580:	f7f2 bd62 	b.w	8002048 <_getpid>

0800f584 <__swhatbuf_r>:
 800f584:	b570      	push	{r4, r5, r6, lr}
 800f586:	460c      	mov	r4, r1
 800f588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f58c:	2900      	cmp	r1, #0
 800f58e:	b096      	sub	sp, #88	@ 0x58
 800f590:	4615      	mov	r5, r2
 800f592:	461e      	mov	r6, r3
 800f594:	da0d      	bge.n	800f5b2 <__swhatbuf_r+0x2e>
 800f596:	89a3      	ldrh	r3, [r4, #12]
 800f598:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f59c:	f04f 0100 	mov.w	r1, #0
 800f5a0:	bf14      	ite	ne
 800f5a2:	2340      	movne	r3, #64	@ 0x40
 800f5a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f5a8:	2000      	movs	r0, #0
 800f5aa:	6031      	str	r1, [r6, #0]
 800f5ac:	602b      	str	r3, [r5, #0]
 800f5ae:	b016      	add	sp, #88	@ 0x58
 800f5b0:	bd70      	pop	{r4, r5, r6, pc}
 800f5b2:	466a      	mov	r2, sp
 800f5b4:	f000 f848 	bl	800f648 <_fstat_r>
 800f5b8:	2800      	cmp	r0, #0
 800f5ba:	dbec      	blt.n	800f596 <__swhatbuf_r+0x12>
 800f5bc:	9901      	ldr	r1, [sp, #4]
 800f5be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f5c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f5c6:	4259      	negs	r1, r3
 800f5c8:	4159      	adcs	r1, r3
 800f5ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f5ce:	e7eb      	b.n	800f5a8 <__swhatbuf_r+0x24>

0800f5d0 <__smakebuf_r>:
 800f5d0:	898b      	ldrh	r3, [r1, #12]
 800f5d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5d4:	079d      	lsls	r5, r3, #30
 800f5d6:	4606      	mov	r6, r0
 800f5d8:	460c      	mov	r4, r1
 800f5da:	d507      	bpl.n	800f5ec <__smakebuf_r+0x1c>
 800f5dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f5e0:	6023      	str	r3, [r4, #0]
 800f5e2:	6123      	str	r3, [r4, #16]
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	6163      	str	r3, [r4, #20]
 800f5e8:	b003      	add	sp, #12
 800f5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5ec:	ab01      	add	r3, sp, #4
 800f5ee:	466a      	mov	r2, sp
 800f5f0:	f7ff ffc8 	bl	800f584 <__swhatbuf_r>
 800f5f4:	9f00      	ldr	r7, [sp, #0]
 800f5f6:	4605      	mov	r5, r0
 800f5f8:	4639      	mov	r1, r7
 800f5fa:	4630      	mov	r0, r6
 800f5fc:	f7fd fc0a 	bl	800ce14 <_malloc_r>
 800f600:	b948      	cbnz	r0, 800f616 <__smakebuf_r+0x46>
 800f602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f606:	059a      	lsls	r2, r3, #22
 800f608:	d4ee      	bmi.n	800f5e8 <__smakebuf_r+0x18>
 800f60a:	f023 0303 	bic.w	r3, r3, #3
 800f60e:	f043 0302 	orr.w	r3, r3, #2
 800f612:	81a3      	strh	r3, [r4, #12]
 800f614:	e7e2      	b.n	800f5dc <__smakebuf_r+0xc>
 800f616:	89a3      	ldrh	r3, [r4, #12]
 800f618:	6020      	str	r0, [r4, #0]
 800f61a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f61e:	81a3      	strh	r3, [r4, #12]
 800f620:	9b01      	ldr	r3, [sp, #4]
 800f622:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f626:	b15b      	cbz	r3, 800f640 <__smakebuf_r+0x70>
 800f628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f62c:	4630      	mov	r0, r6
 800f62e:	f000 f81d 	bl	800f66c <_isatty_r>
 800f632:	b128      	cbz	r0, 800f640 <__smakebuf_r+0x70>
 800f634:	89a3      	ldrh	r3, [r4, #12]
 800f636:	f023 0303 	bic.w	r3, r3, #3
 800f63a:	f043 0301 	orr.w	r3, r3, #1
 800f63e:	81a3      	strh	r3, [r4, #12]
 800f640:	89a3      	ldrh	r3, [r4, #12]
 800f642:	431d      	orrs	r5, r3
 800f644:	81a5      	strh	r5, [r4, #12]
 800f646:	e7cf      	b.n	800f5e8 <__smakebuf_r+0x18>

0800f648 <_fstat_r>:
 800f648:	b538      	push	{r3, r4, r5, lr}
 800f64a:	4d07      	ldr	r5, [pc, #28]	@ (800f668 <_fstat_r+0x20>)
 800f64c:	2300      	movs	r3, #0
 800f64e:	4604      	mov	r4, r0
 800f650:	4608      	mov	r0, r1
 800f652:	4611      	mov	r1, r2
 800f654:	602b      	str	r3, [r5, #0]
 800f656:	f7f2 fd5f 	bl	8002118 <_fstat>
 800f65a:	1c43      	adds	r3, r0, #1
 800f65c:	d102      	bne.n	800f664 <_fstat_r+0x1c>
 800f65e:	682b      	ldr	r3, [r5, #0]
 800f660:	b103      	cbz	r3, 800f664 <_fstat_r+0x1c>
 800f662:	6023      	str	r3, [r4, #0]
 800f664:	bd38      	pop	{r3, r4, r5, pc}
 800f666:	bf00      	nop
 800f668:	20002e80 	.word	0x20002e80

0800f66c <_isatty_r>:
 800f66c:	b538      	push	{r3, r4, r5, lr}
 800f66e:	4d06      	ldr	r5, [pc, #24]	@ (800f688 <_isatty_r+0x1c>)
 800f670:	2300      	movs	r3, #0
 800f672:	4604      	mov	r4, r0
 800f674:	4608      	mov	r0, r1
 800f676:	602b      	str	r3, [r5, #0]
 800f678:	f7f2 fd5e 	bl	8002138 <_isatty>
 800f67c:	1c43      	adds	r3, r0, #1
 800f67e:	d102      	bne.n	800f686 <_isatty_r+0x1a>
 800f680:	682b      	ldr	r3, [r5, #0]
 800f682:	b103      	cbz	r3, 800f686 <_isatty_r+0x1a>
 800f684:	6023      	str	r3, [r4, #0]
 800f686:	bd38      	pop	{r3, r4, r5, pc}
 800f688:	20002e80 	.word	0x20002e80

0800f68c <_init>:
 800f68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f68e:	bf00      	nop
 800f690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f692:	bc08      	pop	{r3}
 800f694:	469e      	mov	lr, r3
 800f696:	4770      	bx	lr

0800f698 <_fini>:
 800f698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f69a:	bf00      	nop
 800f69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f69e:	bc08      	pop	{r3}
 800f6a0:	469e      	mov	lr, r3
 800f6a2:	4770      	bx	lr
